(self["webpackChunksee_the_code"] = self["webpackChunksee_the_code"] || []).push([["vendors-node_modules_xterm_lib_xterm_js"],{

/***/ "./node_modules/xterm/lib/xterm.js":
/*!*****************************************!*\
  !*** ./node_modules/xterm/lib/xterm.js ***!
  \*****************************************/
/***/ ((module) => {

!function(e,t){if(true)module.exports=t();else { var i, r; }}(self,(function(){return(()=>{"use strict";var e={4567:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AccessibilityManager=void 0;var o=r(9042),s=r(6114),a=r(9924),c=r(3656),l=r(844),h=r(5596),u=r(9631),f=function(e){function t(t,r){var i=e.call(this)||this;i._terminal=t,i._renderService=r,i._liveRegionLineCount=0,i._charsToConsume=[],i._charsToAnnounce="",i._accessibilityTreeRoot=document.createElement("div"),i._accessibilityTreeRoot.classList.add("xterm-accessibility"),i._accessibilityTreeRoot.tabIndex=0,i._rowContainer=document.createElement("div"),i._rowContainer.setAttribute("role","list"),i._rowContainer.classList.add("xterm-accessibility-tree"),i._rowElements=[];for(var n=0;n<i._terminal.rows;n++)i._rowElements[n]=i._createAccessibilityTreeNode(),i._rowContainer.appendChild(i._rowElements[n]);if(i._topBoundaryFocusListener=function(e){return i._onBoundaryFocus(e,0)},i._bottomBoundaryFocusListener=function(e){return i._onBoundaryFocus(e,1)},i._rowElements[0].addEventListener("focus",i._topBoundaryFocusListener),i._rowElements[i._rowElements.length-1].addEventListener("focus",i._bottomBoundaryFocusListener),i._refreshRowsDimensions(),i._accessibilityTreeRoot.appendChild(i._rowContainer),i._renderRowsDebouncer=new a.TimeBasedDebouncer(i._renderRows.bind(i)),i._refreshRows(),i._liveRegion=document.createElement("div"),i._liveRegion.classList.add("live-region"),i._liveRegion.setAttribute("aria-live","assertive"),i._accessibilityTreeRoot.appendChild(i._liveRegion),!i._terminal.element)throw new Error("Cannot enable accessibility before Terminal.open");return i._terminal.element.insertAdjacentElement("afterbegin",i._accessibilityTreeRoot),i.register(i._renderRowsDebouncer),i.register(i._terminal.onResize((function(e){return i._onResize(e.rows)}))),i.register(i._terminal.onRender((function(e){return i._refreshRows(e.start,e.end)}))),i.register(i._terminal.onScroll((function(){return i._refreshRows()}))),i.register(i._terminal.onA11yChar((function(e){return i._onChar(e)}))),i.register(i._terminal.onLineFeed((function(){return i._onChar("\n")}))),i.register(i._terminal.onA11yTab((function(e){return i._onTab(e)}))),i.register(i._terminal.onKey((function(e){return i._onKey(e.key)}))),i.register(i._terminal.onBlur((function(){return i._clearLiveRegion()}))),i.register(i._renderService.onDimensionsChange((function(){return i._refreshRowsDimensions()}))),i._screenDprMonitor=new h.ScreenDprMonitor,i.register(i._screenDprMonitor),i._screenDprMonitor.setListener((function(){return i._refreshRowsDimensions()})),i.register((0,c.addDisposableDomListener)(window,"resize",(function(){return i._refreshRowsDimensions()}))),i}return n(t,e),t.prototype.dispose=function(){e.prototype.dispose.call(this),(0,u.removeElementFromParent)(this._accessibilityTreeRoot),this._rowElements.length=0},t.prototype._onBoundaryFocus=function(e,t){var r=e.target,i=this._rowElements[0===t?1:this._rowElements.length-2];if(r.getAttribute("aria-posinset")!==(0===t?"1":""+this._terminal.buffer.lines.length)&&e.relatedTarget===i){var n,o;if(0===t?(n=r,o=this._rowElements.pop(),this._rowContainer.removeChild(o)):(n=this._rowElements.shift(),o=r,this._rowContainer.removeChild(n)),n.removeEventListener("focus",this._topBoundaryFocusListener),o.removeEventListener("focus",this._bottomBoundaryFocusListener),0===t){var s=this._createAccessibilityTreeNode();this._rowElements.unshift(s),this._rowContainer.insertAdjacentElement("afterbegin",s)}else s=this._createAccessibilityTreeNode(),this._rowElements.push(s),this._rowContainer.appendChild(s);this._rowElements[0].addEventListener("focus",this._topBoundaryFocusListener),this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._terminal.scrollLines(0===t?-1:1),this._rowElements[0===t?1:this._rowElements.length-2].focus(),e.preventDefault(),e.stopImmediatePropagation()}},t.prototype._onResize=function(e){this._rowElements[this._rowElements.length-1].removeEventListener("focus",this._bottomBoundaryFocusListener);for(var t=this._rowContainer.children.length;t<this._terminal.rows;t++)this._rowElements[t]=this._createAccessibilityTreeNode(),this._rowContainer.appendChild(this._rowElements[t]);for(;this._rowElements.length>e;)this._rowContainer.removeChild(this._rowElements.pop());this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._refreshRowsDimensions()},t.prototype._createAccessibilityTreeNode=function(){var e=document.createElement("div");return e.setAttribute("role","listitem"),e.tabIndex=-1,this._refreshRowDimensions(e),e},t.prototype._onTab=function(e){for(var t=0;t<e;t++)this._onChar(" ")},t.prototype._onChar=function(e){var t=this;this._liveRegionLineCount<21&&(this._charsToConsume.length>0?this._charsToConsume.shift()!==e&&(this._charsToAnnounce+=e):this._charsToAnnounce+=e,"\n"===e&&(this._liveRegionLineCount++,21===this._liveRegionLineCount&&(this._liveRegion.textContent+=o.tooMuchOutput)),s.isMac&&this._liveRegion.textContent&&this._liveRegion.textContent.length>0&&!this._liveRegion.parentNode&&setTimeout((function(){t._accessibilityTreeRoot.appendChild(t._liveRegion)}),0))},t.prototype._clearLiveRegion=function(){this._liveRegion.textContent="",this._liveRegionLineCount=0,s.isMac&&(0,u.removeElementFromParent)(this._liveRegion)},t.prototype._onKey=function(e){this._clearLiveRegion(),this._charsToConsume.push(e)},t.prototype._refreshRows=function(e,t){this._renderRowsDebouncer.refresh(e,t,this._terminal.rows)},t.prototype._renderRows=function(e,t){for(var r=this._terminal.buffer,i=r.lines.length.toString(),n=e;n<=t;n++){var o=r.translateBufferLineToString(r.ydisp+n,!0),s=(r.ydisp+n+1).toString(),a=this._rowElements[n];a&&(0===o.length?a.innerText="Â ":a.textContent=o,a.setAttribute("aria-posinset",s),a.setAttribute("aria-setsize",i))}this._announceCharacters()},t.prototype._refreshRowsDimensions=function(){if(this._renderService.dimensions.actualCellHeight){this._rowElements.length!==this._terminal.rows&&this._onResize(this._terminal.rows);for(var e=0;e<this._terminal.rows;e++)this._refreshRowDimensions(this._rowElements[e])}},t.prototype._refreshRowDimensions=function(e){e.style.height=this._renderService.dimensions.actualCellHeight+"px"},t.prototype._announceCharacters=function(){0!==this._charsToAnnounce.length&&(this._liveRegion.textContent+=this._charsToAnnounce,this._charsToAnnounce="")},t}(l.Disposable);t.AccessibilityManager=f},3614:(e,t)=>{function r(e){return e.replace(/\r?\n/g,"\r")}function i(e,t){return t?"[200~"+e+"[201~":e}function n(e,t,n){e=i(e=r(e),n.decPrivateModes.bracketedPasteMode),n.triggerDataEvent(e,!0),t.value=""}function o(e,t,r){var i=r.getBoundingClientRect(),n=e.clientX-i.left-10,o=e.clientY-i.top-10;t.style.width="20px",t.style.height="20px",t.style.left=n+"px",t.style.top=o+"px",t.style.zIndex="1000",t.focus()}Object.defineProperty(t,"__esModule",{value:!0}),t.rightClickHandler=t.moveTextAreaUnderMouseCursor=t.paste=t.handlePasteEvent=t.copyHandler=t.bracketTextForPaste=t.prepareTextForTerminal=void 0,t.prepareTextForTerminal=r,t.bracketTextForPaste=i,t.copyHandler=function(e,t){e.clipboardData&&e.clipboardData.setData("text/plain",t.selectionText),e.preventDefault()},t.handlePasteEvent=function(e,t,r){e.stopPropagation(),e.clipboardData&&n(e.clipboardData.getData("text/plain"),t,r)},t.paste=n,t.moveTextAreaUnderMouseCursor=o,t.rightClickHandler=function(e,t,r,i,n){o(e,t,r),n&&i.rightClickSelect(e),t.value=i.selectionText,t.select()}},4774:(e,t)=>{var r,i,n,o;function s(e){var t=e.toString(16);return t.length<2?"0"+t:t}function a(e,t){return e<t?(t+.05)/(e+.05):(e+.05)/(t+.05)}Object.defineProperty(t,"__esModule",{value:!0}),t.contrastRatio=t.toPaddedHex=t.rgba=t.rgb=t.css=t.color=t.channels=void 0,function(e){e.toCss=function(e,t,r,i){return void 0!==i?"#"+s(e)+s(t)+s(r)+s(i):"#"+s(e)+s(t)+s(r)},e.toRgba=function(e,t,r,i){return void 0===i&&(i=255),(e<<24|t<<16|r<<8|i)>>>0}}(r=t.channels||(t.channels={})),(i=t.color||(t.color={})).blend=function(e,t){var i=(255&t.rgba)/255;if(1===i)return{css:t.css,rgba:t.rgba};var n=t.rgba>>24&255,o=t.rgba>>16&255,s=t.rgba>>8&255,a=e.rgba>>24&255,c=e.rgba>>16&255,l=e.rgba>>8&255,h=a+Math.round((n-a)*i),u=c+Math.round((o-c)*i),f=l+Math.round((s-l)*i);return{css:r.toCss(h,u,f),rgba:r.toRgba(h,u,f)}},i.isOpaque=function(e){return 255==(255&e.rgba)},i.ensureContrastRatio=function(e,t,r){var i=o.ensureContrastRatio(e.rgba,t.rgba,r);if(i)return o.toColor(i>>24&255,i>>16&255,i>>8&255)},i.opaque=function(e){var t=(255|e.rgba)>>>0,i=o.toChannels(t),n=i[0],s=i[1],a=i[2];return{css:r.toCss(n,s,a),rgba:t}},i.opacity=function(e,t){var i=Math.round(255*t),n=o.toChannels(e.rgba),s=n[0],a=n[1],c=n[2];return{css:r.toCss(s,a,c,i),rgba:r.toRgba(s,a,c,i)}},i.toColorRGB=function(e){return[e.rgba>>24&255,e.rgba>>16&255,e.rgba>>8&255]},(t.css||(t.css={})).toColor=function(e){switch(e.length){case 7:return{css:e,rgba:(parseInt(e.slice(1),16)<<8|255)>>>0};case 9:return{css:e,rgba:parseInt(e.slice(1),16)>>>0}}throw new Error("css.toColor: Unsupported css format")},function(e){function t(e,t,r){var i=e/255,n=t/255,o=r/255;return.2126*(i<=.03928?i/12.92:Math.pow((i+.055)/1.055,2.4))+.7152*(n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4))+.0722*(o<=.03928?o/12.92:Math.pow((o+.055)/1.055,2.4))}e.relativeLuminance=function(e){return t(e>>16&255,e>>8&255,255&e)},e.relativeLuminance2=t}(n=t.rgb||(t.rgb={})),function(e){function t(e,t,r){for(var i=e>>24&255,o=e>>16&255,s=e>>8&255,c=t>>24&255,l=t>>16&255,h=t>>8&255,u=a(n.relativeLuminance2(c,h,l),n.relativeLuminance2(i,o,s));u<r&&(c>0||l>0||h>0);)c-=Math.max(0,Math.ceil(.1*c)),l-=Math.max(0,Math.ceil(.1*l)),h-=Math.max(0,Math.ceil(.1*h)),u=a(n.relativeLuminance2(c,h,l),n.relativeLuminance2(i,o,s));return(c<<24|l<<16|h<<8|255)>>>0}function i(e,t,r){for(var i=e>>24&255,o=e>>16&255,s=e>>8&255,c=t>>24&255,l=t>>16&255,h=t>>8&255,u=a(n.relativeLuminance2(c,h,l),n.relativeLuminance2(i,o,s));u<r&&(c<255||l<255||h<255);)c=Math.min(255,c+Math.ceil(.1*(255-c))),l=Math.min(255,l+Math.ceil(.1*(255-l))),h=Math.min(255,h+Math.ceil(.1*(255-h))),u=a(n.relativeLuminance2(c,h,l),n.relativeLuminance2(i,o,s));return(c<<24|l<<16|h<<8|255)>>>0}e.ensureContrastRatio=function(e,r,o){var s=n.relativeLuminance(e>>8),c=n.relativeLuminance(r>>8);if(a(s,c)<o)return c<s?t(e,r,o):i(e,r,o)},e.reduceLuminance=t,e.increaseLuminance=i,e.toChannels=function(e){return[e>>24&255,e>>16&255,e>>8&255,255&e]},e.toColor=function(e,t,i){return{css:r.toCss(e,t,i),rgba:r.toRgba(e,t,i)}}}(o=t.rgba||(t.rgba={})),t.toPaddedHex=s,t.contrastRatio=a},7239:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ColorContrastCache=void 0;var r=function(){function e(){this._color={},this._rgba={}}return e.prototype.clear=function(){this._color={},this._rgba={}},e.prototype.setCss=function(e,t,r){this._rgba[e]||(this._rgba[e]={}),this._rgba[e][t]=r},e.prototype.getCss=function(e,t){return this._rgba[e]?this._rgba[e][t]:void 0},e.prototype.setColor=function(e,t,r){this._color[e]||(this._color[e]={}),this._color[e][t]=r},e.prototype.getColor=function(e,t){return this._color[e]?this._color[e][t]:void 0},e}();t.ColorContrastCache=r},5680:function(e,t,r){var i=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var i,n=0,o=t.length;n<o;n++)!i&&n in t||(i||(i=Array.prototype.slice.call(t,0,n)),i[n]=t[n]);return e.concat(i||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.ColorManager=t.DEFAULT_ANSI_COLORS=void 0;var n=r(4774),o=r(7239),s=n.css.toColor("#ffffff"),a=n.css.toColor("#000000"),c=n.css.toColor("#ffffff"),l=n.css.toColor("#000000"),h={css:"rgba(255, 255, 255, 0.3)",rgba:4294967117};t.DEFAULT_ANSI_COLORS=Object.freeze(function(){for(var e=[n.css.toColor("#2e3436"),n.css.toColor("#cc0000"),n.css.toColor("#4e9a06"),n.css.toColor("#c4a000"),n.css.toColor("#3465a4"),n.css.toColor("#75507b"),n.css.toColor("#06989a"),n.css.toColor("#d3d7cf"),n.css.toColor("#555753"),n.css.toColor("#ef2929"),n.css.toColor("#8ae234"),n.css.toColor("#fce94f"),n.css.toColor("#729fcf"),n.css.toColor("#ad7fa8"),n.css.toColor("#34e2e2"),n.css.toColor("#eeeeec")],t=[0,95,135,175,215,255],r=0;r<216;r++){var i=t[r/36%6|0],o=t[r/6%6|0],s=t[r%6];e.push({css:n.channels.toCss(i,o,s),rgba:n.channels.toRgba(i,o,s)})}for(r=0;r<24;r++){var a=8+10*r;e.push({css:n.channels.toCss(a,a,a),rgba:n.channels.toRgba(a,a,a)})}return e}());var u=function(){function e(e,r){this.allowTransparency=r;var i=e.createElement("canvas");i.width=1,i.height=1;var u=i.getContext("2d");if(!u)throw new Error("Could not get rendering context");this._ctx=u,this._ctx.globalCompositeOperation="copy",this._litmusColor=this._ctx.createLinearGradient(0,0,1,1),this._contrastCache=new o.ColorContrastCache,this.colors={foreground:s,background:a,cursor:c,cursorAccent:l,selectionTransparent:h,selectionOpaque:n.color.blend(a,h),ansi:t.DEFAULT_ANSI_COLORS.slice(),contrastCache:this._contrastCache},this._updateRestoreColors()}return e.prototype.onOptionsChange=function(e){"minimumContrastRatio"===e&&this._contrastCache.clear()},e.prototype.setTheme=function(e){void 0===e&&(e={}),this.colors.foreground=this._parseColor(e.foreground,s),this.colors.background=this._parseColor(e.background,a),this.colors.cursor=this._parseColor(e.cursor,c,!0),this.colors.cursorAccent=this._parseColor(e.cursorAccent,l,!0),this.colors.selectionTransparent=this._parseColor(e.selection,h,!0),this.colors.selectionOpaque=n.color.blend(this.colors.background,this.colors.selectionTransparent),n.color.isOpaque(this.colors.selectionTransparent)&&(this.colors.selectionTransparent=n.color.opacity(this.colors.selectionTransparent,.3)),this.colors.ansi[0]=this._parseColor(e.black,t.DEFAULT_ANSI_COLORS[0]),this.colors.ansi[1]=this._parseColor(e.red,t.DEFAULT_ANSI_COLORS[1]),this.colors.ansi[2]=this._parseColor(e.green,t.DEFAULT_ANSI_COLORS[2]),this.colors.ansi[3]=this._parseColor(e.yellow,t.DEFAULT_ANSI_COLORS[3]),this.colors.ansi[4]=this._parseColor(e.blue,t.DEFAULT_ANSI_COLORS[4]),this.colors.ansi[5]=this._parseColor(e.magenta,t.DEFAULT_ANSI_COLORS[5]),this.colors.ansi[6]=this._parseColor(e.cyan,t.DEFAULT_ANSI_COLORS[6]),this.colors.ansi[7]=this._parseColor(e.white,t.DEFAULT_ANSI_COLORS[7]),this.colors.ansi[8]=this._parseColor(e.brightBlack,t.DEFAULT_ANSI_COLORS[8]),this.colors.ansi[9]=this._parseColor(e.brightRed,t.DEFAULT_ANSI_COLORS[9]),this.colors.ansi[10]=this._parseColor(e.brightGreen,t.DEFAULT_ANSI_COLORS[10]),this.colors.ansi[11]=this._parseColor(e.brightYellow,t.DEFAULT_ANSI_COLORS[11]),this.colors.ansi[12]=this._parseColor(e.brightBlue,t.DEFAULT_ANSI_COLORS[12]),this.colors.ansi[13]=this._parseColor(e.brightMagenta,t.DEFAULT_ANSI_COLORS[13]),this.colors.ansi[14]=this._parseColor(e.brightCyan,t.DEFAULT_ANSI_COLORS[14]),this.colors.ansi[15]=this._parseColor(e.brightWhite,t.DEFAULT_ANSI_COLORS[15]),this._contrastCache.clear(),this._updateRestoreColors()},e.prototype.restoreColor=function(e){if(void 0!==e)switch(e){case 256:this.colors.foreground=this._restoreColors.foreground;break;case 257:this.colors.background=this._restoreColors.background;break;case 258:this.colors.cursor=this._restoreColors.cursor;break;default:this.colors.ansi[e]=this._restoreColors.ansi[e]}else for(var t=0;t<this._restoreColors.ansi.length;++t)this.colors.ansi[t]=this._restoreColors.ansi[t]},e.prototype._updateRestoreColors=function(){this._restoreColors={foreground:this.colors.foreground,background:this.colors.background,cursor:this.colors.cursor,ansi:i([],this.colors.ansi,!0)}},e.prototype._parseColor=function(e,t,r){if(void 0===r&&(r=this.allowTransparency),void 0===e)return t;if(this._ctx.fillStyle=this._litmusColor,this._ctx.fillStyle=e,"string"!=typeof this._ctx.fillStyle)return console.warn("Color: "+e+" is invalid using fallback "+t.css),t;this._ctx.fillRect(0,0,1,1);var i=this._ctx.getImageData(0,0,1,1).data;if(255!==i[3]){if(!r)return console.warn("Color: "+e+" is using transparency, but allowTransparency is false. Using fallback "+t.css+"."),t;var o=this._ctx.fillStyle.substring(5,this._ctx.fillStyle.length-1).split(",").map((function(e){return Number(e)})),s=o[0],a=o[1],c=o[2],l=o[3],h=Math.round(255*l);return{rgba:n.channels.toRgba(s,a,c,h),css:e}}return{css:this._ctx.fillStyle,rgba:n.channels.toRgba(i[0],i[1],i[2],i[3])}},e}();t.ColorManager=u},9631:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.removeElementFromParent=void 0,t.removeElementFromParent=function(){for(var e,t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var i=0,n=t;i<n.length;i++){var o=n[i];null===(e=null==o?void 0:o.parentElement)||void 0===e||e.removeChild(o)}}},3656:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.addDisposableDomListener=void 0,t.addDisposableDomListener=function(e,t,r,i){e.addEventListener(t,r,i);var n=!1;return{dispose:function(){n||(n=!0,e.removeEventListener(t,r,i))}}}},3551:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.MouseZone=t.Linkifier=void 0;var o=r(8460),s=r(2585),a=function(){function e(e,t,r){this._bufferService=e,this._logService=t,this._unicodeService=r,this._linkMatchers=[],this._nextLinkMatcherId=0,this._onShowLinkUnderline=new o.EventEmitter,this._onHideLinkUnderline=new o.EventEmitter,this._onLinkTooltip=new o.EventEmitter,this._rowsToLinkify={start:void 0,end:void 0}}return Object.defineProperty(e.prototype,"onShowLinkUnderline",{get:function(){return this._onShowLinkUnderline.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onHideLinkUnderline",{get:function(){return this._onHideLinkUnderline.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onLinkTooltip",{get:function(){return this._onLinkTooltip.event},enumerable:!1,configurable:!0}),e.prototype.attachToDom=function(e,t){this._element=e,this._mouseZoneManager=t},e.prototype.linkifyRows=function(t,r){var i=this;this._mouseZoneManager&&(void 0===this._rowsToLinkify.start||void 0===this._rowsToLinkify.end?(this._rowsToLinkify.start=t,this._rowsToLinkify.end=r):(this._rowsToLinkify.start=Math.min(this._rowsToLinkify.start,t),this._rowsToLinkify.end=Math.max(this._rowsToLinkify.end,r)),this._mouseZoneManager.clearAll(t,r),this._rowsTimeoutId&&clearTimeout(this._rowsTimeoutId),this._rowsTimeoutId=setTimeout((function(){return i._linkifyRows()}),e._timeBeforeLatency))},e.prototype._linkifyRows=function(){this._rowsTimeoutId=void 0;var e=this._bufferService.buffer;if(void 0!==this._rowsToLinkify.start&&void 0!==this._rowsToLinkify.end){var t=e.ydisp+this._rowsToLinkify.start;if(!(t>=e.lines.length)){for(var r=e.ydisp+Math.min(this._rowsToLinkify.end,this._bufferService.rows)+1,i=Math.ceil(2e3/this._bufferService.cols),n=this._bufferService.buffer.iterator(!1,t,r,i,i);n.hasNext();)for(var o=n.next(),s=0;s<this._linkMatchers.length;s++)this._doLinkifyRow(o.range.first,o.content,this._linkMatchers[s]);this._rowsToLinkify.start=void 0,this._rowsToLinkify.end=void 0}}else this._logService.debug("_rowToLinkify was unset before _linkifyRows was called")},e.prototype.registerLinkMatcher=function(e,t,r){if(void 0===r&&(r={}),!t)throw new Error("handler must be defined");var i={id:this._nextLinkMatcherId++,regex:e,handler:t,matchIndex:r.matchIndex,validationCallback:r.validationCallback,hoverTooltipCallback:r.tooltipCallback,hoverLeaveCallback:r.leaveCallback,willLinkActivate:r.willLinkActivate,priority:r.priority||0};return this._addLinkMatcherToList(i),i.id},e.prototype._addLinkMatcherToList=function(e){if(0!==this._linkMatchers.length){for(var t=this._linkMatchers.length-1;t>=0;t--)if(e.priority<=this._linkMatchers[t].priority)return void this._linkMatchers.splice(t+1,0,e);this._linkMatchers.splice(0,0,e)}else this._linkMatchers.push(e)},e.prototype.deregisterLinkMatcher=function(e){for(var t=0;t<this._linkMatchers.length;t++)if(this._linkMatchers[t].id===e)return this._linkMatchers.splice(t,1),!0;return!1},e.prototype._doLinkifyRow=function(e,t,r){for(var i,n=this,o=new RegExp(r.regex.source,(r.regex.flags||"")+"g"),s=-1,a=function(){var a=i["number"!=typeof r.matchIndex?0:r.matchIndex];if(!a)return c._logService.debug("match found without corresponding matchIndex",i,r),"break";if(s=t.indexOf(a,s+1),o.lastIndex=s+a.length,s<0)return"break";var l=c._bufferService.buffer.stringIndexToBufferIndex(e,s);if(l[0]<0)return"break";var h=c._bufferService.buffer.lines.get(l[0]);if(!h)return"break";var u=h.getFg(l[1]),f=u?u>>9&511:void 0;r.validationCallback?r.validationCallback(a,(function(e){n._rowsTimeoutId||e&&n._addLink(l[1],l[0]-n._bufferService.buffer.ydisp,a,r,f)})):c._addLink(l[1],l[0]-c._bufferService.buffer.ydisp,a,r,f)},c=this;null!==(i=o.exec(t))&&"break"!==a(););},e.prototype._addLink=function(e,t,r,i,n){var o=this;if(this._mouseZoneManager&&this._element){var s=this._unicodeService.getStringCellWidth(r),a=e%this._bufferService.cols,l=t+Math.floor(e/this._bufferService.cols),h=(a+s)%this._bufferService.cols,u=l+Math.floor((a+s)/this._bufferService.cols);0===h&&(h=this._bufferService.cols,u--),this._mouseZoneManager.add(new c(a+1,l+1,h+1,u+1,(function(e){if(i.handler)return i.handler(e,r);var t=window.open();t?(t.opener=null,t.location.href=r):console.warn("Opening link blocked as opener could not be cleared")}),(function(){o._onShowLinkUnderline.fire(o._createLinkHoverEvent(a,l,h,u,n)),o._element.classList.add("xterm-cursor-pointer")}),(function(e){o._onLinkTooltip.fire(o._createLinkHoverEvent(a,l,h,u,n)),i.hoverTooltipCallback&&i.hoverTooltipCallback(e,r,{start:{x:a,y:l},end:{x:h,y:u}})}),(function(){o._onHideLinkUnderline.fire(o._createLinkHoverEvent(a,l,h,u,n)),o._element.classList.remove("xterm-cursor-pointer"),i.hoverLeaveCallback&&i.hoverLeaveCallback()}),(function(e){return!i.willLinkActivate||i.willLinkActivate(e,r)})))}},e.prototype._createLinkHoverEvent=function(e,t,r,i,n){return{x1:e,y1:t,x2:r,y2:i,cols:this._bufferService.cols,fg:n}},e._timeBeforeLatency=200,e=i([n(0,s.IBufferService),n(1,s.ILogService),n(2,s.IUnicodeService)],e)}();t.Linkifier=a;var c=function(e,t,r,i,n,o,s,a,c){this.x1=e,this.y1=t,this.x2=r,this.y2=i,this.clickCallback=n,this.hoverCallback=o,this.tooltipCallback=s,this.leaveCallback=a,this.willLinkActivate=c};t.MouseZone=c},6465:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.Linkifier2=void 0;var a=r(2585),c=r(8460),l=r(844),h=r(3656),u=function(e){function t(t){var r=e.call(this)||this;return r._bufferService=t,r._linkProviders=[],r._linkCacheDisposables=[],r._isMouseOut=!0,r._activeLine=-1,r._onShowLinkUnderline=r.register(new c.EventEmitter),r._onHideLinkUnderline=r.register(new c.EventEmitter),r.register((0,l.getDisposeArrayDisposable)(r._linkCacheDisposables)),r}return n(t,e),Object.defineProperty(t.prototype,"currentLink",{get:function(){return this._currentLink},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onShowLinkUnderline",{get:function(){return this._onShowLinkUnderline.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onHideLinkUnderline",{get:function(){return this._onHideLinkUnderline.event},enumerable:!1,configurable:!0}),t.prototype.registerLinkProvider=function(e){var t=this;return this._linkProviders.push(e),{dispose:function(){var r=t._linkProviders.indexOf(e);-1!==r&&t._linkProviders.splice(r,1)}}},t.prototype.attachToDom=function(e,t,r){var i=this;this._element=e,this._mouseService=t,this._renderService=r,this.register((0,h.addDisposableDomListener)(this._element,"mouseleave",(function(){i._isMouseOut=!0,i._clearCurrentLink()}))),this.register((0,h.addDisposableDomListener)(this._element,"mousemove",this._onMouseMove.bind(this))),this.register((0,h.addDisposableDomListener)(this._element,"click",this._onClick.bind(this)))},t.prototype._onMouseMove=function(e){if(this._lastMouseEvent=e,this._element&&this._mouseService){var t=this._positionFromMouseEvent(e,this._element,this._mouseService);if(t){this._isMouseOut=!1;for(var r=e.composedPath(),i=0;i<r.length;i++){var n=r[i];if(n.classList.contains("xterm"))break;if(n.classList.contains("xterm-hover"))return}this._lastBufferCell&&t.x===this._lastBufferCell.x&&t.y===this._lastBufferCell.y||(this._onHover(t),this._lastBufferCell=t)}}},t.prototype._onHover=function(e){if(this._activeLine!==e.y)return this._clearCurrentLink(),void this._askForLink(e,!1);this._currentLink&&this._linkAtPosition(this._currentLink.link,e)||(this._clearCurrentLink(),this._askForLink(e,!0))},t.prototype._askForLink=function(e,t){var r,i=this;this._activeProviderReplies&&t||(null===(r=this._activeProviderReplies)||void 0===r||r.forEach((function(e){null==e||e.forEach((function(e){e.link.dispose&&e.link.dispose()}))})),this._activeProviderReplies=new Map,this._activeLine=e.y);var n=!1;this._linkProviders.forEach((function(r,o){var s;t?(null===(s=i._activeProviderReplies)||void 0===s?void 0:s.get(o))&&(n=i._checkLinkProviderResult(o,e,n)):r.provideLinks(e.y,(function(t){var r,s;if(!i._isMouseOut){var a=null==t?void 0:t.map((function(e){return{link:e}}));null===(r=i._activeProviderReplies)||void 0===r||r.set(o,a),n=i._checkLinkProviderResult(o,e,n),(null===(s=i._activeProviderReplies)||void 0===s?void 0:s.size)===i._linkProviders.length&&i._removeIntersectingLinks(e.y,i._activeProviderReplies)}}))}))},t.prototype._removeIntersectingLinks=function(e,t){for(var r=new Set,i=0;i<t.size;i++){var n=t.get(i);if(n)for(var o=0;o<n.length;o++)for(var s=n[o],a=s.link.range.start.y<e?0:s.link.range.start.x,c=s.link.range.end.y>e?this._bufferService.cols:s.link.range.end.x,l=a;l<=c;l++){if(r.has(l)){n.splice(o--,1);break}r.add(l)}}},t.prototype._checkLinkProviderResult=function(e,t,r){var i,n=this;if(!this._activeProviderReplies)return r;for(var o=this._activeProviderReplies.get(e),s=!1,a=0;a<e;a++)this._activeProviderReplies.has(a)&&!this._activeProviderReplies.get(a)||(s=!0);if(!s&&o){var c=o.find((function(e){return n._linkAtPosition(e.link,t)}));c&&(r=!0,this._handleNewLink(c))}if(this._activeProviderReplies.size===this._linkProviders.length&&!r)for(a=0;a<this._activeProviderReplies.size;a++){var l=null===(i=this._activeProviderReplies.get(a))||void 0===i?void 0:i.find((function(e){return n._linkAtPosition(e.link,t)}));if(l){r=!0,this._handleNewLink(l);break}}return r},t.prototype._onClick=function(e){if(this._element&&this._mouseService&&this._currentLink){var t=this._positionFromMouseEvent(e,this._element,this._mouseService);t&&this._linkAtPosition(this._currentLink.link,t)&&this._currentLink.link.activate(e,this._currentLink.link.text)}},t.prototype._clearCurrentLink=function(e,t){this._element&&this._currentLink&&this._lastMouseEvent&&(!e||!t||this._currentLink.link.range.start.y>=e&&this._currentLink.link.range.end.y<=t)&&(this._linkLeave(this._element,this._currentLink.link,this._lastMouseEvent),this._currentLink=void 0,(0,l.disposeArray)(this._linkCacheDisposables))},t.prototype._handleNewLink=function(e){var t=this;if(this._element&&this._lastMouseEvent&&this._mouseService){var r=this._positionFromMouseEvent(this._lastMouseEvent,this._element,this._mouseService);r&&this._linkAtPosition(e.link,r)&&(this._currentLink=e,this._currentLink.state={decorations:{underline:void 0===e.link.decorations||e.link.decorations.underline,pointerCursor:void 0===e.link.decorations||e.link.decorations.pointerCursor},isHovered:!0},this._linkHover(this._element,e.link,this._lastMouseEvent),e.link.decorations={},Object.defineProperties(e.link.decorations,{pointerCursor:{get:function(){var e,r;return null===(r=null===(e=t._currentLink)||void 0===e?void 0:e.state)||void 0===r?void 0:r.decorations.pointerCursor},set:function(e){var r,i;(null===(r=t._currentLink)||void 0===r?void 0:r.state)&&t._currentLink.state.decorations.pointerCursor!==e&&(t._currentLink.state.decorations.pointerCursor=e,t._currentLink.state.isHovered&&(null===(i=t._element)||void 0===i||i.classList.toggle("xterm-cursor-pointer",e)))}},underline:{get:function(){var e,r;return null===(r=null===(e=t._currentLink)||void 0===e?void 0:e.state)||void 0===r?void 0:r.decorations.underline},set:function(r){var i,n,o;(null===(i=t._currentLink)||void 0===i?void 0:i.state)&&(null===(o=null===(n=t._currentLink)||void 0===n?void 0:n.state)||void 0===o?void 0:o.decorations.underline)!==r&&(t._currentLink.state.decorations.underline=r,t._currentLink.state.isHovered&&t._fireUnderlineEvent(e.link,r))}}}),this._renderService&&this._linkCacheDisposables.push(this._renderService.onRenderedBufferChange((function(e){var r=0===e.start?0:e.start+1+t._bufferService.buffer.ydisp;t._clearCurrentLink(r,e.end+1+t._bufferService.buffer.ydisp)}))))}},t.prototype._linkHover=function(e,t,r){var i;(null===(i=this._currentLink)||void 0===i?void 0:i.state)&&(this._currentLink.state.isHovered=!0,this._currentLink.state.decorations.underline&&this._fireUnderlineEvent(t,!0),this._currentLink.state.decorations.pointerCursor&&e.classList.add("xterm-cursor-pointer")),t.hover&&t.hover(r,t.text)},t.prototype._fireUnderlineEvent=function(e,t){var r=e.range,i=this._bufferService.buffer.ydisp,n=this._createLinkUnderlineEvent(r.start.x-1,r.start.y-i-1,r.end.x,r.end.y-i-1,void 0);(t?this._onShowLinkUnderline:this._onHideLinkUnderline).fire(n)},t.prototype._linkLeave=function(e,t,r){var i;(null===(i=this._currentLink)||void 0===i?void 0:i.state)&&(this._currentLink.state.isHovered=!1,this._currentLink.state.decorations.underline&&this._fireUnderlineEvent(t,!1),this._currentLink.state.decorations.pointerCursor&&e.classList.remove("xterm-cursor-pointer")),t.leave&&t.leave(r,t.text)},t.prototype._linkAtPosition=function(e,t){var r=e.range.start.y===e.range.end.y,i=e.range.start.y<t.y,n=e.range.end.y>t.y;return(r&&e.range.start.x<=t.x&&e.range.end.x>=t.x||i&&e.range.end.x>=t.x||n&&e.range.start.x<=t.x||i&&n)&&e.range.start.y<=t.y&&e.range.end.y>=t.y},t.prototype._positionFromMouseEvent=function(e,t,r){var i=r.getCoords(e,t,this._bufferService.cols,this._bufferService.rows);if(i)return{x:i[0],y:i[1]+this._bufferService.buffer.ydisp}},t.prototype._createLinkUnderlineEvent=function(e,t,r,i,n){return{x1:e,y1:t,x2:r,y2:i,cols:this._bufferService.cols,fg:n}},o([s(0,a.IBufferService)],t)}(l.Disposable);t.Linkifier2=u},9042:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.tooMuchOutput=t.promptLabel=void 0,t.promptLabel="Terminal input",t.tooMuchOutput="Too much output to announce, navigate to rows manually to read"},6954:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.MouseZoneManager=void 0;var a=r(844),c=r(3656),l=r(4725),h=r(2585),u=function(e){function t(t,r,i,n,o,s){var a=e.call(this)||this;return a._element=t,a._screenElement=r,a._bufferService=i,a._mouseService=n,a._selectionService=o,a._optionsService=s,a._zones=[],a._areZonesActive=!1,a._lastHoverCoords=[void 0,void 0],a._initialSelectionLength=0,a.register((0,c.addDisposableDomListener)(a._element,"mousedown",(function(e){return a._onMouseDown(e)}))),a._mouseMoveListener=function(e){return a._onMouseMove(e)},a._mouseLeaveListener=function(e){return a._onMouseLeave(e)},a._clickListener=function(e){return a._onClick(e)},a}return n(t,e),t.prototype.dispose=function(){e.prototype.dispose.call(this),this._deactivate()},t.prototype.add=function(e){this._zones.push(e),1===this._zones.length&&this._activate()},t.prototype.clearAll=function(e,t){if(0!==this._zones.length){e&&t||(e=0,t=this._bufferService.rows-1);for(var r=0;r<this._zones.length;r++){var i=this._zones[r];(i.y1>e&&i.y1<=t+1||i.y2>e&&i.y2<=t+1||i.y1<e&&i.y2>t+1)&&(this._currentZone&&this._currentZone===i&&(this._currentZone.leaveCallback(),this._currentZone=void 0),this._zones.splice(r--,1))}0===this._zones.length&&this._deactivate()}},t.prototype._activate=function(){this._areZonesActive||(this._areZonesActive=!0,this._element.addEventListener("mousemove",this._mouseMoveListener),this._element.addEventListener("mouseleave",this._mouseLeaveListener),this._element.addEventListener("click",this._clickListener))},t.prototype._deactivate=function(){this._areZonesActive&&(this._areZonesActive=!1,this._element.removeEventListener("mousemove",this._mouseMoveListener),this._element.removeEventListener("mouseleave",this._mouseLeaveListener),this._element.removeEventListener("click",this._clickListener))},t.prototype._onMouseMove=function(e){this._lastHoverCoords[0]===e.pageX&&this._lastHoverCoords[1]===e.pageY||(this._onHover(e),this._lastHoverCoords=[e.pageX,e.pageY])},t.prototype._onHover=function(e){var t=this,r=this._findZoneEventAt(e);r!==this._currentZone&&(this._currentZone&&(this._currentZone.leaveCallback(),this._currentZone=void 0,this._tooltipTimeout&&clearTimeout(this._tooltipTimeout)),r&&(this._currentZone=r,r.hoverCallback&&r.hoverCallback(e),this._tooltipTimeout=window.setTimeout((function(){return t._onTooltip(e)}),this._optionsService.rawOptions.linkTooltipHoverDuration)))},t.prototype._onTooltip=function(e){this._tooltipTimeout=void 0;var t=this._findZoneEventAt(e);null==t||t.tooltipCallback(e)},t.prototype._onMouseDown=function(e){if(this._initialSelectionLength=this._getSelectionLength(),this._areZonesActive){var t=this._findZoneEventAt(e);(null==t?void 0:t.willLinkActivate(e))&&(e.preventDefault(),e.stopImmediatePropagation())}},t.prototype._onMouseLeave=function(e){this._currentZone&&(this._currentZone.leaveCallback(),this._currentZone=void 0,this._tooltipTimeout&&clearTimeout(this._tooltipTimeout))},t.prototype._onClick=function(e){var t=this._findZoneEventAt(e),r=this._getSelectionLength();t&&r===this._initialSelectionLength&&(t.clickCallback(e),e.preventDefault(),e.stopImmediatePropagation())},t.prototype._getSelectionLength=function(){var e=this._selectionService.selectionText;return e?e.length:0},t.prototype._findZoneEventAt=function(e){var t=this._mouseService.getCoords(e,this._screenElement,this._bufferService.cols,this._bufferService.rows);if(t)for(var r=t[0],i=t[1],n=0;n<this._zones.length;n++){var o=this._zones[n];if(o.y1===o.y2){if(i===o.y1&&r>=o.x1&&r<o.x2)return o}else if(i===o.y1&&r>=o.x1||i===o.y2&&r<o.x2||i>o.y1&&i<o.y2)return o}},o([s(2,h.IBufferService),s(3,l.IMouseService),s(4,l.ISelectionService),s(5,h.IOptionsService)],t)}(a.Disposable);t.MouseZoneManager=u},6193:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RenderDebouncer=void 0;var r=function(){function e(e){this._renderCallback=e}return e.prototype.dispose=function(){this._animationFrame&&(window.cancelAnimationFrame(this._animationFrame),this._animationFrame=void 0)},e.prototype.refresh=function(e,t,r){var i=this;this._rowCount=r,e=void 0!==e?e:0,t=void 0!==t?t:this._rowCount-1,this._rowStart=void 0!==this._rowStart?Math.min(this._rowStart,e):e,this._rowEnd=void 0!==this._rowEnd?Math.max(this._rowEnd,t):t,this._animationFrame||(this._animationFrame=window.requestAnimationFrame((function(){return i._innerRefresh()})))},e.prototype._innerRefresh=function(){if(void 0!==this._rowStart&&void 0!==this._rowEnd&&void 0!==this._rowCount){var e=Math.max(this._rowStart,0),t=Math.min(this._rowEnd,this._rowCount-1);this._rowStart=void 0,this._rowEnd=void 0,this._animationFrame=void 0,this._renderCallback(e,t)}},e}();t.RenderDebouncer=r},5596:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.ScreenDprMonitor=void 0;var o=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._currentDevicePixelRatio=window.devicePixelRatio,t}return n(t,e),t.prototype.setListener=function(e){var t=this;this._listener&&this.clearListener(),this._listener=e,this._outerListener=function(){t._listener&&(t._listener(window.devicePixelRatio,t._currentDevicePixelRatio),t._updateDpr())},this._updateDpr()},t.prototype.dispose=function(){e.prototype.dispose.call(this),this.clearListener()},t.prototype._updateDpr=function(){var e;this._outerListener&&(null===(e=this._resolutionMediaMatchList)||void 0===e||e.removeListener(this._outerListener),this._currentDevicePixelRatio=window.devicePixelRatio,this._resolutionMediaMatchList=window.matchMedia("screen and (resolution: "+window.devicePixelRatio+"dppx)"),this._resolutionMediaMatchList.addListener(this._outerListener))},t.prototype.clearListener=function(){this._resolutionMediaMatchList&&this._listener&&this._outerListener&&(this._resolutionMediaMatchList.removeListener(this._outerListener),this._resolutionMediaMatchList=void 0,this._listener=void 0,this._outerListener=void 0)},t}(r(844).Disposable);t.ScreenDprMonitor=o},3236:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Terminal=void 0;var o=r(2950),s=r(1680),a=r(3614),c=r(2584),l=r(5435),h=r(3525),u=r(3551),f=r(9312),_=r(6114),d=r(3656),p=r(9042),v=r(357),g=r(6954),y=r(4567),m=r(1296),S=r(7399),C=r(8460),b=r(8437),w=r(5680),L=r(3230),E=r(4725),x=r(428),k=r(8934),M=r(6465),A=r(5114),R=r(8969),O=r(4774),T=r(4269),D=r(5941),B=r(7641),P="undefined"!=typeof window?window.document:null,I=function(e){function t(t){void 0===t&&(t={});var r=e.call(this,t)||this;return r.browser=_,r._keyDownHandled=!1,r._keyPressHandled=!1,r._unprocessedDeadKey=!1,r._onCursorMove=new C.EventEmitter,r._onKey=new C.EventEmitter,r._onRender=new C.EventEmitter,r._onSelectionChange=new C.EventEmitter,r._onTitleChange=new C.EventEmitter,r._onBell=new C.EventEmitter,r._onFocus=new C.EventEmitter,r._onBlur=new C.EventEmitter,r._onA11yCharEmitter=new C.EventEmitter,r._onA11yTabEmitter=new C.EventEmitter,r._setup(),r.linkifier=r._instantiationService.createInstance(u.Linkifier),r.linkifier2=r.register(r._instantiationService.createInstance(M.Linkifier2)),r.decorationService=r.register(r._instantiationService.createInstance(B.DecorationService)),r.register(r._inputHandler.onRequestBell((function(){return r.bell()}))),r.register(r._inputHandler.onRequestRefreshRows((function(e,t){return r.refresh(e,t)}))),r.register(r._inputHandler.onRequestSendFocus((function(){return r._reportFocus()}))),r.register(r._inputHandler.onRequestReset((function(){return r.reset()}))),r.register(r._inputHandler.onRequestWindowsOptionsReport((function(e){return r._reportWindowsOptions(e)}))),r.register(r._inputHandler.onColor((function(e){return r._handleColorEvent(e)}))),r.register((0,C.forwardEvent)(r._inputHandler.onCursorMove,r._onCursorMove)),r.register((0,C.forwardEvent)(r._inputHandler.onTitleChange,r._onTitleChange)),r.register((0,C.forwardEvent)(r._inputHandler.onA11yChar,r._onA11yCharEmitter)),r.register((0,C.forwardEvent)(r._inputHandler.onA11yTab,r._onA11yTabEmitter)),r.register(r._bufferService.onResize((function(e){return r._afterResize(e.cols,e.rows)}))),r}return n(t,e),Object.defineProperty(t.prototype,"onCursorMove",{get:function(){return this._onCursorMove.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onKey",{get:function(){return this._onKey.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRender",{get:function(){return this._onRender.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onSelectionChange",{get:function(){return this._onSelectionChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onTitleChange",{get:function(){return this._onTitleChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onBell",{get:function(){return this._onBell.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onFocus",{get:function(){return this._onFocus.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onBlur",{get:function(){return this._onBlur.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onA11yChar",{get:function(){return this._onA11yCharEmitter.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onA11yTab",{get:function(){return this._onA11yTabEmitter.event},enumerable:!1,configurable:!0}),t.prototype._handleColorEvent=function(e){var t,r;if(this._colorManager){for(var i=0,n=e;i<n.length;i++){var o=n[i],s=void 0,a="";switch(o.index){case 256:s="foreground",a="10";break;case 257:s="background",a="11";break;case 258:s="cursor",a="12";break;default:s="ansi",a="4;"+o.index}if(s)switch(o.type){case 0:var l=O.color.toColorRGB("ansi"===s?this._colorManager.colors.ansi[o.index]:this._colorManager.colors[s]);this.coreService.triggerDataEvent(c.C0.ESC+"]"+a+";"+(0,D.toRgbString)(l)+c.C0.BEL);break;case 1:"ansi"===s?this._colorManager.colors.ansi[o.index]=O.rgba.toColor.apply(O.rgba,o.color):this._colorManager.colors[s]=O.rgba.toColor.apply(O.rgba,o.color);break;case 2:this._colorManager.restoreColor(o.index)}}null===(t=this._renderService)||void 0===t||t.setColors(this._colorManager.colors),null===(r=this.viewport)||void 0===r||r.onThemeChange(this._colorManager.colors)}},t.prototype.dispose=function(){var t,r,i;this._isDisposed||(e.prototype.dispose.call(this),null===(t=this._renderService)||void 0===t||t.dispose(),this._customKeyEventHandler=void 0,this.write=function(){},null===(i=null===(r=this.element)||void 0===r?void 0:r.parentNode)||void 0===i||i.removeChild(this.element))},t.prototype._setup=function(){e.prototype._setup.call(this),this._customKeyEventHandler=void 0},Object.defineProperty(t.prototype,"buffer",{get:function(){return this.buffers.active},enumerable:!1,configurable:!0}),t.prototype.focus=function(){this.textarea&&this.textarea.focus({preventScroll:!0})},t.prototype._updateOptions=function(t){var r,i,n,o;switch(e.prototype._updateOptions.call(this,t),t){case"fontFamily":case"fontSize":null===(r=this._renderService)||void 0===r||r.clear(),null===(i=this._charSizeService)||void 0===i||i.measure();break;case"cursorBlink":case"cursorStyle":this.refresh(this.buffer.y,this.buffer.y);break;case"customGlyphs":case"drawBoldTextInBrightColors":case"letterSpacing":case"lineHeight":case"fontWeight":case"fontWeightBold":case"minimumContrastRatio":this._renderService&&(this._renderService.clear(),this._renderService.onResize(this.cols,this.rows),this.refresh(0,this.rows-1));break;case"rendererType":this._renderService&&(this._renderService.setRenderer(this._createRenderer()),this._renderService.onResize(this.cols,this.rows));break;case"scrollback":null===(n=this.viewport)||void 0===n||n.syncScrollArea();break;case"screenReaderMode":this.optionsService.rawOptions.screenReaderMode?!this._accessibilityManager&&this._renderService&&(this._accessibilityManager=new y.AccessibilityManager(this,this._renderService)):(null===(o=this._accessibilityManager)||void 0===o||o.dispose(),this._accessibilityManager=void 0);break;case"tabStopWidth":this.buffers.setupTabStops();break;case"theme":this._setTheme(this.optionsService.rawOptions.theme)}},t.prototype._onTextAreaFocus=function(e){this.coreService.decPrivateModes.sendFocus&&this.coreService.triggerDataEvent(c.C0.ESC+"[I"),this.updateCursorStyle(e),this.element.classList.add("focus"),this._showCursor(),this._onFocus.fire()},t.prototype.blur=function(){var e;return null===(e=this.textarea)||void 0===e?void 0:e.blur()},t.prototype._onTextAreaBlur=function(){this.textarea.value="",this.refresh(this.buffer.y,this.buffer.y),this.coreService.decPrivateModes.sendFocus&&this.coreService.triggerDataEvent(c.C0.ESC+"[O"),this.element.classList.remove("focus"),this._onBlur.fire()},t.prototype._syncTextArea=function(){if(this.textarea&&this.buffer.isCursorInViewport&&!this._compositionHelper.isComposing&&this._renderService){var e=this.buffer.ybase+this.buffer.y,t=this.buffer.lines.get(e);if(t){var r=Math.min(this.buffer.x,this.cols-1),i=this._renderService.dimensions.actualCellHeight,n=t.getWidth(r),o=this._renderService.dimensions.actualCellWidth*n,s=this.buffer.y*this._renderService.dimensions.actualCellHeight,a=r*this._renderService.dimensions.actualCellWidth;this.textarea.style.left=a+"px",this.textarea.style.top=s+"px",this.textarea.style.width=o+"px",this.textarea.style.height=i+"px",this.textarea.style.lineHeight=i+"px",this.textarea.style.zIndex="-5"}}},t.prototype._initGlobal=function(){var e=this;this._bindKeys(),this.register((0,d.addDisposableDomListener)(this.element,"copy",(function(t){e.hasSelection()&&(0,a.copyHandler)(t,e._selectionService)})));var t=function(t){return(0,a.handlePasteEvent)(t,e.textarea,e.coreService)};this.register((0,d.addDisposableDomListener)(this.textarea,"paste",t)),this.register((0,d.addDisposableDomListener)(this.element,"paste",t)),_.isFirefox?this.register((0,d.addDisposableDomListener)(this.element,"mousedown",(function(t){2===t.button&&(0,a.rightClickHandler)(t,e.textarea,e.screenElement,e._selectionService,e.options.rightClickSelectsWord)}))):this.register((0,d.addDisposableDomListener)(this.element,"contextmenu",(function(t){(0,a.rightClickHandler)(t,e.textarea,e.screenElement,e._selectionService,e.options.rightClickSelectsWord)}))),_.isLinux&&this.register((0,d.addDisposableDomListener)(this.element,"auxclick",(function(t){1===t.button&&(0,a.moveTextAreaUnderMouseCursor)(t,e.textarea,e.screenElement)})))},t.prototype._bindKeys=function(){var e=this;this.register((0,d.addDisposableDomListener)(this.textarea,"keyup",(function(t){return e._keyUp(t)}),!0)),this.register((0,d.addDisposableDomListener)(this.textarea,"keydown",(function(t){return e._keyDown(t)}),!0)),this.register((0,d.addDisposableDomListener)(this.textarea,"keypress",(function(t){return e._keyPress(t)}),!0)),this.register((0,d.addDisposableDomListener)(this.textarea,"compositionstart",(function(){return e._compositionHelper.compositionstart()}))),this.register((0,d.addDisposableDomListener)(this.textarea,"compositionupdate",(function(t){return e._compositionHelper.compositionupdate(t)}))),this.register((0,d.addDisposableDomListener)(this.textarea,"compositionend",(function(){return e._compositionHelper.compositionend()}))),this.register((0,d.addDisposableDomListener)(this.textarea,"input",(function(t){return e._inputEvent(t)}),!0)),this.register(this.onRender((function(){return e._compositionHelper.updateCompositionElements()}))),this.register(this.onRender((function(t){return e._queueLinkification(t.start,t.end)})))},t.prototype.open=function(e){var t=this;if(!e)throw new Error("Terminal requires a parent element.");e.isConnected||this._logService.debug("Terminal.open was called on an element that was not attached to the DOM"),this._document=e.ownerDocument,this.element=this._document.createElement("div"),this.element.dir="ltr",this.element.classList.add("terminal"),this.element.classList.add("xterm"),this.element.setAttribute("tabindex","0"),e.appendChild(this.element);var r=P.createDocumentFragment();this._viewportElement=P.createElement("div"),this._viewportElement.classList.add("xterm-viewport"),r.appendChild(this._viewportElement),this._viewportScrollArea=P.createElement("div"),this._viewportScrollArea.classList.add("xterm-scroll-area"),this._viewportElement.appendChild(this._viewportScrollArea),this.screenElement=P.createElement("div"),this.screenElement.classList.add("xterm-screen"),this._helperContainer=P.createElement("div"),this._helperContainer.classList.add("xterm-helpers"),this.screenElement.appendChild(this._helperContainer),r.appendChild(this.screenElement),this.textarea=P.createElement("textarea"),this.textarea.classList.add("xterm-helper-textarea"),this.textarea.setAttribute("aria-label",p.promptLabel),this.textarea.setAttribute("aria-multiline","false"),this.textarea.setAttribute("autocorrect","off"),this.textarea.setAttribute("autocapitalize","off"),this.textarea.setAttribute("spellcheck","false"),this.textarea.tabIndex=0,this.register((0,d.addDisposableDomListener)(this.textarea,"focus",(function(e){return t._onTextAreaFocus(e)}))),this.register((0,d.addDisposableDomListener)(this.textarea,"blur",(function(){return t._onTextAreaBlur()}))),this._helperContainer.appendChild(this.textarea);var i=this._instantiationService.createInstance(A.CoreBrowserService,this.textarea);this._instantiationService.setService(E.ICoreBrowserService,i),this._charSizeService=this._instantiationService.createInstance(x.CharSizeService,this._document,this._helperContainer),this._instantiationService.setService(E.ICharSizeService,this._charSizeService),this._theme=this.options.theme||this._theme,this._colorManager=new w.ColorManager(P,this.options.allowTransparency),this.register(this.optionsService.onOptionChange((function(e){return t._colorManager.onOptionsChange(e)}))),this._colorManager.setTheme(this._theme),this._characterJoinerService=this._instantiationService.createInstance(T.CharacterJoinerService),this._instantiationService.setService(E.ICharacterJoinerService,this._characterJoinerService);var n=this._createRenderer();this._renderService=this.register(this._instantiationService.createInstance(L.RenderService,n,this.rows,this.screenElement)),this._instantiationService.setService(E.IRenderService,this._renderService),this.register(this._renderService.onRenderedBufferChange((function(e){return t._onRender.fire(e)}))),this.onResize((function(e){return t._renderService.resize(e.cols,e.rows)})),this._compositionView=P.createElement("div"),this._compositionView.classList.add("composition-view"),this._compositionHelper=this._instantiationService.createInstance(o.CompositionHelper,this.textarea,this._compositionView),this._helperContainer.appendChild(this._compositionView),this.element.appendChild(r),this._soundService=this._instantiationService.createInstance(v.SoundService),this._instantiationService.setService(E.ISoundService,this._soundService),this._mouseService=this._instantiationService.createInstance(k.MouseService),this._instantiationService.setService(E.IMouseService,this._mouseService),this.viewport=this._instantiationService.createInstance(s.Viewport,(function(e){return t.scrollLines(e,!0,1)}),this._viewportElement,this._viewportScrollArea,this.element),this.viewport.onThemeChange(this._colorManager.colors),this.register(this._inputHandler.onRequestSyncScrollBar((function(){return t.viewport.syncScrollArea()}))),this.register(this.viewport),this.register(this.onCursorMove((function(){t._renderService.onCursorMove(),t._syncTextArea()}))),this.register(this.onResize((function(){return t._renderService.onResize(t.cols,t.rows)}))),this.register(this.onBlur((function(){return t._renderService.onBlur()}))),this.register(this.onFocus((function(){return t._renderService.onFocus()}))),this.register(this._renderService.onDimensionsChange((function(){return t.viewport.syncScrollArea()}))),this._selectionService=this.register(this._instantiationService.createInstance(f.SelectionService,this.element,this.screenElement,this.linkifier2)),this._instantiationService.setService(E.ISelectionService,this._selectionService),this.register(this._selectionService.onRequestScrollLines((function(e){return t.scrollLines(e.amount,e.suppressScrollEvent)}))),this.register(this._selectionService.onSelectionChange((function(){return t._onSelectionChange.fire()}))),this.register(this._selectionService.onRequestRedraw((function(e){return t._renderService.onSelectionChanged(e.start,e.end,e.columnSelectMode)}))),this.register(this._selectionService.onLinuxMouseSelection((function(e){t.textarea.value=e,t.textarea.focus(),t.textarea.select()}))),this.register(this._onScroll.event((function(e){t.viewport.syncScrollArea(),t._selectionService.refresh()}))),this.register((0,d.addDisposableDomListener)(this._viewportElement,"scroll",(function(){return t._selectionService.refresh()}))),this._mouseZoneManager=this._instantiationService.createInstance(g.MouseZoneManager,this.element,this.screenElement),this.register(this._mouseZoneManager),this.register(this.onScroll((function(){return t._mouseZoneManager.clearAll()}))),this.linkifier.attachToDom(this.element,this._mouseZoneManager),this.linkifier2.attachToDom(this.screenElement,this._mouseService,this._renderService),this.decorationService.attachToDom(this.screenElement,this._renderService,this._bufferService),this.register((0,d.addDisposableDomListener)(this.element,"mousedown",(function(e){return t._selectionService.onMouseDown(e)}))),this.coreMouseService.areMouseEventsActive?(this._selectionService.disable(),this.element.classList.add("enable-mouse-events")):this._selectionService.enable(),this.options.screenReaderMode&&(this._accessibilityManager=new y.AccessibilityManager(this,this._renderService)),this._charSizeService.measure(),this.refresh(0,this.rows-1),this._initGlobal(),this.bindMouse()},t.prototype._createRenderer=function(){switch(this.options.rendererType){case"canvas":return this._instantiationService.createInstance(h.Renderer,this._colorManager.colors,this.screenElement,this.linkifier,this.linkifier2);case"dom":return this._instantiationService.createInstance(m.DomRenderer,this._colorManager.colors,this.element,this.screenElement,this._viewportElement,this.linkifier,this.linkifier2);default:throw new Error('Unrecognized rendererType "'+this.options.rendererType+'"')}},t.prototype._setTheme=function(e){var t,r,i;this._theme=e,null===(t=this._colorManager)||void 0===t||t.setTheme(e),null===(r=this._renderService)||void 0===r||r.setColors(this._colorManager.colors),null===(i=this.viewport)||void 0===i||i.onThemeChange(this._colorManager.colors)},t.prototype.bindMouse=function(){var e=this,t=this,r=this.element;function i(e){var r,i,n=t._mouseService.getRawByteCoords(e,t.screenElement,t.cols,t.rows);if(!n)return!1;switch(e.overrideType||e.type){case"mousemove":i=32,void 0===e.buttons?(r=3,void 0!==e.button&&(r=e.button<3?e.button:3)):r=1&e.buttons?0:4&e.buttons?1:2&e.buttons?2:3;break;case"mouseup":i=0,r=e.button<3?e.button:3;break;case"mousedown":i=1,r=e.button<3?e.button:3;break;case"wheel":0!==e.deltaY&&(i=e.deltaY<0?0:1),r=4;break;default:return!1}return!(void 0===i||void 0===r||r>4)&&t.coreMouseService.triggerMouseEvent({col:n.x-33,row:n.y-33,button:r,action:i,ctrl:e.ctrlKey,alt:e.altKey,shift:e.shiftKey})}var n={mouseup:null,wheel:null,mousedrag:null,mousemove:null},o=function(t){return i(t),t.buttons||(e._document.removeEventListener("mouseup",n.mouseup),n.mousedrag&&e._document.removeEventListener("mousemove",n.mousedrag)),e.cancel(t)},s=function(t){return i(t),e.cancel(t,!0)},a=function(e){e.buttons&&i(e)},l=function(e){e.buttons||i(e)};this.register(this.coreMouseService.onProtocolChange((function(t){t?("debug"===e.optionsService.rawOptions.logLevel&&e._logService.debug("Binding to mouse events:",e.coreMouseService.explainEvents(t)),e.element.classList.add("enable-mouse-events"),e._selectionService.disable()):(e._logService.debug("Unbinding from mouse events."),e.element.classList.remove("enable-mouse-events"),e._selectionService.enable()),8&t?n.mousemove||(r.addEventListener("mousemove",l),n.mousemove=l):(r.removeEventListener("mousemove",n.mousemove),n.mousemove=null),16&t?n.wheel||(r.addEventListener("wheel",s,{passive:!1}),n.wheel=s):(r.removeEventListener("wheel",n.wheel),n.wheel=null),2&t?n.mouseup||(n.mouseup=o):(e._document.removeEventListener("mouseup",n.mouseup),n.mouseup=null),4&t?n.mousedrag||(n.mousedrag=a):(e._document.removeEventListener("mousemove",n.mousedrag),n.mousedrag=null)}))),this.coreMouseService.activeProtocol=this.coreMouseService.activeProtocol,this.register((0,d.addDisposableDomListener)(r,"mousedown",(function(t){if(t.preventDefault(),e.focus(),e.coreMouseService.areMouseEventsActive&&!e._selectionService.shouldForceSelection(t))return i(t),n.mouseup&&e._document.addEventListener("mouseup",n.mouseup),n.mousedrag&&e._document.addEventListener("mousemove",n.mousedrag),e.cancel(t)}))),this.register((0,d.addDisposableDomListener)(r,"wheel",(function(t){if(!n.wheel){if(!e.buffer.hasScrollback){var r=e.viewport.getLinesScrolled(t);if(0===r)return;for(var i=c.C0.ESC+(e.coreService.decPrivateModes.applicationCursorKeys?"O":"[")+(t.deltaY<0?"A":"B"),o="",s=0;s<Math.abs(r);s++)o+=i;return e.coreService.triggerDataEvent(o,!0),e.cancel(t,!0)}return e.viewport.onWheel(t)?e.cancel(t):void 0}}),{passive:!1})),this.register((0,d.addDisposableDomListener)(r,"touchstart",(function(t){if(!e.coreMouseService.areMouseEventsActive)return e.viewport.onTouchStart(t),e.cancel(t)}),{passive:!0})),this.register((0,d.addDisposableDomListener)(r,"touchmove",(function(t){if(!e.coreMouseService.areMouseEventsActive)return e.viewport.onTouchMove(t)?void 0:e.cancel(t)}),{passive:!1}))},t.prototype.refresh=function(e,t){var r;null===(r=this._renderService)||void 0===r||r.refreshRows(e,t)},t.prototype._queueLinkification=function(e,t){var r;null===(r=this.linkifier)||void 0===r||r.linkifyRows(e,t)},t.prototype.updateCursorStyle=function(e){var t;(null===(t=this._selectionService)||void 0===t?void 0:t.shouldColumnSelect(e))?this.element.classList.add("column-select"):this.element.classList.remove("column-select")},t.prototype._showCursor=function(){this.coreService.isCursorInitialized||(this.coreService.isCursorInitialized=!0,this.refresh(this.buffer.y,this.buffer.y))},t.prototype.scrollLines=function(t,r,i){void 0===i&&(i=0),e.prototype.scrollLines.call(this,t,r,i),this.refresh(0,this.rows-1)},t.prototype.paste=function(e){(0,a.paste)(e,this.textarea,this.coreService)},t.prototype.attachCustomKeyEventHandler=function(e){this._customKeyEventHandler=e},t.prototype.registerLinkMatcher=function(e,t,r){var i=this.linkifier.registerLinkMatcher(e,t,r);return this.refresh(0,this.rows-1),i},t.prototype.deregisterLinkMatcher=function(e){this.linkifier.deregisterLinkMatcher(e)&&this.refresh(0,this.rows-1)},t.prototype.registerLinkProvider=function(e){return this.linkifier2.registerLinkProvider(e)},t.prototype.registerCharacterJoiner=function(e){if(!this._characterJoinerService)throw new Error("Terminal must be opened first");var t=this._characterJoinerService.register(e);return this.refresh(0,this.rows-1),t},t.prototype.deregisterCharacterJoiner=function(e){if(!this._characterJoinerService)throw new Error("Terminal must be opened first");this._characterJoinerService.deregister(e)&&this.refresh(0,this.rows-1)},Object.defineProperty(t.prototype,"markers",{get:function(){return this.buffer.markers},enumerable:!1,configurable:!0}),t.prototype.addMarker=function(e){if(this.buffer===this.buffers.normal)return this.buffer.addMarker(this.buffer.ybase+this.buffer.y+e)},t.prototype.registerDecoration=function(e){return this.decorationService.registerDecoration(e)},t.prototype.hasSelection=function(){return!!this._selectionService&&this._selectionService.hasSelection},t.prototype.select=function(e,t,r){this._selectionService.setSelection(e,t,r)},t.prototype.getSelection=function(){return this._selectionService?this._selectionService.selectionText:""},t.prototype.getSelectionPosition=function(){if(this._selectionService&&this._selectionService.hasSelection)return{startColumn:this._selectionService.selectionStart[0],startRow:this._selectionService.selectionStart[1],endColumn:this._selectionService.selectionEnd[0],endRow:this._selectionService.selectionEnd[1]}},t.prototype.clearSelection=function(){var e;null===(e=this._selectionService)||void 0===e||e.clearSelection()},t.prototype.selectAll=function(){var e;null===(e=this._selectionService)||void 0===e||e.selectAll()},t.prototype.selectLines=function(e,t){var r;null===(r=this._selectionService)||void 0===r||r.selectLines(e,t)},t.prototype._keyDown=function(e){if(this._keyDownHandled=!1,this._customKeyEventHandler&&!1===this._customKeyEventHandler(e))return!1;if(!this._compositionHelper.keydown(e))return this.buffer.ybase!==this.buffer.ydisp&&this._bufferService.scrollToBottom(),!1;"Dead"!==e.key&&"AltGraph"!==e.key||(this._unprocessedDeadKey=!0);var t=(0,S.evaluateKeyboardEvent)(e,this.coreService.decPrivateModes.applicationCursorKeys,this.browser.isMac,this.options.macOptionIsMeta);if(this.updateCursorStyle(e),3===t.type||2===t.type){var r=this.rows-1;return this.scrollLines(2===t.type?-r:r),this.cancel(e,!0)}return 1===t.type&&this.selectAll(),!!this._isThirdLevelShift(this.browser,e)||(t.cancel&&this.cancel(e,!0),!t.key||(this._unprocessedDeadKey?(this._unprocessedDeadKey=!1,!0):(t.key!==c.C0.ETX&&t.key!==c.C0.CR||(this.textarea.value=""),this._onKey.fire({key:t.key,domEvent:e}),this._showCursor(),this.coreService.triggerDataEvent(t.key,!0),this.optionsService.rawOptions.screenReaderMode?void(this._keyDownHandled=!0):this.cancel(e,!0))))},t.prototype._isThirdLevelShift=function(e,t){var r=e.isMac&&!this.options.macOptionIsMeta&&t.altKey&&!t.ctrlKey&&!t.metaKey||e.isWindows&&t.altKey&&t.ctrlKey&&!t.metaKey||e.isWindows&&t.getModifierState("AltGraph");return"keypress"===t.type?r:r&&(!t.keyCode||t.keyCode>47)},t.prototype._keyUp=function(e){this._customKeyEventHandler&&!1===this._customKeyEventHandler(e)||(function(e){return 16===e.keyCode||17===e.keyCode||18===e.keyCode}(e)||this.focus(),this.updateCursorStyle(e),this._keyPressHandled=!1)},t.prototype._keyPress=function(e){var t;if(this._keyPressHandled=!1,this._keyDownHandled)return!1;if(this._customKeyEventHandler&&!1===this._customKeyEventHandler(e))return!1;if(this.cancel(e),e.charCode)t=e.charCode;else if(null===e.which||void 0===e.which)t=e.keyCode;else{if(0===e.which||0===e.charCode)return!1;t=e.which}return!(!t||(e.altKey||e.ctrlKey||e.metaKey)&&!this._isThirdLevelShift(this.browser,e)||(t=String.fromCharCode(t),this._onKey.fire({key:t,domEvent:e}),this._showCursor(),this.coreService.triggerDataEvent(t,!0),this._keyPressHandled=!0,this._unprocessedDeadKey=!1,0))},t.prototype._inputEvent=function(e){if(e.data&&"insertText"===e.inputType&&!e.composed&&!this.optionsService.rawOptions.screenReaderMode){if(this._keyPressHandled)return!1;this._unprocessedDeadKey=!1;var t=e.data;return this.coreService.triggerDataEvent(t,!0),this.cancel(e),!0}return!1},t.prototype.bell=function(){var e;this._soundBell()&&(null===(e=this._soundService)||void 0===e||e.playBellSound()),this._onBell.fire()},t.prototype.resize=function(t,r){t!==this.cols||r!==this.rows?e.prototype.resize.call(this,t,r):this._charSizeService&&!this._charSizeService.hasValidSize&&this._charSizeService.measure()},t.prototype._afterResize=function(e,t){var r,i;null===(r=this._charSizeService)||void 0===r||r.measure(),null===(i=this.viewport)||void 0===i||i.syncScrollArea(!0)},t.prototype.clear=function(){if(0!==this.buffer.ybase||0!==this.buffer.y){this.buffer.clearMarkers(),this.buffer.lines.set(0,this.buffer.lines.get(this.buffer.ybase+this.buffer.y)),this.buffer.lines.length=1,this.buffer.ydisp=0,this.buffer.ybase=0,this.buffer.y=0;for(var e=1;e<this.rows;e++)this.buffer.lines.push(this.buffer.getBlankLine(b.DEFAULT_ATTR_DATA));this.refresh(0,this.rows-1),this._onScroll.fire({position:this.buffer.ydisp,source:0})}},t.prototype.reset=function(){var t,r;this.options.rows=this.rows,this.options.cols=this.cols;var i=this._customKeyEventHandler;this._setup(),e.prototype.reset.call(this),null===(t=this._selectionService)||void 0===t||t.reset(),this._customKeyEventHandler=i,this.refresh(0,this.rows-1),null===(r=this.viewport)||void 0===r||r.syncScrollArea()},t.prototype.clearTextureAtlas=function(){var e;null===(e=this._renderService)||void 0===e||e.clearTextureAtlas()},t.prototype._reportFocus=function(){var e;(null===(e=this.element)||void 0===e?void 0:e.classList.contains("focus"))?this.coreService.triggerDataEvent(c.C0.ESC+"[I"):this.coreService.triggerDataEvent(c.C0.ESC+"[O")},t.prototype._reportWindowsOptions=function(e){if(this._renderService)switch(e){case l.WindowsOptionsReportType.GET_WIN_SIZE_PIXELS:var t=this._renderService.dimensions.scaledCanvasWidth.toFixed(0),r=this._renderService.dimensions.scaledCanvasHeight.toFixed(0);this.coreService.triggerDataEvent(c.C0.ESC+"[4;"+r+";"+t+"t");break;case l.WindowsOptionsReportType.GET_CELL_SIZE_PIXELS:var i=this._renderService.dimensions.scaledCellWidth.toFixed(0),n=this._renderService.dimensions.scaledCellHeight.toFixed(0);this.coreService.triggerDataEvent(c.C0.ESC+"[6;"+n+";"+i+"t")}},t.prototype.cancel=function(e,t){if(this.options.cancelEvents||t)return e.preventDefault(),e.stopPropagation(),!1},t.prototype._visualBell=function(){return!1},t.prototype._soundBell=function(){return"sound"===this.options.bellStyle},t}(R.CoreTerminal);t.Terminal=I},9924:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TimeBasedDebouncer=void 0;var r=function(){function e(e,t){void 0===t&&(t=1e3),this._renderCallback=e,this._debounceThresholdMS=t,this._lastRefreshMs=0,this._additionalRefreshRequested=!1}return e.prototype.dispose=function(){this._refreshTimeoutID&&clearTimeout(this._refreshTimeoutID)},e.prototype.refresh=function(e,t,r){var i=this;this._rowCount=r,e=void 0!==e?e:0,t=void 0!==t?t:this._rowCount-1,this._rowStart=void 0!==this._rowStart?Math.min(this._rowStart,e):e,this._rowEnd=void 0!==this._rowEnd?Math.max(this._rowEnd,t):t;var n=Date.now();if(n-this._lastRefreshMs>=this._debounceThresholdMS)this._lastRefreshMs=n,this._innerRefresh();else if(!this._additionalRefreshRequested){var o=n-this._lastRefreshMs,s=this._debounceThresholdMS-o;this._additionalRefreshRequested=!0,this._refreshTimeoutID=window.setTimeout((function(){i._lastRefreshMs=Date.now(),i._innerRefresh(),i._additionalRefreshRequested=!1,i._refreshTimeoutID=void 0}),s)}},e.prototype._innerRefresh=function(){if(void 0!==this._rowStart&&void 0!==this._rowEnd&&void 0!==this._rowCount){var e=Math.max(this._rowStart,0),t=Math.min(this._rowEnd,this._rowCount-1);this._rowStart=void 0,this._rowEnd=void 0,this._renderCallback(e,t)}},e}();t.TimeBasedDebouncer=r},1680:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.Viewport=void 0;var a=r(844),c=r(3656),l=r(4725),h=r(2585),u=function(e){function t(t,r,i,n,o,s,a,l){var h=e.call(this)||this;return h._scrollLines=t,h._viewportElement=r,h._scrollArea=i,h._element=n,h._bufferService=o,h._optionsService=s,h._charSizeService=a,h._renderService=l,h.scrollBarWidth=0,h._currentRowHeight=0,h._currentScaledCellHeight=0,h._lastRecordedBufferLength=0,h._lastRecordedViewportHeight=0,h._lastRecordedBufferHeight=0,h._lastTouchY=0,h._lastScrollTop=0,h._lastHadScrollBar=!1,h._wheelPartialScroll=0,h._refreshAnimationFrame=null,h._ignoreNextScrollEvent=!1,h.scrollBarWidth=h._viewportElement.offsetWidth-h._scrollArea.offsetWidth||15,h._lastHadScrollBar=!0,h.register((0,c.addDisposableDomListener)(h._viewportElement,"scroll",h._onScroll.bind(h))),h._activeBuffer=h._bufferService.buffer,h.register(h._bufferService.buffers.onBufferActivate((function(e){return h._activeBuffer=e.activeBuffer}))),h._renderDimensions=h._renderService.dimensions,h.register(h._renderService.onDimensionsChange((function(e){return h._renderDimensions=e}))),setTimeout((function(){return h.syncScrollArea()}),0),h}return n(t,e),t.prototype.onThemeChange=function(e){this._viewportElement.style.backgroundColor=e.background.css},t.prototype._refresh=function(e){var t=this;if(e)return this._innerRefresh(),void(null!==this._refreshAnimationFrame&&cancelAnimationFrame(this._refreshAnimationFrame));null===this._refreshAnimationFrame&&(this._refreshAnimationFrame=requestAnimationFrame((function(){return t._innerRefresh()})))},t.prototype._innerRefresh=function(){if(this._charSizeService.height>0){this._currentRowHeight=this._renderService.dimensions.scaledCellHeight/window.devicePixelRatio,this._currentScaledCellHeight=this._renderService.dimensions.scaledCellHeight,this._lastRecordedViewportHeight=this._viewportElement.offsetHeight;var e=Math.round(this._currentRowHeight*this._lastRecordedBufferLength)+(this._lastRecordedViewportHeight-this._renderService.dimensions.canvasHeight);this._lastRecordedBufferHeight!==e&&(this._lastRecordedBufferHeight=e,this._scrollArea.style.height=this._lastRecordedBufferHeight+"px")}var t=this._bufferService.buffer.ydisp*this._currentRowHeight;this._viewportElement.scrollTop!==t&&(this._ignoreNextScrollEvent=!0,this._viewportElement.scrollTop=t),0===this._optionsService.rawOptions.scrollback?this.scrollBarWidth=0:this.scrollBarWidth=this._viewportElement.offsetWidth-this._scrollArea.offsetWidth||15,this._lastHadScrollBar=this.scrollBarWidth>0;var r=window.getComputedStyle(this._element),i=parseInt(r.paddingLeft)+parseInt(r.paddingRight);this._viewportElement.style.width=(this._renderService.dimensions.actualCellWidth*this._bufferService.cols+this.scrollBarWidth+(this._lastHadScrollBar?i:0)).toString()+"px",this._refreshAnimationFrame=null},t.prototype.syncScrollArea=function(e){if(void 0===e&&(e=!1),this._lastRecordedBufferLength!==this._bufferService.buffer.lines.length)return this._lastRecordedBufferLength=this._bufferService.buffer.lines.length,void this._refresh(e);this._lastRecordedViewportHeight===this._renderService.dimensions.canvasHeight&&this._lastScrollTop===this._activeBuffer.ydisp*this._currentRowHeight&&this._renderDimensions.scaledCellHeight===this._currentScaledCellHeight?this._lastHadScrollBar!==this._optionsService.rawOptions.scrollback>0&&this._refresh(e):this._refresh(e)},t.prototype._onScroll=function(e){if(this._lastScrollTop=this._viewportElement.scrollTop,this._viewportElement.offsetParent){if(this._ignoreNextScrollEvent)return this._ignoreNextScrollEvent=!1,void this._scrollLines(0);var t=Math.round(this._lastScrollTop/this._currentRowHeight)-this._bufferService.buffer.ydisp;this._scrollLines(t)}},t.prototype._bubbleScroll=function(e,t){var r=this._viewportElement.scrollTop+this._lastRecordedViewportHeight;return!(t<0&&0!==this._viewportElement.scrollTop||t>0&&r<this._lastRecordedBufferHeight)||(e.cancelable&&e.preventDefault(),!1)},t.prototype.onWheel=function(e){var t=this._getPixelsScrolled(e);return 0!==t&&(this._viewportElement.scrollTop+=t,this._bubbleScroll(e,t))},t.prototype._getPixelsScrolled=function(e){if(0===e.deltaY||e.shiftKey)return 0;var t=this._applyScrollModifier(e.deltaY,e);return e.deltaMode===WheelEvent.DOM_DELTA_LINE?t*=this._currentRowHeight:e.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(t*=this._currentRowHeight*this._bufferService.rows),t},t.prototype.getLinesScrolled=function(e){if(0===e.deltaY||e.shiftKey)return 0;var t=this._applyScrollModifier(e.deltaY,e);return e.deltaMode===WheelEvent.DOM_DELTA_PIXEL?(t/=this._currentRowHeight+0,this._wheelPartialScroll+=t,t=Math.floor(Math.abs(this._wheelPartialScroll))*(this._wheelPartialScroll>0?1:-1),this._wheelPartialScroll%=1):e.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(t*=this._bufferService.rows),t},t.prototype._applyScrollModifier=function(e,t){var r=this._optionsService.rawOptions.fastScrollModifier;return"alt"===r&&t.altKey||"ctrl"===r&&t.ctrlKey||"shift"===r&&t.shiftKey?e*this._optionsService.rawOptions.fastScrollSensitivity*this._optionsService.rawOptions.scrollSensitivity:e*this._optionsService.rawOptions.scrollSensitivity},t.prototype.onTouchStart=function(e){this._lastTouchY=e.touches[0].pageY},t.prototype.onTouchMove=function(e){var t=this._lastTouchY-e.touches[0].pageY;return this._lastTouchY=e.touches[0].pageY,0!==t&&(this._viewportElement.scrollTop+=t,this._bubbleScroll(e,t))},o([s(4,h.IBufferService),s(5,h.IOptionsService),s(6,l.ICharSizeService),s(7,l.IRenderService)],t)}(a.Disposable);t.Viewport=u},2950:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.CompositionHelper=void 0;var o=r(4725),s=r(2585),a=function(){function e(e,t,r,i,n,o){this._textarea=e,this._compositionView=t,this._bufferService=r,this._optionsService=i,this._coreService=n,this._renderService=o,this._isComposing=!1,this._isSendingComposition=!1,this._compositionPosition={start:0,end:0},this._dataAlreadySent=""}return Object.defineProperty(e.prototype,"isComposing",{get:function(){return this._isComposing},enumerable:!1,configurable:!0}),e.prototype.compositionstart=function(){this._isComposing=!0,this._compositionPosition.start=this._textarea.value.length,this._compositionView.textContent="",this._dataAlreadySent="",this._compositionView.classList.add("active")},e.prototype.compositionupdate=function(e){var t=this;this._compositionView.textContent=e.data,this.updateCompositionElements(),setTimeout((function(){t._compositionPosition.end=t._textarea.value.length}),0)},e.prototype.compositionend=function(){this._finalizeComposition(!0)},e.prototype.keydown=function(e){if(this._isComposing||this._isSendingComposition){if(229===e.keyCode)return!1;if(16===e.keyCode||17===e.keyCode||18===e.keyCode)return!1;this._finalizeComposition(!1)}return 229!==e.keyCode||(this._handleAnyTextareaChanges(),!1)},e.prototype._finalizeComposition=function(e){var t=this;if(this._compositionView.classList.remove("active"),this._isComposing=!1,e){var r={start:this._compositionPosition.start,end:this._compositionPosition.end};this._isSendingComposition=!0,setTimeout((function(){if(t._isSendingComposition){t._isSendingComposition=!1;var e;r.start+=t._dataAlreadySent.length,(e=t._isComposing?t._textarea.value.substring(r.start,r.end):t._textarea.value.substring(r.start)).length>0&&t._coreService.triggerDataEvent(e,!0)}}),0)}else{this._isSendingComposition=!1;var i=this._textarea.value.substring(this._compositionPosition.start,this._compositionPosition.end);this._coreService.triggerDataEvent(i,!0)}},e.prototype._handleAnyTextareaChanges=function(){var e=this,t=this._textarea.value;setTimeout((function(){if(!e._isComposing){var r=e._textarea.value.replace(t,"");r.length>0&&(e._dataAlreadySent=r,e._coreService.triggerDataEvent(r,!0))}}),0)},e.prototype.updateCompositionElements=function(e){var t=this;if(this._isComposing){if(this._bufferService.buffer.isCursorInViewport){var r=Math.min(this._bufferService.buffer.x,this._bufferService.cols-1),i=this._renderService.dimensions.actualCellHeight,n=this._bufferService.buffer.y*this._renderService.dimensions.actualCellHeight,o=r*this._renderService.dimensions.actualCellWidth;this._compositionView.style.left=o+"px",this._compositionView.style.top=n+"px",this._compositionView.style.height=i+"px",this._compositionView.style.lineHeight=i+"px",this._compositionView.style.fontFamily=this._optionsService.rawOptions.fontFamily,this._compositionView.style.fontSize=this._optionsService.rawOptions.fontSize+"px";var s=this._compositionView.getBoundingClientRect();this._textarea.style.left=o+"px",this._textarea.style.top=n+"px",this._textarea.style.width=Math.max(s.width,1)+"px",this._textarea.style.height=Math.max(s.height,1)+"px",this._textarea.style.lineHeight=s.height+"px"}e||setTimeout((function(){return t.updateCompositionElements(!0)}),0)}},i([n(2,s.IBufferService),n(3,s.IOptionsService),n(4,s.ICoreService),n(5,o.IRenderService)],e)}();t.CompositionHelper=a},9806:(e,t)=>{function r(e,t){var r=t.getBoundingClientRect();return[e.clientX-r.left,e.clientY-r.top]}Object.defineProperty(t,"__esModule",{value:!0}),t.getRawByteCoords=t.getCoords=t.getCoordsRelativeToElement=void 0,t.getCoordsRelativeToElement=r,t.getCoords=function(e,t,i,n,o,s,a,c){if(o){var l=r(e,t);if(l)return l[0]=Math.ceil((l[0]+(c?s/2:0))/s),l[1]=Math.ceil(l[1]/a),l[0]=Math.min(Math.max(l[0],1),i+(c?1:0)),l[1]=Math.min(Math.max(l[1],1),n),l}},t.getRawByteCoords=function(e){if(e)return{x:e[0]+32,y:e[1]+32}}},9504:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.moveToCellSequence=void 0;var i=r(2584);function n(e,t,r,i){var n=e-o(r,e),a=t-o(r,t),h=Math.abs(n-a)-function(e,t,r){for(var i=0,n=e-o(r,e),a=t-o(r,t),c=0;c<Math.abs(n-a);c++){var l="A"===s(e,t)?-1:1,h=r.buffer.lines.get(n+l*c);(null==h?void 0:h.isWrapped)&&i++}return i}(e,t,r);return l(h,c(s(e,t),i))}function o(e,t){for(var r=0,i=e.buffer.lines.get(t),n=null==i?void 0:i.isWrapped;n&&t>=0&&t<e.rows;)r++,n=null==(i=e.buffer.lines.get(--t))?void 0:i.isWrapped;return r}function s(e,t){return e>t?"A":"B"}function a(e,t,r,i,n,o){for(var s=e,a=t,c="";s!==r||a!==i;)s+=n?1:-1,n&&s>o.cols-1?(c+=o.buffer.translateBufferLineToString(a,!1,e,s),s=0,e=0,a++):!n&&s<0&&(c+=o.buffer.translateBufferLineToString(a,!1,0,e+1),e=s=o.cols-1,a--);return c+o.buffer.translateBufferLineToString(a,!1,e,s)}function c(e,t){var r=t?"O":"[";return i.C0.ESC+r+e}function l(e,t){e=Math.floor(e);for(var r="",i=0;i<e;i++)r+=t;return r}t.moveToCellSequence=function(e,t,r,i){var s,h=r.buffer.x,u=r.buffer.y;if(!r.buffer.hasScrollback)return function(e,t,r,i,s,h){return 0===n(t,i,s,h).length?"":l(a(e,t,e,t-o(s,t),!1,s).length,c("D",h))}(h,u,0,t,r,i)+n(u,t,r,i)+function(e,t,r,i,s,h){var u;u=n(t,i,s,h).length>0?i-o(s,i):t;var f=i,_=function(e,t,r,i,s,a){var c;return c=n(r,i,s,a).length>0?i-o(s,i):t,e<r&&c<=i||e>=r&&c<i?"C":"D"}(e,t,r,i,s,h);return l(a(e,u,r,f,"C"===_,s).length,c(_,h))}(h,u,e,t,r,i);if(u===t)return s=h>e?"D":"C",l(Math.abs(h-e),c(s,i));s=u>t?"D":"C";var f=Math.abs(u-t);return l(function(e,t){return t.cols-e}(u>t?e:h,r)+(f-1)*r.cols+1+((u>t?h:e)-1),c(s,i))}},4389:function(e,t,r){var i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,r=1,i=arguments.length;r<i;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},i.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.Terminal=void 0;var n=r(3236),o=r(9042),s=r(7975),a=r(7090),c=r(5741),l=r(8285),h=["cols","rows"],u=function(){function e(e){var t=this;this._core=new n.Terminal(e),this._addonManager=new c.AddonManager,this._publicOptions=i({},this._core.options);var r=function(e){return t._core.options[e]},o=function(e,r){t._checkReadonlyOptions(e),t._core.options[e]=r};for(var s in this._core.options){var a={get:r.bind(this,s),set:o.bind(this,s)};Object.defineProperty(this._publicOptions,s,a)}}return e.prototype._checkReadonlyOptions=function(e){if(h.includes(e))throw new Error('Option "'+e+'" can only be set in the constructor')},e.prototype._checkProposedApi=function(){if(!this._core.optionsService.rawOptions.allowProposedApi)throw new Error("You must set the allowProposedApi option to true to use proposed API")},Object.defineProperty(e.prototype,"onBell",{get:function(){return this._core.onBell},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onBinary",{get:function(){return this._core.onBinary},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onCursorMove",{get:function(){return this._core.onCursorMove},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onData",{get:function(){return this._core.onData},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onKey",{get:function(){return this._core.onKey},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onLineFeed",{get:function(){return this._core.onLineFeed},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onRender",{get:function(){return this._core.onRender},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onResize",{get:function(){return this._core.onResize},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onScroll",{get:function(){return this._core.onScroll},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onSelectionChange",{get:function(){return this._core.onSelectionChange},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onTitleChange",{get:function(){return this._core.onTitleChange},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"element",{get:function(){return this._core.element},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"parser",{get:function(){return this._checkProposedApi(),this._parser||(this._parser=new s.ParserApi(this._core)),this._parser},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"unicode",{get:function(){return this._checkProposedApi(),new a.UnicodeApi(this._core)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"textarea",{get:function(){return this._core.textarea},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rows",{get:function(){return this._core.rows},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"cols",{get:function(){return this._core.cols},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"buffer",{get:function(){return this._checkProposedApi(),this._buffer||(this._buffer=new l.BufferNamespaceApi(this._core)),this._buffer},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"markers",{get:function(){return this._checkProposedApi(),this._core.markers},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"modes",{get:function(){var e=this._core.coreService.decPrivateModes,t="none";switch(this._core.coreMouseService.activeProtocol){case"X10":t="x10";break;case"VT200":t="vt200";break;case"DRAG":t="drag";break;case"ANY":t="any"}return{applicationCursorKeysMode:e.applicationCursorKeys,applicationKeypadMode:e.applicationKeypad,bracketedPasteMode:e.bracketedPasteMode,insertMode:this._core.coreService.modes.insertMode,mouseTrackingMode:t,originMode:e.origin,reverseWraparoundMode:e.reverseWraparound,sendFocusMode:e.sendFocus,wraparoundMode:e.wraparound}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"options",{get:function(){return this._publicOptions},set:function(e){for(var t in e)this._publicOptions[t]=e[t]},enumerable:!1,configurable:!0}),e.prototype.blur=function(){this._core.blur()},e.prototype.focus=function(){this._core.focus()},e.prototype.resize=function(e,t){this._verifyIntegers(e,t),this._core.resize(e,t)},e.prototype.open=function(e){this._core.open(e)},e.prototype.attachCustomKeyEventHandler=function(e){this._core.attachCustomKeyEventHandler(e)},e.prototype.registerLinkMatcher=function(e,t,r){return this._checkProposedApi(),this._core.registerLinkMatcher(e,t,r)},e.prototype.deregisterLinkMatcher=function(e){this._checkProposedApi(),this._core.deregisterLinkMatcher(e)},e.prototype.registerLinkProvider=function(e){return this._checkProposedApi(),this._core.registerLinkProvider(e)},e.prototype.registerCharacterJoiner=function(e){return this._checkProposedApi(),this._core.registerCharacterJoiner(e)},e.prototype.deregisterCharacterJoiner=function(e){this._checkProposedApi(),this._core.deregisterCharacterJoiner(e)},e.prototype.registerMarker=function(e){return void 0===e&&(e=0),this._checkProposedApi(),this._verifyIntegers(e),this._core.addMarker(e)},e.prototype.registerDecoration=function(e){var t,r,i;return this._checkProposedApi(),this._verifyPositiveIntegers(null!==(t=e.x)&&void 0!==t?t:0,null!==(r=e.width)&&void 0!==r?r:0,null!==(i=e.height)&&void 0!==i?i:0),this._core.registerDecoration(e)},e.prototype.addMarker=function(e){return this.registerMarker(e)},e.prototype.hasSelection=function(){return this._core.hasSelection()},e.prototype.select=function(e,t,r){this._verifyIntegers(e,t,r),this._core.select(e,t,r)},e.prototype.getSelection=function(){return this._core.getSelection()},e.prototype.getSelectionPosition=function(){return this._core.getSelectionPosition()},e.prototype.clearSelection=function(){this._core.clearSelection()},e.prototype.selectAll=function(){this._core.selectAll()},e.prototype.selectLines=function(e,t){this._verifyIntegers(e,t),this._core.selectLines(e,t)},e.prototype.dispose=function(){this._addonManager.dispose(),this._core.dispose()},e.prototype.scrollLines=function(e){this._verifyIntegers(e),this._core.scrollLines(e)},e.prototype.scrollPages=function(e){this._verifyIntegers(e),this._core.scrollPages(e)},e.prototype.scrollToTop=function(){this._core.scrollToTop()},e.prototype.scrollToBottom=function(){this._core.scrollToBottom()},e.prototype.scrollToLine=function(e){this._verifyIntegers(e),this._core.scrollToLine(e)},e.prototype.clear=function(){this._core.clear()},e.prototype.write=function(e,t){this._core.write(e,t)},e.prototype.writeUtf8=function(e,t){this._core.write(e,t)},e.prototype.writeln=function(e,t){this._core.write(e),this._core.write("\r\n",t)},e.prototype.paste=function(e){this._core.paste(e)},e.prototype.getOption=function(e){return this._core.optionsService.getOption(e)},e.prototype.setOption=function(e,t){this._checkReadonlyOptions(e),this._core.optionsService.setOption(e,t)},e.prototype.refresh=function(e,t){this._verifyIntegers(e,t),this._core.refresh(e,t)},e.prototype.reset=function(){this._core.reset()},e.prototype.clearTextureAtlas=function(){this._core.clearTextureAtlas()},e.prototype.loadAddon=function(e){return this._addonManager.loadAddon(this,e)},Object.defineProperty(e,"strings",{get:function(){return o},enumerable:!1,configurable:!0}),e.prototype._verifyIntegers=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var r=0,i=e;r<i.length;r++){var n=i[r];if(n===1/0||isNaN(n)||n%1!=0)throw new Error("This API only accepts integers")}},e.prototype._verifyPositiveIntegers=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var r=0,i=e;r<i.length;r++){var n=i[r];if(n&&(n===1/0||isNaN(n)||n%1!=0||n<0))throw new Error("This API only accepts positive integers")}},e}();t.Terminal=u},1546:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BaseRenderLayer=void 0;var i=r(643),n=r(8803),o=r(1420),s=r(3734),a=r(1752),c=r(4774),l=r(9631),h=r(8978),u=function(){function e(e,t,r,i,n,o,s,a){this._container=e,this._alpha=i,this._colors=n,this._rendererId=o,this._bufferService=s,this._optionsService=a,this._scaledCharWidth=0,this._scaledCharHeight=0,this._scaledCellWidth=0,this._scaledCellHeight=0,this._scaledCharLeft=0,this._scaledCharTop=0,this._currentGlyphIdentifier={chars:"",code:0,bg:0,fg:0,bold:!1,dim:!1,italic:!1},this._canvas=document.createElement("canvas"),this._canvas.classList.add("xterm-"+t+"-layer"),this._canvas.style.zIndex=r.toString(),this._initCanvas(),this._container.appendChild(this._canvas)}return e.prototype.dispose=function(){var e;(0,l.removeElementFromParent)(this._canvas),null===(e=this._charAtlas)||void 0===e||e.dispose()},e.prototype._initCanvas=function(){this._ctx=(0,a.throwIfFalsy)(this._canvas.getContext("2d",{alpha:this._alpha})),this._alpha||this._clearAll()},e.prototype.onOptionsChanged=function(){},e.prototype.onBlur=function(){},e.prototype.onFocus=function(){},e.prototype.onCursorMove=function(){},e.prototype.onGridChanged=function(e,t){},e.prototype.onSelectionChanged=function(e,t,r){void 0===r&&(r=!1)},e.prototype.setColors=function(e){this._refreshCharAtlas(e)},e.prototype._setTransparency=function(e){if(e!==this._alpha){var t=this._canvas;this._alpha=e,this._canvas=this._canvas.cloneNode(),this._initCanvas(),this._container.replaceChild(this._canvas,t),this._refreshCharAtlas(this._colors),this.onGridChanged(0,this._bufferService.rows-1)}},e.prototype._refreshCharAtlas=function(e){this._scaledCharWidth<=0&&this._scaledCharHeight<=0||(this._charAtlas=(0,o.acquireCharAtlas)(this._optionsService.rawOptions,this._rendererId,e,this._scaledCharWidth,this._scaledCharHeight),this._charAtlas.warmUp())},e.prototype.resize=function(e){this._scaledCellWidth=e.scaledCellWidth,this._scaledCellHeight=e.scaledCellHeight,this._scaledCharWidth=e.scaledCharWidth,this._scaledCharHeight=e.scaledCharHeight,this._scaledCharLeft=e.scaledCharLeft,this._scaledCharTop=e.scaledCharTop,this._canvas.width=e.scaledCanvasWidth,this._canvas.height=e.scaledCanvasHeight,this._canvas.style.width=e.canvasWidth+"px",this._canvas.style.height=e.canvasHeight+"px",this._alpha||this._clearAll(),this._refreshCharAtlas(this._colors)},e.prototype.clearTextureAtlas=function(){var e;null===(e=this._charAtlas)||void 0===e||e.clear()},e.prototype._fillCells=function(e,t,r,i){this._ctx.fillRect(e*this._scaledCellWidth,t*this._scaledCellHeight,r*this._scaledCellWidth,i*this._scaledCellHeight)},e.prototype._fillMiddleLineAtCells=function(e,t,r){void 0===r&&(r=1);var i=Math.ceil(.5*this._scaledCellHeight);this._ctx.fillRect(e*this._scaledCellWidth,(t+1)*this._scaledCellHeight-i-window.devicePixelRatio,r*this._scaledCellWidth,window.devicePixelRatio)},e.prototype._fillBottomLineAtCells=function(e,t,r){void 0===r&&(r=1),this._ctx.fillRect(e*this._scaledCellWidth,(t+1)*this._scaledCellHeight-window.devicePixelRatio-1,r*this._scaledCellWidth,window.devicePixelRatio)},e.prototype._fillLeftLineAtCell=function(e,t,r){this._ctx.fillRect(e*this._scaledCellWidth,t*this._scaledCellHeight,window.devicePixelRatio*r,this._scaledCellHeight)},e.prototype._strokeRectAtCell=function(e,t,r,i){this._ctx.lineWidth=window.devicePixelRatio,this._ctx.strokeRect(e*this._scaledCellWidth+window.devicePixelRatio/2,t*this._scaledCellHeight+window.devicePixelRatio/2,r*this._scaledCellWidth-window.devicePixelRatio,i*this._scaledCellHeight-window.devicePixelRatio)},e.prototype._clearAll=function(){this._alpha?this._ctx.clearRect(0,0,this._canvas.width,this._canvas.height):(this._ctx.fillStyle=this._colors.background.css,this._ctx.fillRect(0,0,this._canvas.width,this._canvas.height))},e.prototype._clearCells=function(e,t,r,i){this._alpha?this._ctx.clearRect(e*this._scaledCellWidth,t*this._scaledCellHeight,r*this._scaledCellWidth,i*this._scaledCellHeight):(this._ctx.fillStyle=this._colors.background.css,this._ctx.fillRect(e*this._scaledCellWidth,t*this._scaledCellHeight,r*this._scaledCellWidth,i*this._scaledCellHeight))},e.prototype._fillCharTrueColor=function(e,t,r){this._ctx.font=this._getFont(!1,!1),this._ctx.textBaseline=n.TEXT_BASELINE,this._clipRow(r);var i=!1;!1!==this._optionsService.rawOptions.customGlyphs&&(i=(0,h.tryDrawCustomChar)(this._ctx,e.getChars(),t*this._scaledCellWidth,r*this._scaledCellHeight,this._scaledCellWidth,this._scaledCellHeight)),i||this._ctx.fillText(e.getChars(),t*this._scaledCellWidth+this._scaledCharLeft,r*this._scaledCellHeight+this._scaledCharTop+this._scaledCharHeight)},e.prototype._drawChars=function(e,t,r){var o,s,a,c=this._getContrastColor(e);c||e.isFgRGB()||e.isBgRGB()?this._drawUncachedChars(e,t,r,c):(e.isInverse()?(s=e.isBgDefault()?n.INVERTED_DEFAULT_COLOR:e.getBgColor(),a=e.isFgDefault()?n.INVERTED_DEFAULT_COLOR:e.getFgColor()):(a=e.isBgDefault()?i.DEFAULT_COLOR:e.getBgColor(),s=e.isFgDefault()?i.DEFAULT_COLOR:e.getFgColor()),s+=this._optionsService.rawOptions.drawBoldTextInBrightColors&&e.isBold()&&s<8?8:0,this._currentGlyphIdentifier.chars=e.getChars()||i.WHITESPACE_CELL_CHAR,this._currentGlyphIdentifier.code=e.getCode()||i.WHITESPACE_CELL_CODE,this._currentGlyphIdentifier.bg=a,this._currentGlyphIdentifier.fg=s,this._currentGlyphIdentifier.bold=!!e.isBold(),this._currentGlyphIdentifier.dim=!!e.isDim(),this._currentGlyphIdentifier.italic=!!e.isItalic(),(null===(o=this._charAtlas)||void 0===o?void 0:o.draw(this._ctx,this._currentGlyphIdentifier,t*this._scaledCellWidth+this._scaledCharLeft,r*this._scaledCellHeight+this._scaledCharTop))||this._drawUncachedChars(e,t,r))},e.prototype._drawUncachedChars=function(e,t,r,i){if(this._ctx.save(),this._ctx.font=this._getFont(!!e.isBold(),!!e.isItalic()),this._ctx.textBaseline=n.TEXT_BASELINE,e.isInverse())if(i)this._ctx.fillStyle=i.css;else if(e.isBgDefault())this._ctx.fillStyle=c.color.opaque(this._colors.background).css;else if(e.isBgRGB())this._ctx.fillStyle="rgb("+s.AttributeData.toColorRGB(e.getBgColor()).join(",")+")";else{var o=e.getBgColor();this._optionsService.rawOptions.drawBoldTextInBrightColors&&e.isBold()&&o<8&&(o+=8),this._ctx.fillStyle=this._colors.ansi[o].css}else if(i)this._ctx.fillStyle=i.css;else if(e.isFgDefault())this._ctx.fillStyle=this._colors.foreground.css;else if(e.isFgRGB())this._ctx.fillStyle="rgb("+s.AttributeData.toColorRGB(e.getFgColor()).join(",")+")";else{var a=e.getFgColor();this._optionsService.rawOptions.drawBoldTextInBrightColors&&e.isBold()&&a<8&&(a+=8),this._ctx.fillStyle=this._colors.ansi[a].css}this._clipRow(r),e.isDim()&&(this._ctx.globalAlpha=n.DIM_OPACITY);var l=!1;!1!==this._optionsService.rawOptions.customGlyphs&&(l=(0,h.tryDrawCustomChar)(this._ctx,e.getChars(),t*this._scaledCellWidth,r*this._scaledCellHeight,this._scaledCellWidth,this._scaledCellHeight)),l||this._ctx.fillText(e.getChars(),t*this._scaledCellWidth+this._scaledCharLeft,r*this._scaledCellHeight+this._scaledCharTop+this._scaledCharHeight),this._ctx.restore()},e.prototype._clipRow=function(e){this._ctx.beginPath(),this._ctx.rect(0,e*this._scaledCellHeight,this._bufferService.cols*this._scaledCellWidth,this._scaledCellHeight),this._ctx.clip()},e.prototype._getFont=function(e,t){return(t?"italic":"")+" "+(e?this._optionsService.rawOptions.fontWeightBold:this._optionsService.rawOptions.fontWeight)+" "+this._optionsService.rawOptions.fontSize*window.devicePixelRatio+"px "+this._optionsService.rawOptions.fontFamily},e.prototype._getContrastColor=function(e){if(1!==this._optionsService.rawOptions.minimumContrastRatio){var t=this._colors.contrastCache.getColor(e.bg,e.fg);if(void 0!==t)return t||void 0;var r=e.getFgColor(),i=e.getFgColorMode(),n=e.getBgColor(),o=e.getBgColorMode(),s=!!e.isInverse(),a=!!e.isInverse();if(s){var l=r;r=n,n=l;var h=i;i=o,o=h}var u=this._resolveBackgroundRgba(o,n,s),f=this._resolveForegroundRgba(i,r,s,a),_=c.rgba.ensureContrastRatio(u,f,this._optionsService.rawOptions.minimumContrastRatio);if(_){var d={css:c.channels.toCss(_>>24&255,_>>16&255,_>>8&255),rgba:_};return this._colors.contrastCache.setColor(e.bg,e.fg,d),d}this._colors.contrastCache.setColor(e.bg,e.fg,null)}},e.prototype._resolveBackgroundRgba=function(e,t,r){switch(e){case 16777216:case 33554432:return this._colors.ansi[t].rgba;case 50331648:return t<<8;default:return r?this._colors.foreground.rgba:this._colors.background.rgba}},e.prototype._resolveForegroundRgba=function(e,t,r,i){switch(e){case 16777216:case 33554432:return this._optionsService.rawOptions.drawBoldTextInBrightColors&&i&&t<8&&(t+=8),this._colors.ansi[t].rgba;case 50331648:return t<<8;default:return r?this._colors.background.rgba:this._colors.foreground.rgba}},e}();t.BaseRenderLayer=u},2512:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.CursorRenderLayer=void 0;var a=r(1546),c=r(511),l=r(2585),h=r(4725),u=600,f=function(e){function t(t,r,i,n,o,s,a,l,h){var u=e.call(this,t,"cursor",r,!0,i,n,s,a)||this;return u._onRequestRedraw=o,u._coreService=l,u._coreBrowserService=h,u._cell=new c.CellData,u._state={x:0,y:0,isFocused:!1,style:"",width:0},u._cursorRenderers={bar:u._renderBarCursor.bind(u),block:u._renderBlockCursor.bind(u),underline:u._renderUnderlineCursor.bind(u)},u}return n(t,e),t.prototype.dispose=function(){this._cursorBlinkStateManager&&(this._cursorBlinkStateManager.dispose(),this._cursorBlinkStateManager=void 0),e.prototype.dispose.call(this)},t.prototype.resize=function(t){e.prototype.resize.call(this,t),this._state={x:0,y:0,isFocused:!1,style:"",width:0}},t.prototype.reset=function(){var e;this._clearCursor(),null===(e=this._cursorBlinkStateManager)||void 0===e||e.restartBlinkAnimation(),this.onOptionsChanged()},t.prototype.onBlur=function(){var e;null===(e=this._cursorBlinkStateManager)||void 0===e||e.pause(),this._onRequestRedraw.fire({start:this._bufferService.buffer.y,end:this._bufferService.buffer.y})},t.prototype.onFocus=function(){var e;null===(e=this._cursorBlinkStateManager)||void 0===e||e.resume(),this._onRequestRedraw.fire({start:this._bufferService.buffer.y,end:this._bufferService.buffer.y})},t.prototype.onOptionsChanged=function(){var e,t=this;this._optionsService.rawOptions.cursorBlink?this._cursorBlinkStateManager||(this._cursorBlinkStateManager=new _(this._coreBrowserService.isFocused,(function(){t._render(!0)}))):(null===(e=this._cursorBlinkStateManager)||void 0===e||e.dispose(),this._cursorBlinkStateManager=void 0),this._onRequestRedraw.fire({start:this._bufferService.buffer.y,end:this._bufferService.buffer.y})},t.prototype.onCursorMove=function(){var e;null===(e=this._cursorBlinkStateManager)||void 0===e||e.restartBlinkAnimation()},t.prototype.onGridChanged=function(e,t){!this._cursorBlinkStateManager||this._cursorBlinkStateManager.isPaused?this._render(!1):this._cursorBlinkStateManager.restartBlinkAnimation()},t.prototype._render=function(e){if(this._coreService.isCursorInitialized&&!this._coreService.isCursorHidden){var t=this._bufferService.buffer.ybase+this._bufferService.buffer.y,r=t-this._bufferService.buffer.ydisp;if(r<0||r>=this._bufferService.rows)this._clearCursor();else{var i=Math.min(this._bufferService.buffer.x,this._bufferService.cols-1);if(this._bufferService.buffer.lines.get(t).loadCell(i,this._cell),void 0!==this._cell.content){if(!this._coreBrowserService.isFocused){this._clearCursor(),this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css;var n=this._optionsService.rawOptions.cursorStyle;return n&&"block"!==n?this._cursorRenderers[n](i,r,this._cell):this._renderBlurCursor(i,r,this._cell),this._ctx.restore(),this._state.x=i,this._state.y=r,this._state.isFocused=!1,this._state.style=n,void(this._state.width=this._cell.getWidth())}if(!this._cursorBlinkStateManager||this._cursorBlinkStateManager.isCursorVisible){if(this._state){if(this._state.x===i&&this._state.y===r&&this._state.isFocused===this._coreBrowserService.isFocused&&this._state.style===this._optionsService.rawOptions.cursorStyle&&this._state.width===this._cell.getWidth())return;this._clearCursor()}this._ctx.save(),this._cursorRenderers[this._optionsService.rawOptions.cursorStyle||"block"](i,r,this._cell),this._ctx.restore(),this._state.x=i,this._state.y=r,this._state.isFocused=!1,this._state.style=this._optionsService.rawOptions.cursorStyle,this._state.width=this._cell.getWidth()}else this._clearCursor()}}}else this._clearCursor()},t.prototype._clearCursor=function(){this._state&&(window.devicePixelRatio<1?this._clearAll():this._clearCells(this._state.x,this._state.y,this._state.width,1),this._state={x:0,y:0,isFocused:!1,style:"",width:0})},t.prototype._renderBarCursor=function(e,t,r){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this._fillLeftLineAtCell(e,t,this._optionsService.rawOptions.cursorWidth),this._ctx.restore()},t.prototype._renderBlockCursor=function(e,t,r){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this._fillCells(e,t,r.getWidth(),1),this._ctx.fillStyle=this._colors.cursorAccent.css,this._fillCharTrueColor(r,e,t),this._ctx.restore()},t.prototype._renderUnderlineCursor=function(e,t,r){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this._fillBottomLineAtCells(e,t),this._ctx.restore()},t.prototype._renderBlurCursor=function(e,t,r){this._ctx.save(),this._ctx.strokeStyle=this._colors.cursor.css,this._strokeRectAtCell(e,t,r.getWidth(),1),this._ctx.restore()},o([s(5,l.IBufferService),s(6,l.IOptionsService),s(7,l.ICoreService),s(8,h.ICoreBrowserService)],t)}(a.BaseRenderLayer);t.CursorRenderLayer=f;var _=function(){function e(e,t){this._renderCallback=t,this.isCursorVisible=!0,e&&this._restartInterval()}return Object.defineProperty(e.prototype,"isPaused",{get:function(){return!(this._blinkStartTimeout||this._blinkInterval)},enumerable:!1,configurable:!0}),e.prototype.dispose=function(){this._blinkInterval&&(window.clearInterval(this._blinkInterval),this._blinkInterval=void 0),this._blinkStartTimeout&&(window.clearTimeout(this._blinkStartTimeout),this._blinkStartTimeout=void 0),this._animationFrame&&(window.cancelAnimationFrame(this._animationFrame),this._animationFrame=void 0)},e.prototype.restartBlinkAnimation=function(){var e=this;this.isPaused||(this._animationTimeRestarted=Date.now(),this.isCursorVisible=!0,this._animationFrame||(this._animationFrame=window.requestAnimationFrame((function(){e._renderCallback(),e._animationFrame=void 0}))))},e.prototype._restartInterval=function(e){var t=this;void 0===e&&(e=u),this._blinkInterval&&(window.clearInterval(this._blinkInterval),this._blinkInterval=void 0),this._blinkStartTimeout=window.setTimeout((function(){if(t._animationTimeRestarted){var e=u-(Date.now()-t._animationTimeRestarted);if(t._animationTimeRestarted=void 0,e>0)return void t._restartInterval(e)}t.isCursorVisible=!1,t._animationFrame=window.requestAnimationFrame((function(){t._renderCallback(),t._animationFrame=void 0})),t._blinkInterval=window.setInterval((function(){if(t._animationTimeRestarted){var e=u-(Date.now()-t._animationTimeRestarted);return t._animationTimeRestarted=void 0,void t._restartInterval(e)}t.isCursorVisible=!t.isCursorVisible,t._animationFrame=window.requestAnimationFrame((function(){t._renderCallback(),t._animationFrame=void 0}))}),u)}),e)},e.prototype.pause=function(){this.isCursorVisible=!0,this._blinkInterval&&(window.clearInterval(this._blinkInterval),this._blinkInterval=void 0),this._blinkStartTimeout&&(window.clearTimeout(this._blinkStartTimeout),this._blinkStartTimeout=void 0),this._animationFrame&&(window.cancelAnimationFrame(this._animationFrame),this._animationFrame=void 0)},e.prototype.resume=function(){this.pause(),this._animationTimeRestarted=void 0,this._restartInterval(),this.restartBlinkAnimation()},e}()},8978:(e,t,r)=>{var i,n,o,s,a,c,l,h,u,f,_,d,p,v,g,y,m,S,C,b,w,L,E,x,k,M,A,R,O,T,D,B,P,I,H,F,j,W,U,q,N,z,K,G,V,X,Y,Z,J,$,Q,ee,te,re,ie,ne,oe,se,ae,ce,le,he,ue,fe,_e,de,pe,ve,ge,ye,me,Se,Ce,be,we,Le,Ee,xe,ke,Me,Ae,Re,Oe,Te,De,Be,Pe,Ie,He,Fe,je,We,Ue,qe,Ne,ze,Ke,Ge,Ve,Xe,Ye,Ze,Je,$e,Qe,et,tt,rt,it,nt,ot,st,at,ct,lt,ht,ut,ft,_t,dt,pt,vt,gt,yt,mt,St,Ct,bt;Object.defineProperty(t,"__esModule",{value:!0}),t.tryDrawCustomChar=t.boxDrawingDefinitions=t.blockElementDefinitions=void 0;var wt=r(1752);t.blockElementDefinitions={"â":[{x:0,y:0,w:8,h:4}],"â":[{x:0,y:7,w:8,h:1}],"â":[{x:0,y:6,w:8,h:2}],"â":[{x:0,y:5,w:8,h:3}],"â":[{x:0,y:4,w:8,h:4}],"â":[{x:0,y:3,w:8,h:5}],"â":[{x:0,y:2,w:8,h:6}],"â":[{x:0,y:1,w:8,h:7}],"â":[{x:0,y:0,w:8,h:8}],"â":[{x:0,y:0,w:7,h:8}],"â":[{x:0,y:0,w:6,h:8}],"â":[{x:0,y:0,w:5,h:8}],"â":[{x:0,y:0,w:4,h:8}],"â":[{x:0,y:0,w:3,h:8}],"â":[{x:0,y:0,w:2,h:8}],"â":[{x:0,y:0,w:1,h:8}],"â":[{x:4,y:0,w:4,h:8}],"â":[{x:0,y:0,w:9,h:1}],"â":[{x:7,y:0,w:1,h:8}],"â":[{x:0,y:4,w:4,h:4}],"â":[{x:4,y:4,w:4,h:4}],"â":[{x:0,y:0,w:4,h:4}],"â":[{x:0,y:0,w:4,h:8},{x:0,y:4,w:8,h:4}],"â":[{x:0,y:0,w:4,h:4},{x:4,y:4,w:4,h:4}],"â":[{x:0,y:0,w:4,h:8},{x:0,y:0,w:4,h:8}],"â":[{x:0,y:0,w:8,h:4},{x:4,y:0,w:4,h:8}],"â":[{x:4,y:0,w:4,h:4}],"â":[{x:4,y:0,w:4,h:4},{x:0,y:4,w:4,h:4}],"â":[{x:4,y:0,w:4,h:8},{x:0,y:4,w:8,h:4}],"ð­°":[{x:1,y:0,w:1,h:8}],"ð­±":[{x:2,y:0,w:1,h:8}],"ð­²":[{x:3,y:0,w:1,h:8}],"ð­³":[{x:4,y:0,w:1,h:8}],"ð­´":[{x:5,y:0,w:1,h:8}],"ð­µ":[{x:6,y:0,w:1,h:8}],"ð­¶":[{x:0,y:1,w:8,h:1}],"ð­·":[{x:0,y:2,w:8,h:1}],"ð­¸":[{x:0,y:3,w:8,h:1}],"ð­¹":[{x:0,y:4,w:8,h:1}],"ð­º":[{x:0,y:5,w:8,h:1}],"ð­»":[{x:0,y:6,w:8,h:1}],"ð­¼":[{x:0,y:0,w:1,h:8},{x:0,y:7,w:8,h:1}],"ð­½":[{x:0,y:0,w:1,h:8},{x:0,y:0,w:8,h:1}],"ð­¾":[{x:7,y:0,w:1,h:8},{x:0,y:0,w:8,h:1}],"ð­¿":[{x:7,y:0,w:1,h:8},{x:0,y:7,w:8,h:1}],"ð®":[{x:0,y:0,w:8,h:1},{x:0,y:7,w:8,h:1}],"ð®":[{x:0,y:0,w:8,h:1},{x:0,y:2,w:8,h:1},{x:0,y:4,w:8,h:1},{x:0,y:7,w:8,h:1}],"ð®":[{x:0,y:0,w:8,h:2}],"ð®":[{x:0,y:0,w:8,h:3}],"ð®":[{x:0,y:0,w:8,h:5}],"ð®":[{x:0,y:0,w:8,h:6}],"ð®":[{x:0,y:0,w:8,h:7}],"ð®":[{x:6,y:0,w:2,h:8}],"ð®":[{x:5,y:0,w:3,h:8}],"ð®":[{x:3,y:0,w:5,h:8}],"ð®":[{x:2,y:0,w:6,h:8}],"ð®":[{x:1,y:0,w:7,h:8}],"ð®":[{x:0,y:0,w:2,h:2},{x:4,y:0,w:2,h:2},{x:2,y:2,w:2,h:2},{x:6,y:2,w:2,h:2},{x:0,y:4,w:2,h:2},{x:4,y:4,w:2,h:2},{x:2,y:6,w:2,h:2},{x:6,y:6,w:2,h:2}],"ð®":[{x:2,y:0,w:2,h:2},{x:6,y:0,w:2,h:2},{x:0,y:2,w:2,h:2},{x:4,y:2,w:2,h:2},{x:2,y:4,w:2,h:2},{x:6,y:4,w:2,h:2},{x:0,y:6,w:2,h:2},{x:4,y:6,w:2,h:2}],"ð®":[{x:0,y:2,w:8,h:2},{x:0,y:6,w:8,h:2}]};var Lt={"â":[[1,0,0,0],[0,0,0,0],[0,0,1,0],[0,0,0,0]],"â":[[1,0],[0,0],[0,1],[0,0]],"â":[[0,1],[1,1],[1,0],[1,1]]};t.boxDrawingDefinitions={"â":(i={},i[1]="M0,.5 L1,.5",i),"â":(n={},n[3]="M0,.5 L1,.5",n),"â":(o={},o[1]="M.5,0 L.5,1",o),"â":(s={},s[3]="M.5,0 L.5,1",s),"â":(a={},a[1]="M0.5,1 L.5,.5 L1,.5",a),"â":(c={},c[3]="M0.5,1 L.5,.5 L1,.5",c),"â":(l={},l[1]="M0,.5 L.5,.5 L.5,1",l),"â":(h={},h[3]="M0,.5 L.5,.5 L.5,1",h),"â":(u={},u[1]="M.5,0 L.5,.5 L1,.5",u),"â":(f={},f[3]="M.5,0 L.5,.5 L1,.5",f),"â":(_={},_[1]="M.5,0 L.5,.5 L0,.5",_),"â":(d={},d[3]="M.5,0 L.5,.5 L0,.5",d),"â":(p={},p[1]="M.5,0 L.5,1 M.5,.5 L1,.5",p),"â£":(v={},v[3]="M.5,0 L.5,1 M.5,.5 L1,.5",v),"â¤":(g={},g[1]="M.5,0 L.5,1 M.5,.5 L0,.5",g),"â«":(y={},y[3]="M.5,0 L.5,1 M.5,.5 L0,.5",y),"â¬":(m={},m[1]="M0,.5 L1,.5 M.5,.5 L.5,1",m),"â³":(S={},S[3]="M0,.5 L1,.5 M.5,.5 L.5,1",S),"â´":(C={},C[1]="M0,.5 L1,.5 M.5,.5 L.5,0",C),"â»":(b={},b[3]="M0,.5 L1,.5 M.5,.5 L.5,0",b),"â¼":(w={},w[1]="M0,.5 L1,.5 M.5,0 L.5,1",w),"â":(L={},L[3]="M0,.5 L1,.5 M.5,0 L.5,1",L),"â´":(E={},E[1]="M.5,.5 L0,.5",E),"â¸":(x={},x[3]="M.5,.5 L0,.5",x),"âµ":(k={},k[1]="M.5,.5 L.5,0",k),"â¹":(M={},M[3]="M.5,.5 L.5,0",M),"â¶":(A={},A[1]="M.5,.5 L1,.5",A),"âº":(R={},R[3]="M.5,.5 L1,.5",R),"â·":(O={},O[1]="M.5,.5 L.5,1",O),"â»":(T={},T[3]="M.5,.5 L.5,1",T),"â":(D={},D[1]=function(e,t){return"M0,"+(.5-t)+" L1,"+(.5-t)+" M0,"+(.5+t)+" L1,"+(.5+t)},D),"â":(B={},B[1]=function(e,t){return"M"+(.5-e)+",0 L"+(.5-e)+",1 M"+(.5+e)+",0 L"+(.5+e)+",1"},B),"â":(P={},P[1]=function(e,t){return"M.5,1 L.5,"+(.5-t)+" L1,"+(.5-t)+" M.5,"+(.5+t)+" L1,"+(.5+t)},P),"â":(I={},I[1]=function(e,t){return"M"+(.5-e)+",1 L"+(.5-e)+",.5 L1,.5 M"+(.5+e)+",.5 L"+(.5+e)+",1"},I),"â":(H={},H[1]=function(e,t){return"M1,"+(.5-t)+" L"+(.5-e)+","+(.5-t)+" L"+(.5-e)+",1 M1,"+(.5+t)+" L"+(.5+e)+","+(.5+t)+" L"+(.5+e)+",1"},H),"â":(F={},F[1]=function(e,t){return"M0,"+(.5-t)+" L.5,"+(.5-t)+" L.5,1 M0,"+(.5+t)+" L.5,"+(.5+t)},F),"â":(j={},j[1]=function(e,t){return"M"+(.5+e)+",1 L"+(.5+e)+",.5 L0,.5 M"+(.5-e)+",.5 L"+(.5-e)+",1"},j),"â":(W={},W[1]=function(e,t){return"M0,"+(.5+t)+" L"+(.5-e)+","+(.5+t)+" L"+(.5-e)+",1 M0,"+(.5-t)+" L"+(.5+e)+","+(.5-t)+" L"+(.5+e)+",1"},W),"â":(U={},U[1]=function(e,t){return"M.5,0 L.5,"+(.5+t)+" L1,"+(.5+t)+" M.5,"+(.5-t)+" L1,"+(.5-t)},U),"â":(q={},q[1]=function(e,t){return"M1,.5 L"+(.5-e)+",.5 L"+(.5-e)+",0 M"+(.5+e)+",.5 L"+(.5+e)+",0"},q),"â":(N={},N[1]=function(e,t){return"M1,"+(.5-t)+" L"+(.5+e)+","+(.5-t)+" L"+(.5+e)+",0 M1,"+(.5+t)+" L"+(.5-e)+","+(.5+t)+" L"+(.5-e)+",0"},N),"â":(z={},z[1]=function(e,t){return"M0,"+(.5+t)+" L.5,"+(.5+t)+" L.5,0 M0,"+(.5-t)+" L.5,"+(.5-t)},z),"â":(K={},K[1]=function(e,t){return"M0,.5 L"+(.5+e)+",.5 L"+(.5+e)+",0 M"+(.5-e)+",.5 L"+(.5-e)+",0"},K),"â":(G={},G[1]=function(e,t){return"M0,"+(.5-t)+" L"+(.5-e)+","+(.5-t)+" L"+(.5-e)+",0 M0,"+(.5+t)+" L"+(.5+e)+","+(.5+t)+" L"+(.5+e)+",0"},G),"â":(V={},V[1]=function(e,t){return"M.5,0 L.5,1 M.5,"+(.5-t)+" L1,"+(.5-t)+" M.5,"+(.5+t)+" L1,"+(.5+t)},V),"â":(X={},X[1]=function(e,t){return"M"+(.5-e)+",0 L"+(.5-e)+",1 M"+(.5+e)+",0 L"+(.5+e)+",1 M"+(.5+e)+",.5 L1,.5"},X),"â ":(Y={},Y[1]=function(e,t){return"M"+(.5-e)+",0 L"+(.5-e)+",1 M1,"+(.5+t)+" L"+(.5+e)+","+(.5+t)+" L"+(.5+e)+",1 M1,"+(.5-t)+" L"+(.5+e)+","+(.5-t)+" L"+(.5+e)+",0"},Y),"â¡":(Z={},Z[1]=function(e,t){return"M.5,0 L.5,1 M0,"+(.5-t)+" L.5,"+(.5-t)+" M0,"+(.5+t)+" L.5,"+(.5+t)},Z),"â¢":(J={},J[1]=function(e,t){return"M0,.5 L"+(.5-e)+",.5 M"+(.5-e)+",0 L"+(.5-e)+",1 M"+(.5+e)+",0 L"+(.5+e)+",1"},J),"â£":($={},$[1]=function(e,t){return"M"+(.5+e)+",0 L"+(.5+e)+",1 M0,"+(.5+t)+" L"+(.5-e)+","+(.5+t)+" L"+(.5-e)+",1 M0,"+(.5-t)+" L"+(.5-e)+","+(.5-t)+" L"+(.5-e)+",0"},$),"â¤":(Q={},Q[1]=function(e,t){return"M0,"+(.5-t)+" L1,"+(.5-t)+" M0,"+(.5+t)+" L1,"+(.5+t)+" M.5,"+(.5+t)+" L.5,1"},Q),"â¥":(ee={},ee[1]=function(e,t){return"M0,.5 L1,.5 M"+(.5-e)+",.5 L"+(.5-e)+",1 M"+(.5+e)+",.5 L"+(.5+e)+",1"},ee),"â¦":(te={},te[1]=function(e,t){return"M0,"+(.5-t)+" L1,"+(.5-t)+" M0,"+(.5+t)+" L"+(.5-e)+","+(.5+t)+" L"+(.5-e)+",1 M1,"+(.5+t)+" L"+(.5+e)+","+(.5+t)+" L"+(.5+e)+",1"},te),"â§":(re={},re[1]=function(e,t){return"M.5,0 L.5,"+(.5-t)+" M0,"+(.5-t)+" L1,"+(.5-t)+" M0,"+(.5+t)+" L1,"+(.5+t)},re),"â¨":(ie={},ie[1]=function(e,t){return"M0,.5 L1,.5 M"+(.5-e)+",.5 L"+(.5-e)+",0 M"+(.5+e)+",.5 L"+(.5+e)+",0"},ie),"â©":(ne={},ne[1]=function(e,t){return"M0,"+(.5+t)+" L1,"+(.5+t)+" M0,"+(.5-t)+" L"+(.5-e)+","+(.5-t)+" L"+(.5-e)+",0 M1,"+(.5-t)+" L"+(.5+e)+","+(.5-t)+" L"+(.5+e)+",0"},ne),"âª":(oe={},oe[1]=function(e,t){return"M.5,0 L.5,1 M0,"+(.5-t)+" L1,"+(.5-t)+" M0,"+(.5+t)+" L1,"+(.5+t)},oe),"â«":(se={},se[1]=function(e,t){return"M0,.5 L1,.5 M"+(.5-e)+",0 L"+(.5-e)+",1 M"+(.5+e)+",0 L"+(.5+e)+",1"},se),"â¬":(ae={},ae[1]=function(e,t){return"M0,"+(.5+t)+" L"+(.5-e)+","+(.5+t)+" L"+(.5-e)+",1 M1,"+(.5+t)+" L"+(.5+e)+","+(.5+t)+" L"+(.5+e)+",1 M0,"+(.5-t)+" L"+(.5-e)+","+(.5-t)+" L"+(.5-e)+",0 M1,"+(.5-t)+" L"+(.5+e)+","+(.5-t)+" L"+(.5+e)+",0"},ae),"â±":(ce={},ce[1]="M1,0 L0,1",ce),"â²":(le={},le[1]="M0,0 L1,1",le),"â³":(he={},he[1]="M1,0 L0,1 M0,0 L1,1",he),"â¼":(ue={},ue[1]="M.5,.5 L0,.5",ue[3]="M.5,.5 L1,.5",ue),"â½":(fe={},fe[1]="M.5,.5 L.5,0",fe[3]="M.5,.5 L.5,1",fe),"â¾":(_e={},_e[1]="M.5,.5 L1,.5",_e[3]="M.5,.5 L0,.5",_e),"â¿":(de={},de[1]="M.5,.5 L.5,1",de[3]="M.5,.5 L.5,0",de),"â":(pe={},pe[1]="M.5,.5 L.5,1",pe[3]="M.5,.5 L1,.5",pe),"â":(ve={},ve[1]="M.5,.5 L1,.5",ve[3]="M.5,.5 L.5,1",ve),"â":(ge={},ge[1]="M.5,.5 L.5,1",ge[3]="M.5,.5 L0,.5",ge),"â":(ye={},ye[1]="M.5,.5 L0,.5",ye[3]="M.5,.5 L.5,1",ye),"â":(me={},me[1]="M.5,.5 L.5,0",me[3]="M.5,.5 L1,.5",me),"â":(Se={},Se[1]="M.5,.5 L1,.5",Se[3]="M.5,.5 L.5,0",Se),"â":(Ce={},Ce[1]="M.5,.5 L.5,0",Ce[3]="M.5,.5 L0,.5",Ce),"â":(be={},be[1]="M.5,.5 L0,.5",be[3]="M.5,.5 L.5,0",be),"â":(we={},we[1]="M.5,0 L.5,1",we[3]="M.5,.5 L1,.5",we),"â":(Le={},Le[1]="M0.5,1 L.5,.5 L1,.5",Le[3]="M.5,.5 L.5,0",Le),"â":(Ee={},Ee[1]="M.5,0 L.5,.5 L1,.5",Ee[3]="M.5,.5 L.5,1",Ee),"â ":(xe={},xe[1]="M.5,.5 L1,.5",xe[3]="M.5,0 L.5,1",xe),"â¡":(ke={},ke[1]="M.5,.5 L.5,1",ke[3]="M.5,0 L.5,.5 L1,.5",ke),"â¢":(Me={},Me[1]="M.5,.5 L.5,0",Me[3]="M0.5,1 L.5,.5 L1,.5",Me),"â¥":(Ae={},Ae[1]="M.5,0 L.5,1",Ae[3]="M.5,.5 L0,.5",Ae),"â¦":(Re={},Re[1]="M0,.5 L.5,.5 L.5,1",Re[3]="M.5,.5 L.5,0",Re),"â§":(Oe={},Oe[1]="M.5,0 L.5,.5 L0,.5",Oe[3]="M.5,.5 L.5,1",Oe),"â¨":(Te={},Te[1]="M.5,.5 L0,.5",Te[3]="M.5,0 L.5,1",Te),"â©":(De={},De[1]="M.5,.5 L.5,1",De[3]="M.5,0 L.5,.5 L0,.5",De),"âª":(Be={},Be[1]="M.5,.5 L.5,0",Be[3]="M0,.5 L.5,.5 L.5,1",Be),"â­":(Pe={},Pe[1]="M0.5,1 L.5,.5 L1,.5",Pe[3]="M.5,.5 L0,.5",Pe),"â®":(Ie={},Ie[1]="M0,.5 L.5,.5 L.5,1",Ie[3]="M.5,.5 L1,.5",Ie),"â¯":(He={},He[1]="M.5,.5 L.5,1",He[3]="M0,.5 L1,.5",He),"â°":(Fe={},Fe[1]="M0,.5 L1,.5",Fe[3]="M.5,.5 L.5,1",Fe),"â±":(je={},je[1]="M.5,.5 L1,.5",je[3]="M0,.5 L.5,.5 L.5,1",je),"â²":(We={},We[1]="M.5,.5 L0,.5",We[3]="M0.5,1 L.5,.5 L1,.5",We),"âµ":(Ue={},Ue[1]="M.5,0 L.5,.5 L1,.5",Ue[3]="M.5,.5 L0,.5",Ue),"â¶":(qe={},qe[1]="M.5,0 L.5,.5 L0,.5",qe[3]="M.5,.5 L1,.5",qe),"â·":(Ne={},Ne[1]="M.5,.5 L.5,0",Ne[3]="M0,.5 L1,.5",Ne),"â¸":(ze={},ze[1]="M0,.5 L1,.5",ze[3]="M.5,.5 L.5,0",ze),"â¹":(Ke={},Ke[1]="M.5,.5 L1,.5",Ke[3]="M.5,0 L.5,.5 L0,.5",Ke),"âº":(Ge={},Ge[1]="M.5,.5 L0,.5",Ge[3]="M.5,0 L.5,.5 L1,.5",Ge),"â½":(Ve={},Ve[1]="M.5,0 L.5,1 M.5,.5 L1,.5",Ve[3]="M.5,.5 L0,.5",Ve),"â¾":(Xe={},Xe[1]="M.5,0 L.5,1 M.5,.5 L0,.5",Xe[3]="M.5,.5 L1,.5",Xe),"â¿":(Ye={},Ye[1]="M.5,0 L.5,1",Ye[3]="M0,.5 L1,.5",Ye),"â":(Ze={},Ze[1]="M0,.5 L1,.5 M.5,.5 L.5,1",Ze[3]="M.5,.5 L.5,0",Ze),"â":(Je={},Je[1]="M.5,.5 L.5,0 M0,.5 L1,.5",Je[3]="M.5,.5 L.5,1",Je),"â":($e={},$e[1]="M0,.5 L1,.5",$e[3]="M.5,0 L.5,1",$e),"â":(Qe={},Qe[1]="M0.5,1 L.5,.5 L1,.5",Qe[3]="M.5,0 L.5,.5 L0,.5",Qe),"â":(et={},et[1]="M0,.5 L.5,.5 L.5,1",et[3]="M.5,0 L.5,.5 L1,.5",et),"â":(tt={},tt[1]="M.5,0 L.5,.5 L1,.5",tt[3]="M0,.5 L.5,.5 L.5,1",tt),"â":(rt={},rt[1]="M.5,0 L.5,.5 L0,.5",rt[3]="M0.5,1 L.5,.5 L1,.5",rt),"â":(it={},it[1]="M.5,.5 L.5,1",it[3]="M.5,.5 L.5,0 M0,.5 L1,.5",it),"â":(nt={},nt[1]="M.5,.5 L.5,0",nt[3]="M0,.5 L1,.5 M.5,.5 L.5,1",nt),"â":(ot={},ot[1]="M.5,.5 L1,.5",ot[3]="M.5,0 L.5,1 M.5,.5 L0,.5",ot),"â":(st={},st[1]="M.5,.5 L0,.5",st[3]="M.5,0 L.5,1 M.5,.5 L1,.5",st),"â":(at={},at[1]="M.1,.5 L.4,.5 M.6,.5 L.9,.5",at),"â":(ct={},ct[3]="M.1,.5 L.4,.5 M.6,.5 L.9,.5",ct),"â":(lt={},lt[1]="M.0667,.5 L.2667,.5 M.4,.5 L.6,.5 M.7333,.5 L.9333,.5",lt),"â":(ht={},ht[3]="M.0667,.5 L.2667,.5 M.4,.5 L.6,.5 M.7333,.5 L.9333,.5",ht),"â":(ut={},ut[1]="M.05,.5 L.2,.5 M.3,.5 L.45,.5 M.55,.5 L.7,.5 M.8,.5 L.95,.5",ut),"â":(ft={},ft[3]="M.05,.5 L.2,.5 M.3,.5 L.45,.5 M.55,.5 L.7,.5 M.8,.5 L.95,.5",ft),"â":(_t={},_t[1]="M.5,.1 L.5,.4 M.5,.6 L.5,.9",_t),"â":(dt={},dt[3]="M.5,.1 L.5,.4 M.5,.6 L.5,.9",dt),"â":(pt={},pt[1]="M.5,.0667 L.5,.2667 M.5,.4 L.5,.6 M.5,.7333 L.5,.9333",pt),"â":(vt={},vt[3]="M.5,.0667 L.5,.2667 M.5,.4 L.5,.6 M.5,.7333 L.5,.9333",vt),"â":(gt={},gt[1]="M.5,.05 L.5,.2 M.5,.3 L.5,.45 L.5,.55 M.5,.7 L.5,.95",gt),"â":(yt={},yt[3]="M.5,.05 L.5,.2 M.5,.3 L.5,.45 L.5,.55 M.5,.7 L.5,.95",yt),"â­":(mt={},mt[1]="C.5,1,.5,.5,1,.5",mt),"â®":(St={},St[1]="C.5,1,.5,.5,0,.5",St),"â¯":(Ct={},Ct[1]="C.5,0,.5,.5,0,.5",Ct),"â°":(bt={},bt[1]="C.5,0,.5,.5,1,.5",bt)},t.tryDrawCustomChar=function(e,r,i,n,o,s){var a=t.blockElementDefinitions[r];if(a)return function(e,t,r,i,n,o){for(var s=0;s<t.length;s++){var a=t[s],c=n/8,l=o/8;e.fillRect(r+a.x*c,i+a.y*l,a.w*c,a.h*l)}}(e,a,i,n,o,s),!0;var c=Lt[r];if(c)return function(e,t,r,i,n,o){var s,a=Et.get(t);a||(a=new Map,Et.set(t,a));var c=e.fillStyle;if("string"!=typeof c)throw new Error('Unexpected fillStyle type "'+c+'"');var l=a.get(c);if(!l){var h=t[0].length,u=t.length,f=document.createElement("canvas");f.width=h,f.height=u;var _=(0,wt.throwIfFalsy)(f.getContext("2d")),d=new ImageData(h,u),p=void 0,v=void 0,g=void 0,y=void 0;if(c.startsWith("#"))p=parseInt(c.substr(1,2),16),v=parseInt(c.substr(3,2),16),g=parseInt(c.substr(5,2),16),y=c.length>7&&parseInt(c.substr(7,2),16)||1;else{if(!c.startsWith("rgba"))throw new Error('Unexpected fillStyle color format "'+c+'" when drawing pattern glyph');p=(s=c.substring(5,c.length-1).split(",").map((function(e){return parseFloat(e)})))[0],v=s[1],g=s[2],y=s[3]}for(var m=0;m<u;m++)for(var S=0;S<h;S++)d.data[4*(m*h+S)]=p,d.data[4*(m*h+S)+1]=v,d.data[4*(m*h+S)+2]=g,d.data[4*(m*h+S)+3]=t[m][S]*(255*y);_.putImageData(d,0,0),l=(0,wt.throwIfFalsy)(e.createPattern(f,null)),a.set(c,l)}e.fillStyle=l,e.fillRect(r,i,n,o)}(e,c,i,n,o,s),!0;var l=t.boxDrawingDefinitions[r];return!!l&&(function(e,t,r,i,n,o){e.strokeStyle=e.fillStyle;for(var s=0,a=Object.entries(t);s<a.length;s++){var c=a[s],l=c[0],h=c[1];e.beginPath(),e.lineWidth=window.devicePixelRatio*Number.parseInt(l);for(var u=0,f=("function"==typeof h?h(.15,.15/o*n):h).split(" ");u<f.length;u++){var _=f[u],d=_[0],p=kt[d];if(p){var v=_.substring(1).split(",");v[0]&&v[1]&&p(e,Mt(v,n,o,r,i))}else console.error('Could not find drawing instructions for "'+d+'"')}e.stroke(),e.closePath()}}(e,l,i,n,o,s),!0)};var Et=new Map;function xt(e,t,r){return void 0===r&&(r=0),Math.max(Math.min(e,t),r)}var kt={C:function(e,t){return e.bezierCurveTo(t[0],t[1],t[2],t[3],t[4],t[5])},L:function(e,t){return e.lineTo(t[0],t[1])},M:function(e,t){return e.moveTo(t[0],t[1])}};function Mt(e,t,r,i,n){var o=e.map((function(e){return parseFloat(e)||parseInt(e)}));if(o.length<2)throw new Error("Too few arguments for instruction");for(var s=0;s<o.length;s+=2)o[s]*=t,0!==o[s]&&(o[s]=xt(Math.round(o[s]+.5)-.5,t,0)),o[s]+=i;for(var a=1;a<o.length;a+=2)o[a]*=r,0!==o[a]&&(o[a]=xt(Math.round(o[a]+.5)-.5,r,0)),o[a]+=n;return o}},3700:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GridCache=void 0;var r=function(){function e(){this.cache=[]}return e.prototype.resize=function(e,t){for(var r=0;r<e;r++){this.cache.length<=r&&this.cache.push([]);for(var i=this.cache[r].length;i<t;i++)this.cache[r].push(void 0);this.cache[r].length=t}this.cache.length=e},e.prototype.clear=function(){for(var e=0;e<this.cache.length;e++)for(var t=0;t<this.cache[e].length;t++)this.cache[e][t]=void 0},e}();t.GridCache=r},5098:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.LinkRenderLayer=void 0;var a=r(1546),c=r(8803),l=r(2040),h=r(2585),u=function(e){function t(t,r,i,n,o,s,a,c){var l=e.call(this,t,"link",r,!0,i,n,a,c)||this;return o.onShowLinkUnderline((function(e){return l._onShowLinkUnderline(e)})),o.onHideLinkUnderline((function(e){return l._onHideLinkUnderline(e)})),s.onShowLinkUnderline((function(e){return l._onShowLinkUnderline(e)})),s.onHideLinkUnderline((function(e){return l._onHideLinkUnderline(e)})),l}return n(t,e),t.prototype.resize=function(t){e.prototype.resize.call(this,t),this._state=void 0},t.prototype.reset=function(){this._clearCurrentLink()},t.prototype._clearCurrentLink=function(){if(this._state){this._clearCells(this._state.x1,this._state.y1,this._state.cols-this._state.x1,1);var e=this._state.y2-this._state.y1-1;e>0&&this._clearCells(0,this._state.y1+1,this._state.cols,e),this._clearCells(0,this._state.y2,this._state.x2,1),this._state=void 0}},t.prototype._onShowLinkUnderline=function(e){if(e.fg===c.INVERTED_DEFAULT_COLOR?this._ctx.fillStyle=this._colors.background.css:e.fg&&(0,l.is256Color)(e.fg)?this._ctx.fillStyle=this._colors.ansi[e.fg].css:this._ctx.fillStyle=this._colors.foreground.css,e.y1===e.y2)this._fillBottomLineAtCells(e.x1,e.y1,e.x2-e.x1);else{this._fillBottomLineAtCells(e.x1,e.y1,e.cols-e.x1);for(var t=e.y1+1;t<e.y2;t++)this._fillBottomLineAtCells(0,t,e.cols);this._fillBottomLineAtCells(0,e.y2,e.x2)}this._state=e},t.prototype._onHideLinkUnderline=function(e){this._clearCurrentLink()},o([s(6,h.IBufferService),s(7,h.IOptionsService)],t)}(a.BaseRenderLayer);t.LinkRenderLayer=u},3525:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.Renderer=void 0;var a=r(9596),c=r(4149),l=r(2512),h=r(5098),u=r(844),f=r(4725),_=r(2585),d=r(1420),p=r(8460),v=1,g=function(e){function t(t,r,i,n,o,s,u,f){var _=e.call(this)||this;_._colors=t,_._screenElement=r,_._bufferService=s,_._charSizeService=u,_._optionsService=f,_._id=v++,_._onRequestRedraw=new p.EventEmitter;var d=_._optionsService.rawOptions.allowTransparency;return _._renderLayers=[o.createInstance(a.TextRenderLayer,_._screenElement,0,_._colors,d,_._id),o.createInstance(c.SelectionRenderLayer,_._screenElement,1,_._colors,_._id),o.createInstance(h.LinkRenderLayer,_._screenElement,2,_._colors,_._id,i,n),o.createInstance(l.CursorRenderLayer,_._screenElement,3,_._colors,_._id,_._onRequestRedraw)],_.dimensions={scaledCharWidth:0,scaledCharHeight:0,scaledCellWidth:0,scaledCellHeight:0,scaledCharLeft:0,scaledCharTop:0,scaledCanvasWidth:0,scaledCanvasHeight:0,canvasWidth:0,canvasHeight:0,actualCellWidth:0,actualCellHeight:0},_._devicePixelRatio=window.devicePixelRatio,_._updateDimensions(),_.onOptionsChanged(),_}return n(t,e),Object.defineProperty(t.prototype,"onRequestRedraw",{get:function(){return this._onRequestRedraw.event},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){for(var t=0,r=this._renderLayers;t<r.length;t++)r[t].dispose();e.prototype.dispose.call(this),(0,d.removeTerminalFromCache)(this._id)},t.prototype.onDevicePixelRatioChange=function(){this._devicePixelRatio!==window.devicePixelRatio&&(this._devicePixelRatio=window.devicePixelRatio,this.onResize(this._bufferService.cols,this._bufferService.rows))},t.prototype.setColors=function(e){this._colors=e;for(var t=0,r=this._renderLayers;t<r.length;t++){var i=r[t];i.setColors(this._colors),i.reset()}},t.prototype.onResize=function(e,t){this._updateDimensions();for(var r=0,i=this._renderLayers;r<i.length;r++)i[r].resize(this.dimensions);this._screenElement.style.width=this.dimensions.canvasWidth+"px",this._screenElement.style.height=this.dimensions.canvasHeight+"px"},t.prototype.onCharSizeChanged=function(){this.onResize(this._bufferService.cols,this._bufferService.rows)},t.prototype.onBlur=function(){this._runOperation((function(e){return e.onBlur()}))},t.prototype.onFocus=function(){this._runOperation((function(e){return e.onFocus()}))},t.prototype.onSelectionChanged=function(e,t,r){void 0===r&&(r=!1),this._runOperation((function(i){return i.onSelectionChanged(e,t,r)}))},t.prototype.onCursorMove=function(){this._runOperation((function(e){return e.onCursorMove()}))},t.prototype.onOptionsChanged=function(){this._runOperation((function(e){return e.onOptionsChanged()}))},t.prototype.clear=function(){this._runOperation((function(e){return e.reset()}))},t.prototype._runOperation=function(e){for(var t=0,r=this._renderLayers;t<r.length;t++)e(r[t])},t.prototype.renderRows=function(e,t){for(var r=0,i=this._renderLayers;r<i.length;r++)i[r].onGridChanged(e,t)},t.prototype.clearTextureAtlas=function(){for(var e=0,t=this._renderLayers;e<t.length;e++)t[e].clearTextureAtlas()},t.prototype._updateDimensions=function(){this._charSizeService.hasValidSize&&(this.dimensions.scaledCharWidth=Math.floor(this._charSizeService.width*window.devicePixelRatio),this.dimensions.scaledCharHeight=Math.ceil(this._charSizeService.height*window.devicePixelRatio),this.dimensions.scaledCellHeight=Math.floor(this.dimensions.scaledCharHeight*this._optionsService.rawOptions.lineHeight),this.dimensions.scaledCharTop=1===this._optionsService.rawOptions.lineHeight?0:Math.round((this.dimensions.scaledCellHeight-this.dimensions.scaledCharHeight)/2),this.dimensions.scaledCellWidth=this.dimensions.scaledCharWidth+Math.round(this._optionsService.rawOptions.letterSpacing),this.dimensions.scaledCharLeft=Math.floor(this._optionsService.rawOptions.letterSpacing/2),this.dimensions.scaledCanvasHeight=this._bufferService.rows*this.dimensions.scaledCellHeight,this.dimensions.scaledCanvasWidth=this._bufferService.cols*this.dimensions.scaledCellWidth,this.dimensions.canvasHeight=Math.round(this.dimensions.scaledCanvasHeight/window.devicePixelRatio),this.dimensions.canvasWidth=Math.round(this.dimensions.scaledCanvasWidth/window.devicePixelRatio),this.dimensions.actualCellHeight=this.dimensions.canvasHeight/this._bufferService.rows,this.dimensions.actualCellWidth=this.dimensions.canvasWidth/this._bufferService.cols)},o([s(4,_.IInstantiationService),s(5,_.IBufferService),s(6,f.ICharSizeService),s(7,_.IOptionsService)],t)}(u.Disposable);t.Renderer=g},1752:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throwIfFalsy=void 0,t.throwIfFalsy=function(e){if(!e)throw new Error("value must not be falsy");return e}},4149:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.SelectionRenderLayer=void 0;var a=r(1546),c=r(2585),l=function(e){function t(t,r,i,n,o,s){var a=e.call(this,t,"selection",r,!0,i,n,o,s)||this;return a._clearState(),a}return n(t,e),t.prototype._clearState=function(){this._state={start:void 0,end:void 0,columnSelectMode:void 0,ydisp:void 0}},t.prototype.resize=function(t){e.prototype.resize.call(this,t),this._clearState()},t.prototype.reset=function(){this._state.start&&this._state.end&&(this._clearState(),this._clearAll())},t.prototype.onSelectionChanged=function(e,t,r){if(this._didStateChange(e,t,r,this._bufferService.buffer.ydisp))if(this._clearAll(),e&&t){var i=e[1]-this._bufferService.buffer.ydisp,n=t[1]-this._bufferService.buffer.ydisp,o=Math.max(i,0),s=Math.min(n,this._bufferService.rows-1);if(o>=this._bufferService.rows||s<0)this._state.ydisp=this._bufferService.buffer.ydisp;else{if(this._ctx.fillStyle=this._colors.selectionTransparent.css,r){var a=e[0],c=t[0]-a,l=s-o+1;this._fillCells(a,o,c,l)}else{a=i===o?e[0]:0;var h=o===n?t[0]:this._bufferService.cols;this._fillCells(a,o,h-a,1);var u=Math.max(s-o-1,0);if(this._fillCells(0,o+1,this._bufferService.cols,u),o!==s){var f=n===s?t[0]:this._bufferService.cols;this._fillCells(0,s,f,1)}}this._state.start=[e[0],e[1]],this._state.end=[t[0],t[1]],this._state.columnSelectMode=r,this._state.ydisp=this._bufferService.buffer.ydisp}}else this._clearState()},t.prototype._didStateChange=function(e,t,r,i){return!this._areCoordinatesEqual(e,this._state.start)||!this._areCoordinatesEqual(t,this._state.end)||r!==this._state.columnSelectMode||i!==this._state.ydisp},t.prototype._areCoordinatesEqual=function(e,t){return!(!e||!t)&&e[0]===t[0]&&e[1]===t[1]},o([s(4,c.IBufferService),s(5,c.IOptionsService)],t)}(a.BaseRenderLayer);t.SelectionRenderLayer=l},9596:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.TextRenderLayer=void 0;var a=r(3700),c=r(1546),l=r(3734),h=r(643),u=r(511),f=r(2585),_=r(4725),d=r(4269),p=function(e){function t(t,r,i,n,o,s,c,l){var h=e.call(this,t,"text",r,n,i,o,s,c)||this;return h._characterJoinerService=l,h._characterWidth=0,h._characterFont="",h._characterOverlapCache={},h._workCell=new u.CellData,h._state=new a.GridCache,h}return n(t,e),t.prototype.resize=function(t){e.prototype.resize.call(this,t);var r=this._getFont(!1,!1);this._characterWidth===t.scaledCharWidth&&this._characterFont===r||(this._characterWidth=t.scaledCharWidth,this._characterFont=r,this._characterOverlapCache={}),this._state.clear(),this._state.resize(this._bufferService.cols,this._bufferService.rows)},t.prototype.reset=function(){this._state.clear(),this._clearAll()},t.prototype._forEachCell=function(e,t,r){for(var i=e;i<=t;i++)for(var n=i+this._bufferService.buffer.ydisp,o=this._bufferService.buffer.lines.get(n),s=this._characterJoinerService.getJoinedCharacters(n),a=0;a<this._bufferService.cols;a++){o.loadCell(a,this._workCell);var c=this._workCell,l=!1,u=a;if(0!==c.getWidth()){if(s.length>0&&a===s[0][0]){l=!0;var f=s.shift();c=new d.JoinedCellData(this._workCell,o.translateToString(!0,f[0],f[1]),f[1]-f[0]),u=f[1]-1}!l&&this._isOverlapping(c)&&u<o.length-1&&o.getCodePoint(u+1)===h.NULL_CELL_CODE&&(c.content&=-12582913,c.content|=2<<22),r(c,a,i),a=u}}},t.prototype._drawBackground=function(e,t){var r=this,i=this._ctx,n=this._bufferService.cols,o=0,s=0,a=null;i.save(),this._forEachCell(e,t,(function(e,t,c){var h=null;e.isInverse()?h=e.isFgDefault()?r._colors.foreground.css:e.isFgRGB()?"rgb("+l.AttributeData.toColorRGB(e.getFgColor()).join(",")+")":r._colors.ansi[e.getFgColor()].css:e.isBgRGB()?h="rgb("+l.AttributeData.toColorRGB(e.getBgColor()).join(",")+")":e.isBgPalette()&&(h=r._colors.ansi[e.getBgColor()].css),null===a&&(o=t,s=c),c!==s?(i.fillStyle=a||"",r._fillCells(o,s,n-o,1),o=t,s=c):a!==h&&(i.fillStyle=a||"",r._fillCells(o,s,t-o,1),o=t,s=c),a=h})),null!==a&&(i.fillStyle=a,this._fillCells(o,s,n-o,1)),i.restore()},t.prototype._drawForeground=function(e,t){var r=this;this._forEachCell(e,t,(function(e,t,i){if(!e.isInvisible()&&(r._drawChars(e,t,i),e.isUnderline()||e.isStrikethrough())){if(r._ctx.save(),e.isInverse())if(e.isBgDefault())r._ctx.fillStyle=r._colors.background.css;else if(e.isBgRGB())r._ctx.fillStyle="rgb("+l.AttributeData.toColorRGB(e.getBgColor()).join(",")+")";else{var n=e.getBgColor();r._optionsService.rawOptions.drawBoldTextInBrightColors&&e.isBold()&&n<8&&(n+=8),r._ctx.fillStyle=r._colors.ansi[n].css}else if(e.isFgDefault())r._ctx.fillStyle=r._colors.foreground.css;else if(e.isFgRGB())r._ctx.fillStyle="rgb("+l.AttributeData.toColorRGB(e.getFgColor()).join(",")+")";else{var o=e.getFgColor();r._optionsService.rawOptions.drawBoldTextInBrightColors&&e.isBold()&&o<8&&(o+=8),r._ctx.fillStyle=r._colors.ansi[o].css}e.isStrikethrough()&&r._fillMiddleLineAtCells(t,i,e.getWidth()),e.isUnderline()&&r._fillBottomLineAtCells(t,i,e.getWidth()),r._ctx.restore()}}))},t.prototype.onGridChanged=function(e,t){0!==this._state.cache.length&&(this._charAtlas&&this._charAtlas.beginFrame(),this._clearCells(0,e,this._bufferService.cols,t-e+1),this._drawBackground(e,t),this._drawForeground(e,t))},t.prototype.onOptionsChanged=function(){this._setTransparency(this._optionsService.rawOptions.allowTransparency)},t.prototype._isOverlapping=function(e){if(1!==e.getWidth())return!1;if(e.getCode()<256)return!1;var t=e.getChars();if(this._characterOverlapCache.hasOwnProperty(t))return this._characterOverlapCache[t];this._ctx.save(),this._ctx.font=this._characterFont;var r=Math.floor(this._ctx.measureText(t).width)>this._characterWidth;return this._ctx.restore(),this._characterOverlapCache[t]=r,r},o([s(5,f.IBufferService),s(6,f.IOptionsService),s(7,_.ICharacterJoinerService)],t)}(c.BaseRenderLayer);t.TextRenderLayer=p},9616:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BaseCharAtlas=void 0;var r=function(){function e(){this._didWarmUp=!1}return e.prototype.dispose=function(){},e.prototype.warmUp=function(){this._didWarmUp||(this._doWarmUp(),this._didWarmUp=!0)},e.prototype._doWarmUp=function(){},e.prototype.clear=function(){},e.prototype.beginFrame=function(){},e}();t.BaseCharAtlas=r},1420:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.removeTerminalFromCache=t.acquireCharAtlas=void 0;var i=r(2040),n=r(1906),o=[];t.acquireCharAtlas=function(e,t,r,s,a){for(var c=(0,i.generateConfig)(s,a,e,r),l=0;l<o.length;l++){var h=(u=o[l]).ownedBy.indexOf(t);if(h>=0){if((0,i.configEquals)(u.config,c))return u.atlas;1===u.ownedBy.length?(u.atlas.dispose(),o.splice(l,1)):u.ownedBy.splice(h,1);break}}for(l=0;l<o.length;l++){var u=o[l];if((0,i.configEquals)(u.config,c))return u.ownedBy.push(t),u.atlas}var f={atlas:new n.DynamicCharAtlas(document,c),config:c,ownedBy:[t]};return o.push(f),f.atlas},t.removeTerminalFromCache=function(e){for(var t=0;t<o.length;t++){var r=o[t].ownedBy.indexOf(e);if(-1!==r){1===o[t].ownedBy.length?(o[t].atlas.dispose(),o.splice(t,1)):o[t].ownedBy.splice(r,1);break}}}},2040:function(e,t,r){var i=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var i,n=0,o=t.length;n<o;n++)!i&&n in t||(i||(i=Array.prototype.slice.call(t,0,n)),i[n]=t[n]);return e.concat(i||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.is256Color=t.configEquals=t.generateConfig=void 0;var n=r(643);t.generateConfig=function(e,t,r,n){var o={foreground:n.foreground,background:n.background,cursor:void 0,cursorAccent:void 0,selection:void 0,ansi:i([],n.ansi,!0)};return{devicePixelRatio:window.devicePixelRatio,scaledCharWidth:e,scaledCharHeight:t,fontFamily:r.fontFamily,fontSize:r.fontSize,fontWeight:r.fontWeight,fontWeightBold:r.fontWeightBold,allowTransparency:r.allowTransparency,colors:o}},t.configEquals=function(e,t){for(var r=0;r<e.colors.ansi.length;r++)if(e.colors.ansi[r].rgba!==t.colors.ansi[r].rgba)return!1;return e.devicePixelRatio===t.devicePixelRatio&&e.fontFamily===t.fontFamily&&e.fontSize===t.fontSize&&e.fontWeight===t.fontWeight&&e.fontWeightBold===t.fontWeightBold&&e.allowTransparency===t.allowTransparency&&e.scaledCharWidth===t.scaledCharWidth&&e.scaledCharHeight===t.scaledCharHeight&&e.colors.foreground===t.colors.foreground&&e.colors.background===t.colors.background},t.is256Color=function(e){return e<n.DEFAULT_COLOR}},8803:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CHAR_ATLAS_CELL_SPACING=t.TEXT_BASELINE=t.DIM_OPACITY=t.INVERTED_DEFAULT_COLOR=void 0;var i=r(6114);t.INVERTED_DEFAULT_COLOR=257,t.DIM_OPACITY=.5,t.TEXT_BASELINE=i.isFirefox||i.isLegacyEdge?"bottom":"ideographic",t.CHAR_ATLAS_CELL_SPACING=1},1906:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.NoneCharAtlas=t.DynamicCharAtlas=t.getGlyphCacheKey=void 0;var o=r(8803),s=r(9616),a=r(5680),c=r(7001),l=r(6114),h=r(1752),u=r(4774),f=1024,_=1024,d={css:"rgba(0, 0, 0, 0)",rgba:0};function p(e){return e.code<<21|e.bg<<12|e.fg<<3|(e.bold?0:4)+(e.dim?0:2)+(e.italic?0:1)}t.getGlyphCacheKey=p;var v=function(e){function t(t,r){var i=e.call(this)||this;i._config=r,i._drawToCacheCount=0,i._glyphsWaitingOnBitmap=[],i._bitmapCommitTimeout=null,i._bitmap=null,i._cacheCanvas=t.createElement("canvas"),i._cacheCanvas.width=f,i._cacheCanvas.height=_,i._cacheCtx=(0,h.throwIfFalsy)(i._cacheCanvas.getContext("2d",{alpha:!0}));var n=t.createElement("canvas");n.width=i._config.scaledCharWidth,n.height=i._config.scaledCharHeight,i._tmpCtx=(0,h.throwIfFalsy)(n.getContext("2d",{alpha:i._config.allowTransparency})),i._width=Math.floor(f/i._config.scaledCharWidth),i._height=Math.floor(_/i._config.scaledCharHeight);var o=i._width*i._height;return i._cacheMap=new c.LRUMap(o),i._cacheMap.prealloc(o),i}return n(t,e),t.prototype.dispose=function(){null!==this._bitmapCommitTimeout&&(window.clearTimeout(this._bitmapCommitTimeout),this._bitmapCommitTimeout=null)},t.prototype.beginFrame=function(){this._drawToCacheCount=0},t.prototype.clear=function(){if(this._cacheMap.size>0){var e=this._width*this._height;this._cacheMap=new c.LRUMap(e),this._cacheMap.prealloc(e)}this._cacheCtx.clearRect(0,0,f,_),this._tmpCtx.clearRect(0,0,this._config.scaledCharWidth,this._config.scaledCharHeight)},t.prototype.draw=function(e,t,r,i){if(32===t.code)return!0;if(!this._canCache(t))return!1;var n=p(t),o=this._cacheMap.get(n);if(null!=o)return this._drawFromCache(e,o,r,i),!0;if(this._drawToCacheCount<100){var s;s=this._cacheMap.size<this._cacheMap.capacity?this._cacheMap.size:this._cacheMap.peek().index;var a=this._drawToCache(t,s);return this._cacheMap.set(n,a),this._drawFromCache(e,a,r,i),!0}return!1},t.prototype._canCache=function(e){return e.code<256},t.prototype._toCoordinateX=function(e){return e%this._width*this._config.scaledCharWidth},t.prototype._toCoordinateY=function(e){return Math.floor(e/this._width)*this._config.scaledCharHeight},t.prototype._drawFromCache=function(e,t,r,i){if(!t.isEmpty){var n=this._toCoordinateX(t.index),o=this._toCoordinateY(t.index);e.drawImage(t.inBitmap?this._bitmap:this._cacheCanvas,n,o,this._config.scaledCharWidth,this._config.scaledCharHeight,r,i,this._config.scaledCharWidth,this._config.scaledCharHeight)}},t.prototype._getColorFromAnsiIndex=function(e){return e<this._config.colors.ansi.length?this._config.colors.ansi[e]:a.DEFAULT_ANSI_COLORS[e]},t.prototype._getBackgroundColor=function(e){return this._config.allowTransparency?d:e.bg===o.INVERTED_DEFAULT_COLOR?this._config.colors.foreground:e.bg<256?this._getColorFromAnsiIndex(e.bg):this._config.colors.background},t.prototype._getForegroundColor=function(e){return e.fg===o.INVERTED_DEFAULT_COLOR?u.color.opaque(this._config.colors.background):e.fg<256?this._getColorFromAnsiIndex(e.fg):this._config.colors.foreground},t.prototype._drawToCache=function(e,t){this._drawToCacheCount++,this._tmpCtx.save();var r=this._getBackgroundColor(e);this._tmpCtx.globalCompositeOperation="copy",this._tmpCtx.fillStyle=r.css,this._tmpCtx.fillRect(0,0,this._config.scaledCharWidth,this._config.scaledCharHeight),this._tmpCtx.globalCompositeOperation="source-over";var i=e.bold?this._config.fontWeightBold:this._config.fontWeight,n=e.italic?"italic":"";this._tmpCtx.font=n+" "+i+" "+this._config.fontSize*this._config.devicePixelRatio+"px "+this._config.fontFamily,this._tmpCtx.textBaseline=o.TEXT_BASELINE,this._tmpCtx.fillStyle=this._getForegroundColor(e).css,e.dim&&(this._tmpCtx.globalAlpha=o.DIM_OPACITY),this._tmpCtx.fillText(e.chars,0,this._config.scaledCharHeight);var s=this._tmpCtx.getImageData(0,0,this._config.scaledCharWidth,this._config.scaledCharHeight),a=!1;if(this._config.allowTransparency||(a=y(s,r)),a&&"_"===e.chars&&!this._config.allowTransparency)for(var c=1;c<=5&&(this._tmpCtx.fillText(e.chars,0,this._config.scaledCharHeight-c),a=y(s=this._tmpCtx.getImageData(0,0,this._config.scaledCharWidth,this._config.scaledCharHeight),r));c++);this._tmpCtx.restore();var l=this._toCoordinateX(t),h=this._toCoordinateY(t);this._cacheCtx.putImageData(s,l,h);var u={index:t,isEmpty:a,inBitmap:!1};return this._addGlyphToBitmap(u),u},t.prototype._addGlyphToBitmap=function(e){var t=this;!("createImageBitmap"in window)||l.isFirefox||l.isSafari||(this._glyphsWaitingOnBitmap.push(e),null===this._bitmapCommitTimeout&&(this._bitmapCommitTimeout=window.setTimeout((function(){return t._generateBitmap()}),100)))},t.prototype._generateBitmap=function(){var e=this,t=this._glyphsWaitingOnBitmap;this._glyphsWaitingOnBitmap=[],window.createImageBitmap(this._cacheCanvas).then((function(r){e._bitmap=r;for(var i=0;i<t.length;i++)t[i].inBitmap=!0})),this._bitmapCommitTimeout=null},t}(s.BaseCharAtlas);t.DynamicCharAtlas=v;var g=function(e){function t(t,r){return e.call(this)||this}return n(t,e),t.prototype.draw=function(e,t,r,i){return!1},t}(s.BaseCharAtlas);function y(e,t){for(var r=!0,i=t.rgba>>>24,n=t.rgba>>>16&255,o=t.rgba>>>8&255,s=0;s<e.data.length;s+=4)e.data[s]===i&&e.data[s+1]===n&&e.data[s+2]===o?e.data[s+3]=0:r=!1;return r}t.NoneCharAtlas=g},7001:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LRUMap=void 0;var r=function(){function e(e){this.capacity=e,this._map={},this._head=null,this._tail=null,this._nodePool=[],this.size=0}return e.prototype._unlinkNode=function(e){var t=e.prev,r=e.next;e===this._head&&(this._head=r),e===this._tail&&(this._tail=t),null!==t&&(t.next=r),null!==r&&(r.prev=t)},e.prototype._appendNode=function(e){var t=this._tail;null!==t&&(t.next=e),e.prev=t,e.next=null,this._tail=e,null===this._head&&(this._head=e)},e.prototype.prealloc=function(e){for(var t=this._nodePool,r=0;r<e;r++)t.push({prev:null,next:null,key:null,value:null})},e.prototype.get=function(e){var t=this._map[e];return void 0!==t?(this._unlinkNode(t),this._appendNode(t),t.value):null},e.prototype.peekValue=function(e){var t=this._map[e];return void 0!==t?t.value:null},e.prototype.peek=function(){var e=this._head;return null===e?null:e.value},e.prototype.set=function(e,t){var r=this._map[e];if(void 0!==r)r=this._map[e],this._unlinkNode(r),r.value=t;else if(this.size>=this.capacity)r=this._head,this._unlinkNode(r),delete this._map[r.key],r.key=e,r.value=t,this._map[e]=r;else{var i=this._nodePool;i.length>0?((r=i.pop()).key=e,r.value=t):r={prev:null,next:null,key:e,value:t},this._map[e]=r,this.size++}this._appendNode(r)},e}();t.LRUMap=r},1296:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.DomRenderer=void 0;var a=r(3787),c=r(8803),l=r(844),h=r(4725),u=r(2585),f=r(8460),_=r(4774),d=r(9631),p="xterm-dom-renderer-owner-",v="xterm-fg-",g="xterm-bg-",y="xterm-focus",m=1,S=function(e){function t(t,r,i,n,o,s,c,l,h,u){var f=e.call(this)||this;return f._colors=t,f._element=r,f._screenElement=i,f._viewportElement=n,f._linkifier=o,f._linkifier2=s,f._charSizeService=l,f._optionsService=h,f._bufferService=u,f._terminalClass=m++,f._rowElements=[],f._rowContainer=document.createElement("div"),f._rowContainer.classList.add("xterm-rows"),f._rowContainer.style.lineHeight="normal",f._rowContainer.setAttribute("aria-hidden","true"),f._refreshRowElements(f._bufferService.cols,f._bufferService.rows),f._selectionContainer=document.createElement("div"),f._selectionContainer.classList.add("xterm-selection"),f._selectionContainer.setAttribute("aria-hidden","true"),f.dimensions={scaledCharWidth:0,scaledCharHeight:0,scaledCellWidth:0,scaledCellHeight:0,scaledCharLeft:0,scaledCharTop:0,scaledCanvasWidth:0,scaledCanvasHeight:0,canvasWidth:0,canvasHeight:0,actualCellWidth:0,actualCellHeight:0},f._updateDimensions(),f._injectCss(),f._rowFactory=c.createInstance(a.DomRendererRowFactory,document,f._colors),f._element.classList.add(p+f._terminalClass),f._screenElement.appendChild(f._rowContainer),f._screenElement.appendChild(f._selectionContainer),f._linkifier.onShowLinkUnderline((function(e){return f._onLinkHover(e)})),f._linkifier.onHideLinkUnderline((function(e){return f._onLinkLeave(e)})),f._linkifier2.onShowLinkUnderline((function(e){return f._onLinkHover(e)})),f._linkifier2.onHideLinkUnderline((function(e){return f._onLinkLeave(e)})),f}return n(t,e),Object.defineProperty(t.prototype,"onRequestRedraw",{get:function(){return(new f.EventEmitter).event},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){this._element.classList.remove(p+this._terminalClass),(0,d.removeElementFromParent)(this._rowContainer,this._selectionContainer,this._themeStyleElement,this._dimensionsStyleElement),e.prototype.dispose.call(this)},t.prototype._updateDimensions=function(){this.dimensions.scaledCharWidth=this._charSizeService.width*window.devicePixelRatio,this.dimensions.scaledCharHeight=Math.ceil(this._charSizeService.height*window.devicePixelRatio),this.dimensions.scaledCellWidth=this.dimensions.scaledCharWidth+Math.round(this._optionsService.rawOptions.letterSpacing),this.dimensions.scaledCellHeight=Math.floor(this.dimensions.scaledCharHeight*this._optionsService.rawOptions.lineHeight),this.dimensions.scaledCharLeft=0,this.dimensions.scaledCharTop=0,this.dimensions.scaledCanvasWidth=this.dimensions.scaledCellWidth*this._bufferService.cols,this.dimensions.scaledCanvasHeight=this.dimensions.scaledCellHeight*this._bufferService.rows,this.dimensions.canvasWidth=Math.round(this.dimensions.scaledCanvasWidth/window.devicePixelRatio),this.dimensions.canvasHeight=Math.round(this.dimensions.scaledCanvasHeight/window.devicePixelRatio),this.dimensions.actualCellWidth=this.dimensions.canvasWidth/this._bufferService.cols,this.dimensions.actualCellHeight=this.dimensions.canvasHeight/this._bufferService.rows;for(var e=0,t=this._rowElements;e<t.length;e++){var r=t[e];r.style.width=this.dimensions.canvasWidth+"px",r.style.height=this.dimensions.actualCellHeight+"px",r.style.lineHeight=this.dimensions.actualCellHeight+"px",r.style.overflow="hidden"}this._dimensionsStyleElement||(this._dimensionsStyleElement=document.createElement("style"),this._screenElement.appendChild(this._dimensionsStyleElement));var i=this._terminalSelector+" .xterm-rows span { display: inline-block; height: 100%; vertical-align: top; width: "+this.dimensions.actualCellWidth+"px}";this._dimensionsStyleElement.textContent=i,this._selectionContainer.style.height=this._viewportElement.style.height,this._screenElement.style.width=this.dimensions.canvasWidth+"px",this._screenElement.style.height=this.dimensions.canvasHeight+"px"},t.prototype.setColors=function(e){this._colors=e,this._injectCss()},t.prototype._injectCss=function(){var e=this;this._themeStyleElement||(this._themeStyleElement=document.createElement("style"),this._screenElement.appendChild(this._themeStyleElement));var t=this._terminalSelector+" .xterm-rows { color: "+this._colors.foreground.css+"; font-family: "+this._optionsService.rawOptions.fontFamily+"; font-size: "+this._optionsService.rawOptions.fontSize+"px;}";t+=this._terminalSelector+" span:not(."+a.BOLD_CLASS+") { font-weight: "+this._optionsService.rawOptions.fontWeight+";}"+this._terminalSelector+" span."+a.BOLD_CLASS+" { font-weight: "+this._optionsService.rawOptions.fontWeightBold+";}"+this._terminalSelector+" span."+a.ITALIC_CLASS+" { font-style: italic;}",t+="@keyframes blink_box_shadow_"+this._terminalClass+" { 50% {  box-shadow: none; }}",t+="@keyframes blink_block_"+this._terminalClass+" { 0% {  background-color: "+this._colors.cursor.css+";  color: "+this._colors.cursorAccent.css+"; } 50% {  background-color: "+this._colors.cursorAccent.css+";  color: "+this._colors.cursor.css+"; }}",t+=this._terminalSelector+" .xterm-rows:not(.xterm-focus) ."+a.CURSOR_CLASS+"."+a.CURSOR_STYLE_BLOCK_CLASS+" { outline: 1px solid "+this._colors.cursor.css+"; outline-offset: -1px;}"+this._terminalSelector+" .xterm-rows.xterm-focus ."+a.CURSOR_CLASS+"."+a.CURSOR_BLINK_CLASS+":not(."+a.CURSOR_STYLE_BLOCK_CLASS+") { animation: blink_box_shadow_"+this._terminalClass+" 1s step-end infinite;}"+this._terminalSelector+" .xterm-rows.xterm-focus ."+a.CURSOR_CLASS+"."+a.CURSOR_BLINK_CLASS+"."+a.CURSOR_STYLE_BLOCK_CLASS+" { animation: blink_block_"+this._terminalClass+" 1s step-end infinite;}"+this._terminalSelector+" .xterm-rows.xterm-focus ."+a.CURSOR_CLASS+"."+a.CURSOR_STYLE_BLOCK_CLASS+" { background-color: "+this._colors.cursor.css+"; color: "+this._colors.cursorAccent.css+";}"+this._terminalSelector+" .xterm-rows ."+a.CURSOR_CLASS+"."+a.CURSOR_STYLE_BAR_CLASS+" { box-shadow: "+this._optionsService.rawOptions.cursorWidth+"px 0 0 "+this._colors.cursor.css+" inset;}"+this._terminalSelector+" .xterm-rows ."+a.CURSOR_CLASS+"."+a.CURSOR_STYLE_UNDERLINE_CLASS+" { box-shadow: 0 -1px 0 "+this._colors.cursor.css+" inset;}",t+=this._terminalSelector+" .xterm-selection { position: absolute; top: 0; left: 0; z-index: 1; pointer-events: none;}"+this._terminalSelector+" .xterm-selection div { position: absolute; background-color: "+this._colors.selectionTransparent.css+";}",this._colors.ansi.forEach((function(r,i){t+=e._terminalSelector+" ."+v+i+" { color: "+r.css+"; }"+e._terminalSelector+" ."+g+i+" { background-color: "+r.css+"; }"})),t+=this._terminalSelector+" ."+v+c.INVERTED_DEFAULT_COLOR+" { color: "+_.color.opaque(this._colors.background).css+"; }"+this._terminalSelector+" ."+g+c.INVERTED_DEFAULT_COLOR+" { background-color: "+this._colors.foreground.css+"; }",this._themeStyleElement.textContent=t},t.prototype.onDevicePixelRatioChange=function(){this._updateDimensions()},t.prototype._refreshRowElements=function(e,t){for(var r=this._rowElements.length;r<=t;r++){var i=document.createElement("div");this._rowContainer.appendChild(i),this._rowElements.push(i)}for(;this._rowElements.length>t;)this._rowContainer.removeChild(this._rowElements.pop())},t.prototype.onResize=function(e,t){this._refreshRowElements(e,t),this._updateDimensions()},t.prototype.onCharSizeChanged=function(){this._updateDimensions()},t.prototype.onBlur=function(){this._rowContainer.classList.remove(y)},t.prototype.onFocus=function(){this._rowContainer.classList.add(y)},t.prototype.onSelectionChanged=function(e,t,r){for(;this._selectionContainer.children.length;)this._selectionContainer.removeChild(this._selectionContainer.children[0]);if(e&&t){var i=e[1]-this._bufferService.buffer.ydisp,n=t[1]-this._bufferService.buffer.ydisp,o=Math.max(i,0),s=Math.min(n,this._bufferService.rows-1);if(!(o>=this._bufferService.rows||s<0)){var a=document.createDocumentFragment();if(r)a.appendChild(this._createSelectionElement(o,e[0],t[0],s-o+1));else{var c=i===o?e[0]:0,l=o===n?t[0]:this._bufferService.cols;a.appendChild(this._createSelectionElement(o,c,l));var h=s-o-1;if(a.appendChild(this._createSelectionElement(o+1,0,this._bufferService.cols,h)),o!==s){var u=n===s?t[0]:this._bufferService.cols;a.appendChild(this._createSelectionElement(s,0,u))}}this._selectionContainer.appendChild(a)}}},t.prototype._createSelectionElement=function(e,t,r,i){void 0===i&&(i=1);var n=document.createElement("div");return n.style.height=i*this.dimensions.actualCellHeight+"px",n.style.top=e*this.dimensions.actualCellHeight+"px",n.style.left=t*this.dimensions.actualCellWidth+"px",n.style.width=this.dimensions.actualCellWidth*(r-t)+"px",n},t.prototype.onCursorMove=function(){},t.prototype.onOptionsChanged=function(){this._updateDimensions(),this._injectCss()},t.prototype.clear=function(){for(var e=0,t=this._rowElements;e<t.length;e++)t[e].innerText=""},t.prototype.renderRows=function(e,t){for(var r=this._bufferService.buffer.ybase+this._bufferService.buffer.y,i=Math.min(this._bufferService.buffer.x,this._bufferService.cols-1),n=this._optionsService.rawOptions.cursorBlink,o=e;o<=t;o++){var s=this._rowElements[o];s.innerText="";var a=o+this._bufferService.buffer.ydisp,c=this._bufferService.buffer.lines.get(a),l=this._optionsService.rawOptions.cursorStyle;s.appendChild(this._rowFactory.createRow(c,a,a===r,l,i,n,this.dimensions.actualCellWidth,this._bufferService.cols))}},Object.defineProperty(t.prototype,"_terminalSelector",{get:function(){return"."+p+this._terminalClass},enumerable:!1,configurable:!0}),t.prototype._onLinkHover=function(e){this._setCellUnderline(e.x1,e.x2,e.y1,e.y2,e.cols,!0)},t.prototype._onLinkLeave=function(e){this._setCellUnderline(e.x1,e.x2,e.y1,e.y2,e.cols,!1)},t.prototype._setCellUnderline=function(e,t,r,i,n,o){for(;e!==t||r!==i;){var s=this._rowElements[r];if(!s)return;var a=s.children[e];a&&(a.style.textDecoration=o?"underline":"none"),++e>=n&&(e=0,r++)}},o([s(6,u.IInstantiationService),s(7,h.ICharSizeService),s(8,u.IOptionsService),s(9,u.IBufferService)],t)}(l.Disposable);t.DomRenderer=S},3787:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.DomRendererRowFactory=t.CURSOR_STYLE_UNDERLINE_CLASS=t.CURSOR_STYLE_BAR_CLASS=t.CURSOR_STYLE_BLOCK_CLASS=t.CURSOR_BLINK_CLASS=t.CURSOR_CLASS=t.STRIKETHROUGH_CLASS=t.UNDERLINE_CLASS=t.ITALIC_CLASS=t.DIM_CLASS=t.BOLD_CLASS=void 0;var o=r(8803),s=r(643),a=r(511),c=r(2585),l=r(4774),h=r(4725),u=r(4269);t.BOLD_CLASS="xterm-bold",t.DIM_CLASS="xterm-dim",t.ITALIC_CLASS="xterm-italic",t.UNDERLINE_CLASS="xterm-underline",t.STRIKETHROUGH_CLASS="xterm-strikethrough",t.CURSOR_CLASS="xterm-cursor",t.CURSOR_BLINK_CLASS="xterm-cursor-blink",t.CURSOR_STYLE_BLOCK_CLASS="xterm-cursor-block",t.CURSOR_STYLE_BAR_CLASS="xterm-cursor-bar",t.CURSOR_STYLE_UNDERLINE_CLASS="xterm-cursor-underline";var f=function(){function e(e,t,r,i,n){this._document=e,this._colors=t,this._characterJoinerService=r,this._optionsService=i,this._coreService=n,this._workCell=new a.CellData}return e.prototype.setColors=function(e){this._colors=e},e.prototype.createRow=function(e,r,i,n,a,c,h,f){for(var d=this._document.createDocumentFragment(),p=this._characterJoinerService.getJoinedCharacters(r),v=0,g=Math.min(e.length,f)-1;g>=0;g--)if(e.loadCell(g,this._workCell).getCode()!==s.NULL_CELL_CODE||i&&g===a){v=g+1;break}for(g=0;g<v;g++){e.loadCell(g,this._workCell);var y=this._workCell.getWidth();if(0!==y){var m=!1,S=g,C=this._workCell;if(p.length>0&&g===p[0][0]){m=!0;var b=p.shift();C=new u.JoinedCellData(this._workCell,e.translateToString(!0,b[0],b[1]),b[1]-b[0]),S=b[1]-1,y=C.getWidth()}var w=this._document.createElement("span");if(y>1&&(w.style.width=h*y+"px"),m&&(w.style.display="inline",a>=g&&a<=S&&(a=g)),!this._coreService.isCursorHidden&&i&&g===a)switch(w.classList.add(t.CURSOR_CLASS),c&&w.classList.add(t.CURSOR_BLINK_CLASS),n){case"bar":w.classList.add(t.CURSOR_STYLE_BAR_CLASS);break;case"underline":w.classList.add(t.CURSOR_STYLE_UNDERLINE_CLASS);break;default:w.classList.add(t.CURSOR_STYLE_BLOCK_CLASS)}C.isBold()&&w.classList.add(t.BOLD_CLASS),C.isItalic()&&w.classList.add(t.ITALIC_CLASS),C.isDim()&&w.classList.add(t.DIM_CLASS),C.isUnderline()&&w.classList.add(t.UNDERLINE_CLASS),C.isInvisible()?w.textContent=s.WHITESPACE_CELL_CHAR:w.textContent=C.getChars()||s.WHITESPACE_CELL_CHAR,C.isStrikethrough()&&w.classList.add(t.STRIKETHROUGH_CLASS);var L=C.getFgColor(),E=C.getFgColorMode(),x=C.getBgColor(),k=C.getBgColorMode(),M=!!C.isInverse();if(M){var A=L;L=x,x=A;var R=E;E=k,k=R}switch(E){case 16777216:case 33554432:C.isBold()&&L<8&&this._optionsService.rawOptions.drawBoldTextInBrightColors&&(L+=8),this._applyMinimumContrast(w,this._colors.background,this._colors.ansi[L])||w.classList.add("xterm-fg-"+L);break;case 50331648:var O=l.rgba.toColor(L>>16&255,L>>8&255,255&L);this._applyMinimumContrast(w,this._colors.background,O)||this._addStyle(w,"color:#"+_(L.toString(16),"0",6));break;default:this._applyMinimumContrast(w,this._colors.background,this._colors.foreground)||M&&w.classList.add("xterm-fg-"+o.INVERTED_DEFAULT_COLOR)}switch(k){case 16777216:case 33554432:w.classList.add("xterm-bg-"+x);break;case 50331648:this._addStyle(w,"background-color:#"+_(x.toString(16),"0",6));break;default:M&&w.classList.add("xterm-bg-"+o.INVERTED_DEFAULT_COLOR)}d.appendChild(w),g=S}}return d},e.prototype._applyMinimumContrast=function(e,t,r){if(1===this._optionsService.rawOptions.minimumContrastRatio)return!1;var i=this._colors.contrastCache.getColor(this._workCell.bg,this._workCell.fg);return void 0===i&&(i=l.color.ensureContrastRatio(t,r,this._optionsService.rawOptions.minimumContrastRatio),this._colors.contrastCache.setColor(this._workCell.bg,this._workCell.fg,null!=i?i:null)),!!i&&(this._addStyle(e,"color:"+i.css),!0)},e.prototype._addStyle=function(e,t){e.setAttribute("style",""+(e.getAttribute("style")||"")+t+";")},i([n(2,h.ICharacterJoinerService),n(3,c.IOptionsService),n(4,c.ICoreService)],e)}();function _(e,t,r){for(;e.length<r;)e=t+e;return e}t.DomRendererRowFactory=f},456:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SelectionModel=void 0;var r=function(){function e(e){this._bufferService=e,this.isSelectAllActive=!1,this.selectionStartLength=0}return e.prototype.clearSelection=function(){this.selectionStart=void 0,this.selectionEnd=void 0,this.isSelectAllActive=!1,this.selectionStartLength=0},Object.defineProperty(e.prototype,"finalSelectionStart",{get:function(){return this.isSelectAllActive?[0,0]:this.selectionEnd&&this.selectionStart&&this.areSelectionValuesReversed()?this.selectionEnd:this.selectionStart},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"finalSelectionEnd",{get:function(){if(this.isSelectAllActive)return[this._bufferService.cols,this._bufferService.buffer.ybase+this._bufferService.rows-1];if(this.selectionStart){if(!this.selectionEnd||this.areSelectionValuesReversed()){var e=this.selectionStart[0]+this.selectionStartLength;return e>this._bufferService.cols?e%this._bufferService.cols==0?[this._bufferService.cols,this.selectionStart[1]+Math.floor(e/this._bufferService.cols)-1]:[e%this._bufferService.cols,this.selectionStart[1]+Math.floor(e/this._bufferService.cols)]:[e,this.selectionStart[1]]}return this.selectionStartLength&&this.selectionEnd[1]===this.selectionStart[1]?[Math.max(this.selectionStart[0]+this.selectionStartLength,this.selectionEnd[0]),this.selectionEnd[1]]:this.selectionEnd}},enumerable:!1,configurable:!0}),e.prototype.areSelectionValuesReversed=function(){var e=this.selectionStart,t=this.selectionEnd;return!(!e||!t)&&(e[1]>t[1]||e[1]===t[1]&&e[0]>t[0])},e.prototype.onTrim=function(e){return this.selectionStart&&(this.selectionStart[1]-=e),this.selectionEnd&&(this.selectionEnd[1]-=e),this.selectionEnd&&this.selectionEnd[1]<0?(this.clearSelection(),!0):(this.selectionStart&&this.selectionStart[1]<0&&(this.selectionStart[1]=0),!1)},e}();t.SelectionModel=r},428:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.CharSizeService=void 0;var o=r(2585),s=r(8460),a=function(){function e(e,t,r){this._optionsService=r,this.width=0,this.height=0,this._onCharSizeChange=new s.EventEmitter,this._measureStrategy=new c(e,t,this._optionsService)}return Object.defineProperty(e.prototype,"hasValidSize",{get:function(){return this.width>0&&this.height>0},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onCharSizeChange",{get:function(){return this._onCharSizeChange.event},enumerable:!1,configurable:!0}),e.prototype.measure=function(){var e=this._measureStrategy.measure();e.width===this.width&&e.height===this.height||(this.width=e.width,this.height=e.height,this._onCharSizeChange.fire())},i([n(2,o.IOptionsService)],e)}();t.CharSizeService=a;var c=function(){function e(e,t,r){this._document=e,this._parentElement=t,this._optionsService=r,this._result={width:0,height:0},this._measureElement=this._document.createElement("span"),this._measureElement.classList.add("xterm-char-measure-element"),this._measureElement.textContent="W",this._measureElement.setAttribute("aria-hidden","true"),this._parentElement.appendChild(this._measureElement)}return e.prototype.measure=function(){this._measureElement.style.fontFamily=this._optionsService.rawOptions.fontFamily,this._measureElement.style.fontSize=this._optionsService.rawOptions.fontSize+"px";var e=this._measureElement.getBoundingClientRect();return 0!==e.width&&0!==e.height&&(this._result.width=e.width,this._result.height=Math.ceil(e.height)),this._result},e}()},4269:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.CharacterJoinerService=t.JoinedCellData=void 0;var a=r(3734),c=r(643),l=r(511),h=r(2585),u=function(e){function t(t,r,i){var n=e.call(this)||this;return n.content=0,n.combinedData="",n.fg=t.fg,n.bg=t.bg,n.combinedData=r,n._width=i,n}return n(t,e),t.prototype.isCombined=function(){return 2097152},t.prototype.getWidth=function(){return this._width},t.prototype.getChars=function(){return this.combinedData},t.prototype.getCode=function(){return 2097151},t.prototype.setFromCharData=function(e){throw new Error("not implemented")},t.prototype.getAsCharData=function(){return[this.fg,this.getChars(),this.getWidth(),this.getCode()]},t}(a.AttributeData);t.JoinedCellData=u;var f=function(){function e(e){this._bufferService=e,this._characterJoiners=[],this._nextCharacterJoinerId=0,this._workCell=new l.CellData}return e.prototype.register=function(e){var t={id:this._nextCharacterJoinerId++,handler:e};return this._characterJoiners.push(t),t.id},e.prototype.deregister=function(e){for(var t=0;t<this._characterJoiners.length;t++)if(this._characterJoiners[t].id===e)return this._characterJoiners.splice(t,1),!0;return!1},e.prototype.getJoinedCharacters=function(e){if(0===this._characterJoiners.length)return[];var t=this._bufferService.buffer.lines.get(e);if(!t||0===t.length)return[];for(var r=[],i=t.translateToString(!0),n=0,o=0,s=0,a=t.getFg(0),l=t.getBg(0),h=0;h<t.getTrimmedLength();h++)if(t.loadCell(h,this._workCell),0!==this._workCell.getWidth()){if(this._workCell.fg!==a||this._workCell.bg!==l){if(h-n>1)for(var u=this._getJoinedRanges(i,s,o,t,n),f=0;f<u.length;f++)r.push(u[f]);n=h,s=o,a=this._workCell.fg,l=this._workCell.bg}o+=this._workCell.getChars().length||c.WHITESPACE_CELL_CHAR.length}if(this._bufferService.cols-n>1)for(u=this._getJoinedRanges(i,s,o,t,n),f=0;f<u.length;f++)r.push(u[f]);return r},e.prototype._getJoinedRanges=function(t,r,i,n,o){var s=t.substring(r,i),a=[];try{a=this._characterJoiners[0].handler(s)}catch(e){console.error(e)}for(var c=1;c<this._characterJoiners.length;c++)try{for(var l=this._characterJoiners[c].handler(s),h=0;h<l.length;h++)e._mergeRanges(a,l[h])}catch(e){console.error(e)}return this._stringRangesToCellRanges(a,n,o),a},e.prototype._stringRangesToCellRanges=function(e,t,r){var i=0,n=!1,o=0,s=e[i];if(s){for(var a=r;a<this._bufferService.cols;a++){var l=t.getWidth(a),h=t.getString(a).length||c.WHITESPACE_CELL_CHAR.length;if(0!==l){if(!n&&s[0]<=o&&(s[0]=a,n=!0),s[1]<=o){if(s[1]=a,!(s=e[++i]))break;s[0]<=o?(s[0]=a,n=!0):n=!1}o+=h}}s&&(s[1]=this._bufferService.cols)}},e._mergeRanges=function(e,t){for(var r=!1,i=0;i<e.length;i++){var n=e[i];if(r){if(t[1]<=n[0])return e[i-1][1]=t[1],e;if(t[1]<=n[1])return e[i-1][1]=Math.max(t[1],n[1]),e.splice(i,1),e;e.splice(i,1),i--}else{if(t[1]<=n[0])return e.splice(i,0,t),e;if(t[1]<=n[1])return n[0]=Math.min(t[0],n[0]),e;t[0]<n[1]&&(n[0]=Math.min(t[0],n[0]),r=!0)}}return r?e[e.length-1][1]=t[1]:e.push(t),e},e=o([s(0,h.IBufferService)],e)}();t.CharacterJoinerService=f},5114:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CoreBrowserService=void 0;var r=function(){function e(e){this._textarea=e}return Object.defineProperty(e.prototype,"isFocused",{get:function(){return(this._textarea.getRootNode?this._textarea.getRootNode():document).activeElement===this._textarea&&document.hasFocus()},enumerable:!1,configurable:!0}),e}();t.CoreBrowserService=r},7641:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.Decoration=t.DecorationService=void 0;var a=r(8460),c=r(844),l=r(2585),h=function(e){function t(t){var r=e.call(this)||this;return r._instantiationService=t,r._decorations=[],r}return n(t,e),t.prototype.attachToDom=function(e,t){var r=this;this._renderService=t,this._screenElement=e,this._container=document.createElement("div"),this._container.classList.add("xterm-decoration-container"),e.appendChild(this._container),this.register(this._renderService.onRenderedBufferChange((function(){return r.refresh()}))),this.register(this._renderService.onDimensionsChange((function(){return r.refresh(!0)})))},t.prototype.registerDecoration=function(e){var t=this;if(!e.marker.isDisposed&&this._container){var r=this._instantiationService.createInstance(u,e,this._container);return this._decorations.push(r),r.onDispose((function(){return t._decorations.splice(t._decorations.indexOf(r),1)})),this._queueRefresh(),r}},t.prototype._queueRefresh=function(){var e=this;void 0===this._animationFrame&&(this._animationFrame=window.requestAnimationFrame((function(){e.refresh(),e._animationFrame=void 0})))},t.prototype.refresh=function(e){if(this._renderService)for(var t=0,r=this._decorations;t<r.length;t++)r[t].render(this._renderService,e)},t.prototype.dispose=function(){for(var e=0,t=this._decorations;e<t.length;e++)t[e].dispose();this._screenElement&&this._container&&this._screenElement.contains(this._container)&&this._screenElement.removeChild(this._container)},o([s(0,l.IInstantiationService)],t)}(c.Disposable);t.DecorationService=h;var u=function(e){function t(t,r,i){var n,o=e.call(this)||this;return o._container=r,o._bufferService=i,o.isDisposed=!1,o._onDispose=new a.EventEmitter,o._onRender=new a.EventEmitter,o.x=null!==(n=t.x)&&void 0!==n?n:0,o._marker=t.marker,o._marker.onDispose((function(){return o.dispose()})),o.anchor=t.anchor||"left",o.width=t.width||1,o.height=t.height||1,o}return n(t,e),Object.defineProperty(t.prototype,"element",{get:function(){return this._element},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"marker",{get:function(){return this._marker},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onDispose",{get:function(){return this._onDispose.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRender",{get:function(){return this._onRender.event},enumerable:!1,configurable:!0}),t.prototype.render=function(e,t){this._element&&!t||this._createElement(e,t),this._container&&this._element&&!this._container.contains(this._element)&&this._container.append(this._element),this._refreshStyle(e),this._element&&this._onRender.fire(this._element)},t.prototype._createElement=function(e,t){t&&this._element&&this._container.contains(this._element)&&this._container.removeChild(this._element),this._element=document.createElement("div"),this._element.classList.add("xterm-decoration"),this._element.style.width=this.width*e.dimensions.actualCellWidth+"px",this._element.style.height=this.height*e.dimensions.actualCellHeight+"px",this._element.style.top=(this.marker.line-this._bufferService.buffers.active.ydisp)*e.dimensions.actualCellHeight+"px",this._element.style.lineHeight=e.dimensions.actualCellHeight+"px",this.x&&this.x>this._bufferService.cols&&(this._element.style.display="none"),"right"===this.anchor?this._element.style.right=this.x?this.x*e.dimensions.actualCellWidth+"px":"":this._element.style.left=this.x?this.x*e.dimensions.actualCellWidth+"px":""},t.prototype._refreshStyle=function(e){if(this._element){var t=this.marker.line-this._bufferService.buffers.active.ydisp;t<0||t>this._bufferService.rows?this._element.style.display="none":(this._element.style.top=t*e.dimensions.actualCellHeight+"px",this._element.style.display=this._bufferService.buffer===this._bufferService.buffers.alt?"none":"block")}},t.prototype.dispose=function(){this.isDisposed||(this._element&&this._container.contains(this._element)&&this._container.removeChild(this._element),this.isDisposed=!0,this._onDispose.fire())},o([s(2,l.IBufferService)],t)}(c.Disposable);t.Decoration=u},8934:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.MouseService=void 0;var o=r(4725),s=r(9806),a=function(){function e(e,t){this._renderService=e,this._charSizeService=t}return e.prototype.getCoords=function(e,t,r,i,n){return(0,s.getCoords)(e,t,r,i,this._charSizeService.hasValidSize,this._renderService.dimensions.actualCellWidth,this._renderService.dimensions.actualCellHeight,n)},e.prototype.getRawByteCoords=function(e,t,r,i){var n=this.getCoords(e,t,r,i);return(0,s.getRawByteCoords)(n)},i([n(0,o.IRenderService),n(1,o.ICharSizeService)],e)}();t.MouseService=a},3230:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.RenderService=void 0;var a=r(6193),c=r(8460),l=r(844),h=r(5596),u=r(3656),f=r(2585),_=r(4725),d=function(e){function t(t,r,i,n,o,s){var l=e.call(this)||this;if(l._renderer=t,l._rowCount=r,l._charSizeService=o,l._isPaused=!1,l._needsFullRefresh=!1,l._isNextRenderRedrawOnly=!0,l._needsSelectionRefresh=!1,l._canvasWidth=0,l._canvasHeight=0,l._selectionState={start:void 0,end:void 0,columnSelectMode:!1},l._onDimensionsChange=new c.EventEmitter,l._onRender=new c.EventEmitter,l._onRefreshRequest=new c.EventEmitter,l.register({dispose:function(){return l._renderer.dispose()}}),l._renderDebouncer=new a.RenderDebouncer((function(e,t){return l._renderRows(e,t)})),l.register(l._renderDebouncer),l._screenDprMonitor=new h.ScreenDprMonitor,l._screenDprMonitor.setListener((function(){return l.onDevicePixelRatioChange()})),l.register(l._screenDprMonitor),l.register(s.onResize((function(){return l._fullRefresh()}))),l.register(s.buffers.onBufferActivate((function(){var e;return null===(e=l._renderer)||void 0===e?void 0:e.clear()}))),l.register(n.onOptionChange((function(){return l._renderer.onOptionsChanged()}))),l.register(l._charSizeService.onCharSizeChange((function(){return l.onCharSizeChanged()}))),l._renderer.onRequestRedraw((function(e){return l.refreshRows(e.start,e.end,!0)})),l.register((0,u.addDisposableDomListener)(window,"resize",(function(){return l.onDevicePixelRatioChange()}))),"IntersectionObserver"in window){var f=new IntersectionObserver((function(e){return l._onIntersectionChange(e[e.length-1])}),{threshold:0});f.observe(i),l.register({dispose:function(){return f.disconnect()}})}return l}return n(t,e),Object.defineProperty(t.prototype,"onDimensionsChange",{get:function(){return this._onDimensionsChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRenderedBufferChange",{get:function(){return this._onRender.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRefreshRequest",{get:function(){return this._onRefreshRequest.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dimensions",{get:function(){return this._renderer.dimensions},enumerable:!1,configurable:!0}),t.prototype._onIntersectionChange=function(e){this._isPaused=void 0===e.isIntersecting?0===e.intersectionRatio:!e.isIntersecting,this._isPaused||this._charSizeService.hasValidSize||this._charSizeService.measure(),!this._isPaused&&this._needsFullRefresh&&(this.refreshRows(0,this._rowCount-1),this._needsFullRefresh=!1)},t.prototype.refreshRows=function(e,t,r){void 0===r&&(r=!1),this._isPaused?this._needsFullRefresh=!0:(r||(this._isNextRenderRedrawOnly=!1),this._renderDebouncer.refresh(e,t,this._rowCount))},t.prototype._renderRows=function(e,t){this._renderer.renderRows(e,t),this._needsSelectionRefresh&&(this._renderer.onSelectionChanged(this._selectionState.start,this._selectionState.end,this._selectionState.columnSelectMode),this._needsSelectionRefresh=!1),this._isNextRenderRedrawOnly||this._onRender.fire({start:e,end:t}),this._isNextRenderRedrawOnly=!0},t.prototype.resize=function(e,t){this._rowCount=t,this._fireOnCanvasResize()},t.prototype.changeOptions=function(){this._renderer.onOptionsChanged(),this.refreshRows(0,this._rowCount-1),this._fireOnCanvasResize()},t.prototype._fireOnCanvasResize=function(){this._renderer.dimensions.canvasWidth===this._canvasWidth&&this._renderer.dimensions.canvasHeight===this._canvasHeight||this._onDimensionsChange.fire(this._renderer.dimensions)},t.prototype.dispose=function(){e.prototype.dispose.call(this)},t.prototype.setRenderer=function(e){var t=this;this._renderer.dispose(),this._renderer=e,this._renderer.onRequestRedraw((function(e){return t.refreshRows(e.start,e.end,!0)})),this._needsSelectionRefresh=!0,this._fullRefresh()},t.prototype._fullRefresh=function(){this._isPaused?this._needsFullRefresh=!0:this.refreshRows(0,this._rowCount-1)},t.prototype.clearTextureAtlas=function(){var e,t;null===(t=null===(e=this._renderer)||void 0===e?void 0:e.clearTextureAtlas)||void 0===t||t.call(e),this._fullRefresh()},t.prototype.setColors=function(e){this._renderer.setColors(e),this._fullRefresh()},t.prototype.onDevicePixelRatioChange=function(){this._charSizeService.measure(),this._renderer.onDevicePixelRatioChange(),this.refreshRows(0,this._rowCount-1)},t.prototype.onResize=function(e,t){this._renderer.onResize(e,t),this._fullRefresh()},t.prototype.onCharSizeChanged=function(){this._renderer.onCharSizeChanged()},t.prototype.onBlur=function(){this._renderer.onBlur()},t.prototype.onFocus=function(){this._renderer.onFocus()},t.prototype.onSelectionChanged=function(e,t,r){this._selectionState.start=e,this._selectionState.end=t,this._selectionState.columnSelectMode=r,this._renderer.onSelectionChanged(e,t,r)},t.prototype.onCursorMove=function(){this._renderer.onCursorMove()},t.prototype.clear=function(){this._renderer.clear()},o([s(3,f.IOptionsService),s(4,_.ICharSizeService),s(5,f.IBufferService)],t)}(l.Disposable);t.RenderService=d},9312:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.SelectionService=void 0;var a=r(6114),c=r(456),l=r(511),h=r(8460),u=r(4725),f=r(2585),_=r(9806),d=r(9504),p=r(844),v=r(4841),g=String.fromCharCode(160),y=new RegExp(g,"g"),m=function(e){function t(t,r,i,n,o,s,a,u){var f=e.call(this)||this;return f._element=t,f._screenElement=r,f._linkifier=i,f._bufferService=n,f._coreService=o,f._mouseService=s,f._optionsService=a,f._renderService=u,f._dragScrollAmount=0,f._enabled=!0,f._workCell=new l.CellData,f._mouseDownTimeStamp=0,f._oldHasSelection=!1,f._oldSelectionStart=void 0,f._oldSelectionEnd=void 0,f._onLinuxMouseSelection=f.register(new h.EventEmitter),f._onRedrawRequest=f.register(new h.EventEmitter),f._onSelectionChange=f.register(new h.EventEmitter),f._onRequestScrollLines=f.register(new h.EventEmitter),f._mouseMoveListener=function(e){return f._onMouseMove(e)},f._mouseUpListener=function(e){return f._onMouseUp(e)},f._coreService.onUserInput((function(){f.hasSelection&&f.clearSelection()})),f._trimListener=f._bufferService.buffer.lines.onTrim((function(e){return f._onTrim(e)})),f.register(f._bufferService.buffers.onBufferActivate((function(e){return f._onBufferActivate(e)}))),f.enable(),f._model=new c.SelectionModel(f._bufferService),f._activeSelectionMode=0,f}return n(t,e),Object.defineProperty(t.prototype,"onLinuxMouseSelection",{get:function(){return this._onLinuxMouseSelection.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestRedraw",{get:function(){return this._onRedrawRequest.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onSelectionChange",{get:function(){return this._onSelectionChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestScrollLines",{get:function(){return this._onRequestScrollLines.event},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){this._removeMouseDownListeners()},t.prototype.reset=function(){this.clearSelection()},t.prototype.disable=function(){this.clearSelection(),this._enabled=!1},t.prototype.enable=function(){this._enabled=!0},Object.defineProperty(t.prototype,"selectionStart",{get:function(){return this._model.finalSelectionStart},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"selectionEnd",{get:function(){return this._model.finalSelectionEnd},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"hasSelection",{get:function(){var e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd;return!(!e||!t||e[0]===t[0]&&e[1]===t[1])},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"selectionText",{get:function(){var e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd;if(!e||!t)return"";var r=this._bufferService.buffer,i=[];if(3===this._activeSelectionMode){if(e[0]===t[0])return"";for(var n=e[1];n<=t[1];n++){var o=r.translateBufferLineToString(n,!0,e[0],t[0]);i.push(o)}}else{var s=e[1]===t[1]?t[0]:void 0;for(i.push(r.translateBufferLineToString(e[1],!0,e[0],s)),n=e[1]+1;n<=t[1]-1;n++){var c=r.lines.get(n);o=r.translateBufferLineToString(n,!0),(null==c?void 0:c.isWrapped)?i[i.length-1]+=o:i.push(o)}e[1]!==t[1]&&(c=r.lines.get(t[1]),o=r.translateBufferLineToString(t[1],!0,0,t[0]),c&&c.isWrapped?i[i.length-1]+=o:i.push(o))}return i.map((function(e){return e.replace(y," ")})).join(a.isWindows?"\r\n":"\n")},enumerable:!1,configurable:!0}),t.prototype.clearSelection=function(){this._model.clearSelection(),this._removeMouseDownListeners(),this.refresh(),this._onSelectionChange.fire()},t.prototype.refresh=function(e){var t=this;this._refreshAnimationFrame||(this._refreshAnimationFrame=window.requestAnimationFrame((function(){return t._refresh()}))),a.isLinux&&e&&this.selectionText.length&&this._onLinuxMouseSelection.fire(this.selectionText)},t.prototype._refresh=function(){this._refreshAnimationFrame=void 0,this._onRedrawRequest.fire({start:this._model.finalSelectionStart,end:this._model.finalSelectionEnd,columnSelectMode:3===this._activeSelectionMode})},t.prototype._isClickInSelection=function(e){var t=this._getMouseBufferCoords(e),r=this._model.finalSelectionStart,i=this._model.finalSelectionEnd;return!!(r&&i&&t)&&this._areCoordsInSelection(t,r,i)},t.prototype._areCoordsInSelection=function(e,t,r){return e[1]>t[1]&&e[1]<r[1]||t[1]===r[1]&&e[1]===t[1]&&e[0]>=t[0]&&e[0]<r[0]||t[1]<r[1]&&e[1]===r[1]&&e[0]<r[0]||t[1]<r[1]&&e[1]===t[1]&&e[0]>=t[0]},t.prototype._selectWordAtCursor=function(e,t){var r,i,n=null===(i=null===(r=this._linkifier.currentLink)||void 0===r?void 0:r.link)||void 0===i?void 0:i.range;if(n)return this._model.selectionStart=[n.start.x-1,n.start.y-1],this._model.selectionStartLength=(0,v.getRangeLength)(n,this._bufferService.cols),this._model.selectionEnd=void 0,!0;var o=this._getMouseBufferCoords(e);return!!o&&(this._selectWordAt(o,t),this._model.selectionEnd=void 0,!0)},t.prototype.selectAll=function(){this._model.isSelectAllActive=!0,this.refresh(),this._onSelectionChange.fire()},t.prototype.selectLines=function(e,t){this._model.clearSelection(),e=Math.max(e,0),t=Math.min(t,this._bufferService.buffer.lines.length-1),this._model.selectionStart=[0,e],this._model.selectionEnd=[this._bufferService.cols,t],this.refresh(),this._onSelectionChange.fire()},t.prototype._onTrim=function(e){this._model.onTrim(e)&&this.refresh()},t.prototype._getMouseBufferCoords=function(e){var t=this._mouseService.getCoords(e,this._screenElement,this._bufferService.cols,this._bufferService.rows,!0);if(t)return t[0]--,t[1]--,t[1]+=this._bufferService.buffer.ydisp,t},t.prototype._getMouseEventScrollAmount=function(e){var t=(0,_.getCoordsRelativeToElement)(e,this._screenElement)[1],r=this._renderService.dimensions.canvasHeight;return t>=0&&t<=r?0:(t>r&&(t-=r),t=Math.min(Math.max(t,-50),50),(t/=50)/Math.abs(t)+Math.round(14*t))},t.prototype.shouldForceSelection=function(e){return a.isMac?e.altKey&&this._optionsService.rawOptions.macOptionClickForcesSelection:e.shiftKey},t.prototype.onMouseDown=function(e){if(this._mouseDownTimeStamp=e.timeStamp,(2!==e.button||!this.hasSelection)&&0===e.button){if(!this._enabled){if(!this.shouldForceSelection(e))return;e.stopPropagation()}e.preventDefault(),this._dragScrollAmount=0,this._enabled&&e.shiftKey?this._onIncrementalClick(e):1===e.detail?this._onSingleClick(e):2===e.detail?this._onDoubleClick(e):3===e.detail&&this._onTripleClick(e),this._addMouseDownListeners(),this.refresh(!0)}},t.prototype._addMouseDownListeners=function(){var e=this;this._screenElement.ownerDocument&&(this._screenElement.ownerDocument.addEventListener("mousemove",this._mouseMoveListener),this._screenElement.ownerDocument.addEventListener("mouseup",this._mouseUpListener)),this._dragScrollIntervalTimer=window.setInterval((function(){return e._dragScroll()}),50)},t.prototype._removeMouseDownListeners=function(){this._screenElement.ownerDocument&&(this._screenElement.ownerDocument.removeEventListener("mousemove",this._mouseMoveListener),this._screenElement.ownerDocument.removeEventListener("mouseup",this._mouseUpListener)),clearInterval(this._dragScrollIntervalTimer),this._dragScrollIntervalTimer=void 0},t.prototype._onIncrementalClick=function(e){this._model.selectionStart&&(this._model.selectionEnd=this._getMouseBufferCoords(e))},t.prototype._onSingleClick=function(e){if(this._model.selectionStartLength=0,this._model.isSelectAllActive=!1,this._activeSelectionMode=this.shouldColumnSelect(e)?3:0,this._model.selectionStart=this._getMouseBufferCoords(e),this._model.selectionStart){this._model.selectionEnd=void 0;var t=this._bufferService.buffer.lines.get(this._model.selectionStart[1]);t&&t.length!==this._model.selectionStart[0]&&0===t.hasWidth(this._model.selectionStart[0])&&this._model.selectionStart[0]++}},t.prototype._onDoubleClick=function(e){this._selectWordAtCursor(e,!0)&&(this._activeSelectionMode=1)},t.prototype._onTripleClick=function(e){var t=this._getMouseBufferCoords(e);t&&(this._activeSelectionMode=2,this._selectLineAt(t[1]))},t.prototype.shouldColumnSelect=function(e){return e.altKey&&!(a.isMac&&this._optionsService.rawOptions.macOptionClickForcesSelection)},t.prototype._onMouseMove=function(e){if(e.stopImmediatePropagation(),this._model.selectionStart){var t=this._model.selectionEnd?[this._model.selectionEnd[0],this._model.selectionEnd[1]]:null;if(this._model.selectionEnd=this._getMouseBufferCoords(e),this._model.selectionEnd){2===this._activeSelectionMode?this._model.selectionEnd[1]<this._model.selectionStart[1]?this._model.selectionEnd[0]=0:this._model.selectionEnd[0]=this._bufferService.cols:1===this._activeSelectionMode&&this._selectToWordAt(this._model.selectionEnd),this._dragScrollAmount=this._getMouseEventScrollAmount(e),3!==this._activeSelectionMode&&(this._dragScrollAmount>0?this._model.selectionEnd[0]=this._bufferService.cols:this._dragScrollAmount<0&&(this._model.selectionEnd[0]=0));var r=this._bufferService.buffer;if(this._model.selectionEnd[1]<r.lines.length){var i=r.lines.get(this._model.selectionEnd[1]);i&&0===i.hasWidth(this._model.selectionEnd[0])&&this._model.selectionEnd[0]++}t&&t[0]===this._model.selectionEnd[0]&&t[1]===this._model.selectionEnd[1]||this.refresh(!0)}else this.refresh(!0)}},t.prototype._dragScroll=function(){if(this._model.selectionEnd&&this._model.selectionStart&&this._dragScrollAmount){this._onRequestScrollLines.fire({amount:this._dragScrollAmount,suppressScrollEvent:!1});var e=this._bufferService.buffer;this._dragScrollAmount>0?(3!==this._activeSelectionMode&&(this._model.selectionEnd[0]=this._bufferService.cols),this._model.selectionEnd[1]=Math.min(e.ydisp+this._bufferService.rows,e.lines.length-1)):(3!==this._activeSelectionMode&&(this._model.selectionEnd[0]=0),this._model.selectionEnd[1]=e.ydisp),this.refresh()}},t.prototype._onMouseUp=function(e){var t=e.timeStamp-this._mouseDownTimeStamp;if(this._removeMouseDownListeners(),this.selectionText.length<=1&&t<500&&e.altKey&&this._optionsService.getOption("altClickMovesCursor")){if(this._bufferService.buffer.ybase===this._bufferService.buffer.ydisp){var r=this._mouseService.getCoords(e,this._element,this._bufferService.cols,this._bufferService.rows,!1);if(r&&void 0!==r[0]&&void 0!==r[1]){var i=(0,d.moveToCellSequence)(r[0]-1,r[1]-1,this._bufferService,this._coreService.decPrivateModes.applicationCursorKeys);this._coreService.triggerDataEvent(i,!0)}}}else this._fireEventIfSelectionChanged()},t.prototype._fireEventIfSelectionChanged=function(){var e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd,r=!(!e||!t||e[0]===t[0]&&e[1]===t[1]);r?e&&t&&(this._oldSelectionStart&&this._oldSelectionEnd&&e[0]===this._oldSelectionStart[0]&&e[1]===this._oldSelectionStart[1]&&t[0]===this._oldSelectionEnd[0]&&t[1]===this._oldSelectionEnd[1]||this._fireOnSelectionChange(e,t,r)):this._oldHasSelection&&this._fireOnSelectionChange(e,t,r)},t.prototype._fireOnSelectionChange=function(e,t,r){this._oldSelectionStart=e,this._oldSelectionEnd=t,this._oldHasSelection=r,this._onSelectionChange.fire()},t.prototype._onBufferActivate=function(e){var t=this;this.clearSelection(),this._trimListener.dispose(),this._trimListener=e.activeBuffer.lines.onTrim((function(e){return t._onTrim(e)}))},t.prototype._convertViewportColToCharacterIndex=function(e,t){for(var r=t[0],i=0;t[0]>=i;i++){var n=e.loadCell(i,this._workCell).getChars().length;0===this._workCell.getWidth()?r--:n>1&&t[0]!==i&&(r+=n-1)}return r},t.prototype.setSelection=function(e,t,r){this._model.clearSelection(),this._removeMouseDownListeners(),this._model.selectionStart=[e,t],this._model.selectionStartLength=r,this.refresh()},t.prototype.rightClickSelect=function(e){this._isClickInSelection(e)||(this._selectWordAtCursor(e,!1)&&this.refresh(!0),this._fireEventIfSelectionChanged())},t.prototype._getWordAt=function(e,t,r,i){if(void 0===r&&(r=!0),void 0===i&&(i=!0),!(e[0]>=this._bufferService.cols)){var n=this._bufferService.buffer,o=n.lines.get(e[1]);if(o){var s=n.translateBufferLineToString(e[1],!1),a=this._convertViewportColToCharacterIndex(o,e),c=a,l=e[0]-a,h=0,u=0,f=0,_=0;if(" "===s.charAt(a)){for(;a>0&&" "===s.charAt(a-1);)a--;for(;c<s.length&&" "===s.charAt(c+1);)c++}else{var d=e[0],p=e[0];0===o.getWidth(d)&&(h++,d--),2===o.getWidth(p)&&(u++,p++);var v=o.getString(p).length;for(v>1&&(_+=v-1,c+=v-1);d>0&&a>0&&!this._isCharWordSeparator(o.loadCell(d-1,this._workCell));){o.loadCell(d-1,this._workCell);var g=this._workCell.getChars().length;0===this._workCell.getWidth()?(h++,d--):g>1&&(f+=g-1,a-=g-1),a--,d--}for(;p<o.length&&c+1<s.length&&!this._isCharWordSeparator(o.loadCell(p+1,this._workCell));){o.loadCell(p+1,this._workCell);var y=this._workCell.getChars().length;2===this._workCell.getWidth()?(u++,p++):y>1&&(_+=y-1,c+=y-1),c++,p++}}c++;var m=a+l-h+f,S=Math.min(this._bufferService.cols,c-a+h+u-f-_);if(t||""!==s.slice(a,c).trim()){if(r&&0===m&&32!==o.getCodePoint(0)){var C=n.lines.get(e[1]-1);if(C&&o.isWrapped&&32!==C.getCodePoint(this._bufferService.cols-1)){var b=this._getWordAt([this._bufferService.cols-1,e[1]-1],!1,!0,!1);if(b){var w=this._bufferService.cols-b.start;m-=w,S+=w}}}if(i&&m+S===this._bufferService.cols&&32!==o.getCodePoint(this._bufferService.cols-1)){var L=n.lines.get(e[1]+1);if((null==L?void 0:L.isWrapped)&&32!==L.getCodePoint(0)){var E=this._getWordAt([0,e[1]+1],!1,!1,!0);E&&(S+=E.length)}}return{start:m,length:S}}}}},t.prototype._selectWordAt=function(e,t){var r=this._getWordAt(e,t);if(r){for(;r.start<0;)r.start+=this._bufferService.cols,e[1]--;this._model.selectionStart=[r.start,e[1]],this._model.selectionStartLength=r.length}},t.prototype._selectToWordAt=function(e){var t=this._getWordAt(e,!0);if(t){for(var r=e[1];t.start<0;)t.start+=this._bufferService.cols,r--;if(!this._model.areSelectionValuesReversed())for(;t.start+t.length>this._bufferService.cols;)t.length-=this._bufferService.cols,r++;this._model.selectionEnd=[this._model.areSelectionValuesReversed()?t.start:t.start+t.length,r]}},t.prototype._isCharWordSeparator=function(e){return 0!==e.getWidth()&&this._optionsService.rawOptions.wordSeparator.indexOf(e.getChars())>=0},t.prototype._selectLineAt=function(e){var t=this._bufferService.buffer.getWrappedRangeForLine(e);this._model.selectionStart=[0,t.first],this._model.selectionEnd=[this._bufferService.cols,t.last],this._model.selectionStartLength=0},o([s(3,f.IBufferService),s(4,f.ICoreService),s(5,u.IMouseService),s(6,f.IOptionsService),s(7,u.IRenderService)],t)}(p.Disposable);t.SelectionService=m},4725:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.IDecorationService=t.ICharacterJoinerService=t.ISoundService=t.ISelectionService=t.IRenderService=t.IMouseService=t.ICoreBrowserService=t.ICharSizeService=void 0;var i=r(8343);t.ICharSizeService=(0,i.createDecorator)("CharSizeService"),t.ICoreBrowserService=(0,i.createDecorator)("CoreBrowserService"),t.IMouseService=(0,i.createDecorator)("MouseService"),t.IRenderService=(0,i.createDecorator)("RenderService"),t.ISelectionService=(0,i.createDecorator)("SelectionService"),t.ISoundService=(0,i.createDecorator)("SoundService"),t.ICharacterJoinerService=(0,i.createDecorator)("CharacterJoinerService"),t.IDecorationService=(0,i.createDecorator)("DecorationService")},357:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.SoundService=void 0;var o=r(2585),s=function(){function e(e){this._optionsService=e}return Object.defineProperty(e,"audioContext",{get:function(){if(!e._audioContext){var t=window.AudioContext||window.webkitAudioContext;if(!t)return console.warn("Web Audio API is not supported by this browser. Consider upgrading to the latest version"),null;e._audioContext=new t}return e._audioContext},enumerable:!1,configurable:!0}),e.prototype.playBellSound=function(){var t=e.audioContext;if(t){var r=t.createBufferSource();t.decodeAudioData(this._base64ToArrayBuffer(this._removeMimeType(this._optionsService.rawOptions.bellSound)),(function(e){r.buffer=e,r.connect(t.destination),r.start(0)}))}},e.prototype._base64ToArrayBuffer=function(e){for(var t=window.atob(e),r=t.length,i=new Uint8Array(r),n=0;n<r;n++)i[n]=t.charCodeAt(n);return i.buffer},e.prototype._removeMimeType=function(e){return e.split(",")[1]},e=i([n(0,o.IOptionsService)],e)}();t.SoundService=s},6349:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CircularList=void 0;var i=r(8460),n=function(){function e(e){this._maxLength=e,this.onDeleteEmitter=new i.EventEmitter,this.onInsertEmitter=new i.EventEmitter,this.onTrimEmitter=new i.EventEmitter,this._array=new Array(this._maxLength),this._startIndex=0,this._length=0}return Object.defineProperty(e.prototype,"onDelete",{get:function(){return this.onDeleteEmitter.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onInsert",{get:function(){return this.onInsertEmitter.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onTrim",{get:function(){return this.onTrimEmitter.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"maxLength",{get:function(){return this._maxLength},set:function(e){if(this._maxLength!==e){for(var t=new Array(e),r=0;r<Math.min(e,this.length);r++)t[r]=this._array[this._getCyclicIndex(r)];this._array=t,this._maxLength=e,this._startIndex=0}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this._length},set:function(e){if(e>this._length)for(var t=this._length;t<e;t++)this._array[t]=void 0;this._length=e},enumerable:!1,configurable:!0}),e.prototype.get=function(e){return this._array[this._getCyclicIndex(e)]},e.prototype.set=function(e,t){this._array[this._getCyclicIndex(e)]=t},e.prototype.push=function(e){this._array[this._getCyclicIndex(this._length)]=e,this._length===this._maxLength?(this._startIndex=++this._startIndex%this._maxLength,this.onTrimEmitter.fire(1)):this._length++},e.prototype.recycle=function(){if(this._length!==this._maxLength)throw new Error("Can only recycle when the buffer is full");return this._startIndex=++this._startIndex%this._maxLength,this.onTrimEmitter.fire(1),this._array[this._getCyclicIndex(this._length-1)]},Object.defineProperty(e.prototype,"isFull",{get:function(){return this._length===this._maxLength},enumerable:!1,configurable:!0}),e.prototype.pop=function(){return this._array[this._getCyclicIndex(this._length---1)]},e.prototype.splice=function(e,t){for(var r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];if(t){for(var n=e;n<this._length-t;n++)this._array[this._getCyclicIndex(n)]=this._array[this._getCyclicIndex(n+t)];this._length-=t,this.onDeleteEmitter.fire({index:e,amount:t})}for(n=this._length-1;n>=e;n--)this._array[this._getCyclicIndex(n+r.length)]=this._array[this._getCyclicIndex(n)];for(n=0;n<r.length;n++)this._array[this._getCyclicIndex(e+n)]=r[n];if(r.length&&this.onInsertEmitter.fire({index:e,amount:r.length}),this._length+r.length>this._maxLength){var o=this._length+r.length-this._maxLength;this._startIndex+=o,this._length=this._maxLength,this.onTrimEmitter.fire(o)}else this._length+=r.length},e.prototype.trimStart=function(e){e>this._length&&(e=this._length),this._startIndex+=e,this._length-=e,this.onTrimEmitter.fire(e)},e.prototype.shiftElements=function(e,t,r){if(!(t<=0)){if(e<0||e>=this._length)throw new Error("start argument out of range");if(e+r<0)throw new Error("Cannot shift elements in list beyond index 0");if(r>0){for(var i=t-1;i>=0;i--)this.set(e+i+r,this.get(e+i));var n=e+t+r-this._length;if(n>0)for(this._length+=n;this._length>this._maxLength;)this._length--,this._startIndex++,this.onTrimEmitter.fire(1)}else for(i=0;i<t;i++)this.set(e+i+r,this.get(e+i))}},e.prototype._getCyclicIndex=function(e){return(this._startIndex+e)%this._maxLength},e}();t.CircularList=n},1439:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clone=void 0,t.clone=function e(t,r){if(void 0===r&&(r=5),"object"!=typeof t)return t;var i=Array.isArray(t)?[]:{};for(var n in t)i[n]=r<=1?t[n]:t[n]&&e(t[n],r-1);return i}},8969:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.CoreTerminal=void 0;var o=r(844),s=r(2585),a=r(4348),c=r(7866),l=r(744),h=r(7302),u=r(6975),f=r(8460),_=r(1753),d=r(3730),p=r(1480),v=r(7994),g=r(9282),y=r(5435),m=r(5981),S=!1,C=function(e){function t(t){var r=e.call(this)||this;return r._onBinary=new f.EventEmitter,r._onData=new f.EventEmitter,r._onLineFeed=new f.EventEmitter,r._onResize=new f.EventEmitter,r._onScroll=new f.EventEmitter,r._instantiationService=new a.InstantiationService,r.optionsService=new h.OptionsService(t),r._instantiationService.setService(s.IOptionsService,r.optionsService),r._bufferService=r.register(r._instantiationService.createInstance(l.BufferService)),r._instantiationService.setService(s.IBufferService,r._bufferService),r._logService=r._instantiationService.createInstance(c.LogService),r._instantiationService.setService(s.ILogService,r._logService),r.coreService=r.register(r._instantiationService.createInstance(u.CoreService,(function(){return r.scrollToBottom()}))),r._instantiationService.setService(s.ICoreService,r.coreService),r.coreMouseService=r._instantiationService.createInstance(_.CoreMouseService),r._instantiationService.setService(s.ICoreMouseService,r.coreMouseService),r._dirtyRowService=r._instantiationService.createInstance(d.DirtyRowService),r._instantiationService.setService(s.IDirtyRowService,r._dirtyRowService),r.unicodeService=r._instantiationService.createInstance(p.UnicodeService),r._instantiationService.setService(s.IUnicodeService,r.unicodeService),r._charsetService=r._instantiationService.createInstance(v.CharsetService),r._instantiationService.setService(s.ICharsetService,r._charsetService),r._inputHandler=new y.InputHandler(r._bufferService,r._charsetService,r.coreService,r._dirtyRowService,r._logService,r.optionsService,r.coreMouseService,r.unicodeService),r.register((0,f.forwardEvent)(r._inputHandler.onLineFeed,r._onLineFeed)),r.register(r._inputHandler),r.register((0,f.forwardEvent)(r._bufferService.onResize,r._onResize)),r.register((0,f.forwardEvent)(r.coreService.onData,r._onData)),r.register((0,f.forwardEvent)(r.coreService.onBinary,r._onBinary)),r.register(r.optionsService.onOptionChange((function(e){return r._updateOptions(e)}))),r.register(r._bufferService.onScroll((function(e){r._onScroll.fire({position:r._bufferService.buffer.ydisp,source:0}),r._dirtyRowService.markRangeDirty(r._bufferService.buffer.scrollTop,r._bufferService.buffer.scrollBottom)}))),r.register(r._inputHandler.onScroll((function(e){r._onScroll.fire({position:r._bufferService.buffer.ydisp,source:0}),r._dirtyRowService.markRangeDirty(r._bufferService.buffer.scrollTop,r._bufferService.buffer.scrollBottom)}))),r._writeBuffer=new m.WriteBuffer((function(e,t){return r._inputHandler.parse(e,t)})),r}return n(t,e),Object.defineProperty(t.prototype,"onBinary",{get:function(){return this._onBinary.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onData",{get:function(){return this._onData.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onLineFeed",{get:function(){return this._onLineFeed.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onResize",{get:function(){return this._onResize.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onScroll",{get:function(){var e=this;return this._onScrollApi||(this._onScrollApi=new f.EventEmitter,this.register(this._onScroll.event((function(t){var r;null===(r=e._onScrollApi)||void 0===r||r.fire(t.position)})))),this._onScrollApi.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"cols",{get:function(){return this._bufferService.cols},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rows",{get:function(){return this._bufferService.rows},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"buffers",{get:function(){return this._bufferService.buffers},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"options",{get:function(){return this.optionsService.options},set:function(e){for(var t in e)this.optionsService.options[t]=e[t]},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){var t;this._isDisposed||(e.prototype.dispose.call(this),null===(t=this._windowsMode)||void 0===t||t.dispose(),this._windowsMode=void 0)},t.prototype.write=function(e,t){this._writeBuffer.write(e,t)},t.prototype.writeSync=function(e,t){this._logService.logLevel<=s.LogLevelEnum.WARN&&!S&&(this._logService.warn("writeSync is unreliable and will be removed soon."),S=!0),this._writeBuffer.writeSync(e,t)},t.prototype.resize=function(e,t){isNaN(e)||isNaN(t)||(e=Math.max(e,l.MINIMUM_COLS),t=Math.max(t,l.MINIMUM_ROWS),this._bufferService.resize(e,t))},t.prototype.scroll=function(e,t){void 0===t&&(t=!1),this._bufferService.scroll(e,t)},t.prototype.scrollLines=function(e,t,r){this._bufferService.scrollLines(e,t,r)},t.prototype.scrollPages=function(e){this._bufferService.scrollPages(e)},t.prototype.scrollToTop=function(){this._bufferService.scrollToTop()},t.prototype.scrollToBottom=function(){this._bufferService.scrollToBottom()},t.prototype.scrollToLine=function(e){this._bufferService.scrollToLine(e)},t.prototype.registerEscHandler=function(e,t){return this._inputHandler.registerEscHandler(e,t)},t.prototype.registerDcsHandler=function(e,t){return this._inputHandler.registerDcsHandler(e,t)},t.prototype.registerCsiHandler=function(e,t){return this._inputHandler.registerCsiHandler(e,t)},t.prototype.registerOscHandler=function(e,t){return this._inputHandler.registerOscHandler(e,t)},t.prototype._setup=function(){this.optionsService.rawOptions.windowsMode&&this._enableWindowsMode()},t.prototype.reset=function(){this._inputHandler.reset(),this._bufferService.reset(),this._charsetService.reset(),this.coreService.reset(),this.coreMouseService.reset()},t.prototype._updateOptions=function(e){var t;switch(e){case"scrollback":this.buffers.resize(this.cols,this.rows);break;case"windowsMode":this.optionsService.rawOptions.windowsMode?this._enableWindowsMode():(null===(t=this._windowsMode)||void 0===t||t.dispose(),this._windowsMode=void 0)}},t.prototype._enableWindowsMode=function(){var e=this;if(!this._windowsMode){var t=[];t.push(this.onLineFeed(g.updateWindowsModeWrappedState.bind(null,this._bufferService))),t.push(this.registerCsiHandler({final:"H"},(function(){return(0,g.updateWindowsModeWrappedState)(e._bufferService),!1}))),this._windowsMode={dispose:function(){for(var e=0,r=t;e<r.length;e++)r[e].dispose()}}}},t}(o.Disposable);t.CoreTerminal=C},8460:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.forwardEvent=t.EventEmitter=void 0;var r=function(){function e(){this._listeners=[],this._disposed=!1}return Object.defineProperty(e.prototype,"event",{get:function(){var e=this;return this._event||(this._event=function(t){return e._listeners.push(t),{dispose:function(){if(!e._disposed)for(var r=0;r<e._listeners.length;r++)if(e._listeners[r]===t)return void e._listeners.splice(r,1)}}}),this._event},enumerable:!1,configurable:!0}),e.prototype.fire=function(e,t){for(var r=[],i=0;i<this._listeners.length;i++)r.push(this._listeners[i]);for(i=0;i<r.length;i++)r[i].call(void 0,e,t)},e.prototype.dispose=function(){this._listeners&&(this._listeners.length=0),this._disposed=!0},e}();t.EventEmitter=r,t.forwardEvent=function(e,t){return e((function(e){return t.fire(e)}))}},5435:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.InputHandler=t.WindowsOptionsReportType=void 0;var o,s=r(2584),a=r(7116),c=r(2015),l=r(844),h=r(8273),u=r(482),f=r(8437),_=r(8460),d=r(643),p=r(511),v=r(3734),g=r(2585),y=r(6242),m=r(6351),S=r(5941),C={"(":0,")":1,"*":2,"+":3,"-":1,".":2},b=131072;function w(e,t){if(e>24)return t.setWinLines||!1;switch(e){case 1:return!!t.restoreWin;case 2:return!!t.minimizeWin;case 3:return!!t.setWinPosition;case 4:return!!t.setWinSizePixels;case 5:return!!t.raiseWin;case 6:return!!t.lowerWin;case 7:return!!t.refreshWin;case 8:return!!t.setWinSizeChars;case 9:return!!t.maximizeWin;case 10:return!!t.fullscreenWin;case 11:return!!t.getWinState;case 13:return!!t.getWinPosition;case 14:return!!t.getWinSizePixels;case 15:return!!t.getScreenSizePixels;case 16:return!!t.getCellSizePixels;case 18:return!!t.getWinSizeChars;case 19:return!!t.getScreenSizeChars;case 20:return!!t.getIconTitle;case 21:return!!t.getWinTitle;case 22:return!!t.pushTitle;case 23:return!!t.popTitle;case 24:return!!t.setWinLines}return!1}!function(e){e[e.GET_WIN_SIZE_PIXELS=0]="GET_WIN_SIZE_PIXELS",e[e.GET_CELL_SIZE_PIXELS=1]="GET_CELL_SIZE_PIXELS"}(o=t.WindowsOptionsReportType||(t.WindowsOptionsReportType={}));var L=function(){function e(e,t,r,i){this._bufferService=e,this._coreService=t,this._logService=r,this._optionsService=i,this._data=new Uint32Array(0)}return e.prototype.hook=function(e){this._data=new Uint32Array(0)},e.prototype.put=function(e,t,r){this._data=(0,h.concat)(this._data,e.subarray(t,r))},e.prototype.unhook=function(e){if(!e)return this._data=new Uint32Array(0),!0;var t=(0,u.utf32ToString)(this._data);switch(this._data=new Uint32Array(0),t){case'"q':this._coreService.triggerDataEvent(s.C0.ESC+'P1$r0"q'+s.C0.ESC+"\\");break;case'"p':this._coreService.triggerDataEvent(s.C0.ESC+'P1$r61;1"p'+s.C0.ESC+"\\");break;case"r":var r=this._bufferService.buffer.scrollTop+1+";"+(this._bufferService.buffer.scrollBottom+1)+"r";this._coreService.triggerDataEvent(s.C0.ESC+"P1$r"+r+s.C0.ESC+"\\");break;case"m":this._coreService.triggerDataEvent(s.C0.ESC+"P1$r0m"+s.C0.ESC+"\\");break;case" q":var i={block:2,underline:4,bar:6}[this._optionsService.rawOptions.cursorStyle];i-=this._optionsService.rawOptions.cursorBlink?1:0,this._coreService.triggerDataEvent(s.C0.ESC+"P1$r"+i+" q"+s.C0.ESC+"\\");break;default:this._logService.debug("Unknown DCS $q %s",t),this._coreService.triggerDataEvent(s.C0.ESC+"P0$r"+s.C0.ESC+"\\")}return!0},e}(),E=function(e){function t(t,r,i,n,o,l,h,d,v){void 0===v&&(v=new c.EscapeSequenceParser);var g=e.call(this)||this;g._bufferService=t,g._charsetService=r,g._coreService=i,g._dirtyRowService=n,g._logService=o,g._optionsService=l,g._coreMouseService=h,g._unicodeService=d,g._parser=v,g._parseBuffer=new Uint32Array(4096),g._stringDecoder=new u.StringToUtf32,g._utf8Decoder=new u.Utf8ToUtf32,g._workCell=new p.CellData,g._windowTitle="",g._iconName="",g._windowTitleStack=[],g._iconNameStack=[],g._curAttrData=f.DEFAULT_ATTR_DATA.clone(),g._eraseAttrDataInternal=f.DEFAULT_ATTR_DATA.clone(),g._onRequestBell=new _.EventEmitter,g._onRequestRefreshRows=new _.EventEmitter,g._onRequestReset=new _.EventEmitter,g._onRequestSendFocus=new _.EventEmitter,g._onRequestSyncScrollBar=new _.EventEmitter,g._onRequestWindowsOptionsReport=new _.EventEmitter,g._onA11yChar=new _.EventEmitter,g._onA11yTab=new _.EventEmitter,g._onCursorMove=new _.EventEmitter,g._onLineFeed=new _.EventEmitter,g._onScroll=new _.EventEmitter,g._onTitleChange=new _.EventEmitter,g._onColor=new _.EventEmitter,g._parseStack={paused:!1,cursorStartX:0,cursorStartY:0,decodedLength:0,position:0},g._specialColors=[256,257,258],g.register(g._parser),g._activeBuffer=g._bufferService.buffer,g.register(g._bufferService.buffers.onBufferActivate((function(e){return g._activeBuffer=e.activeBuffer}))),g._parser.setCsiHandlerFallback((function(e,t){g._logService.debug("Unknown CSI code: ",{identifier:g._parser.identToString(e),params:t.toArray()})})),g._parser.setEscHandlerFallback((function(e){g._logService.debug("Unknown ESC code: ",{identifier:g._parser.identToString(e)})})),g._parser.setExecuteHandlerFallback((function(e){g._logService.debug("Unknown EXECUTE code: ",{code:e})})),g._parser.setOscHandlerFallback((function(e,t,r){g._logService.debug("Unknown OSC code: ",{identifier:e,action:t,data:r})})),g._parser.setDcsHandlerFallback((function(e,t,r){"HOOK"===t&&(r=r.toArray()),g._logService.debug("Unknown DCS code: ",{identifier:g._parser.identToString(e),action:t,payload:r})})),g._parser.setPrintHandler((function(e,t,r){return g.print(e,t,r)})),g._parser.registerCsiHandler({final:"@"},(function(e){return g.insertChars(e)})),g._parser.registerCsiHandler({intermediates:" ",final:"@"},(function(e){return g.scrollLeft(e)})),g._parser.registerCsiHandler({final:"A"},(function(e){return g.cursorUp(e)})),g._parser.registerCsiHandler({intermediates:" ",final:"A"},(function(e){return g.scrollRight(e)})),g._parser.registerCsiHandler({final:"B"},(function(e){return g.cursorDown(e)})),g._parser.registerCsiHandler({final:"C"},(function(e){return g.cursorForward(e)})),g._parser.registerCsiHandler({final:"D"},(function(e){return g.cursorBackward(e)})),g._parser.registerCsiHandler({final:"E"},(function(e){return g.cursorNextLine(e)})),g._parser.registerCsiHandler({final:"F"},(function(e){return g.cursorPrecedingLine(e)})),g._parser.registerCsiHandler({final:"G"},(function(e){return g.cursorCharAbsolute(e)})),g._parser.registerCsiHandler({final:"H"},(function(e){return g.cursorPosition(e)})),g._parser.registerCsiHandler({final:"I"},(function(e){return g.cursorForwardTab(e)})),g._parser.registerCsiHandler({final:"J"},(function(e){return g.eraseInDisplay(e)})),g._parser.registerCsiHandler({prefix:"?",final:"J"},(function(e){return g.eraseInDisplay(e)})),g._parser.registerCsiHandler({final:"K"},(function(e){return g.eraseInLine(e)})),g._parser.registerCsiHandler({prefix:"?",final:"K"},(function(e){return g.eraseInLine(e)})),g._parser.registerCsiHandler({final:"L"},(function(e){return g.insertLines(e)})),g._parser.registerCsiHandler({final:"M"},(function(e){return g.deleteLines(e)})),g._parser.registerCsiHandler({final:"P"},(function(e){return g.deleteChars(e)})),g._parser.registerCsiHandler({final:"S"},(function(e){return g.scrollUp(e)})),g._parser.registerCsiHandler({final:"T"},(function(e){return g.scrollDown(e)})),g._parser.registerCsiHandler({final:"X"},(function(e){return g.eraseChars(e)})),g._parser.registerCsiHandler({final:"Z"},(function(e){return g.cursorBackwardTab(e)})),g._parser.registerCsiHandler({final:"`"},(function(e){return g.charPosAbsolute(e)})),g._parser.registerCsiHandler({final:"a"},(function(e){return g.hPositionRelative(e)})),g._parser.registerCsiHandler({final:"b"},(function(e){return g.repeatPrecedingCharacter(e)})),g._parser.registerCsiHandler({final:"c"},(function(e){return g.sendDeviceAttributesPrimary(e)})),g._parser.registerCsiHandler({prefix:">",final:"c"},(function(e){return g.sendDeviceAttributesSecondary(e)})),g._parser.registerCsiHandler({final:"d"},(function(e){return g.linePosAbsolute(e)})),g._parser.registerCsiHandler({final:"e"},(function(e){return g.vPositionRelative(e)})),g._parser.registerCsiHandler({final:"f"},(function(e){return g.hVPosition(e)})),g._parser.registerCsiHandler({final:"g"},(function(e){return g.tabClear(e)})),g._parser.registerCsiHandler({final:"h"},(function(e){return g.setMode(e)})),g._parser.registerCsiHandler({prefix:"?",final:"h"},(function(e){return g.setModePrivate(e)})),g._parser.registerCsiHandler({final:"l"},(function(e){return g.resetMode(e)})),g._parser.registerCsiHandler({prefix:"?",final:"l"},(function(e){return g.resetModePrivate(e)})),g._parser.registerCsiHandler({final:"m"},(function(e){return g.charAttributes(e)})),g._parser.registerCsiHandler({final:"n"},(function(e){return g.deviceStatus(e)})),g._parser.registerCsiHandler({prefix:"?",final:"n"},(function(e){return g.deviceStatusPrivate(e)})),g._parser.registerCsiHandler({intermediates:"!",final:"p"},(function(e){return g.softReset(e)})),g._parser.registerCsiHandler({intermediates:" ",final:"q"},(function(e){return g.setCursorStyle(e)})),g._parser.registerCsiHandler({final:"r"},(function(e){return g.setScrollRegion(e)})),g._parser.registerCsiHandler({final:"s"},(function(e){return g.saveCursor(e)})),g._parser.registerCsiHandler({final:"t"},(function(e){return g.windowOptions(e)})),g._parser.registerCsiHandler({final:"u"},(function(e){return g.restoreCursor(e)})),g._parser.registerCsiHandler({intermediates:"'",final:"}"},(function(e){return g.insertColumns(e)})),g._parser.registerCsiHandler({intermediates:"'",final:"~"},(function(e){return g.deleteColumns(e)})),g._parser.setExecuteHandler(s.C0.BEL,(function(){return g.bell()})),g._parser.setExecuteHandler(s.C0.LF,(function(){return g.lineFeed()})),g._parser.setExecuteHandler(s.C0.VT,(function(){return g.lineFeed()})),g._parser.setExecuteHandler(s.C0.FF,(function(){return g.lineFeed()})),g._parser.setExecuteHandler(s.C0.CR,(function(){return g.carriageReturn()})),g._parser.setExecuteHandler(s.C0.BS,(function(){return g.backspace()})),g._parser.setExecuteHandler(s.C0.HT,(function(){return g.tab()})),g._parser.setExecuteHandler(s.C0.SO,(function(){return g.shiftOut()})),g._parser.setExecuteHandler(s.C0.SI,(function(){return g.shiftIn()})),g._parser.setExecuteHandler(s.C1.IND,(function(){return g.index()})),g._parser.setExecuteHandler(s.C1.NEL,(function(){return g.nextLine()})),g._parser.setExecuteHandler(s.C1.HTS,(function(){return g.tabSet()})),g._parser.registerOscHandler(0,new y.OscHandler((function(e){return g.setTitle(e),g.setIconName(e),!0}))),g._parser.registerOscHandler(1,new y.OscHandler((function(e){return g.setIconName(e)}))),g._parser.registerOscHandler(2,new y.OscHandler((function(e){return g.setTitle(e)}))),g._parser.registerOscHandler(4,new y.OscHandler((function(e){return g.setOrReportIndexedColor(e)}))),g._parser.registerOscHandler(10,new y.OscHandler((function(e){return g.setOrReportFgColor(e)}))),g._parser.registerOscHandler(11,new y.OscHandler((function(e){return g.setOrReportBgColor(e)}))),g._parser.registerOscHandler(12,new y.OscHandler((function(e){return g.setOrReportCursorColor(e)}))),g._parser.registerOscHandler(104,new y.OscHandler((function(e){return g.restoreIndexedColor(e)}))),g._parser.registerOscHandler(110,new y.OscHandler((function(e){return g.restoreFgColor(e)}))),g._parser.registerOscHandler(111,new y.OscHandler((function(e){return g.restoreBgColor(e)}))),g._parser.registerOscHandler(112,new y.OscHandler((function(e){return g.restoreCursorColor(e)}))),g._parser.registerEscHandler({final:"7"},(function(){return g.saveCursor()})),g._parser.registerEscHandler({final:"8"},(function(){return g.restoreCursor()})),g._parser.registerEscHandler({final:"D"},(function(){return g.index()})),g._parser.registerEscHandler({final:"E"},(function(){return g.nextLine()})),g._parser.registerEscHandler({final:"H"},(function(){return g.tabSet()})),g._parser.registerEscHandler({final:"M"},(function(){return g.reverseIndex()})),g._parser.registerEscHandler({final:"="},(function(){return g.keypadApplicationMode()})),g._parser.registerEscHandler({final:">"},(function(){return g.keypadNumericMode()})),g._parser.registerEscHandler({final:"c"},(function(){return g.fullReset()})),g._parser.registerEscHandler({final:"n"},(function(){return g.setgLevel(2)})),g._parser.registerEscHandler({final:"o"},(function(){return g.setgLevel(3)})),g._parser.registerEscHandler({final:"|"},(function(){return g.setgLevel(3)})),g._parser.registerEscHandler({final:"}"},(function(){return g.setgLevel(2)})),g._parser.registerEscHandler({final:"~"},(function(){return g.setgLevel(1)})),g._parser.registerEscHandler({intermediates:"%",final:"@"},(function(){return g.selectDefaultCharset()})),g._parser.registerEscHandler({intermediates:"%",final:"G"},(function(){return g.selectDefaultCharset()}));var m=function(e){S._parser.registerEscHandler({intermediates:"(",final:e},(function(){return g.selectCharset("("+e)})),S._parser.registerEscHandler({intermediates:")",final:e},(function(){return g.selectCharset(")"+e)})),S._parser.registerEscHandler({intermediates:"*",final:e},(function(){return g.selectCharset("*"+e)})),S._parser.registerEscHandler({intermediates:"+",final:e},(function(){return g.selectCharset("+"+e)})),S._parser.registerEscHandler({intermediates:"-",final:e},(function(){return g.selectCharset("-"+e)})),S._parser.registerEscHandler({intermediates:".",final:e},(function(){return g.selectCharset("."+e)})),S._parser.registerEscHandler({intermediates:"/",final:e},(function(){return g.selectCharset("/"+e)}))},S=this;for(var C in a.CHARSETS)m(C);return g._parser.registerEscHandler({intermediates:"#",final:"8"},(function(){return g.screenAlignmentPattern()})),g._parser.setErrorHandler((function(e){return g._logService.error("Parsing error: ",e),e})),g._parser.registerDcsHandler({intermediates:"$",final:"q"},new L(g._bufferService,g._coreService,g._logService,g._optionsService)),g}return n(t,e),Object.defineProperty(t.prototype,"onRequestBell",{get:function(){return this._onRequestBell.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestRefreshRows",{get:function(){return this._onRequestRefreshRows.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestReset",{get:function(){return this._onRequestReset.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestSendFocus",{get:function(){return this._onRequestSendFocus.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestSyncScrollBar",{get:function(){return this._onRequestSyncScrollBar.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestWindowsOptionsReport",{get:function(){return this._onRequestWindowsOptionsReport.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onA11yChar",{get:function(){return this._onA11yChar.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onA11yTab",{get:function(){return this._onA11yTab.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onCursorMove",{get:function(){return this._onCursorMove.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onLineFeed",{get:function(){return this._onLineFeed.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onScroll",{get:function(){return this._onScroll.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onTitleChange",{get:function(){return this._onTitleChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onColor",{get:function(){return this._onColor.event},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){e.prototype.dispose.call(this)},t.prototype._preserveStack=function(e,t,r,i){this._parseStack.paused=!0,this._parseStack.cursorStartX=e,this._parseStack.cursorStartY=t,this._parseStack.decodedLength=r,this._parseStack.position=i},t.prototype._logSlowResolvingAsync=function(e){this._logService.logLevel<=g.LogLevelEnum.WARN&&Promise.race([e,new Promise((function(e,t){return setTimeout((function(){return t("#SLOW_TIMEOUT")}),5e3)}))]).catch((function(e){if("#SLOW_TIMEOUT"!==e)throw e;console.warn("async parser handler taking longer than 5000 ms")}))},t.prototype.parse=function(e,t){var r,i=this._activeBuffer.x,n=this._activeBuffer.y,o=0,s=this._parseStack.paused;if(s){if(r=this._parser.parse(this._parseBuffer,this._parseStack.decodedLength,t))return this._logSlowResolvingAsync(r),r;i=this._parseStack.cursorStartX,n=this._parseStack.cursorStartY,this._parseStack.paused=!1,e.length>b&&(o=this._parseStack.position+b)}if(this._logService.logLevel<=g.LogLevelEnum.DEBUG&&this._logService.debug("parsing data"+("string"==typeof e?' "'+e+'"':' "'+Array.prototype.map.call(e,(function(e){return String.fromCharCode(e)})).join("")+'"'),"string"==typeof e?e.split("").map((function(e){return e.charCodeAt(0)})):e),this._parseBuffer.length<e.length&&this._parseBuffer.length<b&&(this._parseBuffer=new Uint32Array(Math.min(e.length,b))),s||this._dirtyRowService.clearRange(),e.length>b)for(var a=o;a<e.length;a+=b){var c=a+b<e.length?a+b:e.length,l="string"==typeof e?this._stringDecoder.decode(e.substring(a,c),this._parseBuffer):this._utf8Decoder.decode(e.subarray(a,c),this._parseBuffer);if(r=this._parser.parse(this._parseBuffer,l))return this._preserveStack(i,n,l,a),this._logSlowResolvingAsync(r),r}else if(!s&&(l="string"==typeof e?this._stringDecoder.decode(e,this._parseBuffer):this._utf8Decoder.decode(e,this._parseBuffer),r=this._parser.parse(this._parseBuffer,l)))return this._preserveStack(i,n,l,0),this._logSlowResolvingAsync(r),r;this._activeBuffer.x===i&&this._activeBuffer.y===n||this._onCursorMove.fire(),this._onRequestRefreshRows.fire(this._dirtyRowService.start,this._dirtyRowService.end)},t.prototype.print=function(e,t,r){var i,n,o=this._charsetService.charset,s=this._optionsService.rawOptions.screenReaderMode,a=this._bufferService.cols,c=this._coreService.decPrivateModes.wraparound,l=this._coreService.modes.insertMode,h=this._curAttrData,f=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);this._dirtyRowService.markDirty(this._activeBuffer.y),this._activeBuffer.x&&r-t>0&&2===f.getWidth(this._activeBuffer.x-1)&&f.setCellFromCodePoint(this._activeBuffer.x-1,0,1,h.fg,h.bg,h.extended);for(var _=t;_<r;++_){if(i=e[_],n=this._unicodeService.wcwidth(i),i<127&&o){var p=o[String.fromCharCode(i)];p&&(i=p.charCodeAt(0))}if(s&&this._onA11yChar.fire((0,u.stringFromCodePoint)(i)),n||!this._activeBuffer.x){if(this._activeBuffer.x+n-1>=a)if(c){for(;this._activeBuffer.x<a;)f.setCellFromCodePoint(this._activeBuffer.x++,0,1,h.fg,h.bg,h.extended);this._activeBuffer.x=0,this._activeBuffer.y++,this._activeBuffer.y===this._activeBuffer.scrollBottom+1?(this._activeBuffer.y--,this._bufferService.scroll(this._eraseAttrData(),!0)):(this._activeBuffer.y>=this._bufferService.rows&&(this._activeBuffer.y=this._bufferService.rows-1),this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y).isWrapped=!0),f=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y)}else if(this._activeBuffer.x=a-1,2===n)continue;if(l&&(f.insertCells(this._activeBuffer.x,n,this._activeBuffer.getNullCell(h),h),2===f.getWidth(a-1)&&f.setCellFromCodePoint(a-1,d.NULL_CELL_CODE,d.NULL_CELL_WIDTH,h.fg,h.bg,h.extended)),f.setCellFromCodePoint(this._activeBuffer.x++,i,n,h.fg,h.bg,h.extended),n>0)for(;--n;)f.setCellFromCodePoint(this._activeBuffer.x++,0,0,h.fg,h.bg,h.extended)}else f.getWidth(this._activeBuffer.x-1)?f.addCodepointToCell(this._activeBuffer.x-1,i):f.addCodepointToCell(this._activeBuffer.x-2,i)}r-t>0&&(f.loadCell(this._activeBuffer.x-1,this._workCell),2===this._workCell.getWidth()||this._workCell.getCode()>65535?this._parser.precedingCodepoint=0:this._workCell.isCombined()?this._parser.precedingCodepoint=this._workCell.getChars().charCodeAt(0):this._parser.precedingCodepoint=this._workCell.content),this._activeBuffer.x<a&&r-t>0&&0===f.getWidth(this._activeBuffer.x)&&!f.hasContent(this._activeBuffer.x)&&f.setCellFromCodePoint(this._activeBuffer.x,0,1,h.fg,h.bg,h.extended),this._dirtyRowService.markDirty(this._activeBuffer.y)},t.prototype.registerCsiHandler=function(e,t){var r=this;return"t"!==e.final||e.prefix||e.intermediates?this._parser.registerCsiHandler(e,t):this._parser.registerCsiHandler(e,(function(e){return!w(e.params[0],r._optionsService.rawOptions.windowOptions)||t(e)}))},t.prototype.registerDcsHandler=function(e,t){return this._parser.registerDcsHandler(e,new m.DcsHandler(t))},t.prototype.registerEscHandler=function(e,t){return this._parser.registerEscHandler(e,t)},t.prototype.registerOscHandler=function(e,t){return this._parser.registerOscHandler(e,new y.OscHandler(t))},t.prototype.bell=function(){return this._onRequestBell.fire(),!0},t.prototype.lineFeed=function(){return this._dirtyRowService.markDirty(this._activeBuffer.y),this._optionsService.rawOptions.convertEol&&(this._activeBuffer.x=0),this._activeBuffer.y++,this._activeBuffer.y===this._activeBuffer.scrollBottom+1?(this._activeBuffer.y--,this._bufferService.scroll(this._eraseAttrData())):this._activeBuffer.y>=this._bufferService.rows&&(this._activeBuffer.y=this._bufferService.rows-1),this._activeBuffer.x>=this._bufferService.cols&&this._activeBuffer.x--,this._dirtyRowService.markDirty(this._activeBuffer.y),this._onLineFeed.fire(),!0},t.prototype.carriageReturn=function(){return this._activeBuffer.x=0,!0},t.prototype.backspace=function(){var e;if(!this._coreService.decPrivateModes.reverseWraparound)return this._restrictCursor(),this._activeBuffer.x>0&&this._activeBuffer.x--,!0;if(this._restrictCursor(this._bufferService.cols),this._activeBuffer.x>0)this._activeBuffer.x--;else if(0===this._activeBuffer.x&&this._activeBuffer.y>this._activeBuffer.scrollTop&&this._activeBuffer.y<=this._activeBuffer.scrollBottom&&(null===(e=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y))||void 0===e?void 0:e.isWrapped)){this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y).isWrapped=!1,this._activeBuffer.y--,this._activeBuffer.x=this._bufferService.cols-1;var t=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);t.hasWidth(this._activeBuffer.x)&&!t.hasContent(this._activeBuffer.x)&&this._activeBuffer.x--}return this._restrictCursor(),!0},t.prototype.tab=function(){if(this._activeBuffer.x>=this._bufferService.cols)return!0;var e=this._activeBuffer.x;return this._activeBuffer.x=this._activeBuffer.nextStop(),this._optionsService.rawOptions.screenReaderMode&&this._onA11yTab.fire(this._activeBuffer.x-e),!0},t.prototype.shiftOut=function(){return this._charsetService.setgLevel(1),!0},t.prototype.shiftIn=function(){return this._charsetService.setgLevel(0),!0},t.prototype._restrictCursor=function(e){void 0===e&&(e=this._bufferService.cols-1),this._activeBuffer.x=Math.min(e,Math.max(0,this._activeBuffer.x)),this._activeBuffer.y=this._coreService.decPrivateModes.origin?Math.min(this._activeBuffer.scrollBottom,Math.max(this._activeBuffer.scrollTop,this._activeBuffer.y)):Math.min(this._bufferService.rows-1,Math.max(0,this._activeBuffer.y)),this._dirtyRowService.markDirty(this._activeBuffer.y)},t.prototype._setCursor=function(e,t){this._dirtyRowService.markDirty(this._activeBuffer.y),this._coreService.decPrivateModes.origin?(this._activeBuffer.x=e,this._activeBuffer.y=this._activeBuffer.scrollTop+t):(this._activeBuffer.x=e,this._activeBuffer.y=t),this._restrictCursor(),this._dirtyRowService.markDirty(this._activeBuffer.y)},t.prototype._moveCursor=function(e,t){this._restrictCursor(),this._setCursor(this._activeBuffer.x+e,this._activeBuffer.y+t)},t.prototype.cursorUp=function(e){var t=this._activeBuffer.y-this._activeBuffer.scrollTop;return t>=0?this._moveCursor(0,-Math.min(t,e.params[0]||1)):this._moveCursor(0,-(e.params[0]||1)),!0},t.prototype.cursorDown=function(e){var t=this._activeBuffer.scrollBottom-this._activeBuffer.y;return t>=0?this._moveCursor(0,Math.min(t,e.params[0]||1)):this._moveCursor(0,e.params[0]||1),!0},t.prototype.cursorForward=function(e){return this._moveCursor(e.params[0]||1,0),!0},t.prototype.cursorBackward=function(e){return this._moveCursor(-(e.params[0]||1),0),!0},t.prototype.cursorNextLine=function(e){return this.cursorDown(e),this._activeBuffer.x=0,!0},t.prototype.cursorPrecedingLine=function(e){return this.cursorUp(e),this._activeBuffer.x=0,!0},t.prototype.cursorCharAbsolute=function(e){return this._setCursor((e.params[0]||1)-1,this._activeBuffer.y),!0},t.prototype.cursorPosition=function(e){return this._setCursor(e.length>=2?(e.params[1]||1)-1:0,(e.params[0]||1)-1),!0},t.prototype.charPosAbsolute=function(e){return this._setCursor((e.params[0]||1)-1,this._activeBuffer.y),!0},t.prototype.hPositionRelative=function(e){return this._moveCursor(e.params[0]||1,0),!0},t.prototype.linePosAbsolute=function(e){return this._setCursor(this._activeBuffer.x,(e.params[0]||1)-1),!0},t.prototype.vPositionRelative=function(e){return this._moveCursor(0,e.params[0]||1),!0},t.prototype.hVPosition=function(e){return this.cursorPosition(e),!0},t.prototype.tabClear=function(e){var t=e.params[0];return 0===t?delete this._activeBuffer.tabs[this._activeBuffer.x]:3===t&&(this._activeBuffer.tabs={}),!0},t.prototype.cursorForwardTab=function(e){if(this._activeBuffer.x>=this._bufferService.cols)return!0;for(var t=e.params[0]||1;t--;)this._activeBuffer.x=this._activeBuffer.nextStop();return!0},t.prototype.cursorBackwardTab=function(e){if(this._activeBuffer.x>=this._bufferService.cols)return!0;for(var t=e.params[0]||1;t--;)this._activeBuffer.x=this._activeBuffer.prevStop();return!0},t.prototype._eraseInBufferLine=function(e,t,r,i){void 0===i&&(i=!1);var n=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);n.replaceCells(t,r,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i&&(n.isWrapped=!1)},t.prototype._resetBufferLine=function(e){var t=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);t.fill(this._activeBuffer.getNullCell(this._eraseAttrData())),this._bufferService.buffer.clearMarkers(this._activeBuffer.ybase+e),t.isWrapped=!1},t.prototype.eraseInDisplay=function(e){var t;switch(this._restrictCursor(this._bufferService.cols),e.params[0]){case 0:for(t=this._activeBuffer.y,this._dirtyRowService.markDirty(t),this._eraseInBufferLine(t++,this._activeBuffer.x,this._bufferService.cols,0===this._activeBuffer.x);t<this._bufferService.rows;t++)this._resetBufferLine(t);this._dirtyRowService.markDirty(t);break;case 1:for(t=this._activeBuffer.y,this._dirtyRowService.markDirty(t),this._eraseInBufferLine(t,0,this._activeBuffer.x+1,!0),this._activeBuffer.x+1>=this._bufferService.cols&&(this._activeBuffer.lines.get(t+1).isWrapped=!1);t--;)this._resetBufferLine(t);this._dirtyRowService.markDirty(0);break;case 2:for(t=this._bufferService.rows,this._dirtyRowService.markDirty(t-1);t--;)this._resetBufferLine(t);this._dirtyRowService.markDirty(0);break;case 3:var r=this._activeBuffer.lines.length-this._bufferService.rows;r>0&&(this._activeBuffer.lines.trimStart(r),this._activeBuffer.ybase=Math.max(this._activeBuffer.ybase-r,0),this._activeBuffer.ydisp=Math.max(this._activeBuffer.ydisp-r,0),this._onScroll.fire(0))}return!0},t.prototype.eraseInLine=function(e){switch(this._restrictCursor(this._bufferService.cols),e.params[0]){case 0:this._eraseInBufferLine(this._activeBuffer.y,this._activeBuffer.x,this._bufferService.cols,0===this._activeBuffer.x);break;case 1:this._eraseInBufferLine(this._activeBuffer.y,0,this._activeBuffer.x+1,!1);break;case 2:this._eraseInBufferLine(this._activeBuffer.y,0,this._bufferService.cols,!0)}return this._dirtyRowService.markDirty(this._activeBuffer.y),!0},t.prototype.insertLines=function(e){this._restrictCursor();var t=e.params[0]||1;if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;for(var r=this._activeBuffer.ybase+this._activeBuffer.y,i=this._bufferService.rows-1-this._activeBuffer.scrollBottom,n=this._bufferService.rows-1+this._activeBuffer.ybase-i+1;t--;)this._activeBuffer.lines.splice(n-1,1),this._activeBuffer.lines.splice(r,0,this._activeBuffer.getBlankLine(this._eraseAttrData()));return this._dirtyRowService.markRangeDirty(this._activeBuffer.y,this._activeBuffer.scrollBottom),this._activeBuffer.x=0,!0},t.prototype.deleteLines=function(e){this._restrictCursor();var t=e.params[0]||1;if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;var r,i=this._activeBuffer.ybase+this._activeBuffer.y;for(r=this._bufferService.rows-1-this._activeBuffer.scrollBottom,r=this._bufferService.rows-1+this._activeBuffer.ybase-r;t--;)this._activeBuffer.lines.splice(i,1),this._activeBuffer.lines.splice(r,0,this._activeBuffer.getBlankLine(this._eraseAttrData()));return this._dirtyRowService.markRangeDirty(this._activeBuffer.y,this._activeBuffer.scrollBottom),this._activeBuffer.x=0,!0},t.prototype.insertChars=function(e){this._restrictCursor();var t=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);return t&&(t.insertCells(this._activeBuffer.x,e.params[0]||1,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowService.markDirty(this._activeBuffer.y)),!0},t.prototype.deleteChars=function(e){this._restrictCursor();var t=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);return t&&(t.deleteCells(this._activeBuffer.x,e.params[0]||1,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowService.markDirty(this._activeBuffer.y)),!0},t.prototype.scrollUp=function(e){for(var t=e.params[0]||1;t--;)this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollTop,1),this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollBottom,0,this._activeBuffer.getBlankLine(this._eraseAttrData()));return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0},t.prototype.scrollDown=function(e){for(var t=e.params[0]||1;t--;)this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollBottom,1),this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollTop,0,this._activeBuffer.getBlankLine(f.DEFAULT_ATTR_DATA));return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0},t.prototype.scrollLeft=function(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;for(var t=e.params[0]||1,r=this._activeBuffer.scrollTop;r<=this._activeBuffer.scrollBottom;++r){var i=this._activeBuffer.lines.get(this._activeBuffer.ybase+r);i.deleteCells(0,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1}return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0},t.prototype.scrollRight=function(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;for(var t=e.params[0]||1,r=this._activeBuffer.scrollTop;r<=this._activeBuffer.scrollBottom;++r){var i=this._activeBuffer.lines.get(this._activeBuffer.ybase+r);i.insertCells(0,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1}return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0},t.prototype.insertColumns=function(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;for(var t=e.params[0]||1,r=this._activeBuffer.scrollTop;r<=this._activeBuffer.scrollBottom;++r){var i=this._activeBuffer.lines.get(this._activeBuffer.ybase+r);i.insertCells(this._activeBuffer.x,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1}return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0},t.prototype.deleteColumns=function(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;for(var t=e.params[0]||1,r=this._activeBuffer.scrollTop;r<=this._activeBuffer.scrollBottom;++r){var i=this._activeBuffer.lines.get(this._activeBuffer.ybase+r);i.deleteCells(this._activeBuffer.x,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1}return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0},t.prototype.eraseChars=function(e){this._restrictCursor();var t=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);return t&&(t.replaceCells(this._activeBuffer.x,this._activeBuffer.x+(e.params[0]||1),this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowService.markDirty(this._activeBuffer.y)),!0},t.prototype.repeatPrecedingCharacter=function(e){if(!this._parser.precedingCodepoint)return!0;for(var t=e.params[0]||1,r=new Uint32Array(t),i=0;i<t;++i)r[i]=this._parser.precedingCodepoint;return this.print(r,0,r.length),!0},t.prototype.sendDeviceAttributesPrimary=function(e){return e.params[0]>0||(this._is("xterm")||this._is("rxvt-unicode")||this._is("screen")?this._coreService.triggerDataEvent(s.C0.ESC+"[?1;2c"):this._is("linux")&&this._coreService.triggerDataEvent(s.C0.ESC+"[?6c")),!0},t.prototype.sendDeviceAttributesSecondary=function(e){return e.params[0]>0||(this._is("xterm")?this._coreService.triggerDataEvent(s.C0.ESC+"[>0;276;0c"):this._is("rxvt-unicode")?this._coreService.triggerDataEvent(s.C0.ESC+"[>85;95;0c"):this._is("linux")?this._coreService.triggerDataEvent(e.params[0]+"c"):this._is("screen")&&this._coreService.triggerDataEvent(s.C0.ESC+"[>83;40003;0c")),!0},t.prototype._is=function(e){return 0===(this._optionsService.rawOptions.termName+"").indexOf(e)},t.prototype.setMode=function(e){for(var t=0;t<e.length;t++)4===e.params[t]&&(this._coreService.modes.insertMode=!0);return!0},t.prototype.setModePrivate=function(e){for(var t=0;t<e.length;t++)switch(e.params[t]){case 1:this._coreService.decPrivateModes.applicationCursorKeys=!0;break;case 2:this._charsetService.setgCharset(0,a.DEFAULT_CHARSET),this._charsetService.setgCharset(1,a.DEFAULT_CHARSET),this._charsetService.setgCharset(2,a.DEFAULT_CHARSET),this._charsetService.setgCharset(3,a.DEFAULT_CHARSET);break;case 3:this._optionsService.rawOptions.windowOptions.setWinLines&&(this._bufferService.resize(132,this._bufferService.rows),this._onRequestReset.fire());break;case 6:this._coreService.decPrivateModes.origin=!0,this._setCursor(0,0);break;case 7:this._coreService.decPrivateModes.wraparound=!0;break;case 12:break;case 45:this._coreService.decPrivateModes.reverseWraparound=!0;break;case 66:this._logService.debug("Serial port requested application keypad."),this._coreService.decPrivateModes.applicationKeypad=!0,this._onRequestSyncScrollBar.fire();break;case 9:this._coreMouseService.activeProtocol="X10";break;case 1e3:this._coreMouseService.activeProtocol="VT200";break;case 1002:this._coreMouseService.activeProtocol="DRAG";break;case 1003:this._coreMouseService.activeProtocol="ANY";break;case 1004:this._coreService.decPrivateModes.sendFocus=!0,this._onRequestSendFocus.fire();break;case 1005:this._logService.debug("DECSET 1005 not supported (see #2507)");break;case 1006:this._coreMouseService.activeEncoding="SGR";break;case 1015:this._logService.debug("DECSET 1015 not supported (see #2507)");break;case 25:this._coreService.isCursorHidden=!1;break;case 1048:this.saveCursor();break;case 1049:this.saveCursor();case 47:case 1047:this._bufferService.buffers.activateAltBuffer(this._eraseAttrData()),this._coreService.isCursorInitialized=!0,this._onRequestRefreshRows.fire(0,this._bufferService.rows-1),this._onRequestSyncScrollBar.fire();break;case 2004:this._coreService.decPrivateModes.bracketedPasteMode=!0}return!0},t.prototype.resetMode=function(e){for(var t=0;t<e.length;t++)4===e.params[t]&&(this._coreService.modes.insertMode=!1);return!0},t.prototype.resetModePrivate=function(e){for(var t=0;t<e.length;t++)switch(e.params[t]){case 1:this._coreService.decPrivateModes.applicationCursorKeys=!1;break;case 3:this._optionsService.rawOptions.windowOptions.setWinLines&&(this._bufferService.resize(80,this._bufferService.rows),this._onRequestReset.fire());break;case 6:this._coreService.decPrivateModes.origin=!1,this._setCursor(0,0);break;case 7:this._coreService.decPrivateModes.wraparound=!1;break;case 12:break;case 45:this._coreService.decPrivateModes.reverseWraparound=!1;break;case 66:this._logService.debug("Switching back to normal keypad."),this._coreService.decPrivateModes.applicationKeypad=!1,this._onRequestSyncScrollBar.fire();break;case 9:case 1e3:case 1002:case 1003:this._coreMouseService.activeProtocol="NONE";break;case 1004:this._coreService.decPrivateModes.sendFocus=!1;break;case 1005:this._logService.debug("DECRST 1005 not supported (see #2507)");break;case 1006:this._coreMouseService.activeEncoding="DEFAULT";break;case 1015:this._logService.debug("DECRST 1015 not supported (see #2507)");break;case 25:this._coreService.isCursorHidden=!0;break;case 1048:this.restoreCursor();break;case 1049:case 47:case 1047:this._bufferService.buffers.activateNormalBuffer(),1049===e.params[t]&&this.restoreCursor(),this._coreService.isCursorInitialized=!0,this._onRequestRefreshRows.fire(0,this._bufferService.rows-1),this._onRequestSyncScrollBar.fire();break;case 2004:this._coreService.decPrivateModes.bracketedPasteMode=!1}return!0},t.prototype._updateAttrColor=function(e,t,r,i,n){return 2===t?(e|=50331648,e&=-16777216,e|=v.AttributeData.fromColorRGB([r,i,n])):5===t&&(e&=-50331904,e|=33554432|255&r),e},t.prototype._extractColor=function(e,t,r){var i=[0,0,-1,0,0,0],n=0,o=0;do{if(i[o+n]=e.params[t+o],e.hasSubParams(t+o)){var s=e.getSubParams(t+o),a=0;do{5===i[1]&&(n=1),i[o+a+1+n]=s[a]}while(++a<s.length&&a+o+1+n<i.length);break}if(5===i[1]&&o+n>=2||2===i[1]&&o+n>=5)break;i[1]&&(n=1)}while(++o+t<e.length&&o+n<i.length);for(a=2;a<i.length;++a)-1===i[a]&&(i[a]=0);switch(i[0]){case 38:r.fg=this._updateAttrColor(r.fg,i[1],i[3],i[4],i[5]);break;case 48:r.bg=this._updateAttrColor(r.bg,i[1],i[3],i[4],i[5]);break;case 58:r.extended=r.extended.clone(),r.extended.underlineColor=this._updateAttrColor(r.extended.underlineColor,i[1],i[3],i[4],i[5])}return o},t.prototype._processUnderline=function(e,t){t.extended=t.extended.clone(),(!~e||e>5)&&(e=1),t.extended.underlineStyle=e,t.fg|=268435456,0===e&&(t.fg&=-268435457),t.updateExtended()},t.prototype.charAttributes=function(e){if(1===e.length&&0===e.params[0])return this._curAttrData.fg=f.DEFAULT_ATTR_DATA.fg,this._curAttrData.bg=f.DEFAULT_ATTR_DATA.bg,!0;for(var t,r=e.length,i=this._curAttrData,n=0;n<r;n++)(t=e.params[n])>=30&&t<=37?(i.fg&=-50331904,i.fg|=16777216|t-30):t>=40&&t<=47?(i.bg&=-50331904,i.bg|=16777216|t-40):t>=90&&t<=97?(i.fg&=-50331904,i.fg|=16777224|t-90):t>=100&&t<=107?(i.bg&=-50331904,i.bg|=16777224|t-100):0===t?(i.fg=f.DEFAULT_ATTR_DATA.fg,i.bg=f.DEFAULT_ATTR_DATA.bg):1===t?i.fg|=134217728:3===t?i.bg|=67108864:4===t?(i.fg|=268435456,this._processUnderline(e.hasSubParams(n)?e.getSubParams(n)[0]:1,i)):5===t?i.fg|=536870912:7===t?i.fg|=67108864:8===t?i.fg|=1073741824:9===t?i.fg|=2147483648:2===t?i.bg|=134217728:21===t?this._processUnderline(2,i):22===t?(i.fg&=-134217729,i.bg&=-134217729):23===t?i.bg&=-67108865:24===t?i.fg&=-268435457:25===t?i.fg&=-536870913:27===t?i.fg&=-67108865:28===t?i.fg&=-1073741825:29===t?i.fg&=2147483647:39===t?(i.fg&=-67108864,i.fg|=16777215&f.DEFAULT_ATTR_DATA.fg):49===t?(i.bg&=-67108864,i.bg|=16777215&f.DEFAULT_ATTR_DATA.bg):38===t||48===t||58===t?n+=this._extractColor(e,n,i):59===t?(i.extended=i.extended.clone(),i.extended.underlineColor=-1,i.updateExtended()):100===t?(i.fg&=-67108864,i.fg|=16777215&f.DEFAULT_ATTR_DATA.fg,i.bg&=-67108864,i.bg|=16777215&f.DEFAULT_ATTR_DATA.bg):this._logService.debug("Unknown SGR attribute: %d.",t);return!0},t.prototype.deviceStatus=function(e){switch(e.params[0]){case 5:this._coreService.triggerDataEvent(s.C0.ESC+"[0n");break;case 6:var t=this._activeBuffer.y+1,r=this._activeBuffer.x+1;this._coreService.triggerDataEvent(s.C0.ESC+"["+t+";"+r+"R")}return!0},t.prototype.deviceStatusPrivate=function(e){if(6===e.params[0]){var t=this._activeBuffer.y+1,r=this._activeBuffer.x+1;this._coreService.triggerDataEvent(s.C0.ESC+"[?"+t+";"+r+"R")}return!0},t.prototype.softReset=function(e){return this._coreService.isCursorHidden=!1,this._onRequestSyncScrollBar.fire(),this._activeBuffer.scrollTop=0,this._activeBuffer.scrollBottom=this._bufferService.rows-1,this._curAttrData=f.DEFAULT_ATTR_DATA.clone(),this._coreService.reset(),this._charsetService.reset(),this._activeBuffer.savedX=0,this._activeBuffer.savedY=this._activeBuffer.ybase,this._activeBuffer.savedCurAttrData.fg=this._curAttrData.fg,this._activeBuffer.savedCurAttrData.bg=this._curAttrData.bg,this._activeBuffer.savedCharset=this._charsetService.charset,this._coreService.decPrivateModes.origin=!1,!0},t.prototype.setCursorStyle=function(e){var t=e.params[0]||1;switch(t){case 1:case 2:this._optionsService.options.cursorStyle="block";break;case 3:case 4:this._optionsService.options.cursorStyle="underline";break;case 5:case 6:this._optionsService.options.cursorStyle="bar"}var r=t%2==1;return this._optionsService.options.cursorBlink=r,!0},t.prototype.setScrollRegion=function(e){var t,r=e.params[0]||1;return(e.length<2||(t=e.params[1])>this._bufferService.rows||0===t)&&(t=this._bufferService.rows),t>r&&(this._activeBuffer.scrollTop=r-1,this._activeBuffer.scrollBottom=t-1,this._setCursor(0,0)),!0},t.prototype.windowOptions=function(e){if(!w(e.params[0],this._optionsService.rawOptions.windowOptions))return!0;var t=e.length>1?e.params[1]:0;switch(e.params[0]){case 14:2!==t&&this._onRequestWindowsOptionsReport.fire(o.GET_WIN_SIZE_PIXELS);break;case 16:this._onRequestWindowsOptionsReport.fire(o.GET_CELL_SIZE_PIXELS);break;case 18:this._bufferService&&this._coreService.triggerDataEvent(s.C0.ESC+"[8;"+this._bufferService.rows+";"+this._bufferService.cols+"t");break;case 22:0!==t&&2!==t||(this._windowTitleStack.push(this._windowTitle),this._windowTitleStack.length>10&&this._windowTitleStack.shift()),0!==t&&1!==t||(this._iconNameStack.push(this._iconName),this._iconNameStack.length>10&&this._iconNameStack.shift());break;case 23:0!==t&&2!==t||this._windowTitleStack.length&&this.setTitle(this._windowTitleStack.pop()),0!==t&&1!==t||this._iconNameStack.length&&this.setIconName(this._iconNameStack.pop())}return!0},t.prototype.saveCursor=function(e){return this._activeBuffer.savedX=this._activeBuffer.x,this._activeBuffer.savedY=this._activeBuffer.ybase+this._activeBuffer.y,this._activeBuffer.savedCurAttrData.fg=this._curAttrData.fg,this._activeBuffer.savedCurAttrData.bg=this._curAttrData.bg,this._activeBuffer.savedCharset=this._charsetService.charset,!0},t.prototype.restoreCursor=function(e){return this._activeBuffer.x=this._activeBuffer.savedX||0,this._activeBuffer.y=Math.max(this._activeBuffer.savedY-this._activeBuffer.ybase,0),this._curAttrData.fg=this._activeBuffer.savedCurAttrData.fg,this._curAttrData.bg=this._activeBuffer.savedCurAttrData.bg,this._charsetService.charset=this._savedCharset,this._activeBuffer.savedCharset&&(this._charsetService.charset=this._activeBuffer.savedCharset),this._restrictCursor(),!0},t.prototype.setTitle=function(e){return this._windowTitle=e,this._onTitleChange.fire(e),!0},t.prototype.setIconName=function(e){return this._iconName=e,!0},t.prototype.setOrReportIndexedColor=function(e){for(var t=[],r=e.split(";");r.length>1;){var i=r.shift(),n=r.shift();if(/^\d+$/.exec(i)){var o=parseInt(i);if(0<=o&&o<256)if("?"===n)t.push({type:0,index:o});else{var s=(0,S.parseColor)(n);s&&t.push({type:1,index:o,color:s})}}}return t.length&&this._onColor.fire(t),!0},t.prototype._setOrReportSpecialColor=function(e,t){for(var r=e.split(";"),i=0;i<r.length&&!(t>=this._specialColors.length);++i,++t)if("?"===r[i])this._onColor.fire([{type:0,index:this._specialColors[t]}]);else{var n=(0,S.parseColor)(r[i]);n&&this._onColor.fire([{type:1,index:this._specialColors[t],color:n}])}return!0},t.prototype.setOrReportFgColor=function(e){return this._setOrReportSpecialColor(e,0)},t.prototype.setOrReportBgColor=function(e){return this._setOrReportSpecialColor(e,1)},t.prototype.setOrReportCursorColor=function(e){return this._setOrReportSpecialColor(e,2)},t.prototype.restoreIndexedColor=function(e){if(!e)return this._onColor.fire([{type:2}]),!0;for(var t=[],r=e.split(";"),i=0;i<r.length;++i)if(/^\d+$/.exec(r[i])){var n=parseInt(r[i]);0<=n&&n<256&&t.push({type:2,index:n})}return t.length&&this._onColor.fire(t),!0},t.prototype.restoreFgColor=function(e){return this._onColor.fire([{type:2,index:256}]),!0},t.prototype.restoreBgColor=function(e){return this._onColor.fire([{type:2,index:257}]),!0},t.prototype.restoreCursorColor=function(e){return this._onColor.fire([{type:2,index:258}]),!0},t.prototype.nextLine=function(){return this._activeBuffer.x=0,this.index(),!0},t.prototype.keypadApplicationMode=function(){return this._logService.debug("Serial port requested application keypad."),this._coreService.decPrivateModes.applicationKeypad=!0,this._onRequestSyncScrollBar.fire(),!0},t.prototype.keypadNumericMode=function(){return this._logService.debug("Switching back to normal keypad."),this._coreService.decPrivateModes.applicationKeypad=!1,this._onRequestSyncScrollBar.fire(),!0},t.prototype.selectDefaultCharset=function(){return this._charsetService.setgLevel(0),this._charsetService.setgCharset(0,a.DEFAULT_CHARSET),!0},t.prototype.selectCharset=function(e){return 2!==e.length?(this.selectDefaultCharset(),!0):("/"===e[0]||this._charsetService.setgCharset(C[e[0]],a.CHARSETS[e[1]]||a.DEFAULT_CHARSET),!0)},t.prototype.index=function(){return this._restrictCursor(),this._activeBuffer.y++,this._activeBuffer.y===this._activeBuffer.scrollBottom+1?(this._activeBuffer.y--,this._bufferService.scroll(this._eraseAttrData())):this._activeBuffer.y>=this._bufferService.rows&&(this._activeBuffer.y=this._bufferService.rows-1),this._restrictCursor(),!0},t.prototype.tabSet=function(){return this._activeBuffer.tabs[this._activeBuffer.x]=!0,!0},t.prototype.reverseIndex=function(){if(this._restrictCursor(),this._activeBuffer.y===this._activeBuffer.scrollTop){var e=this._activeBuffer.scrollBottom-this._activeBuffer.scrollTop;this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase+this._activeBuffer.y,e,1),this._activeBuffer.lines.set(this._activeBuffer.ybase+this._activeBuffer.y,this._activeBuffer.getBlankLine(this._eraseAttrData())),this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom)}else this._activeBuffer.y--,this._restrictCursor();return!0},t.prototype.fullReset=function(){return this._parser.reset(),this._onRequestReset.fire(),!0},t.prototype.reset=function(){this._curAttrData=f.DEFAULT_ATTR_DATA.clone(),this._eraseAttrDataInternal=f.DEFAULT_ATTR_DATA.clone()},t.prototype._eraseAttrData=function(){return this._eraseAttrDataInternal.bg&=-67108864,this._eraseAttrDataInternal.bg|=67108863&this._curAttrData.bg,this._eraseAttrDataInternal},t.prototype.setgLevel=function(e){return this._charsetService.setgLevel(e),!0},t.prototype.screenAlignmentPattern=function(){var e=new p.CellData;e.content=1<<22|"E".charCodeAt(0),e.fg=this._curAttrData.fg,e.bg=this._curAttrData.bg,this._setCursor(0,0);for(var t=0;t<this._bufferService.rows;++t){var r=this._activeBuffer.ybase+this._activeBuffer.y+t,i=this._activeBuffer.lines.get(r);i&&(i.fill(e),i.isWrapped=!1)}return this._dirtyRowService.markAllDirty(),this._setCursor(0,0),!0},t}(l.Disposable);t.InputHandler=E},844:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getDisposeArrayDisposable=t.disposeArray=t.Disposable=void 0;var r=function(){function e(){this._disposables=[],this._isDisposed=!1}return e.prototype.dispose=function(){this._isDisposed=!0;for(var e=0,t=this._disposables;e<t.length;e++)t[e].dispose();this._disposables.length=0},e.prototype.register=function(e){return this._disposables.push(e),e},e.prototype.unregister=function(e){var t=this._disposables.indexOf(e);-1!==t&&this._disposables.splice(t,1)},e}();function i(e){for(var t=0,r=e;t<r.length;t++)r[t].dispose();e.length=0}t.Disposable=r,t.disposeArray=i,t.getDisposeArrayDisposable=function(e){return{dispose:function(){return i(e)}}}},6114:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isLinux=t.isWindows=t.isIphone=t.isIpad=t.isMac=t.isSafari=t.isLegacyEdge=t.isFirefox=void 0;var r="undefined"==typeof navigator,i=r?"node":navigator.userAgent,n=r?"node":navigator.platform;t.isFirefox=i.includes("Firefox"),t.isLegacyEdge=i.includes("Edge"),t.isSafari=/^((?!chrome|android).)*safari/i.test(i),t.isMac=["Macintosh","MacIntel","MacPPC","Mac68K"].includes(n),t.isIpad="iPad"===n,t.isIphone="iPhone"===n,t.isWindows=["Windows","Win16","Win32","WinCE"].includes(n),t.isLinux=n.indexOf("Linux")>=0},8273:(e,t)=>{function r(e,t,r,i){if(void 0===r&&(r=0),void 0===i&&(i=e.length),r>=e.length)return e;r=(e.length+r)%e.length,i=i>=e.length?e.length:(e.length+i)%e.length;for(var n=r;n<i;++n)e[n]=t;return e}Object.defineProperty(t,"__esModule",{value:!0}),t.concat=t.fillFallback=t.fill=void 0,t.fill=function(e,t,i,n){return e.fill?e.fill(t,i,n):r(e,t,i,n)},t.fillFallback=r,t.concat=function(e,t){var r=new e.constructor(e.length+t.length);return r.set(e),r.set(t,e.length),r}},9282:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.updateWindowsModeWrappedState=void 0;var i=r(643);t.updateWindowsModeWrappedState=function(e){var t=e.buffer.lines.get(e.buffer.ybase+e.buffer.y-1),r=null==t?void 0:t.get(e.cols-1),n=e.buffer.lines.get(e.buffer.ybase+e.buffer.y);n&&r&&(n.isWrapped=r[i.CHAR_DATA_CODE_INDEX]!==i.NULL_CELL_CODE&&r[i.CHAR_DATA_CODE_INDEX]!==i.WHITESPACE_CELL_CODE)}},3734:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ExtendedAttrs=t.AttributeData=void 0;var r=function(){function e(){this.fg=0,this.bg=0,this.extended=new i}return e.toColorRGB=function(e){return[e>>>16&255,e>>>8&255,255&e]},e.fromColorRGB=function(e){return(255&e[0])<<16|(255&e[1])<<8|255&e[2]},e.prototype.clone=function(){var t=new e;return t.fg=this.fg,t.bg=this.bg,t.extended=this.extended.clone(),t},e.prototype.isInverse=function(){return 67108864&this.fg},e.prototype.isBold=function(){return 134217728&this.fg},e.prototype.isUnderline=function(){return 268435456&this.fg},e.prototype.isBlink=function(){return 536870912&this.fg},e.prototype.isInvisible=function(){return 1073741824&this.fg},e.prototype.isItalic=function(){return 67108864&this.bg},e.prototype.isDim=function(){return 134217728&this.bg},e.prototype.isStrikethrough=function(){return 2147483648&this.fg},e.prototype.getFgColorMode=function(){return 50331648&this.fg},e.prototype.getBgColorMode=function(){return 50331648&this.bg},e.prototype.isFgRGB=function(){return 50331648==(50331648&this.fg)},e.prototype.isBgRGB=function(){return 50331648==(50331648&this.bg)},e.prototype.isFgPalette=function(){return 16777216==(50331648&this.fg)||33554432==(50331648&this.fg)},e.prototype.isBgPalette=function(){return 16777216==(50331648&this.bg)||33554432==(50331648&this.bg)},e.prototype.isFgDefault=function(){return 0==(50331648&this.fg)},e.prototype.isBgDefault=function(){return 0==(50331648&this.bg)},e.prototype.isAttributeDefault=function(){return 0===this.fg&&0===this.bg},e.prototype.getFgColor=function(){switch(50331648&this.fg){case 16777216:case 33554432:return 255&this.fg;case 50331648:return 16777215&this.fg;default:return-1}},e.prototype.getBgColor=function(){switch(50331648&this.bg){case 16777216:case 33554432:return 255&this.bg;case 50331648:return 16777215&this.bg;default:return-1}},e.prototype.hasExtendedAttrs=function(){return 268435456&this.bg},e.prototype.updateExtended=function(){this.extended.isEmpty()?this.bg&=-268435457:this.bg|=268435456},e.prototype.getUnderlineColor=function(){if(268435456&this.bg&&~this.extended.underlineColor)switch(50331648&this.extended.underlineColor){case 16777216:case 33554432:return 255&this.extended.underlineColor;case 50331648:return 16777215&this.extended.underlineColor;default:return this.getFgColor()}return this.getFgColor()},e.prototype.getUnderlineColorMode=function(){return 268435456&this.bg&&~this.extended.underlineColor?50331648&this.extended.underlineColor:this.getFgColorMode()},e.prototype.isUnderlineColorRGB=function(){return 268435456&this.bg&&~this.extended.underlineColor?50331648==(50331648&this.extended.underlineColor):this.isFgRGB()},e.prototype.isUnderlineColorPalette=function(){return 268435456&this.bg&&~this.extended.underlineColor?16777216==(50331648&this.extended.underlineColor)||33554432==(50331648&this.extended.underlineColor):this.isFgPalette()},e.prototype.isUnderlineColorDefault=function(){return 268435456&this.bg&&~this.extended.underlineColor?0==(50331648&this.extended.underlineColor):this.isFgDefault()},e.prototype.getUnderlineStyle=function(){return 268435456&this.fg?268435456&this.bg?this.extended.underlineStyle:1:0},e}();t.AttributeData=r;var i=function(){function e(e,t){void 0===e&&(e=0),void 0===t&&(t=-1),this.underlineStyle=e,this.underlineColor=t}return e.prototype.clone=function(){return new e(this.underlineStyle,this.underlineColor)},e.prototype.isEmpty=function(){return 0===this.underlineStyle},e}();t.ExtendedAttrs=i},9092:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferStringIterator=t.Buffer=t.MAX_BUFFER_SIZE=void 0;var i=r(6349),n=r(8437),o=r(511),s=r(643),a=r(4634),c=r(4863),l=r(7116),h=r(3734);t.MAX_BUFFER_SIZE=4294967295;var u=function(){function e(e,t,r){this._hasScrollback=e,this._optionsService=t,this._bufferService=r,this.ydisp=0,this.ybase=0,this.y=0,this.x=0,this.savedY=0,this.savedX=0,this.savedCurAttrData=n.DEFAULT_ATTR_DATA.clone(),this.savedCharset=l.DEFAULT_CHARSET,this.markers=[],this._nullCell=o.CellData.fromCharData([0,s.NULL_CELL_CHAR,s.NULL_CELL_WIDTH,s.NULL_CELL_CODE]),this._whitespaceCell=o.CellData.fromCharData([0,s.WHITESPACE_CELL_CHAR,s.WHITESPACE_CELL_WIDTH,s.WHITESPACE_CELL_CODE]),this._isClearing=!1,this._cols=this._bufferService.cols,this._rows=this._bufferService.rows,this.lines=new i.CircularList(this._getCorrectBufferLength(this._rows)),this.scrollTop=0,this.scrollBottom=this._rows-1,this.setupTabStops()}return e.prototype.getNullCell=function(e){return e?(this._nullCell.fg=e.fg,this._nullCell.bg=e.bg,this._nullCell.extended=e.extended):(this._nullCell.fg=0,this._nullCell.bg=0,this._nullCell.extended=new h.ExtendedAttrs),this._nullCell},e.prototype.getWhitespaceCell=function(e){return e?(this._whitespaceCell.fg=e.fg,this._whitespaceCell.bg=e.bg,this._whitespaceCell.extended=e.extended):(this._whitespaceCell.fg=0,this._whitespaceCell.bg=0,this._whitespaceCell.extended=new h.ExtendedAttrs),this._whitespaceCell},e.prototype.getBlankLine=function(e,t){return new n.BufferLine(this._bufferService.cols,this.getNullCell(e),t)},Object.defineProperty(e.prototype,"hasScrollback",{get:function(){return this._hasScrollback&&this.lines.maxLength>this._rows},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isCursorInViewport",{get:function(){var e=this.ybase+this.y-this.ydisp;return e>=0&&e<this._rows},enumerable:!1,configurable:!0}),e.prototype._getCorrectBufferLength=function(e){if(!this._hasScrollback)return e;var r=e+this._optionsService.rawOptions.scrollback;return r>t.MAX_BUFFER_SIZE?t.MAX_BUFFER_SIZE:r},e.prototype.fillViewportRows=function(e){if(0===this.lines.length){void 0===e&&(e=n.DEFAULT_ATTR_DATA);for(var t=this._rows;t--;)this.lines.push(this.getBlankLine(e))}},e.prototype.clear=function(){this.ydisp=0,this.ybase=0,this.y=0,this.x=0,this.lines=new i.CircularList(this._getCorrectBufferLength(this._rows)),this.scrollTop=0,this.scrollBottom=this._rows-1,this.setupTabStops()},e.prototype.resize=function(e,t){var r=this.getNullCell(n.DEFAULT_ATTR_DATA),i=this._getCorrectBufferLength(t);if(i>this.lines.maxLength&&(this.lines.maxLength=i),this.lines.length>0){if(this._cols<e)for(var o=0;o<this.lines.length;o++)this.lines.get(o).resize(e,r);var s=0;if(this._rows<t)for(var a=this._rows;a<t;a++)this.lines.length<t+this.ybase&&(this._optionsService.rawOptions.windowsMode?this.lines.push(new n.BufferLine(e,r)):this.ybase>0&&this.lines.length<=this.ybase+this.y+s+1?(this.ybase--,s++,this.ydisp>0&&this.ydisp--):this.lines.push(new n.BufferLine(e,r)));else for(a=this._rows;a>t;a--)this.lines.length>t+this.ybase&&(this.lines.length>this.ybase+this.y+1?this.lines.pop():(this.ybase++,this.ydisp++));if(i<this.lines.maxLength){var c=this.lines.length-i;c>0&&(this.lines.trimStart(c),this.ybase=Math.max(this.ybase-c,0),this.ydisp=Math.max(this.ydisp-c,0),this.savedY=Math.max(this.savedY-c,0)),this.lines.maxLength=i}this.x=Math.min(this.x,e-1),this.y=Math.min(this.y,t-1),s&&(this.y+=s),this.savedX=Math.min(this.savedX,e-1),this.scrollTop=0}if(this.scrollBottom=t-1,this._isReflowEnabled&&(this._reflow(e,t),this._cols>e))for(o=0;o<this.lines.length;o++)this.lines.get(o).resize(e,r);this._cols=e,this._rows=t},Object.defineProperty(e.prototype,"_isReflowEnabled",{get:function(){return this._hasScrollback&&!this._optionsService.rawOptions.windowsMode},enumerable:!1,configurable:!0}),e.prototype._reflow=function(e,t){this._cols!==e&&(e>this._cols?this._reflowLarger(e,t):this._reflowSmaller(e,t))},e.prototype._reflowLarger=function(e,t){var r=(0,a.reflowLargerGetLinesToRemove)(this.lines,this._cols,e,this.ybase+this.y,this.getNullCell(n.DEFAULT_ATTR_DATA));if(r.length>0){var i=(0,a.reflowLargerCreateNewLayout)(this.lines,r);(0,a.reflowLargerApplyNewLayout)(this.lines,i.layout),this._reflowLargerAdjustViewport(e,t,i.countRemoved)}},e.prototype._reflowLargerAdjustViewport=function(e,t,r){for(var i=this.getNullCell(n.DEFAULT_ATTR_DATA),o=r;o-- >0;)0===this.ybase?(this.y>0&&this.y--,this.lines.length<t&&this.lines.push(new n.BufferLine(e,i))):(this.ydisp===this.ybase&&this.ydisp--,this.ybase--);this.savedY=Math.max(this.savedY-r,0)},e.prototype._reflowSmaller=function(e,t){for(var r=this.getNullCell(n.DEFAULT_ATTR_DATA),i=[],o=0,s=this.lines.length-1;s>=0;s--){var c=this.lines.get(s);if(!(!c||!c.isWrapped&&c.getTrimmedLength()<=e)){for(var l=[c];c.isWrapped&&s>0;)c=this.lines.get(--s),l.unshift(c);var h=this.ybase+this.y;if(!(h>=s&&h<s+l.length)){var u,f=l[l.length-1].getTrimmedLength(),_=(0,a.reflowSmallerGetNewLineLengths)(l,this._cols,e),d=_.length-l.length;u=0===this.ybase&&this.y!==this.lines.length-1?Math.max(0,this.y-this.lines.maxLength+d):Math.max(0,this.lines.length-this.lines.maxLength+d);for(var p=[],v=0;v<d;v++){var g=this.getBlankLine(n.DEFAULT_ATTR_DATA,!0);p.push(g)}p.length>0&&(i.push({start:s+l.length+o,newLines:p}),o+=p.length),l.push.apply(l,p);var y=_.length-1,m=_[y];0===m&&(m=_[--y]);for(var S=l.length-d-1,C=f;S>=0;){var b=Math.min(C,m);if(void 0===l[y])break;if(l[y].copyCellsFrom(l[S],C-b,m-b,b,!0),0==(m-=b)&&(m=_[--y]),0==(C-=b)){S--;var w=Math.max(S,0);C=(0,a.getWrappedLineTrimmedLength)(l,w,this._cols)}}for(v=0;v<l.length;v++)_[v]<e&&l[v].setCell(_[v],r);for(var L=d-u;L-- >0;)0===this.ybase?this.y<t-1?(this.y++,this.lines.pop()):(this.ybase++,this.ydisp++):this.ybase<Math.min(this.lines.maxLength,this.lines.length+o)-t&&(this.ybase===this.ydisp&&this.ydisp++,this.ybase++);this.savedY=Math.min(this.savedY+d,this.ybase+t-1)}}}if(i.length>0){var E=[],x=[];for(v=0;v<this.lines.length;v++)x.push(this.lines.get(v));var k=this.lines.length,M=k-1,A=0,R=i[A];this.lines.length=Math.min(this.lines.maxLength,this.lines.length+o);var O=0;for(v=Math.min(this.lines.maxLength-1,k+o-1);v>=0;v--)if(R&&R.start>M+O){for(var T=R.newLines.length-1;T>=0;T--)this.lines.set(v--,R.newLines[T]);v++,E.push({index:M+1,amount:R.newLines.length}),O+=R.newLines.length,R=i[++A]}else this.lines.set(v,x[M--]);var D=0;for(v=E.length-1;v>=0;v--)E[v].index+=D,this.lines.onInsertEmitter.fire(E[v]),D+=E[v].amount;var B=Math.max(0,k+o-this.lines.maxLength);B>0&&this.lines.onTrimEmitter.fire(B)}},e.prototype.stringIndexToBufferIndex=function(e,t,r){for(void 0===r&&(r=!1);t;){var i=this.lines.get(e);if(!i)return[-1,-1];for(var n=r?i.getTrimmedLength():i.length,o=0;o<n;++o)if(i.get(o)[s.CHAR_DATA_WIDTH_INDEX]&&(t-=i.get(o)[s.CHAR_DATA_CHAR_INDEX].length||1),t<0)return[e,o];e++}return[e,0]},e.prototype.translateBufferLineToString=function(e,t,r,i){void 0===r&&(r=0);var n=this.lines.get(e);return n?n.translateToString(t,r,i):""},e.prototype.getWrappedRangeForLine=function(e){for(var t=e,r=e;t>0&&this.lines.get(t).isWrapped;)t--;for(;r+1<this.lines.length&&this.lines.get(r+1).isWrapped;)r++;return{first:t,last:r}},e.prototype.setupTabStops=function(e){for(null!=e?this.tabs[e]||(e=this.prevStop(e)):(this.tabs={},e=0);e<this._cols;e+=this._optionsService.rawOptions.tabStopWidth)this.tabs[e]=!0},e.prototype.prevStop=function(e){for(null==e&&(e=this.x);!this.tabs[--e]&&e>0;);return e>=this._cols?this._cols-1:e<0?0:e},e.prototype.nextStop=function(e){for(null==e&&(e=this.x);!this.tabs[++e]&&e<this._cols;);return e>=this._cols?this._cols-1:e<0?0:e},e.prototype.clearMarkers=function(e){if(this._isClearing=!0,void 0!==e)for(var t=0;t<this.markers.length;t++)this.markers[t].line===e&&(this.markers[t].dispose(),this.markers.splice(t--,1));else{for(var r=0,i=this.markers;r<i.length;r++)i[r].dispose();this.markers=[]}this._isClearing=!1},e.prototype.addMarker=function(e){var t=this,r=new c.Marker(e);return this.markers.push(r),r.register(this.lines.onTrim((function(e){r.line-=e,r.line<0&&r.dispose()}))),r.register(this.lines.onInsert((function(e){r.line>=e.index&&(r.line+=e.amount)}))),r.register(this.lines.onDelete((function(e){r.line>=e.index&&r.line<e.index+e.amount&&r.dispose(),r.line>e.index&&(r.line-=e.amount)}))),r.register(r.onDispose((function(){return t._removeMarker(r)}))),r},e.prototype._removeMarker=function(e){this._isClearing||this.markers.splice(this.markers.indexOf(e),1)},e.prototype.iterator=function(e,t,r,i,n){return new f(this,e,t,r,i,n)},e}();t.Buffer=u;var f=function(){function e(e,t,r,i,n,o){void 0===r&&(r=0),void 0===i&&(i=e.lines.length),void 0===n&&(n=0),void 0===o&&(o=0),this._buffer=e,this._trimRight=t,this._startIndex=r,this._endIndex=i,this._startOverscan=n,this._endOverscan=o,this._startIndex<0&&(this._startIndex=0),this._endIndex>this._buffer.lines.length&&(this._endIndex=this._buffer.lines.length),this._current=this._startIndex}return e.prototype.hasNext=function(){return this._current<this._endIndex},e.prototype.next=function(){var e=this._buffer.getWrappedRangeForLine(this._current);e.first<this._startIndex-this._startOverscan&&(e.first=this._startIndex-this._startOverscan),e.last>this._endIndex+this._endOverscan&&(e.last=this._endIndex+this._endOverscan),e.first=Math.max(e.first,0),e.last=Math.min(e.last,this._buffer.lines.length);for(var t="",r=e.first;r<=e.last;++r)t+=this._buffer.translateBufferLineToString(r,this._trimRight);return this._current=e.last+1,{range:e,content:t}},e}();t.BufferStringIterator=f},8437:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferLine=t.DEFAULT_ATTR_DATA=void 0;var i=r(482),n=r(643),o=r(511),s=r(3734);t.DEFAULT_ATTR_DATA=Object.freeze(new s.AttributeData);var a=function(){function e(e,t,r){void 0===r&&(r=!1),this.isWrapped=r,this._combined={},this._extendedAttrs={},this._data=new Uint32Array(3*e);for(var i=t||o.CellData.fromCharData([0,n.NULL_CELL_CHAR,n.NULL_CELL_WIDTH,n.NULL_CELL_CODE]),s=0;s<e;++s)this.setCell(s,i);this.length=e}return e.prototype.get=function(e){var t=this._data[3*e+0],r=2097151&t;return[this._data[3*e+1],2097152&t?this._combined[e]:r?(0,i.stringFromCodePoint)(r):"",t>>22,2097152&t?this._combined[e].charCodeAt(this._combined[e].length-1):r]},e.prototype.set=function(e,t){this._data[3*e+1]=t[n.CHAR_DATA_ATTR_INDEX],t[n.CHAR_DATA_CHAR_INDEX].length>1?(this._combined[e]=t[1],this._data[3*e+0]=2097152|e|t[n.CHAR_DATA_WIDTH_INDEX]<<22):this._data[3*e+0]=t[n.CHAR_DATA_CHAR_INDEX].charCodeAt(0)|t[n.CHAR_DATA_WIDTH_INDEX]<<22},e.prototype.getWidth=function(e){return this._data[3*e+0]>>22},e.prototype.hasWidth=function(e){return 12582912&this._data[3*e+0]},e.prototype.getFg=function(e){return this._data[3*e+1]},e.prototype.getBg=function(e){return this._data[3*e+2]},e.prototype.hasContent=function(e){return 4194303&this._data[3*e+0]},e.prototype.getCodePoint=function(e){var t=this._data[3*e+0];return 2097152&t?this._combined[e].charCodeAt(this._combined[e].length-1):2097151&t},e.prototype.isCombined=function(e){return 2097152&this._data[3*e+0]},e.prototype.getString=function(e){var t=this._data[3*e+0];return 2097152&t?this._combined[e]:2097151&t?(0,i.stringFromCodePoint)(2097151&t):""},e.prototype.loadCell=function(e,t){var r=3*e;return t.content=this._data[r+0],t.fg=this._data[r+1],t.bg=this._data[r+2],2097152&t.content&&(t.combinedData=this._combined[e]),268435456&t.bg&&(t.extended=this._extendedAttrs[e]),t},e.prototype.setCell=function(e,t){2097152&t.content&&(this._combined[e]=t.combinedData),268435456&t.bg&&(this._extendedAttrs[e]=t.extended),this._data[3*e+0]=t.content,this._data[3*e+1]=t.fg,this._data[3*e+2]=t.bg},e.prototype.setCellFromCodePoint=function(e,t,r,i,n,o){268435456&n&&(this._extendedAttrs[e]=o),this._data[3*e+0]=t|r<<22,this._data[3*e+1]=i,this._data[3*e+2]=n},e.prototype.addCodepointToCell=function(e,t){var r=this._data[3*e+0];2097152&r?this._combined[e]+=(0,i.stringFromCodePoint)(t):(2097151&r?(this._combined[e]=(0,i.stringFromCodePoint)(2097151&r)+(0,i.stringFromCodePoint)(t),r&=-2097152,r|=2097152):r=t|1<<22,this._data[3*e+0]=r)},e.prototype.insertCells=function(e,t,r,i){if((e%=this.length)&&2===this.getWidth(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs),t<this.length-e){for(var n=new o.CellData,a=this.length-e-t-1;a>=0;--a)this.setCell(e+t+a,this.loadCell(e+a,n));for(a=0;a<t;++a)this.setCell(e+a,r)}else for(a=e;a<this.length;++a)this.setCell(a,r);2===this.getWidth(this.length-1)&&this.setCellFromCodePoint(this.length-1,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs)},e.prototype.deleteCells=function(e,t,r,i){if(e%=this.length,t<this.length-e){for(var n=new o.CellData,a=0;a<this.length-e-t;++a)this.setCell(e+a,this.loadCell(e+t+a,n));for(a=this.length-t;a<this.length;++a)this.setCell(a,r)}else for(a=e;a<this.length;++a)this.setCell(a,r);e&&2===this.getWidth(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs),0!==this.getWidth(e)||this.hasContent(e)||this.setCellFromCodePoint(e,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs)},e.prototype.replaceCells=function(e,t,r,i){for(e&&2===this.getWidth(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs),t<this.length&&2===this.getWidth(t-1)&&this.setCellFromCodePoint(t,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs);e<t&&e<this.length;)this.setCell(e++,r)},e.prototype.resize=function(e,t){if(e!==this.length){if(e>this.length){var r=new Uint32Array(3*e);this.length&&(3*e<this._data.length?r.set(this._data.subarray(0,3*e)):r.set(this._data)),this._data=r;for(var i=this.length;i<e;++i)this.setCell(i,t)}else if(e){(r=new Uint32Array(3*e)).set(this._data.subarray(0,3*e)),this._data=r;var n=Object.keys(this._combined);for(i=0;i<n.length;i++){var o=parseInt(n[i],10);o>=e&&delete this._combined[o]}}else this._data=new Uint32Array(0),this._combined={};this.length=e}},e.prototype.fill=function(e){this._combined={},this._extendedAttrs={};for(var t=0;t<this.length;++t)this.setCell(t,e)},e.prototype.copyFrom=function(e){for(var t in this.length!==e.length?this._data=new Uint32Array(e._data):this._data.set(e._data),this.length=e.length,this._combined={},e._combined)this._combined[t]=e._combined[t];for(var t in this._extendedAttrs={},e._extendedAttrs)this._extendedAttrs[t]=e._extendedAttrs[t];this.isWrapped=e.isWrapped},e.prototype.clone=function(){var t=new e(0);for(var r in t._data=new Uint32Array(this._data),t.length=this.length,this._combined)t._combined[r]=this._combined[r];for(var r in this._extendedAttrs)t._extendedAttrs[r]=this._extendedAttrs[r];return t.isWrapped=this.isWrapped,t},e.prototype.getTrimmedLength=function(){for(var e=this.length-1;e>=0;--e)if(4194303&this._data[3*e+0])return e+(this._data[3*e+0]>>22);return 0},e.prototype.copyCellsFrom=function(e,t,r,i,n){var o=e._data;if(n)for(var s=i-1;s>=0;s--)for(var a=0;a<3;a++)this._data[3*(r+s)+a]=o[3*(t+s)+a];else for(s=0;s<i;s++)for(a=0;a<3;a++)this._data[3*(r+s)+a]=o[3*(t+s)+a];var c=Object.keys(e._combined);for(a=0;a<c.length;a++){var l=parseInt(c[a],10);l>=t&&(this._combined[l-t+r]=e._combined[l])}},e.prototype.translateToString=function(e,t,r){void 0===e&&(e=!1),void 0===t&&(t=0),void 0===r&&(r=this.length),e&&(r=Math.min(r,this.getTrimmedLength()));for(var o="";t<r;){var s=this._data[3*t+0],a=2097151&s;o+=2097152&s?this._combined[t]:a?(0,i.stringFromCodePoint)(a):n.WHITESPACE_CELL_CHAR,t+=s>>22||1}return o},e}();t.BufferLine=a},4841:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getRangeLength=void 0,t.getRangeLength=function(e,t){if(e.start.y>e.end.y)throw new Error("Buffer range end ("+e.end.x+", "+e.end.y+") cannot be before start ("+e.start.x+", "+e.start.y+")");return t*(e.end.y-e.start.y)+(e.end.x-e.start.x+1)}},4634:(e,t)=>{function r(e,t,r){if(t===e.length-1)return e[t].getTrimmedLength();var i=!e[t].hasContent(r-1)&&1===e[t].getWidth(r-1),n=2===e[t+1].getWidth(0);return i&&n?r-1:r}Object.defineProperty(t,"__esModule",{value:!0}),t.getWrappedLineTrimmedLength=t.reflowSmallerGetNewLineLengths=t.reflowLargerApplyNewLayout=t.reflowLargerCreateNewLayout=t.reflowLargerGetLinesToRemove=void 0,t.reflowLargerGetLinesToRemove=function(e,t,i,n,o){for(var s=[],a=0;a<e.length-1;a++){var c=a,l=e.get(++c);if(l.isWrapped){for(var h=[e.get(a)];c<e.length&&l.isWrapped;)h.push(l),l=e.get(++c);if(n>=a&&n<c)a+=h.length-1;else{for(var u=0,f=r(h,u,t),_=1,d=0;_<h.length;){var p=r(h,_,t),v=p-d,g=i-f,y=Math.min(v,g);h[u].copyCellsFrom(h[_],d,f,y,!1),(f+=y)===i&&(u++,f=0),(d+=y)===p&&(_++,d=0),0===f&&0!==u&&2===h[u-1].getWidth(i-1)&&(h[u].copyCellsFrom(h[u-1],i-1,f++,1,!1),h[u-1].setCell(i-1,o))}h[u].replaceCells(f,i,o);for(var m=0,S=h.length-1;S>0&&(S>u||0===h[S].getTrimmedLength());S--)m++;m>0&&(s.push(a+h.length-m),s.push(m)),a+=h.length-1}}}return s},t.reflowLargerCreateNewLayout=function(e,t){for(var r=[],i=0,n=t[i],o=0,s=0;s<e.length;s++)if(n===s){var a=t[++i];e.onDeleteEmitter.fire({index:s-o,amount:a}),s+=a-1,o+=a,n=t[++i]}else r.push(s);return{layout:r,countRemoved:o}},t.reflowLargerApplyNewLayout=function(e,t){for(var r=[],i=0;i<t.length;i++)r.push(e.get(t[i]));for(i=0;i<r.length;i++)e.set(i,r[i]);e.length=t.length},t.reflowSmallerGetNewLineLengths=function(e,t,i){for(var n=[],o=e.map((function(i,n){return r(e,n,t)})).reduce((function(e,t){return e+t})),s=0,a=0,c=0;c<o;){if(o-c<i){n.push(o-c);break}s+=i;var l=r(e,a,t);s>l&&(s-=l,a++);var h=2===e[a].getWidth(s-1);h&&s--;var u=h?i-1:i;n.push(u),c+=u}return n},t.getWrappedLineTrimmedLength=r},5295:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.BufferSet=void 0;var o=r(9092),s=r(8460),a=function(e){function t(t,r){var i=e.call(this)||this;return i._optionsService=t,i._bufferService=r,i._onBufferActivate=i.register(new s.EventEmitter),i.reset(),i}return n(t,e),Object.defineProperty(t.prototype,"onBufferActivate",{get:function(){return this._onBufferActivate.event},enumerable:!1,configurable:!0}),t.prototype.reset=function(){this._normal=new o.Buffer(!0,this._optionsService,this._bufferService),this._normal.fillViewportRows(),this._alt=new o.Buffer(!1,this._optionsService,this._bufferService),this._activeBuffer=this._normal,this._onBufferActivate.fire({activeBuffer:this._normal,inactiveBuffer:this._alt}),this.setupTabStops()},Object.defineProperty(t.prototype,"alt",{get:function(){return this._alt},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"active",{get:function(){return this._activeBuffer},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"normal",{get:function(){return this._normal},enumerable:!1,configurable:!0}),t.prototype.activateNormalBuffer=function(){this._activeBuffer!==this._normal&&(this._normal.x=this._alt.x,this._normal.y=this._alt.y,this._alt.clear(),this._activeBuffer=this._normal,this._onBufferActivate.fire({activeBuffer:this._normal,inactiveBuffer:this._alt}))},t.prototype.activateAltBuffer=function(e){this._activeBuffer!==this._alt&&(this._alt.fillViewportRows(e),this._alt.x=this._normal.x,this._alt.y=this._normal.y,this._activeBuffer=this._alt,this._onBufferActivate.fire({activeBuffer:this._alt,inactiveBuffer:this._normal}))},t.prototype.resize=function(e,t){this._normal.resize(e,t),this._alt.resize(e,t)},t.prototype.setupTabStops=function(e){this._normal.setupTabStops(e),this._alt.setupTabStops(e)},t}(r(844).Disposable);t.BufferSet=a},511:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.CellData=void 0;var o=r(482),s=r(643),a=r(3734),c=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.content=0,t.fg=0,t.bg=0,t.extended=new a.ExtendedAttrs,t.combinedData="",t}return n(t,e),t.fromCharData=function(e){var r=new t;return r.setFromCharData(e),r},t.prototype.isCombined=function(){return 2097152&this.content},t.prototype.getWidth=function(){return this.content>>22},t.prototype.getChars=function(){return 2097152&this.content?this.combinedData:2097151&this.content?(0,o.stringFromCodePoint)(2097151&this.content):""},t.prototype.getCode=function(){return this.isCombined()?this.combinedData.charCodeAt(this.combinedData.length-1):2097151&this.content},t.prototype.setFromCharData=function(e){this.fg=e[s.CHAR_DATA_ATTR_INDEX],this.bg=0;var t=!1;if(e[s.CHAR_DATA_CHAR_INDEX].length>2)t=!0;else if(2===e[s.CHAR_DATA_CHAR_INDEX].length){var r=e[s.CHAR_DATA_CHAR_INDEX].charCodeAt(0);if(55296<=r&&r<=56319){var i=e[s.CHAR_DATA_CHAR_INDEX].charCodeAt(1);56320<=i&&i<=57343?this.content=1024*(r-55296)+i-56320+65536|e[s.CHAR_DATA_WIDTH_INDEX]<<22:t=!0}else t=!0}else this.content=e[s.CHAR_DATA_CHAR_INDEX].charCodeAt(0)|e[s.CHAR_DATA_WIDTH_INDEX]<<22;t&&(this.combinedData=e[s.CHAR_DATA_CHAR_INDEX],this.content=2097152|e[s.CHAR_DATA_WIDTH_INDEX]<<22)},t.prototype.getAsCharData=function(){return[this.fg,this.getChars(),this.getWidth(),this.getCode()]},t}(a.AttributeData);t.CellData=c},643:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WHITESPACE_CELL_CODE=t.WHITESPACE_CELL_WIDTH=t.WHITESPACE_CELL_CHAR=t.NULL_CELL_CODE=t.NULL_CELL_WIDTH=t.NULL_CELL_CHAR=t.CHAR_DATA_CODE_INDEX=t.CHAR_DATA_WIDTH_INDEX=t.CHAR_DATA_CHAR_INDEX=t.CHAR_DATA_ATTR_INDEX=t.DEFAULT_ATTR=t.DEFAULT_COLOR=void 0,t.DEFAULT_COLOR=256,t.DEFAULT_ATTR=256|t.DEFAULT_COLOR<<9,t.CHAR_DATA_ATTR_INDEX=0,t.CHAR_DATA_CHAR_INDEX=1,t.CHAR_DATA_WIDTH_INDEX=2,t.CHAR_DATA_CODE_INDEX=3,t.NULL_CELL_CHAR="",t.NULL_CELL_WIDTH=1,t.NULL_CELL_CODE=0,t.WHITESPACE_CELL_CHAR=" ",t.WHITESPACE_CELL_WIDTH=1,t.WHITESPACE_CELL_CODE=32},4863:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Marker=void 0;var o=r(8460),s=function(e){function t(r){var i=e.call(this)||this;return i.line=r,i._id=t._nextId++,i.isDisposed=!1,i._onDispose=new o.EventEmitter,i}return n(t,e),Object.defineProperty(t.prototype,"id",{get:function(){return this._id},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onDispose",{get:function(){return this._onDispose.event},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this.line=-1,this._onDispose.fire(),e.prototype.dispose.call(this))},t._nextId=1,t}(r(844).Disposable);t.Marker=s},7116:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_CHARSET=t.CHARSETS=void 0,t.CHARSETS={},t.DEFAULT_CHARSET=t.CHARSETS.B,t.CHARSETS[0]={"`":"â",a:"â",b:"â",c:"â",d:"â",e:"â",f:"Â°",g:"Â±",h:"â¤",i:"â",j:"â",k:"â",l:"â",m:"â",n:"â¼",o:"âº",p:"â»",q:"â",r:"â¼",s:"â½",t:"â",u:"â¤",v:"â´",w:"â¬",x:"â",y:"â¤",z:"â¥","{":"Ï","|":"â ","}":"Â£","~":"Â·"},t.CHARSETS.A={"#":"Â£"},t.CHARSETS.B=void 0,t.CHARSETS[4]={"#":"Â£","@":"Â¾","[":"ij","\\":"Â½","]":"|","{":"Â¨","|":"f","}":"Â¼","~":"Â´"},t.CHARSETS.C=t.CHARSETS[5]={"[":"Ã","\\":"Ã","]":"Ã","^":"Ã","`":"Ã©","{":"Ã¤","|":"Ã¶","}":"Ã¥","~":"Ã¼"},t.CHARSETS.R={"#":"Â£","@":"Ã ","[":"Â°","\\":"Ã§","]":"Â§","{":"Ã©","|":"Ã¹","}":"Ã¨","~":"Â¨"},t.CHARSETS.Q={"@":"Ã ","[":"Ã¢","\\":"Ã§","]":"Ãª","^":"Ã®","`":"Ã´","{":"Ã©","|":"Ã¹","}":"Ã¨","~":"Ã»"},t.CHARSETS.K={"@":"Â§","[":"Ã","\\":"Ã","]":"Ã","{":"Ã¤","|":"Ã¶","}":"Ã¼","~":"Ã"},t.CHARSETS.Y={"#":"Â£","@":"Â§","[":"Â°","\\":"Ã§","]":"Ã©","`":"Ã¹","{":"Ã ","|":"Ã²","}":"Ã¨","~":"Ã¬"},t.CHARSETS.E=t.CHARSETS[6]={"@":"Ã","[":"Ã","\\":"Ã","]":"Ã","^":"Ã","`":"Ã¤","{":"Ã¦","|":"Ã¸","}":"Ã¥","~":"Ã¼"},t.CHARSETS.Z={"#":"Â£","@":"Â§","[":"Â¡","\\":"Ã","]":"Â¿","{":"Â°","|":"Ã±","}":"Ã§"},t.CHARSETS.H=t.CHARSETS[7]={"@":"Ã","[":"Ã","\\":"Ã","]":"Ã","^":"Ã","`":"Ã©","{":"Ã¤","|":"Ã¶","}":"Ã¥","~":"Ã¼"},t.CHARSETS["="]={"#":"Ã¹","@":"Ã ","[":"Ã©","\\":"Ã§","]":"Ãª","^":"Ã®",_:"Ã¨","`":"Ã´","{":"Ã¤","|":"Ã¶","}":"Ã¼","~":"Ã»"}},2584:(e,t)=>{var r,i;Object.defineProperty(t,"__esModule",{value:!0}),t.C1=t.C0=void 0,(i=t.C0||(t.C0={})).NUL="\0",i.SOH="",i.STX="",i.ETX="",i.EOT="",i.ENQ="",i.ACK="",i.BEL="",i.BS="\b",i.HT="\t",i.LF="\n",i.VT="\v",i.FF="\f",i.CR="\r",i.SO="",i.SI="",i.DLE="",i.DC1="",i.DC2="",i.DC3="",i.DC4="",i.NAK="",i.SYN="",i.ETB="",i.CAN="",i.EM="",i.SUB="",i.ESC="",i.FS="",i.GS="",i.RS="",i.US="",i.SP=" ",i.DEL="",(r=t.C1||(t.C1={})).PAD="Â",r.HOP="Â",r.BPH="Â",r.NBH="Â",r.IND="Â",r.NEL="Â",r.SSA="Â",r.ESA="Â",r.HTS="Â",r.HTJ="Â",r.VTS="Â",r.PLD="Â",r.PLU="Â",r.RI="Â",r.SS2="Â",r.SS3="Â",r.DCS="Â",r.PU1="Â",r.PU2="Â",r.STS="Â",r.CCH="Â",r.MW="Â",r.SPA="Â",r.EPA="Â",r.SOS="Â",r.SGCI="Â",r.SCI="Â",r.CSI="Â",r.ST="Â",r.OSC="Â",r.PM="Â",r.APC="Â"},7399:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.evaluateKeyboardEvent=void 0;var i=r(2584),n={48:["0",")"],49:["1","!"],50:["2","@"],51:["3","#"],52:["4","$"],53:["5","%"],54:["6","^"],55:["7","&"],56:["8","*"],57:["9","("],186:[";",":"],187:["=","+"],188:[",","<"],189:["-","_"],190:[".",">"],191:["/","?"],192:["`","~"],219:["[","{"],220:["\\","|"],221:["]","}"],222:["'",'"']};t.evaluateKeyboardEvent=function(e,t,r,o){var s={type:0,cancel:!1,key:void 0},a=(e.shiftKey?1:0)|(e.altKey?2:0)|(e.ctrlKey?4:0)|(e.metaKey?8:0);switch(e.keyCode){case 0:"UIKeyInputUpArrow"===e.key?s.key=t?i.C0.ESC+"OA":i.C0.ESC+"[A":"UIKeyInputLeftArrow"===e.key?s.key=t?i.C0.ESC+"OD":i.C0.ESC+"[D":"UIKeyInputRightArrow"===e.key?s.key=t?i.C0.ESC+"OC":i.C0.ESC+"[C":"UIKeyInputDownArrow"===e.key&&(s.key=t?i.C0.ESC+"OB":i.C0.ESC+"[B");break;case 8:if(e.shiftKey){s.key=i.C0.BS;break}if(e.altKey){s.key=i.C0.ESC+i.C0.DEL;break}s.key=i.C0.DEL;break;case 9:if(e.shiftKey){s.key=i.C0.ESC+"[Z";break}s.key=i.C0.HT,s.cancel=!0;break;case 13:s.key=e.altKey?i.C0.ESC+i.C0.CR:i.C0.CR,s.cancel=!0;break;case 27:s.key=i.C0.ESC,e.altKey&&(s.key=i.C0.ESC+i.C0.ESC),s.cancel=!0;break;case 37:if(e.metaKey)break;a?(s.key=i.C0.ESC+"[1;"+(a+1)+"D",s.key===i.C0.ESC+"[1;3D"&&(s.key=i.C0.ESC+(r?"b":"[1;5D"))):s.key=t?i.C0.ESC+"OD":i.C0.ESC+"[D";break;case 39:if(e.metaKey)break;a?(s.key=i.C0.ESC+"[1;"+(a+1)+"C",s.key===i.C0.ESC+"[1;3C"&&(s.key=i.C0.ESC+(r?"f":"[1;5C"))):s.key=t?i.C0.ESC+"OC":i.C0.ESC+"[C";break;case 38:if(e.metaKey)break;a?(s.key=i.C0.ESC+"[1;"+(a+1)+"A",r||s.key!==i.C0.ESC+"[1;3A"||(s.key=i.C0.ESC+"[1;5A")):s.key=t?i.C0.ESC+"OA":i.C0.ESC+"[A";break;case 40:if(e.metaKey)break;a?(s.key=i.C0.ESC+"[1;"+(a+1)+"B",r||s.key!==i.C0.ESC+"[1;3B"||(s.key=i.C0.ESC+"[1;5B")):s.key=t?i.C0.ESC+"OB":i.C0.ESC+"[B";break;case 45:e.shiftKey||e.ctrlKey||(s.key=i.C0.ESC+"[2~");break;case 46:s.key=a?i.C0.ESC+"[3;"+(a+1)+"~":i.C0.ESC+"[3~";break;case 36:s.key=a?i.C0.ESC+"[1;"+(a+1)+"H":t?i.C0.ESC+"OH":i.C0.ESC+"[H";break;case 35:s.key=a?i.C0.ESC+"[1;"+(a+1)+"F":t?i.C0.ESC+"OF":i.C0.ESC+"[F";break;case 33:e.shiftKey?s.type=2:s.key=i.C0.ESC+"[5~";break;case 34:e.shiftKey?s.type=3:s.key=i.C0.ESC+"[6~";break;case 112:s.key=a?i.C0.ESC+"[1;"+(a+1)+"P":i.C0.ESC+"OP";break;case 113:s.key=a?i.C0.ESC+"[1;"+(a+1)+"Q":i.C0.ESC+"OQ";break;case 114:s.key=a?i.C0.ESC+"[1;"+(a+1)+"R":i.C0.ESC+"OR";break;case 115:s.key=a?i.C0.ESC+"[1;"+(a+1)+"S":i.C0.ESC+"OS";break;case 116:s.key=a?i.C0.ESC+"[15;"+(a+1)+"~":i.C0.ESC+"[15~";break;case 117:s.key=a?i.C0.ESC+"[17;"+(a+1)+"~":i.C0.ESC+"[17~";break;case 118:s.key=a?i.C0.ESC+"[18;"+(a+1)+"~":i.C0.ESC+"[18~";break;case 119:s.key=a?i.C0.ESC+"[19;"+(a+1)+"~":i.C0.ESC+"[19~";break;case 120:s.key=a?i.C0.ESC+"[20;"+(a+1)+"~":i.C0.ESC+"[20~";break;case 121:s.key=a?i.C0.ESC+"[21;"+(a+1)+"~":i.C0.ESC+"[21~";break;case 122:s.key=a?i.C0.ESC+"[23;"+(a+1)+"~":i.C0.ESC+"[23~";break;case 123:s.key=a?i.C0.ESC+"[24;"+(a+1)+"~":i.C0.ESC+"[24~";break;default:if(!e.ctrlKey||e.shiftKey||e.altKey||e.metaKey)if(r&&!o||!e.altKey||e.metaKey)!r||e.altKey||e.ctrlKey||e.shiftKey||!e.metaKey?e.key&&!e.ctrlKey&&!e.altKey&&!e.metaKey&&e.keyCode>=48&&1===e.key.length?s.key=e.key:e.key&&e.ctrlKey&&"_"===e.key&&(s.key=i.C0.US):65===e.keyCode&&(s.type=1);else{var c=n[e.keyCode],l=null==c?void 0:c[e.shiftKey?1:0];if(l)s.key=i.C0.ESC+l;else if(e.keyCode>=65&&e.keyCode<=90){var h=e.ctrlKey?e.keyCode-64:e.keyCode+32;s.key=i.C0.ESC+String.fromCharCode(h)}}else e.keyCode>=65&&e.keyCode<=90?s.key=String.fromCharCode(e.keyCode-64):32===e.keyCode?s.key=i.C0.NUL:e.keyCode>=51&&e.keyCode<=55?s.key=String.fromCharCode(e.keyCode-51+27):56===e.keyCode?s.key=i.C0.DEL:219===e.keyCode?s.key=i.C0.ESC:220===e.keyCode?s.key=i.C0.FS:221===e.keyCode&&(s.key=i.C0.GS)}return s}},482:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Utf8ToUtf32=t.StringToUtf32=t.utf32ToString=t.stringFromCodePoint=void 0,t.stringFromCodePoint=function(e){return e>65535?(e-=65536,String.fromCharCode(55296+(e>>10))+String.fromCharCode(e%1024+56320)):String.fromCharCode(e)},t.utf32ToString=function(e,t,r){void 0===t&&(t=0),void 0===r&&(r=e.length);for(var i="",n=t;n<r;++n){var o=e[n];o>65535?(o-=65536,i+=String.fromCharCode(55296+(o>>10))+String.fromCharCode(o%1024+56320)):i+=String.fromCharCode(o)}return i};var r=function(){function e(){this._interim=0}return e.prototype.clear=function(){this._interim=0},e.prototype.decode=function(e,t){var r=e.length;if(!r)return 0;var i=0,n=0;this._interim&&(56320<=(a=e.charCodeAt(n++))&&a<=57343?t[i++]=1024*(this._interim-55296)+a-56320+65536:(t[i++]=this._interim,t[i++]=a),this._interim=0);for(var o=n;o<r;++o){var s=e.charCodeAt(o);if(55296<=s&&s<=56319){if(++o>=r)return this._interim=s,i;var a;56320<=(a=e.charCodeAt(o))&&a<=57343?t[i++]=1024*(s-55296)+a-56320+65536:(t[i++]=s,t[i++]=a)}else 65279!==s&&(t[i++]=s)}return i},e}();t.StringToUtf32=r;var i=function(){function e(){this.interim=new Uint8Array(3)}return e.prototype.clear=function(){this.interim.fill(0)},e.prototype.decode=function(e,t){var r=e.length;if(!r)return 0;var i,n,o,s,a=0,c=0,l=0;if(this.interim[0]){var h=!1,u=this.interim[0];u&=192==(224&u)?31:224==(240&u)?15:7;for(var f=0,_=void 0;(_=63&this.interim[++f])&&f<4;)u<<=6,u|=_;for(var d=192==(224&this.interim[0])?2:224==(240&this.interim[0])?3:4,p=d-f;l<p;){if(l>=r)return 0;if(128!=(192&(_=e[l++]))){l--,h=!0;break}this.interim[f++]=_,u<<=6,u|=63&_}h||(2===d?u<128?l--:t[a++]=u:3===d?u<2048||u>=55296&&u<=57343||65279===u||(t[a++]=u):u<65536||u>1114111||(t[a++]=u)),this.interim.fill(0)}for(var v=r-4,g=l;g<r;){for(;!(!(g<v)||128&(i=e[g])||128&(n=e[g+1])||128&(o=e[g+2])||128&(s=e[g+3]));)t[a++]=i,t[a++]=n,t[a++]=o,t[a++]=s,g+=4;if((i=e[g++])<128)t[a++]=i;else if(192==(224&i)){if(g>=r)return this.interim[0]=i,a;if(128!=(192&(n=e[g++]))){g--;continue}if((c=(31&i)<<6|63&n)<128){g--;continue}t[a++]=c}else if(224==(240&i)){if(g>=r)return this.interim[0]=i,a;if(128!=(192&(n=e[g++]))){g--;continue}if(g>=r)return this.interim[0]=i,this.interim[1]=n,a;if(128!=(192&(o=e[g++]))){g--;continue}if((c=(15&i)<<12|(63&n)<<6|63&o)<2048||c>=55296&&c<=57343||65279===c)continue;t[a++]=c}else if(240==(248&i)){if(g>=r)return this.interim[0]=i,a;if(128!=(192&(n=e[g++]))){g--;continue}if(g>=r)return this.interim[0]=i,this.interim[1]=n,a;if(128!=(192&(o=e[g++]))){g--;continue}if(g>=r)return this.interim[0]=i,this.interim[1]=n,this.interim[2]=o,a;if(128!=(192&(s=e[g++]))){g--;continue}if((c=(7&i)<<18|(63&n)<<12|(63&o)<<6|63&s)<65536||c>1114111)continue;t[a++]=c}}return a},e}();t.Utf8ToUtf32=i},225:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UnicodeV6=void 0;var i,n=r(8273),o=[[768,879],[1155,1158],[1160,1161],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1536,1539],[1552,1557],[1611,1630],[1648,1648],[1750,1764],[1767,1768],[1770,1773],[1807,1807],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2305,2306],[2364,2364],[2369,2376],[2381,2381],[2385,2388],[2402,2403],[2433,2433],[2492,2492],[2497,2500],[2509,2509],[2530,2531],[2561,2562],[2620,2620],[2625,2626],[2631,2632],[2635,2637],[2672,2673],[2689,2690],[2748,2748],[2753,2757],[2759,2760],[2765,2765],[2786,2787],[2817,2817],[2876,2876],[2879,2879],[2881,2883],[2893,2893],[2902,2902],[2946,2946],[3008,3008],[3021,3021],[3134,3136],[3142,3144],[3146,3149],[3157,3158],[3260,3260],[3263,3263],[3270,3270],[3276,3277],[3298,3299],[3393,3395],[3405,3405],[3530,3530],[3538,3540],[3542,3542],[3633,3633],[3636,3642],[3655,3662],[3761,3761],[3764,3769],[3771,3772],[3784,3789],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3953,3966],[3968,3972],[3974,3975],[3984,3991],[3993,4028],[4038,4038],[4141,4144],[4146,4146],[4150,4151],[4153,4153],[4184,4185],[4448,4607],[4959,4959],[5906,5908],[5938,5940],[5970,5971],[6002,6003],[6068,6069],[6071,6077],[6086,6086],[6089,6099],[6109,6109],[6155,6157],[6313,6313],[6432,6434],[6439,6440],[6450,6450],[6457,6459],[6679,6680],[6912,6915],[6964,6964],[6966,6970],[6972,6972],[6978,6978],[7019,7027],[7616,7626],[7678,7679],[8203,8207],[8234,8238],[8288,8291],[8298,8303],[8400,8431],[12330,12335],[12441,12442],[43014,43014],[43019,43019],[43045,43046],[64286,64286],[65024,65039],[65056,65059],[65279,65279],[65529,65531]],s=[[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[119143,119145],[119155,119170],[119173,119179],[119210,119213],[119362,119364],[917505,917505],[917536,917631],[917760,917999]],a=function(){function e(){if(this.version="6",!i){i=new Uint8Array(65536),(0,n.fill)(i,1),i[0]=0,(0,n.fill)(i,0,1,32),(0,n.fill)(i,0,127,160),(0,n.fill)(i,2,4352,4448),i[9001]=2,i[9002]=2,(0,n.fill)(i,2,11904,42192),i[12351]=1,(0,n.fill)(i,2,44032,55204),(0,n.fill)(i,2,63744,64256),(0,n.fill)(i,2,65040,65050),(0,n.fill)(i,2,65072,65136),(0,n.fill)(i,2,65280,65377),(0,n.fill)(i,2,65504,65511);for(var e=0;e<o.length;++e)(0,n.fill)(i,0,o[e][0],o[e][1]+1)}}return e.prototype.wcwidth=function(e){return e<32?0:e<127?1:e<65536?i[e]:function(e,t){var r,i=0,n=t.length-1;if(e<t[0][0]||e>t[n][1])return!1;for(;n>=i;)if(e>t[r=i+n>>1][1])i=r+1;else{if(!(e<t[r][0]))return!0;n=r-1}return!1}(e,s)?0:e>=131072&&e<=196605||e>=196608&&e<=262141?2:1},e}();t.UnicodeV6=a},5981:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WriteBuffer=void 0;var r="undefined"==typeof queueMicrotask?function(e){Promise.resolve().then(e)}:queueMicrotask,i=function(){function e(e){this._action=e,this._writeBuffer=[],this._callbacks=[],this._pendingData=0,this._bufferOffset=0,this._isSyncWriting=!1,this._syncCalls=0}return e.prototype.writeSync=function(e,t){if(void 0!==t&&this._syncCalls>t)this._syncCalls=0;else if(this._pendingData+=e.length,this._writeBuffer.push(e),this._callbacks.push(void 0),this._syncCalls++,!this._isSyncWriting){var r;for(this._isSyncWriting=!0;r=this._writeBuffer.shift();){this._action(r);var i=this._callbacks.shift();i&&i()}this._pendingData=0,this._bufferOffset=2147483647,this._isSyncWriting=!1,this._syncCalls=0}},e.prototype.write=function(e,t){var r=this;if(this._pendingData>5e7)throw new Error("write data discarded, use flow control to avoid losing data");this._writeBuffer.length||(this._bufferOffset=0,setTimeout((function(){return r._innerWrite()}))),this._pendingData+=e.length,this._writeBuffer.push(e),this._callbacks.push(t)},e.prototype._innerWrite=function(e,t){var i=this;void 0===e&&(e=0),void 0===t&&(t=!0);for(var n=e||Date.now();this._writeBuffer.length>this._bufferOffset;){var o=this._writeBuffer[this._bufferOffset],s=this._action(o,t);if(s)return void s.catch((function(e){return r((function(){throw e})),Promise.resolve(!1)})).then((function(e){return Date.now()-n>=12?setTimeout((function(){return i._innerWrite(0,e)})):i._innerWrite(n,e)}));var a=this._callbacks[this._bufferOffset];if(a&&a(),this._bufferOffset++,this._pendingData-=o.length,Date.now()-n>=12)break}this._writeBuffer.length>this._bufferOffset?(this._bufferOffset>50&&(this._writeBuffer=this._writeBuffer.slice(this._bufferOffset),this._callbacks=this._callbacks.slice(this._bufferOffset),this._bufferOffset=0),setTimeout((function(){return i._innerWrite()}))):(this._writeBuffer.length=0,this._callbacks.length=0,this._pendingData=0,this._bufferOffset=0)},e}();t.WriteBuffer=i},5941:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.toRgbString=t.parseColor=void 0;var r=/^([\da-f]{1})\/([\da-f]{1})\/([\da-f]{1})$|^([\da-f]{2})\/([\da-f]{2})\/([\da-f]{2})$|^([\da-f]{3})\/([\da-f]{3})\/([\da-f]{3})$|^([\da-f]{4})\/([\da-f]{4})\/([\da-f]{4})$/,i=/^[\da-f]+$/;function n(e,t){var r=e.toString(16),i=r.length<2?"0"+r:r;switch(t){case 4:return r[0];case 8:return i;case 12:return(i+i).slice(0,3);default:return i+i}}t.parseColor=function(e){if(e){var t=e.toLowerCase();if(0===t.indexOf("rgb:")){t=t.slice(4);var n=r.exec(t);if(n){var o=n[1]?15:n[4]?255:n[7]?4095:65535;return[Math.round(parseInt(n[1]||n[4]||n[7]||n[10],16)/o*255),Math.round(parseInt(n[2]||n[5]||n[8]||n[11],16)/o*255),Math.round(parseInt(n[3]||n[6]||n[9]||n[12],16)/o*255)]}}else if(0===t.indexOf("#")&&(t=t.slice(1),i.exec(t)&&[3,6,9,12].includes(t.length))){for(var s=t.length/3,a=[0,0,0],c=0;c<3;++c){var l=parseInt(t.slice(s*c,s*c+s),16);a[c]=1===s?l<<4:2===s?l:3===s?l>>4:l>>8}return a}}},t.toRgbString=function(e,t){void 0===t&&(t=16);var r=e[0],i=e[1],o=e[2];return"rgb:"+n(r,t)+"/"+n(i,t)+"/"+n(o,t)}},5770:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PAYLOAD_LIMIT=void 0,t.PAYLOAD_LIMIT=1e7},6351:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DcsHandler=t.DcsParser=void 0;var i=r(482),n=r(8742),o=r(5770),s=[],a=function(){function e(){this._handlers=Object.create(null),this._active=s,this._ident=0,this._handlerFb=function(){},this._stack={paused:!1,loopPosition:0,fallThrough:!1}}return e.prototype.dispose=function(){this._handlers=Object.create(null),this._handlerFb=function(){},this._active=s},e.prototype.registerHandler=function(e,t){void 0===this._handlers[e]&&(this._handlers[e]=[]);var r=this._handlers[e];return r.push(t),{dispose:function(){var e=r.indexOf(t);-1!==e&&r.splice(e,1)}}},e.prototype.clearHandler=function(e){this._handlers[e]&&delete this._handlers[e]},e.prototype.setHandlerFallback=function(e){this._handlerFb=e},e.prototype.reset=function(){if(this._active.length)for(var e=this._stack.paused?this._stack.loopPosition-1:this._active.length-1;e>=0;--e)this._active[e].unhook(!1);this._stack.paused=!1,this._active=s,this._ident=0},e.prototype.hook=function(e,t){if(this.reset(),this._ident=e,this._active=this._handlers[e]||s,this._active.length)for(var r=this._active.length-1;r>=0;r--)this._active[r].hook(t);else this._handlerFb(this._ident,"HOOK",t)},e.prototype.put=function(e,t,r){if(this._active.length)for(var n=this._active.length-1;n>=0;n--)this._active[n].put(e,t,r);else this._handlerFb(this._ident,"PUT",(0,i.utf32ToString)(e,t,r))},e.prototype.unhook=function(e,t){if(void 0===t&&(t=!0),this._active.length){var r=!1,i=this._active.length-1,n=!1;if(this._stack.paused&&(i=this._stack.loopPosition-1,r=t,n=this._stack.fallThrough,this._stack.paused=!1),!n&&!1===r){for(;i>=0&&!0!==(r=this._active[i].unhook(e));i--)if(r instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=i,this._stack.fallThrough=!1,r;i--}for(;i>=0;i--)if((r=this._active[i].unhook(!1))instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=i,this._stack.fallThrough=!0,r}else this._handlerFb(this._ident,"UNHOOK",e);this._active=s,this._ident=0},e}();t.DcsParser=a;var c=new n.Params;c.addParam(0);var l=function(){function e(e){this._handler=e,this._data="",this._params=c,this._hitLimit=!1}return e.prototype.hook=function(e){this._params=e.length>1||e.params[0]?e.clone():c,this._data="",this._hitLimit=!1},e.prototype.put=function(e,t,r){this._hitLimit||(this._data+=(0,i.utf32ToString)(e,t,r),this._data.length>o.PAYLOAD_LIMIT&&(this._data="",this._hitLimit=!0))},e.prototype.unhook=function(e){var t=this,r=!1;if(this._hitLimit)r=!1;else if(e&&(r=this._handler(this._data,this._params))instanceof Promise)return r.then((function(e){return t._params=c,t._data="",t._hitLimit=!1,e}));return this._params=c,this._data="",this._hitLimit=!1,r},e}();t.DcsHandler=l},2015:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.EscapeSequenceParser=t.VT500_TRANSITION_TABLE=t.TransitionTable=void 0;var o=r(844),s=r(8273),a=r(8742),c=r(6242),l=r(6351),h=function(){function e(e){this.table=new Uint8Array(e)}return e.prototype.setDefault=function(e,t){(0,s.fill)(this.table,e<<4|t)},e.prototype.add=function(e,t,r,i){this.table[t<<8|e]=r<<4|i},e.prototype.addMany=function(e,t,r,i){for(var n=0;n<e.length;n++)this.table[t<<8|e[n]]=r<<4|i},e}();t.TransitionTable=h;var u=160;t.VT500_TRANSITION_TABLE=function(){var e=new h(4095),t=Array.apply(null,Array(256)).map((function(e,t){return t})),r=function(e,r){return t.slice(e,r)},i=r(32,127),n=r(0,24);n.push(25),n.push.apply(n,r(28,32));var o,s=r(0,14);for(o in e.setDefault(1,0),e.addMany(i,0,2,0),s)e.addMany([24,26,153,154],o,3,0),e.addMany(r(128,144),o,3,0),e.addMany(r(144,152),o,3,0),e.add(156,o,0,0),e.add(27,o,11,1),e.add(157,o,4,8),e.addMany([152,158,159],o,0,7),e.add(155,o,11,3),e.add(144,o,11,9);return e.addMany(n,0,3,0),e.addMany(n,1,3,1),e.add(127,1,0,1),e.addMany(n,8,0,8),e.addMany(n,3,3,3),e.add(127,3,0,3),e.addMany(n,4,3,4),e.add(127,4,0,4),e.addMany(n,6,3,6),e.addMany(n,5,3,5),e.add(127,5,0,5),e.addMany(n,2,3,2),e.add(127,2,0,2),e.add(93,1,4,8),e.addMany(i,8,5,8),e.add(127,8,5,8),e.addMany([156,27,24,26,7],8,6,0),e.addMany(r(28,32),8,0,8),e.addMany([88,94,95],1,0,7),e.addMany(i,7,0,7),e.addMany(n,7,0,7),e.add(156,7,0,0),e.add(127,7,0,7),e.add(91,1,11,3),e.addMany(r(64,127),3,7,0),e.addMany(r(48,60),3,8,4),e.addMany([60,61,62,63],3,9,4),e.addMany(r(48,60),4,8,4),e.addMany(r(64,127),4,7,0),e.addMany([60,61,62,63],4,0,6),e.addMany(r(32,64),6,0,6),e.add(127,6,0,6),e.addMany(r(64,127),6,0,0),e.addMany(r(32,48),3,9,5),e.addMany(r(32,48),5,9,5),e.addMany(r(48,64),5,0,6),e.addMany(r(64,127),5,7,0),e.addMany(r(32,48),4,9,5),e.addMany(r(32,48),1,9,2),e.addMany(r(32,48),2,9,2),e.addMany(r(48,127),2,10,0),e.addMany(r(48,80),1,10,0),e.addMany(r(81,88),1,10,0),e.addMany([89,90,92],1,10,0),e.addMany(r(96,127),1,10,0),e.add(80,1,11,9),e.addMany(n,9,0,9),e.add(127,9,0,9),e.addMany(r(28,32),9,0,9),e.addMany(r(32,48),9,9,12),e.addMany(r(48,60),9,8,10),e.addMany([60,61,62,63],9,9,10),e.addMany(n,11,0,11),e.addMany(r(32,128),11,0,11),e.addMany(r(28,32),11,0,11),e.addMany(n,10,0,10),e.add(127,10,0,10),e.addMany(r(28,32),10,0,10),e.addMany(r(48,60),10,8,10),e.addMany([60,61,62,63],10,0,11),e.addMany(r(32,48),10,9,12),e.addMany(n,12,0,12),e.add(127,12,0,12),e.addMany(r(28,32),12,0,12),e.addMany(r(32,48),12,9,12),e.addMany(r(48,64),12,0,11),e.addMany(r(64,127),12,12,13),e.addMany(r(64,127),10,12,13),e.addMany(r(64,127),9,12,13),e.addMany(n,13,13,13),e.addMany(i,13,13,13),e.add(127,13,0,13),e.addMany([27,156,24,26],13,14,0),e.add(u,0,2,0),e.add(u,8,5,8),e.add(u,6,0,6),e.add(u,11,0,11),e.add(u,13,13,13),e}();var f=function(e){function r(r){void 0===r&&(r=t.VT500_TRANSITION_TABLE);var i=e.call(this)||this;return i._transitions=r,i._parseStack={state:0,handlers:[],handlerPos:0,transition:0,chunkPos:0},i.initialState=0,i.currentState=i.initialState,i._params=new a.Params,i._params.addParam(0),i._collect=0,i.precedingCodepoint=0,i._printHandlerFb=function(e,t,r){},i._executeHandlerFb=function(e){},i._csiHandlerFb=function(e,t){},i._escHandlerFb=function(e){},i._errorHandlerFb=function(e){return e},i._printHandler=i._printHandlerFb,i._executeHandlers=Object.create(null),i._csiHandlers=Object.create(null),i._escHandlers=Object.create(null),i._oscParser=new c.OscParser,i._dcsParser=new l.DcsParser,i._errorHandler=i._errorHandlerFb,i.registerEscHandler({final:"\\"},(function(){return!0})),i}return n(r,e),r.prototype._identifier=function(e,t){void 0===t&&(t=[64,126]);var r=0;if(e.prefix){if(e.prefix.length>1)throw new Error("only one byte as prefix supported");if((r=e.prefix.charCodeAt(0))&&60>r||r>63)throw new Error("prefix must be in range 0x3c .. 0x3f")}if(e.intermediates){if(e.intermediates.length>2)throw new Error("only two bytes as intermediates are supported");for(var i=0;i<e.intermediates.length;++i){var n=e.intermediates.charCodeAt(i);if(32>n||n>47)throw new Error("intermediate must be in range 0x20 .. 0x2f");r<<=8,r|=n}}if(1!==e.final.length)throw new Error("final must be a single byte");var o=e.final.charCodeAt(0);if(t[0]>o||o>t[1])throw new Error("final must be in range "+t[0]+" .. "+t[1]);return(r<<=8)|o},r.prototype.identToString=function(e){for(var t=[];e;)t.push(String.fromCharCode(255&e)),e>>=8;return t.reverse().join("")},r.prototype.dispose=function(){this._csiHandlers=Object.create(null),this._executeHandlers=Object.create(null),this._escHandlers=Object.create(null),this._oscParser.dispose(),this._dcsParser.dispose()},r.prototype.setPrintHandler=function(e){this._printHandler=e},r.prototype.clearPrintHandler=function(){this._printHandler=this._printHandlerFb},r.prototype.registerEscHandler=function(e,t){var r=this._identifier(e,[48,126]);void 0===this._escHandlers[r]&&(this._escHandlers[r]=[]);var i=this._escHandlers[r];return i.push(t),{dispose:function(){var e=i.indexOf(t);-1!==e&&i.splice(e,1)}}},r.prototype.clearEscHandler=function(e){this._escHandlers[this._identifier(e,[48,126])]&&delete this._escHandlers[this._identifier(e,[48,126])]},r.prototype.setEscHandlerFallback=function(e){this._escHandlerFb=e},r.prototype.setExecuteHandler=function(e,t){this._executeHandlers[e.charCodeAt(0)]=t},r.prototype.clearExecuteHandler=function(e){this._executeHandlers[e.charCodeAt(0)]&&delete this._executeHandlers[e.charCodeAt(0)]},r.prototype.setExecuteHandlerFallback=function(e){this._executeHandlerFb=e},r.prototype.registerCsiHandler=function(e,t){var r=this._identifier(e);void 0===this._csiHandlers[r]&&(this._csiHandlers[r]=[]);var i=this._csiHandlers[r];return i.push(t),{dispose:function(){var e=i.indexOf(t);-1!==e&&i.splice(e,1)}}},r.prototype.clearCsiHandler=function(e){this._csiHandlers[this._identifier(e)]&&delete this._csiHandlers[this._identifier(e)]},r.prototype.setCsiHandlerFallback=function(e){this._csiHandlerFb=e},r.prototype.registerDcsHandler=function(e,t){return this._dcsParser.registerHandler(this._identifier(e),t)},r.prototype.clearDcsHandler=function(e){this._dcsParser.clearHandler(this._identifier(e))},r.prototype.setDcsHandlerFallback=function(e){this._dcsParser.setHandlerFallback(e)},r.prototype.registerOscHandler=function(e,t){return this._oscParser.registerHandler(e,t)},r.prototype.clearOscHandler=function(e){this._oscParser.clearHandler(e)},r.prototype.setOscHandlerFallback=function(e){this._oscParser.setHandlerFallback(e)},r.prototype.setErrorHandler=function(e){this._errorHandler=e},r.prototype.clearErrorHandler=function(){this._errorHandler=this._errorHandlerFb},r.prototype.reset=function(){this.currentState=this.initialState,this._oscParser.reset(),this._dcsParser.reset(),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0,0!==this._parseStack.state&&(this._parseStack.state=2,this._parseStack.handlers=[])},r.prototype._preserveStack=function(e,t,r,i,n){this._parseStack.state=e,this._parseStack.handlers=t,this._parseStack.handlerPos=r,this._parseStack.transition=i,this._parseStack.chunkPos=n},r.prototype.parse=function(e,t,r){var i,n=0,o=0,s=0;if(this._parseStack.state)if(2===this._parseStack.state)this._parseStack.state=0,s=this._parseStack.chunkPos+1;else{if(void 0===r||1===this._parseStack.state)throw this._parseStack.state=1,new Error("improper continuation due to previous async handler, giving up parsing");var a=this._parseStack.handlers,c=this._parseStack.handlerPos-1;switch(this._parseStack.state){case 3:if(!1===r&&c>-1)for(;c>=0&&!0!==(i=a[c](this._params));c--)if(i instanceof Promise)return this._parseStack.handlerPos=c,i;this._parseStack.handlers=[];break;case 4:if(!1===r&&c>-1)for(;c>=0&&!0!==(i=a[c]());c--)if(i instanceof Promise)return this._parseStack.handlerPos=c,i;this._parseStack.handlers=[];break;case 6:if(n=e[this._parseStack.chunkPos],i=this._dcsParser.unhook(24!==n&&26!==n,r))return i;27===n&&(this._parseStack.transition|=1),this._params.reset(),this._params.addParam(0),this._collect=0;break;case 5:if(n=e[this._parseStack.chunkPos],i=this._oscParser.end(24!==n&&26!==n,r))return i;27===n&&(this._parseStack.transition|=1),this._params.reset(),this._params.addParam(0),this._collect=0}this._parseStack.state=0,s=this._parseStack.chunkPos+1,this.precedingCodepoint=0,this.currentState=15&this._parseStack.transition}for(var l=s;l<t;++l){switch(n=e[l],(o=this._transitions.table[this.currentState<<8|(n<160?n:u)])>>4){case 2:for(var h=l+1;;++h){if(h>=t||(n=e[h])<32||n>126&&n<u){this._printHandler(e,l,h),l=h-1;break}if(++h>=t||(n=e[h])<32||n>126&&n<u){this._printHandler(e,l,h),l=h-1;break}if(++h>=t||(n=e[h])<32||n>126&&n<u){this._printHandler(e,l,h),l=h-1;break}if(++h>=t||(n=e[h])<32||n>126&&n<u){this._printHandler(e,l,h),l=h-1;break}}break;case 3:this._executeHandlers[n]?this._executeHandlers[n]():this._executeHandlerFb(n),this.precedingCodepoint=0;break;case 0:break;case 1:if(this._errorHandler({position:l,code:n,currentState:this.currentState,collect:this._collect,params:this._params,abort:!1}).abort)return;break;case 7:for(var f=(a=this._csiHandlers[this._collect<<8|n])?a.length-1:-1;f>=0&&!0!==(i=a[f](this._params));f--)if(i instanceof Promise)return this._preserveStack(3,a,f,o,l),i;f<0&&this._csiHandlerFb(this._collect<<8|n,this._params),this.precedingCodepoint=0;break;case 8:do{switch(n){case 59:this._params.addParam(0);break;case 58:this._params.addSubParam(-1);break;default:this._params.addDigit(n-48)}}while(++l<t&&(n=e[l])>47&&n<60);l--;break;case 9:this._collect<<=8,this._collect|=n;break;case 10:for(var _=this._escHandlers[this._collect<<8|n],d=_?_.length-1:-1;d>=0&&!0!==(i=_[d]());d--)if(i instanceof Promise)return this._preserveStack(4,_,d,o,l),i;d<0&&this._escHandlerFb(this._collect<<8|n),this.precedingCodepoint=0;break;case 11:this._params.reset(),this._params.addParam(0),this._collect=0;break;case 12:this._dcsParser.hook(this._collect<<8|n,this._params);break;case 13:for(var p=l+1;;++p)if(p>=t||24===(n=e[p])||26===n||27===n||n>127&&n<u){this._dcsParser.put(e,l,p),l=p-1;break}break;case 14:if(i=this._dcsParser.unhook(24!==n&&26!==n))return this._preserveStack(6,[],0,o,l),i;27===n&&(o|=1),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0;break;case 4:this._oscParser.start();break;case 5:for(var v=l+1;;v++)if(v>=t||(n=e[v])<32||n>127&&n<u){this._oscParser.put(e,l,v),l=v-1;break}break;case 6:if(i=this._oscParser.end(24!==n&&26!==n))return this._preserveStack(5,[],0,o,l),i;27===n&&(o|=1),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0}this.currentState=15&o}},r}(o.Disposable);t.EscapeSequenceParser=f},6242:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OscHandler=t.OscParser=void 0;var i=r(5770),n=r(482),o=[],s=function(){function e(){this._state=0,this._active=o,this._id=-1,this._handlers=Object.create(null),this._handlerFb=function(){},this._stack={paused:!1,loopPosition:0,fallThrough:!1}}return e.prototype.registerHandler=function(e,t){void 0===this._handlers[e]&&(this._handlers[e]=[]);var r=this._handlers[e];return r.push(t),{dispose:function(){var e=r.indexOf(t);-1!==e&&r.splice(e,1)}}},e.prototype.clearHandler=function(e){this._handlers[e]&&delete this._handlers[e]},e.prototype.setHandlerFallback=function(e){this._handlerFb=e},e.prototype.dispose=function(){this._handlers=Object.create(null),this._handlerFb=function(){},this._active=o},e.prototype.reset=function(){if(2===this._state)for(var e=this._stack.paused?this._stack.loopPosition-1:this._active.length-1;e>=0;--e)this._active[e].end(!1);this._stack.paused=!1,this._active=o,this._id=-1,this._state=0},e.prototype._start=function(){if(this._active=this._handlers[this._id]||o,this._active.length)for(var e=this._active.length-1;e>=0;e--)this._active[e].start();else this._handlerFb(this._id,"START")},e.prototype._put=function(e,t,r){if(this._active.length)for(var i=this._active.length-1;i>=0;i--)this._active[i].put(e,t,r);else this._handlerFb(this._id,"PUT",(0,n.utf32ToString)(e,t,r))},e.prototype.start=function(){this.reset(),this._state=1},e.prototype.put=function(e,t,r){if(3!==this._state){if(1===this._state)for(;t<r;){var i=e[t++];if(59===i){this._state=2,this._start();break}if(i<48||57<i)return void(this._state=3);-1===this._id&&(this._id=0),this._id=10*this._id+i-48}2===this._state&&r-t>0&&this._put(e,t,r)}},e.prototype.end=function(e,t){if(void 0===t&&(t=!0),0!==this._state){if(3!==this._state)if(1===this._state&&this._start(),this._active.length){var r=!1,i=this._active.length-1,n=!1;if(this._stack.paused&&(i=this._stack.loopPosition-1,r=t,n=this._stack.fallThrough,this._stack.paused=!1),!n&&!1===r){for(;i>=0&&!0!==(r=this._active[i].end(e));i--)if(r instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=i,this._stack.fallThrough=!1,r;i--}for(;i>=0;i--)if((r=this._active[i].end(!1))instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=i,this._stack.fallThrough=!0,r}else this._handlerFb(this._id,"END",e);this._active=o,this._id=-1,this._state=0}},e}();t.OscParser=s;var a=function(){function e(e){this._handler=e,this._data="",this._hitLimit=!1}return e.prototype.start=function(){this._data="",this._hitLimit=!1},e.prototype.put=function(e,t,r){this._hitLimit||(this._data+=(0,n.utf32ToString)(e,t,r),this._data.length>i.PAYLOAD_LIMIT&&(this._data="",this._hitLimit=!0))},e.prototype.end=function(e){var t=this,r=!1;if(this._hitLimit)r=!1;else if(e&&(r=this._handler(this._data))instanceof Promise)return r.then((function(e){return t._data="",t._hitLimit=!1,e}));return this._data="",this._hitLimit=!1,r},e}();t.OscHandler=a},8742:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Params=void 0;var r=2147483647,i=function(){function e(e,t){if(void 0===e&&(e=32),void 0===t&&(t=32),this.maxLength=e,this.maxSubParamsLength=t,t>256)throw new Error("maxSubParamsLength must not be greater than 256");this.params=new Int32Array(e),this.length=0,this._subParams=new Int32Array(t),this._subParamsLength=0,this._subParamsIdx=new Uint16Array(e),this._rejectDigits=!1,this._rejectSubDigits=!1,this._digitIsSub=!1}return e.fromArray=function(t){var r=new e;if(!t.length)return r;for(var i=Array.isArray(t[0])?1:0;i<t.length;++i){var n=t[i];if(Array.isArray(n))for(var o=0;o<n.length;++o)r.addSubParam(n[o]);else r.addParam(n)}return r},e.prototype.clone=function(){var t=new e(this.maxLength,this.maxSubParamsLength);return t.params.set(this.params),t.length=this.length,t._subParams.set(this._subParams),t._subParamsLength=this._subParamsLength,t._subParamsIdx.set(this._subParamsIdx),t._rejectDigits=this._rejectDigits,t._rejectSubDigits=this._rejectSubDigits,t._digitIsSub=this._digitIsSub,t},e.prototype.toArray=function(){for(var e=[],t=0;t<this.length;++t){e.push(this.params[t]);var r=this._subParamsIdx[t]>>8,i=255&this._subParamsIdx[t];i-r>0&&e.push(Array.prototype.slice.call(this._subParams,r,i))}return e},e.prototype.reset=function(){this.length=0,this._subParamsLength=0,this._rejectDigits=!1,this._rejectSubDigits=!1,this._digitIsSub=!1},e.prototype.addParam=function(e){if(this._digitIsSub=!1,this.length>=this.maxLength)this._rejectDigits=!0;else{if(e<-1)throw new Error("values lesser than -1 are not allowed");this._subParamsIdx[this.length]=this._subParamsLength<<8|this._subParamsLength,this.params[this.length++]=e>r?r:e}},e.prototype.addSubParam=function(e){if(this._digitIsSub=!0,this.length)if(this._rejectDigits||this._subParamsLength>=this.maxSubParamsLength)this._rejectSubDigits=!0;else{if(e<-1)throw new Error("values lesser than -1 are not allowed");this._subParams[this._subParamsLength++]=e>r?r:e,this._subParamsIdx[this.length-1]++}},e.prototype.hasSubParams=function(e){return(255&this._subParamsIdx[e])-(this._subParamsIdx[e]>>8)>0},e.prototype.getSubParams=function(e){var t=this._subParamsIdx[e]>>8,r=255&this._subParamsIdx[e];return r-t>0?this._subParams.subarray(t,r):null},e.prototype.getSubParamsAll=function(){for(var e={},t=0;t<this.length;++t){var r=this._subParamsIdx[t]>>8,i=255&this._subParamsIdx[t];i-r>0&&(e[t]=this._subParams.slice(r,i))}return e},e.prototype.addDigit=function(e){var t;if(!(this._rejectDigits||!(t=this._digitIsSub?this._subParamsLength:this.length)||this._digitIsSub&&this._rejectSubDigits)){var i=this._digitIsSub?this._subParams:this.params,n=i[t-1];i[t-1]=~n?Math.min(10*n+e,r):e}},e}();t.Params=i},5741:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AddonManager=void 0;var r=function(){function e(){this._addons=[]}return e.prototype.dispose=function(){for(var e=this._addons.length-1;e>=0;e--)this._addons[e].instance.dispose()},e.prototype.loadAddon=function(e,t){var r=this,i={instance:t,dispose:t.dispose,isDisposed:!1};this._addons.push(i),t.dispose=function(){return r._wrappedAddonDispose(i)},t.activate(e)},e.prototype._wrappedAddonDispose=function(e){if(!e.isDisposed){for(var t=-1,r=0;r<this._addons.length;r++)if(this._addons[r]===e){t=r;break}if(-1===t)throw new Error("Could not dispose an addon that has not been loaded");e.isDisposed=!0,e.dispose.apply(e.instance),this._addons.splice(t,1)}},e}();t.AddonManager=r},8771:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferApiView=void 0;var i=r(3785),n=r(511),o=function(){function e(e,t){this._buffer=e,this.type=t}return e.prototype.init=function(e){return this._buffer=e,this},Object.defineProperty(e.prototype,"cursorY",{get:function(){return this._buffer.y},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"cursorX",{get:function(){return this._buffer.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"viewportY",{get:function(){return this._buffer.ydisp},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"baseY",{get:function(){return this._buffer.ybase},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this._buffer.lines.length},enumerable:!1,configurable:!0}),e.prototype.getLine=function(e){var t=this._buffer.lines.get(e);if(t)return new i.BufferLineApiView(t)},e.prototype.getNullCell=function(){return new n.CellData},e}();t.BufferApiView=o},3785:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferLineApiView=void 0;var i=r(511),n=function(){function e(e){this._line=e}return Object.defineProperty(e.prototype,"isWrapped",{get:function(){return this._line.isWrapped},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this._line.length},enumerable:!1,configurable:!0}),e.prototype.getCell=function(e,t){if(!(e<0||e>=this._line.length))return t?(this._line.loadCell(e,t),t):this._line.loadCell(e,new i.CellData)},e.prototype.translateToString=function(e,t,r){return this._line.translateToString(e,t,r)},e}();t.BufferLineApiView=n},8285:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferNamespaceApi=void 0;var i=r(8771),n=r(8460),o=function(){function e(e){var t=this;this._core=e,this._onBufferChange=new n.EventEmitter,this._normal=new i.BufferApiView(this._core.buffers.normal,"normal"),this._alternate=new i.BufferApiView(this._core.buffers.alt,"alternate"),this._core.buffers.onBufferActivate((function(){return t._onBufferChange.fire(t.active)}))}return Object.defineProperty(e.prototype,"onBufferChange",{get:function(){return this._onBufferChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"active",{get:function(){if(this._core.buffers.active===this._core.buffers.normal)return this.normal;if(this._core.buffers.active===this._core.buffers.alt)return this.alternate;throw new Error("Active buffer is neither normal nor alternate")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"normal",{get:function(){return this._normal.init(this._core.buffers.normal)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"alternate",{get:function(){return this._alternate.init(this._core.buffers.alt)},enumerable:!1,configurable:!0}),e}();t.BufferNamespaceApi=o},7975:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ParserApi=void 0;var r=function(){function e(e){this._core=e}return e.prototype.registerCsiHandler=function(e,t){return this._core.registerCsiHandler(e,(function(e){return t(e.toArray())}))},e.prototype.addCsiHandler=function(e,t){return this.registerCsiHandler(e,t)},e.prototype.registerDcsHandler=function(e,t){return this._core.registerDcsHandler(e,(function(e,r){return t(e,r.toArray())}))},e.prototype.addDcsHandler=function(e,t){return this.registerDcsHandler(e,t)},e.prototype.registerEscHandler=function(e,t){return this._core.registerEscHandler(e,t)},e.prototype.addEscHandler=function(e,t){return this.registerEscHandler(e,t)},e.prototype.registerOscHandler=function(e,t){return this._core.registerOscHandler(e,t)},e.prototype.addOscHandler=function(e,t){return this.registerOscHandler(e,t)},e}();t.ParserApi=r},7090:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UnicodeApi=void 0;var r=function(){function e(e){this._core=e}return e.prototype.register=function(e){this._core.unicodeService.register(e)},Object.defineProperty(e.prototype,"versions",{get:function(){return this._core.unicodeService.versions},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"activeVersion",{get:function(){return this._core.unicodeService.activeVersion},set:function(e){this._core.unicodeService.activeVersion=e},enumerable:!1,configurable:!0}),e}();t.UnicodeApi=r},744:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.BufferService=t.MINIMUM_ROWS=t.MINIMUM_COLS=void 0;var a=r(2585),c=r(5295),l=r(8460),h=r(844);t.MINIMUM_COLS=2,t.MINIMUM_ROWS=1;var u=function(e){function r(r){var i=e.call(this)||this;return i._optionsService=r,i.isUserScrolling=!1,i._onResize=new l.EventEmitter,i._onScroll=new l.EventEmitter,i.cols=Math.max(r.rawOptions.cols||0,t.MINIMUM_COLS),i.rows=Math.max(r.rawOptions.rows||0,t.MINIMUM_ROWS),i.buffers=new c.BufferSet(r,i),i}return n(r,e),Object.defineProperty(r.prototype,"onResize",{get:function(){return this._onResize.event},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"onScroll",{get:function(){return this._onScroll.event},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"buffer",{get:function(){return this.buffers.active},enumerable:!1,configurable:!0}),r.prototype.dispose=function(){e.prototype.dispose.call(this),this.buffers.dispose()},r.prototype.resize=function(e,t){this.cols=e,this.rows=t,this.buffers.resize(e,t),this.buffers.setupTabStops(this.cols),this._onResize.fire({cols:e,rows:t})},r.prototype.reset=function(){this.buffers.reset(),this.isUserScrolling=!1},r.prototype.scroll=function(e,t){void 0===t&&(t=!1);var r,i=this.buffer;(r=this._cachedBlankLine)&&r.length===this.cols&&r.getFg(0)===e.fg&&r.getBg(0)===e.bg||(r=i.getBlankLine(e,t),this._cachedBlankLine=r),r.isWrapped=t;var n=i.ybase+i.scrollTop,o=i.ybase+i.scrollBottom;if(0===i.scrollTop){var s=i.lines.isFull;o===i.lines.length-1?s?i.lines.recycle().copyFrom(r):i.lines.push(r.clone()):i.lines.splice(o+1,0,r.clone()),s?this.isUserScrolling&&(i.ydisp=Math.max(i.ydisp-1,0)):(i.ybase++,this.isUserScrolling||i.ydisp++)}else{var a=o-n+1;i.lines.shiftElements(n+1,a-1,-1),i.lines.set(o,r.clone())}this.isUserScrolling||(i.ydisp=i.ybase),this._onScroll.fire(i.ydisp)},r.prototype.scrollLines=function(e,t,r){var i=this.buffer;if(e<0){if(0===i.ydisp)return;this.isUserScrolling=!0}else e+i.ydisp>=i.ybase&&(this.isUserScrolling=!1);var n=i.ydisp;i.ydisp=Math.max(Math.min(i.ydisp+e,i.ybase),0),n!==i.ydisp&&(t||this._onScroll.fire(i.ydisp))},r.prototype.scrollPages=function(e){this.scrollLines(e*(this.rows-1))},r.prototype.scrollToTop=function(){this.scrollLines(-this.buffer.ydisp)},r.prototype.scrollToBottom=function(){this.scrollLines(this.buffer.ybase-this.buffer.ydisp)},r.prototype.scrollToLine=function(e){var t=e-this.buffer.ydisp;0!==t&&this.scrollLines(t)},o([s(0,a.IOptionsService)],r)}(h.Disposable);t.BufferService=u},7994:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CharsetService=void 0;var r=function(){function e(){this.glevel=0,this._charsets=[]}return e.prototype.reset=function(){this.charset=void 0,this._charsets=[],this.glevel=0},e.prototype.setgLevel=function(e){this.glevel=e,this.charset=this._charsets[e]},e.prototype.setgCharset=function(e,t){this._charsets[e]=t,this.glevel===e&&(this.charset=t)},e}();t.CharsetService=r},1753:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.CoreMouseService=void 0;var o=r(2585),s=r(8460),a={NONE:{events:0,restrict:function(){return!1}},X10:{events:1,restrict:function(e){return 4!==e.button&&1===e.action&&(e.ctrl=!1,e.alt=!1,e.shift=!1,!0)}},VT200:{events:19,restrict:function(e){return 32!==e.action}},DRAG:{events:23,restrict:function(e){return 32!==e.action||3!==e.button}},ANY:{events:31,restrict:function(e){return!0}}};function c(e,t){var r=(e.ctrl?16:0)|(e.shift?4:0)|(e.alt?8:0);return 4===e.button?(r|=64,r|=e.action):(r|=3&e.button,4&e.button&&(r|=64),8&e.button&&(r|=128),32===e.action?r|=32:0!==e.action||t||(r|=3)),r}var l=String.fromCharCode,h={DEFAULT:function(e){var t=[c(e,!1)+32,e.col+32,e.row+32];return t[0]>255||t[1]>255||t[2]>255?"":"[M"+l(t[0])+l(t[1])+l(t[2])},SGR:function(e){var t=0===e.action&&4!==e.button?"m":"M";return"[<"+c(e,!0)+";"+e.col+";"+e.row+t}},u=function(){function e(e,t){this._bufferService=e,this._coreService=t,this._protocols={},this._encodings={},this._activeProtocol="",this._activeEncoding="",this._onProtocolChange=new s.EventEmitter,this._lastEvent=null;for(var r=0,i=Object.keys(a);r<i.length;r++){var n=i[r];this.addProtocol(n,a[n])}for(var o=0,c=Object.keys(h);o<c.length;o++){var l=c[o];this.addEncoding(l,h[l])}this.reset()}return e.prototype.addProtocol=function(e,t){this._protocols[e]=t},e.prototype.addEncoding=function(e,t){this._encodings[e]=t},Object.defineProperty(e.prototype,"activeProtocol",{get:function(){return this._activeProtocol},set:function(e){if(!this._protocols[e])throw new Error('unknown protocol "'+e+'"');this._activeProtocol=e,this._onProtocolChange.fire(this._protocols[e].events)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"areMouseEventsActive",{get:function(){return 0!==this._protocols[this._activeProtocol].events},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"activeEncoding",{get:function(){return this._activeEncoding},set:function(e){if(!this._encodings[e])throw new Error('unknown encoding "'+e+'"');this._activeEncoding=e},enumerable:!1,configurable:!0}),e.prototype.reset=function(){this.activeProtocol="NONE",this.activeEncoding="DEFAULT",this._lastEvent=null},Object.defineProperty(e.prototype,"onProtocolChange",{get:function(){return this._onProtocolChange.event},enumerable:!1,configurable:!0}),e.prototype.triggerMouseEvent=function(e){if(e.col<0||e.col>=this._bufferService.cols||e.row<0||e.row>=this._bufferService.rows)return!1;if(4===e.button&&32===e.action)return!1;if(3===e.button&&32!==e.action)return!1;if(4!==e.button&&(2===e.action||3===e.action))return!1;if(e.col++,e.row++,32===e.action&&this._lastEvent&&this._compareEvents(this._lastEvent,e))return!1;if(!this._protocols[this._activeProtocol].restrict(e))return!1;var t=this._encodings[this._activeEncoding](e);return t&&("DEFAULT"===this._activeEncoding?this._coreService.triggerBinaryEvent(t):this._coreService.triggerDataEvent(t,!0)),this._lastEvent=e,!0},e.prototype.explainEvents=function(e){return{down:!!(1&e),up:!!(2&e),drag:!!(4&e),move:!!(8&e),wheel:!!(16&e)}},e.prototype._compareEvents=function(e,t){return e.col===t.col&&e.row===t.row&&e.button===t.button&&e.action===t.action&&e.ctrl===t.ctrl&&e.alt===t.alt&&e.shift===t.shift},i([n(0,o.IBufferService),n(1,o.ICoreService)],e)}();t.CoreMouseService=u},6975:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.CoreService=void 0;var a=r(2585),c=r(8460),l=r(1439),h=r(844),u=Object.freeze({insertMode:!1}),f=Object.freeze({applicationCursorKeys:!1,applicationKeypad:!1,bracketedPasteMode:!1,origin:!1,reverseWraparound:!1,sendFocus:!1,wraparound:!0}),_=function(e){function t(t,r,i,n){var o=e.call(this)||this;return o._bufferService=r,o._logService=i,o._optionsService=n,o.isCursorInitialized=!1,o.isCursorHidden=!1,o._onData=o.register(new c.EventEmitter),o._onUserInput=o.register(new c.EventEmitter),o._onBinary=o.register(new c.EventEmitter),o._scrollToBottom=t,o.register({dispose:function(){return o._scrollToBottom=void 0}}),o.modes=(0,l.clone)(u),o.decPrivateModes=(0,l.clone)(f),o}return n(t,e),Object.defineProperty(t.prototype,"onData",{get:function(){return this._onData.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onUserInput",{get:function(){return this._onUserInput.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onBinary",{get:function(){return this._onBinary.event},enumerable:!1,configurable:!0}),t.prototype.reset=function(){this.modes=(0,l.clone)(u),this.decPrivateModes=(0,l.clone)(f)},t.prototype.triggerDataEvent=function(e,t){if(void 0===t&&(t=!1),!this._optionsService.rawOptions.disableStdin){var r=this._bufferService.buffer;r.ybase!==r.ydisp&&this._scrollToBottom(),t&&this._onUserInput.fire(),this._logService.debug('sending data "'+e+'"',(function(){return e.split("").map((function(e){return e.charCodeAt(0)}))})),this._onData.fire(e)}},t.prototype.triggerBinaryEvent=function(e){this._optionsService.rawOptions.disableStdin||(this._logService.debug('sending binary "'+e+'"',(function(){return e.split("").map((function(e){return e.charCodeAt(0)}))})),this._onBinary.fire(e))},o([s(1,a.IBufferService),s(2,a.ILogService),s(3,a.IOptionsService)],t)}(h.Disposable);t.CoreService=_},3730:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.DirtyRowService=void 0;var o=r(2585),s=function(){function e(e){this._bufferService=e,this.clearRange()}return Object.defineProperty(e.prototype,"start",{get:function(){return this._start},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"end",{get:function(){return this._end},enumerable:!1,configurable:!0}),e.prototype.clearRange=function(){this._start=this._bufferService.buffer.y,this._end=this._bufferService.buffer.y},e.prototype.markDirty=function(e){e<this._start?this._start=e:e>this._end&&(this._end=e)},e.prototype.markRangeDirty=function(e,t){if(e>t){var r=e;e=t,t=r}e<this._start&&(this._start=e),t>this._end&&(this._end=t)},e.prototype.markAllDirty=function(){this.markRangeDirty(0,this._bufferService.rows-1)},i([n(0,o.IBufferService)],e)}();t.DirtyRowService=s},4348:function(e,t,r){var i=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var i,n=0,o=t.length;n<o;n++)!i&&n in t||(i||(i=Array.prototype.slice.call(t,0,n)),i[n]=t[n]);return e.concat(i||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.InstantiationService=t.ServiceCollection=void 0;var n=r(2585),o=r(8343),s=function(){function e(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._entries=new Map;for(var r=0,i=e;r<i.length;r++){var n=i[r],o=n[0],s=n[1];this.set(o,s)}}return e.prototype.set=function(e,t){var r=this._entries.get(e);return this._entries.set(e,t),r},e.prototype.forEach=function(e){this._entries.forEach((function(t,r){return e(r,t)}))},e.prototype.has=function(e){return this._entries.has(e)},e.prototype.get=function(e){return this._entries.get(e)},e}();t.ServiceCollection=s;var a=function(){function e(){this._services=new s,this._services.set(n.IInstantiationService,this)}return e.prototype.setService=function(e,t){this._services.set(e,t)},e.prototype.getService=function(e){return this._services.get(e)},e.prototype.createInstance=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];for(var n=(0,o.getServiceDependencies)(e).sort((function(e,t){return e.index-t.index})),s=[],a=0,c=n;a<c.length;a++){var l=c[a],h=this._services.get(l.id);if(!h)throw new Error("[createInstance] "+e.name+" depends on UNKNOWN service "+l.id+".");s.push(h)}var u=n.length>0?n[0].index:t.length;if(t.length!==u)throw new Error("[createInstance] First service dependency of "+e.name+" at position "+(u+1)+" conflicts with "+t.length+" static arguments");return new(e.bind.apply(e,i([void 0],i(i([],t,!0),s,!0),!1)))},e}();t.InstantiationService=a},7866:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}},o=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var i,n=0,o=t.length;n<o;n++)!i&&n in t||(i||(i=Array.prototype.slice.call(t,0,n)),i[n]=t[n]);return e.concat(i||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.LogService=void 0;var s=r(2585),a={debug:s.LogLevelEnum.DEBUG,info:s.LogLevelEnum.INFO,warn:s.LogLevelEnum.WARN,error:s.LogLevelEnum.ERROR,off:s.LogLevelEnum.OFF},c=function(){function e(e){var t=this;this._optionsService=e,this.logLevel=s.LogLevelEnum.OFF,this._updateLogLevel(),this._optionsService.onOptionChange((function(e){"logLevel"===e&&t._updateLogLevel()}))}return e.prototype._updateLogLevel=function(){this.logLevel=a[this._optionsService.rawOptions.logLevel]},e.prototype._evalLazyOptionalParams=function(e){for(var t=0;t<e.length;t++)"function"==typeof e[t]&&(e[t]=e[t]())},e.prototype._log=function(e,t,r){this._evalLazyOptionalParams(r),e.call.apply(e,o([console,"xterm.js: "+t],r,!1))},e.prototype.debug=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.logLevel<=s.LogLevelEnum.DEBUG&&this._log(console.log,e,t)},e.prototype.info=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.logLevel<=s.LogLevelEnum.INFO&&this._log(console.info,e,t)},e.prototype.warn=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.logLevel<=s.LogLevelEnum.WARN&&this._log(console.warn,e,t)},e.prototype.error=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.logLevel<=s.LogLevelEnum.ERROR&&this._log(console.error,e,t)},i([n(0,s.IOptionsService)],e)}();t.LogService=c},7302:function(e,t,r){var i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,r=1,i=arguments.length;r<i;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},i.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.OptionsService=t.DEFAULT_OPTIONS=t.DEFAULT_BELL_SOUND=void 0;var n=r(8460),o=r(6114);t.DEFAULT_BELL_SOUND="data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjMyLjEwNAAAAAAAAAAAAAAA//tQxAADB8AhSmxhIIEVCSiJrDCQBTcu3UrAIwUdkRgQbFAZC1CQEwTJ9mjRvBA4UOLD8nKVOWfh+UlK3z/177OXrfOdKl7pyn3Xf//WreyTRUoAWgBgkOAGbZHBgG1OF6zM82DWbZaUmMBptgQhGjsyYqc9ae9XFz280948NMBWInljyzsNRFLPWdnZGWrddDsjK1unuSrVN9jJsK8KuQtQCtMBjCEtImISdNKJOopIpBFpNSMbIHCSRpRR5iakjTiyzLhchUUBwCgyKiweBv/7UsQbg8isVNoMPMjAAAA0gAAABEVFGmgqK////9bP/6XCykxBTUUzLjEwMKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq",t.DEFAULT_OPTIONS={cols:80,rows:24,cursorBlink:!1,cursorStyle:"block",cursorWidth:1,customGlyphs:!0,bellSound:t.DEFAULT_BELL_SOUND,bellStyle:"none",drawBoldTextInBrightColors:!0,fastScrollModifier:"alt",fastScrollSensitivity:5,fontFamily:"courier-new, courier, monospace",fontSize:15,fontWeight:"normal",fontWeightBold:"bold",lineHeight:1,linkTooltipHoverDuration:500,letterSpacing:0,logLevel:"info",scrollback:1e3,scrollSensitivity:1,screenReaderMode:!1,macOptionIsMeta:!1,macOptionClickForcesSelection:!1,minimumContrastRatio:1,disableStdin:!1,allowProposedApi:!0,allowTransparency:!1,tabStopWidth:8,theme:{},rightClickSelectsWord:o.isMac,rendererType:"canvas",windowOptions:{},windowsMode:!1,wordSeparator:" ()[]{}',\"`",altClickMovesCursor:!0,convertEol:!1,termName:"xterm",cancelEvents:!1};var s=["normal","bold","100","200","300","400","500","600","700","800","900"],a=function(){function e(e){this._onOptionChange=new n.EventEmitter;var r=i({},t.DEFAULT_OPTIONS);for(var o in e)if(o in r)try{var s=e[o];r[o]=this._sanitizeAndValidateOption(o,s)}catch(e){console.error(e)}this.rawOptions=r,this.options=i({},r),this._setupOptions()}return Object.defineProperty(e.prototype,"onOptionChange",{get:function(){return this._onOptionChange.event},enumerable:!1,configurable:!0}),e.prototype._setupOptions=function(){var e=this,r=function(r){if(!(r in t.DEFAULT_OPTIONS))throw new Error('No option with key "'+r+'"');return e.rawOptions[r]},i=function(r,i){if(!(r in t.DEFAULT_OPTIONS))throw new Error('No option with key "'+r+'"');i=e._sanitizeAndValidateOption(r,i),e.rawOptions[r]!==i&&(e.rawOptions[r]=i,e._onOptionChange.fire(r))};for(var n in this.rawOptions){var o={get:r.bind(this,n),set:i.bind(this,n)};Object.defineProperty(this.options,n,o)}},e.prototype.setOption=function(e,t){this.options[e]=t},e.prototype._sanitizeAndValidateOption=function(e,r){switch(e){case"bellStyle":case"cursorStyle":case"rendererType":case"wordSeparator":r||(r=t.DEFAULT_OPTIONS[e]);break;case"fontWeight":case"fontWeightBold":if("number"==typeof r&&1<=r&&r<=1e3)break;r=s.includes(r)?r:t.DEFAULT_OPTIONS[e];break;case"cursorWidth":r=Math.floor(r);case"lineHeight":case"tabStopWidth":if(r<1)throw new Error(e+" cannot be less than 1, value: "+r);break;case"minimumContrastRatio":r=Math.max(1,Math.min(21,Math.round(10*r)/10));break;case"scrollback":if((r=Math.min(r,4294967295))<0)throw new Error(e+" cannot be less than 0, value: "+r);break;case"fastScrollSensitivity":case"scrollSensitivity":if(r<=0)throw new Error(e+" cannot be less than or equal to 0, value: "+r);case"rows":case"cols":if(!r&&0!==r)throw new Error(e+" must be numeric, value: "+r)}return r},e.prototype.getOption=function(e){return this.options[e]},e}();t.OptionsService=a},8343:(e,t)=>{function r(e,t,r){t.di$target===t?t.di$dependencies.push({id:e,index:r}):(t.di$dependencies=[{id:e,index:r}],t.di$target=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.createDecorator=t.getServiceDependencies=t.serviceRegistry=void 0,t.serviceRegistry=new Map,t.getServiceDependencies=function(e){return e.di$dependencies||[]},t.createDecorator=function(e){if(t.serviceRegistry.has(e))return t.serviceRegistry.get(e);var i=function(e,t,n){if(3!==arguments.length)throw new Error("@IServiceName-decorator can only be used to decorate a parameter");r(i,e,n)};return i.toString=function(){return e},t.serviceRegistry.set(e,i),i}},2585:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.IUnicodeService=t.IOptionsService=t.ILogService=t.LogLevelEnum=t.IInstantiationService=t.IDirtyRowService=t.ICharsetService=t.ICoreService=t.ICoreMouseService=t.IBufferService=void 0;var i,n=r(8343);t.IBufferService=(0,n.createDecorator)("BufferService"),t.ICoreMouseService=(0,n.createDecorator)("CoreMouseService"),t.ICoreService=(0,n.createDecorator)("CoreService"),t.ICharsetService=(0,n.createDecorator)("CharsetService"),t.IDirtyRowService=(0,n.createDecorator)("DirtyRowService"),t.IInstantiationService=(0,n.createDecorator)("InstantiationService"),(i=t.LogLevelEnum||(t.LogLevelEnum={}))[i.DEBUG=0]="DEBUG",i[i.INFO=1]="INFO",i[i.WARN=2]="WARN",i[i.ERROR=3]="ERROR",i[i.OFF=4]="OFF",t.ILogService=(0,n.createDecorator)("LogService"),t.IOptionsService=(0,n.createDecorator)("OptionsService"),t.IUnicodeService=(0,n.createDecorator)("UnicodeService")},1480:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UnicodeService=void 0;var i=r(8460),n=r(225),o=function(){function e(){this._providers=Object.create(null),this._active="",this._onChange=new i.EventEmitter;var e=new n.UnicodeV6;this.register(e),this._active=e.version,this._activeProvider=e}return Object.defineProperty(e.prototype,"onChange",{get:function(){return this._onChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"versions",{get:function(){return Object.keys(this._providers)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"activeVersion",{get:function(){return this._active},set:function(e){if(!this._providers[e])throw new Error('unknown Unicode version "'+e+'"');this._active=e,this._activeProvider=this._providers[e],this._onChange.fire(e)},enumerable:!1,configurable:!0}),e.prototype.register=function(e){this._providers[e.version]=e},e.prototype.wcwidth=function(e){return this._activeProvider.wcwidth(e)},e.prototype.getStringCellWidth=function(e){for(var t=0,r=e.length,i=0;i<r;++i){var n=e.charCodeAt(i);if(55296<=n&&n<=56319){if(++i>=r)return t+this.wcwidth(n);var o=e.charCodeAt(i);56320<=o&&o<=57343?n=1024*(n-55296)+o-56320+65536:t+=this.wcwidth(o)}t+=this.wcwidth(n)}return t},e}();t.UnicodeService=o}},t={};return function r(i){var n=t[i];if(void 0!==n)return n.exports;var o=t[i]={exports:{}};return e[i].call(o.exports,o,o.exports,r),o.exports}(4389)})()}));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfeHRlcm1fbGliX3h0ZXJtX2pzLmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztDQUFBLFNBQTJDQSxFQUFNQyxHQUNoRCxHQUFzQixJQUF5QkUsQ0FDOUNBLE9BQU9ELFFBQVVELFNBQ2IsYUFJa0VNLENBUHhFLENBU0dDLE1BQU0sV0FDVCxtbUJDTEEsY0FHQSxVQUNBLFVBQ0EsVUFDQSxTQUNBLFVBRUEsVUFTQSxjQTBCRSxXQUNtQkMsRUFDQUMsR0FGbkIsTUFJRSxjQUFPLEtBSFUsRUFBQUQsVUFBQUEsRUFDQSxFQUFBQyxlQUFBQSxFQXZCWCxFQUFBQyxxQkFBK0IsRUFpQi9CLEVBQUFDLGdCQUE0QixHQUU1QixFQUFBQyxpQkFBMkIsR0FPakMsRUFBS0MsdUJBQXlCQyxTQUFTQyxjQUFjLE9BQ3JELEVBQUtGLHVCQUF1QkcsVUFBVUMsSUFBSSx1QkFDMUMsRUFBS0osdUJBQXVCSyxTQUFXLEVBRXZDLEVBQUtDLGNBQWdCTCxTQUFTQyxjQUFjLE9BQzVDLEVBQUtJLGNBQWNDLGFBQWEsT0FBUSxRQUN4QyxFQUFLRCxjQUFjSCxVQUFVQyxJQUFJLDRCQUNqQyxFQUFLSSxhQUFlLEdBQ3BCLElBQUssSUFBSWYsRUFBSSxFQUFHQSxFQUFJLEVBQUtFLFVBQVVjLEtBQU1oQixJQUN2QyxFQUFLZSxhQUFhZixHQUFLLEVBQUtpQiwrQkFDNUIsRUFBS0osY0FBY0ssWUFBWSxFQUFLSCxhQUFhZixJQW1CbkQsR0FoQkEsRUFBS21CLDBCQUE0QixTQUFBQyxHQUFLLFNBQUtDLGlCQUFpQkQsRUFBRyxJQUMvRCxFQUFLRSw2QkFBK0IsU0FBQUYsR0FBSyxTQUFLQyxpQkFBaUJELEVBQUcsSUFDbEUsRUFBS0wsYUFBYSxHQUFHUSxpQkFBaUIsUUFBUyxFQUFLSiwyQkFDcEQsRUFBS0osYUFBYSxFQUFLQSxhQUFhUyxPQUFTLEdBQUdELGlCQUFpQixRQUFTLEVBQUtELDhCQUUvRSxFQUFLRyx5QkFDTCxFQUFLbEIsdUJBQXVC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QUFLLENBQUMsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsSUFDN0IsSUFBSyxDQUFDLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLElBQzdCLElBQUssQ0FBQyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxJQUM3QixJQUFLLENBQUMsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsSUFDN0IsSUFBSyxDQUFDLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLElBQzdCLElBQUssQ0FBQyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxJQUM3QixJQUFLLENBQUMsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsSUFDN0IsSUFBSyxDQUFDLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLElBQzdCLElBQUssQ0FBQyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxJQUM3QixJQUFLLENBQUMsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsSUFDN0IsSUFBSyxDQUFDLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLElBQzdCLElBQUssQ0FBQyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxJQUM3QixJQUFLLENBQUMsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsSUFHN0IsSUFBSyxDQUFDLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLElBQzdCLElBQUssQ0FBQyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxJQUc3QixJQUFLLENBQUMsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsSUFDN0IsSUFBSyxDQUFDLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLElBQzdCLElBQUssQ0FBQyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxJQUM3QixJQUFLLENBQUMsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsR0FBSyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxJQUN6RCxJQUFLLENBQUMsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsR0FBSyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxJQUN6RCxJQUFLLENBQUMsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsR0FBSyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxJQUN6RCxJQUFLLENBQUMsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsR0FBSyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxJQUN6RCxJQUFLLENBQUMsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsSUFDN0IsSUFBSyxDQUFDLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLEdBQUssQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsSUFDekQsSUFBSyxDQUFDLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLEdBQUssQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsSUFHekQsS0FBYSxDQUFDLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLElBQ3JDLEtBQWEsQ0FBQyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxJQUNyQyxLQUFhLENBQUMsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsSUFDckMsS0FBYSxDQUFDLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLElBQ3JDLEtBQWEsQ0FBQyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxJQUNyQyxLQUFhLENBQUMsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsSUFHckMsS0FBYSxDQUFDLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLElBQ3JDLEtBQWEsQ0FBQyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxJQUNyQyxLQUFhLENBQUMsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsSUFDckMsS0FBYSxDQUFDLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLElBQ3JDLEtBQWEsQ0FBQyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxJQUNyQyxLQUFhLENBQUMsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsSUFHckMsS0FBYSxDQUFDLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLEdBQUssQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsSUFFakUsS0FBYSxDQUFDLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLEdBQUssQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsSUFFakUsS0FBYSxDQUFDLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLEdBQUssQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsSUFFakUsS0FBYSxDQUFDLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLEdBQUssQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsSUFFakUsS0FBYSxDQUFDLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLEdBQUssQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsSUFFakUsS0FBYSxDQUFDLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLEdBQUssQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsR0FBSyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxHQUFLLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLElBR3pILEtBQWEsQ0FBQyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxJQUVyQyxLQUFhLENBQUMsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsSUFFckMsS0FBYSxDQUFDLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLElBRXJDLEtBQWEsQ0FBQyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxJQUVyQyxLQUFhLENBQUMsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsSUFHckMsS0FBYSxDQUFDLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLElBRXJDLEtBQWEsQ0FBQyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxJQUVyQyxLQUFhLENBQUMsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsSUFFckMsS0FBYSxDQUFDLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLElBRXJDLEtBQWEsQ0FBQyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxJQUdyQyxLQUFhLENBQ1gsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsR0FBSyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxHQUNuRCxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxHQUFLLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLEdBQ25ELENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLEdBQUssQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsR0FDbkQsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsR0FBSyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxJQUdyRCxLQUFhLENBQ1gsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsR0FBSyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxHQUNuRCxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxHQUFLLENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLEdBQ25ELENBQUV6dEIsRUFBRyxFQUFHQyxFQUFHLEVBQUd1dEIsRUFBRyxFQUFHQyxFQUFHLEdBQUssQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsR0FDbkQsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsR0FBSyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxJQUdyRCxLQUFhLENBQUMsQ0FBRXp0QixFQUFHLEVBQUdDLEVBQUcsRUFBR3V0QixFQUFHLEVBQUdDLEVBQUcsR0FBSyxDQUFFenRCLEVBQUcsRUFBR0MsRUFBRyxFQUFHdXRCLEVBQUcsRUFBR0MsRUFBRyxLQVNuRSxJQUFNQyxHQUFnRixDQUVwRixJQUFLLENBQ0gsQ0FBQyxFQUFHLEVBQUcsRUFBRyxHQUNWLENBQUMsRUFBRyxFQUFHLEVBQUcsR0FDVixDQUFDLEVBQUcsRUFBRyxFQUFHLEdBQ1YsQ0FBQyxFQUFHLEVBQUcsRUFBRyxJQUVaLElBQUssQ0FDSCxDQUFDLEVBQUcsR0FDSixDQUFDLEVBQUcsR0FDSixDQUFDLEVBQUcsR0FDSixDQUFDLEVBQUcsSUFFTixJQUFLLENBQ0gsQ0FBQyxFQUFHLEdBQ0osQ0FBQyxFQUFHLEdBQ0osQ0FBQyxFQUFHLEdBQ0osQ0FBQyxFQUFHLEtBMENLLEVBQUFDLHNCQUFzSSxDQUVqSixLQUFHLEtBQUksbUJBQW9DLEdBQzNDLEtBQUcsS0FBSSxtQkFBb0MsR0FDM0MsS0FBRyxLQUFJLG1CQUFvQyxHQUMzQyxLQUFHLEtBQUksbUJBQW9DLEdBQzNDLEtBQUcsS0FBSSwyQkFBc0MsR0FDN0MsS0FBRyxLQUFJLDJCQUFzQyxHQUM3QyxLQUFHLEtBQUksMEJBQXFDLEdBQzVDLEtBQUcsS0FBSSwwQkFBcUMsR0FDNUMsS0FBRyxLQUFJLDBCQUFtQyxHQUMxQyxLQUFHLEtBQUksMEJBQW1DLEdBQzFDLEtBQUcsS0FBSSwwQkFBa0MsR0FDekMsS0FBRyxLQUFJLDBCQUFrQyxHQUN6QyxLQUFHLEtBQUksZ0NBQThCLEdBQ3JDLEtBQUcsS0FBSSxnQ0FBOEIsR0FDckMsS0FBRyxLQUFJLGdDQUE2QixHQUNwQyxLQUFHLEtBQUksZ0NBQTZCLEdBQ3BDLEtBQUcsS0FBSSxnQ0FBK0IsR0FDdEMsS0FBRyxLQUFJLGdDQUErQixHQUN0QyxLQUFHLEtBQUksZ0NBQTRCLEdBQ25DLEtBQUcsS0FBSSxnQ0FBNEIsR0FDbkMsS0FBRyxLQUFJLCtCQUE0QixHQUNuQyxLQUFHLEtBQUksK0JBQTRCLEdBQ25DLEtBQUcsS0FBSSxvQkFBcUMsR0FDNUMsS0FBRyxLQUFJLG9CQUFxQyxHQUM1QyxLQUFHLEtBQUksb0JBQW9DLEdBQzNDLEtBQUcsS0FBSSxvQkFBb0MsR0FDM0MsS0FBRyxLQUFJLG9CQUFzQyxHQUM3QyxLQUFHLEtBQUksb0JBQXNDLEdBQzdDLEtBQUcsS0FBSSxvQkFBdUMsR0FDOUMsS0FBRyxLQUFJLG9CQUF1QyxHQUc5QyxLQUFHLEtBQUksS0FBZ0IsU0FBQ0MsRUFBSUMsR0FBTyxhQUFNLEdBQUtBLEdBQUUsUUFBTyxHQUFLQSxHQUFFLFFBQU8sR0FBS0EsR0FBRSxRQUFPLEdBQUtBLElBQUksR0FDNUYsS0FBRyxLQUFJLEtBQWdCLFNBQUNELEVBQUlDLEdBQU8sV0FBSSxHQUFLRCxHQUFFLFFBQU8sR0FBS0EsR0FBRSxRQUFPLEdBQUtBLEdBQUUsUUFBTyxHQUFLQSxHQUFFLE1BQUksR0FDNUYsS0FBRyxLQUFJLEtBQWdCLFNBQUNBLEVBQUlDLEdBQU8sb0JBQWEsR0FBS0EsR0FBRSxRQUFPLEdBQUtBLEdBQUUsU0FBUSxHQUFLQSxHQUFFLFFBQU8sR0FBS0EsSUFBSSxHQUNwRyxLQUFHLEtBQUksS0FBZ0IsU0FBQ0QsRUFBSUMsR0FBTyxXQUFJLEdBQUtELEdBQUUsUUFBTyxHQUFLQSxHQUFFLGVBQWMsR0FBS0EsR0FBRSxTQUFRLEdBQUtBLEdBQUUsTUFBSSxHQUNwRyxLQUFHLEtBQUksS0FBZ0IsU0FBQ0EsRUFBSUMsR0FBTyxhQUFNLEdBQUtBLEdBQUUsTUFBSyxHQUFLRCxHQUFFLEtBQUksR0FBS0MsR0FBRSxNQUFLLEdBQUtELEdBQUUsVUFBUyxHQUFLQyxHQUFFLE1BQUssR0FBS0QsR0FBRSxLQUFJLEdBQUtDLEdBQUUsTUFBSyxHQUFLRCxHQUFFLE1BQUksR0FDMUksS0FBRyxLQUFJLEtBQWdCLFNBQUNBLEVBQUlDLEdBQU8sYUFBTSxHQUFLQSxHQUFFLFNBQVEsR0FBS0EsR0FBRSxjQUFhLEdBQUtBLEdBQUUsU0FBUSxHQUFLQSxJQUFJLEdBQ3BHLEtBQUcsS0FBSSxLQUFnQixTQUFDRCxFQUFJQyxHQUFPLFdBQUksR0FBS0QsR0FBRSxRQUFPLEdBQUtBLEdBQUUsZUFBYyxHQUFLQSxHQUFFLFNBQVEsR0FBS0EsR0FBRSxNQUFJLEdBQ3BHLEtBQUcsS0FBSSxLQUFnQixTQUFDQSxFQUFJQyxHQUFPLGFBQU0sR0FBS0EsR0FBRSxNQUFLLEdBQUtELEdBQUUsS0FBSSxHQUFLQyxHQUFFLE1BQUssR0FBS0QsR0FBRSxVQUFTLEdBQUtDLEdBQUUsTUFBSyxHQUFLRCxHQUFFLEtBQUksR0FBS0MsR0FBRSxNQUFLLEdBQUtELEdBQUUsTUFBSSxHQUMxSSxLQUFHLEtBQUksS0FBZ0IsU0FBQ0EsRUFBSUMsR0FBTyxvQkFBYSxHQUFLQSxHQUFFLFFBQU8sR0FBS0EsR0FBRSxTQUFRLEdBQUtBLEdBQUUsUUFBTyxHQUFLQSxJQUFJLEdBQ3BHLEtBQUcsS0FBSSxLQUFnQixTQUFDRCxFQUFJQyxHQUFPLGlCQUFVLEdBQUtELEdBQUUsU0FBUSxHQUFLQSxHQUFFLFFBQU8sR0FBS0EsR0FBRSxTQUFRLEdBQUtBLEdBQUUsTUFBSSxHQUNwRyxLQUFHLEtBQUksS0FBZ0IsU0FBQ0EsRUFBSUMsR0FBTyxhQUFNLEdBQUtBLEdBQUUsTUFBSyxHQUFLRCxHQUFFLEtBQUksR0FBS0MsR0FBRSxNQUFLLEdBQUtELEdBQUUsVUFBUyxHQUFLQyxHQUFFLE1BQUssR0FBS0QsR0FBRSxLQUFJLEdBQUtDLEdBQUUsTUFBSyxHQUFLRCxHQUFFLE1BQUksR0FDMUksS0FBRyxLQUFJLEtBQWdCLFNBQUNBLEVBQUlDLEdBQU8sYUFBTSxHQUFLQSxHQUFFLFNBQVEsR0FBS0EsR0FBRSxjQUFhLEdBQUtBLEdBQUUsU0FBUSxHQUFLQSxJQUFJLEdBQ3BHLEtBQUcsS0FBSSxLQUFnQixTQUFDRCxFQUFJQyxHQUFPLGlCQUFVLEdBQUtELEdBQUUsU0FBUSxHQUFLQSxHQUFFLFFBQU8sR0FBS0EsR0FBRSxTQUFRLEdBQUtBLEdBQUUsTUFBSSxHQUNwRyxLQUFHLEtBQUksS0FBZ0IsU0FBQ0EsRUFBSUMsR0FBTyxhQUFNLEdBQUtBLEdBQUUsTUFBSyxHQUFLRCxHQUFFLEtBQUksR0FBS0MsR0FBRSxNQUFLLEdBQUtELEdBQUUsVUFBUyxHQUFLQyxHQUFFLE1BQUssR0FBS0QsR0FBRSxLQUFJLEdBQUtDLEdBQUUsTUFBSyxHQUFLRCxHQUFFLE1BQUksR0FDMUksS0FBRyxLQUFJLEtBQWdCLFNBQUNBLEVBQUlDLEdBQU8sMEJBQStCLEdBQUtBLEdBQUUsUUFBTyxHQUFLQSxHQUFFLFNBQVEsR0FBS0EsR0FBRSxRQUFPLEdBQUtBLElBQUksR0FDdEgsS0FBRyxLQUFJLEtBQWdCLFNBQUNELEVBQUlDLEdBQU8sV0FBSSxHQUFLRCxHQUFFLFFBQU8sR0FBS0EsR0FBRSxRQUFPLEdBQUtBLEdBQUUsUUFBTyxHQUFLQSxHQUFFLFFBQU8sR0FBS0EsR0FBRSxhQUFXLEdBQ2pILEtBQUcsS0FBSSxLQUFnQixTQUFDQSxFQUFJQyxHQUFPLFdBQUksR0FBS0QsR0FBRSxRQUFPLEdBQUtBLEdBQUUsVUFBUyxHQUFLQyxHQUFFLE1BQUssR0FBS0QsR0FBRSxLQUFJLEdBQUtDLEdBQUUsTUFBSyxHQUFLRCxHQUFFLFVBQVMsR0FBS0MsR0FBRSxNQUFLLEdBQUtELEdBQUUsS0FBSSxHQUFLQyxHQUFFLE1BQUssR0FBS0QsR0FBRSxNQUFJLEdBQ3RLLEtBQUcsS0FBSSxLQUFnQixTQUFDQSxFQUFJQyxHQUFPLHlCQUE4QixHQUFLQSxHQUFFLFNBQVEsR0FBS0EsR0FBRSxRQUFPLEdBQUtBLEdBQUUsU0FBUSxHQUFLQSxJQUFJLEdBQ3RILEtBQUcsS0FBSSxLQUFnQixTQUFDRCxFQUFJQyxHQUFPLGlCQUFVLEdBQUtELEdBQUUsU0FBUSxHQUFLQSxHQUFFLFFBQU8sR0FBS0EsR0FBRSxRQUFPLEdBQUtBLEdBQUUsUUFBTyxHQUFLQSxHQUFFLE1BQUksR0FDakgsS0FBRyxLQUFJLEtBQWdCLFNBQUNBLEVBQUlDLEdBQU8sV0FBSSxHQUFLRCxHQUFFLFFBQU8sR0FBS0EsR0FBRSxVQUFTLEdBQUtDLEdBQUUsTUFBSyxHQUFLRCxHQUFFLEtBQUksR0FBS0MsR0FBRSxNQUFLLEdBQUtELEdBQUUsVUFBUyxHQUFLQyxHQUFFLE1BQUssR0FBS0QsR0FBRSxLQUFJLEdBQUtDLEdBQUUsTUFBSyxHQUFLRCxHQUFFLE1BQUksR0FDdEssS0FBRyxLQUFJLEtBQWdCLFNBQUNBLEVBQUlDLEdBQU8sYUFBTSxHQUFLQSxHQUFFLFFBQU8sR0FBS0EsR0FBRSxRQUFPLEdBQUtBLEdBQUUsUUFBTyxHQUFLQSxHQUFFLFNBQVEsR0FBS0EsR0FBRSxVQUFRLEdBQ2pILEtBQUcsTUFBSSxNQUFnQixTQUFDRCxFQUFJQyxHQUFPLHVCQUE0QixHQUFLRCxHQUFFLFNBQVEsR0FBS0EsR0FBRSxRQUFPLEdBQUtBLEdBQUUsU0FBUSxHQUFLQSxHQUFFLE1BQUksSUFDdEgsS0FBRyxNQUFJLE1BQWdCLFNBQUNBLEVBQUlDLEdBQU8sYUFBTSxHQUFLQSxHQUFFLFFBQU8sR0FBS0EsR0FBRSxRQUFPLEdBQUtBLEdBQUUsTUFBSyxHQUFLRCxHQUFFLEtBQUksR0FBS0MsR0FBRSxNQUFLLEdBQUtELEdBQUUsVUFBUyxHQUFLQyxHQUFFLE1BQUssR0FBS0QsR0FBRSxLQUFJLEdBQUtDLEdBQUUsTUFBSyxHQUFLRCxHQUFFLE1BQUksSUFDdEssS0FBRyxNQUFJLE1BQWdCLFNBQUNBLEVBQUlDLEdBQU8sb0JBQWEsR0FBS0EsR0FBRSxRQUFPLEdBQUtBLEdBQUUsUUFBTyxHQUFLQSxHQUFFLFFBQU8sR0FBS0EsR0FBRSxRQUFPLEdBQUtBLElBQUksSUFDakgsS0FBRyxNQUFJLE1BQWdCLFNBQUNELEVBQUlDLEdBQU8sdUJBQTRCLEdBQUtELEdBQUUsU0FBUSxHQUFLQSxHQUFFLFFBQU8sR0FBS0EsR0FBRSxTQUFRLEdBQUtBLEdBQUUsTUFBSSxJQUN0SCxLQUFHLE1BQUksTUFBZ0IsU0FBQ0EsRUFBSUMsR0FBTyxhQUFNLEdBQUtBLEdBQUUsUUFBTyxHQUFLQSxHQUFFLFFBQU8sR0FBS0EsR0FBRSxNQUFLLEdBQUtELEdBQUUsS0FBSSxHQUFLQyxHQUFFLE1BQUssR0FBS0QsR0FBRSxVQUFTLEdBQUtDLEdBQUUsTUFBSyxHQUFLRCxHQUFFLEtBQUksR0FBS0MsR0FBRSxNQUFLLEdBQUtELEdBQUUsTUFBSSxJQUN0SyxLQUFHLE1BQUksTUFBZ0IsU0FBQ0EsRUFBSUMsR0FBTyx5QkFBOEIsR0FBS0EsR0FBRSxRQUFPLEdBQUtBLEdBQUUsUUFBTyxHQUFLQSxHQUFFLFFBQU8sR0FBS0EsSUFBSSxJQUNwSCxLQUFHLE1BQUksTUFBZ0IsU0FBQ0QsRUFBSUMsR0FBTyx1QkFBNEIsR0FBS0QsR0FBRSxRQUFPLEdBQUtBLEdBQUUsUUFBTyxHQUFLQSxHQUFFLFFBQU8sR0FBS0EsR0FBRSxNQUFJLElBQ3BILEtBQUcsTUFBSSxNQUFnQixTQUFDQSxFQUFJQyxHQUFPLGFBQU0sR0FBS0EsR0FBRSxNQUFLLEdBQUtELEdBQUUsS0FBSSxHQUFLQyxHQUFFLE1BQUssR0FBS0QsR0FBRSxVQUFTLEdBQUtDLEdBQUUsTUFBSyxHQUFLRCxHQUFFLEtBQUksR0FBS0MsR0FBRSxNQUFLLEdBQUtELEdBQUUsVUFBUyxHQUFLQyxHQUFFLE1BQUssR0FBS0QsR0FBRSxLQUFJLEdBQUtDLEdBQUUsTUFBSyxHQUFLRCxHQUFFLFVBQVMsR0FBS0MsR0FBRSxNQUFLLEdBQUtELEdBQUUsS0FBSSxHQUFLQyxHQUFFLE1BQUssR0FBS0QsR0FBRSxNQUFJLElBR2hQLEtBQUcsTUFBSSxNQUFnQixZQUFXLElBQ2xDLEtBQUcsTUFBSSxNQUFnQixZQUFXLElBQ2xDLEtBQUcsTUFBSSxNQUFnQixzQkFBcUIsSUFHNUMsS0FBRyxNQUFJLHFCQUFzRSxxQkFBb0MsSUFDakgsS0FBRyxNQUFJLHFCQUFzRSxxQkFBcUMsSUFDbEgsS0FBRyxNQUFJLHFCQUFzRSxxQkFBbUMsSUFDaEgsS0FBRyxNQUFJLHFCQUFzRSxxQkFBa0MsSUFDL0csS0FBRyxNQUFJLHFCQUFzRSxxQkFBb0MsSUFDakgsS0FBRyxNQUFJLHFCQUFzRSxxQkFBcUMsSUFDbEgsS0FBRyxNQUFJLHFCQUFzRSxxQkFBbUMsSUFDaEgsS0FBRyxNQUFJLHFCQUFzRSxxQkFBcUMsSUFDbEgsS0FBRyxNQUFJLHFCQUFzRSxxQkFBb0MsSUFDakgsS0FBRyxNQUFJLHFCQUFzRSxxQkFBa0MsSUFDL0csS0FBRyxNQUFJLHFCQUFzRSxxQkFBbUMsSUFDaEgsS0FBRyxNQUFJLHFCQUFzRSxxQkFBa0MsSUFDL0csS0FBRyxNQUFJLG9CQUFzRSxxQkFBb0MsSUFDakgsS0FBRyxNQUFJLDRCQUFzRSxxQkFBa0MsSUFDL0csS0FBRyxNQUFJLDJCQUFzRSxxQkFBcUMsSUFDbEgsS0FBRyxNQUFJLHFCQUFzRSxvQkFBa0MsSUFDL0csS0FBRyxNQUFJLHFCQUFzRSwyQkFBaUMsSUFDOUcsS0FBRyxNQUFJLHFCQUFzRSw0QkFBb0MsSUFDakgsS0FBRyxNQUFJLG9CQUFzRSxxQkFBbUMsSUFDaEgsS0FBRyxNQUFJLDJCQUFzRSxxQkFBa0MsSUFDL0csS0FBRyxNQUFJLDJCQUFzRSxxQkFBcUMsSUFDbEgsS0FBRyxNQUFJLHFCQUFzRSxvQkFBa0MsSUFDL0csS0FBRyxNQUFJLHFCQUFzRSwyQkFBZ0MsSUFDN0csS0FBRyxNQUFJLHFCQUFzRSwyQkFBbUMsSUFDaEgsS0FBRyxNQUFJLDRCQUFzRSxxQkFBbUMsSUFDaEgsS0FBRyxNQUFJLDJCQUFzRSxxQkFBb0MsSUFDakgsS0FBRyxNQUFJLHFCQUFzRSxvQkFBa0MsSUFDL0csS0FBRyxNQUFJLG9CQUFzRSxxQkFBcUMsSUFDbEgsS0FBRyxNQUFJLHFCQUFzRSwyQkFBbUMsSUFDaEgsS0FBRyxNQUFJLHFCQUFzRSw0QkFBb0MsSUFDakgsS0FBRyxNQUFJLDJCQUFzRSxxQkFBbUMsSUFDaEgsS0FBRyxNQUFJLDJCQUFzRSxxQkFBb0MsSUFDakgsS0FBRyxNQUFJLHFCQUFzRSxvQkFBa0MsSUFDL0csS0FBRyxNQUFJLG9CQUFzRSxxQkFBa0MsSUFDL0csS0FBRyxNQUFJLHFCQUFzRSwyQkFBZ0MsSUFDN0csS0FBRyxNQUFJLHFCQUFzRSwyQkFBaUMsSUFDOUcsS0FBRyxNQUFJLE1BQWdCLDJCQUFzRCxxQkFBbUMsSUFDaEgsS0FBRyxNQUFJLE1BQWdCLDJCQUFzRCxxQkFBb0MsSUFDakgsS0FBRyxNQUFJLG9CQUFzRSxvQkFBa0MsSUFDL0csS0FBRyxNQUFJLE1BQWdCLDJCQUFzRCxxQkFBa0MsSUFDL0csS0FBRyxNQUFJLE1BQWdCLDJCQUFzRCxxQkFBcUMsSUFDbEgsS0FBRyxNQUFJLG9CQUFzRSxvQkFBa0MsSUFDL0csS0FBRyxNQUFJLDRCQUFzRSwyQkFBZ0MsSUFDN0csS0FBRyxNQUFJLDJCQUFzRSwyQkFBaUMsSUFDOUcsS0FBRyxNQUFJLDJCQUFzRSwyQkFBbUMsSUFDaEgsS0FBRyxNQUFJLDJCQUFzRSw0QkFBb0MsSUFDakgsS0FBRyxNQUFJLHFCQUFzRSxNQUFjLDJCQUFpRCxJQUM1SSxLQUFHLE1BQUkscUJBQXNFLE1BQWMsMkJBQW9ELElBQy9JLEtBQUcsTUFBSSxxQkFBc0UsTUFBYywyQkFBa0QsSUFDN0ksS0FBRyxNQUFJLHFCQUFzRSxNQUFjLDJCQUFtRCxJQUc5SSxLQUFHLE1BQUksb0NBQTRDLElBQ25ELEtBQUcsTUFBSSxvQ0FBNEMsSUFDbkQsS0FBRyxNQUFJLDhEQUE4QyxJQUNyRCxLQUFHLE1BQUksOERBQThDLElBQ3JELEtBQUcsTUFBSSxvRUFBNkMsSUFDcEQsS0FBRyxNQUFJLG9FQUE2QyxJQUNwRCxLQUFHLE1BQUksb0NBQTBDLElBQ2pELEtBQUcsTUFBSSxvQ0FBMEMsSUFDakQsS0FBRyxNQUFJLDhEQUE0QyxJQUNuRCxLQUFHLE1BQUksOERBQTRDLElBQ25ELEtBQUcsTUFBSSw2REFBMkMsSUFDbEQsS0FBRyxNQUFJLDZEQUEyQyxJQUdsRCxLQUFHLE1BQUksTUFBZ0IsbUJBQWtCLElBQ3pDLEtBQUcsTUFBSSxNQUFnQixtQkFBa0IsSUFDekMsS0FBRyxNQUFJLE1BQWdCLG1CQUFrQixJQUN6QyxLQUFHLE1BQUksTUFBZ0IsbUJBQWtCLEtBTzNDLDZCQUNFOTFCLEVBQ0F4RSxFQUNBdzZCLEVBQ0FDLEVBQ0FsVSxFQUNBQyxHQUVBLElBQU1rVSxFQUF5QixFQUFBVCx3QkFBd0JqNkIsR0FDdkQsR0FBSTA2QixFQUVGLE9Ba0JKLFNBQ0VsMkIsRUFDQW0yQixFQUNBSCxFQUNBQyxFQUNBbFUsRUFDQUMsR0FFQSxJQUFLLElBQUl4dkIsRUFBSSxFQUFHQSxFQUFJMmpDLEVBQWVuaUMsT0FBUXhCLElBQUssQ0FDOUMsSUFBTTRqQyxFQUFNRCxFQUFlM2pDLEdBQ3JCNmpDLEVBQVV0VSxFQUFrQixFQUM1QnVVLEVBQVV0VSxFQUFtQixFQUNuQ2hpQixFQUFJNEMsU0FDRm96QixFQUFVSSxFQUFJbHVCLEVBQUltdUIsRUFDbEJKLEVBQVVHLEVBQUlqdUIsRUFBSW11QixFQUNsQkYsRUFBSVYsRUFBSVcsRUFDUkQsRUFBSVQsRUFBSVcsSUFuQ1ZDLENBQXFCdjJCLEVBQUtrMkIsRUFBd0JGLEVBQVNDLEVBQVNsVSxFQUFpQkMsSUFDOUUsRUFHVCxJQUFNd1UsRUFBb0JaLEdBQTRCcDZCLEdBQ3RELEdBQUlnN0IsRUFFRixPQW1DSixTQUNFeDJCLEVBQ0FtMkIsRUFDQUgsRUFDQUMsRUFDQWxVLEVBQ0FDLFNBRUl5VSxFQUFhQyxHQUFlOXVCLElBQUl1dUIsR0FDL0JNLElBQ0hBLEVBQWEsSUFBSXByQixJQUNqQnFyQixHQUFlL3FCLElBQUl3cUIsRUFBZ0JNLElBRXJDLElBQU1oMEIsRUFBWXpDLEVBQUl5QyxVQUN0QixHQUF5QixpQkFBZEEsRUFDVCxNQUFNLElBQUloTyxNQUFNLDhCQUE4QmdPLEVBQVMsS0FFekQsSUFBSWswQixFQUFVRixFQUFXN3VCLElBQUluRixHQUM3QixJQUFLazBCLEVBQVMsQ0FDWixJQUFNbDhCLEVBQVEwN0IsRUFBZSxHQUFHbmlDLE9BQzFCa0YsRUFBU2k5QixFQUFlbmlDLE9BQ3hCNGlDLEVBQVk1akMsU0FBU0MsY0FBYyxVQUN6QzJqQyxFQUFVbjhCLE1BQVFBLEVBQ2xCbThCLEVBQVUxOUIsT0FBU0EsRUFDbkIsSUFBTTI5QixHQUFTLEtBQUFoSixjQUFhK0ksRUFBVTMyQixXQUFXLE9BQzNDNjJCLEVBQVksSUFBSUMsVUFBVXQ4QixFQUFPdkIsR0FHbkM0QyxPQUFDLEVBQ0RDLE9BQUMsRUFDREMsT0FBQyxFQUNEekosT0FBQyxFQUNMLEdBQUlrUSxFQUFVdTBCLFdBQVcsS0FDdkJsN0IsRUFBSTRCLFNBQVMrRSxFQUFVdzBCLE9BQU8sRUFBRyxHQUFJLElBQ3JDbDdCLEVBQUkyQixTQUFTK0UsRUFBVXcwQixPQUFPLEVBQUcsR0FBSSxJQUNyQ2o3QixFQUFJMEIsU0FBUytFLEVBQVV3MEIsT0FBTyxFQUFHLEdBQUksSUFDckMxa0MsRUFBSWtRLEVBQVV6TyxPQUFTLEdBQUswSixTQUFTK0UsRUFBVXcwQixPQUFPLEVBQUcsR0FBSSxLQUFPLE1BQy9ELEtBQUl4MEIsRUFBVXUwQixXQUFXLFFBRzlCLE1BQU0sSUFBSXZpQyxNQUFNLHNDQUFzQ2dPLEVBQVMsZ0NBRjdEM0csR0FBRCxFQUFlMkcsRUFBVU0sVUFBVSxFQUFHTixFQUFVek8sT0FBUyxHQUFHZ1AsTUFBTSxLQUFLQyxLQUFJLFNBQUFyUCxHQUFLLE9BQUFzakMsV0FBV3RqQyxPQUF6RixHQUFFbUksRUFBQyxLQUFFQyxFQUFDLEtBQUV6SixFQUFDLEtBS2QsSUFBSyxJQUFJNFYsRUFBSSxFQUFHQSxFQUFJalAsRUFBUWlQLElBQzFCLElBQUssSUFBSUQsRUFBSSxFQUFHQSxFQUFJek4sRUFBT3lOLElBQ3pCNHVCLEVBQVVqMEIsS0FBdUIsR0FBakJzRixFQUFJMU4sRUFBUXlOLElBQWNwTSxFQUMxQ2c3QixFQUFVajBCLEtBQXVCLEdBQWpCc0YsRUFBSTFOLEVBQVF5TixHQUFTLEdBQUtuTSxFQUMxQys2QixFQUFVajBCLEtBQXVCLEdBQWpCc0YsRUFBSTFOLEVBQVF5TixHQUFTLEdBQUtsTSxFQUMxQzg2QixFQUFVajBCLEtBQXVCLEdBQWpCc0YsRUFBSTFOLEVBQVF5TixHQUFTLEdBQUtpdUIsRUFBZWh1QixHQUFHRCxJQUFVLElBQUozVixHQUd0RXNrQyxFQUFPTSxhQUFhTCxFQUFXLEVBQUcsR0FDbENILEdBQVUsS0FBQTlJLGNBQWE3dEIsRUFBSW8zQixjQUFjUixFQUFXLE9BQ3BESCxFQUFXOXFCLElBQUlsSixFQUFXazBCLEdBRTVCMzJCLEVBQUl5QyxVQUFZazBCLEVBQ2hCMzJCLEVBQUk0QyxTQUFTb3pCLEVBQVNDLEVBQVNsVSxFQUFpQkMsR0E1RjlDcVYsQ0FBZ0JyM0IsRUFBS3cyQixFQUFtQlIsRUFBU0MsRUFBU2xVLEVBQWlCQyxJQUNwRSxFQUdULElBQU1zVixFQUF1QixFQUFBekIsc0JBQXNCcjZCLEdBQ25ELFFBQUk4N0IsSUFrSU4sU0FDRXQzQixFQUNBbTJCLEVBQ0FILEVBQ0FDLEVBQ0FsVSxFQUNBQyxHQUVBaGlCLEVBQUkrMEIsWUFBYy8wQixFQUFJeUMsVUFDdEIsSUFBeUMsVUFBQS9DLE9BQU82M0IsUUFBUXBCLEdBQWYsZUFBZ0MsQ0FBOUQsV0FBQ2pFLEVBQVUsS0FBRXNGLEVBQVksS0FDbEN4M0IsRUFBSSt4QixZQUNKL3hCLEVBQUltdkIsVUFBWWg1QixPQUFPOGEsaUJBQW1COU4sT0FBT3pGLFNBQVN3MEIsR0FTMUQsSUFSQSxJQVEwQixPQVBFLG1CQUFqQnNGLEVBR1lBLEVBRlYsSUFDQSxJQUFNeFYsRUFBbUJELEdBR2Z5VixHQUVzQngwQixNQUFNLEtBQXpCLGVBQStCLENBQXBELElBQU15MEIsRUFBVyxLQUNkaDBCLEVBQU9nMEIsRUFBWSxHQUNuQkMsRUFBSUMsR0FBMEJsMEIsR0FDcEMsR0FBS2kwQixFQUFMLENBSUEsSUFBTUUsRUFBaUJILEVBQVkxMEIsVUFBVSxHQUFHQyxNQUFNLEtBQ2pENDBCLEVBQUssSUFBT0EsRUFBSyxJQUd0QkYsRUFBRTEzQixFQUFLNjNCLEdBQWNELEVBQU03VixFQUFpQkMsRUFBa0JnVSxFQUFTQyxTQVByRXZ6QixRQUFRbzFCLE1BQU0sNENBQTRDcjBCLEVBQUksS0FTbEV6RCxFQUFJKzNCLFNBQ0ovM0IsRUFBSWc0QixhQW5LSkMsQ0FBbUJqNEIsRUFBS3MzQixFQUFzQnRCLEVBQVNDLEVBQVNsVSxFQUFpQkMsSUFDMUUsSUEyQlgsSUFBTTBVLEdBQW9GLElBQUlyckIsSUEySTlGLFNBQVM2c0IsR0FBTW4rQixFQUFldUUsRUFBYUcsR0FDekMsWUFEeUMsSUFBQUEsSUFBQUEsRUFBQSxHQUNsQzNCLEtBQUt3QixJQUFJeEIsS0FBSzJCLElBQUkxRSxFQUFPdUUsR0FBTUcsR0FHeEMsSUFBTWs1QixHQUFzRCxDQUMxRCxFQUFLLFNBQUMzM0IsRUFBK0I0M0IsR0FBbUIsT0FBQTUzQixFQUFJbTRCLGNBQWNQLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLEtBQzVILEVBQUssU0FBQzUzQixFQUErQjQzQixHQUFtQixPQUFBNTNCLEVBQUlvNEIsT0FBT1IsRUFBSyxHQUFJQSxFQUFLLEtBQ2pGLEVBQUssU0FBQzUzQixFQUErQjQzQixHQUFtQixPQUFBNTNCLEVBQUlxNEIsT0FBT1QsRUFBSyxHQUFJQSxFQUFLLE1BR25GLFNBQVNDLEdBQWNELEVBQWdCaGhCLEVBQW1CRixFQUFvQnNmLEVBQWlCQyxHQUM3RixJQUFNOTRCLEVBQVN5NkIsRUFBSzMwQixLQUFJLFNBQUFyUCxHQUFLLE9BQUFzakMsV0FBV3RqQyxJQUFNOEosU0FBUzlKLE1BRXZELEdBQUl1SixFQUFPbkosT0FBUyxFQUNsQixNQUFNLElBQUlTLE1BQU0scUNBR2xCLElBQUssSUFBSXlULEVBQUksRUFBR0EsRUFBSS9LLEVBQU9uSixPQUFRa1UsR0FBSyxFQUV0Qy9LLEVBQU8rSyxJQUFNME8sRUFHSyxJQUFkelosRUFBTytLLEtBQ1QvSyxFQUFPK0ssR0FBS2d3QixHQUFNcDdCLEtBQUtDLE1BQU1JLEVBQU8rSyxHQUFLLElBQU8sR0FBSzBPLEVBQVcsSUFHbEV6WixFQUFPK0ssSUFBTTh0QixFQUdmLElBQUssSUFBSTd0QixFQUFJLEVBQUdBLEVBQUloTCxFQUFPbkosT0FBUW1VLEdBQUssRUFFdENoTCxFQUFPZ0wsSUFBTXVPLEVBR0ssSUFBZHZaLEVBQU9nTCxLQUNUaEwsRUFBT2dMLEdBQUsrdkIsR0FBTXA3QixLQUFLQyxNQUFNSSxFQUFPZ0wsR0FBSyxJQUFPLEdBQUt1TyxFQUFZLElBR25FdlosRUFBT2dMLElBQU04dEIsRUFHZixPQUFPOTRCLHFGQzVpQlQsaUJBR0UsYUFDRTdHLEtBQUtnaUMsTUFBUSxHQXVCakIsT0FwQlMsWUFBQXplLE9BQVAsU0FBY3BmLEVBQWV2QixHQUMzQixJQUFLLElBQUlnUCxFQUFJLEVBQUdBLEVBQUl6TixFQUFPeU4sSUFBSyxDQUMxQjVSLEtBQUtnaUMsTUFBTXRrQyxRQUFVa1UsR0FDdkI1UixLQUFLZ2lDLE1BQU0vZ0MsS0FBSyxJQUVsQixJQUFLLElBQUk0USxFQUFJN1IsS0FBS2dpQyxNQUFNcHdCLEdBQUdsVSxPQUFRbVUsRUFBSWpQLEVBQVFpUCxJQUM3QzdSLEtBQUtnaUMsTUFBTXB3QixHQUFHM1EsVUFBSzBFLEdBRXJCM0YsS0FBS2dpQyxNQUFNcHdCLEdBQUdsVSxPQUFTa0YsRUFFekI1QyxLQUFLZ2lDLE1BQU10a0MsT0FBU3lHLEdBR2YsWUFBQXFFLE1BQVAsV0FDRSxJQUFLLElBQUlvSixFQUFJLEVBQUdBLEVBQUk1UixLQUFLZ2lDLE1BQU10a0MsT0FBUWtVLElBQ3JDLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJN1IsS0FBS2dpQyxNQUFNcHdCLEdBQUdsVSxPQUFRbVUsSUFDeEM3UixLQUFLZ2lDLE1BQU1wd0IsR0FBR0MsUUFBS2xNLEdBSTNCLEVBM0JBLEdBQWEsRUFBQXM4QixVQUFBQSxrK0JDQ2IsY0FDQSxVQUNBLFVBRUEsVUFFQSxjQUdFLFdBQ0VyRixFQUNBeDRCLEVBQ0FrRixFQUNBdXpCLEVBQ0F6Z0IsRUFDQUcsRUFDZ0IyVSxFQUNDalMsR0FSbkIsTUFVRSxZQUFNMmQsRUFBVyxPQUFReDRCLEdBQVEsRUFBTWtGLEVBQVF1ekIsRUFBWTNMLEVBQWVqUyxJQUFlLFlBQ3pGN0MsRUFBVThsQixxQkFBb0IsU0FBQTVrQyxHQUFLLFNBQUtzUSxxQkFBcUJ0USxNQUM3RDhlLEVBQVUrbEIscUJBQW9CLFNBQUE3a0MsR0FBSyxTQUFLd1EscUJBQXFCeFEsTUFFN0RpZixFQUFXMmxCLHFCQUFvQixTQUFBNWtDLEdBQUssU0FBS3NRLHFCQUFxQnRRLE1BQzlEaWYsRUFBVzRsQixxQkFBb0IsU0FBQTdrQyxHQUFLLFNBQUt3USxxQkFBcUJ4USxRQW9EbEUsT0F0RXFDLE9BcUI1QixZQUFBaW1CLE9BQVAsU0FBYzJULEdBQ1osWUFBTTNULE9BQU0sVUFBQzJULEdBRWJsM0IsS0FBS2s5QixZQUFTdjNCLEdBR1QsWUFBQXNYLE1BQVAsV0FDRWpkLEtBQUs4VCxxQkFHQyxZQUFBQSxrQkFBUixXQUNFLEdBQUk5VCxLQUFLazlCLE9BQVEsQ0FDZmw5QixLQUFLZzVCLFlBQVloNUIsS0FBS2s5QixPQUFPbnJCLEdBQUkvUixLQUFLazlCLE9BQU9sckIsR0FBSWhTLEtBQUtrOUIsT0FBT2x1QixLQUFPaFAsS0FBS2s5QixPQUFPbnJCLEdBQUksR0FDcEYsSUFBTXF3QixFQUFpQnBpQyxLQUFLazlCLE9BQU8vcUIsR0FBS25TLEtBQUtrOUIsT0FBT2xyQixHQUFLLEVBQ3JEb3dCLEVBQWlCLEdBQ25CcGlDLEtBQUtnNUIsWUFBWSxFQUFHaDVCLEtBQUtrOUIsT0FBT2xyQixHQUFLLEVBQUdoUyxLQUFLazlCLE9BQU9sdUIsS0FBTW96QixHQUU1RHBpQyxLQUFLZzVCLFlBQVksRUFBR2g1QixLQUFLazlCLE9BQU8vcUIsR0FBSW5TLEtBQUtrOUIsT0FBT2hyQixHQUFJLEdBQ3BEbFMsS0FBS2s5QixZQUFTdjNCLElBSVYsWUFBQWlJLHFCQUFSLFNBQTZCdFEsR0FVM0IsR0FUSUEsRUFBRTBJLEtBQU8sRUFBQXEwQix1QkFDWHI2QixLQUFLNEosS0FBS3VDLFVBQVluTSxLQUFLczJCLFFBQVFwc0IsV0FBV2pFLElBQ3JDM0ksRUFBRTBJLEtBQU0sSUFBQXE4QixZQUFXL2tDLEVBQUUwSSxJQUU5QmhHLEtBQUs0SixLQUFLdUMsVUFBWW5NLEtBQUtzMkIsUUFBUS9yQixLQUFLak4sRUFBRTBJLElBQUlDLElBRTlDakcsS0FBSzRKLEtBQUt1QyxVQUFZbk0sS0FBS3MyQixRQUFRcnNCLFdBQVdoRSxJQUc1QzNJLEVBQUUwVSxLQUFPMVUsRUFBRTZVLEdBRWJuUyxLQUFLMDRCLHVCQUF1QnA3QixFQUFFeVUsR0FBSXpVLEVBQUUwVSxHQUFJMVUsRUFBRTRVLEdBQUs1VSxFQUFFeVUsUUFDNUMsQ0FFTC9SLEtBQUswNEIsdUJBQXVCcDdCLEVBQUV5VSxHQUFJelUsRUFBRTBVLEdBQUkxVSxFQUFFMFIsS0FBTzFSLEVBQUV5VSxJQUNuRCxJQUFLLElBQUlGLEVBQUl2VSxFQUFFMFUsR0FBSyxFQUFHSCxFQUFJdlUsRUFBRTZVLEdBQUlOLElBQy9CN1IsS0FBSzA0Qix1QkFBdUIsRUFBRzdtQixFQUFHdlUsRUFBRTBSLE1BRXRDaFAsS0FBSzA0Qix1QkFBdUIsRUFBR3A3QixFQUFFNlUsR0FBSTdVLEVBQUU0VSxJQUV6Q2xTLEtBQUtrOUIsT0FBUzUvQixHQUdSLFlBQUF3USxxQkFBUixTQUE2QnhRLEdBQzNCMEMsS0FBSzhULHFCQXBFbUIsR0FVdkIsTUFBQWpCLGdCQUNBLE1BQUErRyxrQkFYUTBvQixHQUFiLENBQXFDLEVBQUE1RixpQkFBeEIsRUFBQTRGLGdCQUFBQSwyOUJDUGIsY0FDQSxVQUNBLFVBRUEsVUFDQSxTQUVBLFVBQ0EsVUFDQSxVQUNBLFVBR0lDLEVBQWlCLEVBRXJCLGNBV0UsV0FDVWpNLEVBQ1NyZSxFQUNqQm1FLEVBQ0FHLEVBQ3VCaW1CLEVBQ1VqMUIsRUFDRXFSLEVBQ0R6RyxHQVJwQyxNQVVFLGNBQU8sS0FUQyxFQUFBbWUsUUFBQUEsRUFDUyxFQUFBcmUsZUFBQUEsRUFJZ0IsRUFBQTFLLGVBQUFBLEVBQ0UsRUFBQXFSLGlCQUFBQSxFQUNELEVBQUF6RyxnQkFBQUEsRUFsQjVCLEVBQUFzcUIsSUFBTUYsSUFPTixFQUFBekYsaUJBQW1CLElBQUksRUFBQWp2QixhQWM3QixJQUFNckUsRUFBb0IsRUFBSzJPLGdCQUFnQm1CLFdBQVc5UCx5QkFDMUQsRUFBS2s1QixjQUFnQixDQUNuQkYsRUFBcUJsbUIsZUFBZSxFQUFBcW1CLGdCQUFpQixFQUFLMXFCLGVBQWdCLEVBQUcsRUFBS3FlLFFBQVM5c0IsRUFBbUIsRUFBS2k1QixLQUNuSEQsRUFBcUJsbUIsZUFBZSxFQUFBc21CLHFCQUFzQixFQUFLM3FCLGVBQWdCLEVBQUcsRUFBS3FlLFFBQVMsRUFBS21NLEtBQ3JHRCxFQUFxQmxtQixlQUFlLEVBQUFnbUIsZ0JBQWlCLEVBQUtycUIsZUFBZ0IsRUFBRyxFQUFLcWUsUUFBUyxFQUFLbU0sSUFBS3JtQixFQUFXRyxHQUNoSGltQixFQUFxQmxtQixlQUFlLEVBQUFvaUIsa0JBQW1CLEVBQUt6bUIsZUFBZ0IsRUFBRyxFQUFLcWUsUUFBUyxFQUFLbU0sSUFBSyxFQUFLM0YsbUJBRTlHLEVBQUtyNkIsV0FBYSxDQUNoQjAxQixnQkFBaUIsRUFDakJDLGlCQUFrQixFQUNsQjNNLGdCQUFpQixFQUNqQkMsaUJBQWtCLEVBQ2xCMk0sZUFBZ0IsRUFDaEJDLGNBQWUsRUFDZmxOLGtCQUFtQixFQUNuQkcsbUJBQW9CLEVBQ3BCSixZQUFhLEVBQ2JHLGFBQWMsRUFDZC9LLGdCQUFpQixFQUNqQjdkLGlCQUFrQixHQUVwQixFQUFLbWdDLGtCQUFvQmhqQyxPQUFPOGEsaUJBQ2hDLEVBQUttb0Isb0JBQ0wsRUFBS3JMLHFCQXNKVCxPQW5NOEIsT0FTNUIsc0JBQVcsOEJBQWUsS0FBMUIsV0FBNEQsT0FBT3ozQixLQUFLODhCLGlCQUFpQjd1Qix1Q0F1Q2xGLFlBQUFuTyxRQUFQLFdBQ0UsSUFBZ0IsVUFBQUUsS0FBSzBpQyxjQUFMLGVBQUosS0FDUjVpQyxVQUVKLFlBQU1BLFFBQU8sWUFDYixJQUFBaWpDLHlCQUF3Qi9pQyxLQUFLeWlDLE1BR3hCLFlBQUFPLHlCQUFQLFdBR01oakMsS0FBSzZpQyxvQkFBc0JoakMsT0FBTzhhLG1CQUNwQzNhLEtBQUs2aUMsa0JBQW9CaGpDLE9BQU84YSxpQkFDaEMzYSxLQUFLMUIsU0FBUzBCLEtBQUt1TixlQUFleUIsS0FBTWhQLEtBQUt1TixlQUFlclEsUUFJekQsWUFBQWdoQixVQUFQLFNBQWlCNVUsR0FDZnRKLEtBQUtzMkIsUUFBVWh0QixFQUVmLElBQWdCLFVBQUF0SixLQUFLMGlDLGNBQUwsZUFBb0IsQ0FBL0IsSUFBTU8sRUFBQyxLQUNWQSxFQUFFL2tCLFVBQVVsZSxLQUFLczJCLFNBQ2pCMk0sRUFBRWhtQixVQUlDLFlBQUEzZSxTQUFQLFNBQWdCMFEsRUFBYzlSLEdBRTVCOEMsS0FBSzhpQyxvQkFHTCxJQUFnQixVQUFBOWlDLEtBQUswaUMsY0FBTCxlQUFKLEtBQ1JuZixPQUFPdmpCLEtBQUt5QyxZQUloQnpDLEtBQUtpWSxlQUFldFYsTUFBTXdCLE1BQVduRSxLQUFLeUMsV0FBVzBvQixZQUFXLEtBQ2hFbnJCLEtBQUtpWSxlQUFldFYsTUFBTUMsT0FBWTVDLEtBQUt5QyxXQUFXNm9CLGFBQVksTUFHN0QsWUFBQTRYLGtCQUFQLFdBQ0VsakMsS0FBSzFCLFNBQVMwQixLQUFLdU4sZUFBZXlCLEtBQU1oUCxLQUFLdU4sZUFBZXJRLE9BR3ZELFlBQUFvQyxPQUFQLFdBQ0VVLEtBQUttakMsZUFBYyxTQUFBRixHQUFLLE9BQUFBLEVBQUUzakMsYUFHckIsWUFBQTJrQixRQUFQLFdBQ0Vqa0IsS0FBS21qQyxlQUFjLFNBQUFGLEdBQUssT0FBQUEsRUFBRWhmLGNBR3JCLFlBQUFNLG1CQUFQLFNBQTBCOWxCLEVBQXFDQyxFQUFtQzhsQixRQUFBLElBQUFBLElBQUFBLEdBQUEsR0FDaEd4a0IsS0FBS21qQyxlQUFjLFNBQUFGLEdBQUssT0FBQUEsRUFBRTFlLG1CQUFtQjlsQixFQUFPQyxFQUFLOGxCLE9BR3BELFlBQUFqSCxhQUFQLFdBQ0V2ZCxLQUFLbWpDLGVBQWMsU0FBQUYsR0FBSyxPQUFBQSxFQUFFMWxCLG1CQUdyQixZQUFBa2EsaUJBQVAsV0FDRXozQixLQUFLbWpDLGVBQWMsU0FBQUYsR0FBSyxPQUFBQSxFQUFFeEwsdUJBR3JCLFlBQUFqdkIsTUFBUCxXQUNFeEksS0FBS21qQyxlQUFjLFNBQUFGLEdBQUssT0FBQUEsRUFBRWhtQixZQUdwQixZQUFBa21CLGNBQVIsU0FBc0JDLEdBQ3BCLElBQWdCLFVBQUFwakMsS0FBSzBpQyxjQUFMLGVBQ2RVLEVBRFUsT0FTUCxZQUFBQyxXQUFQLFNBQWtCNWtDLEVBQWVDLEdBQy9CLElBQWdCLFVBQUFzQixLQUFLMGlDLGNBQUwsZUFBSixLQUNSaEwsY0FBY2o1QixFQUFPQyxJQUlwQixZQUFBc3NCLGtCQUFQLFdBQ0UsSUFBb0IsVUFBQWhyQixLQUFLMGlDLGNBQUwsZUFBSixLQUNSMVgscUJBT0YsWUFBQThYLGtCQUFSLFdBQ085aUMsS0FBSzRlLGlCQUFpQmdNLGVBUTNCNXFCLEtBQUt5QyxXQUFXMDFCLGdCQUFrQjN4QixLQUFLeUwsTUFBTWpTLEtBQUs0ZSxpQkFBaUJ6YSxNQUFRdEUsT0FBTzhhLGtCQUtsRjNhLEtBQUt5QyxXQUFXMjFCLGlCQUFtQjV4QixLQUFLeUIsS0FBS2pJLEtBQUs0ZSxpQkFBaUJoYyxPQUFTL0MsT0FBTzhhLGtCQU1uRjNhLEtBQUt5QyxXQUFXaXBCLGlCQUFtQmxsQixLQUFLeUwsTUFBTWpTLEtBQUt5QyxXQUFXMjFCLGlCQUFtQnA0QixLQUFLbVksZ0JBQWdCbUIsV0FBV29ILFlBSWpIMWdCLEtBQUt5QyxXQUFXNjFCLGNBQStELElBQS9DdDRCLEtBQUttWSxnQkFBZ0JtQixXQUFXb0gsV0FBbUIsRUFBSWxhLEtBQUtDLE9BQU96RyxLQUFLeUMsV0FBV2lwQixpQkFBbUIxckIsS0FBS3lDLFdBQVcyMUIsa0JBQW9CLEdBRzFLcDRCLEtBQUt5QyxXQUFXZ3BCLGdCQUFrQnpyQixLQUFLeUMsV0FBVzAxQixnQkFBa0IzeEIsS0FBS0MsTUFBTXpHLEtBQUttWSxnQkFBZ0JtQixXQUFXZ3FCLGVBSS9HdGpDLEtBQUt5QyxXQUFXNDFCLGVBQWlCN3hCLEtBQUt5TCxNQUFNalMsS0FBS21ZLGdCQUFnQm1CLFdBQVdncUIsY0FBZ0IsR0FJNUZ0akMsS0FBS3lDLFdBQVc4b0IsbUJBQXFCdnJCLEtBQUt1TixlQUFlclEsS0FBTzhDLEtBQUt5QyxXQUFXaXBCLGlCQUNoRjFyQixLQUFLeUMsV0FBVzJvQixrQkFBb0JwckIsS0FBS3VOLGVBQWV5QixLQUFPaFAsS0FBS3lDLFdBQVdncEIsZ0JBTy9FenJCLEtBQUt5QyxXQUFXNm9CLGFBQWU5a0IsS0FBS0MsTUFBTXpHLEtBQUt5QyxXQUFXOG9CLG1CQUFxQjFyQixPQUFPOGEsa0JBQ3RGM2EsS0FBS3lDLFdBQVcwb0IsWUFBYzNrQixLQUFLQyxNQUFNekcsS0FBS3lDLFdBQVcyb0Isa0JBQW9CdnJCLE9BQU84YSxrQkFPcEYzYSxLQUFLeUMsV0FBV0MsaUJBQW1CMUMsS0FBS3lDLFdBQVc2b0IsYUFBZXRyQixLQUFLdU4sZUFBZXJRLEtBQ3RGOEMsS0FBS3lDLFdBQVc4ZCxnQkFBa0J2Z0IsS0FBS3lDLFdBQVcwb0IsWUFBY25yQixLQUFLdU4sZUFBZXlCLE9Bak1uRSxHQWdCaEIsTUFBQXUwQix1QkFDQSxNQUFBMXdCLGdCQUNBLE1BQUFpUSxrQkFDQSxNQUFBbEosa0JBbkJRc0wsR0FBYixDQUE4QixFQUFBcmlCLFlBQWpCLEVBQUFxaUIsU0FBQUEsdUZDZmIsd0JBQWdDemhCLEdBQzlCLElBQUtBLEVBQ0gsTUFBTSxJQUFJdEYsTUFBTSwyQkFFbEIsT0FBT3NGLHcrQkNIVCxjQUVBLFVBU0EsY0FHRSxXQUNFbTVCLEVBQ0F4NEIsRUFDQWtGLEVBQ0F1ekIsRUFDZ0IzTCxFQUNDalMsR0FObkIsTUFRRSxZQUFNMmQsRUFBVyxZQUFheDRCLEdBQVEsRUFBTWtGLEVBQVF1ekIsRUFBWTNMLEVBQWVqUyxJQUFlLFlBQzlGLEVBQUt1a0IsZ0JBa0dULE9BOUcwQyxPQWVoQyxZQUFBQSxZQUFSLFdBQ0V4akMsS0FBS2s5QixPQUFTLENBQ1p6K0IsV0FBT2tILEVBQ1BqSCxTQUFLaUgsRUFDTDZlLHNCQUFrQjdlLEVBQ2xCdEQsV0FBT3NELElBSUosWUFBQTRkLE9BQVAsU0FBYzJULEdBQ1osWUFBTTNULE9BQU0sVUFBQzJULEdBRWJsM0IsS0FBS3dqQyxlQUdBLFlBQUF2bUIsTUFBUCxXQUNNamQsS0FBS2s5QixPQUFPeitCLE9BQVN1QixLQUFLazlCLE9BQU94K0IsTUFDbkNzQixLQUFLd2pDLGNBQ0x4akMsS0FBS3czQixjQUlGLFlBQUFqVCxtQkFBUCxTQUEwQjlsQixFQUFxQ0MsRUFBbUM4bEIsR0FFaEcsR0FBS3hrQixLQUFLeWpDLGdCQUFnQmhsQyxFQUFPQyxFQUFLOGxCLEVBQWtCeGtCLEtBQUt1TixlQUFlak4sT0FBTytCLE9BUW5GLEdBSEFyQyxLQUFLdzNCLFlBR0EvNEIsR0FBVUMsRUFBZixDQU1BLElBQU1nbEMsRUFBbUJqbEMsRUFBTSxHQUFLdUIsS0FBS3VOLGVBQWVqTixPQUFPK0IsTUFDekRzaEMsRUFBaUJqbEMsRUFBSSxHQUFLc0IsS0FBS3VOLGVBQWVqTixPQUFPK0IsTUFDckR1aEMsRUFBeUJwOUIsS0FBS3dCLElBQUkwN0IsRUFBa0IsR0FDcERHLEVBQXVCcjlCLEtBQUsyQixJQUFJdzdCLEVBQWdCM2pDLEtBQUt1TixlQUFlclEsS0FBTyxHQUdqRixHQUFJMG1DLEdBQTBCNWpDLEtBQUt1TixlQUFlclEsTUFBUTJtQyxFQUF1QixFQUMvRTdqQyxLQUFLazlCLE9BQU83NkIsTUFBUXJDLEtBQUt1TixlQUFlak4sT0FBTytCLFVBRGpELENBT0EsR0FGQXJDLEtBQUs0SixLQUFLdUMsVUFBWW5NLEtBQUtzMkIsUUFBUWpzQixxQkFBcUJwRSxJQUVwRHVlLEVBQWtCLENBQ3BCLElBQU1zTixFQUFXcnpCLEVBQU0sR0FDakIwRixFQUFRekYsRUFBSSxHQUFLb3pCLEVBQ2pCbHZCLEVBQVNpaEMsRUFBdUJELEVBQXlCLEVBQy9ENWpDLEtBQUt1NEIsV0FBV3pHLEVBQVU4UixFQUF3QnovQixFQUFPdkIsT0FDcEQsQ0FFQ2t2QixFQUFXNFIsSUFBcUJFLEVBQXlCbmxDLEVBQU0sR0FBSyxFQUExRSxJQUNNcWxDLEVBQWlCRixJQUEyQkQsRUFBaUJqbEMsRUFBSSxHQUFLc0IsS0FBS3VOLGVBQWV5QixLQUNoR2hQLEtBQUt1NEIsV0FBV3pHLEVBQVU4UixFQUF3QkUsRUFBaUJoUyxFQUFVLEdBRzdFLElBQU1pUyxFQUFrQnY5QixLQUFLd0IsSUFBSTY3QixFQUF1QkQsRUFBeUIsRUFBRyxHQUlwRixHQUhBNWpDLEtBQUt1NEIsV0FBVyxFQUFHcUwsRUFBeUIsRUFBRzVqQyxLQUFLdU4sZUFBZXlCLEtBQU0rMEIsR0FHckVILElBQTJCQyxFQUFzQixDQUVuRCxJQUFNOVIsRUFBUzRSLElBQW1CRSxFQUF1Qm5sQyxFQUFJLEdBQUtzQixLQUFLdU4sZUFBZXlCLEtBQ3RGaFAsS0FBS3U0QixXQUFXLEVBQUdzTCxFQUFzQjlSLEVBQVEsSUFLckQveEIsS0FBS2s5QixPQUFPeitCLE1BQVEsQ0FBQ0EsRUFBTSxHQUFJQSxFQUFNLElBQ3JDdUIsS0FBS2s5QixPQUFPeCtCLElBQU0sQ0FBQ0EsRUFBSSxHQUFJQSxFQUFJLElBQy9Cc0IsS0FBS2s5QixPQUFPMVksaUJBQW1CQSxFQUMvQnhrQixLQUFLazlCLE9BQU83NkIsTUFBUXJDLEtBQUt1TixlQUFlak4sT0FBTytCLFlBN0M3Q3JDLEtBQUt3akMsZUFnREQsWUFBQUMsZ0JBQVIsU0FBd0JobEMsRUFBcUNDLEVBQW1DOGxCLEVBQTJCbmlCLEdBQ3pILE9BQVFyQyxLQUFLZ2tDLHFCQUFxQnZsQyxFQUFPdUIsS0FBS2s5QixPQUFPeitCLFNBQ2xEdUIsS0FBS2drQyxxQkFBcUJ0bEMsRUFBS3NCLEtBQUtrOUIsT0FBT3grQixNQUM1QzhsQixJQUFxQnhrQixLQUFLazlCLE9BQU8xWSxrQkFDakNuaUIsSUFBVXJDLEtBQUtrOUIsT0FBTzc2QixPQUdsQixZQUFBMmhDLHFCQUFSLFNBQTZCQyxFQUFzQ0MsR0FDakUsU0FBS0QsSUFBV0MsSUFJVEQsRUFBTyxLQUFPQyxFQUFPLElBQU1ELEVBQU8sS0FBT0MsRUFBTyxJQTVHMUIsR0FRNUIsTUFBQXJ4QixnQkFDQSxNQUFBK0csa0JBVFFncEIsR0FBYixDQUEwQyxFQUFBbEcsaUJBQTdCLEVBQUFrRyxxQkFBQUEsaytCQ1ZiLGNBQ0EsVUFDQSxVQUNBLFNBRUEsU0FDQSxVQUNBLFVBQ0EsVUFTQSxjQU9FLFdBQ0VoRyxFQUNBeDRCLEVBQ0FrRixFQUNBd0QsRUFDQSt2QixFQUNnQjNMLEVBQ0NqUyxFQUN5QmdFLEdBUjVDLE1BVUUsWUFBTTJaLEVBQVcsT0FBUXg0QixFQUFRMEksRUFBT3hELEVBQVF1ekIsRUFBWTNMLEVBQWVqUyxJQUFlLFlBRmhELEVBQUFnRSx3QkFBQUEsRUFicEMsRUFBQWtoQixnQkFBMEIsRUFDMUIsRUFBQUMsZUFBeUIsR0FDekIsRUFBQUMsdUJBQXFELEdBQ3JELEVBQUFDLFVBQVksSUFBSSxFQUFBckgsU0FhdEIsRUFBS0MsT0FBUyxJQUFJLEVBQUErRSxZQStSdEIsT0FqVHFDLE9BcUI1QixZQUFBMWUsT0FBUCxTQUFjMlQsR0FDWixZQUFNM1QsT0FBTSxVQUFDMlQsR0FHYixJQUFNcU4sRUFBZXZrQyxLQUFLbzVCLFVBQVMsR0FBTyxHQUN0Q3A1QixLQUFLbWtDLGtCQUFvQmpOLEVBQUlpQixpQkFBbUJuNEIsS0FBS29rQyxpQkFBbUJHLElBQzFFdmtDLEtBQUtta0MsZ0JBQWtCak4sRUFBSWlCLGdCQUMzQm40QixLQUFLb2tDLGVBQWlCRyxFQUN0QnZrQyxLQUFLcWtDLHVCQUF5QixJQUdoQ3JrQyxLQUFLazlCLE9BQU8xMEIsUUFDWnhJLEtBQUtrOUIsT0FBTzNaLE9BQU92akIsS0FBS3VOLGVBQWV5QixLQUFNaFAsS0FBS3VOLGVBQWVyUSxPQUc1RCxZQUFBK2YsTUFBUCxXQUNFamQsS0FBS2s5QixPQUFPMTBCLFFBQ1p4SSxLQUFLdzNCLGFBR0MsWUFBQWdOLGFBQVIsU0FDRUMsRUFDQUMsRUFDQWhQLEdBTUEsSUFBSyxJQUFJN2pCLEVBQUk0eUIsRUFBVTV5QixHQUFLNnlCLEVBQVM3eUIsSUFJbkMsSUFIQSxJQUFNaVUsRUFBTWpVLEVBQUk3UixLQUFLdU4sZUFBZWpOLE9BQU8rQixNQUNyQ2dQLEVBQU9yUixLQUFLdU4sZUFBZWpOLE9BQU9DLE1BQU0rUSxJQUFJd1UsR0FDNUM2ZSxFQUFlM2tDLEtBQUtpakIsd0JBQXdCMmhCLG9CQUFvQjllLEdBQzdEbFUsRUFBSSxFQUFHQSxFQUFJNVIsS0FBS3VOLGVBQWV5QixLQUFNNEMsSUFBSyxDQUNqRFAsRUFBTStzQixTQUFTeHNCLEVBQUc1UixLQUFLc2tDLFdBQ3ZCLElBQUlwTCxFQUFPbDVCLEtBQUtza0MsVUFHWk8sR0FBVyxFQUNYQyxFQUFZbHpCLEVBSWhCLEdBQXdCLElBQXBCc25CLEVBQUs3WSxXQUFULENBT0EsR0FBSXNrQixFQUFham5DLE9BQVMsR0FBS2tVLElBQU0reUIsRUFBYSxHQUFHLEdBQUksQ0FDdkRFLEdBQVcsRUFDWCxJQUFNeDFCLEVBQVFzMUIsRUFBYTlqQyxRQUkzQnE0QixFQUFPLElBQUksRUFBQTZMLGVBQ1Qva0MsS0FBS3NrQyxVQUNManpCLEVBQU0yekIsbUJBQWtCLEVBQU0zMUIsRUFBTSxHQUFJQSxFQUFNLElBQzlDQSxFQUFNLEdBQUtBLEVBQU0sSUFJbkJ5MUIsRUFBWXoxQixFQUFNLEdBQUssR0FPcEJ3MUIsR0FBWTdrQyxLQUFLaWxDLGVBQWUvTCxJQVEvQjRMLEVBQVl6ekIsRUFBTTNULE9BQVMsR0FBSzJULEVBQU02ekIsYUFBYUosRUFBWSxLQUFPLEVBQUFLLGlCQUV4RWpNLEVBQUszcEIsVUFBVyxTQUNoQjJwQixFQUFLM3BCLFNBQVcsR0FBSyxJQVN6Qm1tQixFQUNFd0QsRUFDQXRuQixFQUNBQyxHQUdGRCxFQUFJa3pCLEtBU0YsWUFBQU0sZ0JBQVIsU0FBd0JYLEVBQWtCQyxHQUExQyxXQUNRaDdCLEVBQU0xSixLQUFLNEosS0FDWG9GLEVBQU9oUCxLQUFLdU4sZUFBZXlCLEtBQzdCNEcsRUFBaUIsRUFDakJvYixFQUFpQixFQUNqQnFVLEVBQStCLEtBRW5DMzdCLEVBQUl5eEIsT0FFSm43QixLQUFLd2tDLGFBQWFDLEVBQVVDLEdBQVMsU0FBQ3hMLEVBQU10bkIsRUFBR0MsR0FHN0MsSUFBSXl6QixFQUFnQixLQUVoQnBNLEVBQUtpQixZQUVMbUwsRUFERXBNLEVBQUtxQixjQUNTLEVBQUtqRSxRQUFRcnNCLFdBQVdoRSxJQUMvQml6QixFQUFLYyxVQUNFLE9BQU8sRUFBQW9CLGNBQWNqMEIsV0FBVyt4QixFQUFLc0IsY0FBY2EsS0FBSyxLQUFJLElBRTVELEVBQUsvRSxRQUFRL3JCLEtBQUsydUIsRUFBS3NCLGNBQWN2MEIsSUFFOUNpekIsRUFBS2UsVUFDZHFMLEVBQWdCLE9BQU8sRUFBQWxLLGNBQWNqMEIsV0FBVyt4QixFQUFLb0IsY0FBY2UsS0FBSyxLQUFJLElBQ25FbkMsRUFBS3FNLGdCQUNkRCxFQUFnQixFQUFLaFAsUUFBUS9yQixLQUFLMnVCLEVBQUtvQixjQUFjcjBCLEtBR2pDLE9BQWxCby9CLElBR0Z6dkIsRUFBU2hFLEVBQ1RvZixFQUFTbmYsR0FHUEEsSUFBTW1mLEdBRVJ0bkIsRUFBSXlDLFVBQVlrNUIsR0FBaUIsR0FDakMsRUFBSzlNLFdBQVczaUIsRUFBUW9iLEVBQVFoaUIsRUFBTzRHLEVBQVEsR0FDL0NBLEVBQVNoRSxFQUNUb2YsRUFBU25mLEdBQ0F3ekIsSUFBa0JDLElBRTNCNTdCLEVBQUl5QyxVQUFZazVCLEdBQWlCLEdBQ2pDLEVBQUs5TSxXQUFXM2lCLEVBQVFvYixFQUFRcGYsRUFBSWdFLEVBQVEsR0FDNUNBLEVBQVNoRSxFQUNUb2YsRUFBU25mLEdBR1h3ekIsRUFBZ0JDLEtBSUksT0FBbEJELElBQ0YzN0IsRUFBSXlDLFVBQVlrNUIsRUFDaEJybEMsS0FBS3U0QixXQUFXM2lCLEVBQVFvYixFQUFRaGlCLEVBQU80RyxFQUFRLElBR2pEbE0sRUFBSTh4QixXQUdFLFlBQUFnSyxnQkFBUixTQUF3QmYsRUFBa0JDLEdBQTFDLFdBQ0Uxa0MsS0FBS3drQyxhQUFhQyxFQUFVQyxHQUFTLFNBQUN4TCxFQUFNdG5CLEVBQUdDLEdBQzdDLElBQUlxbkIsRUFBS3VNLGdCQUdULEVBQUs1TCxXQUFXWCxFQUFNdG5CLEVBQUdDLEdBQ3JCcW5CLEVBQUt3TSxlQUFpQnhNLEVBQUt5TSxtQkFBbUIsQ0FHaEQsR0FGQSxFQUFLLzdCLEtBQUt1eEIsT0FFTmpDLEVBQUtpQixZQUNQLEdBQUlqQixFQUFLa0IsY0FDUCxFQUFLeHdCLEtBQUt1QyxVQUFZLEVBQUttcUIsUUFBUXBzQixXQUFXakUsU0FDekMsR0FBSWl6QixFQUFLZSxVQUNkLEVBQUtyd0IsS0FBS3VDLFVBQVksT0FBTyxFQUFBaXZCLGNBQWNqMEIsV0FBVyt4QixFQUFLb0IsY0FBY2UsS0FBSyxLQUFJLFFBQzdFLENBQ0wsSUFBSXQxQixFQUFLbXpCLEVBQUtvQixhQUNWLEVBQUtuaUIsZ0JBQWdCbUIsV0FBV29oQiw0QkFBOEJ4QixFQUFLeUIsVUFBWTUwQixFQUFLLElBQ3RGQSxHQUFNLEdBRVIsRUFBSzZELEtBQUt1QyxVQUFZLEVBQUttcUIsUUFBUS9yQixLQUFLeEUsR0FBSUUsU0FHOUMsR0FBSWl6QixFQUFLcUIsY0FDUCxFQUFLM3dCLEtBQUt1QyxVQUFZLEVBQUttcUIsUUFBUXJzQixXQUFXaEUsU0FDekMsR0FBSWl6QixFQUFLYyxVQUNkLEVBQUtwd0IsS0FBS3VDLFVBQVksT0FBTyxFQUFBaXZCLGNBQWNqMEIsV0FBVyt4QixFQUFLc0IsY0FBY2EsS0FBSyxLQUFJLFFBQzdFLENBQ0wsSUFBSXIxQixFQUFLa3pCLEVBQUtzQixhQUNWLEVBQUtyaUIsZ0JBQWdCbUIsV0FBV29oQiw0QkFBOEJ4QixFQUFLeUIsVUFBWTMwQixFQUFLLElBQ3RGQSxHQUFNLEdBRVIsRUFBSzRELEtBQUt1QyxVQUFZLEVBQUttcUIsUUFBUS9yQixLQUFLdkUsR0FBSUMsSUFJNUNpekIsRUFBS3lNLG1CQUNQLEVBQUtuTix1QkFBdUI1bUIsRUFBR0MsRUFBR3FuQixFQUFLN1ksWUFFckM2WSxFQUFLd00sZUFDUCxFQUFLaE4sdUJBQXVCOW1CLEVBQUdDLEVBQUdxbkIsRUFBSzdZLFlBRXpDLEVBQUt6VyxLQUFLNHhCLGVBS1QsWUFBQTlELGNBQVAsU0FBcUIrTSxFQUFrQkMsR0FFSixJQUE3QjFrQyxLQUFLazlCLE9BQU84RSxNQUFNdGtDLFNBSWxCc0MsS0FBS3MzQixZQUNQdDNCLEtBQUtzM0IsV0FBV3NPLGFBR2xCNWxDLEtBQUtnNUIsWUFBWSxFQUFHeUwsRUFBVXprQyxLQUFLdU4sZUFBZXlCLEtBQU0wMUIsRUFBVUQsRUFBVyxHQUM3RXprQyxLQUFLb2xDLGdCQUFnQlgsRUFBVUMsR0FDL0Ixa0MsS0FBS3dsQyxnQkFBZ0JmLEVBQVVDLEtBRzFCLFlBQUFqTixpQkFBUCxXQUNFejNCLEtBQUs2M0IsaUJBQWlCNzNCLEtBQUttWSxnQkFBZ0JtQixXQUFXOVAsb0JBTWhELFlBQUF5N0IsZUFBUixTQUF1Qi9MLEdBR3JCLEdBQXdCLElBQXBCQSxFQUFLN1ksV0FDUCxPQUFPLEVBSVQsR0FBSTZZLEVBQUsyQixVQUFZLElBQ25CLE9BQU8sRUFHVCxJQUFNOUQsRUFBUW1DLEVBQUtTLFdBR25CLEdBQUkzNUIsS0FBS3FrQyx1QkFBdUJ3QixlQUFlOU8sR0FDN0MsT0FBTy8yQixLQUFLcWtDLHVCQUF1QnROLEdBSXJDLzJCLEtBQUs0SixLQUFLdXhCLE9BQ1ZuN0IsS0FBSzRKLEtBQUt1dkIsS0FBT241QixLQUFLb2tDLGVBS3RCLElBQU0wQixFQUFXdC9CLEtBQUt5TCxNQUFNalMsS0FBSzRKLEtBQUttOEIsWUFBWWhQLEdBQU81eUIsT0FBU25FLEtBQUtta0MsZ0JBT3ZFLE9BSkFua0MsS0FBSzRKLEtBQUs0eEIsVUFHVng3QixLQUFLcWtDLHVCQUF1QnROLEdBQVMrTyxFQUM5QkEsR0FoU2lCLEdBYXZCLE1BQUFqekIsZ0JBQ0EsTUFBQStHLGlCQUNBLE1BQUF1SiwwQkFmUXdmLEdBQWIsQ0FBcUMsRUFBQWpHLGlCQUF4QixFQUFBaUcsZ0JBQUFBLHdGQ2hCYiw4QkFDVSxLQUFBcUQsWUFBc0IsRUFnRGhDLE9BOUNTLFlBQUFsbUMsUUFBUCxhQU1PLFlBQUFvNEIsT0FBUCxXQUNPbDRCLEtBQUtnbUMsYUFDUmhtQyxLQUFLaW1DLFlBQ0xqbUMsS0FBS2dtQyxZQUFhLElBUWQsWUFBQUMsVUFBUixhQUVPLFlBQUF6OUIsTUFBUCxhQVNPLFlBQUFvOUIsV0FBUCxhQWtCRixFQWpEQSxHQUFzQixFQUFBTSxjQUFBQSx1SENIdEIsY0FFQSxVQWFNQyxFQUF5QyxHQU0vQyw0QkFDRTk0QixFQUNBd3ZCLEVBQ0F2ekIsRUFDQTZ1QixFQUNBQyxHQUtBLElBSEEsSUFBTWdPLEdBQVksSUFBQUMsZ0JBQWVsTyxFQUFpQkMsRUFBa0IvcUIsRUFBUy9ELEdBR3BFcE4sRUFBSSxFQUFHQSxFQUFJaXFDLEVBQWV6b0MsT0FBUXhCLElBQUssQ0FDOUMsSUFDTW9xQyxHQURBQyxFQUFRSixFQUFlanFDLElBQ0ZzcUMsUUFBUXYxQixRQUFRNHJCLEdBQzNDLEdBQUl5SixHQUFnQixFQUFHLENBQ3JCLElBQUksSUFBQUcsY0FBYUYsRUFBTUcsT0FBUU4sR0FDN0IsT0FBT0csRUFBTUksTUFHYyxJQUF6QkosRUFBTUMsUUFBUTlvQyxRQUNoQjZvQyxFQUFNSSxNQUFNN21DLFVBQ1pxbUMsRUFBZTcxQixPQUFPcFUsRUFBRyxJQUV6QnFxQyxFQUFNQyxRQUFRbDJCLE9BQU9nMkIsRUFBYyxHQUVyQyxPQUtKLElBQVNwcUMsRUFBSSxFQUFHQSxFQUFJaXFDLEVBQWV6b0MsT0FBUXhCLElBQUssQ0FDOUMsSUFBTXFxQyxFQUFRSixFQUFlanFDLEdBQzdCLElBQUksSUFBQXVxQyxjQUFhRixFQUFNRyxPQUFRTixHQUc3QixPQURBRyxFQUFNQyxRQUFRdmxDLEtBQUs0N0IsR0FDWjBKLEVBQU1JLE1BSWpCLElBQU1DLEVBQWlDLENBQ3JDRCxNQUFPLElBQUksRUFBQUUsaUJBQ1RucUMsU0FDQTBwQyxHQUVGTSxPQUFRTixFQUNSSSxRQUFTLENBQUMzSixJQUdaLE9BREFzSixFQUFlbGxDLEtBQUsybEMsR0FDYkEsRUFBU0QsT0FNbEIsbUNBQXdDOUosR0FDdEMsSUFBSyxJQUFJM2dDLEVBQUksRUFBR0EsRUFBSWlxQyxFQUFlem9DLE9BQVF4QixJQUFLLENBQzlDLElBQU02WixFQUFRb3dCLEVBQWVqcUMsR0FBR3NxQyxRQUFRdjFCLFFBQVE0ckIsR0FDaEQsSUFBZSxJQUFYOW1CLEVBQWMsQ0FDeUIsSUFBckNvd0IsRUFBZWpxQyxHQUFHc3FDLFFBQVE5b0MsUUFFNUJ5b0MsRUFBZWpxQyxHQUFHeXFDLE1BQU03bUMsVUFDeEJxbUMsRUFBZTcxQixPQUFPcFUsRUFBRyxJQUd6QmlxQyxFQUFlanFDLEdBQUdzcUMsUUFBUWwyQixPQUFPeUYsRUFBTyxHQUUxQyxvV0NyRk4sYUFJQSwwQkFBK0JvaUIsRUFBeUJDLEVBQTBCL3FCLEVBQTJCL0QsR0FFM0csSUFBTXc5QixFQUFpQyxDQUNyQzc4QixXQUFZWCxFQUFPVyxXQUNuQkMsV0FBWVosRUFBT1ksV0FDbkJDLFlBQVF4RSxFQUNSeUUsa0JBQWN6RSxFQUNkbUYsZUFBV25GLEVBQ1g0RSxLQUFNLEVBQUYsR0FBTWpCLEVBQU9pQixNQUFJLElBRXZCLE1BQU8sQ0FDTG9RLGlCQUFrQjlhLE9BQU84YSxpQkFDekJ3ZCxnQkFBZSxFQUNmQyxpQkFBZ0IsRUFDaEI5SCxXQUFZampCLEVBQVFpakIsV0FDcEJDLFNBQVVsakIsRUFBUWtqQixTQUNsQnFMLFdBQVl2dUIsRUFBUXV1QixXQUNwQkQsZUFBZ0J0dUIsRUFBUXN1QixlQUN4Qm55QixrQkFBbUI2RCxFQUFRN0Qsa0JBQzNCRixPQUFRdzlCLElBSVosd0JBQTZCN3FDLEVBQXFCeUosR0FDaEQsSUFBSyxJQUFJeEosRUFBSSxFQUFHQSxFQUFJRCxFQUFFcU4sT0FBT2lCLEtBQUs3TSxPQUFReEIsSUFDeEMsR0FBSUQsRUFBRXFOLE9BQU9pQixLQUFLck8sR0FBRzhJLE9BQVNVLEVBQUU0RCxPQUFPaUIsS0FBS3JPLEdBQUc4SSxLQUM3QyxPQUFPLEVBR1gsT0FBTy9JLEVBQUUwZSxtQkFBcUJqVixFQUFFaVYsa0JBQzVCMWUsRUFBRXEwQixhQUFlNXFCLEVBQUU0cUIsWUFDbkJyMEIsRUFBRXMwQixXQUFhN3FCLEVBQUU2cUIsVUFDakJ0MEIsRUFBRTIvQixhQUFlbDJCLEVBQUVrMkIsWUFDbkIzL0IsRUFBRTAvQixpQkFBbUJqMkIsRUFBRWkyQixnQkFDdkIxL0IsRUFBRXVOLG9CQUFzQjlELEVBQUU4RCxtQkFDMUJ2TixFQUFFazhCLGtCQUFvQnp5QixFQUFFeXlCLGlCQUN4Qmw4QixFQUFFbThCLG1CQUFxQjF5QixFQUFFMHlCLGtCQUN6Qm44QixFQUFFcU4sT0FBT1csYUFBZXZFLEVBQUU0RCxPQUFPVyxZQUNqQ2hPLEVBQUVxTixPQUFPWSxhQUFleEUsRUFBRTRELE9BQU9ZLFlBR3ZDLHNCQUEyQjY4QixHQUN6QixPQUFPQSxFQUFZLEVBQUF0TSx3S0MvQ3JCLGNBRWEsRUFBQUosdUJBQXlCLElBQ3pCLEVBQUFrQixZQUFjLEdBSWQsRUFBQWpDLGNBQW9DLEVBQUFyWSxXQUFhLEVBQUErbEIsYUFBZSxTQUFXLGNBRTNFLEVBQUFDLHdCQUEwQixxbUJDVHZDLGNBRUEsVUFDQSxVQUNBLFVBQ0EsVUFFQSxVQUNBLFVBSU1DLEVBQWdCLEtBQ2hCQyxFQUFpQixLQUVqQkMsRUFBb0IsQ0FDeEJuaEMsSUFBSyxtQkFDTGpCLEtBQU0sR0F1QlIsU0FBZ0JxaUMsRUFBaUJDLEdBVS9CLE9BQU9BLEVBQU10USxNQUFRLEdBQUtzUSxFQUFNdmhDLElBQU0sR0FBS3VoQyxFQUFNdGhDLElBQU0sR0FBS3NoQyxFQUFNclEsS0FBTyxFQUFJLElBQU1xUSxFQUFNcFEsSUFBTSxFQUFJLElBQU1vUSxFQUFNblEsT0FBUyxFQUFJLEdBVjlILHFCQWFBLGtCQTJCRSxXQUFZejZCLEVBQTRCNnFDLEdBQXhDLE1BQ0UsY0FBTyxLQUQrQixFQUFBQSxRQUFBQSxFQVhoQyxFQUFBQyxrQkFBNEIsRUFHNUIsRUFBQUMsdUJBQTZDLEdBRzdDLEVBQUFDLHFCQUFzQyxLQUd0QyxFQUFBQyxRQUE4QixLQUlwQyxFQUFLQyxhQUFlbHJDLEVBQVNDLGNBQWMsVUFDM0MsRUFBS2lyQyxhQUFhempDLE1BQVEraUMsRUFDMUIsRUFBS1UsYUFBYWhsQyxPQUFTdWtDLEVBSTNCLEVBQUtVLFdBQVksSUFBQXRRLGNBQWEsRUFBS3FRLGFBQWFqK0IsV0FBVyxLQUFNLENBQUVtRCxPQUFPLEtBRTFFLElBQU13ekIsRUFBWTVqQyxFQUFTQyxjQUFjLFVBQ3pDMmpDLEVBQVVuOEIsTUFBUSxFQUFLb2pDLFFBQVFwUCxnQkFDL0JtSSxFQUFVMTlCLE9BQVMsRUFBSzJrQyxRQUFRblAsaUJBQ2hDLEVBQUswUCxTQUFVLElBQUF2USxjQUFhK0ksRUFBVTMyQixXQUFXLEtBQU0sQ0FBRW1ELE1BQU8sRUFBS3k2QixRQUFRLzlCLHFCQUU3RSxFQUFLdStCLE9BQVN2aEMsS0FBS3lMLE1BQU1pMUIsRUFBZ0IsRUFBS0ssUUFBUXBQLGlCQUN0RCxFQUFLNlAsUUFBVXhoQyxLQUFLeUwsTUFBTWsxQixFQUFpQixFQUFLSSxRQUFRblAsa0JBQ3hELElBQU02UCxFQUFXLEVBQUtGLE9BQVMsRUFBS0MsZUFDcEMsRUFBS0UsVUFBWSxJQUFJLEVBQUFDLE9BQU9GLEdBQzVCLEVBQUtDLFVBQVVFLFNBQVNILEtBcVE1QixPQW5Uc0MsT0FvRDdCLFlBQUFub0MsUUFBUCxXQUNvQyxPQUE5QkUsS0FBSzBuQyx1QkFDUDduQyxPQUFPNE8sYUFBYXpPLEtBQUswbkMsc0JBQ3pCMW5DLEtBQUswbkMscUJBQXVCLE9BSXpCLFlBQUE5QixXQUFQLFdBQ0U1bEMsS0FBS3duQyxrQkFBb0IsR0FHcEIsWUFBQWgvQixNQUFQLFdBQ0UsR0FBSXhJLEtBQUtrb0MsVUFBVTV5QixLQUFPLEVBQUcsQ0FDM0IsSUFBTTJ5QixFQUFXam9DLEtBQUsrbkMsT0FBUy9uQyxLQUFLZ29DLFFBQ3BDaG9DLEtBQUtrb0MsVUFBWSxJQUFJLEVBQUFDLE9BQU9GLEdBQzVCam9DLEtBQUtrb0MsVUFBVUUsU0FBU0gsR0FFMUJqb0MsS0FBSzZuQyxVQUFVOU8sVUFBVSxFQUFHLEVBQUdtTyxFQUFlQyxHQUM5Q25uQyxLQUFLOG5DLFFBQVEvTyxVQUFVLEVBQUcsRUFBRy80QixLQUFLdW5DLFFBQVFwUCxnQkFBaUJuNEIsS0FBS3VuQyxRQUFRblAsbUJBR25FLFlBQUE2QyxLQUFQLFNBQ0V2eEIsRUFDQTQ5QixFQUNBMTFCLEVBQ0FDLEdBR0EsR0FBbUIsS0FBZnkxQixFQUFNdFEsS0FDUixPQUFPLEVBSVQsSUFBS2gzQixLQUFLcW9DLFVBQVVmLEdBQ2xCLE9BQU8sRUFHVCxJQUFNZ0IsRUFBV2pCLEVBQWlCQyxHQUM1QmlCLEVBQWF2b0MsS0FBS2tvQyxVQUFVNTJCLElBQUlnM0IsR0FDdEMsR0FBSUMsTUFBQUEsRUFFRixPQURBdm9DLEtBQUt3b0MsZUFBZTkrQixFQUFLNitCLEVBQVkzMkIsRUFBR0MsSUFDakMsRUFFVCxHQUFJN1IsS0FBS3duQyxrQkExSGtCLElBMEgwQixDQUNuRCxJQUFJenhCLEVBRUZBLEVBREUvVixLQUFLa29DLFVBQVU1eUIsS0FBT3RWLEtBQUtrb0MsVUFBVUQsU0FDL0Jqb0MsS0FBS2tvQyxVQUFVNXlCLEtBR2Z0VixLQUFLa29DLFVBQVVPLE9BQVExeUIsTUFFakMsSUFBTSxFQUFhL1YsS0FBSzBvQyxhQUFhcEIsRUFBT3Z4QixHQUc1QyxPQUZBL1YsS0FBS2tvQyxVQUFVN3lCLElBQUlpekIsRUFBVSxHQUM3QnRvQyxLQUFLd29DLGVBQWU5K0IsRUFBSyxFQUFZa0ksRUFBR0MsSUFDakMsRUFFVCxPQUFPLEdBR0QsWUFBQXcyQixVQUFSLFNBQWtCZixHQVFoQixPQUFPQSxFQUFNdFEsS0FBTyxLQUdkLFlBQUEyUixlQUFSLFNBQXVCNXlCLEdBQ3JCLE9BQVFBLEVBQVEvVixLQUFLK25DLE9BQVUvbkMsS0FBS3VuQyxRQUFRcFAsaUJBR3RDLFlBQUF5USxlQUFSLFNBQXVCN3lCLEdBQ3JCLE9BQU92UCxLQUFLeUwsTUFBTThELEVBQVEvVixLQUFLK25DLFFBQVUvbkMsS0FBS3VuQyxRQUFRblAsa0JBR2hELFlBQUFvUSxlQUFSLFNBQ0U5K0IsRUFDQTYrQixFQUNBMzJCLEVBQ0FDLEdBR0EsSUFBSTAyQixFQUFXTSxRQUFmLENBR0EsSUFBTUMsRUFBUzlvQyxLQUFLMm9DLGVBQWVKLEVBQVd4eUIsT0FDeENnekIsRUFBUy9vQyxLQUFLNG9DLGVBQWVMLEVBQVd4eUIsT0FDOUNyTSxFQUFJcy9CLFVBQ0ZULEVBQVdVLFNBQVdqcEMsS0FBSzJuQyxRQUFXM25DLEtBQUs0bkMsYUFDM0NrQixFQUNBQyxFQUNBL29DLEtBQUt1bkMsUUFBUXBQLGdCQUNibjRCLEtBQUt1bkMsUUFBUW5QLGlCQUNieG1CLEVBQ0FDLEVBQ0E3UixLQUFLdW5DLFFBQVFwUCxnQkFDYm40QixLQUFLdW5DLFFBQVFuUCxvQkFJVCxZQUFBOFEsdUJBQVIsU0FBK0JDLEdBQzdCLE9BQUlBLEVBQU1ucEMsS0FBS3VuQyxRQUFRaitCLE9BQU9pQixLQUFLN00sT0FDMUJzQyxLQUFLdW5DLFFBQVFqK0IsT0FBT2lCLEtBQUs0K0IsR0FFM0IsRUFBQWhnQyxvQkFBb0JnZ0MsSUFHckIsWUFBQUMsb0JBQVIsU0FBNEI5QixHQUMxQixPQUFJdG5DLEtBQUt1bkMsUUFBUS85QixrQkFJUjQ5QixFQUVMRSxFQUFNdmhDLEtBQU8sRUFBQXMwQix1QkFDUnI2QixLQUFLdW5DLFFBQVFqK0IsT0FBT1csV0FFekJxOUIsRUFBTXZoQyxHQUFLLElBQ04vRixLQUFLa3BDLHVCQUF1QjVCLEVBQU12aEMsSUFFcEMvRixLQUFLdW5DLFFBQVFqK0IsT0FBT1ksWUFHckIsWUFBQW0vQixvQkFBUixTQUE0Qi9CLEdBQzFCLE9BQUlBLEVBQU10aEMsS0FBTyxFQUFBcTBCLHVCQUNSLEVBQUF4MEIsTUFBTWtCLE9BQU8vRyxLQUFLdW5DLFFBQVFqK0IsT0FBT1ksWUFFdENvOUIsRUFBTXRoQyxHQUFLLElBRU5oRyxLQUFLa3BDLHVCQUF1QjVCLEVBQU10aEMsSUFFcENoRyxLQUFLdW5DLFFBQVFqK0IsT0FBT1csWUFLckIsWUFBQXkrQixhQUFSLFNBQXFCcEIsRUFBeUJ2eEIsR0FDNUMvVixLQUFLd25DLG9CQUVMeG5DLEtBQUs4bkMsUUFBUTNNLE9BR2IsSUFBTXROLEVBQWtCN3RCLEtBQUtvcEMsb0JBQW9COUIsR0FHakR0bkMsS0FBSzhuQyxRQUFRaitCLHlCQUEyQixPQUN4QzdKLEtBQUs4bkMsUUFBUTM3QixVQUFZMGhCLEVBQWdCNW5CLElBQ3pDakcsS0FBSzhuQyxRQUFReDdCLFNBQVMsRUFBRyxFQUFHdE0sS0FBS3VuQyxRQUFRcFAsZ0JBQWlCbjRCLEtBQUt1bkMsUUFBUW5QLGtCQUN2RXA0QixLQUFLOG5DLFFBQVFqK0IseUJBQTJCLGNBR3hDLElBQU0reEIsRUFBYTBMLEVBQU1yUSxLQUFPajNCLEtBQUt1bkMsUUFBUTVMLGVBQWlCMzdCLEtBQUt1bkMsUUFBUTNMLFdBQ3JFME4sRUFBWWhDLEVBQU1uUSxPQUFTLFNBQVcsR0FDNUNuM0IsS0FBSzhuQyxRQUFRM08sS0FDUm1RLEVBQVMsSUFBSTFOLEVBQVUsSUFBSTU3QixLQUFLdW5DLFFBQVFoWCxTQUFXdndCLEtBQUt1bkMsUUFBUTVzQixpQkFBZ0IsTUFBTTNhLEtBQUt1bkMsUUFBUWpYLFdBQ3hHdHdCLEtBQUs4bkMsUUFBUXpPLGFBQWUsRUFBQUMsY0FFNUJ0NUIsS0FBSzhuQyxRQUFRMzdCLFVBQVluTSxLQUFLcXBDLG9CQUFvQi9CLEdBQU9yaEMsSUFHckRxaEMsRUFBTXBRLE1BQ1JsM0IsS0FBSzhuQyxRQUFReE0sWUFBYyxFQUFBQyxhQUc3QnY3QixLQUFLOG5DLFFBQVFsTyxTQUFTME4sRUFBTXZRLE1BQU8sRUFBRy8yQixLQUFLdW5DLFFBQVFuUCxrQkFJbkQsSUFBSW9JLEVBQVl4Z0MsS0FBSzhuQyxRQUFRdDdCLGFBQzNCLEVBQUcsRUFBR3hNLEtBQUt1bkMsUUFBUXBQLGdCQUFpQm40QixLQUFLdW5DLFFBQVFuUCxrQkFFL0N5USxHQUFVLEVBT2QsR0FOSzdvQyxLQUFLdW5DLFFBQVEvOUIsb0JBQ2hCcS9CLEVBQVVVLEVBQVcvSSxFQUFXM1MsSUFLOUJnYixHQUEyQixNQUFoQnZCLEVBQU12USxRQUFrQi8yQixLQUFLdW5DLFFBQVEvOUIsa0JBQ2xELElBQUssSUFBSWdnQyxFQUFTLEVBQUdBLEdBQVUsSUFFN0J4cEMsS0FBSzhuQyxRQUFRbE8sU0FBUzBOLEVBQU12USxNQUFPLEVBQUcvMkIsS0FBS3VuQyxRQUFRblAsaUJBQW1Cb1IsR0FPdEVYLEVBQVVVLEVBSFYvSSxFQUFZeGdDLEtBQUs4bkMsUUFBUXQ3QixhQUN2QixFQUFHLEVBQUd4TSxLQUFLdW5DLFFBQVFwUCxnQkFBaUJuNEIsS0FBS3VuQyxRQUFRblAsa0JBRW5CdkssSUFUQTJiLEtBZ0JwQ3hwQyxLQUFLOG5DLFFBQVF0TSxVQUdiLElBQU01cEIsRUFBSTVSLEtBQUsyb0MsZUFBZTV5QixHQUN4QmxFLEVBQUk3UixLQUFLNG9DLGVBQWU3eUIsR0FFOUIvVixLQUFLNm5DLFVBQVVoSCxhQUFhTCxFQUFXNXVCLEVBQUdDLEdBRzFDLElBQU0wMkIsRUFBYSxDQUNqQnh5QixNQUFLLEVBQ0w4eUIsUUFBTyxFQUNQSSxVQUFVLEdBSVosT0FGQWpwQyxLQUFLeXBDLGtCQUFrQmxCLEdBRWhCQSxHQUdELFlBQUFrQixrQkFBUixTQUEwQmxCLEdBQTFCLGFBS1Esc0JBQXVCMW9DLFNBQVcsRUFBQW9oQixXQUFhLEVBQUF5b0IsV0FLckQxcEMsS0FBS3luQyx1QkFBdUJ4bUMsS0FBS3NuQyxHQUdDLE9BQTlCdm9DLEtBQUswbkMsdUJBSVQxbkMsS0FBSzBuQyxxQkFBdUI3bkMsT0FBT2lDLFlBQVcsV0FBTSxTQUFLNm5DLG9CQW5UM0IsUUFzVHhCLFlBQUFBLGdCQUFSLHNCQUNRQyxFQUF1QjVwQyxLQUFLeW5DLHVCQUNsQ3puQyxLQUFLeW5DLHVCQUF5QixHQUM5QjVuQyxPQUFPZ3FDLGtCQUFrQjdwQyxLQUFLNG5DLGNBQWNrQyxNQUFLLFNBQUFDLEdBRS9DLEVBQUtwQyxRQUFVb0MsRUFJZixJQUFLLElBQUk3dEMsRUFBSSxFQUFHQSxFQUFJMHRDLEVBQXFCbHNDLE9BQVF4QixJQUNqQzB0QyxFQUFxQjF0QyxHQUc3QitzQyxVQUFXLEtBR3JCanBDLEtBQUswbkMscUJBQXVCLE1BRWhDLEVBblRBLENBQXNDLEVBQUF4QixlQUF6QixFQUFBVyxpQkFBQUEsRUF1VGIsa0JBQ0UsV0FBWW5xQyxFQUFvQmdxQyxVQUM5QixjQUFPLEtBV1gsT0FibUMsT0FLMUIsWUFBQXpMLEtBQVAsU0FDRXZ4QixFQUNBNDlCLEVBQ0ExMUIsRUFDQUMsR0FFQSxPQUFPLEdBRVgsRUFiQSxDQUFtQyxFQUFBcTBCLGVBbUJuQyxTQUFTcUQsRUFBVy9JLEVBQXNCMzZCLEdBS3hDLElBSkEsSUFBSWdqQyxHQUFVLEVBQ1JyakMsRUFBSUssRUFBTWIsT0FBUyxHQUNuQlMsRUFBSUksRUFBTWIsT0FBUyxHQUFLLElBQ3hCVSxFQUFJRyxFQUFNYixPQUFTLEVBQUksSUFDcEJ3a0MsRUFBUyxFQUFHQSxFQUFTaEosRUFBVWowQixLQUFLN08sT0FBUThyQyxHQUFVLEVBQ3pEaEosRUFBVWowQixLQUFLaTlCLEtBQVloa0MsR0FDM0JnN0IsRUFBVWowQixLQUFLaTlCLEVBQVMsS0FBTy9qQyxHQUMvQis2QixFQUFVajBCLEtBQUtpOUIsRUFBUyxLQUFPOWpDLEVBQ2pDODZCLEVBQVVqMEIsS0FBS2k5QixFQUFTLEdBQUssRUFFN0JYLEdBQVUsRUFHZCxPQUFPQSxFQWpDSSxFQUFBbUIsY0FBQUEsaUZDcldiLGlCQU9FLFdBQW1CL0IsR0FBQSxLQUFBQSxTQUFBQSxFQU5YLEtBQUFnQyxLQUE4QyxHQUM5QyxLQUFBQyxNQUFtQyxLQUNuQyxLQUFBQyxNQUFtQyxLQUNuQyxLQUFBQyxVQUFrQyxHQUNuQyxLQUFBOTBCLEtBQWUsRUFzSHhCLE9BbEhVLFlBQUErMEIsWUFBUixTQUFvQm45QixHQUNsQixJQUFNbzlCLEVBQU9wOUIsRUFBS285QixLQUNabjdCLEVBQU9qQyxFQUFLaUMsS0FDZGpDLElBQVNsTixLQUFLa3FDLFFBQ2hCbHFDLEtBQUtrcUMsTUFBUS82QixHQUVYakMsSUFBU2xOLEtBQUttcUMsUUFDaEJucUMsS0FBS21xQyxNQUFRRyxHQUVGLE9BQVRBLElBQ0ZBLEVBQUtuN0IsS0FBT0EsR0FFRCxPQUFUQSxJQUNGQSxFQUFLbTdCLEtBQU9BLElBSVIsWUFBQUMsWUFBUixTQUFvQnI5QixHQUNsQixJQUFNczlCLEVBQU94cUMsS0FBS21xQyxNQUNMLE9BQVRLLElBQ0ZBLEVBQUtyN0IsS0FBT2pDLEdBRWRBLEVBQUtvOUIsS0FBT0UsRUFDWnQ5QixFQUFLaUMsS0FBTyxLQUNablAsS0FBS21xQyxNQUFRajlCLEVBQ00sT0FBZmxOLEtBQUtrcUMsUUFDUGxxQyxLQUFLa3FDLE1BQVFoOUIsSUFXVixZQUFBazdCLFNBQVAsU0FBZ0JoVyxHQUVkLElBREEsSUFBTXFZLEVBQVd6cUMsS0FBS29xQyxVQUNibHVDLEVBQUksRUFBR0EsRUFBSWsyQixFQUFPbDJCLElBQ3pCdXVDLEVBQVN4cEMsS0FBSyxDQUNacXBDLEtBQU0sS0FDTm43QixLQUFNLEtBQ045UCxJQUFLLEtBQ0xvRSxNQUFPLFFBS04sWUFBQTZOLElBQVAsU0FBV2pTLEdBR1QsSUFBTTZOLEVBQU9sTixLQUFLaXFDLEtBQUs1cUMsR0FDdkIsWUFBYXNHLElBQVR1SCxHQUNGbE4sS0FBS3FxQyxZQUFZbjlCLEdBQ2pCbE4sS0FBS3VxQyxZQUFZcjlCLEdBQ1ZBLEVBQUt6SixPQUVQLE1BTUYsWUFBQWluQyxVQUFQLFNBQWlCcnJDLEdBQ2YsSUFBTTZOLEVBQU9sTixLQUFLaXFDLEtBQUs1cUMsR0FDdkIsWUFBYXNHLElBQVR1SCxFQUNLQSxFQUFLekosTUFFUCxNQUdGLFlBQUFnbEMsS0FBUCxXQUNFLElBQU1rQyxFQUFPM3FDLEtBQUtrcUMsTUFDbEIsT0FBZ0IsT0FBVFMsRUFBZ0IsS0FBT0EsRUFBS2xuQyxPQUc5QixZQUFBNFIsSUFBUCxTQUFXaFcsRUFBYW9FLEdBRXRCLElBQUl5SixFQUFPbE4sS0FBS2lxQyxLQUFLNXFDLEdBQ3JCLFFBQWFzRyxJQUFUdUgsRUFFRkEsRUFBT2xOLEtBQUtpcUMsS0FBSzVxQyxHQUNqQlcsS0FBS3FxQyxZQUFZbjlCLEdBQ2pCQSxFQUFLekosTUFBUUEsT0FDUixHQUFJekQsS0FBS3NWLE1BQVF0VixLQUFLaW9DLFNBRTNCLzZCLEVBQU9sTixLQUFLa3FDLE1BQ1pscUMsS0FBS3FxQyxZQUFZbjlCLFVBQ1ZsTixLQUFLaXFDLEtBQUsvOEIsRUFBSzdOLEtBQ3RCNk4sRUFBSzdOLElBQU1BLEVBQ1g2TixFQUFLekosTUFBUUEsRUFDYnpELEtBQUtpcUMsS0FBSzVxQyxHQUFPNk4sTUFDWixDQUVMLElBQU11OUIsRUFBV3pxQyxLQUFLb3FDLFVBQ2xCSyxFQUFTL3NDLE9BQVMsSUFFcEJ3UCxFQUFPdTlCLEVBQVM5cEMsT0FDWHRCLElBQU1BLEVBQ1g2TixFQUFLekosTUFBUUEsR0FFYnlKLEVBQU8sQ0FDTG85QixLQUFNLEtBQ05uN0IsS0FBTSxLQUNOOVAsSUFBRyxFQUNIb0UsTUFBSyxHQUdUekQsS0FBS2lxQyxLQUFLNXFDLEdBQU82TixFQUNqQmxOLEtBQUtzVixPQUVQdFYsS0FBS3VxQyxZQUFZcjlCLElBRXJCLEVBM0hBLEdBQWEsRUFBQWk3QixPQUFBQSw4OUJDTmIsY0FDQSxVQUNBLFNBRUEsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUVNeUMsRUFBd0IsNEJBRXhCQyxFQUFrQixZQUNsQkMsRUFBa0IsWUFDbEJDLEVBQWMsY0FHaEJDLEVBQWlCLEVBT3JCLGNBY0UsV0FDVTFVLEVBQ1Nsb0IsRUFDQTZKLEVBQ0FxSyxFQUNBMm9CLEVBQ0FDLEVBQ00xSSxFQUNZNWpCLEVBQ0R6RyxFQUNENUssR0FWbkMsTUFZRSxjQUFPLFlBWEMsRUFBQStvQixRQUFBQSxFQUNTLEVBQUFsb0IsU0FBQUEsRUFDQSxFQUFBNkosZUFBQUEsRUFDQSxFQUFBcUssaUJBQUFBLEVBQ0EsRUFBQTJvQixXQUFBQSxFQUNBLEVBQUFDLFlBQUFBLEVBRWtCLEVBQUF0c0IsaUJBQUFBLEVBQ0QsRUFBQXpHLGdCQUFBQSxFQUNELEVBQUE1SyxlQUFBQSxFQXRCM0IsRUFBQTQ5QixlQUF5QkgsSUFLekIsRUFBQS90QyxhQUE4QixHQW9CcEMsRUFBS0YsY0FBZ0JMLFNBQVNDLGNBQWMsT0FDNUMsRUFBS0ksY0FBY0gsVUFBVUMsSUF6Q0wsY0EwQ3hCLEVBQUtFLGNBQWM0RixNQUFNK2QsV0FBYSxTQUN0QyxFQUFLM2pCLGNBQWNDLGFBQWEsY0FBZSxRQUMvQyxFQUFLb3VDLG9CQUFvQixFQUFLNzlCLGVBQWV5QixLQUFNLEVBQUt6QixlQUFlclEsTUFDdkUsRUFBS211QyxvQkFBc0IzdUMsU0FBU0MsY0FBYyxPQUNsRCxFQUFLMHVDLG9CQUFvQnp1QyxVQUFVQyxJQTFDZixtQkEyQ3BCLEVBQUt3dUMsb0JBQW9CcnVDLGFBQWEsY0FBZSxRQUVyRCxFQUFLeUYsV0FBYSxDQUNoQjAxQixnQkFBaUIsRUFDakJDLGlCQUFrQixFQUNsQjNNLGdCQUFpQixFQUNqQkMsaUJBQWtCLEVBQ2xCMk0sZUFBZ0IsRUFDaEJDLGNBQWUsRUFDZmxOLGtCQUFtQixFQUNuQkcsbUJBQW9CLEVBQ3BCSixZQUFhLEVBQ2JHLGFBQWMsRUFDZC9LLGdCQUFpQixFQUNqQjdkLGlCQUFrQixHQUVwQixFQUFLb2dDLG9CQUNMLEVBQUt3SSxhQUVMLEVBQUtDLFlBQWMvSSxFQUFxQmxtQixlQUFlLEVBQUFrdkIsc0JBQXVCOXVDLFNBQVUsRUFBSzQ1QixTQUU3RixFQUFLbG9CLFNBQVN4UixVQUFVQyxJQUFJK3RDLEVBQXdCLEVBQUtPLGdCQUN6RCxFQUFLbHpCLGVBQWU3YSxZQUFZLEVBQUtMLGVBQ3JDLEVBQUtrYixlQUFlN2EsWUFBWSxFQUFLaXVDLHFCQUVyQyxFQUFLSixXQUFXL0kscUJBQW9CLFNBQUE1a0MsR0FBSyxTQUFLbXVDLGFBQWFudUMsTUFDM0QsRUFBSzJ0QyxXQUFXOUkscUJBQW9CLFNBQUE3a0MsR0FBSyxTQUFLb3VDLGFBQWFwdUMsTUFFM0QsRUFBSzR0QyxZQUFZaEoscUJBQW9CLFNBQUE1a0MsR0FBSyxTQUFLbXVDLGFBQWFudUMsTUFDNUQsRUFBSzR0QyxZQUFZL0kscUJBQW9CLFNBQUE3a0MsR0FBSyxTQUFLb3VDLGFBQWFwdUMsUUFrVGhFLE9BalhpQyxPQVkvQixzQkFBVyw4QkFBZSxLQUExQixXQUE0RCxPQUFPLElBQUksRUFBQXVRLGNBQW9DSSx1Q0FzRHBHLFlBQUFuTyxRQUFQLFdBQ0VFLEtBQUtvTyxTQUFTeFIsVUFBVWdXLE9BQU9nNEIsRUFBd0I1cUMsS0FBS21yQyxpQkFJNUQsSUFBQXByQyx5QkFBd0JDLEtBQUtqRCxjQUFlaUQsS0FBS3FyQyxvQkFBcUJyckMsS0FBSzJyQyxtQkFBb0IzckMsS0FBSzRyQyx5QkFFcEcsWUFBTTlyQyxRQUFPLFlBR1AsWUFBQWdqQyxrQkFBUixXQUNFOWlDLEtBQUt5QyxXQUFXMDFCLGdCQUFrQm40QixLQUFLNGUsaUJBQWlCemEsTUFBUXRFLE9BQU84YSxpQkFDdkUzYSxLQUFLeUMsV0FBVzIxQixpQkFBbUI1eEIsS0FBS3lCLEtBQUtqSSxLQUFLNGUsaUJBQWlCaGMsT0FBUy9DLE9BQU84YSxrQkFDbkYzYSxLQUFLeUMsV0FBV2dwQixnQkFBa0J6ckIsS0FBS3lDLFdBQVcwMUIsZ0JBQWtCM3hCLEtBQUtDLE1BQU16RyxLQUFLbVksZ0JBQWdCbUIsV0FBV2dxQixlQUMvR3RqQyxLQUFLeUMsV0FBV2lwQixpQkFBbUJsbEIsS0FBS3lMLE1BQU1qUyxLQUFLeUMsV0FBVzIxQixpQkFBbUJwNEIsS0FBS21ZLGdCQUFnQm1CLFdBQVdvSCxZQUNqSDFnQixLQUFLeUMsV0FBVzQxQixlQUFpQixFQUNqQ3I0QixLQUFLeUMsV0FBVzYxQixjQUFnQixFQUNoQ3Q0QixLQUFLeUMsV0FBVzJvQixrQkFBb0JwckIsS0FBS3lDLFdBQVdncEIsZ0JBQWtCenJCLEtBQUt1TixlQUFleUIsS0FDMUZoUCxLQUFLeUMsV0FBVzhvQixtQkFBcUJ2ckIsS0FBS3lDLFdBQVdpcEIsaUJBQW1CMXJCLEtBQUt1TixlQUFlclEsS0FDNUY4QyxLQUFLeUMsV0FBVzBvQixZQUFjM2tCLEtBQUtDLE1BQU16RyxLQUFLeUMsV0FBVzJvQixrQkFBb0J2ckIsT0FBTzhhLGtCQUNwRjNhLEtBQUt5QyxXQUFXNm9CLGFBQWU5a0IsS0FBS0MsTUFBTXpHLEtBQUt5QyxXQUFXOG9CLG1CQUFxQjFyQixPQUFPOGEsa0JBQ3RGM2EsS0FBS3lDLFdBQVc4ZCxnQkFBa0J2Z0IsS0FBS3lDLFdBQVcwb0IsWUFBY25yQixLQUFLdU4sZUFBZXlCLEtBQ3BGaFAsS0FBS3lDLFdBQVdDLGlCQUFtQjFDLEtBQUt5QyxXQUFXNm9CLGFBQWV0ckIsS0FBS3VOLGVBQWVyUSxLQUV0RixJQUFzQixVQUFBOEMsS0FBSy9DLGFBQUwsZUFBbUIsQ0FBcEMsSUFBTWlCLEVBQU8sS0FDaEJBLEVBQVF5RSxNQUFNd0IsTUFBV25FLEtBQUt5QyxXQUFXMG9CLFlBQVcsS0FDcERqdEIsRUFBUXlFLE1BQU1DLE9BQVk1QyxLQUFLeUMsV0FBV0MsaUJBQWdCLEtBQzFEeEUsRUFBUXlFLE1BQU0rZCxXQUFnQjFnQixLQUFLeUMsV0FBV0MsaUJBQWdCLEtBRTlEeEUsRUFBUXlFLE1BQU1rcEMsU0FBVyxTQUd0QjdyQyxLQUFLNHJDLDBCQUNSNXJDLEtBQUs0ckMsd0JBQTBCbHZDLFNBQVNDLGNBQWMsU0FDdERxRCxLQUFLaVksZUFBZTdhLFlBQVk0QyxLQUFLNHJDLDBCQUd2QyxJQUFNRSxFQUNEOXJDLEtBQUsrckMsa0JBQUwvckMsd0ZBSVFBLEtBQUt5QyxXQUFXOGQsZ0JBSnhCdmdCLE1BT0xBLEtBQUs0ckMsd0JBQXdCbnFDLFlBQWNxcUMsRUFFM0M5ckMsS0FBS3FyQyxvQkFBb0Ixb0MsTUFBTUMsT0FBUzVDLEtBQUtzaUIsaUJBQWlCM2YsTUFBTUMsT0FDcEU1QyxLQUFLaVksZUFBZXRWLE1BQU13QixNQUFXbkUsS0FBS3lDLFdBQVcwb0IsWUFBVyxLQUNoRW5yQixLQUFLaVksZUFBZXRWLE1BQU1DLE9BQVk1QyxLQUFLeUMsV0FBVzZvQixhQUFZLE1BRzdELFlBQUFwTixVQUFQLFNBQWlCNVUsR0FDZnRKLEtBQUtzMkIsUUFBVWh0QixFQUNmdEosS0FBS3NyQyxjQUdDLFlBQUFBLFdBQVIsc0JBQ090ckMsS0FBSzJyQyxxQkFDUjNyQyxLQUFLMnJDLG1CQUFxQmp2QyxTQUFTQyxjQUFjLFNBQ2pEcUQsS0FBS2lZLGVBQWU3YSxZQUFZNEMsS0FBSzJyQyxxQkFJdkMsSUFBSUcsRUFDQzlyQyxLQUFLK3JDLGtCQUFML3JDLHlCQUNRQSxLQUFLczJCLFFBQVFyc0IsV0FBV2hFLElBRGhDakcsa0JBRWNBLEtBQUttWSxnQkFBZ0JtQixXQUFXZ1gsV0FGOUN0d0IsZ0JBR1lBLEtBQUttWSxnQkFBZ0JtQixXQUFXaVgsU0FINUN2d0IsT0FNTDhyQyxHQUNLOXJDLEtBQUsrckMsa0JBQWlCLGNBQWMsRUFBQUMsV0FBcENoc0Msb0JBQ2NBLEtBQUttWSxnQkFBZ0JtQixXQUFXc2lCLFdBRDlDNTdCLEtBR0FBLEtBQUsrckMsa0JBQWlCLFNBQVMsRUFBQUMsV0FIL0Joc0MsbUJBSWNBLEtBQUttWSxnQkFBZ0JtQixXQUFXcWlCLGVBSjlDMzdCLEtBTUFBLEtBQUsrckMsa0JBQWlCLFNBQVMsRUFBQUUsYUFOL0Jqc0MsMEJBVUw4ckMsR0FDRSwrQkFBc0M5ckMsS0FBS21yQyxlQUEzQyxpQ0FLRlcsR0FDRSwwQkFBaUM5ckMsS0FBS21yQyxlQUF0Qyw4QkFFdUJuckMsS0FBS3MyQixRQUFRbnNCLE9BQU9sRSxJQUYzQyxhQUdZakcsS0FBS3MyQixRQUFRbHNCLGFBQWFuRSxJQUh0QyxnQ0FNdUJqRyxLQUFLczJCLFFBQVFsc0IsYUFBYW5FLElBTmpELGFBT1lqRyxLQUFLczJCLFFBQVFuc0IsT0FBT2xFLElBUGhDLE9BV0Y2bEMsR0FDSzlyQyxLQUFLK3JDLGtCQUFML3JDLG1DQUF3RSxFQUFBa3NDLGFBQVksSUFBSSxFQUFBQyx5QkFBeEZuc0MseUJBQ29CQSxLQUFLczJCLFFBQVFuc0IsT0FBT2xFLElBRHhDakcsMkJBSUFBLEtBQUsrckMsa0JBSkwvckMsNkJBSWtFLEVBQUFrc0MsYUFBWSxJQUFJLEVBQUFFLG1CQUFrQixTQUFTLEVBQUFELHlCQUo3R25zQyxtQ0FLb0NBLEtBQUttckMsZUFMekNuckMsMEJBT0FBLEtBQUsrckMsa0JBUEwvckMsNkJBT2tFLEVBQUFrc0MsYUFBWSxJQUFJLEVBQUFFLG1CQUFrQixJQUFJLEVBQUFELHlCQVB4R25zQyw2QkFRK0JBLEtBQUttckMsZUFScENuckMsMEJBVUFBLEtBQUsrckMsa0JBVkwvckMsNkJBVWtFLEVBQUFrc0MsYUFBWSxJQUFJLEVBQUFDLHlCQVZsRm5zQyx3QkFXbUJBLEtBQUtzMkIsUUFBUW5zQixPQUFPbEUsSUFYdkNqRyxZQVlRQSxLQUFLczJCLFFBQVFsc0IsYUFBYW5FLElBWmxDakcsS0FjQUEsS0FBSytyQyxrQkFkTC9yQyxpQkFjbUQsRUFBQWtzQyxhQUFZLElBQUksRUFBQUcsdUJBZG5FcnNDLGtCQWVhQSxLQUFLbVksZ0JBQWdCbUIsV0FBV2tsQixZQUFXLFVBQVV4K0IsS0FBS3MyQixRQUFRbnNCLE9BQU9sRSxJQWZ0RmpHLFdBaUJBQSxLQUFLK3JDLGtCQWpCTC9yQyxpQkFpQm1ELEVBQUFrc0MsYUFBWSxJQUFJLEVBQUFJLDZCQWpCbkV0c0MsMkJBa0JzQkEsS0FBS3MyQixRQUFRbnNCLE9BQU9sRSxJQWxCMUNqRyxXQXFCTDhyQyxHQUNLOXJDLEtBQUsrckMsa0JBQUwvckMsOEZBT0FBLEtBQUsrckMsa0JBUEwvckMsaUVBU21CQSxLQUFLczJCLFFBQVFqc0IscUJBQXFCcEUsSUFUckRqRyxLQVlMQSxLQUFLczJCLFFBQVEvckIsS0FBS3FLLFNBQVEsU0FBQzFQLEVBQUdoSixHQUM1QjR2QyxHQUNLLEVBQUtDLGtCQUFpQixLQUFLbEIsRUFBa0IzdUMsRUFBQyxhQUFhZ0osRUFBRWUsSUFBRyxNQUNoRSxFQUFLOGxDLGtCQUFpQixLQUFLakIsRUFBa0I1dUMsRUFBQyx3QkFBd0JnSixFQUFFZSxJQUFHLFNBRWxGNmxDLEdBQ0s5ckMsS0FBSytyQyxrQkFBaUIsS0FBS2xCLEVBQWtCLEVBQUF4USx1QkFBc0IsYUFBYSxFQUFBeDBCLE1BQU1rQixPQUFPL0csS0FBS3MyQixRQUFRcHNCLFlBQVlqRSxJQUFHLE1BQ3pIakcsS0FBSytyQyxrQkFBaUIsS0FBS2pCLEVBQWtCLEVBQUF6USx1QkFBc0Isd0JBQXdCcjZCLEtBQUtzMkIsUUFBUXJzQixXQUFXaEUsSUFBRyxNQUUzSGpHLEtBQUsyckMsbUJBQW1CbHFDLFlBQWNxcUMsR0FHakMsWUFBQTlJLHlCQUFQLFdBQ0VoakMsS0FBSzhpQyxxQkFHQyxZQUFBc0ksb0JBQVIsU0FBNEJwOEIsRUFBYzlSLEdBRXhDLElBQUssSUFBSWhCLEVBQUk4RCxLQUFLL0MsYUFBYVMsT0FBUXhCLEdBQUtnQixFQUFNaEIsSUFBSyxDQUNyRCxJQUFNNHBCLEVBQU1wcEIsU0FBU0MsY0FBYyxPQUNuQ3FELEtBQUtqRCxjQUFjSyxZQUFZMG9CLEdBQy9COWxCLEtBQUsvQyxhQUFhZ0UsS0FBSzZrQixHQUd6QixLQUFPOWxCLEtBQUsvQyxhQUFhUyxPQUFTUixHQUNoQzhDLEtBQUtqRCxjQUFjNkQsWUFBWVosS0FBSy9DLGFBQWEwRCxRQUk5QyxZQUFBckMsU0FBUCxTQUFnQjBRLEVBQWM5UixHQUM1QjhDLEtBQUtvckMsb0JBQW9CcDhCLEVBQU05UixHQUMvQjhDLEtBQUs4aUMscUJBR0EsWUFBQUksa0JBQVAsV0FDRWxqQyxLQUFLOGlDLHFCQUdBLFlBQUF4akMsT0FBUCxXQUNFVSxLQUFLakQsY0FBY0gsVUFBVWdXLE9BQU9tNEIsSUFHL0IsWUFBQTltQixRQUFQLFdBQ0Vqa0IsS0FBS2pELGNBQWNILFVBQVVDLElBQUlrdUMsSUFHNUIsWUFBQXhtQixtQkFBUCxTQUEwQjlsQixFQUFxQ0MsRUFBbUM4bEIsR0FFaEcsS0FBT3hrQixLQUFLcXJDLG9CQUFvQi9wQyxTQUFTNUQsUUFDdkNzQyxLQUFLcXJDLG9CQUFvQnpxQyxZQUFZWixLQUFLcXJDLG9CQUFvQi9wQyxTQUFTLElBSXpFLEdBQUs3QyxHQUFVQyxFQUFmLENBS0EsSUFBTWdsQyxFQUFtQmpsQyxFQUFNLEdBQUt1QixLQUFLdU4sZUFBZWpOLE9BQU8rQixNQUN6RHNoQyxFQUFpQmpsQyxFQUFJLEdBQUtzQixLQUFLdU4sZUFBZWpOLE9BQU8rQixNQUNyRHVoQyxFQUF5QnA5QixLQUFLd0IsSUFBSTA3QixFQUFrQixHQUNwREcsRUFBdUJyOUIsS0FBSzJCLElBQUl3N0IsRUFBZ0IzakMsS0FBS3VOLGVBQWVyUSxLQUFPLEdBR2pGLEtBQUkwbUMsR0FBMEI1akMsS0FBS3VOLGVBQWVyUSxNQUFRMm1DLEVBQXVCLEdBQWpGLENBS0EsSUFBTTBJLEVBQW1CN3ZDLFNBQVMybEIseUJBRWxDLEdBQUltQyxFQUNGK25CLEVBQWlCbnZDLFlBQ2Y0QyxLQUFLd3NDLHdCQUF3QjVJLEVBQXdCbmxDLEVBQU0sR0FBSUMsRUFBSSxHQUFJbWxDLEVBQXVCRCxFQUF5QixRQUVwSCxDQUVMLElBQU05UixFQUFXNFIsSUFBcUJFLEVBQXlCbmxDLEVBQU0sR0FBSyxFQUNwRXN6QixFQUFTNlIsSUFBMkJELEVBQWlCamxDLEVBQUksR0FBS3NCLEtBQUt1TixlQUFleUIsS0FDeEZ1OUIsRUFBaUJudkMsWUFBWTRDLEtBQUt3c0Msd0JBQXdCNUksRUFBd0I5UixFQUFVQyxJQUU1RixJQUFNZ1MsRUFBa0JGLEVBQXVCRCxFQUF5QixFQUd4RSxHQUZBMkksRUFBaUJudkMsWUFBWTRDLEtBQUt3c0Msd0JBQXdCNUksRUFBeUIsRUFBRyxFQUFHNWpDLEtBQUt1TixlQUFleUIsS0FBTSswQixJQUUvR0gsSUFBMkJDLEVBQXNCLENBRW5ELElBQU0sRUFBU0YsSUFBbUJFLEVBQXVCbmxDLEVBQUksR0FBS3NCLEtBQUt1TixlQUFleUIsS0FDdEZ1OUIsRUFBaUJudkMsWUFBWTRDLEtBQUt3c0Msd0JBQXdCM0ksRUFBc0IsRUFBRyxLQUd2RjdqQyxLQUFLcXJDLG9CQUFvQmp1QyxZQUFZbXZDLE1BUy9CLFlBQUFDLHdCQUFSLFNBQWdDMW1CLEVBQWEybUIsRUFBa0JDLEVBQWdCdnlCLFFBQUEsSUFBQUEsSUFBQUEsRUFBQSxHQUM3RSxJQUFNamMsRUFBVXhCLFNBQVNDLGNBQWMsT0FLdkMsT0FKQXVCLEVBQVF5RSxNQUFNQyxPQUFZdVgsRUFBV25hLEtBQUt5QyxXQUFXQyxpQkFBZ0IsS0FDckV4RSxFQUFReUUsTUFBTXNCLElBQVM2aEIsRUFBTTlsQixLQUFLeUMsV0FBV0MsaUJBQWdCLEtBQzdEeEUsRUFBUXlFLE1BQU1vQixLQUFVMG9DLEVBQVd6c0MsS0FBS3lDLFdBQVc4ZCxnQkFBZSxLQUNsRXJpQixFQUFReUUsTUFBTXdCLE1BQVduRSxLQUFLeUMsV0FBVzhkLGlCQUFtQm1zQixFQUFTRCxHQUFTLEtBQ3ZFdnVDLEdBR0YsWUFBQXFmLGFBQVAsYUFJTyxZQUFBa2EsaUJBQVAsV0FFRXozQixLQUFLOGlDLG9CQUNMOWlDLEtBQUtzckMsY0FHQSxZQUFBOWlDLE1BQVAsV0FDRSxJQUFnQixVQUFBeEksS0FBSy9DLGFBQUwsZUFBSixLQUNSc0YsVUFBWSxJQUlYLFlBQUE4Z0MsV0FBUCxTQUFrQjVrQyxFQUFlQyxHQUsvQixJQUpBLElBQU1pdUMsRUFBa0Izc0MsS0FBS3VOLGVBQWVqTixPQUFPMmYsTUFBUWpnQixLQUFLdU4sZUFBZWpOLE9BQU91UixFQUNoRnNPLEVBQVUzWixLQUFLMkIsSUFBSW5JLEtBQUt1TixlQUFlak4sT0FBT3NSLEVBQUc1UixLQUFLdU4sZUFBZXlCLEtBQU8sR0FDNUU2dUIsRUFBYzc5QixLQUFLbVksZ0JBQWdCbUIsV0FBV3VrQixZQUUzQ2hzQixFQUFJcFQsRUFBT29ULEdBQUtuVCxFQUFLbVQsSUFBSyxDQUNqQyxJQUFNKzZCLEVBQWE1c0MsS0FBSy9DLGFBQWE0VSxHQUNyQys2QixFQUFXcnFDLFVBQVksR0FFdkIsSUFBTXVqQixFQUFNalUsRUFBSTdSLEtBQUt1TixlQUFlak4sT0FBTytCLE1BQ3JDRixFQUFXbkMsS0FBS3VOLGVBQWVqTixPQUFPQyxNQUFNK1EsSUFBSXdVLEdBQ2hEdVksRUFBY3IrQixLQUFLbVksZ0JBQWdCbUIsV0FBVytrQixZQUNwRHVPLEVBQVd4dkMsWUFBWTRDLEtBQUt1ckMsWUFBWXNCLFVBQVUxcUMsRUFBVzJqQixFQUFLQSxJQUFRNm1CLEVBQWlCdE8sRUFBYWxlLEVBQVMwZCxFQUFhNzlCLEtBQUt5QyxXQUFXOGQsZ0JBQWlCdmdCLEtBQUt1TixlQUFleUIsU0FJdkwsc0JBQVksZ0NBQWlCLEtBQTdCLFdBQ0UsTUFBTyxJQUFJNDdCLEVBQXdCNXFDLEtBQUttckMsZ0RBR2xDLFlBQUFNLGFBQVIsU0FBcUJudUMsR0FDbkIwQyxLQUFLOHNDLGtCQUFrQnh2QyxFQUFFeVUsR0FBSXpVLEVBQUU0VSxHQUFJNVUsRUFBRTBVLEdBQUkxVSxFQUFFNlUsR0FBSTdVLEVBQUUwUixNQUFNLElBR2pELFlBQUEwOEIsYUFBUixTQUFxQnB1QyxHQUNuQjBDLEtBQUs4c0Msa0JBQWtCeHZDLEVBQUV5VSxHQUFJelUsRUFBRTRVLEdBQUk1VSxFQUFFMFUsR0FBSTFVLEVBQUU2VSxHQUFJN1UsRUFBRTBSLE1BQU0sSUFHakQsWUFBQTg5QixrQkFBUixTQUEwQmw3QixFQUFXTSxFQUFZTCxFQUFXTSxFQUFZbkQsRUFBYys5QixHQUNwRixLQUFPbjdCLElBQU1NLEdBQU1MLElBQU1NLEdBQUksQ0FDM0IsSUFBTTJULEVBQU05bEIsS0FBSy9DLGFBQWE0VSxHQUM5QixJQUFLaVUsRUFDSCxPQUVGLElBQU1rbkIsRUFBT2xuQixFQUFJeGtCLFNBQVNzUSxHQUN0Qm83QixJQUNGQSxFQUFLcnFDLE1BQU1zcUMsZUFBaUJGLEVBQVUsWUFBYyxVQUVoRG43QixHQUFLNUMsSUFDVDRDLEVBQUksRUFDSkMsT0E3V2dCLEdBcUJuQixNQUFBMHhCLHVCQUNBLE1BQUF6Z0Isa0JBQ0EsTUFBQWxKLGlCQUNBLE1BQUEvRyxpQkF4QlFzUyxHQUFiLENBQWlDLEVBQUF0aUIsWUFBcEIsRUFBQXNpQixZQUFBQSxvdEJDeEJiLGNBQ0EsU0FDQSxTQUNBLFVBQ0EsVUFFQSxVQUNBLFVBRWEsRUFBQTZtQixXQUFhLGFBQ2IsRUFBQWtCLFVBQVksWUFDWixFQUFBakIsYUFBZSxlQUNmLEVBQUFrQixnQkFBa0Isa0JBQ2xCLEVBQUFDLG9CQUFzQixzQkFDdEIsRUFBQWxCLGFBQWUsZUFDZixFQUFBRSxtQkFBcUIscUJBQ3JCLEVBQUFELHlCQUEyQixxQkFDM0IsRUFBQUUsdUJBQXlCLG1CQUN6QixFQUFBQyw2QkFBK0IseUJBRTVDLGlCQUdFLFdBQ21CcnFCLEVBQ1RxVSxFQUNrQ3JULEVBQ1I5SyxFQUNId1gsR0FKZCxLQUFBMU4sVUFBQUEsRUFDVCxLQUFBcVUsUUFBQUEsRUFDa0MsS0FBQXJULHdCQUFBQSxFQUNSLEtBQUE5SyxnQkFBQUEsRUFDSCxLQUFBd1gsYUFBQUEsRUFQekIsS0FBQTJVLFVBQXNCLElBQUksRUFBQXJILFNBZ09wQyxPQXJOUyxZQUFBL2UsVUFBUCxTQUFpQjVVLEdBQ2Z0SixLQUFLczJCLFFBQVVodEIsR0FHVixZQUFBdWpDLFVBQVAsU0FBaUIxcUMsRUFBdUIyakIsRUFBYXVuQixFQUFzQmhQLEVBQWlDbGUsRUFBaUIwZCxFQUFzQnZkLEVBQW1CdFIsR0FVcEssSUFUQSxJQUFNb1QsRUFBV3BpQixLQUFLaWlCLFVBQVVJLHlCQUUxQnNpQixFQUFlM2tDLEtBQUtpakIsd0JBQXdCMmhCLG9CQUFvQjllLEdBTWxFd25CLEVBQWEsRUFDUjE3QixFQUFJcEwsS0FBSzJCLElBQUloRyxFQUFTekUsT0FBUXNSLEdBQVEsRUFBRzRDLEdBQUssRUFBR0EsSUFDeEQsR0FBSXpQLEVBQVNpOEIsU0FBU3hzQixFQUFHNVIsS0FBS3NrQyxXQUFXekosWUFBYyxFQUFBc0ssZ0JBQW1Ca0ksR0FBZXo3QixJQUFNdU8sRUFBVSxDQUN2R210QixFQUFhMTdCLEVBQUksRUFDakIsTUFJSixJQUFTQSxFQUFJLEVBQUdBLEVBQUkwN0IsRUFBWTE3QixJQUFLLENBQ25DelAsRUFBU2k4QixTQUFTeHNCLEVBQUc1UixLQUFLc2tDLFdBQzFCLElBQUluZ0MsRUFBUW5FLEtBQUtza0MsVUFBVWprQixXQUczQixHQUFjLElBQVZsYyxFQUFKLENBS0EsSUFBSTBnQyxHQUFXLEVBQ1hDLEVBQVlsekIsRUFLWnNuQixFQUFPbDVCLEtBQUtza0MsVUFDaEIsR0FBSUssRUFBYWpuQyxPQUFTLEdBQUtrVSxJQUFNK3lCLEVBQWEsR0FBRyxHQUFJLENBQ3ZERSxHQUFXLEVBQ1gsSUFBTXgxQixFQUFRczFCLEVBQWE5akMsUUFJM0JxNEIsRUFBTyxJQUFJLEVBQUE2TCxlQUNUL2tDLEtBQUtza0MsVUFDTG5pQyxFQUFTNmlDLG1CQUFrQixFQUFNMzFCLEVBQU0sR0FBSUEsRUFBTSxJQUNqREEsRUFBTSxHQUFLQSxFQUFNLElBSW5CeTFCLEVBQVl6MUIsRUFBTSxHQUFLLEVBR3ZCbEwsRUFBUSswQixFQUFLN1ksV0FHZixJQUFNa3RCLEVBQWN2dEMsS0FBS2lpQixVQUFVdGxCLGNBQWMsUUFrQmpELEdBakJJd0gsRUFBUSxJQUNWb3BDLEVBQVk1cUMsTUFBTXdCLE1BQVdtYyxFQUFZbmMsRUFBSyxNQUc1QzBnQyxJQUdGMEksRUFBWTVxQyxNQUFNNnFDLFFBQVUsU0FLeEJydEIsR0FBV3ZPLEdBQUt1TyxHQUFXMmtCLElBQzdCM2tCLEVBQVV2TyxLQUlUNVIsS0FBSzJ2QixhQUFhdU8sZ0JBQWtCbVAsR0FBZXo3QixJQUFNdU8sRUFPNUQsT0FOQW90QixFQUFZM3dDLFVBQVVDLElBQUksRUFBQXF2QyxjQUV0QnJPLEdBQ0YwUCxFQUFZM3dDLFVBQVVDLElBQUksRUFBQXV2QyxvQkFHcEIvTixHQUNOLElBQUssTUFDSGtQLEVBQVkzd0MsVUFBVUMsSUFBSSxFQUFBd3ZDLHdCQUMxQixNQUNGLElBQUssWUFDSGtCLEVBQVkzd0MsVUFBVUMsSUFBSSxFQUFBeXZDLDhCQUMxQixNQUNGLFFBQ0VpQixFQUFZM3dDLFVBQVVDLElBQUksRUFBQXN2QywwQkFLNUJqVCxFQUFLeUIsVUFDUDRTLEVBQVkzd0MsVUFBVUMsSUFBSSxFQUFBbXZDLFlBR3hCOVMsRUFBSzhCLFlBQ1B1UyxFQUFZM3dDLFVBQVVDLElBQUksRUFBQW92QyxjQUd4Qi9TLEVBQUs2QixTQUNQd1MsRUFBWTN3QyxVQUFVQyxJQUFJLEVBQUFxd0MsV0FHeEJoVSxFQUFLd00sZUFDUDZILEVBQVkzd0MsVUFBVUMsSUFBSSxFQUFBc3dDLGlCQUd4QmpVLEVBQUt1TSxjQUNQOEgsRUFBWTlyQyxZQUFjLEVBQUFtNUIscUJBRTFCMlMsRUFBWTlyQyxZQUFjeTNCLEVBQUtTLFlBQWMsRUFBQWlCLHFCQUczQzFCLEVBQUt5TSxtQkFDUDRILEVBQVkzd0MsVUFBVUMsSUFBSSxFQUFBdXdDLHFCQUc1QixJQUFJcG5DLEVBQUtrekIsRUFBS3NCLGFBQ1Z3QixFQUFjOUMsRUFBSytDLGlCQUNuQmwyQixFQUFLbXpCLEVBQUtvQixhQUNWNkIsRUFBY2pELEVBQUtrRCxpQkFDakJqQyxJQUFjakIsRUFBS2lCLFlBQ3pCLEdBQUlBLEVBQVcsQ0FDYixJQUFNa0MsRUFBT3IyQixFQUNiQSxFQUFLRCxFQUNMQSxFQUFLczJCLEVBQ0wsSUFBTUMsRUFBUU4sRUFDZEEsRUFBY0csRUFDZEEsRUFBY0csRUFJaEIsT0FBUU4sR0FDTixLQUFLLFNBQ0wsS0FBSyxTQUNDOUMsRUFBS3lCLFVBQVkzMEIsRUFBSyxHQUFLaEcsS0FBS21ZLGdCQUFnQm1CLFdBQVdvaEIsNkJBQzdEMTBCLEdBQU0sR0FFSGhHLEtBQUt5dEMsc0JBQXNCRixFQUFhdnRDLEtBQUtzMkIsUUFBUXBzQixXQUFZbEssS0FBS3MyQixRQUFRL3JCLEtBQUt2RSxLQUN0RnVuQyxFQUFZM3dDLFVBQVVDLElBQUksWUFBWW1KLEdBRXhDLE1BQ0YsS0FBSyxTQUNILElBQU0sRUFBUSxFQUFBaEIsS0FBSzhCLFFBQ2hCZCxHQUFNLEdBQU0sSUFDWkEsR0FBTyxFQUFLLElBQ0EsSUFBYixHQUVHaEcsS0FBS3l0QyxzQkFBc0JGLEVBQWF2dEMsS0FBS3MyQixRQUFRcHNCLFdBQVksSUFDcEVsSyxLQUFLMHRDLFVBQVVILEVBQWEsVUFBVUksRUFBUzNuQyxFQUFHOUQsU0FBUyxJQUFLLElBQUssSUFFdkUsTUFFRixRQUNPbEMsS0FBS3l0QyxzQkFBc0JGLEVBQWF2dEMsS0FBS3MyQixRQUFRcHNCLFdBQVlsSyxLQUFLczJCLFFBQVFyc0IsYUFDN0Vrd0IsR0FDRm9ULEVBQVkzd0MsVUFBVUMsSUFBSSxZQUFZLEVBQUF3OUIsd0JBTTlDLE9BQVE4QixHQUNOLEtBQUssU0FDTCxLQUFLLFNBQ0hvUixFQUFZM3dDLFVBQVVDLElBQUksWUFBWWtKLEdBQ3RDLE1BQ0YsS0FBSyxTQUNIL0YsS0FBSzB0QyxVQUFVSCxFQUFhLHFCQUFxQkksRUFBUzVuQyxFQUFHN0QsU0FBUyxJQUFLLElBQUssSUFDaEYsTUFFRixRQUNNaTRCLEdBQ0ZvVCxFQUFZM3dDLFVBQVVDLElBQUksWUFBWSxFQUFBdzlCLHdCQUk1Q2pZLEVBQVNobEIsWUFBWW13QyxHQUVyQjM3QixFQUFJa3pCLEdBRU4sT0FBTzFpQixHQUdELFlBQUFxckIsc0JBQVIsU0FBOEJ2dkMsRUFBc0I2SCxFQUFZQyxHQUM5RCxHQUE2RCxJQUF6RGhHLEtBQUttWSxnQkFBZ0JtQixXQUFXdWlCLHFCQUNsQyxPQUFPLEVBSVQsSUFBSUMsRUFBZ0I5N0IsS0FBS3MyQixRQUFROXJCLGNBQWM1QixTQUFTNUksS0FBS3NrQyxVQUFVditCLEdBQUkvRixLQUFLc2tDLFVBQVV0K0IsSUFRMUYsWUFMc0JMLElBQWxCbTJCLElBQ0ZBLEVBQWdCLEVBQUFqMkIsTUFBTWMsb0JBQW9CWixFQUFJQyxFQUFJaEcsS0FBS21ZLGdCQUFnQm1CLFdBQVd1aUIsc0JBQ2xGNzdCLEtBQUtzMkIsUUFBUTlyQixjQUFjN0IsU0FBUzNJLEtBQUtza0MsVUFBVXYrQixHQUFJL0YsS0FBS3NrQyxVQUFVdCtCLEdBQUk4MUIsTUFBQUEsRUFBQUEsRUFBaUIsU0FHekZBLElBQ0Y5N0IsS0FBSzB0QyxVQUFVeHZDLEVBQVMsU0FBUzQ5QixFQUFjNzFCLE1BQ3hDLElBTUgsWUFBQXluQyxVQUFSLFNBQWtCeHZDLEVBQXNCeUUsR0FDdEN6RSxFQUFRbEIsYUFBYSxRQUFTLElBQUdrQixFQUFRbUMsYUFBYSxVQUFZLElBQUtzQyxFQUFLLE1BL045QyxHQU03QixNQUFBd2dCLHlCQUNBLE1BQUF2SixpQkFDQSxNQUFBNlcsZUFSUSthLEdBQWIsR0FtT0EsU0FBU21DLEVBQVMzcUMsRUFBYzRxQyxFQUFpQmx3QyxHQUMvQyxLQUFPc0YsRUFBS3RGLE9BQVNBLEdBQ25Cc0YsRUFBTzRxQyxFQUFVNXFDLEVBRW5CLE9BQU9BLEVBdk9JLEVBQUF3b0Msc0JBQUFBLHdGQ2ZiLGlCQXVCRSxXQUNVaitCLEdBQUEsS0FBQUEsZUFBQUEsRUFwQkgsS0FBQXNnQyxtQkFBNkIsRUFPN0IsS0FBQUMscUJBQStCLEVBb0h4QyxPQWhHUyxZQUFBNWtCLGVBQVAsV0FDRWxwQixLQUFLK29CLG9CQUFpQnBqQixFQUN0QjNGLEtBQUtpcEIsa0JBQWV0akIsRUFDcEIzRixLQUFLNnRDLG1CQUFvQixFQUN6Qjd0QyxLQUFLOHRDLHFCQUF1QixHQU05QixzQkFBVyxrQ0FBbUIsS0FBOUIsV0FDRSxPQUFJOXRDLEtBQUs2dEMsa0JBQ0EsQ0FBQyxFQUFHLEdBR1I3dEMsS0FBS2lwQixjQUFpQmpwQixLQUFLK29CLGdCQUl6Qi9vQixLQUFLK3RDLDZCQUErQi90QyxLQUFLaXBCLGFBSHZDanBCLEtBQUsrb0IsZ0RBVWhCLHNCQUFXLGdDQUFpQixLQUE1QixXQUNFLEdBQUkvb0IsS0FBSzZ0QyxrQkFDUCxNQUFPLENBQUM3dEMsS0FBS3VOLGVBQWV5QixLQUFNaFAsS0FBS3VOLGVBQWVqTixPQUFPMmYsTUFBUWpnQixLQUFLdU4sZUFBZXJRLEtBQU8sR0FHbEcsR0FBSzhDLEtBQUsrb0IsZUFBVixDQUtBLElBQUsvb0IsS0FBS2lwQixjQUFnQmpwQixLQUFLK3RDLDZCQUE4QixDQUMzRCxJQUFNQyxFQUFrQmh1QyxLQUFLK29CLGVBQWUsR0FBSy9vQixLQUFLOHRDLHFCQUN0RCxPQUFJRSxFQUFrQmh1QyxLQUFLdU4sZUFBZXlCLEtBRXBDZy9CLEVBQWtCaHVDLEtBQUt1TixlQUFleUIsTUFBUyxFQUMxQyxDQUFDaFAsS0FBS3VOLGVBQWV5QixLQUFNaFAsS0FBSytvQixlQUFlLEdBQUt2aUIsS0FBS3lMLE1BQU0rN0IsRUFBa0JodUMsS0FBS3VOLGVBQWV5QixNQUFRLEdBRS9HLENBQUNnL0IsRUFBa0JodUMsS0FBS3VOLGVBQWV5QixLQUFNaFAsS0FBSytvQixlQUFlLEdBQUt2aUIsS0FBS3lMLE1BQU0rN0IsRUFBa0JodUMsS0FBS3VOLGVBQWV5QixPQUV6SCxDQUFDZy9CLEVBQWlCaHVDLEtBQUsrb0IsZUFBZSxJQUkvQyxPQUFJL29CLEtBQUs4dEMsc0JBRUg5dEMsS0FBS2lwQixhQUFhLEtBQU9qcEIsS0FBSytvQixlQUFlLEdBQ3hDLENBQUN2aUIsS0FBS3dCLElBQUloSSxLQUFLK29CLGVBQWUsR0FBSy9vQixLQUFLOHRDLHFCQUFzQjl0QyxLQUFLaXBCLGFBQWEsSUFBS2pwQixLQUFLaXBCLGFBQWEsSUFHM0dqcEIsS0FBS2lwQiwrQ0FNUCxZQUFBOGtCLDJCQUFQLFdBQ0UsSUFBTXR2QyxFQUFRdUIsS0FBSytvQixlQUNicnFCLEVBQU1zQixLQUFLaXBCLGFBQ2pCLFNBQUt4cUIsSUFBVUMsS0FHUkQsRUFBTSxHQUFLQyxFQUFJLElBQU9ELEVBQU0sS0FBT0MsRUFBSSxJQUFNRCxFQUFNLEdBQUtDLEVBQUksS0FROUQsWUFBQXV2QyxPQUFQLFNBQWNscUIsR0FVWixPQVJJL2pCLEtBQUsrb0IsaUJBQ1Avb0IsS0FBSytvQixlQUFlLElBQU1oRixHQUV4Qi9qQixLQUFLaXBCLGVBQ1BqcEIsS0FBS2lwQixhQUFhLElBQU1sRixHQUl0Qi9qQixLQUFLaXBCLGNBQWdCanBCLEtBQUtpcEIsYUFBYSxHQUFLLEdBQzlDanBCLEtBQUtrcEIsa0JBQ0UsSUFJTGxwQixLQUFLK29CLGdCQUFrQi9vQixLQUFLK29CLGVBQWUsR0FBSyxJQUNsRC9vQixLQUFLK29CLGVBQWUsR0FBSyxJQUVwQixJQUVYLEVBL0hBLEdBQWEsRUFBQW1sQixlQUFBQSxzZ0JDTmIsY0FDQSxVQUdBLGFBWUUsV0FDRXh4QyxFQUNBdVEsRUFDa0NrTCxHQUFBLEtBQUFBLGdCQUFBQSxFQVo3QixLQUFBaFUsTUFBZ0IsRUFDaEIsS0FBQXZCLE9BQWlCLEVBS2hCLEtBQUF1ckMsa0JBQW9CLElBQUksRUFBQXRnQyxhQVE5QjdOLEtBQUtvdUMsaUJBQW1CLElBQUlDLEVBQW1CM3hDLEVBQVV1USxFQUFlak4sS0FBS21ZLGlCQVdqRixPQXJCRSxzQkFBVywyQkFBWSxLQUF2QixXQUFxQyxPQUFPblksS0FBS21FLE1BQVEsR0FBS25FLEtBQUs0QyxPQUFTLG1DQUc1RSxzQkFBVywrQkFBZ0IsS0FBM0IsV0FBOEMsT0FBTzVDLEtBQUttdUMsa0JBQWtCbGdDLHVDQVVyRSxZQUFBNFEsUUFBUCxXQUNFLElBQU1oWSxFQUFTN0csS0FBS291QyxpQkFBaUJ2dkIsVUFDakNoWSxFQUFPMUMsUUFBVW5FLEtBQUttRSxPQUFTMEMsRUFBT2pFLFNBQVc1QyxLQUFLNEMsU0FDeEQ1QyxLQUFLbUUsTUFBUTBDLEVBQU8xQyxNQUNwQm5FLEtBQUs0QyxPQUFTaUUsRUFBT2pFLE9BQ3JCNUMsS0FBS211QyxrQkFBa0J6N0IsU0F6QkQsR0FldkIsTUFBQWtILGtCQWZRaUosR0FBYixHQUFhLEVBQUFBLGdCQUFBQSxFQTZDYixpQkFJRSxXQUNVWixFQUNBcXNCLEVBQ0FuMkIsR0FGQSxLQUFBOEosVUFBQUEsRUFDQSxLQUFBcXNCLGVBQUFBLEVBQ0EsS0FBQW4yQixnQkFBQUEsRUFORixLQUFBbzJCLFFBQTBCLENBQUVwcUMsTUFBTyxFQUFHdkIsT0FBUSxHQVFwRDVDLEtBQUt3dUMsZ0JBQWtCeHVDLEtBQUtpaUIsVUFBVXRsQixjQUFjLFFBQ3BEcUQsS0FBS3d1QyxnQkFBZ0I1eEMsVUFBVUMsSUFBSSw4QkFDbkNtRCxLQUFLd3VDLGdCQUFnQi9zQyxZQUFjLElBQ25DekIsS0FBS3d1QyxnQkFBZ0J4eEMsYUFBYSxjQUFlLFFBQ2pEZ0QsS0FBS3N1QyxlQUFlbHhDLFlBQVk0QyxLQUFLd3VDLGlCQW1CekMsT0FoQlMsWUFBQTN2QixRQUFQLFdBQ0U3ZSxLQUFLd3VDLGdCQUFnQjdyQyxNQUFNMnRCLFdBQWF0d0IsS0FBS21ZLGdCQUFnQm1CLFdBQVdnWCxXQUN4RXR3QixLQUFLd3VDLGdCQUFnQjdyQyxNQUFNNHRCLFNBQWN2d0IsS0FBS21ZLGdCQUFnQm1CLFdBQVdpWCxTQUFRLEtBR2pGLElBQU1rZSxFQUFXenVDLEtBQUt3dUMsZ0JBQWdCMXFDLHdCQVN0QyxPQUx1QixJQUFuQjJxQyxFQUFTdHFDLE9BQW1DLElBQXBCc3FDLEVBQVM3ckMsU0FDbkM1QyxLQUFLdXVDLFFBQVFwcUMsTUFBUXNxQyxFQUFTdHFDLE1BQzlCbkUsS0FBS3V1QyxRQUFRM3JDLE9BQVM0RCxLQUFLeUIsS0FBS3dtQyxFQUFTN3JDLFNBR3BDNUMsS0FBS3V1QyxTQUVoQixFQWhDQSwyL0JDL0NBLGNBQ0EsU0FDQSxTQUNBLFVBR0EsY0FTRSxXQUFZRyxFQUFzQjNYLEVBQWU1eUIsR0FBakQsTUFDRSxjQUFPLFlBTkYsRUFBQW9MLFFBQWtCLEVBR2xCLEVBQUFvL0IsYUFBdUIsR0FJNUIsRUFBSzNvQyxHQUFLMG9DLEVBQVUxb0MsR0FDcEIsRUFBS0QsR0FBSzJvQyxFQUFVM29DLEdBQ3BCLEVBQUs0b0MsYUFBZTVYLEVBQ3BCLEVBQUtnUixPQUFTNWpDLElBNkJsQixPQTNDb0MsT0FpQjNCLFlBQUF5cUMsV0FBUCxXQUVFLE9BQU8sU0FHRixZQUFBdnVCLFNBQVAsV0FDRSxPQUFPcmdCLEtBQUsrbkMsUUFHUCxZQUFBcE8sU0FBUCxXQUNFLE9BQU8zNUIsS0FBSzJ1QyxjQUdQLFlBQUE5VCxRQUFQLFdBR0UsT0FBTyxTQUdGLFlBQUFnVSxnQkFBUCxTQUF1QnByQyxHQUNyQixNQUFNLElBQUl0RixNQUFNLG9CQUdYLFlBQUEyd0MsY0FBUCxXQUNFLE1BQU8sQ0FBQzl1QyxLQUFLZ0csR0FBSWhHLEtBQUsyNUIsV0FBWTM1QixLQUFLcWdCLFdBQVlyZ0IsS0FBSzY2QixZQUU1RCxFQTNDQSxDQUFvQyxFQUFBTyxlQUF2QixFQUFBMkosZUFBQUEsRUE2Q2IsaUJBT0UsV0FDMEJ4M0IsR0FBQSxLQUFBQSxlQUFBQSxFQUxsQixLQUFBd2hDLGtCQUF3QyxHQUN4QyxLQUFBQyx1QkFBaUMsRUFDakMsS0FBQTFLLFVBQXNCLElBQUksRUFBQXJILFNBbVJwQyxPQTdRUyxZQUFBNStCLFNBQVAsU0FBZ0IrTyxHQUNkLElBQU02aEMsRUFBMkIsQ0FDL0JyL0IsR0FBSTVQLEtBQUtndkMseUJBQ1Q1aEMsUUFBTyxHQUlULE9BREFwTixLQUFLK3VDLGtCQUFrQjl0QyxLQUFLZ3VDLEdBQ3JCQSxFQUFPci9CLElBR1QsWUFBQXVZLFdBQVAsU0FBa0JGLEdBQ2hCLElBQUssSUFBSS9yQixFQUFJLEVBQUdBLEVBQUk4RCxLQUFLK3VDLGtCQUFrQnJ4QyxPQUFReEIsSUFDakQsR0FBSThELEtBQUsrdUMsa0JBQWtCN3lDLEdBQUcwVCxLQUFPcVksRUFFbkMsT0FEQWpvQixLQUFLK3VDLGtCQUFrQnorQixPQUFPcFUsRUFBRyxJQUMxQixFQUlYLE9BQU8sR0FHRixZQUFBMG9DLG9CQUFQLFNBQTJCOWUsR0FDekIsR0FBc0MsSUFBbEM5bEIsS0FBSyt1QyxrQkFBa0JyeEMsT0FDekIsTUFBTyxHQUdULElBQU0yVCxFQUFPclIsS0FBS3VOLGVBQWVqTixPQUFPQyxNQUFNK1EsSUFBSXdVLEdBQ2xELElBQUt6VSxHQUF3QixJQUFoQkEsRUFBSzNULE9BQ2hCLE1BQU8sR0FnQlQsSUFiQSxJQUFNd3hDLEVBQTZCLEdBQzdCQyxFQUFVOTlCLEVBQUsyekIsbUJBQWtCLEdBTW5Db0ssRUFBbUIsRUFDbkJDLEVBQXFCLEVBQ3JCQyxFQUF3QixFQUN4QkMsRUFBY2wrQixFQUFLRyxNQUFNLEdBQ3pCZytCLEVBQWNuK0IsRUFBS28rQixNQUFNLEdBRXBCNzlCLEVBQUksRUFBR0EsRUFBSVAsRUFBS3ErQixtQkFBb0I5OUIsSUFHM0MsR0FGQVAsRUFBSytzQixTQUFTeHNCLEVBQUc1UixLQUFLc2tDLFdBRVksSUFBOUJ0a0MsS0FBS3NrQyxVQUFVamtCLFdBQW5CLENBTUEsR0FBSXJnQixLQUFLc2tDLFVBQVV0K0IsS0FBT3VwQyxHQUFldnZDLEtBQUtza0MsVUFBVXYrQixLQUFPeXBDLEVBQWEsQ0FHMUUsR0FBSTU5QixFQUFJdzlCLEVBQW1CLEVBUXpCLElBUEEsSUFBTXpLLEVBQWUza0MsS0FBSzJ2QyxpQkFDeEJSLEVBQ0FHLEVBQ0FELEVBQ0FoK0IsRUFDQSs5QixHQUVPbHpDLEVBQUksRUFBR0EsRUFBSXlvQyxFQUFham5DLE9BQVF4QixJQUN2Q2d6QyxFQUFPanVDLEtBQUswakMsRUFBYXpvQyxJQUs3Qmt6QyxFQUFtQng5QixFQUNuQjA5QixFQUF3QkQsRUFDeEJFLEVBQWN2dkMsS0FBS3NrQyxVQUFVdCtCLEdBQzdCd3BDLEVBQWN4dkMsS0FBS3NrQyxVQUFVditCLEdBRy9Cc3BDLEdBQXNCcnZDLEtBQUtza0MsVUFBVTNLLFdBQVdqOEIsUUFBVSxFQUFBazlCLHFCQUFxQmw5QixPQUlqRixHQUFJc0MsS0FBS3VOLGVBQWV5QixLQUFPb2dDLEVBQW1CLEVBUWhELElBUE16SyxFQUFlM2tDLEtBQUsydkMsaUJBQ3hCUixFQUNBRyxFQUNBRCxFQUNBaCtCLEVBQ0ErOUIsR0FFT2x6QyxFQUFJLEVBQUdBLEVBQUl5b0MsRUFBYWpuQyxPQUFReEIsSUFDdkNnekMsRUFBT2p1QyxLQUFLMGpDLEVBQWF6b0MsSUFJN0IsT0FBT2d6QyxHQVdELFlBQUFTLGlCQUFSLFNBQXlCdCtCLEVBQWN1K0IsRUFBb0JDLEVBQWtCMXRDLEVBQXVCMnZCLEdBQ2xHLElBQU05dUIsRUFBT3FPLEVBQUs1RSxVQUFVbWpDLEVBQVlDLEdBSXBDQyxFQUFzQyxHQUMxQyxJQUNFQSxFQUFrQjl2QyxLQUFLK3VDLGtCQUFrQixHQUFHM2hDLFFBQVFwSyxHQUNwRCxNQUFPdytCLEdBQ1BwMUIsUUFBUW8xQixNQUFNQSxHQUVoQixJQUFLLElBQUl0bEMsRUFBSSxFQUFHQSxFQUFJOEQsS0FBSyt1QyxrQkFBa0JyeEMsT0FBUXhCLElBRWpELElBRUUsSUFEQSxJQUFNNnpDLEVBQWUvdkMsS0FBSyt1QyxrQkFBa0I3eUMsR0FBR2tSLFFBQVFwSyxHQUM5Q2lULEVBQUksRUFBR0EsRUFBSTg1QixFQUFhcnlDLE9BQVF1WSxJQUN2Q2lOLEVBQXVCOHNCLGFBQWFGLEVBQWlCQyxFQUFhOTVCLElBRXBFLE1BQU91ckIsR0FDUHAxQixRQUFRbzFCLE1BQU1BLEdBSWxCLE9BREF4aEMsS0FBS2l3QywwQkFBMEJILEVBQWlCM3RDLEVBQVUydkIsR0FDbkRnZSxHQVdELFlBQUFHLDBCQUFSLFNBQWtDZixFQUE0Qjc5QixFQUFtQnlnQixHQUMvRSxJQUFJb2UsRUFBb0IsRUFDcEJDLEdBQXNCLEVBQ3RCZCxFQUFxQixFQUNyQmUsRUFBZWxCLEVBQU9nQixHQUcxQixHQUFLRSxFQUFMLENBSUEsSUFBSyxJQUFJeCtCLEVBQUlrZ0IsRUFBVWxnQixFQUFJNVIsS0FBS3VOLGVBQWV5QixLQUFNNEMsSUFBSyxDQUN4RCxJQUFNek4sRUFBUWtOLEVBQUtnUCxTQUFTek8sR0FDdEIsRUFBU1AsRUFBS2cvQixVQUFVeitCLEdBQUdsVSxRQUFVLEVBQUFrOUIscUJBQXFCbDlCLE9BSWhFLEdBQWMsSUFBVnlHLEVBQUosQ0FXQSxJQU5LZ3NDLEdBQXVCQyxFQUFhLElBQU1mLElBQzdDZSxFQUFhLEdBQUt4K0IsRUFDbEJ1K0IsR0FBc0IsR0FJcEJDLEVBQWEsSUFBTWYsRUFBb0IsQ0FPekMsR0FOQWUsRUFBYSxHQUFLeCtCLElBR2xCdytCLEVBQWVsQixJQUFTZ0IsSUFJdEIsTUFPRUUsRUFBYSxJQUFNZixHQUNyQmUsRUFBYSxHQUFLeCtCLEVBQ2xCdStCLEdBQXNCLEdBRXRCQSxHQUFzQixFQU0xQmQsR0FBc0IsR0FLcEJlLElBQ0ZBLEVBQWEsR0FBS3B3QyxLQUFLdU4sZUFBZXlCLFFBWTNCLEVBQUFnaEMsYUFBZixTQUE0QmQsRUFBNEJvQixHQUV0RCxJQURBLElBQUlDLEdBQVUsRUFDTHIwQyxFQUFJLEVBQUdBLEVBQUlnekMsRUFBT3h4QyxPQUFReEIsSUFBSyxDQUN0QyxJQUFNbVQsRUFBUTYvQixFQUFPaHpDLEdBQ3JCLEdBQUtxMEMsRUFBTCxDQXdCRSxHQUFJRCxFQUFTLElBQU1qaEMsRUFBTSxHQUl2QixPQURBNi9CLEVBQU9oekMsRUFBSSxHQUFHLEdBQUtvMEMsRUFBUyxHQUNyQnBCLEVBR1QsR0FBSW9CLEVBQVMsSUFBTWpoQyxFQUFNLEdBS3ZCLE9BRkE2L0IsRUFBT2h6QyxFQUFJLEdBQUcsR0FBS3NLLEtBQUt3QixJQUFJc29DLEVBQVMsR0FBSWpoQyxFQUFNLElBQy9DNi9CLEVBQU81K0IsT0FBT3BVLEVBQUcsR0FDVmd6QyxFQUtUQSxFQUFPNStCLE9BQU9wVSxFQUFHLEdBQ2pCQSxRQTFDRixDQUNFLEdBQUlvMEMsRUFBUyxJQUFNamhDLEVBQU0sR0FHdkIsT0FEQTYvQixFQUFPNStCLE9BQU9wVSxFQUFHLEVBQUdvMEMsR0FDYnBCLEVBR1QsR0FBSW9CLEVBQVMsSUFBTWpoQyxFQUFNLEdBSXZCLE9BREFBLEVBQU0sR0FBSzdJLEtBQUsyQixJQUFJbW9DLEVBQVMsR0FBSWpoQyxFQUFNLElBQ2hDNi9CLEVBR0xvQixFQUFTLEdBQUtqaEMsRUFBTSxLQUd0QkEsRUFBTSxHQUFLN0ksS0FBSzJCLElBQUltb0MsRUFBUyxHQUFJamhDLEVBQU0sSUFDdkNraEMsR0FBVSxJQW9DaEIsT0FSSUEsRUFFRnJCLEVBQU9BLEVBQU94eEMsT0FBUyxHQUFHLEdBQUs0eUMsRUFBUyxHQUd4Q3BCLEVBQU9qdUMsS0FBS3F2QyxHQUdQcEIsR0F0UkVoc0IsRUFBc0IsR0FROUIsTUFBQXJRLGlCQVJRcVEsR0FBYixHQUFhLEVBQUFBLHVCQUFBQSw2RkNuRGIsaUJBR0UsV0FDVXdNLEdBQUEsS0FBQUEsVUFBQUEsRUFRWixPQUpFLHNCQUFXLHdCQUFTLEtBQXBCLFdBRUUsT0FEd0IxdkIsS0FBSzB2QixVQUFVOGdCLFlBQWN4d0MsS0FBSzB2QixVQUFVOGdCLGNBQXlDOXpDLFVBQ3RGK3pDLGdCQUFrQnp3QyxLQUFLMHZCLFdBQWFoekIsU0FBU2cwQyw0Q0FFeEUsRUFaQSxHQUFhLEVBQUFodUIsbUJBQUFBLGkvQkNEYixjQUNBLFNBQ0EsVUFHQSxjQVFFLFdBQW9EckcsR0FBcEQsTUFBb0csY0FBTyxZQUF2RCxFQUFBQSxzQkFBQUEsRUFObkMsRUFBQXMwQixhQUE2QixLQXdEaEQsT0ExRHVDLE9BVTlCLFlBQUF6aUMsWUFBUCxTQUFtQnRLLEVBQTRCZ1EsR0FBL0MsV0FDRTVULEtBQUszRCxlQUFpQnVYLEVBQ3RCNVQsS0FBS2lZLGVBQWlCclUsRUFDdEI1RCxLQUFLbzJCLFdBQWExNUIsU0FBU0MsY0FBYyxPQUN6Q3FELEtBQUtvMkIsV0FBV3g1QixVQUFVQyxJQUFJLDhCQUM5QitHLEVBQWN4RyxZQUFZNEMsS0FBS28yQixZQUMvQnAyQixLQUFLM0IsU0FBUzJCLEtBQUszRCxlQUFlK2Esd0JBQXVCLFdBQU0sU0FBS3BWLGNBQ3BFaEMsS0FBSzNCLFNBQVMyQixLQUFLM0QsZUFBZW1ELG9CQUFtQixXQUFNLFNBQUt3QyxTQUFRLFFBR25FLFlBQUF3bUIsbUJBQVAsU0FBMEJDLEdBQTFCLFdBQ0UsSUFBSUEsRUFBa0Jtb0IsT0FBT0MsWUFBZTd3QyxLQUFLbzJCLFdBQWpELENBR0EsSUFBTTBhLEVBQWE5d0MsS0FBS3FjLHNCQUFzQkMsZUFBZXkwQixFQUFZdG9CLEVBQW1Cem9CLEtBQUtvMkIsWUFJakcsT0FIQXAyQixLQUFLMndDLGFBQWExdkMsS0FBSzZ2QyxHQUN2QkEsRUFBV0UsV0FBVSxXQUFNLFNBQUtMLGFBQWFyZ0MsT0FBTyxFQUFLcWdDLGFBQWExL0IsUUFBUTYvQixHQUFhLE1BQzNGOXdDLEtBQUtpeEMsZ0JBQ0VILElBR0QsWUFBQUcsY0FBUiwyQkFDK0J0ckMsSUFBekIzRixLQUFLK1osa0JBR1QvWixLQUFLK1osZ0JBQWtCbGEsT0FBTzBhLHVCQUFzQixXQUNsRCxFQUFLdlksVUFDTCxFQUFLK1gscUJBQWtCcFUsT0FJcEIsWUFBQTNELFFBQVAsU0FBZWt2QyxHQUNiLEdBQUtseEMsS0FBSzNELGVBR1YsSUFBeUIsVUFBQTJELEtBQUsyd0MsYUFBTCxlQUFKLEtBQ1JRLE9BQU9ueEMsS0FBSzNELGVBQWdCNjBDLElBSXBDLFlBQUFweEMsUUFBUCxXQUNFLElBQXlCLFVBQUFFLEtBQUsyd0MsYUFBTCxlQUFKLEtBQ1I3d0MsVUFFVEUsS0FBS2lZLGdCQUFrQmpZLEtBQUtvMkIsWUFBY3AyQixLQUFLaVksZUFBZTdELFNBQVNwVSxLQUFLbzJCLGFBQzlFcDJCLEtBQUtpWSxlQUFlclgsWUFBWVosS0FBS28yQixhQXZEYixHQVFmLE1BQUFtTix3QkFSRjltQixHQUFiLENBQXVDLEVBQUE1WixZQUExQixFQUFBNFosa0JBQUFBLEVBMkRiLGtCQW9CRSxXQUNFcFAsRUFDaUIrb0IsRUFDZ0I3b0IsU0FIbkMsRUFLRSxjQUFPLFlBSFUsRUFBQTZvQixXQUFBQSxFQUNnQixFQUFBN29CLGVBQUFBLEVBbkI1QixFQUFBc2pDLFlBQXNCLEVBS3JCLEVBQUFPLFdBQWEsSUFBSSxFQUFBdmpDLGFBR2pCLEVBQUE4TixVQUFZLElBQUksRUFBQTlOLGFBY3RCLEVBQUsrRCxFQUFhLFFBQVQsRUFBQXZFLEVBQVF1RSxTQUFDLFFBQUksRUFDdEIsRUFBS3kvQixRQUFVaGtDLEVBQVF1akMsT0FDdkIsRUFBS1MsUUFBUUwsV0FBVSxXQUFNLFNBQUtseEMsYUFDbEMsRUFBS3d4QyxPQUFTamtDLEVBQVFpa0MsUUFBVSxPQUNoQyxFQUFLbnRDLE1BQVFrSixFQUFRbEosT0FBUyxFQUM5QixFQUFLdkIsT0FBU3lLLEVBQVF6SyxRQUFVLElBOERwQyxPQTdGZ0MsT0FNOUIsc0JBQVcsc0JBQU8sS0FBbEIsV0FBZ0QsT0FBTzVDLEtBQUtvTywwQ0FDNUQsc0JBQVcscUJBQU0sS0FBakIsV0FBK0IsT0FBT3BPLEtBQUtxeEMseUNBRzNDLHNCQUFXLHdCQUFTLEtBQXBCLFdBQXVDLE9BQU9yeEMsS0FBS294QyxXQUFXbmpDLHVDQUc5RCxzQkFBVyx1QkFBUSxLQUFuQixXQUE2QyxPQUFPak8sS0FBSzJiLFVBQVUxTix1Q0FxQjVELFlBQUFrakMsT0FBUCxTQUFjdjlCLEVBQStCczlCLEdBQ3RDbHhDLEtBQUtvTyxXQUFZOGlDLEdBQ3BCbHhDLEtBQUt1eEMsZUFBZTM5QixFQUFlczlCLEdBRWpDbHhDLEtBQUtvMkIsWUFBY3AyQixLQUFLb08sV0FBYXBPLEtBQUtvMkIsV0FBV2hpQixTQUFTcFUsS0FBS29PLFdBQ3JFcE8sS0FBS28yQixXQUFXb2IsT0FBT3h4QyxLQUFLb08sVUFFOUJwTyxLQUFLeXhDLGNBQWM3OUIsR0FDZjVULEtBQUtvTyxVQUNQcE8sS0FBSzJiLFVBQVVqSixLQUFLMVMsS0FBS29PLFdBSXJCLFlBQUFtakMsZUFBUixTQUF1QjM5QixFQUErQnM5QixHQUNoREEsR0FBa0JseEMsS0FBS29PLFVBQVlwTyxLQUFLbzJCLFdBQVdoaUIsU0FBU3BVLEtBQUtvTyxXQUNuRXBPLEtBQUtvMkIsV0FBV3gxQixZQUFZWixLQUFLb08sVUFFbkNwTyxLQUFLb08sU0FBVzFSLFNBQVNDLGNBQWMsT0FDdkNxRCxLQUFLb08sU0FBU3hSLFVBQVVDLElBQUksb0JBQzVCbUQsS0FBS29PLFNBQVN6TCxNQUFNd0IsTUFBV25FLEtBQUttRSxNQUFReVAsRUFBY25SLFdBQVc4ZCxnQkFBZSxLQUNwRnZnQixLQUFLb08sU0FBU3pMLE1BQU1DLE9BQVk1QyxLQUFLNEMsT0FBU2dSLEVBQWNuUixXQUFXQyxpQkFBZ0IsS0FDdkYxQyxLQUFLb08sU0FBU3pMLE1BQU1zQixLQUFVakUsS0FBSzR3QyxPQUFPdi9CLEtBQU9yUixLQUFLdU4sZUFBZWlSLFFBQVFDLE9BQU9wYyxPQUFTdVIsRUFBY25SLFdBQVdDLGlCQUFnQixLQUN0STFDLEtBQUtvTyxTQUFTekwsTUFBTStkLFdBQWdCOU0sRUFBY25SLFdBQVdDLGlCQUFnQixLQUV6RTFDLEtBQUs0UixHQUFLNVIsS0FBSzRSLEVBQUk1UixLQUFLdU4sZUFBZXlCLE9BRXpDaFAsS0FBS29PLFNBQVN6TCxNQUFNNnFDLFFBQVUsUUFFWixVQUFoQnh0QyxLQUFLc3hDLE9BQ1B0eEMsS0FBS29PLFNBQVN6TCxNQUFNK3VDLE1BQVExeEMsS0FBSzRSLEVBQU81UixLQUFLNFIsRUFBSWdDLEVBQWNuUixXQUFXOGQsZ0JBQWUsS0FBTyxHQUVoR3ZnQixLQUFLb08sU0FBU3pMLE1BQU1vQixLQUFPL0QsS0FBSzRSLEVBQU81UixLQUFLNFIsRUFBSWdDLEVBQWNuUixXQUFXOGQsZ0JBQWUsS0FBTyxJQUkzRixZQUFBa3hCLGNBQVIsU0FBc0I3OUIsR0FDcEIsR0FBSzVULEtBQUtvTyxTQUFWLENBR0EsSUFBTWlELEVBQU9yUixLQUFLNHdDLE9BQU92L0IsS0FBT3JSLEtBQUt1TixlQUFlaVIsUUFBUUMsT0FBT3BjLE1BQy9EZ1AsRUFBTyxHQUFLQSxFQUFPclIsS0FBS3VOLGVBQWVyUSxLQUV6QzhDLEtBQUtvTyxTQUFTekwsTUFBTTZxQyxRQUFVLFFBRTlCeHRDLEtBQUtvTyxTQUFTekwsTUFBTXNCLElBQVNvTixFQUFPdUMsRUFBY25SLFdBQVdDLGlCQUFnQixLQUM3RTFDLEtBQUtvTyxTQUFTekwsTUFBTTZxQyxRQUFVeHRDLEtBQUt1TixlQUFlak4sU0FBV04sS0FBS3VOLGVBQWVpUixRQUFReUgsSUFBTSxPQUFTLFdBSTVGLFlBQUFubUIsUUFBaEIsV0FDTUUsS0FBSzZ3QyxhQUdMN3dDLEtBQUtvTyxVQUFZcE8sS0FBS28yQixXQUFXaGlCLFNBQVNwVSxLQUFLb08sV0FDakRwTyxLQUFLbzJCLFdBQVd4MUIsWUFBWVosS0FBS29PLFVBRW5DcE8sS0FBSzZ3QyxZQUFhLEVBQ2xCN3dDLEtBQUtveEMsV0FBVzErQixTQTNGRyxHQXVCbEIsTUFBQUcsaUJBdkJRaytCLEdBQWIsQ0FBZ0MsRUFBQWx1QyxZQUFuQixFQUFBa3VDLFdBQUFBLG9nQkNqRWIsY0FDQSxVQUVBLGFBR0UsV0FDbUMxMEMsRUFDRXVpQixHQURGLEtBQUF2aUIsZUFBQUEsRUFDRSxLQUFBdWlCLGlCQUFBQSxFQXFCdkMsT0FqQlMsWUFBQTlHLFVBQVAsU0FBaUI3SixFQUEyQy9QLEVBQXNCMHlCLEVBQWtCelcsRUFBa0IyVyxHQUNwSCxPQUFPLElBQUFoWixXQUNMN0osRUFDQS9QLEVBQ0EweUIsRUFDQXpXLEVBQ0FuYSxLQUFLNGUsaUJBQWlCZ00sYUFDdEI1cUIsS0FBSzNELGVBQWVvRyxXQUFXOGQsZ0JBQy9CdmdCLEtBQUszRCxlQUFlb0csV0FBV0MsaUJBQy9Cb3VCLElBSUcsWUFBQXRMLGlCQUFQLFNBQXdCdlgsRUFBbUIvUCxFQUFzQjB5QixFQUFrQnpXLEdBQ2pGLElBQU10QyxFQUFTN1gsS0FBSzhYLFVBQVU3SixFQUFPL1AsRUFBUzB5QixFQUFVelcsR0FDeEQsT0FBTyxJQUFBcUwsa0JBQWlCM04sSUF4QkgsR0FJcEIsTUFBQXlMLGdCQUNBLE1BQUFSLG1CQUxRZSxHQUFiLEdBQWEsRUFBQUEsYUFBQUEsZytCQ0ZiLGNBQ0EsVUFDQSxTQUNBLFVBQ0EsVUFFQSxVQUNBLFVBUUEsY0EyQkUsV0FDVTh0QixFQUNBdjNCLEVBQ1J4VyxFQUNpQnFiLEVBQ2tCTCxFQUNuQnNTLEdBTmxCLE1BUUUsY0FBTyxLQXlCUCxHQWhDUSxFQUFBeWdCLFVBQUFBLEVBQ0EsRUFBQXYzQixVQUFBQSxFQUcyQixFQUFBd0UsaUJBQUFBLEVBMUI3QixFQUFBZ3pCLFdBQXFCLEVBQ3JCLEVBQUFDLG1CQUE2QixFQUM3QixFQUFBQyx5QkFBbUMsRUFDbkMsRUFBQUMsd0JBQWtDLEVBQ2xDLEVBQUFDLGFBQXVCLEVBQ3ZCLEVBQUFDLGNBQXdCLEVBQ3hCLEVBQUFDLGdCQUFtQyxDQUN6Q3p6QyxXQUFPa0gsRUFDUGpILFNBQUtpSCxFQUNMNmUsa0JBQWtCLEdBR1osRUFBQTJ0QixvQkFBc0IsSUFBSSxFQUFBdGtDLGFBRTFCLEVBQUE4TixVQUFZLElBQUksRUFBQTlOLGFBRWhCLEVBQUF1a0Msa0JBQW9CLElBQUksRUFBQXZrQyxhQWU5QixFQUFLeFAsU0FBUyxDQUFFeUIsUUFBUyxXQUFNLFNBQUs2eEMsVUFBVTd4QyxhQUU5QyxFQUFLdXlDLGlCQUFtQixJQUFJLEVBQUE1M0IsaUJBQWdCLFNBQUNoYyxFQUFPQyxHQUFRLFNBQUtaLFlBQVlXLEVBQU9DLE1BQ3BGLEVBQUtMLFNBQVMsRUFBS2cwQyxrQkFFbkIsRUFBSzV5QyxrQkFBb0IsSUFBSSxFQUFBQyxpQkFDN0IsRUFBS0Qsa0JBQWtCRSxhQUFZLFdBQU0sU0FBS3FqQyw4QkFDOUMsRUFBSzNrQyxTQUFTLEVBQUtvQixtQkFFbkIsRUFBS3BCLFNBQVM2eUIsRUFBYzV5QixVQUFTLFdBQU0sU0FBS2cwQyxtQkFDaEQsRUFBS2owQyxTQUFTNnlCLEVBQWMxUyxRQUFRa1Asa0JBQWlCLGlCQUFNLE9BQWMsUUFBZCxJQUFLaWtCLGlCQUFTLGVBQUVucEMsWUFDM0UsRUFBS25LLFNBQVM0Z0IsRUFBZStELGdCQUFlLFdBQU0sU0FBSzJ1QixVQUFVbGEsdUJBQ2pFLEVBQUtwNUIsU0FBUyxFQUFLdWdCLGlCQUFpQjJ6QixrQkFBaUIsV0FBTSxTQUFLclAsd0JBR2hFLEVBQUt5TyxVQUFVcnRCLGlCQUFnQixTQUFBaG5CLEdBQUssU0FBS29xQixZQUFZcHFCLEVBQUVtQixNQUFPbkIsRUFBRW9CLEtBQUssTUFJckUsRUFBS0wsVUFBUyxJQUFBdUIsMEJBQXlCQyxPQUFRLFVBQVUsV0FBTSxTQUFLbWpDLCtCQUloRSx5QkFBMEJuakMsT0FBUSxDQUNwQyxJQUFNLEVBQVcsSUFBSTJ5QyxzQkFBcUIsU0FBQWwxQyxHQUFLLFNBQUttMUMsc0JBQXNCbjFDLEVBQUVBLEVBQUVJLE9BQVMsTUFBSyxDQUFFZzFDLFVBQVcsSUFDekcsRUFBU0MsUUFBUS91QyxHQUNqQixFQUFLdkYsU0FBUyxDQUFFeUIsUUFBUyxXQUFNLFNBQVM4eUMseUJBMEk5QyxPQXpNbUMsT0FtQmpDLHNCQUFXLGlDQUFrQixLQUE3QixXQUE2RCxPQUFPNXlDLEtBQUtteUMsb0JBQW9CbGtDLHVDQUU3RixzQkFBVyxxQ0FBc0IsS0FBakMsV0FBOEUsT0FBT2pPLEtBQUsyYixVQUFVMU4sdUNBRXBHLHNCQUFXLCtCQUFnQixLQUEzQixXQUF3RSxPQUFPak8sS0FBS295QyxrQkFBa0Jua0MsdUNBRXRHLHNCQUFXLHlCQUFVLEtBQXJCLFdBQTZDLE9BQU9qTyxLQUFLMnhDLFVBQVVsdkMsNENBMEMzRCxZQUFBZ3dDLHNCQUFSLFNBQThCbE0sR0FDNUJ2bUMsS0FBSzR4QyxlQUFxQ2pzQyxJQUF6QjRnQyxFQUFNc00sZUFBNEQsSUFBNUJ0TSxFQUFNdU0sbUJBQTRCdk0sRUFBTXNNLGVBRzFGN3lDLEtBQUs0eEMsV0FBYzV4QyxLQUFLNGUsaUJBQWlCZ00sY0FDNUM1cUIsS0FBSzRlLGlCQUFpQkMsV0FHbkI3ZSxLQUFLNHhDLFdBQWE1eEMsS0FBSzZ4QyxvQkFDMUI3eEMsS0FBSzBuQixZQUFZLEVBQUcxbkIsS0FBS29hLFVBQVksR0FDckNwYSxLQUFLNnhDLG1CQUFvQixJQUl0QixZQUFBbnFCLFlBQVAsU0FBbUJqcEIsRUFBZUMsRUFBYXEwQyxRQUFBLElBQUFBLElBQUFBLEdBQUEsR0FDekMveUMsS0FBSzR4QyxVQUNQNXhDLEtBQUs2eEMsbUJBQW9CLEdBR3RCa0IsSUFDSC95QyxLQUFLOHhDLHlCQUEwQixHQUVqQzl4QyxLQUFLcXlDLGlCQUFpQnJ3QyxRQUFRdkQsRUFBT0MsRUFBS3NCLEtBQUtvYSxhQUd6QyxZQUFBdGMsWUFBUixTQUFvQlcsRUFBZUMsR0FDakNzQixLQUFLMnhDLFVBQVV0TyxXQUFXNWtDLEVBQU9DLEdBRzdCc0IsS0FBSyt4Qyx5QkFDUC94QyxLQUFLMnhDLFVBQVVwdEIsbUJBQW1CdmtCLEtBQUtreUMsZ0JBQWdCenpDLE1BQU91QixLQUFLa3lDLGdCQUFnQnh6QyxJQUFLc0IsS0FBS2t5QyxnQkFBZ0IxdEIsa0JBQzdHeGtCLEtBQUsreEMsd0JBQXlCLEdBSTNCL3hDLEtBQUs4eEMseUJBQ1I5eEMsS0FBSzJiLFVBQVVqSixLQUFLLENBQUVqVSxNQUFLLEVBQUVDLElBQUcsSUFFbENzQixLQUFLOHhDLHlCQUEwQixHQUcxQixZQUFBdnVCLE9BQVAsU0FBY3ZVLEVBQWM5UixHQUMxQjhDLEtBQUtvYSxVQUFZbGQsRUFDakI4QyxLQUFLZ3pDLHVCQUdBLFlBQUFDLGNBQVAsV0FDRWp6QyxLQUFLMnhDLFVBQVVsYSxtQkFDZnozQixLQUFLMG5CLFlBQVksRUFBRzFuQixLQUFLb2EsVUFBWSxHQUNyQ3BhLEtBQUtnekMsdUJBR0MsWUFBQUEsb0JBQVIsV0FFTWh6QyxLQUFLMnhDLFVBQVVsdkMsV0FBVzBvQixjQUFnQm5yQixLQUFLZ3lDLGNBQWdCaHlDLEtBQUsyeEMsVUFBVWx2QyxXQUFXNm9CLGVBQWlCdHJCLEtBQUtpeUMsZUFHbkhqeUMsS0FBS215QyxvQkFBb0J6L0IsS0FBSzFTLEtBQUsyeEMsVUFBVWx2QyxhQUd4QyxZQUFBM0MsUUFBUCxXQUNFLFlBQU1BLFFBQU8sWUFHUixZQUFBZ2YsWUFBUCxTQUFtQnNFLEdBQW5CLFdBRUVwakIsS0FBSzJ4QyxVQUFVN3hDLFVBQ2ZFLEtBQUsyeEMsVUFBWXZ1QixFQUNqQnBqQixLQUFLMnhDLFVBQVVydEIsaUJBQWdCLFNBQUFobkIsR0FBSyxTQUFLb3FCLFlBQVlwcUIsRUFBRW1CLE1BQU9uQixFQUFFb0IsS0FBSyxNQUdyRXNCLEtBQUsreEMsd0JBQXlCLEVBQzlCL3hDLEtBQUtzeUMsZ0JBR0MsWUFBQUEsYUFBUixXQUNNdHlDLEtBQUs0eEMsVUFDUDV4QyxLQUFLNnhDLG1CQUFvQixFQUV6Qjd4QyxLQUFLMG5CLFlBQVksRUFBRzFuQixLQUFLb2EsVUFBWSxJQUlsQyxZQUFBNFEsa0JBQVAsbUJBQ21DLFFBQWpDLEVBQWMsUUFBZCxFQUFBaHJCLEtBQUsyeEMsaUJBQVMsZUFBRTNtQix5QkFBaUIsaUJBQ2pDaHJCLEtBQUtzeUMsZ0JBR0EsWUFBQXAwQixVQUFQLFNBQWlCNVUsR0FDZnRKLEtBQUsyeEMsVUFBVXp6QixVQUFVNVUsR0FDekJ0SixLQUFLc3lDLGdCQUdBLFlBQUF0UCx5QkFBUCxXQUdFaGpDLEtBQUs0ZSxpQkFBaUJDLFVBRXRCN2UsS0FBSzJ4QyxVQUFVM08sMkJBQ2ZoakMsS0FBSzBuQixZQUFZLEVBQUcxbkIsS0FBS29hLFVBQVksSUFHaEMsWUFBQTliLFNBQVAsU0FBZ0IwUSxFQUFjOVIsR0FDNUI4QyxLQUFLMnhDLFVBQVVyekMsU0FBUzBRLEVBQU05UixHQUM5QjhDLEtBQUtzeUMsZ0JBSUEsWUFBQXBQLGtCQUFQLFdBQ0VsakMsS0FBSzJ4QyxVQUFVek8scUJBR1YsWUFBQTVqQyxPQUFQLFdBQ0VVLEtBQUsyeEMsVUFBVXJ5QyxVQUdWLFlBQUEya0IsUUFBUCxXQUNFamtCLEtBQUsyeEMsVUFBVTF0QixXQUdWLFlBQUFNLG1CQUFQLFNBQTBCOWxCLEVBQXFDQyxFQUFtQzhsQixHQUNoR3hrQixLQUFLa3lDLGdCQUFnQnp6QyxNQUFRQSxFQUM3QnVCLEtBQUtreUMsZ0JBQWdCeHpDLElBQU1BLEVBQzNCc0IsS0FBS2t5QyxnQkFBZ0IxdEIsaUJBQW1CQSxFQUN4Q3hrQixLQUFLMnhDLFVBQVVwdEIsbUJBQW1COWxCLEVBQU9DLEVBQUs4bEIsSUFHekMsWUFBQWpILGFBQVAsV0FDRXZkLEtBQUsyeEMsVUFBVXAwQixnQkFHVixZQUFBL1UsTUFBUCxXQUNFeEksS0FBSzJ4QyxVQUFVbnBDLFNBdk1PLEdBK0JyQixNQUFBb1IsaUJBQ0EsTUFBQWtKLGtCQUNBLE1BQUFqUSxpQkFqQ1F3USxHQUFiLENBQW1DLEVBQUF4Z0IsWUFBdEIsRUFBQXdnQixjQUFBQSxtK0JDYmIsY0FDQSxTQUNBLFNBQ0EsVUFDQSxVQUVBLFVBQ0EsVUFDQSxVQUNBLFNBQ0EsVUF3Qk02dkIsRUFBMEI1b0IsT0FBT0MsYUFBYSxLQUM5QzRvQixFQUErQixJQUFJdmlDLE9BQU9zaUMsRUFBeUIsS0E0QnpFLGNBbURFLFdBQ21COWtDLEVBQ0E2SixFQUNBZ3pCLEVBQ2dCMTlCLEVBQ0ZvaUIsRUFDQzliLEVBQ0VzRSxFQUNEOWIsR0FSbkMsTUFVRSxjQUFPLFlBVFUsRUFBQStSLFNBQUFBLEVBQ0EsRUFBQTZKLGVBQUFBLEVBQ0EsRUFBQWd6QixXQUFBQSxFQUNnQixFQUFBMTlCLGVBQUFBLEVBQ0YsRUFBQW9pQixhQUFBQSxFQUNDLEVBQUE5YixjQUFBQSxFQUNFLEVBQUFzRSxnQkFBQUEsRUFDRCxFQUFBOWIsZUFBQUEsRUFsRDNCLEVBQUErMkMsa0JBQTRCLEVBcUI1QixFQUFBQyxVQUFXLEVBS1gsRUFBQS9PLFVBQXNCLElBQUksRUFBQXJILFNBRTFCLEVBQUFxVyxvQkFBOEIsRUFDOUIsRUFBQUMsa0JBQTRCLEVBQzVCLEVBQUFDLHdCQUFtRDd0QyxFQUNuRCxFQUFBOHRDLHNCQUFpRDl0QyxFQUVqRCxFQUFBK3RDLHVCQUF5QixFQUFLcjFDLFNBQVMsSUFBSSxFQUFBd1AsY0FFM0MsRUFBQThsQyxpQkFBbUIsRUFBS3QxQyxTQUFTLElBQUksRUFBQXdQLGNBRXJDLEVBQUErTixtQkFBcUIsRUFBS3ZkLFNBQVMsSUFBSSxFQUFBd1AsY0FFdkMsRUFBQStsQyxzQkFBd0IsRUFBS3YxQyxTQUFTLElBQUksRUFBQXdQLGNBZ0JoRCxFQUFLNEssbUJBQXFCLFNBQUF4SyxHQUFTLFNBQUs4RixhQUFhOUYsSUFDckQsRUFBSzRsQyxpQkFBbUIsU0FBQTVsQyxHQUFTLFNBQUs2bEMsV0FBVzdsQyxJQUNqRCxFQUFLMGhCLGFBQWFva0IsYUFBWSxXQUN4QixFQUFLbHpCLGNBQ1AsRUFBS3FJLG9CQUdULEVBQUs4cUIsY0FBZ0IsRUFBS3ptQyxlQUFlak4sT0FBT0MsTUFBTTB0QyxRQUFPLFNBQUFscUIsR0FBVSxTQUFLa3dCLFFBQVFsd0IsTUFDcEYsRUFBSzFsQixTQUFTLEVBQUtrUCxlQUFlaVIsUUFBUWtQLGtCQUFpQixTQUFBcHdCLEdBQUssU0FBSzQyQyxrQkFBa0I1MkMsT0FFdkYsRUFBS3luQixTQUVMLEVBQUtvdkIsT0FBUyxJQUFJLEVBQUFqRyxlQUFlLEVBQUszZ0MsZ0JBQ3RDLEVBQUs2bUMscUJBQXVCLElBNDFCaEMsT0F6NkJzQyxPQTJDcEMsc0JBQVcsb0NBQXFCLEtBQWhDLFdBQXFELE9BQU9wMEMsS0FBSzB6Qyx1QkFBdUJ6bEMsdUNBRXhGLHNCQUFXLDhCQUFlLEtBQTFCLFdBQXFFLE9BQU9qTyxLQUFLMnpDLGlCQUFpQjFsQyx1Q0FFbEcsc0JBQVcsZ0NBQWlCLEtBQTVCLFdBQStDLE9BQU9qTyxLQUFLNGIsbUJBQW1CM04sdUNBRTlFLHNCQUFXLG1DQUFvQixLQUEvQixXQUErRSxPQUFPak8sS0FBSzR6QyxzQkFBc0IzbEMsdUNBK0IxRyxZQUFBbk8sUUFBUCxXQUNFRSxLQUFLcTBDLDZCQUdBLFlBQUFwM0IsTUFBUCxXQUNFamQsS0FBS2twQixrQkFPQSxZQUFBcEUsUUFBUCxXQUNFOWtCLEtBQUtrcEIsaUJBQ0xscEIsS0FBS3F6QyxVQUFXLEdBTVgsWUFBQXR1QixPQUFQLFdBQ0Uva0IsS0FBS3F6QyxVQUFXLEdBR2xCLHNCQUFXLDZCQUFjLEtBQXpCLFdBQTRELE9BQU9yekMsS0FBS20wQyxPQUFPRyxxREFDL0Usc0JBQVcsMkJBQVksS0FBdkIsV0FBMEQsT0FBT3QwQyxLQUFLbTBDLE9BQU9JLG1EQUs3RSxzQkFBVywyQkFBWSxLQUF2QixXQUNFLElBQU05MUMsRUFBUXVCLEtBQUttMEMsT0FBT0csb0JBQ3BCNTFDLEVBQU1zQixLQUFLbTBDLE9BQU9JLGtCQUN4QixTQUFLOTFDLElBQVVDLEdBR1JELEVBQU0sS0FBT0MsRUFBSSxJQUFNRCxFQUFNLEtBQU9DLEVBQUkscUNBTWpELHNCQUFXLDRCQUFhLEtBQXhCLFdBQ0UsSUFBTUQsRUFBUXVCLEtBQUttMEMsT0FBT0csb0JBQ3BCNTFDLEVBQU1zQixLQUFLbTBDLE9BQU9JLGtCQUN4QixJQUFLOTFDLElBQVVDLEVBQ2IsTUFBTyxHQUdULElBQU00QixFQUFTTixLQUFLdU4sZUFBZWpOLE9BQzdCdUcsRUFBbUIsR0FFekIsR0FBa0MsSUFBOUI3RyxLQUFLbzBDLHFCQUErQyxDQUV0RCxHQUFJMzFDLEVBQU0sS0FBT0MsRUFBSSxHQUNuQixNQUFPLEdBR1QsSUFBSyxJQUFJeEMsRUFBSXVDLEVBQU0sR0FBSXZDLEdBQUt3QyxFQUFJLEdBQUl4QyxJQUFLLENBQ3ZDLElBQU1zNEMsRUFBV2wwQyxFQUFPOEIsNEJBQTRCbEcsR0FBRyxFQUFNdUMsRUFBTSxHQUFJQyxFQUFJLElBQzNFbUksRUFBTzVGLEtBQUt1ekMsUUFFVCxDQUVMLElBQU0xUSxFQUFpQnJsQyxFQUFNLEtBQU9DLEVBQUksR0FBS0EsRUFBSSxRQUFLaUgsRUFJdEQsSUFIQWtCLEVBQU81RixLQUFLWCxFQUFPOEIsNEJBQTRCM0QsRUFBTSxJQUFJLEVBQU1BLEVBQU0sR0FBSXFsQyxJQUdoRTVuQyxFQUFJdUMsRUFBTSxHQUFLLEVBQUd2QyxHQUFLd0MsRUFBSSxHQUFLLEVBQUd4QyxJQUFLLENBQy9DLElBQU1na0IsRUFBYTVmLEVBQU9DLE1BQU0rUSxJQUFJcFYsR0FDOUJzNEMsRUFBV2wwQyxFQUFPOEIsNEJBQTRCbEcsR0FBRyxJQUNuRGdrQixNQUFBQSxPQUFVLEVBQVZBLEVBQVl1UixXQUNkNXFCLEVBQU9BLEVBQU9uSixPQUFTLElBQU04MkMsRUFFN0IzdEMsRUFBTzVGLEtBQUt1ekMsR0FLWi8xQyxFQUFNLEtBQU9DLEVBQUksS0FDYndoQixFQUFhNWYsRUFBT0MsTUFBTStRLElBQUk1UyxFQUFJLElBQ2xDODFDLEVBQVdsMEMsRUFBTzhCLDRCQUE0QjFELEVBQUksSUFBSSxFQUFNLEVBQUdBLEVBQUksSUFDckV3aEIsR0FBY0EsRUFBWXVSLFVBQzVCNXFCLEVBQU9BLEVBQU9uSixPQUFTLElBQU04MkMsRUFFN0IzdEMsRUFBTzVGLEtBQUt1ekMsSUFXbEIsT0FKd0IzdEMsRUFBTzhGLEtBQUksU0FBQTBFLEdBQ2pDLE9BQU9BLEVBQUtwTyxRQUFRa3dDLEVBQThCLFFBQ2pEOVgsS0FBSy9mLEVBQVEwTyxVQUFZLE9BQVMsdUNBUWhDLFlBQUFkLGVBQVAsV0FDRWxwQixLQUFLbTBDLE9BQU9qckIsaUJBQ1pscEIsS0FBS3EwQyw0QkFDTHIwQyxLQUFLZ0MsVUFDTGhDLEtBQUs0YixtQkFBbUJsSixRQVFuQixZQUFBMVEsUUFBUCxTQUFleXlDLEdBQWYsV0FFT3owQyxLQUFLc3RCLHlCQUNSdHRCLEtBQUtzdEIsdUJBQXlCenRCLE9BQU8wYSx1QkFBc0IsV0FBTSxTQUFLdVQsZUFLcEV4UyxFQUFRK0YsU0FBV296QixHQUNDejBDLEtBQUt3RSxjQUNUOUcsUUFDaEJzQyxLQUFLMHpDLHVCQUF1QmhoQyxLQUFLMVMsS0FBS3dFLGdCQVNwQyxZQUFBc3BCLFNBQVIsV0FDRTl0QixLQUFLc3RCLDRCQUF5QjNuQixFQUM5QjNGLEtBQUsyekMsaUJBQWlCamhDLEtBQUssQ0FDekJqVSxNQUFPdUIsS0FBS20wQyxPQUFPRyxvQkFDbkI1MUMsSUFBS3NCLEtBQUttMEMsT0FBT0ksa0JBQ2pCL3ZCLGlCQUFnRCxJQUE5QnhrQixLQUFLbzBDLHdCQVFuQixZQUFBTSxvQkFBUixTQUE0QnptQyxHQUMxQixJQUFNNEosRUFBUzdYLEtBQUsyMEMsc0JBQXNCMW1DLEdBQ3BDeFAsRUFBUXVCLEtBQUttMEMsT0FBT0csb0JBQ3BCNTFDLEVBQU1zQixLQUFLbTBDLE9BQU9JLGtCQUV4QixTQUFLOTFDLEdBQVVDLEdBQVFtWixJQUloQjdYLEtBQUs0MEMsc0JBQXNCLzhCLEVBQVFwWixFQUFPQyxJQUd6QyxZQUFBazJDLHNCQUFWLFNBQWdDLzhCLEVBQTBCcFosRUFBeUJDLEdBQ2pGLE9BQVFtWixFQUFPLEdBQUtwWixFQUFNLElBQU1vWixFQUFPLEdBQUtuWixFQUFJLElBQzNDRCxFQUFNLEtBQU9DLEVBQUksSUFBTW1aLEVBQU8sS0FBT3BaLEVBQU0sSUFBTW9aLEVBQU8sSUFBTXBaLEVBQU0sSUFBTW9aLEVBQU8sR0FBS25aLEVBQUksSUFDMUZELEVBQU0sR0FBS0MsRUFBSSxJQUFNbVosRUFBTyxLQUFPblosRUFBSSxJQUFNbVosRUFBTyxHQUFLblosRUFBSSxJQUM3REQsRUFBTSxHQUFLQyxFQUFJLElBQU1tWixFQUFPLEtBQU9wWixFQUFNLElBQU1vWixFQUFPLElBQU1wWixFQUFNLElBT2pFLFlBQUFvMkMsb0JBQVIsU0FBNEI1bUMsRUFBbUI2bUMsV0FFdkN6bEMsRUFBeUMsUUFBakMsRUFBMkIsUUFBM0IsRUFBQXJQLEtBQUtpckMsV0FBVzUwQixtQkFBVyxlQUFFNUIsWUFBSSxlQUFFcEYsTUFDakQsR0FBSUEsRUFJRixPQUhBclAsS0FBS20wQyxPQUFPcHJCLGVBQWlCLENBQUMxWixFQUFNNVEsTUFBTW1ULEVBQUksRUFBR3ZDLEVBQU01USxNQUFNb1QsRUFBSSxHQUNqRTdSLEtBQUttMEMsT0FBT3JHLHNCQUF1QixJQUFBaUgsZ0JBQWUxbEMsRUFBT3JQLEtBQUt1TixlQUFleUIsTUFDN0VoUCxLQUFLbTBDLE9BQU9sckIsa0JBQWV0akIsR0FDcEIsRUFHVCxJQUFNa1MsRUFBUzdYLEtBQUsyMEMsc0JBQXNCMW1DLEdBQzFDLFFBQUk0SixJQUNGN1gsS0FBS2cxQyxjQUFjbjlCLEVBQVFpOUIsR0FDM0I5MEMsS0FBS20wQyxPQUFPbHJCLGtCQUFldGpCLEdBQ3BCLElBUUosWUFBQXdqQixVQUFQLFdBQ0VucEIsS0FBS20wQyxPQUFPdEcsbUJBQW9CLEVBQ2hDN3RDLEtBQUtnQyxVQUNMaEMsS0FBSzRiLG1CQUFtQmxKLFFBR25CLFlBQUEwVyxZQUFQLFNBQW1CM3FCLEVBQWVDLEdBQ2hDc0IsS0FBS20wQyxPQUFPanJCLGlCQUNaenFCLEVBQVErSCxLQUFLd0IsSUFBSXZKLEVBQU8sR0FDeEJDLEVBQU04SCxLQUFLMkIsSUFBSXpKLEVBQUtzQixLQUFLdU4sZUFBZWpOLE9BQU9DLE1BQU03QyxPQUFTLEdBQzlEc0MsS0FBS20wQyxPQUFPcHJCLGVBQWlCLENBQUMsRUFBR3RxQixHQUNqQ3VCLEtBQUttMEMsT0FBT2xyQixhQUFlLENBQUNqcEIsS0FBS3VOLGVBQWV5QixLQUFNdFEsR0FDdERzQixLQUFLZ0MsVUFDTGhDLEtBQUs0YixtQkFBbUJsSixRQU9sQixZQUFBdWhDLFFBQVIsU0FBZ0Jsd0IsR0FDTy9qQixLQUFLbTBDLE9BQU9sRyxPQUFPbHFCLElBRXRDL2pCLEtBQUtnQyxXQVFELFlBQUEyeUMsc0JBQVIsU0FBOEIxbUMsR0FDNUIsSUFBTTRKLEVBQVM3WCxLQUFLNlQsY0FBY2lFLFVBQVU3SixFQUFPak8sS0FBS2lZLGVBQWdCalksS0FBS3VOLGVBQWV5QixLQUFNaFAsS0FBS3VOLGVBQWVyUSxNQUFNLEdBQzVILEdBQUsyYSxFQVVMLE9BTEFBLEVBQU8sS0FDUEEsRUFBTyxLQUdQQSxFQUFPLElBQU03WCxLQUFLdU4sZUFBZWpOLE9BQU8rQixNQUNqQ3dWLEdBUUQsWUFBQW85QiwyQkFBUixTQUFtQ2huQyxHQUNqQyxJQUFJdTdCLEdBQVMsSUFBQTlZLDRCQUEyQnppQixFQUFPak8sS0FBS2lZLGdCQUFnQixHQUM5RGk5QixFQUFpQmwxQyxLQUFLM0QsZUFBZW9HLFdBQVc2b0IsYUFDdEQsT0FBSWtlLEdBQVUsR0FBS0EsR0FBVTBMLEVBQ3BCLEdBRUwxTCxFQUFTMEwsSUFDWDFMLEdBQVUwTCxHQUdaMUwsRUFBU2hqQyxLQUFLMkIsSUFBSTNCLEtBQUt3QixJQUFJd2hDLEdBNVhHLFNBNlg5QkEsR0E3WDhCLElBOFhiaGpDLEtBQUs4Z0IsSUFBSWtpQixHQUFXaGpDLEtBQUtDLE1BQWUsR0FBVCtpQyxLQVEzQyxZQUFBdmlCLHFCQUFQLFNBQTRCaFosR0FDMUIsT0FBSXFOLEVBQVExWixNQUNIcU0sRUFBTWlZLFFBQVVsbUIsS0FBS21ZLGdCQUFnQm1CLFdBQVc2N0IsOEJBR2xEbG5DLEVBQU1rWSxVQU9SLFlBQUF4QixZQUFQLFNBQW1CMVcsR0FJakIsR0FIQWpPLEtBQUtzekMsb0JBQXNCcmxDLEVBQU1tbkMsV0FHWixJQUFqQm5uQyxFQUFNaVQsU0FBZ0JsaEIsS0FBSzZnQixlQUtWLElBQWpCNVMsRUFBTWlULE9BQVYsQ0FLQSxJQUFLbGhCLEtBQUtxekMsU0FBVSxDQUNsQixJQUFLcnpDLEtBQUtpbkIscUJBQXFCaFosR0FDN0IsT0FJRkEsRUFBTXhKLGtCQUlSd0osRUFBTTdNLGlCQUdOcEIsS0FBS296QyxrQkFBb0IsRUFFckJwekMsS0FBS3F6QyxVQUFZcGxDLEVBQU1rWSxTQUN6Qm5tQixLQUFLcTFDLG9CQUFvQnBuQyxHQUVKLElBQWpCQSxFQUFNcW5DLE9BQ1J0MUMsS0FBS3UxQyxlQUFldG5DLEdBQ00sSUFBakJBLEVBQU1xbkMsT0FDZnQxQyxLQUFLdzFDLGVBQWV2bkMsR0FDTSxJQUFqQkEsRUFBTXFuQyxRQUNmdDFDLEtBQUt5MUMsZUFBZXhuQyxHQUl4QmpPLEtBQUswMUMseUJBQ0wxMUMsS0FBS2dDLFNBQVEsS0FNUCxZQUFBMHpDLHVCQUFSLHNCQUVNMTFDLEtBQUtpWSxlQUFlaUssZ0JBQ3RCbGlCLEtBQUtpWSxlQUFlaUssY0FBY3prQixpQkFBaUIsWUFBYXVDLEtBQUt5WSxvQkFDckV6WSxLQUFLaVksZUFBZWlLLGNBQWN6a0IsaUJBQWlCLFVBQVd1QyxLQUFLNnpDLG1CQUVyRTd6QyxLQUFLMjFDLHlCQUEyQjkxQyxPQUFPcS9CLGFBQVksV0FBTSxTQUFLMFcsZ0JBOWJyQyxLQW9jbkIsWUFBQXZCLDBCQUFSLFdBQ01yMEMsS0FBS2lZLGVBQWVpSyxnQkFDdEJsaUIsS0FBS2lZLGVBQWVpSyxjQUFjcGhCLG9CQUFvQixZQUFhZCxLQUFLeVksb0JBQ3hFelksS0FBS2lZLGVBQWVpSyxjQUFjcGhCLG9CQUFvQixVQUFXZCxLQUFLNnpDLG1CQUV4RS9VLGNBQWM5K0IsS0FBSzIxQywwQkFDbkIzMUMsS0FBSzIxQyw4QkFBMkJod0MsR0FRMUIsWUFBQTB2QyxvQkFBUixTQUE0QnBuQyxHQUN0QmpPLEtBQUttMEMsT0FBT3ByQixpQkFDZC9vQixLQUFLbTBDLE9BQU9sckIsYUFBZWpwQixLQUFLMjBDLHNCQUFzQjFtQyxLQVNsRCxZQUFBc25DLGVBQVIsU0FBdUJ0bkMsR0FPckIsR0FOQWpPLEtBQUttMEMsT0FBT3JHLHFCQUF1QixFQUNuQzl0QyxLQUFLbTBDLE9BQU90RyxtQkFBb0IsRUFDaEM3dEMsS0FBS28wQyxxQkFBdUJwMEMsS0FBSzJuQixtQkFBbUIxWixHQUFTLEVBQXVCLEVBR3BGak8sS0FBS20wQyxPQUFPcHJCLGVBQWlCL29CLEtBQUsyMEMsc0JBQXNCMW1DLEdBQ25Eak8sS0FBS20wQyxPQUFPcHJCLGVBQWpCLENBR0Evb0IsS0FBS20wQyxPQUFPbHJCLGtCQUFldGpCLEVBRzNCLElBQU0wTCxFQUFPclIsS0FBS3VOLGVBQWVqTixPQUFPQyxNQUFNK1EsSUFBSXRSLEtBQUttMEMsT0FBT3ByQixlQUFlLElBQ3hFMVgsR0FLREEsRUFBSzNULFNBQVdzQyxLQUFLbTBDLE9BQU9wckIsZUFBZSxJQU1NLElBQWpEMVgsRUFBS3drQyxTQUFTNzFDLEtBQUttMEMsT0FBT3ByQixlQUFlLEtBQzNDL29CLEtBQUttMEMsT0FBT3ByQixlQUFlLE9BUXZCLFlBQUF5c0IsZUFBUixTQUF1QnZuQyxHQUNqQmpPLEtBQUs2MEMsb0JBQW9CNW1DLEdBQU8sS0FDbENqTyxLQUFLbzBDLHFCQUF1QixJQVN4QixZQUFBcUIsZUFBUixTQUF1QnhuQyxHQUNyQixJQUFNNEosRUFBUzdYLEtBQUsyMEMsc0JBQXNCMW1DLEdBQ3RDNEosSUFDRjdYLEtBQUtvMEMscUJBQXVCLEVBQzVCcDBDLEtBQUs4MUMsY0FBY2orQixFQUFPLE1BUXZCLFlBQUE4UCxtQkFBUCxTQUEwQjFaLEdBQ3hCLE9BQU9BLEVBQU1pWSxVQUFZNUssRUFBUTFaLE9BQVM1QixLQUFLbVksZ0JBQWdCbUIsV0FBVzY3QixnQ0FRcEUsWUFBQXBoQyxhQUFSLFNBQXFCOUYsR0FRbkIsR0FKQUEsRUFBTTVNLDJCQUlEckIsS0FBS20wQyxPQUFPcHJCLGVBQWpCLENBTUEsSUFBTWd0QixFQUF1Qi8xQyxLQUFLbTBDLE9BQU9sckIsYUFBZSxDQUFDanBCLEtBQUttMEMsT0FBT2xyQixhQUFhLEdBQUlqcEIsS0FBS20wQyxPQUFPbHJCLGFBQWEsSUFBTSxLQUlySCxHQURBanBCLEtBQUttMEMsT0FBT2xyQixhQUFlanBCLEtBQUsyMEMsc0JBQXNCMW1DLEdBQ2pEak8sS0FBS20wQyxPQUFPbHJCLGFBQWpCLENBTWtDLElBQTlCanBCLEtBQUtvMEMscUJBQ0hwMEMsS0FBS20wQyxPQUFPbHJCLGFBQWEsR0FBS2pwQixLQUFLbTBDLE9BQU9wckIsZUFBZSxHQUMzRC9vQixLQUFLbTBDLE9BQU9sckIsYUFBYSxHQUFLLEVBRTlCanBCLEtBQUttMEMsT0FBT2xyQixhQUFhLEdBQUtqcEIsS0FBS3VOLGVBQWV5QixLQUViLElBQTlCaFAsS0FBS28wQyxzQkFDZHAwQyxLQUFLZzJDLGdCQUFnQmgyQyxLQUFLbTBDLE9BQU9sckIsY0FJbkNqcEIsS0FBS296QyxrQkFBb0JwekMsS0FBS2kxQywyQkFBMkJobkMsR0FLdkIsSUFBOUJqTyxLQUFLbzBDLHVCQUNIcDBDLEtBQUtvekMsa0JBQW9CLEVBQzNCcHpDLEtBQUttMEMsT0FBT2xyQixhQUFhLEdBQUtqcEIsS0FBS3VOLGVBQWV5QixLQUN6Q2hQLEtBQUtvekMsa0JBQW9CLElBQ2xDcHpDLEtBQUttMEMsT0FBT2xyQixhQUFhLEdBQUssSUFPbEMsSUFBTTNvQixFQUFTTixLQUFLdU4sZUFBZWpOLE9BQ25DLEdBQUlOLEtBQUttMEMsT0FBT2xyQixhQUFhLEdBQUszb0IsRUFBT0MsTUFBTTdDLE9BQVEsQ0FDckQsSUFBTTJULEVBQU8vUSxFQUFPQyxNQUFNK1EsSUFBSXRSLEtBQUttMEMsT0FBT2xyQixhQUFhLElBQ25ENVgsR0FBdUQsSUFBL0NBLEVBQUt3a0MsU0FBUzcxQyxLQUFLbTBDLE9BQU9sckIsYUFBYSxLQUNqRGpwQixLQUFLbTBDLE9BQU9sckIsYUFBYSxLQUt4QjhzQixHQUNIQSxFQUFxQixLQUFPLzFDLEtBQUttMEMsT0FBT2xyQixhQUFhLElBQ3JEOHNCLEVBQXFCLEtBQU8vMUMsS0FBS20wQyxPQUFPbHJCLGFBQWEsSUFDckRqcEIsS0FBS2dDLFNBQVEsUUE1Q2JoQyxLQUFLZ0MsU0FBUSxLQW9EVCxZQUFBNHpDLFlBQVIsV0FDRSxHQUFLNTFDLEtBQUttMEMsT0FBT2xyQixjQUFpQmpwQixLQUFLbTBDLE9BQU9wckIsZ0JBRzFDL29CLEtBQUtvekMsa0JBQW1CLENBQzFCcHpDLEtBQUs0ekMsc0JBQXNCbGhDLEtBQUssQ0FBRXFSLE9BQVEvakIsS0FBS296QyxrQkFBbUJodkIscUJBQXFCLElBS3ZGLElBQU05akIsRUFBU04sS0FBS3VOLGVBQWVqTixPQUMvQk4sS0FBS296QyxrQkFBb0IsR0FDTyxJQUE5QnB6QyxLQUFLbzBDLHVCQUNQcDBDLEtBQUttMEMsT0FBT2xyQixhQUFhLEdBQUtqcEIsS0FBS3VOLGVBQWV5QixNQUVwRGhQLEtBQUttMEMsT0FBT2xyQixhQUFhLEdBQUt6aUIsS0FBSzJCLElBQUk3SCxFQUFPK0IsTUFBUXJDLEtBQUt1TixlQUFlclEsS0FBTW9ELEVBQU9DLE1BQU03QyxPQUFTLEtBRXBFLElBQTlCc0MsS0FBS28wQyx1QkFDUHAwQyxLQUFLbTBDLE9BQU9sckIsYUFBYSxHQUFLLEdBRWhDanBCLEtBQUttMEMsT0FBT2xyQixhQUFhLEdBQUszb0IsRUFBTytCLE9BRXZDckMsS0FBS2dDLFlBUUQsWUFBQTh4QyxXQUFSLFNBQW1CN2xDLEdBQ2pCLElBQU1nb0MsRUFBY2hvQyxFQUFNbW5DLFVBQVlwMUMsS0FBS3N6QyxvQkFJM0MsR0FGQXR6QyxLQUFLcTBDLDRCQUVEcjBDLEtBQUt3RSxjQUFjOUcsUUFBVSxHQUFLdTRDLEVBbm9CUCxLQW1vQm1EaG9DLEVBQU1pWSxRQUFVbG1CLEtBQUttWSxnQkFBZ0IwZCxVQUFVLHdCQUMvSCxHQUFJNzFCLEtBQUt1TixlQUFlak4sT0FBTzJmLFFBQVVqZ0IsS0FBS3VOLGVBQWVqTixPQUFPK0IsTUFBTyxDQUN6RSxJQUFNNnpDLEVBQWNsMkMsS0FBSzZULGNBQWNpRSxVQUNyQzdKLEVBQ0FqTyxLQUFLb08sU0FDTHBPLEtBQUt1TixlQUFleUIsS0FDcEJoUCxLQUFLdU4sZUFBZXJRLE1BQ3BCLEdBRUYsR0FBSWc1QyxRQUFrQ3Z3QyxJQUFuQnV3QyxFQUFZLFNBQXVDdndDLElBQW5CdXdDLEVBQVksR0FBa0IsQ0FDL0UsSUFBTTl1QixHQUFXLElBQUErdUIsb0JBQW1CRCxFQUFZLEdBQUssRUFBR0EsRUFBWSxHQUFLLEVBQUdsMkMsS0FBS3VOLGVBQWdCdk4sS0FBSzJ2QixhQUFhcHNCLGdCQUFnQjhqQix1QkFDbklybkIsS0FBSzJ2QixhQUFhbnNCLGlCQUFpQjRqQixHQUFVLFVBSWpEcG5CLEtBQUtvMkMsZ0NBSUQsWUFBQUEsNkJBQVIsV0FDRSxJQUFNMzNDLEVBQVF1QixLQUFLbTBDLE9BQU9HLG9CQUNwQjUxQyxFQUFNc0IsS0FBS20wQyxPQUFPSSxrQkFDbEIxekIsS0FBaUJwaUIsSUFBV0MsR0FBUUQsRUFBTSxLQUFPQyxFQUFJLElBQU1ELEVBQU0sS0FBT0MsRUFBSSxJQUU3RW1pQixFQVFBcGlCLEdBQVVDLElBSVZzQixLQUFLd3pDLG9CQUF1Qnh6QyxLQUFLeXpDLGtCQUNwQ2gxQyxFQUFNLEtBQU91QixLQUFLd3pDLG1CQUFtQixJQUFNLzBDLEVBQU0sS0FBT3VCLEtBQUt3ekMsbUJBQW1CLElBQ2hGOTBDLEVBQUksS0FBT3NCLEtBQUt5ekMsaUJBQWlCLElBQU0vMEMsRUFBSSxLQUFPc0IsS0FBS3l6QyxpQkFBaUIsSUFFeEV6ekMsS0FBS3EyQyx1QkFBdUI1M0MsRUFBT0MsRUFBS21pQixJQWZwQzdnQixLQUFLdXpDLGtCQUNQdnpDLEtBQUtxMkMsdUJBQXVCNTNDLEVBQU9DLEVBQUttaUIsSUFrQnRDLFlBQUF3MUIsdUJBQVIsU0FBK0I1M0MsRUFBcUNDLEVBQW1DbWlCLEdBQ3JHN2dCLEtBQUt3ekMsbUJBQXFCLzBDLEVBQzFCdUIsS0FBS3l6QyxpQkFBbUIvMEMsRUFDeEJzQixLQUFLdXpDLGlCQUFtQjF5QixFQUN4QjdnQixLQUFLNGIsbUJBQW1CbEosUUFHbEIsWUFBQXdoQyxrQkFBUixTQUEwQjUyQyxHQUExQixXQUNFMEMsS0FBS2twQixpQkFLTGxwQixLQUFLZzBDLGNBQWNsMEMsVUFDbkJFLEtBQUtnMEMsY0FBZ0IxMkMsRUFBRXF3QixhQUFhcHRCLE1BQU0wdEMsUUFBTyxTQUFBbHFCLEdBQVUsU0FBS2t3QixRQUFRbHdCLE9BUWxFLFlBQUF1eUIsb0NBQVIsU0FBNENwMkIsRUFBeUJySSxHQUVuRSxJQURBLElBQUkwK0IsRUFBWTErQixFQUFPLEdBQ2QzYixFQUFJLEVBQUcyYixFQUFPLElBQU0zYixFQUFHQSxJQUFLLENBQ25DLElBQU0sRUFBU2drQixFQUFXa2UsU0FBU2xpQyxFQUFHOEQsS0FBS3NrQyxXQUFXM0ssV0FBV2o4QixPQUMvQixJQUE5QnNDLEtBQUtza0MsVUFBVWprQixXQUdqQmsyQixJQUNTLEVBQVMsR0FBSzErQixFQUFPLEtBQU8zYixJQUlyQ3E2QyxHQUFhLEVBQVMsR0FHMUIsT0FBT0EsR0FHRixZQUFBNXRCLGFBQVAsU0FBb0I5QyxFQUFhQyxFQUFhcG9CLEdBQzVDc0MsS0FBS20wQyxPQUFPanJCLGlCQUNabHBCLEtBQUtxMEMsNEJBQ0xyMEMsS0FBS20wQyxPQUFPcHJCLGVBQWlCLENBQUNsRCxFQUFLQyxHQUNuQzlsQixLQUFLbTBDLE9BQU9yRyxxQkFBdUJwd0MsRUFDbkNzQyxLQUFLZ0MsV0FHQSxZQUFBNEMsaUJBQVAsU0FBd0JqQixHQUNqQjNELEtBQUswMEMsb0JBQW9CL3dDLEtBQ3hCM0QsS0FBSzYwQyxvQkFBb0JseEMsR0FBSSxJQUMvQjNELEtBQUtnQyxTQUFRLEdBRWZoQyxLQUFLbzJDLGlDQVFELFlBQUFJLFdBQVIsU0FBbUIzK0IsRUFBMEJpOUIsRUFBdUMyQixFQUF5Q0MsR0FFM0gsUUFGa0YsSUFBQUQsSUFBQUEsR0FBQSxRQUF5QyxJQUFBQyxJQUFBQSxHQUFBLEtBRXZINytCLEVBQU8sSUFBTTdYLEtBQUt1TixlQUFleUIsTUFBckMsQ0FJQSxJQUFNMU8sRUFBU04sS0FBS3VOLGVBQWVqTixPQUM3QjRmLEVBQWE1ZixFQUFPQyxNQUFNK1EsSUFBSXVHLEVBQU8sSUFDM0MsR0FBS3FJLEVBQUwsQ0FJQSxJQUFNN08sRUFBTy9RLEVBQU84Qiw0QkFBNEJ5VixFQUFPLElBQUksR0FHdkQrM0IsRUFBYTV2QyxLQUFLczJDLG9DQUFvQ3AyQixFQUFZckksR0FDbEVnNEIsRUFBV0QsRUFHVCtHLEVBQWE5K0IsRUFBTyxHQUFLKzNCLEVBQzNCZ0gsRUFBb0IsRUFDcEJDLEVBQXFCLEVBQ3JCQyxFQUFxQixFQUNyQkMsRUFBc0IsRUFFMUIsR0FBZ0MsTUFBNUIxbEMsRUFBSzJsQyxPQUFPcEgsR0FBcUIsQ0FFbkMsS0FBT0EsRUFBYSxHQUFxQyxNQUFoQ3YrQixFQUFLMmxDLE9BQU9wSCxFQUFhLElBQ2hEQSxJQUVGLEtBQU9DLEVBQVd4K0IsRUFBSzNULFFBQXdDLE1BQTlCMlQsRUFBSzJsQyxPQUFPbkgsRUFBVyxJQUN0REEsUUFFRyxDQUtMLElBQUkvZCxFQUFXamEsRUFBTyxHQUNsQmthLEVBQVNsYSxFQUFPLEdBSWtCLElBQWxDcUksRUFBV0csU0FBU3lSLEtBQ3RCOGtCLElBQ0E5a0IsS0FFa0MsSUFBaEM1UixFQUFXRyxTQUFTMFIsS0FDdEI4a0IsSUFDQTlrQixLQUlGLElBQU0sRUFBUzdSLEVBQVdtd0IsVUFBVXRlLEdBQVFyMEIsT0FPNUMsSUFOSSxFQUFTLElBQ1hxNUMsR0FBdUIsRUFBUyxFQUNoQ2xILEdBQVksRUFBUyxHQUloQi9kLEVBQVcsR0FBSzhkLEVBQWEsSUFBTTV2QyxLQUFLaTNDLHFCQUFxQi8yQixFQUFXa2UsU0FBU3RNLEVBQVcsRUFBRzl4QixLQUFLc2tDLGFBQWEsQ0FDdEhwa0IsRUFBV2tlLFNBQVN0TSxFQUFXLEVBQUc5eEIsS0FBS3NrQyxXQUN2QyxJQUFNLEVBQVN0a0MsS0FBS3NrQyxVQUFVM0ssV0FBV2o4QixPQUNQLElBQTlCc0MsS0FBS3NrQyxVQUFVamtCLFlBRWpCdTJCLElBQ0E5a0IsS0FDUyxFQUFTLElBR2xCZ2xCLEdBQXNCLEVBQVMsRUFDL0JsSCxHQUFjLEVBQVMsR0FFekJBLElBQ0E5ZCxJQUVGLEtBQU9DLEVBQVM3UixFQUFXeGlCLFFBQVVteUMsRUFBVyxFQUFJeCtCLEVBQUszVCxTQUFXc0MsS0FBS2kzQyxxQkFBcUIvMkIsRUFBV2tlLFNBQVNyTSxFQUFTLEVBQUcveEIsS0FBS3NrQyxhQUFhLENBQzlJcGtCLEVBQVdrZSxTQUFTck0sRUFBUyxFQUFHL3hCLEtBQUtza0MsV0FDckMsSUFBTSxFQUFTdGtDLEtBQUtza0MsVUFBVTNLLFdBQVdqOEIsT0FDUCxJQUE5QnNDLEtBQUtza0MsVUFBVWprQixZQUVqQncyQixJQUNBOWtCLEtBQ1MsRUFBUyxJQUdsQmdsQixHQUF1QixFQUFTLEVBQ2hDbEgsR0FBWSxFQUFTLEdBRXZCQSxJQUNBOWQsS0FLSjhkLElBSUEsSUFBSXB4QyxFQUNBbXhDLEVBQ0UrRyxFQUNBQyxFQUNBRSxFQUlGcDVDLEVBQVM4SSxLQUFLMkIsSUFBSW5JLEtBQUt1TixlQUFleUIsS0FDeEM2Z0MsRUFDRUQsRUFDQWdILEVBQ0FDLEVBQ0FDLEVBQ0FDLEdBRUosR0FBS2pDLEdBQTRFLEtBQTVDempDLEVBQUtoSyxNQUFNdW9DLEVBQVlDLEdBQVVxSCxPQUF0RSxDQUtBLEdBQUlULEdBQ1ksSUFBVmg0QyxHQUE4QyxLQUEvQnloQixFQUFXZ2xCLGFBQWEsR0FBcUIsQ0FDOUQsSUFBTWlTLEVBQXFCNzJDLEVBQU9DLE1BQU0rUSxJQUFJdUcsRUFBTyxHQUFLLEdBQ3hELEdBQUlzL0IsR0FBc0JqM0IsRUFBV3VSLFdBQStFLEtBQWxFMGxCLEVBQW1CalMsYUFBYWxsQyxLQUFLdU4sZUFBZXlCLEtBQU8sR0FBcUIsQ0FDaEksSUFBTW9vQyxFQUEyQnAzQyxLQUFLdzJDLFdBQVcsQ0FBQ3gyQyxLQUFLdU4sZUFBZXlCLEtBQU8sRUFBRzZJLEVBQU8sR0FBSyxJQUFJLEdBQU8sR0FBTSxHQUM3RyxHQUFJdS9CLEVBQTBCLENBQzVCLElBQU01TixFQUFTeHBDLEtBQUt1TixlQUFleUIsS0FBT29vQyxFQUF5QjM0QyxNQUNuRUEsR0FBUytxQyxFQUNUOXJDLEdBQVU4ckMsSUFPbEIsR0FBSWtOLEdBQ0VqNEMsRUFBUWYsSUFBV3NDLEtBQUt1TixlQUFleUIsTUFBa0UsS0FBMURrUixFQUFXZ2xCLGFBQWFsbEMsS0FBS3VOLGVBQWV5QixLQUFPLEdBQXFCLENBQ3pILElBQU1xb0MsRUFBaUIvMkMsRUFBT0MsTUFBTStRLElBQUl1RyxFQUFPLEdBQUssR0FDcEQsSUFBSXcvQixNQUFBQSxPQUFjLEVBQWRBLEVBQWdCNWxCLFlBQWdELEtBQW5DNGxCLEVBQWVuUyxhQUFhLEdBQXFCLENBQ2hGLElBQU1vUyxFQUF1QnQzQyxLQUFLdzJDLFdBQVcsQ0FBQyxFQUFHMytCLEVBQU8sR0FBSyxJQUFJLEdBQU8sR0FBTyxHQUMzRXkvQixJQUNGNTVDLEdBQVU0NUMsRUFBcUI1NUMsU0FNdkMsTUFBTyxDQUFFZSxNQUFLLEVBQUVmLE9BQU0sT0FRZCxZQUFBczNDLGNBQVYsU0FBd0JuOUIsRUFBMEJpOUIsR0FDaEQsSUFBTXlDLEVBQWV2M0MsS0FBS3cyQyxXQUFXMytCLEVBQVFpOUIsR0FDN0MsR0FBSXlDLEVBQWMsQ0FFaEIsS0FBT0EsRUFBYTk0QyxNQUFRLEdBQzFCODRDLEVBQWE5NEMsT0FBU3VCLEtBQUt1TixlQUFleUIsS0FDMUM2SSxFQUFPLEtBRVQ3WCxLQUFLbTBDLE9BQU9wckIsZUFBaUIsQ0FBQ3d1QixFQUFhOTRDLE1BQU9vWixFQUFPLElBQ3pEN1gsS0FBS20wQyxPQUFPckcscUJBQXVCeUosRUFBYTc1QyxTQVE1QyxZQUFBczRDLGdCQUFSLFNBQXdCbitCLEdBQ3RCLElBQU0wL0IsRUFBZXYzQyxLQUFLdzJDLFdBQVczK0IsR0FBUSxHQUM3QyxHQUFJMC9CLEVBQWMsQ0FJaEIsSUFIQSxJQUFJL2dDLEVBQVNxQixFQUFPLEdBR2IwL0IsRUFBYTk0QyxNQUFRLEdBQzFCODRDLEVBQWE5NEMsT0FBU3VCLEtBQUt1TixlQUFleUIsS0FDMUN3SCxJQUtGLElBQUt4VyxLQUFLbTBDLE9BQU9wRyw2QkFDZixLQUFPd0osRUFBYTk0QyxNQUFRODRDLEVBQWE3NUMsT0FBU3NDLEtBQUt1TixlQUFleUIsTUFDcEV1b0MsRUFBYTc1QyxRQUFVc0MsS0FBS3VOLGVBQWV5QixLQUMzQ3dILElBSUp4VyxLQUFLbTBDLE9BQU9sckIsYUFBZSxDQUFDanBCLEtBQUttMEMsT0FBT3BHLDZCQUErQndKLEVBQWE5NEMsTUFBUTg0QyxFQUFhOTRDLE1BQVE4NEMsRUFBYTc1QyxPQUFROFksS0FTbEksWUFBQXlnQyxxQkFBUixTQUE2Qi9kLEdBRzNCLE9BQXdCLElBQXBCQSxFQUFLN1ksWUFHRnJnQixLQUFLbVksZ0JBQWdCbUIsV0FBV2srQixjQUFjdm1DLFFBQVFpb0IsRUFBS1MsYUFBZSxHQU96RSxZQUFBbWMsY0FBVixTQUF3QnprQyxHQUN0QixJQUFNb21DLEVBQWV6M0MsS0FBS3VOLGVBQWVqTixPQUFPbzNDLHVCQUF1QnJtQyxHQUN2RXJSLEtBQUttMEMsT0FBT3ByQixlQUFpQixDQUFDLEVBQUcwdUIsRUFBYW5vQyxPQUM5Q3RQLEtBQUttMEMsT0FBT2xyQixhQUFlLENBQUNqcEIsS0FBS3VOLGVBQWV5QixLQUFNeW9DLEVBQWFFLE1BQ25FMzNDLEtBQUttMEMsT0FBT3JHLHFCQUF1QixHQXY2QlYsR0F1RHhCLE1BQUFqN0IsZ0JBQ0EsTUFBQTRkLGNBQ0EsTUFBQS9XLGVBQ0EsTUFBQUUsaUJBQ0EsTUFBQTBKLGlCQTNEUVksR0FBYixDQUFzQyxFQUFBcmhCLFlBQXpCLEVBQUFxaEIsaUJBQUFBLHVPQzlEYixjQUthLEVBQUFwQixrQkFBbUIsSUFBQTgwQixpQkFBa0MsbUJBYXJELEVBQUFoMUIscUJBQXNCLElBQUFnMUIsaUJBQXFDLHNCQU8zRCxFQUFBbCtCLGVBQWdCLElBQUFrK0IsaUJBQStCLGdCQVEvQyxFQUFBdDBCLGdCQUFpQixJQUFBczBCLGlCQUFnQyxpQkErQmpELEVBQUFqK0IsbUJBQW9CLElBQUFpK0IsaUJBQW1DLG9CQTRCdkQsRUFBQWgwQixlQUFnQixJQUFBZzBCLGlCQUErQixnQkFRL0MsRUFBQXowQix5QkFBMEIsSUFBQXkwQixpQkFBeUMsMEJBVW5FLEVBQUFDLG9CQUFxQixJQUFBRCxpQkFBb0Msc2hCQ2xIdEUsY0FHQSxhQWlCRSxXQUMyQnovQixHQUFBLEtBQUFBLGdCQUFBQSxFQW9DN0IsT0FqREUsc0JBQWtCLGlCQUFZLEtBQTlCLFdBQ0UsSUFBS3dMLEVBQWFtMEIsY0FBZSxDQUMvQixJQUFNQyxFQUF5Q2w0QyxPQUFlbTRDLGNBQWlCbjRDLE9BQWVvNEMsbUJBQzlGLElBQUtGLEVBRUgsT0FEQTNyQyxRQUFRQyxLQUFLLDRGQUNOLEtBRVRzWCxFQUFhbTBCLGNBQWdCLElBQUlDLEVBRW5DLE9BQU9wMEIsRUFBYW0wQiwrQ0FRZixZQUFBbnRCLGNBQVAsV0FDRSxJQUFNamhCLEVBQU1pYSxFQUFhdTBCLGFBQ3pCLEdBQUt4dUMsRUFBTCxDQUdBLElBQU15dUMsRUFBa0J6dUMsRUFBSTB1QyxxQkFDNUIxdUMsRUFBSTJ1QyxnQkFBZ0JyNEMsS0FBS3M0QyxxQkFBcUJ0NEMsS0FBS3U0QyxnQkFBZ0J2NEMsS0FBS21ZLGdCQUFnQm1CLFdBQVdrL0IsYUFBYSxTQUFDbDRDLEdBQy9HNjNDLEVBQWdCNzNDLE9BQVNBLEVBQ3pCNjNDLEVBQWdCTSxRQUFRL3VDLEVBQUlndkMsYUFDNUJQLEVBQWdCMTVDLE1BQU0sUUFJbEIsWUFBQTY1QyxxQkFBUixTQUE2QkssR0FLM0IsSUFKQSxJQUFNQyxFQUFlLzRDLE9BQU9nNUMsS0FBS0YsR0FDM0JHLEVBQU1GLEVBQWFsN0MsT0FDbkJxN0MsRUFBUSxJQUFJQyxXQUFXRixHQUVwQjU4QyxFQUFJLEVBQUdBLEVBQUk0OEMsRUFBSzU4QyxJQUN2QjY4QyxFQUFNNzhDLEdBQUswOEMsRUFBYUssV0FBVy84QyxHQUdyQyxPQUFPNjhDLEVBQU16NEMsUUFHUCxZQUFBaTRDLGdCQUFSLFNBQXdCVyxHQUt0QixPQUhpQkEsRUFBUXhzQyxNQUFNLEtBR2YsSUFwRFBpWCxFQUFZLEdBa0JwQixNQUFBL0osa0JBbEJRK0osR0FBYixHQUFhLEVBQUFBLGFBQUFBLHlGQ0ZiLGNBZ0JBLGFBWUUsV0FDVXcxQixHQUFBLEtBQUFBLFdBQUFBLEVBUkgsS0FBQUMsZ0JBQWtCLElBQUksRUFBQXZyQyxhQUV0QixLQUFBd3JDLGdCQUFrQixJQUFJLEVBQUF4ckMsYUFFdEIsS0FBQXlyQyxjQUFnQixJQUFJLEVBQUF6ckMsYUFNekI3TixLQUFLdTVDLE9BQVMsSUFBSUMsTUFBU3g1QyxLQUFLbTVDLFlBQ2hDbjVDLEtBQUt5NUMsWUFBYyxFQUNuQno1QyxLQUFLMDVDLFFBQVUsRUF1TW5CLE9BbE5FLHNCQUFXLHVCQUFRLEtBQW5CLFdBQThDLE9BQU8xNUMsS0FBS281QyxnQkFBZ0JuckMsdUNBRTFFLHNCQUFXLHVCQUFRLEtBQW5CLFdBQThDLE9BQU9qTyxLQUFLcTVDLGdCQUFnQnByQyx1Q0FFMUUsc0JBQVcscUJBQU0sS0FBakIsV0FBc0MsT0FBT2pPLEtBQUtzNUMsY0FBY3JyQyx1Q0FVaEUsc0JBQVcsd0JBQVMsS0FBcEIsV0FDRSxPQUFPak8sS0FBS201QyxnQkFHZCxTQUFxQlEsR0FFbkIsR0FBSTM1QyxLQUFLbTVDLGFBQWVRLEVBQXhCLENBT0EsSUFEQSxJQUFNQyxFQUFXLElBQUlKLE1BQXFCRyxHQUNqQ3o5QyxFQUFJLEVBQUdBLEVBQUlzSyxLQUFLMkIsSUFBSXd4QyxFQUFjMzVDLEtBQUt0QyxRQUFTeEIsSUFDdkQwOUMsRUFBUzE5QyxHQUFLOEQsS0FBS3U1QyxPQUFPdjVDLEtBQUs2NUMsZ0JBQWdCMzlDLElBRWpEOEQsS0FBS3U1QyxPQUFTSyxFQUNkNTVDLEtBQUttNUMsV0FBYVEsRUFDbEIzNUMsS0FBS3k1QyxZQUFjLG9DQUdyQixzQkFBVyxxQkFBTSxLQUFqQixXQUNFLE9BQU96NUMsS0FBSzA1QyxhQUdkLFNBQWtCSSxHQUNoQixHQUFJQSxFQUFZOTVDLEtBQUswNUMsUUFDbkIsSUFBSyxJQUFJeDlDLEVBQUk4RCxLQUFLMDVDLFFBQVN4OUMsRUFBSTQ5QyxFQUFXNTlDLElBQ3hDOEQsS0FBS3U1QyxPQUFPcjlDLFFBQUt5SixFQUdyQjNGLEtBQUswNUMsUUFBVUksbUNBV1YsWUFBQXhvQyxJQUFQLFNBQVd5RSxHQUNULE9BQU8vVixLQUFLdTVDLE9BQU92NUMsS0FBSzY1QyxnQkFBZ0I5akMsS0FXbkMsWUFBQVYsSUFBUCxTQUFXVSxFQUFldFMsR0FDeEJ6RCxLQUFLdTVDLE9BQU92NUMsS0FBSzY1QyxnQkFBZ0I5akMsSUFBVXRTLEdBUXRDLFlBQUF4QyxLQUFQLFNBQVl3QyxHQUNWekQsS0FBS3U1QyxPQUFPdjVDLEtBQUs2NUMsZ0JBQWdCNzVDLEtBQUswNUMsVUFBWWoyQyxFQUM5Q3pELEtBQUswNUMsVUFBWTE1QyxLQUFLbTVDLFlBQ3hCbjVDLEtBQUt5NUMsY0FBZ0J6NUMsS0FBS3k1QyxZQUFjejVDLEtBQUttNUMsV0FDN0NuNUMsS0FBS3M1QyxjQUFjNW1DLEtBQUssSUFFeEIxUyxLQUFLMDVDLFdBU0YsWUFBQUssUUFBUCxXQUNFLEdBQUkvNUMsS0FBSzA1QyxVQUFZMTVDLEtBQUttNUMsV0FDeEIsTUFBTSxJQUFJaDdDLE1BQU0sNENBSWxCLE9BRkE2QixLQUFLeTVDLGNBQWdCejVDLEtBQUt5NUMsWUFBY3o1QyxLQUFLbTVDLFdBQzdDbjVDLEtBQUtzNUMsY0FBYzVtQyxLQUFLLEdBQ2pCMVMsS0FBS3U1QyxPQUFPdjVDLEtBQUs2NUMsZ0JBQWdCNzVDLEtBQUswNUMsUUFBVSxLQU16RCxzQkFBVyxxQkFBTSxLQUFqQixXQUNFLE9BQU8xNUMsS0FBSzA1QyxVQUFZMTVDLEtBQUttNUMsNENBT3hCLFlBQUF4NEMsSUFBUCxXQUNFLE9BQU9YLEtBQUt1NUMsT0FBT3Y1QyxLQUFLNjVDLGdCQUFnQjc1QyxLQUFLMDVDLFVBQVksS0FZcEQsWUFBQXBwQyxPQUFQLFNBQWM3UixFQUFldTdDLE9BQXFCLHdEQUVoRCxHQUFJQSxFQUFhLENBQ2YsSUFBSyxJQUFJOTlDLEVBQUl1QyxFQUFPdkMsRUFBSThELEtBQUswNUMsUUFBVU0sRUFBYTk5QyxJQUNsRDhELEtBQUt1NUMsT0FBT3Y1QyxLQUFLNjVDLGdCQUFnQjM5QyxJQUFNOEQsS0FBS3U1QyxPQUFPdjVDLEtBQUs2NUMsZ0JBQWdCMzlDLEVBQUk4OUMsSUFFOUVoNkMsS0FBSzA1QyxTQUFXTSxFQUNoQmg2QyxLQUFLbzVDLGdCQUFnQjFtQyxLQUFLLENBQUVxRCxNQUFPdFgsRUFBT3NsQixPQUFRaTJCLElBSXBELElBQVM5OUMsRUFBSThELEtBQUswNUMsUUFBVSxFQUFHeDlDLEdBQUt1QyxFQUFPdkMsSUFDekM4RCxLQUFLdTVDLE9BQU92NUMsS0FBSzY1QyxnQkFBZ0IzOUMsRUFBSSs5QyxFQUFNdjhDLFNBQVdzQyxLQUFLdTVDLE9BQU92NUMsS0FBSzY1QyxnQkFBZ0IzOUMsSUFFekYsSUFBU0EsRUFBSSxFQUFHQSxFQUFJKzlDLEVBQU12OEMsT0FBUXhCLElBQ2hDOEQsS0FBS3U1QyxPQUFPdjVDLEtBQUs2NUMsZ0JBQWdCcDdDLEVBQVF2QyxJQUFNKzlDLEVBQU0vOUMsR0FPdkQsR0FMSSs5QyxFQUFNdjhDLFFBQ1JzQyxLQUFLcTVDLGdCQUFnQjNtQyxLQUFLLENBQUVxRCxNQUFPdFgsRUFBT3NsQixPQUFRazJCLEVBQU12OEMsU0FJdERzQyxLQUFLMDVDLFFBQVVPLEVBQU12OEMsT0FBU3NDLEtBQUttNUMsV0FBWSxDQUNqRCxJQUFNZSxFQUFlbDZDLEtBQUswNUMsUUFBVU8sRUFBTXY4QyxPQUFVc0MsS0FBS201QyxXQUN6RG41QyxLQUFLeTVDLGFBQWVTLEVBQ3BCbDZDLEtBQUswNUMsUUFBVTE1QyxLQUFLbTVDLFdBQ3BCbjVDLEtBQUtzNUMsY0FBYzVtQyxLQUFLd25DLFFBRXhCbDZDLEtBQUswNUMsU0FBV08sRUFBTXY4QyxRQVFuQixZQUFBeThDLFVBQVAsU0FBaUIvbkIsR0FDWEEsRUFBUXB5QixLQUFLMDVDLFVBQ2Z0bkIsRUFBUXB5QixLQUFLMDVDLFNBRWYxNUMsS0FBS3k1QyxhQUFlcm5CLEVBQ3BCcHlCLEtBQUswNUMsU0FBV3RuQixFQUNoQnB5QixLQUFLczVDLGNBQWM1bUMsS0FBSzBmLElBR25CLFlBQUFnb0IsY0FBUCxTQUFxQjM3QyxFQUFlMnpCLEVBQWVvWCxHQUNqRCxLQUFJcFgsR0FBUyxHQUFiLENBR0EsR0FBSTN6QixFQUFRLEdBQUtBLEdBQVN1QixLQUFLMDVDLFFBQzdCLE1BQU0sSUFBSXY3QyxNQUFNLCtCQUVsQixHQUFJTSxFQUFRK3FDLEVBQVMsRUFDbkIsTUFBTSxJQUFJcnJDLE1BQU0sZ0RBR2xCLEdBQUlxckMsRUFBUyxFQUFHLENBQ2QsSUFBSyxJQUFJdHRDLEVBQUlrMkIsRUFBUSxFQUFHbDJCLEdBQUssRUFBR0EsSUFDOUI4RCxLQUFLcVYsSUFBSTVXLEVBQVF2QyxFQUFJc3RDLEVBQVF4cEMsS0FBS3NSLElBQUk3UyxFQUFRdkMsSUFFaEQsSUFBTW0rQyxFQUFnQjU3QyxFQUFRMnpCLEVBQVFvWCxFQUFVeHBDLEtBQUswNUMsUUFDckQsR0FBSVcsRUFBZSxFQUVqQixJQURBcjZDLEtBQUswNUMsU0FBV1csRUFDVHI2QyxLQUFLMDVDLFFBQVUxNUMsS0FBS201QyxZQUN6Qm41QyxLQUFLMDVDLFVBQ0wxNUMsS0FBS3k1QyxjQUNMejVDLEtBQUtzNUMsY0FBYzVtQyxLQUFLLFFBSTVCLElBQVN4VyxFQUFJLEVBQUdBLEVBQUlrMkIsRUFBT2wyQixJQUN6QjhELEtBQUtxVixJQUFJNVcsRUFBUXZDLEVBQUlzdEMsRUFBUXhwQyxLQUFLc1IsSUFBSTdTLEVBQVF2QyxNQVc1QyxZQUFBMjlDLGdCQUFSLFNBQXdCOWpDLEdBQ3RCLE9BQVEvVixLQUFLeTVDLFlBQWMxakMsR0FBUy9WLEtBQUttNUMsWUFFN0MsRUF4TkEsR0FBYSxFQUFBbUIsYUFBQUEsZ0ZDZGIsaUJBQWdCQyxFQUFTQyxFQUFRQyxHQUMvQixRQUQrQixJQUFBQSxJQUFBQSxFQUFBLEdBQ1osaUJBQVJELEVBQ1QsT0FBT0EsRUFJVCxJQUFNRSxFQUFvQmxCLE1BQU1tQixRQUFRSCxHQUFPLEdBQUssR0FFcEQsSUFBSyxJQUFNbjdDLEtBQU9tN0MsRUFFaEJFLEVBQWFyN0MsR0FBT283QyxHQUFTLEVBQUlELEVBQUluN0MsR0FBUW03QyxFQUFJbjdDLElBQVFrN0MsRUFBTUMsRUFBSW43QyxHQUFNbzdDLEVBQVEsR0FHbkYsT0FBT0MsK2pCQ0VULGFBQ0EsVUFDQSxVQUNBLFVBQ0EsU0FDQSxVQUVBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBR0EsVUFDQSxVQUdJRSxHQUEyQixFQUUvQixjQWtERSxXQUNFdnRDLEdBREYsTUFHRSxjQUFPLFlBckNELEVBQUF3dEMsVUFBWSxJQUFJLEVBQUFodEMsYUFFaEIsRUFBQWl0QyxRQUFVLElBQUksRUFBQWp0QyxhQUVaLEVBQUFrdEMsWUFBYyxJQUFJLEVBQUFsdEMsYUFFcEIsRUFBQXRQLFVBQVksSUFBSSxFQUFBc1AsYUFFZCxFQUFBNlcsVUFBWSxJQUFJLEVBQUE3VyxhQWdDeEIsRUFBS3dPLHNCQUF3QixJQUFJLEVBQUEyK0IscUJBQ2pDLEVBQUsvN0IsZUFBaUIsSUFBSSxFQUFBZzhCLGVBQWU1dEMsR0FDekMsRUFBS2dQLHNCQUFzQnNHLFdBQVcsRUFBQS9JLGdCQUFpQixFQUFLcUYsZ0JBQzVELEVBQUsxUixlQUFpQixFQUFLbFAsU0FBUyxFQUFLZ2Usc0JBQXNCQyxlQUFlLEVBQUE0K0IsZ0JBQzlFLEVBQUs3K0Isc0JBQXNCc0csV0FBVyxFQUFBOVAsZUFBZ0IsRUFBS3RGLGdCQUMzRCxFQUFLQyxZQUFjLEVBQUs2TyxzQkFBc0JDLGVBQWUsRUFBQTYrQixZQUM3RCxFQUFLOStCLHNCQUFzQnNHLFdBQVcsRUFBQTdQLFlBQWEsRUFBS3RGLGFBQ3hELEVBQUtsSyxZQUFjLEVBQUtqRixTQUFTLEVBQUtnZSxzQkFBc0JDLGVBQWUsRUFBQTgrQixhQUFhLFdBQU0sU0FBSzl4QixxQkFDbkcsRUFBS2pOLHNCQUFzQnNHLFdBQVcsRUFBQThOLGFBQWMsRUFBS250QixhQUN6RCxFQUFLc2hCLGlCQUFtQixFQUFLdkksc0JBQXNCQyxlQUFlLEVBQUErK0Isa0JBQ2xFLEVBQUtoL0Isc0JBQXNCc0csV0FBVyxFQUFBMjRCLGtCQUFtQixFQUFLMTJCLGtCQUM5RCxFQUFLMjJCLGlCQUFtQixFQUFLbC9CLHNCQUFzQkMsZUFBZSxFQUFBay9CLGlCQUNsRSxFQUFLbi9CLHNCQUFzQnNHLFdBQVcsRUFBQTg0QixpQkFBa0IsRUFBS0Ysa0JBQzdELEVBQUtHLGVBQWlCLEVBQUtyL0Isc0JBQXNCQyxlQUFlLEVBQUFxL0IsZ0JBQ2hFLEVBQUt0L0Isc0JBQXNCc0csV0FBVyxFQUFBNVAsZ0JBQWlCLEVBQUsyb0MsZ0JBQzVELEVBQUtFLGdCQUFrQixFQUFLdi9CLHNCQUFzQkMsZUFBZSxFQUFBdS9CLGdCQUNqRSxFQUFLeC9CLHNCQUFzQnNHLFdBQVcsRUFBQW01QixnQkFBaUIsRUFBS0YsaUJBRzVELEVBQUtsL0IsY0FBZ0IsSUFBSSxFQUFBcS9CLGFBQWEsRUFBS3h1QyxlQUFnQixFQUFLcXVDLGdCQUFpQixFQUFLdDRDLFlBQWEsRUFBS2k0QyxpQkFBa0IsRUFBSy90QyxZQUFhLEVBQUt5UixlQUFnQixFQUFLMkYsaUJBQWtCLEVBQUs4MkIsZ0JBQzdMLEVBQUtyOUMsVUFBUyxJQUFBaWYsY0FBYSxFQUFLWixjQUFjM2QsV0FBWSxFQUFLZzhDLGNBQy9ELEVBQUsxOEMsU0FBUyxFQUFLcWUsZUFHbkIsRUFBS3JlLFVBQVMsSUFBQWlmLGNBQWEsRUFBSy9QLGVBQWVqUCxTQUFVLEVBQUtDLFlBQzlELEVBQUtGLFVBQVMsSUFBQWlmLGNBQWEsRUFBS2hhLFlBQVl3d0IsT0FBUSxFQUFLZ25CLFVBQ3pELEVBQUt6OEMsVUFBUyxJQUFBaWYsY0FBYSxFQUFLaGEsWUFBWXV3QixTQUFVLEVBQUtnbkIsWUFDM0QsRUFBS3g4QyxTQUFTLEVBQUs0Z0IsZUFBZStELGdCQUFlLFNBQUEzakIsR0FBTyxTQUFLc2YsZUFBZXRmLE9BQzVFLEVBQUtoQixTQUFTLEVBQUtrUCxlQUFlNU8sVUFBUyxTQUFBc1AsR0FDekMsRUFBS3lXLFVBQVVoUyxLQUFLLENBQUV6UyxTQUFVLEVBQUtzTixlQUFlak4sT0FBTytCLE1BQU93TyxPQUFRLElBQzFFLEVBQUswcUMsaUJBQWlCUyxlQUFlLEVBQUt6dUMsZUFBZWpOLE9BQU80dEIsVUFBVyxFQUFLM2dCLGVBQWVqTixPQUFPMjdDLGtCQUV4RyxFQUFLNTlDLFNBQVMsRUFBS3FlLGNBQWMvZCxVQUFTLFNBQUFzUCxHQUN4QyxFQUFLeVcsVUFBVWhTLEtBQUssQ0FBRXpTLFNBQVUsRUFBS3NOLGVBQWVqTixPQUFPK0IsTUFBT3dPLE9BQVEsSUFDMUUsRUFBSzBxQyxpQkFBaUJTLGVBQWUsRUFBS3p1QyxlQUFlak4sT0FBTzR0QixVQUFXLEVBQUszZ0IsZUFBZWpOLE9BQU8yN0Msa0JBSXhHLEVBQUtDLGFBQWUsSUFBSSxFQUFBQyxhQUFZLFNBQUM1dkMsRUFBTTZ2QyxHQUFrQixTQUFLMS9CLGNBQWMyL0IsTUFBTTl2QyxFQUFNNnZDLFFBNkpoRyxPQTNQMkMsT0FpQnpDLHNCQUFXLHVCQUFRLEtBQW5CLFdBQXdDLE9BQU9wOEMsS0FBSzY2QyxVQUFVNXNDLHVDQUU5RCxzQkFBVyxxQkFBTSxLQUFqQixXQUFzQyxPQUFPak8sS0FBSzg2QyxRQUFRN3NDLHVDQUUxRCxzQkFBVyx5QkFBVSxLQUFyQixXQUF3QyxPQUFPak8sS0FBSys2QyxZQUFZOXNDLHVDQUVoRSxzQkFBVyx1QkFBUSxLQUFuQixXQUFnRSxPQUFPak8sS0FBS3pCLFVBQVUwUCx1Q0FPdEYsc0JBQVcsdUJBQVEsS0FBbkIsc0JBT0UsT0FOS2pPLEtBQUtzOEMsZUFDUnQ4QyxLQUFLczhDLGFBQWUsSUFBSSxFQUFBenVDLGFBQ3hCN04sS0FBSzNCLFNBQVMyQixLQUFLMGtCLFVBQVV6VyxPQUFNLFNBQUF0SyxTQUNoQixRQUFqQixJQUFLMjRDLG9CQUFZLFNBQUU1cEMsS0FBSy9PLEVBQUcxRCxlQUd4QkQsS0FBS3M4QyxhQUFhcnVDLHVDQUczQixzQkFBVyxtQkFBSSxLQUFmLFdBQTRCLE9BQU9qTyxLQUFLdU4sZUFBZXlCLHNDQUN2RCxzQkFBVyxtQkFBSSxLQUFmLFdBQTRCLE9BQU9oUCxLQUFLdU4sZUFBZXJRLHNDQUN2RCxzQkFBVyxzQkFBTyxLQUFsQixXQUFtQyxPQUFPOEMsS0FBS3VOLGVBQWVpUix5Q0FDOUQsc0JBQVcsc0JBQU8sS0FBbEIsV0FBeUMsT0FBT3hlLEtBQUtpZixlQUFlNVIsYUFDcEUsU0FBbUJBLEdBQ2pCLElBQUssSUFBTWhPLEtBQU9nTyxFQUNoQnJOLEtBQUtpZixlQUFlNVIsUUFBUWhPLEdBQU9nTyxFQUFRaE8sb0NBbUR4QyxZQUFBUyxRQUFQLGlCQUNNRSxLQUFLcWUsY0FHVCxZQUFNdmUsUUFBTyxXQUNJLFFBQWpCLEVBQUFFLEtBQUt1OEMsb0JBQVksU0FBRXo4QyxVQUNuQkUsS0FBS3U4QyxrQkFBZTUyQyxJQUdmLFlBQUE0WSxNQUFQLFNBQWFoUyxFQUEyQm1wQixHQUN0QzExQixLQUFLazhDLGFBQWEzOUIsTUFBTWhTLEVBQU1tcEIsSUFZekIsWUFBQThtQixVQUFQLFNBQWlCandDLEVBQTJCa3dDLEdBQ3RDejhDLEtBQUt3TixZQUFZcVosVUFBWSxFQUFBNjFCLGFBQWFDLE9BQVMvQixJQUNyRDU2QyxLQUFLd04sWUFBWW5CLEtBQUsscURBQ3RCdXVDLEdBQTJCLEdBRTdCNTZDLEtBQUtrOEMsYUFBYU0sVUFBVWp3QyxFQUFNa3dDLElBRzdCLFlBQUFsNUIsT0FBUCxTQUFjM1IsRUFBV0MsR0FDbkJza0IsTUFBTXZrQixJQUFNdWtCLE1BQU10a0IsS0FJdEJELEVBQUlwTCxLQUFLd0IsSUFBSTRKLEVBQUcsRUFBQWdyQyxjQUNoQi9xQyxFQUFJckwsS0FBS3dCLElBQUk2SixFQUFHLEVBQUFnckMsY0FFaEI3OEMsS0FBS3VOLGVBQWVnVyxPQUFPM1IsRUFBR0MsS0FPekIsWUFBQWlyQyxPQUFQLFNBQWNDLEVBQTJCdHJCLFFBQUEsSUFBQUEsSUFBQUEsR0FBQSxHQUN2Q3p4QixLQUFLdU4sZUFBZXV2QyxPQUFPQyxFQUFXdHJCLElBVWpDLFlBQUF2d0IsWUFBUCxTQUFtQjJtQixFQUFjekQsRUFBK0J2VCxHQUM5RDdRLEtBQUt1TixlQUFlck0sWUFBWTJtQixFQUFNekQsRUFBcUJ2VCxJQU90RCxZQUFBeWtCLFlBQVAsU0FBbUJDLEdBQ2pCdjFCLEtBQUt1TixlQUFlK25CLFlBQVlDLElBTTNCLFlBQUFDLFlBQVAsV0FDRXgxQixLQUFLdU4sZUFBZWlvQixlQU1mLFlBQUFsTSxlQUFQLFdBQ0V0cEIsS0FBS3VOLGVBQWUrYixrQkFHZixZQUFBbU0sYUFBUCxTQUFvQnBrQixHQUNsQnJSLEtBQUt1TixlQUFla29CLGFBQWFwa0IsSUFJNUIsWUFBQTJyQyxtQkFBUCxTQUEwQnB0QyxFQUF5QjhsQixHQUNqRCxPQUFPMTFCLEtBQUswYyxjQUFjc2dDLG1CQUFtQnB0QyxFQUFJOGxCLElBSTVDLFlBQUF1bkIsbUJBQVAsU0FBMEJydEMsRUFBeUI4bEIsR0FDakQsT0FBTzExQixLQUFLMGMsY0FBY3VnQyxtQkFBbUJydEMsRUFBSThsQixJQUk1QyxZQUFBd25CLG1CQUFQLFNBQTBCdHRDLEVBQXlCOGxCLEdBQ2pELE9BQU8xMUIsS0FBSzBjLGNBQWN3Z0MsbUJBQW1CdHRDLEVBQUk4bEIsSUFJNUMsWUFBQXluQixtQkFBUCxTQUEwQnQvQixFQUFlNlgsR0FDdkMsT0FBTzExQixLQUFLMGMsY0FBY3lnQyxtQkFBbUJ0L0IsRUFBTzZYLElBRzVDLFlBQUF2WixPQUFWLFdBQ01uYyxLQUFLaWYsZUFBZTNGLFdBQVc4akMsYUFDakNwOUMsS0FBS3E5QyxzQkFJRixZQUFBcGdDLE1BQVAsV0FDRWpkLEtBQUswYyxjQUFjTyxRQUNuQmpkLEtBQUt1TixlQUFlMFAsUUFDcEJqZCxLQUFLNDdDLGdCQUFnQjMrQixRQUNyQmpkLEtBQUtzRCxZQUFZMlosUUFDakJqZCxLQUFLNGtCLGlCQUFpQjNILFNBR2QsWUFBQTBCLGVBQVYsU0FBeUJ0ZixTQUV2QixPQUFRQSxHQUNOLElBQUssYUFDSFcsS0FBS3dlLFFBQVErRSxPQUFPdmpCLEtBQUtnUCxLQUFNaFAsS0FBSzlDLE1BQ3BDLE1BQ0YsSUFBSyxjQUNDOEMsS0FBS2lmLGVBQWUzRixXQUFXOGpDLFlBQ2pDcDlDLEtBQUtxOUMsc0JBRVksUUFBakIsRUFBQXI5QyxLQUFLdThDLG9CQUFZLFNBQUV6OEMsVUFDbkJFLEtBQUt1OEMsa0JBQWU1MkMsS0FNbEIsWUFBQTAzQyxtQkFBVixzQkFDRSxJQUFLcjlDLEtBQUt1OEMsYUFBYyxDQUN0QixJQUFNLEVBQTZCLEdBQ25DLEVBQVl0N0MsS0FBS2pCLEtBQUtqQixXQUFXLEVBQUF1K0MsOEJBQThCdi9DLEtBQUssS0FBTWlDLEtBQUt1TixrQkFDL0UsRUFBWXRNLEtBQUtqQixLQUFLazlDLG1CQUFtQixDQUFFSyxNQUFPLE1BQU8sV0FFdkQsT0FEQSxJQUFBRCwrQkFBOEIsRUFBSy92QyxpQkFDNUIsTUFFVHZOLEtBQUt1OEMsYUFBZSxDQUNsQno4QyxRQUFTLFdBQ1AsSUFBZ0IsMkJBQUosS0FDUkEsY0FNZCxFQTNQQSxDQUEyQyxFQUFBK0MsWUFBckIsRUFBQWtwQixhQUFBQSxzR0N4QnRCLDhCQUNVLEtBQUF5eEIsV0FBZ0MsR0FFaEMsS0FBQUMsV0FBcUIsRUF3Qy9CLE9BdENFLHNCQUFXLG9CQUFLLEtBQWhCLHNCQW1CRSxPQWxCS3o5QyxLQUFLMDlDLFNBQ1IxOUMsS0FBSzA5QyxPQUFTLFNBQUM5aUMsR0FjYixPQWJBLEVBQUs0aUMsV0FBV3Y4QyxLQUFLMlosR0FDRixDQUNqQjlhLFFBQVMsV0FDUCxJQUFLLEVBQUsyOUMsVUFDUixJQUFLLElBQUl2aEQsRUFBSSxFQUFHQSxFQUFJLEVBQUtzaEQsV0FBVzkvQyxPQUFReEIsSUFDMUMsR0FBSSxFQUFLc2hELFdBQVd0aEQsS0FBTzBlLEVBRXpCLFlBREEsRUFBSzRpQyxXQUFXbHRDLE9BQU9wVSxFQUFHLE9BVWpDOEQsS0FBSzA5Qyx3Q0FHUCxZQUFBaHJDLEtBQVAsU0FBWWlyQyxFQUFTQyxHQUVuQixJQURBLElBQU1DLEVBQTJCLEdBQ3hCM2hELEVBQUksRUFBR0EsRUFBSThELEtBQUt3OUMsV0FBVzkvQyxPQUFReEIsSUFDMUMyaEQsRUFBTTU4QyxLQUFLakIsS0FBS3c5QyxXQUFXdGhELElBRTdCLElBQVNBLEVBQUksRUFBR0EsRUFBSTJoRCxFQUFNbmdELE9BQVF4QixJQUNoQzJoRCxFQUFNM2hELEdBQUc0aEQsVUFBS240QyxFQUFXZzRDLEVBQU1DLElBSTVCLFlBQUE5OUMsUUFBUCxXQUNNRSxLQUFLdzlDLGFBQ1B4OUMsS0FBS3c5QyxXQUFXOS9DLE9BQVMsR0FFM0JzQyxLQUFLeTlDLFdBQVksR0FFckIsRUEzQ0EsR0FBYSxFQUFBNXZDLGFBQUFBLEVBNkNiLHdCQUFnQ2t3QyxFQUFpQkMsR0FDL0MsT0FBT0QsR0FBSyxTQUFBemdELEdBQUssT0FBQTBnRCxFQUFHdHJDLEtBQUtwViw4bEJDNUQzQixJQXlGWTJ0QixFQXpGWixVQUNBLFVBQ0EsVUFDQSxTQUNBLFVBQ0EsU0FDQSxVQUNBLFVBRUEsU0FDQSxTQUNBLFVBQ0EsVUFDQSxVQUNBLFVBRUEsVUFLTWd6QixFQUFvQyxDQUFFLElBQUssRUFBRyxJQUFLLEVBQUcsSUFBSyxFQUFHLElBQUssRUFBRyxJQUFLLEVBQUcsSUFBSyxHQTZCbkZDLEVBQXlCLE9BUS9CLFNBQVNDLEVBQW9CQyxFQUFXQyxHQUN0QyxHQUFJRCxFQUFJLEdBQ04sT0FBT0MsRUFBS0MsY0FBZSxFQUU3QixPQUFRRixHQUNOLEtBQUssRUFBRyxRQUFTQyxFQUFLRSxXQUN0QixLQUFLLEVBQUcsUUFBU0YsRUFBS0csWUFDdEIsS0FBSyxFQUFHLFFBQVNILEVBQUtJLGVBQ3RCLEtBQUssRUFBRyxRQUFTSixFQUFLSyxpQkFDdEIsS0FBSyxFQUFHLFFBQVNMLEVBQUtNLFNBQ3RCLEtBQUssRUFBRyxRQUFTTixFQUFLTyxTQUN0QixLQUFLLEVBQUcsUUFBU1AsRUFBS1EsV0FDdEIsS0FBSyxFQUFHLFFBQVNSLEVBQUtTLGdCQUN0QixLQUFLLEVBQUcsUUFBU1QsRUFBS1UsWUFDdEIsS0FBSyxHQUFJLFFBQVNWLEVBQUtXLGNBQ3ZCLEtBQUssR0FBSSxRQUFTWCxFQUFLWSxZQUN2QixLQUFLLEdBQUksUUFBU1osRUFBS2EsZUFDdkIsS0FBSyxHQUFJLFFBQVNiLEVBQUtjLGlCQUN2QixLQUFLLEdBQUksUUFBU2QsRUFBS2Usb0JBQ3ZCLEtBQUssR0FBSSxRQUFTZixFQUFLZ0Isa0JBQ3ZCLEtBQUssR0FBSSxRQUFTaEIsRUFBS2lCLGdCQUN2QixLQUFLLEdBQUksUUFBU2pCLEVBQUtrQixtQkFDdkIsS0FBSyxHQUFJLFFBQVNsQixFQUFLbUIsYUFDdkIsS0FBSyxHQUFJLFFBQVNuQixFQUFLb0IsWUFDdkIsS0FBSyxHQUFJLFFBQVNwQixFQUFLcUIsVUFDdkIsS0FBSyxHQUFJLFFBQVNyQixFQUFLc0IsU0FDdkIsS0FBSyxHQUFJLFFBQVN0QixFQUFLQyxZQUV6QixPQUFPLEdBR1QsU0FBWXJ6QixHQUNWLGlEQUNBLG1EQUZGLENBQVlBLEVBQUEsRUFBQUEsMkJBQUEsRUFBQUEseUJBQXdCLEtBTXBDLElBaUNBLGFBR0UsV0FDVTFkLEVBQ0FvaUIsRUFDQW5pQixFQUNBMkssR0FIQSxLQUFBNUssZUFBQUEsRUFDQSxLQUFBb2lCLGFBQUFBLEVBQ0EsS0FBQW5pQixZQUFBQSxFQUNBLEtBQUEySyxnQkFBQUEsRUFORixLQUFBeW5DLE1BQXFCLElBQUlDLFlBQVksR0FzRC9DLE9BN0NTLFlBQUFDLEtBQVAsU0FBWUMsR0FDVi8vQyxLQUFLNC9DLE1BQVEsSUFBSUMsWUFBWSxJQUd4QixZQUFBRyxJQUFQLFNBQVd6ekMsRUFBbUI5TixFQUFlQyxHQUMzQ3NCLEtBQUs0L0MsT0FBUSxJQUFBSyxRQUFPamdELEtBQUs0L0MsTUFBT3J6QyxFQUFLMnpDLFNBQVN6aEQsRUFBT0MsS0FHaEQsWUFBQXloRCxPQUFQLFNBQWNDLEdBQ1osSUFBS0EsRUFFSCxPQURBcGdELEtBQUs0L0MsTUFBUSxJQUFJQyxZQUFZLElBQ3RCLEVBRVQsSUFBTXR6QyxHQUFPLElBQUE4ekMsZUFBY3JnRCxLQUFLNC9DLE9BRWhDLE9BREE1L0MsS0FBSzQvQyxNQUFRLElBQUlDLFlBQVksR0FDckJ0ekMsR0FFTixJQUFLLEtBQ0h2TSxLQUFLMnZCLGFBQWFuc0IsaUJBQW9CLEVBQUFzYSxHQUFHQyxJQUFHLFVBQVUsRUFBQUQsR0FBR0MsSUFBRyxNQUM1RCxNQUNGLElBQUssS0FDSC9kLEtBQUsydkIsYUFBYW5zQixpQkFBb0IsRUFBQXNhLEdBQUdDLElBQUcsYUFBYSxFQUFBRCxHQUFHQyxJQUFHLE1BQy9ELE1BQ0YsSUFBSyxJQUNILElBQU11aUMsRUFBV3RnRCxLQUFLdU4sZUFBZWpOLE9BQU80dEIsVUFBWSxFQUN0RCxLQUFPbHVCLEtBQUt1TixlQUFlak4sT0FBTzI3QyxhQUFlLEdBQUssSUFDeERqOEMsS0FBSzJ2QixhQUFhbnNCLGlCQUFvQixFQUFBc2EsR0FBR0MsSUFBRyxPQUFPdWlDLEVBQUssRUFBQXhpQyxHQUFHQyxJQUFHLE1BQzlELE1BQ0YsSUFBSyxJQUVIL2QsS0FBSzJ2QixhQUFhbnNCLGlCQUFvQixFQUFBc2EsR0FBR0MsSUFBRyxTQUFTLEVBQUFELEdBQUdDLElBQUcsTUFDM0QsTUFDRixJQUFLLEtBQ0gsSUFDSXBiLEVBRHNDLENBQUUsTUFBUyxFQUFHLFVBQWEsRUFBRyxJQUFPLEdBQzVEM0MsS0FBS21ZLGdCQUFnQm1CLFdBQVcra0IsYUFDbkQxN0IsR0FBUzNDLEtBQUttWSxnQkFBZ0JtQixXQUFXdWtCLFlBQWMsRUFBSSxFQUMzRDc5QixLQUFLMnZCLGFBQWFuc0IsaUJBQW9CLEVBQUFzYSxHQUFHQyxJQUFHLE9BQU9wYixFQUFLLEtBQUssRUFBQW1iLEdBQUdDLElBQUcsTUFDbkUsTUFDRixRQUVFL2QsS0FBS3dOLFlBQVlnQyxNQUFNLG9CQUFxQmpELEdBQzVDdk0sS0FBSzJ2QixhQUFhbnNCLGlCQUFvQixFQUFBc2EsR0FBR0MsSUFBRyxPQUFPLEVBQUFELEdBQUdDLElBQUcsTUFFN0QsT0FBTyxHQUVYLEVBdkRBLEdBMEZBLGNBbURFLFdBQ21CeFEsRUFDQXF1QyxFQUNBanNCLEVBQ0E0ckIsRUFDQS90QyxFQUNBMkssRUFDQW9vQyxFQUNBOXlDLEVBQ0FzbUIsUUFBQSxJQUFBQSxJQUFBQSxFQUFBLElBQXFDLEVBQUF5c0Isc0JBVHhELE1BV0UsY0FBTyxLQVZVLEVBQUFqekMsZUFBQUEsRUFDQSxFQUFBcXVDLGdCQUFBQSxFQUNBLEVBQUFqc0IsYUFBQUEsRUFDQSxFQUFBNHJCLGlCQUFBQSxFQUNBLEVBQUEvdEMsWUFBQUEsRUFDQSxFQUFBMkssZ0JBQUFBLEVBQ0EsRUFBQW9vQyxrQkFBQUEsRUFDQSxFQUFBOXlDLGdCQUFBQSxFQUNBLEVBQUFzbUIsUUFBQUEsRUEzRFgsRUFBQTBzQixhQUE0QixJQUFJWixZQUFZLE1BQzVDLEVBQUFhLGVBQWdDLElBQUksRUFBQUMsY0FDcEMsRUFBQUMsYUFBNEIsSUFBSSxFQUFBQyxZQUNoQyxFQUFBdmMsVUFBc0IsSUFBSSxFQUFBckgsU0FDMUIsRUFBQTZqQixhQUFlLEdBQ2YsRUFBQUMsVUFBWSxHQUNWLEVBQUFDLGtCQUE4QixHQUM5QixFQUFBQyxlQUEyQixHQUU3QixFQUFBQyxhQUErQixFQUFBbjJCLGtCQUFrQnd2QixRQUNqRCxFQUFBNEcsdUJBQXlDLEVBQUFwMkIsa0JBQWtCd3ZCLFFBSTNELEVBQUE2RyxlQUFpQixJQUFJLEVBQUF2ekMsYUFFckIsRUFBQXd6QyxzQkFBd0IsSUFBSSxFQUFBeHpDLGFBRTVCLEVBQUF5ekMsZ0JBQWtCLElBQUksRUFBQXp6QyxhQUV0QixFQUFBMHpDLG9CQUFzQixJQUFJLEVBQUExekMsYUFFMUIsRUFBQTJ6Qyx3QkFBMEIsSUFBSSxFQUFBM3pDLGFBRTlCLEVBQUE0ekMsK0JBQWlDLElBQUksRUFBQTV6QyxhQUdyQyxFQUFBNnpDLFlBQWMsSUFBSSxFQUFBN3pDLGFBRWxCLEVBQUE4ekMsV0FBYSxJQUFJLEVBQUE5ekMsYUFFakIsRUFBQTZOLGNBQWdCLElBQUksRUFBQTdOLGFBRXBCLEVBQUFrdEMsWUFBYyxJQUFJLEVBQUFsdEMsYUFFbEIsRUFBQTZXLFVBQVksSUFBSSxFQUFBN1csYUFFaEIsRUFBQWdPLGVBQWlCLElBQUksRUFBQWhPLGFBRXJCLEVBQUErekMsU0FBVyxJQUFJLEVBQUEvekMsYUFHZixFQUFBZzBDLFlBQTJCLENBQ2pDQyxRQUFRLEVBQ1JDLGFBQWMsRUFDZEMsYUFBYyxFQUNkQyxjQUFlLEVBQ2ZoaUQsU0FBVSxHQTJqRkosRUFBQWlpRCxlQUFpQixDQUFDLElBQUQsU0E1aUZ2QixFQUFLN2pELFNBQVMsRUFBSzAxQixTQUduQixFQUFLdEcsY0FBZ0IsRUFBS2xnQixlQUFlak4sT0FDekMsRUFBS2pDLFNBQVMsRUFBS2tQLGVBQWVpUixRQUFRa1Asa0JBQWlCLFNBQUFwd0IsR0FBSyxTQUFLbXdCLGNBQWdCbndCLEVBQUVxd0IsaUJBS3ZGLEVBQUtvRyxRQUFRb3VCLHVCQUFzQixTQUFDdGtDLEVBQU9raUMsR0FDekMsRUFBS3Z5QyxZQUFZZ0MsTUFBTSxxQkFBc0IsQ0FBRTR5QyxXQUFZLEVBQUtydUIsUUFBUXN1QixjQUFjeGtDLEdBQVFraUMsT0FBUUEsRUFBT3VDLGVBRS9HLEVBQUt2dUIsUUFBUXd1Qix1QkFBc0IsU0FBQTFrQyxHQUNqQyxFQUFLclEsWUFBWWdDLE1BQU0scUJBQXNCLENBQUU0eUMsV0FBWSxFQUFLcnVCLFFBQVFzdUIsY0FBY3hrQyxRQUV4RixFQUFLa1csUUFBUXl1QiwyQkFBMEIsU0FBQXhyQixHQUNyQyxFQUFLeHBCLFlBQVlnQyxNQUFNLHlCQUEwQixDQUFFd25CLEtBQUksT0FFekQsRUFBS2pELFFBQVEwdUIsdUJBQXNCLFNBQUNMLEVBQVk3OEIsRUFBUWhaLEdBQ3RELEVBQUtpQixZQUFZZ0MsTUFBTSxxQkFBc0IsQ0FBRTR5QyxXQUFVLEVBQUU3OEIsT0FBTSxFQUFFaFosS0FBSSxPQUV6RSxFQUFLd25CLFFBQVEydUIsdUJBQXNCLFNBQUM3a0MsRUFBTzBILEVBQVFvOUIsR0FDbEMsU0FBWHA5QixJQUNGbzlCLEVBQVVBLEVBQVFMLFdBRXBCLEVBQUs5MEMsWUFBWWdDLE1BQU0scUJBQXNCLENBQUU0eUMsV0FBWSxFQUFLcnVCLFFBQVFzdUIsY0FBY3hrQyxHQUFRMEgsT0FBTSxFQUFFbzlCLFFBQU8sT0FNL0csRUFBSzV1QixRQUFRNnVCLGlCQUFnQixTQUFDcjJDLEVBQU05TixFQUFPQyxHQUFRLFNBQUtta0QsTUFBTXQyQyxFQUFNOU4sRUFBT0MsTUFLM0UsRUFBS3ExQixRQUFRbXBCLG1CQUFtQixDQUFFSyxNQUFPLE1BQU8sU0FBQXdDLEdBQVUsU0FBSytDLFlBQVkvQyxNQUMzRSxFQUFLaHNCLFFBQVFtcEIsbUJBQW1CLENBQUU2RixjQUFlLElBQUt4RixNQUFPLE1BQU8sU0FBQXdDLEdBQVUsU0FBS2lELFdBQVdqRCxNQUM5RixFQUFLaHNCLFFBQVFtcEIsbUJBQW1CLENBQUVLLE1BQU8sTUFBTyxTQUFBd0MsR0FBVSxTQUFLa0QsU0FBU2xELE1BQ3hFLEVBQUtoc0IsUUFBUW1wQixtQkFBbUIsQ0FBRTZGLGNBQWUsSUFBS3hGLE1BQU8sTUFBTyxTQUFBd0MsR0FBVSxTQUFLbUQsWUFBWW5ELE1BQy9GLEVBQUtoc0IsUUFBUW1wQixtQkFBbUIsQ0FBRUssTUFBTyxNQUFPLFNBQUF3QyxHQUFVLFNBQUtvRCxXQUFXcEQsTUFDMUUsRUFBS2hzQixRQUFRbXBCLG1CQUFtQixDQUFFSyxNQUFPLE1BQU8sU0FBQXdDLEdBQVUsU0FBS3FELGNBQWNyRCxNQUM3RSxFQUFLaHNCLFFBQVFtcEIsbUJBQW1CLENBQUVLLE1BQU8sTUFBTyxTQUFBd0MsR0FBVSxTQUFLc0QsZUFBZXRELE1BQzlFLEVBQUtoc0IsUUFBUW1wQixtQkFBbUIsQ0FBRUssTUFBTyxNQUFPLFNBQUF3QyxHQUFVLFNBQUt1RCxlQUFldkQsTUFDOUUsRUFBS2hzQixRQUFRbXBCLG1CQUFtQixDQUFFSyxNQUFPLE1BQU8sU0FBQXdDLEdBQVUsU0FBS3dELG9CQUFvQnhELE1BQ25GLEVBQUtoc0IsUUFBUW1wQixtQkFBbUIsQ0FBRUssTUFBTyxNQUFPLFNBQUF3QyxHQUFVLFNBQUt5RCxtQkFBbUJ6RCxNQUNsRixFQUFLaHNCLFFBQVFtcEIsbUJBQW1CLENBQUVLLE1BQU8sTUFBTyxTQUFBd0MsR0FBVSxTQUFLMEQsZUFBZTFELE1BQzlFLEVBQUtoc0IsUUFBUW1wQixtQkFBbUIsQ0FBRUssTUFBTyxNQUFPLFNBQUF3QyxHQUFVLFNBQUsyRCxpQkFBaUIzRCxNQUNoRixFQUFLaHNCLFFBQVFtcEIsbUJBQW1CLENBQUVLLE1BQU8sTUFBTyxTQUFBd0MsR0FBVSxTQUFLNEQsZUFBZTVELE1BQzlFLEVBQUtoc0IsUUFBUW1wQixtQkFBbUIsQ0FBRTBHLE9BQVEsSUFBS3JHLE1BQU8sTUFBTyxTQUFBd0MsR0FBVSxTQUFLNEQsZUFBZTVELE1BQzNGLEVBQUtoc0IsUUFBUW1wQixtQkFBbUIsQ0FBRUssTUFBTyxNQUFPLFNBQUF3QyxHQUFVLFNBQUs4RCxZQUFZOUQsTUFDM0UsRUFBS2hzQixRQUFRbXBCLG1CQUFtQixDQUFFMEcsT0FBUSxJQUFLckcsTUFBTyxNQUFPLFNBQUF3QyxHQUFVLFNBQUs4RCxZQUFZOUQsTUFDeEYsRUFBS2hzQixRQUFRbXBCLG1CQUFtQixDQUFFSyxNQUFPLE1BQU8sU0FBQXdDLEdBQVUsU0FBSytELFlBQVkvRCxNQUMzRSxFQUFLaHNCLFFBQVFtcEIsbUJBQW1CLENBQUVLLE1BQU8sTUFBTyxTQUFBd0MsR0FBVSxTQUFLZ0UsWUFBWWhFLE1BQzNFLEVBQUtoc0IsUUFBUW1wQixtQkFBbUIsQ0FBRUssTUFBTyxNQUFPLFNBQUF3QyxHQUFVLFNBQUtpRSxZQUFZakUsTUFDM0UsRUFBS2hzQixRQUFRbXBCLG1CQUFtQixDQUFFSyxNQUFPLE1BQU8sU0FBQXdDLEdBQVUsU0FBS2tFLFNBQVNsRSxNQUN4RSxFQUFLaHNCLFFBQVFtcEIsbUJBQW1CLENBQUVLLE1BQU8sTUFBTyxTQUFBd0MsR0FBVSxTQUFLbUUsV0FBV25FLE1BQzFFLEVBQUtoc0IsUUFBUW1wQixtQkFBbUIsQ0FBRUssTUFBTyxNQUFPLFNBQUF3QyxHQUFVLFNBQUtvRSxXQUFXcEUsTUFDMUUsRUFBS2hzQixRQUFRbXBCLG1CQUFtQixDQUFFSyxNQUFPLE1BQU8sU0FBQXdDLEdBQVUsU0FBS3FFLGtCQUFrQnJFLE1BQ2pGLEVBQUtoc0IsUUFBUW1wQixtQkFBbUIsQ0FBRUssTUFBTyxNQUFPLFNBQUF3QyxHQUFVLFNBQUtzRSxnQkFBZ0J0RSxNQUMvRSxFQUFLaHNCLFFBQVFtcEIsbUJBQW1CLENBQUVLLE1BQU8sTUFBTyxTQUFBd0MsR0FBVSxTQUFLdUUsa0JBQWtCdkUsTUFDakYsRUFBS2hzQixRQUFRbXBCLG1CQUFtQixDQUFFSyxNQUFPLE1BQU8sU0FBQXdDLEdBQVUsU0FBS3dFLHlCQUF5QnhFLE1BQ3hGLEVBQUtoc0IsUUFBUW1wQixtQkFBbUIsQ0FBRUssTUFBTyxNQUFPLFNBQUF3QyxHQUFVLFNBQUt5RSw0QkFBNEJ6RSxNQUMzRixFQUFLaHNCLFFBQVFtcEIsbUJBQW1CLENBQUUwRyxPQUFRLElBQUtyRyxNQUFPLE1BQU8sU0FBQXdDLEdBQVUsU0FBSzBFLDhCQUE4QjFFLE1BQzFHLEVBQUtoc0IsUUFBUW1wQixtQkFBbUIsQ0FBRUssTUFBTyxNQUFPLFNBQUF3QyxHQUFVLFNBQUsyRSxnQkFBZ0IzRSxNQUMvRSxFQUFLaHNCLFFBQVFtcEIsbUJBQW1CLENBQUVLLE1BQU8sTUFBTyxTQUFBd0MsR0FBVSxTQUFLNEUsa0JBQWtCNUUsTUFDakYsRUFBS2hzQixRQUFRbXBCLG1CQUFtQixDQUFFSyxNQUFPLE1BQU8sU0FBQXdDLEdBQVUsU0FBSzZFLFdBQVc3RSxNQUMxRSxFQUFLaHNCLFFBQVFtcEIsbUJBQW1CLENBQUVLLE1BQU8sTUFBTyxTQUFBd0MsR0FBVSxTQUFLOEUsU0FBUzlFLE1BQ3hFLEVBQUtoc0IsUUFBUW1wQixtQkFBbUIsQ0FBRUssTUFBTyxNQUFPLFNBQUF3QyxHQUFVLFNBQUsrRSxRQUFRL0UsTUFDdkUsRUFBS2hzQixRQUFRbXBCLG1CQUFtQixDQUFFMEcsT0FBUSxJQUFLckcsTUFBTyxNQUFPLFNBQUF3QyxHQUFVLFNBQUtnRixlQUFlaEYsTUFDM0YsRUFBS2hzQixRQUFRbXBCLG1CQUFtQixDQUFFSyxNQUFPLE1BQU8sU0FBQXdDLEdBQVUsU0FBS2lGLFVBQVVqRixNQUN6RSxFQUFLaHNCLFFBQVFtcEIsbUJBQW1CLENBQUUwRyxPQUFRLElBQUtyRyxNQUFPLE1BQU8sU0FBQXdDLEdBQVUsU0FBS2tGLGlCQUFpQmxGLE1BQzdGLEVBQUtoc0IsUUFBUW1wQixtQkFBbUIsQ0FBRUssTUFBTyxNQUFPLFNBQUF3QyxHQUFVLFNBQUttRixlQUFlbkYsTUFDOUUsRUFBS2hzQixRQUFRbXBCLG1CQUFtQixDQUFFSyxNQUFPLE1BQU8sU0FBQXdDLEdBQVUsU0FBS29GLGFBQWFwRixNQUM1RSxFQUFLaHNCLFFBQVFtcEIsbUJBQW1CLENBQUUwRyxPQUFRLElBQUtyRyxNQUFPLE1BQU8sU0FBQXdDLEdBQVUsU0FBS3FGLG9CQUFvQnJGLE1BQ2hHLEVBQUtoc0IsUUFBUW1wQixtQkFBbUIsQ0FBRTZGLGNBQWUsSUFBS3hGLE1BQU8sTUFBTyxTQUFBd0MsR0FBVSxTQUFLc0YsVUFBVXRGLE1BQzdGLEVBQUtoc0IsUUFBUW1wQixtQkFBbUIsQ0FBRTZGLGNBQWUsSUFBS3hGLE1BQU8sTUFBTyxTQUFBd0MsR0FBVSxTQUFLdUYsZUFBZXZGLE1BQ2xHLEVBQUtoc0IsUUFBUW1wQixtQkFBbUIsQ0FBRUssTUFBTyxNQUFPLFNBQUF3QyxHQUFVLFNBQUt3RixnQkFBZ0J4RixNQUMvRSxFQUFLaHNCLFFBQVFtcEIsbUJBQW1CLENBQUVLLE1BQU8sTUFBTyxTQUFBd0MsR0FBVSxTQUFLeUYsV0FBV3pGLE1BQzFFLEVBQUtoc0IsUUFBUW1wQixtQkFBbUIsQ0FBRUssTUFBTyxNQUFPLFNBQUF3QyxHQUFVLFNBQUswRixjQUFjMUYsTUFDN0UsRUFBS2hzQixRQUFRbXBCLG1CQUFtQixDQUFFSyxNQUFPLE1BQU8sU0FBQXdDLEdBQVUsU0FBSzJGLGNBQWMzRixNQUM3RSxFQUFLaHNCLFFBQVFtcEIsbUJBQW1CLENBQUU2RixjQUFlLElBQU14RixNQUFPLE1BQU8sU0FBQXdDLEdBQVUsU0FBSzRGLGNBQWM1RixNQUNsRyxFQUFLaHNCLFFBQVFtcEIsbUJBQW1CLENBQUU2RixjQUFlLElBQU14RixNQUFPLE1BQU8sU0FBQXdDLEdBQVUsU0FBSzZGLGNBQWM3RixNQUtsRyxFQUFLaHNCLFFBQVE4eEIsa0JBQWtCLEVBQUEvbkMsR0FBR0csS0FBSyxXQUFNLFNBQUtyQixVQUNsRCxFQUFLbVgsUUFBUTh4QixrQkFBa0IsRUFBQS9uQyxHQUFHZ29DLElBQUksV0FBTSxTQUFLQyxjQUNqRCxFQUFLaHlCLFFBQVE4eEIsa0JBQWtCLEVBQUEvbkMsR0FBR2tvQyxJQUFJLFdBQU0sU0FBS0QsY0FDakQsRUFBS2h5QixRQUFROHhCLGtCQUFrQixFQUFBL25DLEdBQUdtb0MsSUFBSSxXQUFNLFNBQUtGLGNBQ2pELEVBQUtoeUIsUUFBUTh4QixrQkFBa0IsRUFBQS9uQyxHQUFHOEwsSUFBSSxXQUFNLFNBQUtzOEIsb0JBQ2pELEVBQUtueUIsUUFBUTh4QixrQkFBa0IsRUFBQS9uQyxHQUFHcW9DLElBQUksV0FBTSxTQUFLQyxlQUNqRCxFQUFLcnlCLFFBQVE4eEIsa0JBQWtCLEVBQUEvbkMsR0FBR3VvQyxJQUFJLFdBQU0sU0FBS0MsU0FDakQsRUFBS3Z5QixRQUFROHhCLGtCQUFrQixFQUFBL25DLEdBQUd5b0MsSUFBSSxXQUFNLFNBQUtDLGNBQ2pELEVBQUt6eUIsUUFBUTh4QixrQkFBa0IsRUFBQS9uQyxHQUFHMm9DLElBQUksV0FBTSxTQUFLQyxhQUdqRCxFQUFLM3lCLFFBQVE4eEIsa0JBQWtCLEVBQUFjLEdBQUdDLEtBQUssV0FBTSxTQUFLN3dDLFdBQ2xELEVBQUtnZSxRQUFROHhCLGtCQUFrQixFQUFBYyxHQUFHRSxLQUFLLFdBQU0sU0FBS0MsY0FDbEQsRUFBSy95QixRQUFROHhCLGtCQUFrQixFQUFBYyxHQUFHSSxLQUFLLFdBQU0sU0FBS0MsWUFNbEQsRUFBS2p6QixRQUFRb3BCLG1CQUFtQixFQUFHLElBQUksRUFBQThKLFlBQVcsU0FBQTE2QyxHQUF1RCxPQUE3QyxFQUFLMjZDLFNBQVMzNkMsR0FBTyxFQUFLNDZDLFlBQVk1NkMsSUFBYyxNQUVoSCxFQUFLd25CLFFBQVFvcEIsbUJBQW1CLEVBQUcsSUFBSSxFQUFBOEosWUFBVyxTQUFBMTZDLEdBQVEsU0FBSzQ2QyxZQUFZNTZDLE9BRTNFLEVBQUt3bkIsUUFBUW9wQixtQkFBbUIsRUFBRyxJQUFJLEVBQUE4SixZQUFXLFNBQUExNkMsR0FBUSxTQUFLMjZDLFNBQVMzNkMsT0FHeEUsRUFBS3duQixRQUFRb3BCLG1CQUFtQixFQUFHLElBQUksRUFBQThKLFlBQVcsU0FBQTE2QyxHQUFRLFNBQUs2NkMsd0JBQXdCNzZDLE9BS3ZGLEVBQUt3bkIsUUFBUW9wQixtQkFBbUIsR0FBSSxJQUFJLEVBQUE4SixZQUFXLFNBQUExNkMsR0FBUSxTQUFLODZDLG1CQUFtQjk2QyxPQUVuRixFQUFLd25CLFFBQVFvcEIsbUJBQW1CLEdBQUksSUFBSSxFQUFBOEosWUFBVyxTQUFBMTZDLEdBQVEsU0FBSys2QyxtQkFBbUIvNkMsT0FFbkYsRUFBS3duQixRQUFRb3BCLG1CQUFtQixHQUFJLElBQUksRUFBQThKLFlBQVcsU0FBQTE2QyxHQUFRLFNBQUtnN0MsdUJBQXVCaDdDLE9BYXZGLEVBQUt3bkIsUUFBUW9wQixtQkFBbUIsSUFBSyxJQUFJLEVBQUE4SixZQUFXLFNBQUExNkMsR0FBUSxTQUFLaTdDLG9CQUFvQmo3QyxPQUlyRixFQUFLd25CLFFBQVFvcEIsbUJBQW1CLElBQUssSUFBSSxFQUFBOEosWUFBVyxTQUFBMTZDLEdBQVEsU0FBS2s3QyxlQUFlbDdDLE9BRWhGLEVBQUt3bkIsUUFBUW9wQixtQkFBbUIsSUFBSyxJQUFJLEVBQUE4SixZQUFXLFNBQUExNkMsR0FBUSxTQUFLbTdDLGVBQWVuN0MsT0FFaEYsRUFBS3duQixRQUFRb3BCLG1CQUFtQixJQUFLLElBQUksRUFBQThKLFlBQVcsU0FBQTE2QyxHQUFRLFNBQUtvN0MsbUJBQW1CcDdDLE9BWXBGLEVBQUt3bkIsUUFBUWlwQixtQkFBbUIsQ0FBRU8sTUFBTyxNQUFPLFdBQU0sU0FBS2lJLGdCQUMzRCxFQUFLenhCLFFBQVFpcEIsbUJBQW1CLENBQUVPLE1BQU8sTUFBTyxXQUFNLFNBQUttSSxtQkFDM0QsRUFBSzN4QixRQUFRaXBCLG1CQUFtQixDQUFFTyxNQUFPLE1BQU8sV0FBTSxTQUFLeG5DLFdBQzNELEVBQUtnZSxRQUFRaXBCLG1CQUFtQixDQUFFTyxNQUFPLE1BQU8sV0FBTSxTQUFLdUosY0FDM0QsRUFBSy95QixRQUFRaXBCLG1CQUFtQixDQUFFTyxNQUFPLE1BQU8sV0FBTSxTQUFLeUosWUFDM0QsRUFBS2p6QixRQUFRaXBCLG1CQUFtQixDQUFFTyxNQUFPLE1BQU8sV0FBTSxTQUFLcUssa0JBQzNELEVBQUs3ekIsUUFBUWlwQixtQkFBbUIsQ0FBRU8sTUFBTyxNQUFPLFdBQU0sU0FBS3NLLDJCQUMzRCxFQUFLOXpCLFFBQVFpcEIsbUJBQW1CLENBQUVPLE1BQU8sTUFBTyxXQUFNLFNBQUt1Syx1QkFDM0QsRUFBSy96QixRQUFRaXBCLG1CQUFtQixDQUFFTyxNQUFPLE1BQU8sV0FBTSxTQUFLd0ssZUFDM0QsRUFBS2gwQixRQUFRaXBCLG1CQUFtQixDQUFFTyxNQUFPLE1BQU8sV0FBTSxTQUFLeUssVUFBVSxNQUNyRSxFQUFLajBCLFFBQVFpcEIsbUJBQW1CLENBQUVPLE1BQU8sTUFBTyxXQUFNLFNBQUt5SyxVQUFVLE1BQ3JFLEVBQUtqMEIsUUFBUWlwQixtQkFBbUIsQ0FBRU8sTUFBTyxNQUFPLFdBQU0sU0FBS3lLLFVBQVUsTUFDckUsRUFBS2owQixRQUFRaXBCLG1CQUFtQixDQUFFTyxNQUFPLE1BQU8sV0FBTSxTQUFLeUssVUFBVSxNQUNyRSxFQUFLajBCLFFBQVFpcEIsbUJBQW1CLENBQUVPLE1BQU8sTUFBTyxXQUFNLFNBQUt5SyxVQUFVLE1BQ3JFLEVBQUtqMEIsUUFBUWlwQixtQkFBbUIsQ0FBRStGLGNBQWUsSUFBS3hGLE1BQU8sTUFBTyxXQUFNLFNBQUswSywwQkFDL0UsRUFBS2wwQixRQUFRaXBCLG1CQUFtQixDQUFFK0YsY0FBZSxJQUFLeEYsTUFBTyxNQUFPLFdBQU0sU0FBSzBLLHlDQUNwRUMsR0FDVCxFQUFLbjBCLFFBQVFpcEIsbUJBQW1CLENBQUUrRixjQUFlLElBQUt4RixNQUFPMkssSUFBUSxXQUFNLFNBQUtDLGNBQWMsSUFBTUQsTUFDcEcsRUFBS24wQixRQUFRaXBCLG1CQUFtQixDQUFFK0YsY0FBZSxJQUFLeEYsTUFBTzJLLElBQVEsV0FBTSxTQUFLQyxjQUFjLElBQU1ELE1BQ3BHLEVBQUtuMEIsUUFBUWlwQixtQkFBbUIsQ0FBRStGLGNBQWUsSUFBS3hGLE1BQU8ySyxJQUFRLFdBQU0sU0FBS0MsY0FBYyxJQUFNRCxNQUNwRyxFQUFLbjBCLFFBQVFpcEIsbUJBQW1CLENBQUUrRixjQUFlLElBQUt4RixNQUFPMkssSUFBUSxXQUFNLFNBQUtDLGNBQWMsSUFBTUQsTUFDcEcsRUFBS24wQixRQUFRaXBCLG1CQUFtQixDQUFFK0YsY0FBZSxJQUFLeEYsTUFBTzJLLElBQVEsV0FBTSxTQUFLQyxjQUFjLElBQU1ELE1BQ3BHLEVBQUtuMEIsUUFBUWlwQixtQkFBbUIsQ0FBRStGLGNBQWUsSUFBS3hGLE1BQU8ySyxJQUFRLFdBQU0sU0FBS0MsY0FBYyxJQUFNRCxNQUNwRyxFQUFLbjBCLFFBQVFpcEIsbUJBQW1CLENBQUUrRixjQUFlLElBQUt4RixNQUFPMkssSUFBUSxXQUFNLFNBQUtDLGNBQWMsSUFBTUQsY0FQdEcsSUFBSyxJQUFNQSxLQUFRLEVBQUFFLFdBQVJGLFVBU1gsRUFBS24wQixRQUFRaXBCLG1CQUFtQixDQUFFK0YsY0FBZSxJQUFLeEYsTUFBTyxNQUFPLFdBQU0sU0FBSzhLLDRCQUsvRSxFQUFLdDBCLFFBQVF1MEIsaUJBQWdCLFNBQUMzeEMsR0FFNUIsT0FEQSxFQUFLbkosWUFBWWcwQixNQUFNLGtCQUFtQjdxQixHQUNuQ0EsS0FNVCxFQUFLb2QsUUFBUWtwQixtQkFBbUIsQ0FBRThGLGNBQWUsSUFBS3hGLE1BQU8sS0FBTyxJQUFJZ0wsRUFBUSxFQUFLaDdDLGVBQWdCLEVBQUtvaUIsYUFBYyxFQUFLbmlCLFlBQWEsRUFBSzJLLG9CQTRyRm5KLE9BNTdGa0MsT0FnQmhDLHNCQUFXLDRCQUFhLEtBQXhCLFdBQTJDLE9BQU9uWSxLQUFLb2hELGVBQWVuekMsdUNBRXRFLHNCQUFXLG1DQUFvQixLQUEvQixXQUE0RCxPQUFPak8sS0FBS3FoRCxzQkFBc0JwekMsdUNBRTlGLHNCQUFXLDZCQUFjLEtBQXpCLFdBQTRDLE9BQU9qTyxLQUFLc2hELGdCQUFnQnJ6Qyx1Q0FFeEUsc0JBQVcsaUNBQWtCLEtBQTdCLFdBQWdELE9BQU9qTyxLQUFLdWhELG9CQUFvQnR6Qyx1Q0FFaEYsc0JBQVcscUNBQXNCLEtBQWpDLFdBQW9ELE9BQU9qTyxLQUFLd2hELHdCQUF3QnZ6Qyx1Q0FFeEYsc0JBQVcsNENBQTZCLEtBQXhDLFdBQStFLE9BQU9qTyxLQUFLeWhELCtCQUErQnh6Qyx1Q0FHMUgsc0JBQVcseUJBQVUsS0FBckIsV0FBMEMsT0FBT2pPLEtBQUswaEQsWUFBWXp6Qyx1Q0FFbEUsc0JBQVcsd0JBQVMsS0FBcEIsV0FBeUMsT0FBT2pPLEtBQUsyaEQsV0FBVzF6Qyx1Q0FFaEUsc0JBQVcsMkJBQVksS0FBdkIsV0FBMEMsT0FBT2pPLEtBQUswYixjQUFjek4sdUNBRXBFLHNCQUFXLHlCQUFVLEtBQXJCLFdBQXdDLE9BQU9qTyxLQUFLKzZDLFlBQVk5c0MsdUNBRWhFLHNCQUFXLHVCQUFRLEtBQW5CLFdBQXdDLE9BQU9qTyxLQUFLMGtCLFVBQVV6Vyx1Q0FFOUQsc0JBQVcsNEJBQWEsS0FBeEIsV0FBNkMsT0FBT2pPLEtBQUs2YixlQUFlNU4sdUNBRXhFLHNCQUFXLHNCQUFPLEtBQWxCLFdBQTRDLE9BQU9qTyxLQUFLNGhELFNBQVMzekMsdUNBME4xRCxZQUFBbk8sUUFBUCxXQUNFLFlBQU1BLFFBQU8sWUFNUCxZQUFBMG9ELGVBQVIsU0FBdUJ6RyxFQUFzQkMsRUFBc0JDLEVBQXVCaGlELEdBQ3hGRCxLQUFLNmhELFlBQVlDLFFBQVMsRUFDMUI5aEQsS0FBSzZoRCxZQUFZRSxhQUFlQSxFQUNoQy9oRCxLQUFLNmhELFlBQVlHLGFBQWVBLEVBQ2hDaGlELEtBQUs2aEQsWUFBWUksY0FBZ0JBLEVBQ2pDamlELEtBQUs2aEQsWUFBWTVoRCxTQUFXQSxHQUd0QixZQUFBd29ELHVCQUFSLFNBQStCQyxHQUV6QjFvRCxLQUFLd04sWUFBWXFaLFVBQVksRUFBQTYxQixhQUFhQyxNQUM1Q2dNLFFBQVFDLEtBQUssQ0FBQ0YsRUFBRyxJQUFJQyxTQUFRLFNBQUNFLEVBQUtDLEdBQVEsT0FBQWhuRCxZQUFXLFdBQU0sT0FBQWduRCxFQUFJLG1CQWhaN0MsVUFpWmhCQyxPQUFNLFNBQUFDLEdBQ0wsR0FBWSxrQkFBUkEsRUFDRixNQUFNQSxFQUVSNThDLFFBQVFDLEtBQUssdURBa0JkLFlBQUFnd0MsTUFBUCxTQUFhOXZDLEVBQTJCNnZDLEdBQ3RDLElBQUl2MUMsRUFDQWs3QyxFQUFlL2hELEtBQUt5dEIsY0FBYzdiLEVBQ2xDb3dDLEVBQWVoaUQsS0FBS3l0QixjQUFjNWIsRUFDbENwVCxFQUFRLEVBQ053cUQsRUFBWWpwRCxLQUFLNmhELFlBQVlDLE9BRW5DLEdBQUltSCxFQUFXLENBRWIsR0FBSXBpRCxFQUFTN0csS0FBSyt6QixRQUFRc29CLE1BQU1yOEMsS0FBS3lnRCxhQUFjemdELEtBQUs2aEQsWUFBWUksY0FBZTdGLEdBRWpGLE9BREFwOEMsS0FBS3lvRCx1QkFBdUI1aEQsR0FDckJBLEVBRVRrN0MsRUFBZS9oRCxLQUFLNmhELFlBQVlFLGFBQ2hDQyxFQUFlaGlELEtBQUs2aEQsWUFBWUcsYUFDaENoaUQsS0FBSzZoRCxZQUFZQyxRQUFTLEVBQ3RCdjFDLEVBQUs3TyxPQUFTd2dELElBQ2hCei9DLEVBQVF1QixLQUFLNmhELFlBQVk1aEQsU0FBV2krQyxHQTBCeEMsR0FyQklsK0MsS0FBS3dOLFlBQVlxWixVQUFZLEVBQUE2MUIsYUFBYXdNLE9BQzVDbHBELEtBQUt3TixZQUFZZ0MsTUFBTSxnQkFBK0IsaUJBQVRqRCxFQUFvQixLQUFLQSxFQUFJLElBQU0sS0FBS2l0QyxNQUFNMlAsVUFBVXg4QyxJQUFJbXhDLEtBQUt2eEMsR0FBTSxTQUFBalAsR0FBSyxPQUFBZ3RCLE9BQU9DLGFBQWFqdEIsTUFBSSs5QixLQUFLLElBQUcsS0FBdUIsaUJBQVQ5dUIsRUFDbktBLEVBQUtHLE1BQU0sSUFBSUMsS0FBSSxTQUFBclAsR0FBSyxPQUFBQSxFQUFFMjdDLFdBQVcsTUFDckMxc0MsR0FLRnZNLEtBQUt5Z0QsYUFBYS9pRCxPQUFTNk8sRUFBSzdPLFFBQzlCc0MsS0FBS3lnRCxhQUFhL2lELE9BQVN3Z0QsSUFDN0JsK0MsS0FBS3lnRCxhQUFlLElBQUlaLFlBQVlyNUMsS0FBSzJCLElBQUlvRSxFQUFLN08sT0FBUXdnRCxLQU16RCtLLEdBQ0hqcEQsS0FBS3U3QyxpQkFBaUI2TixhQUlwQjc4QyxFQUFLN08sT0FBU3dnRCxFQUNoQixJQUFLLElBQUloaUQsRUFBSXVDLEVBQU92QyxFQUFJcVEsRUFBSzdPLE9BQVF4QixHQUFLZ2lELEVBQXdCLENBQ2hFLElBQU14L0MsRUFBTXhDLEVBQUlnaUQsRUFBeUIzeEMsRUFBSzdPLE9BQVN4QixFQUFJZ2lELEVBQXlCM3hDLEVBQUs3TyxPQUNuRm83QyxFQUF1QixpQkFBVHZzQyxFQUNoQnZNLEtBQUswZ0QsZUFBZTJJLE9BQU85OEMsRUFBS0UsVUFBVXZRLEVBQUd3QyxHQUFNc0IsS0FBS3lnRCxjQUN4RHpnRCxLQUFLNGdELGFBQWF5SSxPQUFPOThDLEVBQUsyekMsU0FBU2hrRCxFQUFHd0MsR0FBTXNCLEtBQUt5Z0QsY0FDekQsR0FBSTU1QyxFQUFTN0csS0FBSyt6QixRQUFRc29CLE1BQU1yOEMsS0FBS3lnRCxhQUFjM0gsR0FHakQsT0FGQTk0QyxLQUFLd29ELGVBQWV6RyxFQUFjQyxFQUFjbEosRUFBSzU4QyxHQUNyRDhELEtBQUt5b0QsdUJBQXVCNWhELEdBQ3JCQSxPQUlYLElBQUtvaUQsSUFDR25RLEVBQXVCLGlCQUFUdnNDLEVBQ2hCdk0sS0FBSzBnRCxlQUFlMkksT0FBTzk4QyxFQUFNdk0sS0FBS3lnRCxjQUN0Q3pnRCxLQUFLNGdELGFBQWF5SSxPQUFPOThDLEVBQU12TSxLQUFLeWdELGNBQ3BDNTVDLEVBQVM3RyxLQUFLK3pCLFFBQVFzb0IsTUFBTXI4QyxLQUFLeWdELGFBQWMzSCxJQUdqRCxPQUZBOTRDLEtBQUt3b0QsZUFBZXpHLEVBQWNDLEVBQWNsSixFQUFLLEdBQ3JEOTRDLEtBQUt5b0QsdUJBQXVCNWhELEdBQ3JCQSxFQUtUN0csS0FBS3l0QixjQUFjN2IsSUFBTW13QyxHQUFnQi9oRCxLQUFLeXRCLGNBQWM1YixJQUFNbXdDLEdBQ3BFaGlELEtBQUswYixjQUFjaEosT0FJckIxUyxLQUFLcWhELHNCQUFzQjN1QyxLQUFLMVMsS0FBS3U3QyxpQkFBaUI5OEMsTUFBT3VCLEtBQUt1N0MsaUJBQWlCNzhDLE1BRzlFLFlBQUFta0QsTUFBUCxTQUFhdDJDLEVBQW1COU4sRUFBZUMsR0FDN0MsSUFBSXM0QixFQUNBc3lCLEVBQ0VDLEVBQVV2cEQsS0FBSzQ3QyxnQkFBZ0IyTixRQUMvQnJxQyxFQUFtQmxmLEtBQUttWSxnQkFBZ0JtQixXQUFXNEYsaUJBQ25EbFEsRUFBT2hQLEtBQUt1TixlQUFleUIsS0FDM0JnbUIsRUFBaUJoMUIsS0FBSzJ2QixhQUFhcHNCLGdCQUFnQjB4QixXQUNuRFIsRUFBYXowQixLQUFLMnZCLGFBQWErRSxNQUFNRCxXQUNyQyswQixFQUFVeHBELEtBQUtraEQsYUFDakJ1SSxFQUFZenBELEtBQUt5dEIsY0FBY2x0QixNQUFNK1EsSUFBSXRSLEtBQUt5dEIsY0FBY3hOLE1BQVFqZ0IsS0FBS3l0QixjQUFjNWIsR0FFM0Y3UixLQUFLdTdDLGlCQUFpQm1PLFVBQVUxcEQsS0FBS3l0QixjQUFjNWIsR0FHL0M3UixLQUFLeXRCLGNBQWM3YixHQUFLbFQsRUFBTUQsRUFBUSxHQUFzRCxJQUFqRGdyRCxFQUFVcHBDLFNBQVNyZ0IsS0FBS3l0QixjQUFjN2IsRUFBSSxJQUN2RjYzQyxFQUFVRSxxQkFBcUIzcEQsS0FBS3l0QixjQUFjN2IsRUFBSSxFQUFHLEVBQUcsRUFBRzQzQyxFQUFReGpELEdBQUl3akQsRUFBUXpqRCxHQUFJeWpELEVBQVFJLFVBR2pHLElBQUssSUFBSS9sRCxFQUFNcEYsRUFBT29GLEVBQU1uRixJQUFPbUYsRUFBSyxDQVV0QyxHQVRBbXpCLEVBQU96cUIsRUFBSzFJLEdBSVp5bEQsRUFBVXRwRCxLQUFLeU4sZ0JBQWdCbzhDLFFBQVE3eUIsR0FLbkNBLEVBQU8sS0FBT3V5QixFQUFTLENBQ3pCLElBQU1PLEVBQUtQLEVBQVFqL0IsT0FBT0MsYUFBYXlNLElBQ25DOHlCLElBQ0Y5eUIsRUFBTzh5QixFQUFHN1EsV0FBVyxJQVl6QixHQVJJLzVCLEdBQ0ZsZixLQUFLMGhELFlBQVlodkMsTUFBSyxJQUFBcTNDLHFCQUFvQi95QixJQU92Q3N5QixJQUFXdHBELEtBQUt5dEIsY0FBYzdiLEVBQW5DLENBZUEsR0FBSTVSLEtBQUt5dEIsY0FBYzdiLEVBQUkwM0MsRUFBVSxHQUFLdDZDLEVBR3hDLEdBQUlnbUIsRUFBZ0IsQ0FFbEIsS0FBT2gxQixLQUFLeXRCLGNBQWM3YixFQUFJNUMsR0FDNUJ5NkMsRUFBVUUscUJBQXFCM3BELEtBQUt5dEIsY0FBYzdiLElBQUssRUFBRyxFQUFHNDNDLEVBQVF4akQsR0FBSXdqRCxFQUFRempELEdBQUl5akQsRUFBUUksVUFFL0Y1cEQsS0FBS3l0QixjQUFjN2IsRUFBSSxFQUN2QjVSLEtBQUt5dEIsY0FBYzViLElBQ2Y3UixLQUFLeXRCLGNBQWM1YixJQUFNN1IsS0FBS3l0QixjQUFjd3VCLGFBQWUsR0FDN0RqOEMsS0FBS3l0QixjQUFjNWIsSUFDbkI3UixLQUFLdU4sZUFBZXV2QyxPQUFPOThDLEtBQUtncUQsa0JBQWtCLEtBRTlDaHFELEtBQUt5dEIsY0FBYzViLEdBQUs3UixLQUFLdU4sZUFBZXJRLE9BQzlDOEMsS0FBS3l0QixjQUFjNWIsRUFBSTdSLEtBQUt1TixlQUFlclEsS0FBTyxHQUlwRDhDLEtBQUt5dEIsY0FBY2x0QixNQUFNK1EsSUFBSXRSLEtBQUt5dEIsY0FBY3hOLE1BQVFqZ0IsS0FBS3l0QixjQUFjNWIsR0FBSTRmLFdBQVksR0FHN0ZnNEIsRUFBWXpwRCxLQUFLeXRCLGNBQWNsdEIsTUFBTStRLElBQUl0UixLQUFLeXRCLGNBQWN4TixNQUFRamdCLEtBQUt5dEIsY0FBYzViLFFBR3ZGLEdBREE3UixLQUFLeXRCLGNBQWM3YixFQUFJNUMsRUFBTyxFQUNkLElBQVpzNkMsRUFHRixTQXVCTixHQWpCSTcwQixJQUVGZzFCLEVBQVVRLFlBQVlqcUQsS0FBS3l0QixjQUFjN2IsRUFBRzAzQyxFQUFTdHBELEtBQUt5dEIsY0FBY3k4QixZQUFZVixHQUFVQSxHQUl6RCxJQUFqQ0MsRUFBVXBwQyxTQUFTclIsRUFBTyxJQUM1Qnk2QyxFQUFVRSxxQkFBcUIzNkMsRUFBTyxFQUFHLEVBQUFtMkIsZUFBZ0IsRUFBQWdsQixnQkFBaUJYLEVBQVF4akQsR0FBSXdqRCxFQUFRempELEdBQUl5akQsRUFBUUksV0FLOUdILEVBQVVFLHFCQUFxQjNwRCxLQUFLeXRCLGNBQWM3YixJQUFLb2xCLEVBQU1zeUIsRUFBU0UsRUFBUXhqRCxHQUFJd2pELEVBQVF6akQsR0FBSXlqRCxFQUFRSSxVQUtsR04sRUFBVSxFQUNaLE9BQVNBLEdBRVBHLEVBQVVFLHFCQUFxQjNwRCxLQUFLeXRCLGNBQWM3YixJQUFLLEVBQUcsRUFBRzQzQyxFQUFReGpELEdBQUl3akQsRUFBUXpqRCxHQUFJeWpELEVBQVFJLGVBcEUxRkgsRUFBVXBwQyxTQUFTcmdCLEtBQUt5dEIsY0FBYzdiLEVBQUksR0FNN0M2M0MsRUFBVVcsbUJBQW1CcHFELEtBQUt5dEIsY0FBYzdiLEVBQUksRUFBR29sQixHQUZ2RHl5QixFQUFVVyxtQkFBbUJwcUQsS0FBS3l0QixjQUFjN2IsRUFBSSxFQUFHb2xCLEdBd0V6RHQ0QixFQUFNRCxFQUFRLElBQ2hCZ3JELEVBQVVyckIsU0FBU3ArQixLQUFLeXRCLGNBQWM3YixFQUFJLEVBQUc1UixLQUFLc2tDLFdBQ2hCLElBQTlCdGtDLEtBQUtza0MsVUFBVWprQixZQUFvQnJnQixLQUFLc2tDLFVBQVV6SixVQUFZLE1BQ2hFNzZCLEtBQUsrekIsUUFBUXMyQixtQkFBcUIsRUFDekJycUQsS0FBS3NrQyxVQUFVc0ssYUFDeEI1dUMsS0FBSyt6QixRQUFRczJCLG1CQUFxQnJxRCxLQUFLc2tDLFVBQVUzSyxXQUFXc2YsV0FBVyxHQUV2RWo1QyxLQUFLK3pCLFFBQVFzMkIsbUJBQXFCcnFELEtBQUtza0MsVUFBVS8wQixTQUtqRHZQLEtBQUt5dEIsY0FBYzdiLEVBQUk1QyxHQUFRdFEsRUFBTUQsRUFBUSxHQUFrRCxJQUE3Q2dyRCxFQUFVcHBDLFNBQVNyZ0IsS0FBS3l0QixjQUFjN2IsS0FBYTYzQyxFQUFVYSxXQUFXdHFELEtBQUt5dEIsY0FBYzdiLElBQy9JNjNDLEVBQVVFLHFCQUFxQjNwRCxLQUFLeXRCLGNBQWM3YixFQUFHLEVBQUcsRUFBRzQzQyxFQUFReGpELEdBQUl3akQsRUFBUXpqRCxHQUFJeWpELEVBQVFJLFVBRzdGNXBELEtBQUt1N0MsaUJBQWlCbU8sVUFBVTFwRCxLQUFLeXRCLGNBQWM1YixJQU05QyxZQUFBcXJDLG1CQUFQLFNBQTBCdHRDLEVBQXlCOGxCLEdBQW5ELFdBQ0UsTUFBaUIsTUFBYjlsQixFQUFHMnRDLE9BQWtCM3RDLEVBQUdnMEMsUUFBV2gwQyxFQUFHbXpDLGNBU25DL2lELEtBQUsrekIsUUFBUW1wQixtQkFBbUJ0dEMsRUFBSThsQixHQVBsQzExQixLQUFLK3pCLFFBQVFtcEIsbUJBQW1CdHRDLEdBQUksU0FBQW13QyxHQUN6QyxPQUFLNUIsRUFBb0I0QixFQUFPQSxPQUFPLEdBQUksRUFBSzVuQyxnQkFBZ0JtQixXQUFXbXNDLGdCQUdwRS92QixFQUFTcXFCLE9BU2YsWUFBQTlDLG1CQUFQLFNBQTBCcnRDLEVBQXlCOGxCLEdBQ2pELE9BQU8xMUIsS0FBSyt6QixRQUFRa3BCLG1CQUFtQnJ0QyxFQUFJLElBQUksRUFBQTI2QyxXQUFXNzBCLEtBTXJELFlBQUFzbkIsbUJBQVAsU0FBMEJwdEMsRUFBeUI4bEIsR0FDakQsT0FBTzExQixLQUFLK3pCLFFBQVFpcEIsbUJBQW1CcHRDLEVBQUk4bEIsSUFNdEMsWUFBQXluQixtQkFBUCxTQUEwQnQvQixFQUFlNlgsR0FDdkMsT0FBTzExQixLQUFLK3pCLFFBQVFvcEIsbUJBQW1CdC9CLEVBQU8sSUFBSSxFQUFBb3BDLFdBQVd2eEIsS0FXeEQsWUFBQTlZLEtBQVAsV0FFRSxPQURBNWMsS0FBS29oRCxlQUFlMXVDLFFBQ2IsR0FhRixZQUFBcXpDLFNBQVAsV0FtQkUsT0FsQkEvbEQsS0FBS3U3QyxpQkFBaUJtTyxVQUFVMXBELEtBQUt5dEIsY0FBYzViLEdBQy9DN1IsS0FBS21ZLGdCQUFnQm1CLFdBQVdreEMsYUFDbEN4cUQsS0FBS3l0QixjQUFjN2IsRUFBSSxHQUV6QjVSLEtBQUt5dEIsY0FBYzViLElBQ2Y3UixLQUFLeXRCLGNBQWM1YixJQUFNN1IsS0FBS3l0QixjQUFjd3VCLGFBQWUsR0FDN0RqOEMsS0FBS3l0QixjQUFjNWIsSUFDbkI3UixLQUFLdU4sZUFBZXV2QyxPQUFPOThDLEtBQUtncUQsbUJBQ3ZCaHFELEtBQUt5dEIsY0FBYzViLEdBQUs3UixLQUFLdU4sZUFBZXJRLE9BQ3JEOEMsS0FBS3l0QixjQUFjNWIsRUFBSTdSLEtBQUt1TixlQUFlclEsS0FBTyxHQUdoRDhDLEtBQUt5dEIsY0FBYzdiLEdBQUs1UixLQUFLdU4sZUFBZXlCLE1BQzlDaFAsS0FBS3l0QixjQUFjN2IsSUFFckI1UixLQUFLdTdDLGlCQUFpQm1PLFVBQVUxcEQsS0FBS3l0QixjQUFjNWIsR0FFbkQ3UixLQUFLKzZDLFlBQVlyb0MsUUFDVixHQVNGLFlBQUF3ekMsZUFBUCxXQUVFLE9BREFsbUQsS0FBS3l0QixjQUFjN2IsRUFBSSxHQUNoQixHQWNGLFlBQUF3MEMsVUFBUCxpQkFFRSxJQUFLcG1ELEtBQUsydkIsYUFBYXBzQixnQkFBZ0J1eEIsa0JBS3JDLE9BSkE5MEIsS0FBS3lxRCxrQkFDRHpxRCxLQUFLeXRCLGNBQWM3YixFQUFJLEdBQ3pCNVIsS0FBS3l0QixjQUFjN2IsS0FFZCxFQVFULEdBRkE1UixLQUFLeXFELGdCQUFnQnpxRCxLQUFLdU4sZUFBZXlCLE1BRXJDaFAsS0FBS3l0QixjQUFjN2IsRUFBSSxFQUN6QjVSLEtBQUt5dEIsY0FBYzdiLFNBVW5CLEdBQTZCLElBQXpCNVIsS0FBS3l0QixjQUFjN2IsR0FDbEI1UixLQUFLeXRCLGNBQWM1YixFQUFJN1IsS0FBS3l0QixjQUFjUyxXQUMxQ2x1QixLQUFLeXRCLGNBQWM1YixHQUFLN1IsS0FBS3l0QixjQUFjd3VCLGVBQ2tDLFFBQTdFLEVBQUFqOEMsS0FBS3l0QixjQUFjbHRCLE1BQU0rUSxJQUFJdFIsS0FBS3l0QixjQUFjeE4sTUFBUWpnQixLQUFLeXRCLGNBQWM1YixVQUFFLGVBQUU0ZixXQUFXLENBQzdGenhCLEtBQUt5dEIsY0FBY2x0QixNQUFNK1EsSUFBSXRSLEtBQUt5dEIsY0FBY3hOLE1BQVFqZ0IsS0FBS3l0QixjQUFjNWIsR0FBSTRmLFdBQVksRUFDM0Z6eEIsS0FBS3l0QixjQUFjNWIsSUFDbkI3UixLQUFLeXRCLGNBQWM3YixFQUFJNVIsS0FBS3VOLGVBQWV5QixLQUFPLEVBS2xELElBQU1xQyxFQUFPclIsS0FBS3l0QixjQUFjbHRCLE1BQU0rUSxJQUFJdFIsS0FBS3l0QixjQUFjeE4sTUFBUWpnQixLQUFLeXRCLGNBQWM1YixHQUNwRlIsRUFBS3drQyxTQUFTNzFDLEtBQUt5dEIsY0FBYzdiLEtBQU9QLEVBQUtpNUMsV0FBV3RxRCxLQUFLeXRCLGNBQWM3YixJQUM3RTVSLEtBQUt5dEIsY0FBYzdiLElBUXpCLE9BREE1UixLQUFLeXFELG1CQUNFLEdBU0YsWUFBQW5FLElBQVAsV0FDRSxHQUFJdG1ELEtBQUt5dEIsY0FBYzdiLEdBQUs1UixLQUFLdU4sZUFBZXlCLEtBQzlDLE9BQU8sRUFFVCxJQUFNMDdDLEVBQVkxcUQsS0FBS3l0QixjQUFjN2IsRUFLckMsT0FKQTVSLEtBQUt5dEIsY0FBYzdiLEVBQUk1UixLQUFLeXRCLGNBQWNrOUIsV0FDdEMzcUQsS0FBS21ZLGdCQUFnQm1CLFdBQVc0RixrQkFDbENsZixLQUFLMmhELFdBQVdqdkMsS0FBSzFTLEtBQUt5dEIsY0FBYzdiLEVBQUk4NEMsSUFFdkMsR0FVRixZQUFBbEUsU0FBUCxXQUVFLE9BREF4bUQsS0FBSzQ3QyxnQkFBZ0JvTSxVQUFVLElBQ3hCLEdBVUYsWUFBQXRCLFFBQVAsV0FFRSxPQURBMW1ELEtBQUs0N0MsZ0JBQWdCb00sVUFBVSxJQUN4QixHQU1ELFlBQUF5QyxnQkFBUixTQUF3QkcsUUFBQSxJQUFBQSxJQUFBQSxFQUFpQjVxRCxLQUFLdU4sZUFBZXlCLEtBQU8sR0FDbEVoUCxLQUFLeXRCLGNBQWM3YixFQUFJcEwsS0FBSzJCLElBQUl5aUQsRUFBUXBrRCxLQUFLd0IsSUFBSSxFQUFHaEksS0FBS3l0QixjQUFjN2IsSUFDdkU1UixLQUFLeXRCLGNBQWM1YixFQUFJN1IsS0FBSzJ2QixhQUFhcHNCLGdCQUFnQnF4QixPQUNyRHB1QixLQUFLMkIsSUFBSW5JLEtBQUt5dEIsY0FBY3d1QixhQUFjejFDLEtBQUt3QixJQUFJaEksS0FBS3l0QixjQUFjUyxVQUFXbHVCLEtBQUt5dEIsY0FBYzViLElBQ3BHckwsS0FBSzJCLElBQUluSSxLQUFLdU4sZUFBZXJRLEtBQU8sRUFBR3NKLEtBQUt3QixJQUFJLEVBQUdoSSxLQUFLeXRCLGNBQWM1YixJQUMxRTdSLEtBQUt1N0MsaUJBQWlCbU8sVUFBVTFwRCxLQUFLeXRCLGNBQWM1YixJQU03QyxZQUFBZzVDLFdBQVIsU0FBbUJqNUMsRUFBV0MsR0FDNUI3UixLQUFLdTdDLGlCQUFpQm1PLFVBQVUxcEQsS0FBS3l0QixjQUFjNWIsR0FDL0M3UixLQUFLMnZCLGFBQWFwc0IsZ0JBQWdCcXhCLFFBQ3BDNTBCLEtBQUt5dEIsY0FBYzdiLEVBQUlBLEVBQ3ZCNVIsS0FBS3l0QixjQUFjNWIsRUFBSTdSLEtBQUt5dEIsY0FBY1MsVUFBWXJjLElBRXREN1IsS0FBS3l0QixjQUFjN2IsRUFBSUEsRUFDdkI1UixLQUFLeXRCLGNBQWM1YixFQUFJQSxHQUV6QjdSLEtBQUt5cUQsa0JBQ0x6cUQsS0FBS3U3QyxpQkFBaUJtTyxVQUFVMXBELEtBQUt5dEIsY0FBYzViLElBTTdDLFlBQUFpNUMsWUFBUixTQUFvQmw1QyxFQUFXQyxHQUc3QjdSLEtBQUt5cUQsa0JBQ0x6cUQsS0FBSzZxRCxXQUFXN3FELEtBQUt5dEIsY0FBYzdiLEVBQUlBLEVBQUc1UixLQUFLeXRCLGNBQWM1YixFQUFJQSxJQVU1RCxZQUFBb3hDLFNBQVAsU0FBZ0JsRCxHQUVkLElBQU1nTCxFQUFZL3FELEtBQUt5dEIsY0FBYzViLEVBQUk3UixLQUFLeXRCLGNBQWNTLFVBTTVELE9BTEk2OEIsR0FBYSxFQUNmL3FELEtBQUs4cUQsWUFBWSxHQUFJdGtELEtBQUsyQixJQUFJNGlELEVBQVdoTCxFQUFPQSxPQUFPLElBQU0sSUFFN0QvL0MsS0FBSzhxRCxZQUFZLElBQUsvSyxFQUFPQSxPQUFPLElBQU0sS0FFckMsR0FVRixZQUFBb0QsV0FBUCxTQUFrQnBELEdBRWhCLElBQU1pTCxFQUFlaHJELEtBQUt5dEIsY0FBY3d1QixhQUFlajhDLEtBQUt5dEIsY0FBYzViLEVBTTFFLE9BTEltNUMsR0FBZ0IsRUFDbEJockQsS0FBSzhxRCxZQUFZLEVBQUd0a0QsS0FBSzJCLElBQUk2aUQsRUFBY2pMLEVBQU9BLE9BQU8sSUFBTSxJQUUvRC8vQyxLQUFLOHFELFlBQVksRUFBRy9LLEVBQU9BLE9BQU8sSUFBTSxJQUVuQyxHQVNGLFlBQUFxRCxjQUFQLFNBQXFCckQsR0FFbkIsT0FEQS8vQyxLQUFLOHFELFlBQVkvSyxFQUFPQSxPQUFPLElBQU0sRUFBRyxJQUNqQyxHQVNGLFlBQUFzRCxlQUFQLFNBQXNCdEQsR0FFcEIsT0FEQS8vQyxLQUFLOHFELGNBQWMvSyxFQUFPQSxPQUFPLElBQU0sR0FBSSxJQUNwQyxHQVdGLFlBQUF1RCxlQUFQLFNBQXNCdkQsR0FHcEIsT0FGQS8vQyxLQUFLbWpELFdBQVdwRCxHQUNoQi8vQyxLQUFLeXRCLGNBQWM3YixFQUFJLEdBQ2hCLEdBV0YsWUFBQTJ4QyxvQkFBUCxTQUEyQnhELEdBR3pCLE9BRkEvL0MsS0FBS2lqRCxTQUFTbEQsR0FDZC8vQyxLQUFLeXRCLGNBQWM3YixFQUFJLEdBQ2hCLEdBU0YsWUFBQTR4QyxtQkFBUCxTQUEwQnpELEdBRXhCLE9BREEvL0MsS0FBSzZxRCxZQUFZOUssRUFBT0EsT0FBTyxJQUFNLEdBQUssRUFBRy8vQyxLQUFLeXRCLGNBQWM1YixJQUN6RCxHQVlGLFlBQUE0eEMsZUFBUCxTQUFzQjFELEdBT3BCLE9BTkEvL0MsS0FBSzZxRCxXQUVGOUssRUFBT3JpRCxRQUFVLEdBQU1xaUQsRUFBT0EsT0FBTyxJQUFNLEdBQUssRUFBSSxHQUVwREEsRUFBT0EsT0FBTyxJQUFNLEdBQUssSUFFckIsR0FVRixZQUFBc0UsZ0JBQVAsU0FBdUJ0RSxHQUVyQixPQURBLy9DLEtBQUs2cUQsWUFBWTlLLEVBQU9BLE9BQU8sSUFBTSxHQUFLLEVBQUcvL0MsS0FBS3l0QixjQUFjNWIsSUFDekQsR0FTRixZQUFBeXlDLGtCQUFQLFNBQXlCdkUsR0FFdkIsT0FEQS8vQyxLQUFLOHFELFlBQVkvSyxFQUFPQSxPQUFPLElBQU0sRUFBRyxJQUNqQyxHQVNGLFlBQUEyRSxnQkFBUCxTQUF1QjNFLEdBRXJCLE9BREEvL0MsS0FBSzZxRCxXQUFXN3FELEtBQUt5dEIsY0FBYzdiLEdBQUltdUMsRUFBT0EsT0FBTyxJQUFNLEdBQUssSUFDekQsR0FVRixZQUFBNEUsa0JBQVAsU0FBeUI1RSxHQUV2QixPQURBLy9DLEtBQUs4cUQsWUFBWSxFQUFHL0ssRUFBT0EsT0FBTyxJQUFNLElBQ2pDLEdBV0YsWUFBQTZFLFdBQVAsU0FBa0I3RSxHQUVoQixPQURBLy9DLEtBQUt5akQsZUFBZTFELElBQ2IsR0FjRixZQUFBOEUsU0FBUCxTQUFnQjlFLEdBQ2QsSUFBTWtMLEVBQVFsTCxFQUFPQSxPQUFPLEdBTTVCLE9BTGMsSUFBVmtMLFNBQ0tqckQsS0FBS3l0QixjQUFjeTlCLEtBQUtsckQsS0FBS3l0QixjQUFjN2IsR0FDL0IsSUFBVnE1QyxJQUNUanJELEtBQUt5dEIsY0FBY3k5QixLQUFPLEtBRXJCLEdBU0YsWUFBQXhILGlCQUFQLFNBQXdCM0QsR0FDdEIsR0FBSS8vQyxLQUFLeXRCLGNBQWM3YixHQUFLNVIsS0FBS3VOLGVBQWV5QixLQUM5QyxPQUFPLEVBR1QsSUFEQSxJQUFJaThDLEVBQVFsTCxFQUFPQSxPQUFPLElBQU0sRUFDekJrTCxLQUNManJELEtBQUt5dEIsY0FBYzdiLEVBQUk1UixLQUFLeXRCLGNBQWNrOUIsV0FFNUMsT0FBTyxHQVFGLFlBQUF2RyxrQkFBUCxTQUF5QnJFLEdBQ3ZCLEdBQUkvL0MsS0FBS3l0QixjQUFjN2IsR0FBSzVSLEtBQUt1TixlQUFleUIsS0FDOUMsT0FBTyxFQUlULElBRkEsSUFBSWk4QyxFQUFRbEwsRUFBT0EsT0FBTyxJQUFNLEVBRXpCa0wsS0FDTGpyRCxLQUFLeXRCLGNBQWM3YixFQUFJNVIsS0FBS3l0QixjQUFjMDlCLFdBRTVDLE9BQU8sR0FZRCxZQUFBQyxtQkFBUixTQUEyQnY1QyxFQUFXcFQsRUFBZUMsRUFBYTJzRCxRQUFBLElBQUFBLElBQUFBLEdBQUEsR0FDaEUsSUFBTWg2QyxFQUFPclIsS0FBS3l0QixjQUFjbHRCLE1BQU0rUSxJQUFJdFIsS0FBS3l0QixjQUFjeE4sTUFBUXBPLEdBQ3JFUixFQUFLaTZDLGFBQ0g3c0QsRUFDQUMsRUFDQXNCLEtBQUt5dEIsY0FBY3k4QixZQUFZbHFELEtBQUtncUQsa0JBQ3BDaHFELEtBQUtncUQsa0JBRUhxQixJQUNGaDZDLEVBQUtvZ0IsV0FBWSxJQVNiLFlBQUE4NUIsaUJBQVIsU0FBeUIxNUMsR0FDdkIsSUFBTVIsRUFBT3JSLEtBQUt5dEIsY0FBY2x0QixNQUFNK1EsSUFBSXRSLEtBQUt5dEIsY0FBY3hOLE1BQVFwTyxHQUNyRVIsRUFBS202QyxLQUFLeHJELEtBQUt5dEIsY0FBY3k4QixZQUFZbHFELEtBQUtncUQsbUJBQzlDaHFELEtBQUt1TixlQUFlak4sT0FBT3VxQixhQUFhN3FCLEtBQUt5dEIsY0FBY3hOLE1BQVFwTyxHQUNuRVIsRUFBS29nQixXQUFZLEdBMkJaLFlBQUFreUIsZUFBUCxTQUFzQjVELEdBRXBCLElBQUk5cEMsRUFDSixPQUZBalcsS0FBS3lxRCxnQkFBZ0J6cUQsS0FBS3VOLGVBQWV5QixNQUVqQyt3QyxFQUFPQSxPQUFPLElBQ3BCLEtBQUssRUFJSCxJQUhBOXBDLEVBQUlqVyxLQUFLeXRCLGNBQWM1YixFQUN2QjdSLEtBQUt1N0MsaUJBQWlCbU8sVUFBVXp6QyxHQUNoQ2pXLEtBQUtvckQsbUJBQW1CbjFDLElBQUtqVyxLQUFLeXRCLGNBQWM3YixFQUFHNVIsS0FBS3VOLGVBQWV5QixLQUErQixJQUF6QmhQLEtBQUt5dEIsY0FBYzdiLEdBQ3pGcUUsRUFBSWpXLEtBQUt1TixlQUFlclEsS0FBTStZLElBQ25DalcsS0FBS3VyRCxpQkFBaUJ0MUMsR0FFeEJqVyxLQUFLdTdDLGlCQUFpQm1PLFVBQVV6ekMsR0FDaEMsTUFDRixLQUFLLEVBU0gsSUFSQUEsRUFBSWpXLEtBQUt5dEIsY0FBYzViLEVBQ3ZCN1IsS0FBS3U3QyxpQkFBaUJtTyxVQUFVenpDLEdBRWhDalcsS0FBS29yRCxtQkFBbUJuMUMsRUFBRyxFQUFHalcsS0FBS3l0QixjQUFjN2IsRUFBSSxHQUFHLEdBQ3BENVIsS0FBS3l0QixjQUFjN2IsRUFBSSxHQUFLNVIsS0FBS3VOLGVBQWV5QixPQUVsRGhQLEtBQUt5dEIsY0FBY2x0QixNQUFNK1EsSUFBSTJFLEVBQUksR0FBSXdiLFdBQVksR0FFNUN4YixLQUNMalcsS0FBS3VyRCxpQkFBaUJ0MUMsR0FFeEJqVyxLQUFLdTdDLGlCQUFpQm1PLFVBQVUsR0FDaEMsTUFDRixLQUFLLEVBR0gsSUFGQXp6QyxFQUFJalcsS0FBS3VOLGVBQWVyUSxLQUN4QjhDLEtBQUt1N0MsaUJBQWlCbU8sVUFBVXp6QyxFQUFJLEdBQzdCQSxLQUNMalcsS0FBS3VyRCxpQkFBaUJ0MUMsR0FFeEJqVyxLQUFLdTdDLGlCQUFpQm1PLFVBQVUsR0FDaEMsTUFDRixLQUFLLEVBRUgsSUFBTStCLEVBQWlCenJELEtBQUt5dEIsY0FBY2x0QixNQUFNN0MsT0FBU3NDLEtBQUt1TixlQUFlclEsS0FDekV1dUQsRUFBaUIsSUFDbkJ6ckQsS0FBS3l0QixjQUFjbHRCLE1BQU00NUMsVUFBVXNSLEdBQ25DenJELEtBQUt5dEIsY0FBY3hOLE1BQVF6WixLQUFLd0IsSUFBSWhJLEtBQUt5dEIsY0FBY3hOLE1BQVF3ckMsRUFBZ0IsR0FDL0V6ckQsS0FBS3l0QixjQUFjcHJCLE1BQVFtRSxLQUFLd0IsSUFBSWhJLEtBQUt5dEIsY0FBY3ByQixNQUFRb3BELEVBQWdCLEdBRS9FenJELEtBQUswa0IsVUFBVWhTLEtBQUssSUFJMUIsT0FBTyxHQXlCRixZQUFBbXhDLFlBQVAsU0FBbUI5RCxHQUVqQixPQURBLy9DLEtBQUt5cUQsZ0JBQWdCenFELEtBQUt1TixlQUFleUIsTUFDakMrd0MsRUFBT0EsT0FBTyxJQUNwQixLQUFLLEVBQ0gvL0MsS0FBS29yRCxtQkFBbUJwckQsS0FBS3l0QixjQUFjNWIsRUFBRzdSLEtBQUt5dEIsY0FBYzdiLEVBQUc1UixLQUFLdU4sZUFBZXlCLEtBQStCLElBQXpCaFAsS0FBS3l0QixjQUFjN2IsR0FDakgsTUFDRixLQUFLLEVBQ0g1UixLQUFLb3JELG1CQUFtQnByRCxLQUFLeXRCLGNBQWM1YixFQUFHLEVBQUc3UixLQUFLeXRCLGNBQWM3YixFQUFJLEdBQUcsR0FDM0UsTUFDRixLQUFLLEVBQ0g1UixLQUFLb3JELG1CQUFtQnByRCxLQUFLeXRCLGNBQWM1YixFQUFHLEVBQUc3UixLQUFLdU4sZUFBZXlCLE1BQU0sR0FJL0UsT0FEQWhQLEtBQUt1N0MsaUJBQWlCbU8sVUFBVTFwRCxLQUFLeXRCLGNBQWM1YixJQUM1QyxHQVlGLFlBQUFpeUMsWUFBUCxTQUFtQi9ELEdBQ2pCLy9DLEtBQUt5cUQsa0JBQ0wsSUFBSVEsRUFBUWxMLEVBQU9BLE9BQU8sSUFBTSxFQUVoQyxHQUFJLy9DLEtBQUt5dEIsY0FBYzViLEVBQUk3UixLQUFLeXRCLGNBQWN3dUIsY0FBZ0JqOEMsS0FBS3l0QixjQUFjNWIsRUFBSTdSLEtBQUt5dEIsY0FBY1MsVUFDdEcsT0FBTyxFQU9ULElBSkEsSUFBTXBJLEVBQWM5bEIsS0FBS3l0QixjQUFjeE4sTUFBUWpnQixLQUFLeXRCLGNBQWM1YixFQUU1RDY1QyxFQUF5QjFyRCxLQUFLdU4sZUFBZXJRLEtBQU8sRUFBSThDLEtBQUt5dEIsY0FBY3d1QixhQUMzRTBQLEVBQXVCM3JELEtBQUt1TixlQUFlclEsS0FBTyxFQUFJOEMsS0FBS3l0QixjQUFjeE4sTUFBUXlyQyxFQUF5QixFQUN6R1QsS0FHTGpyRCxLQUFLeXRCLGNBQWNsdEIsTUFBTStQLE9BQU9xN0MsRUFBdUIsRUFBRyxHQUMxRDNyRCxLQUFLeXRCLGNBQWNsdEIsTUFBTStQLE9BQU93VixFQUFLLEVBQUc5bEIsS0FBS3l0QixjQUFjM0MsYUFBYTlxQixLQUFLZ3FELG1CQUsvRSxPQUZBaHFELEtBQUt1N0MsaUJBQWlCUyxlQUFlaDhDLEtBQUt5dEIsY0FBYzViLEVBQUc3UixLQUFLeXRCLGNBQWN3dUIsY0FDOUVqOEMsS0FBS3l0QixjQUFjN2IsRUFBSSxHQUNoQixHQVlGLFlBQUFteUMsWUFBUCxTQUFtQmhFLEdBQ2pCLy9DLEtBQUt5cUQsa0JBQ0wsSUFBSVEsRUFBUWxMLEVBQU9BLE9BQU8sSUFBTSxFQUVoQyxHQUFJLy9DLEtBQUt5dEIsY0FBYzViLEVBQUk3UixLQUFLeXRCLGNBQWN3dUIsY0FBZ0JqOEMsS0FBS3l0QixjQUFjNWIsRUFBSTdSLEtBQUt5dEIsY0FBY1MsVUFDdEcsT0FBTyxFQUdULElBRUlqWSxFQUZFNlAsRUFBYzlsQixLQUFLeXRCLGNBQWN4TixNQUFRamdCLEtBQUt5dEIsY0FBYzViLEVBS2xFLElBRkFvRSxFQUFJalcsS0FBS3VOLGVBQWVyUSxLQUFPLEVBQUk4QyxLQUFLeXRCLGNBQWN3dUIsYUFDdERobUMsRUFBSWpXLEtBQUt1TixlQUFlclEsS0FBTyxFQUFJOEMsS0FBS3l0QixjQUFjeE4sTUFBUWhLLEVBQ3ZEZzFDLEtBR0xqckQsS0FBS3l0QixjQUFjbHRCLE1BQU0rUCxPQUFPd1YsRUFBSyxHQUNyQzlsQixLQUFLeXRCLGNBQWNsdEIsTUFBTStQLE9BQU8yRixFQUFHLEVBQUdqVyxLQUFLeXRCLGNBQWMzQyxhQUFhOXFCLEtBQUtncUQsbUJBSzdFLE9BRkFocUQsS0FBS3U3QyxpQkFBaUJTLGVBQWVoOEMsS0FBS3l0QixjQUFjNWIsRUFBRzdSLEtBQUt5dEIsY0FBY3d1QixjQUM5RWo4QyxLQUFLeXRCLGNBQWM3YixFQUFJLEdBQ2hCLEdBY0YsWUFBQWt4QyxZQUFQLFNBQW1CL0MsR0FDakIvL0MsS0FBS3lxRCxrQkFDTCxJQUFNcDVDLEVBQU9yUixLQUFLeXRCLGNBQWNsdEIsTUFBTStRLElBQUl0UixLQUFLeXRCLGNBQWN4TixNQUFRamdCLEtBQUt5dEIsY0FBYzViLEdBVXhGLE9BVElSLElBQ0ZBLEVBQUs0NEMsWUFDSGpxRCxLQUFLeXRCLGNBQWM3YixFQUNuQm11QyxFQUFPQSxPQUFPLElBQU0sRUFDcEIvL0MsS0FBS3l0QixjQUFjeThCLFlBQVlscUQsS0FBS2dxRCxrQkFDcENocUQsS0FBS2dxRCxrQkFFUGhxRCxLQUFLdTdDLGlCQUFpQm1PLFVBQVUxcEQsS0FBS3l0QixjQUFjNWIsS0FFOUMsR0FjRixZQUFBbXlDLFlBQVAsU0FBbUJqRSxHQUNqQi8vQyxLQUFLeXFELGtCQUNMLElBQU1wNUMsRUFBT3JSLEtBQUt5dEIsY0FBY2x0QixNQUFNK1EsSUFBSXRSLEtBQUt5dEIsY0FBY3hOLE1BQVFqZ0IsS0FBS3l0QixjQUFjNWIsR0FVeEYsT0FUSVIsSUFDRkEsRUFBS3U2QyxZQUNINXJELEtBQUt5dEIsY0FBYzdiLEVBQ25CbXVDLEVBQU9BLE9BQU8sSUFBTSxFQUNwQi8vQyxLQUFLeXRCLGNBQWN5OEIsWUFBWWxxRCxLQUFLZ3FELGtCQUNwQ2hxRCxLQUFLZ3FELGtCQUVQaHFELEtBQUt1N0MsaUJBQWlCbU8sVUFBVTFwRCxLQUFLeXRCLGNBQWM1YixLQUU5QyxHQVdGLFlBQUFveUMsU0FBUCxTQUFnQmxFLEdBR2QsSUFGQSxJQUFJa0wsRUFBUWxMLEVBQU9BLE9BQU8sSUFBTSxFQUV6QmtMLEtBQ0xqckQsS0FBS3l0QixjQUFjbHRCLE1BQU0rUCxPQUFPdFEsS0FBS3l0QixjQUFjeE4sTUFBUWpnQixLQUFLeXRCLGNBQWNTLFVBQVcsR0FDekZsdUIsS0FBS3l0QixjQUFjbHRCLE1BQU0rUCxPQUFPdFEsS0FBS3l0QixjQUFjeE4sTUFBUWpnQixLQUFLeXRCLGNBQWN3dUIsYUFBYyxFQUFHajhDLEtBQUt5dEIsY0FBYzNDLGFBQWE5cUIsS0FBS2dxRCxtQkFHdEksT0FEQWhxRCxLQUFLdTdDLGlCQUFpQlMsZUFBZWg4QyxLQUFLeXRCLGNBQWNTLFVBQVdsdUIsS0FBS3l0QixjQUFjd3VCLGVBQy9FLEdBUUYsWUFBQWlJLFdBQVAsU0FBa0JuRSxHQUdoQixJQUZBLElBQUlrTCxFQUFRbEwsRUFBT0EsT0FBTyxJQUFNLEVBRXpCa0wsS0FDTGpyRCxLQUFLeXRCLGNBQWNsdEIsTUFBTStQLE9BQU90USxLQUFLeXRCLGNBQWN4TixNQUFRamdCLEtBQUt5dEIsY0FBY3d1QixhQUFjLEdBQzVGajhDLEtBQUt5dEIsY0FBY2x0QixNQUFNK1AsT0FBT3RRLEtBQUt5dEIsY0FBY3hOLE1BQVFqZ0IsS0FBS3l0QixjQUFjUyxVQUFXLEVBQUdsdUIsS0FBS3l0QixjQUFjM0MsYUFBYSxFQUFBQyxvQkFHOUgsT0FEQS9xQixLQUFLdTdDLGlCQUFpQlMsZUFBZWg4QyxLQUFLeXRCLGNBQWNTLFVBQVdsdUIsS0FBS3l0QixjQUFjd3VCLGVBQy9FLEdBcUJGLFlBQUErRyxXQUFQLFNBQWtCakQsR0FDaEIsR0FBSS8vQyxLQUFLeXRCLGNBQWM1YixFQUFJN1IsS0FBS3l0QixjQUFjd3VCLGNBQWdCajhDLEtBQUt5dEIsY0FBYzViLEVBQUk3UixLQUFLeXRCLGNBQWNTLFVBQ3RHLE9BQU8sRUFHVCxJQURBLElBQU0rOEIsRUFBUWxMLEVBQU9BLE9BQU8sSUFBTSxFQUN6Qmx1QyxFQUFJN1IsS0FBS3l0QixjQUFjUyxVQUFXcmMsR0FBSzdSLEtBQUt5dEIsY0FBY3d1QixlQUFnQnBxQyxFQUFHLENBQ3BGLElBQU1SLEVBQU9yUixLQUFLeXRCLGNBQWNsdEIsTUFBTStRLElBQUl0UixLQUFLeXRCLGNBQWN4TixNQUFRcE8sR0FDckVSLEVBQUt1NkMsWUFBWSxFQUFHWCxFQUFPanJELEtBQUt5dEIsY0FBY3k4QixZQUFZbHFELEtBQUtncUQsa0JBQW1CaHFELEtBQUtncUQsa0JBQ3ZGMzRDLEVBQUtvZ0IsV0FBWSxFQUduQixPQURBenhCLEtBQUt1N0MsaUJBQWlCUyxlQUFlaDhDLEtBQUt5dEIsY0FBY1MsVUFBV2x1QixLQUFLeXRCLGNBQWN3dUIsZUFDL0UsR0FzQkYsWUFBQWlILFlBQVAsU0FBbUJuRCxHQUNqQixHQUFJLy9DLEtBQUt5dEIsY0FBYzViLEVBQUk3UixLQUFLeXRCLGNBQWN3dUIsY0FBZ0JqOEMsS0FBS3l0QixjQUFjNWIsRUFBSTdSLEtBQUt5dEIsY0FBY1MsVUFDdEcsT0FBTyxFQUdULElBREEsSUFBTSs4QixFQUFRbEwsRUFBT0EsT0FBTyxJQUFNLEVBQ3pCbHVDLEVBQUk3UixLQUFLeXRCLGNBQWNTLFVBQVdyYyxHQUFLN1IsS0FBS3l0QixjQUFjd3VCLGVBQWdCcHFDLEVBQUcsQ0FDcEYsSUFBTVIsRUFBT3JSLEtBQUt5dEIsY0FBY2x0QixNQUFNK1EsSUFBSXRSLEtBQUt5dEIsY0FBY3hOLE1BQVFwTyxHQUNyRVIsRUFBSzQ0QyxZQUFZLEVBQUdnQixFQUFPanJELEtBQUt5dEIsY0FBY3k4QixZQUFZbHFELEtBQUtncUQsa0JBQW1CaHFELEtBQUtncUQsa0JBQ3ZGMzRDLEVBQUtvZ0IsV0FBWSxFQUduQixPQURBenhCLEtBQUt1N0MsaUJBQWlCUyxlQUFlaDhDLEtBQUt5dEIsY0FBY1MsVUFBV2x1QixLQUFLeXRCLGNBQWN3dUIsZUFDL0UsR0FZRixZQUFBMEosY0FBUCxTQUFxQjVGLEdBQ25CLEdBQUkvL0MsS0FBS3l0QixjQUFjNWIsRUFBSTdSLEtBQUt5dEIsY0FBY3d1QixjQUFnQmo4QyxLQUFLeXRCLGNBQWM1YixFQUFJN1IsS0FBS3l0QixjQUFjUyxVQUN0RyxPQUFPLEVBR1QsSUFEQSxJQUFNKzhCLEVBQVFsTCxFQUFPQSxPQUFPLElBQU0sRUFDekJsdUMsRUFBSTdSLEtBQUt5dEIsY0FBY1MsVUFBV3JjLEdBQUs3UixLQUFLeXRCLGNBQWN3dUIsZUFBZ0JwcUMsRUFBRyxDQUNwRixJQUFNUixFQUFPclIsS0FBS3l0QixjQUFjbHRCLE1BQU0rUSxJQUFJdFIsS0FBS3l0QixjQUFjeE4sTUFBUXBPLEdBQ3JFUixFQUFLNDRDLFlBQVlqcUQsS0FBS3l0QixjQUFjN2IsRUFBR3E1QyxFQUFPanJELEtBQUt5dEIsY0FBY3k4QixZQUFZbHFELEtBQUtncUQsa0JBQW1CaHFELEtBQUtncUQsa0JBQzFHMzRDLEVBQUtvZ0IsV0FBWSxFQUduQixPQURBenhCLEtBQUt1N0MsaUJBQWlCUyxlQUFlaDhDLEtBQUt5dEIsY0FBY1MsVUFBV2x1QixLQUFLeXRCLGNBQWN3dUIsZUFDL0UsR0FZRixZQUFBMkosY0FBUCxTQUFxQjdGLEdBQ25CLEdBQUkvL0MsS0FBS3l0QixjQUFjNWIsRUFBSTdSLEtBQUt5dEIsY0FBY3d1QixjQUFnQmo4QyxLQUFLeXRCLGNBQWM1YixFQUFJN1IsS0FBS3l0QixjQUFjUyxVQUN0RyxPQUFPLEVBR1QsSUFEQSxJQUFNKzhCLEVBQVFsTCxFQUFPQSxPQUFPLElBQU0sRUFDekJsdUMsRUFBSTdSLEtBQUt5dEIsY0FBY1MsVUFBV3JjLEdBQUs3UixLQUFLeXRCLGNBQWN3dUIsZUFBZ0JwcUMsRUFBRyxDQUNwRixJQUFNUixFQUFPclIsS0FBS3l0QixjQUFjbHRCLE1BQU0rUSxJQUFJdFIsS0FBS3l0QixjQUFjeE4sTUFBUXBPLEdBQ3JFUixFQUFLdTZDLFlBQVk1ckQsS0FBS3l0QixjQUFjN2IsRUFBR3E1QyxFQUFPanJELEtBQUt5dEIsY0FBY3k4QixZQUFZbHFELEtBQUtncUQsa0JBQW1CaHFELEtBQUtncUQsa0JBQzFHMzRDLEVBQUtvZ0IsV0FBWSxFQUduQixPQURBenhCLEtBQUt1N0MsaUJBQWlCUyxlQUFlaDhDLEtBQUt5dEIsY0FBY1MsVUFBV2x1QixLQUFLeXRCLGNBQWN3dUIsZUFDL0UsR0FXRixZQUFBa0ksV0FBUCxTQUFrQnBFLEdBQ2hCLy9DLEtBQUt5cUQsa0JBQ0wsSUFBTXA1QyxFQUFPclIsS0FBS3l0QixjQUFjbHRCLE1BQU0rUSxJQUFJdFIsS0FBS3l0QixjQUFjeE4sTUFBUWpnQixLQUFLeXRCLGNBQWM1YixHQVV4RixPQVRJUixJQUNGQSxFQUFLaTZDLGFBQ0h0ckQsS0FBS3l0QixjQUFjN2IsRUFDbkI1UixLQUFLeXRCLGNBQWM3YixHQUFLbXVDLEVBQU9BLE9BQU8sSUFBTSxHQUM1Qy8vQyxLQUFLeXRCLGNBQWN5OEIsWUFBWWxxRCxLQUFLZ3FELGtCQUNwQ2hxRCxLQUFLZ3FELGtCQUVQaHFELEtBQUt1N0MsaUJBQWlCbU8sVUFBVTFwRCxLQUFLeXRCLGNBQWM1YixLQUU5QyxHQThCRixZQUFBMHlDLHlCQUFQLFNBQWdDeEUsR0FDOUIsSUFBSy8vQyxLQUFLK3pCLFFBQVFzMkIsbUJBQ2hCLE9BQU8sRUFLVCxJQUZBLElBQU0zc0QsRUFBU3FpRCxFQUFPQSxPQUFPLElBQU0sRUFDN0J4ekMsRUFBTyxJQUFJc3pDLFlBQVluaUQsR0FDcEJ4QixFQUFJLEVBQUdBLEVBQUl3QixJQUFVeEIsRUFDNUJxUSxFQUFLclEsR0FBSzhELEtBQUsrekIsUUFBUXMyQixtQkFHekIsT0FEQXJxRCxLQUFLNmlELE1BQU10MkMsRUFBTSxFQUFHQSxFQUFLN08sU0FDbEIsR0E0QkYsWUFBQThtRCw0QkFBUCxTQUFtQ3pFLEdBQ2pDLE9BQUlBLEVBQU9BLE9BQU8sR0FBSyxJQUduQi8vQyxLQUFLNnJELElBQUksVUFBWTdyRCxLQUFLNnJELElBQUksaUJBQW1CN3JELEtBQUs2ckQsSUFBSSxVQUM1RDdyRCxLQUFLMnZCLGFBQWFuc0IsaUJBQWlCLEVBQUFzYSxHQUFHQyxJQUFNLFVBQ25DL2QsS0FBSzZyRCxJQUFJLFVBQ2xCN3JELEtBQUsydkIsYUFBYW5zQixpQkFBaUIsRUFBQXNhLEdBQUdDLElBQU0sVUFMckMsR0FrQ0osWUFBQTBtQyw4QkFBUCxTQUFxQzFFLEdBQ25DLE9BQUlBLEVBQU9BLE9BQU8sR0FBSyxJQU1uQi8vQyxLQUFLNnJELElBQUksU0FDWDdyRCxLQUFLMnZCLGFBQWFuc0IsaUJBQWlCLEVBQUFzYSxHQUFHQyxJQUFNLGNBQ25DL2QsS0FBSzZyRCxJQUFJLGdCQUNsQjdyRCxLQUFLMnZCLGFBQWFuc0IsaUJBQWlCLEVBQUFzYSxHQUFHQyxJQUFNLGNBQ25DL2QsS0FBSzZyRCxJQUFJLFNBR2xCN3JELEtBQUsydkIsYUFBYW5zQixpQkFBaUJ1OEMsRUFBT0EsT0FBTyxHQUFLLEtBQzdDLy9DLEtBQUs2ckQsSUFBSSxXQUNsQjdyRCxLQUFLMnZCLGFBQWFuc0IsaUJBQWlCLEVBQUFzYSxHQUFHQyxJQUFNLG1CQWRyQyxHQXVCSCxZQUFBOHRDLElBQVIsU0FBWUMsR0FDVixPQUF5RSxLQUFqRTlyRCxLQUFLbVksZ0JBQWdCbUIsV0FBV3l5QyxTQUFXLElBQUk5NkMsUUFBUTY2QyxJQW9CMUQsWUFBQWhILFFBQVAsU0FBZS9FLEdBQ2IsSUFBSyxJQUFJN2pELEVBQUksRUFBR0EsRUFBSTZqRCxFQUFPcmlELE9BQVF4QixJQUUxQixJQURDNmpELEVBQU9BLE9BQU83akQsS0FFbEI4RCxLQUFLMnZCLGFBQWErRSxNQUFNRCxZQUFhLEdBTzNDLE9BQU8sR0FvSEYsWUFBQXN3QixlQUFQLFNBQXNCaEYsR0FDcEIsSUFBSyxJQUFJN2pELEVBQUksRUFBR0EsRUFBSTZqRCxFQUFPcmlELE9BQVF4QixJQUNqQyxPQUFRNmpELEVBQU9BLE9BQU83akQsSUFDcEIsS0FBSyxFQUNIOEQsS0FBSzJ2QixhQUFhcHNCLGdCQUFnQjhqQix1QkFBd0IsRUFDMUQsTUFDRixLQUFLLEVBQ0hybkIsS0FBSzQ3QyxnQkFBZ0JvUSxZQUFZLEVBQUcsRUFBQUMsaUJBQ3BDanNELEtBQUs0N0MsZ0JBQWdCb1EsWUFBWSxFQUFHLEVBQUFDLGlCQUNwQ2pzRCxLQUFLNDdDLGdCQUFnQm9RLFlBQVksRUFBRyxFQUFBQyxpQkFDcENqc0QsS0FBSzQ3QyxnQkFBZ0JvUSxZQUFZLEVBQUcsRUFBQUMsaUJBRXBDLE1BQ0YsS0FBSyxFQU1DanNELEtBQUttWSxnQkFBZ0JtQixXQUFXbXNDLGNBQWNuSCxjQUNoRHQrQyxLQUFLdU4sZUFBZWdXLE9BQU8sSUFBS3ZqQixLQUFLdU4sZUFBZXJRLE1BQ3BEOEMsS0FBS3NoRCxnQkFBZ0I1dUMsUUFFdkIsTUFDRixLQUFLLEVBQ0gxUyxLQUFLMnZCLGFBQWFwc0IsZ0JBQWdCcXhCLFFBQVMsRUFDM0M1MEIsS0FBSzZxRCxXQUFXLEVBQUcsR0FDbkIsTUFDRixLQUFLLEVBQ0g3cUQsS0FBSzJ2QixhQUFhcHNCLGdCQUFnQjB4QixZQUFhLEVBQy9DLE1BQ0YsS0FBSyxHQUVILE1BQ0YsS0FBSyxHQUNIajFCLEtBQUsydkIsYUFBYXBzQixnQkFBZ0J1eEIsbUJBQW9CLEVBQ3RELE1BQ0YsS0FBSyxHQUNIOTBCLEtBQUt3TixZQUFZZ0MsTUFBTSw2Q0FDdkJ4UCxLQUFLMnZCLGFBQWFwc0IsZ0JBQWdCaXhCLG1CQUFvQixFQUN0RHgwQixLQUFLd2hELHdCQUF3Qjl1QyxPQUM3QixNQUNGLEtBQUssRUFFSDFTLEtBQUt1Z0Qsa0JBQWtCdjVCLGVBQWlCLE1BQ3hDLE1BQ0YsS0FBSyxJQUVIaG5CLEtBQUt1Z0Qsa0JBQWtCdjVCLGVBQWlCLFFBQ3hDLE1BQ0YsS0FBSyxLQUNIaG5CLEtBQUt1Z0Qsa0JBQWtCdjVCLGVBQWlCLE9BQ3hDLE1BQ0YsS0FBSyxLQUdIaG5CLEtBQUt1Z0Qsa0JBQWtCdjVCLGVBQWlCLE1BQ3hDLE1BQ0YsS0FBSyxLQUdIaG5CLEtBQUsydkIsYUFBYXBzQixnQkFBZ0JnYyxXQUFZLEVBQzlDdmYsS0FBS3VoRCxvQkFBb0I3dUMsT0FDekIsTUFDRixLQUFLLEtBQ0gxUyxLQUFLd04sWUFBWWdDLE1BQU0seUNBQ3ZCLE1BQ0YsS0FBSyxLQUNIeFAsS0FBS3VnRCxrQkFBa0IyTCxlQUFpQixNQUN4QyxNQUNGLEtBQUssS0FDSGxzRCxLQUFLd04sWUFBWWdDLE1BQU0seUNBQ3ZCLE1BQ0YsS0FBSyxHQUNIeFAsS0FBSzJ2QixhQUFhdU8sZ0JBQWlCLEVBQ25DLE1BQ0YsS0FBSyxLQUNIbCtCLEtBQUt3bEQsYUFDTCxNQUNGLEtBQUssS0FDSHhsRCxLQUFLd2xELGFBRVAsS0FBSyxHQUNMLEtBQUssS0FDSHhsRCxLQUFLdU4sZUFBZWlSLFFBQVEydEMsa0JBQWtCbnNELEtBQUtncUQsa0JBQ25EaHFELEtBQUsydkIsYUFBYS9ILHFCQUFzQixFQUN4QzVuQixLQUFLcWhELHNCQUFzQjN1QyxLQUFLLEVBQUcxUyxLQUFLdU4sZUFBZXJRLEtBQU8sR0FDOUQ4QyxLQUFLd2hELHdCQUF3Qjl1QyxPQUM3QixNQUNGLEtBQUssS0FDSDFTLEtBQUsydkIsYUFBYXBzQixnQkFBZ0JKLG9CQUFxQixFQUk3RCxPQUFPLEdBd0JGLFlBQUE2aEQsVUFBUCxTQUFpQmpGLEdBQ2YsSUFBSyxJQUFJN2pELEVBQUksRUFBR0EsRUFBSTZqRCxFQUFPcmlELE9BQVF4QixJQUUxQixJQURDNmpELEVBQU9BLE9BQU83akQsS0FFbEI4RCxLQUFLMnZCLGFBQWErRSxNQUFNRCxZQUFhLEdBTzNDLE9BQU8sR0FnSEYsWUFBQXd3QixpQkFBUCxTQUF3QmxGLEdBQ3RCLElBQUssSUFBSTdqRCxFQUFJLEVBQUdBLEVBQUk2akQsRUFBT3JpRCxPQUFReEIsSUFDakMsT0FBUTZqRCxFQUFPQSxPQUFPN2pELElBQ3BCLEtBQUssRUFDSDhELEtBQUsydkIsYUFBYXBzQixnQkFBZ0I4akIsdUJBQXdCLEVBQzFELE1BQ0YsS0FBSyxFQU1Dcm5CLEtBQUttWSxnQkFBZ0JtQixXQUFXbXNDLGNBQWNuSCxjQUNoRHQrQyxLQUFLdU4sZUFBZWdXLE9BQU8sR0FBSXZqQixLQUFLdU4sZUFBZXJRLE1BQ25EOEMsS0FBS3NoRCxnQkFBZ0I1dUMsUUFFdkIsTUFDRixLQUFLLEVBQ0gxUyxLQUFLMnZCLGFBQWFwc0IsZ0JBQWdCcXhCLFFBQVMsRUFDM0M1MEIsS0FBSzZxRCxXQUFXLEVBQUcsR0FDbkIsTUFDRixLQUFLLEVBQ0g3cUQsS0FBSzJ2QixhQUFhcHNCLGdCQUFnQjB4QixZQUFhLEVBQy9DLE1BQ0YsS0FBSyxHQUVILE1BQ0YsS0FBSyxHQUNIajFCLEtBQUsydkIsYUFBYXBzQixnQkFBZ0J1eEIsbUJBQW9CLEVBQ3RELE1BQ0YsS0FBSyxHQUNIOTBCLEtBQUt3TixZQUFZZ0MsTUFBTSxvQ0FDdkJ4UCxLQUFLMnZCLGFBQWFwc0IsZ0JBQWdCaXhCLG1CQUFvQixFQUN0RHgwQixLQUFLd2hELHdCQUF3Qjl1QyxPQUM3QixNQUNGLEtBQUssRUFDTCxLQUFLLElBQ0wsS0FBSyxLQUNMLEtBQUssS0FDSDFTLEtBQUt1Z0Qsa0JBQWtCdjVCLGVBQWlCLE9BQ3hDLE1BQ0YsS0FBSyxLQUNIaG5CLEtBQUsydkIsYUFBYXBzQixnQkFBZ0JnYyxXQUFZLEVBQzlDLE1BQ0YsS0FBSyxLQUNIdmYsS0FBS3dOLFlBQVlnQyxNQUFNLHlDQUN2QixNQUNGLEtBQUssS0FDSHhQLEtBQUt1Z0Qsa0JBQWtCMkwsZUFBaUIsVUFDeEMsTUFDRixLQUFLLEtBQ0hsc0QsS0FBS3dOLFlBQVlnQyxNQUFNLHlDQUN2QixNQUNGLEtBQUssR0FDSHhQLEtBQUsydkIsYUFBYXVPLGdCQUFpQixFQUNuQyxNQUNGLEtBQUssS0FDSGwrQixLQUFLMGxELGdCQUNMLE1BQ0YsS0FBSyxLQUVMLEtBQUssR0FDTCxLQUFLLEtBRUgxbEQsS0FBS3VOLGVBQWVpUixRQUFRNHRDLHVCQUNILE9BQXJCck0sRUFBT0EsT0FBTzdqRCxJQUNoQjhELEtBQUswbEQsZ0JBRVAxbEQsS0FBSzJ2QixhQUFhL0gscUJBQXNCLEVBQ3hDNW5CLEtBQUtxaEQsc0JBQXNCM3VDLEtBQUssRUFBRzFTLEtBQUt1TixlQUFlclEsS0FBTyxHQUM5RDhDLEtBQUt3aEQsd0JBQXdCOXVDLE9BQzdCLE1BQ0YsS0FBSyxLQUNIMVMsS0FBSzJ2QixhQUFhcHNCLGdCQUFnQkosb0JBQXFCLEVBSTdELE9BQU8sR0FNRCxZQUFBa3BELGlCQUFSLFNBQXlCeG1ELEVBQWV5bUQsRUFBY0MsRUFBWUMsRUFBWUMsR0FTNUUsT0FSYSxJQUFUSCxHQUNGem1ELEdBQVMsU0FDVEEsSUFBUyxTQUNUQSxHQUFTLEVBQUF1MUIsY0FBY3N4QixhQUFhLENBQUNILEVBQUlDLEVBQUlDLEtBQzNCLElBQVRILElBQ1R6bUQsSUFBUyxTQUNUQSxHQUFTLFNBQTJCLElBQUwwbUQsR0FFMUIxbUQsR0FPRCxZQUFBOG1ELGNBQVIsU0FBc0I1TSxFQUFpQmw4QyxFQUFhME4sR0FLbEQsSUFBTXE3QyxFQUFPLENBQUMsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBRzFCQyxFQUFTLEVBR1RDLEVBQVUsRUFFZCxFQUFHLENBRUQsR0FEQUYsRUFBS0UsRUFBVUQsR0FBVTlNLEVBQU9BLE9BQU9sOEMsRUFBTWlwRCxHQUN6Qy9NLEVBQU9nTixhQUFhbHBELEVBQU1pcEQsR0FBVSxDQUN0QyxJQUFNRSxFQUFZak4sRUFBT2tOLGFBQWFwcEQsRUFBTWlwRCxHQUN4QzV3RCxFQUFJLEVBQ1IsR0FDa0IsSUFBWjB3RCxFQUFLLEtBQ1BDLEVBQVMsR0FFWEQsRUFBS0UsRUFBVTV3RCxFQUFJLEVBQUkyd0QsR0FBVUcsRUFBVTl3RCxXQUNsQ0EsRUFBSTh3RCxFQUFVdHZELFFBQVV4QixFQUFJNHdELEVBQVUsRUFBSUQsRUFBU0QsRUFBS2x2RCxRQUNuRSxNQUdGLEdBQWlCLElBQVprdkQsRUFBSyxJQUFZRSxFQUFVRCxHQUFVLEdBQ3hCLElBQVpELEVBQUssSUFBWUUsRUFBVUQsR0FBVSxFQUN6QyxNQUdFRCxFQUFLLEtBQ1BDLEVBQVMsV0FFRkMsRUFBVWpwRCxFQUFNazhDLEVBQU9yaUQsUUFBVW92RCxFQUFVRCxFQUFTRCxFQUFLbHZELFFBR3BFLElBQVN4QixFQUFJLEVBQUdBLEVBQUkwd0QsRUFBS2x2RCxTQUFVeEIsR0FDaEIsSUFBYjB3RCxFQUFLMXdELEtBQ1Awd0QsRUFBSzF3RCxHQUFLLEdBS2QsT0FBUTB3RCxFQUFLLElBQ1gsS0FBSyxHQUNIcjdDLEVBQUt2TCxHQUFLaEcsS0FBS3FzRCxpQkFBaUI5NkMsRUFBS3ZMLEdBQUk0bUQsRUFBSyxHQUFJQSxFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxJQUN6RSxNQUNGLEtBQUssR0FDSHI3QyxFQUFLeEwsR0FBSy9GLEtBQUtxc0QsaUJBQWlCOTZDLEVBQUt4TCxHQUFJNm1ELEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLEdBQUlBLEVBQUssSUFDekUsTUFDRixLQUFLLEdBQ0hyN0MsRUFBS3E0QyxTQUFXcjRDLEVBQUtxNEMsU0FBU3JQLFFBQzlCaHBDLEVBQUtxNEMsU0FBU3NELGVBQWlCbHRELEtBQUtxc0QsaUJBQWlCOTZDLEVBQUtxNEMsU0FBU3NELGVBQWdCTixFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLElBR3ZILE9BQU9FLEdBWUQsWUFBQUssa0JBQVIsU0FBMEJ4cUQsRUFBZTRPLEdBR3ZDQSxFQUFLcTRDLFNBQVdyNEMsRUFBS3E0QyxTQUFTclAsV0FHeEI1M0MsR0FBU0EsRUFBUSxLQUNyQkEsRUFBUSxHQUVWNE8sRUFBS3E0QyxTQUFTd0QsZUFBaUJ6cUQsRUFDL0I0TyxFQUFLdkwsSUFBTSxVQUdHLElBQVZyRCxJQUNGNE8sRUFBS3ZMLEtBQU0sV0FJYnVMLEVBQUs4N0Msa0JBb0ZBLFlBQUFuSSxlQUFQLFNBQXNCbkYsR0FFcEIsR0FBc0IsSUFBbEJBLEVBQU9yaUQsUUFBcUMsSUFBckJxaUQsRUFBT0EsT0FBTyxHQUd2QyxPQUZBLy9DLEtBQUtraEQsYUFBYWw3QyxHQUFLLEVBQUEra0Isa0JBQWtCL2tCLEdBQ3pDaEcsS0FBS2toRCxhQUFhbjdDLEdBQUssRUFBQWdsQixrQkFBa0JobEIsSUFDbEMsRUFPVCxJQUpBLElBQ0kyaUQsRUFERXpsQixFQUFJOGMsRUFBT3JpRCxPQUVYNlQsRUFBT3ZSLEtBQUtraEQsYUFFVGhsRCxFQUFJLEVBQUdBLEVBQUkrbUMsRUFBRy9tQyxLQUNyQndzRCxFQUFJM0ksRUFBT0EsT0FBTzdqRCxLQUNULElBQU13c0QsR0FBSyxJQUVsQm4zQyxFQUFLdkwsS0FBTSxTQUNYdUwsRUFBS3ZMLElBQU0sU0FBcUIwaUQsRUFBSSxJQUMzQkEsR0FBSyxJQUFNQSxHQUFLLElBRXpCbjNDLEVBQUt4TCxLQUFNLFNBQ1h3TCxFQUFLeEwsSUFBTSxTQUFxQjJpRCxFQUFJLElBQzNCQSxHQUFLLElBQU1BLEdBQUssSUFFekJuM0MsRUFBS3ZMLEtBQU0sU0FDWHVMLEVBQUt2TCxJQUFNLFNBQXFCMGlELEVBQUksSUFDM0JBLEdBQUssS0FBT0EsR0FBSyxLQUUxQm4zQyxFQUFLeEwsS0FBTSxTQUNYd0wsRUFBS3hMLElBQU0sU0FBcUIyaUQsRUFBSSxLQUNyQixJQUFOQSxHQUVUbjNDLEVBQUt2TCxHQUFLLEVBQUEra0Isa0JBQWtCL2tCLEdBQzVCdUwsRUFBS3hMLEdBQUssRUFBQWdsQixrQkFBa0JobEIsSUFDYixJQUFOMmlELEVBRVRuM0MsRUFBS3ZMLElBQU0sVUFDSSxJQUFOMGlELEVBRVRuM0MsRUFBS3hMLElBQU0sU0FDSSxJQUFOMmlELEdBRVRuM0MsRUFBS3ZMLElBQU0sVUFDWGhHLEtBQUttdEQsa0JBQWtCcE4sRUFBT2dOLGFBQWE3d0QsR0FBSzZqRCxFQUFPa04sYUFBYS93RCxHQUFJLEdBQUssRUFBdUJxVixJQUNyRixJQUFObTNDLEVBRVRuM0MsRUFBS3ZMLElBQU0sVUFDSSxJQUFOMGlELEVBR1RuM0MsRUFBS3ZMLElBQU0sU0FDSSxJQUFOMGlELEVBRVRuM0MsRUFBS3ZMLElBQU0sV0FDSSxJQUFOMGlELEVBRVRuM0MsRUFBS3ZMLElBQU0sV0FDSSxJQUFOMGlELEVBRVRuM0MsRUFBS3hMLElBQU0sVUFDSSxLQUFOMmlELEVBRVQxb0QsS0FBS210RCxrQkFBa0IsRUFBdUI1N0MsR0FDL0IsS0FBTm0zQyxHQUVUbjNDLEVBQUt2TCxLQUFNLFVBQ1h1TCxFQUFLeEwsS0FBTSxXQUNJLEtBQU4yaUQsRUFFVG4zQyxFQUFLeEwsS0FBTSxTQUNJLEtBQU4yaUQsRUFFVG4zQyxFQUFLdkwsS0FBTSxVQUNJLEtBQU4waUQsRUFFVG4zQyxFQUFLdkwsS0FBTSxVQUNJLEtBQU4waUQsRUFFVG4zQyxFQUFLdkwsS0FBTSxTQUNJLEtBQU4waUQsRUFFVG4zQyxFQUFLdkwsS0FBTSxXQUNJLEtBQU4waUQsRUFFVG4zQyxFQUFLdkwsSUFBTSxXQUNJLEtBQU4waUQsR0FFVG4zQyxFQUFLdkwsS0FBTSxTQUNYdUwsRUFBS3ZMLElBQTZCLFNBQXZCLEVBQUEra0Isa0JBQWtCL2tCLElBQ2QsS0FBTjBpRCxHQUVUbjNDLEVBQUt4TCxLQUFNLFNBQ1h3TCxFQUFLeEwsSUFBNkIsU0FBdkIsRUFBQWdsQixrQkFBa0JobEIsSUFDZCxLQUFOMmlELEdBQWtCLEtBQU5BLEdBQWtCLEtBQU5BLEVBRWpDeHNELEdBQUs4RCxLQUFLMnNELGNBQWM1TSxFQUFRN2pELEVBQUdxVixHQUNwQixLQUFObTNDLEdBQ1RuM0MsRUFBS3E0QyxTQUFXcjRDLEVBQUtxNEMsU0FBU3JQLFFBQzlCaHBDLEVBQUtxNEMsU0FBU3NELGdCQUFrQixFQUNoQzM3QyxFQUFLODdDLGtCQUNVLE1BQU4zRSxHQUVUbjNDLEVBQUt2TCxLQUFNLFNBQ1h1TCxFQUFLdkwsSUFBNkIsU0FBdkIsRUFBQStrQixrQkFBa0Iva0IsR0FDN0J1TCxFQUFLeEwsS0FBTSxTQUNYd0wsRUFBS3hMLElBQTZCLFNBQXZCLEVBQUFnbEIsa0JBQWtCaGxCLElBRTdCL0YsS0FBS3dOLFlBQVlnQyxNQUFNLDZCQUE4Qms1QyxHQUd6RCxPQUFPLEdBNEJGLFlBQUF2RCxhQUFQLFNBQW9CcEYsR0FDbEIsT0FBUUEsRUFBT0EsT0FBTyxJQUNwQixLQUFLLEVBRUgvL0MsS0FBSzJ2QixhQUFhbnNCLGlCQUFvQixFQUFBc2EsR0FBR0MsSUFBRyxPQUM1QyxNQUNGLEtBQUssRUFFSCxJQUFNbE0sRUFBSTdSLEtBQUt5dEIsY0FBYzViLEVBQUksRUFDM0JELEVBQUk1UixLQUFLeXRCLGNBQWM3YixFQUFJLEVBQ2pDNVIsS0FBSzJ2QixhQUFhbnNCLGlCQUFvQixFQUFBc2EsR0FBR0MsSUFBRyxJQUFJbE0sRUFBQyxJQUFJRCxFQUFDLEtBRzFELE9BQU8sR0FJRixZQUFBd3pDLG9CQUFQLFNBQTJCckYsR0FHekIsR0FDTyxJQURDQSxFQUFPQSxPQUFPLEdBQ3BCLENBRUUsSUFBTWx1QyxFQUFJN1IsS0FBS3l0QixjQUFjNWIsRUFBSSxFQUMzQkQsRUFBSTVSLEtBQUt5dEIsY0FBYzdiLEVBQUksRUFDakM1UixLQUFLMnZCLGFBQWFuc0IsaUJBQW9CLEVBQUFzYSxHQUFHQyxJQUFHLEtBQUtsTSxFQUFDLElBQUlELEVBQUMsS0FtQjNELE9BQU8sR0FzQkYsWUFBQXl6QyxVQUFQLFNBQWlCdEYsR0FrQmYsT0FqQkEvL0MsS0FBSzJ2QixhQUFhdU8sZ0JBQWlCLEVBQ25DbCtCLEtBQUt3aEQsd0JBQXdCOXVDLE9BQzdCMVMsS0FBS3l0QixjQUFjUyxVQUFZLEVBQy9CbHVCLEtBQUt5dEIsY0FBY3d1QixhQUFlajhDLEtBQUt1TixlQUFlclEsS0FBTyxFQUM3RDhDLEtBQUtraEQsYUFBZSxFQUFBbjJCLGtCQUFrQnd2QixRQUN0Q3Y2QyxLQUFLMnZCLGFBQWExUyxRQUNsQmpkLEtBQUs0N0MsZ0JBQWdCMytCLFFBR3JCamQsS0FBS3l0QixjQUFjNi9CLE9BQVMsRUFDNUJ0dEQsS0FBS3l0QixjQUFjOC9CLE9BQVN2dEQsS0FBS3l0QixjQUFjeE4sTUFDL0NqZ0IsS0FBS3l0QixjQUFjKy9CLGlCQUFpQnhuRCxHQUFLaEcsS0FBS2toRCxhQUFhbDdDLEdBQzNEaEcsS0FBS3l0QixjQUFjKy9CLGlCQUFpQnpuRCxHQUFLL0YsS0FBS2toRCxhQUFhbjdDLEdBQzNEL0YsS0FBS3l0QixjQUFjZ2dDLGFBQWV6dEQsS0FBSzQ3QyxnQkFBZ0IyTixRQUd2RHZwRCxLQUFLMnZCLGFBQWFwc0IsZ0JBQWdCcXhCLFFBQVMsR0FDcEMsR0FzQkYsWUFBQTB3QixlQUFQLFNBQXNCdkYsR0FDcEIsSUFBTWtMLEVBQVFsTCxFQUFPQSxPQUFPLElBQU0sRUFDbEMsT0FBUWtMLEdBQ04sS0FBSyxFQUNMLEtBQUssRUFDSGpyRCxLQUFLbVksZ0JBQWdCOUssUUFBUWd4QixZQUFjLFFBQzNDLE1BQ0YsS0FBSyxFQUNMLEtBQUssRUFDSHIrQixLQUFLbVksZ0JBQWdCOUssUUFBUWd4QixZQUFjLFlBQzNDLE1BQ0YsS0FBSyxFQUNMLEtBQUssRUFDSHIrQixLQUFLbVksZ0JBQWdCOUssUUFBUWd4QixZQUFjLE1BRy9DLElBQU1xdkIsRUFBYXpDLEVBQVEsR0FBTSxFQUVqQyxPQURBanJELEtBQUttWSxnQkFBZ0I5SyxRQUFRd3dCLFlBQWM2dkIsR0FDcEMsR0FVRixZQUFBbkksZ0JBQVAsU0FBdUJ4RixHQUNyQixJQUNJNE4sRUFERTFwRCxFQUFNODdDLEVBQU9BLE9BQU8sSUFBTSxFQVloQyxPQVRJQSxFQUFPcmlELE9BQVMsSUFBTWl3RCxFQUFTNU4sRUFBT0EsT0FBTyxJQUFNLy9DLEtBQUt1TixlQUFlclEsTUFBbUIsSUFBWHl3RCxLQUNqRkEsRUFBUzN0RCxLQUFLdU4sZUFBZXJRLE1BRzNCeXdELEVBQVMxcEQsSUFDWGpFLEtBQUt5dEIsY0FBY1MsVUFBWWpxQixFQUFNLEVBQ3JDakUsS0FBS3l0QixjQUFjd3VCLGFBQWUwUixFQUFTLEVBQzNDM3RELEtBQUs2cUQsV0FBVyxFQUFHLEtBRWQsR0FpQ0YsWUFBQXBGLGNBQVAsU0FBcUIxRixHQUNuQixJQUFLNUIsRUFBb0I0QixFQUFPQSxPQUFPLEdBQUkvL0MsS0FBS21ZLGdCQUFnQm1CLFdBQVdtc0MsZUFDekUsT0FBTyxFQUVULElBQU1tSSxFQUFVN04sRUFBT3JpRCxPQUFTLEVBQUtxaUQsRUFBT0EsT0FBTyxHQUFLLEVBQ3hELE9BQVFBLEVBQU9BLE9BQU8sSUFDcEIsS0FBSyxHQUNZLElBQVg2TixHQUNGNXRELEtBQUt5aEQsK0JBQStCL3VDLEtBQUt1WSxFQUF5QkMscUJBRXBFLE1BQ0YsS0FBSyxHQUNIbHJCLEtBQUt5aEQsK0JBQStCL3VDLEtBQUt1WSxFQUF5Qk8sc0JBQ2xFLE1BQ0YsS0FBSyxHQUNDeHJCLEtBQUt1TixnQkFDUHZOLEtBQUsydkIsYUFBYW5zQixpQkFBb0IsRUFBQXNhLEdBQUdDLElBQUcsTUFBTS9kLEtBQUt1TixlQUFlclEsS0FBSSxJQUFJOEMsS0FBS3VOLGVBQWV5QixLQUFJLEtBRXhHLE1BQ0YsS0FBSyxHQUNZLElBQVg0K0MsR0FBMkIsSUFBWEEsSUFDbEI1dEQsS0FBS2doRCxrQkFBa0IvL0MsS0FBS2pCLEtBQUs4Z0QsY0FDN0I5Z0QsS0FBS2doRCxrQkFBa0J0akQsT0E5b0ZqQixJQStvRlJzQyxLQUFLZ2hELGtCQUFrQm5nRCxTQUdaLElBQVgrc0QsR0FBMkIsSUFBWEEsSUFDbEI1dEQsS0FBS2loRCxlQUFlaGdELEtBQUtqQixLQUFLK2dELFdBQzFCL2dELEtBQUtpaEQsZUFBZXZqRCxPQXBwRmQsSUFxcEZSc0MsS0FBS2loRCxlQUFlcGdELFNBR3hCLE1BQ0YsS0FBSyxHQUNZLElBQVgrc0QsR0FBMkIsSUFBWEEsR0FDZDV0RCxLQUFLZ2hELGtCQUFrQnRqRCxRQUN6QnNDLEtBQUtrbkQsU0FBU2xuRCxLQUFLZ2hELGtCQUFrQnJnRCxPQUcxQixJQUFYaXRELEdBQTJCLElBQVhBLEdBQ2Q1dEQsS0FBS2loRCxlQUFldmpELFFBQ3RCc0MsS0FBS21uRCxZQUFZbm5ELEtBQUtpaEQsZUFBZXRnRCxPQUs3QyxPQUFPLEdBWUYsWUFBQTZrRCxXQUFQLFNBQWtCekYsR0FNaEIsT0FMQS8vQyxLQUFLeXRCLGNBQWM2L0IsT0FBU3R0RCxLQUFLeXRCLGNBQWM3YixFQUMvQzVSLEtBQUt5dEIsY0FBYzgvQixPQUFTdnRELEtBQUt5dEIsY0FBY3hOLE1BQVFqZ0IsS0FBS3l0QixjQUFjNWIsRUFDMUU3UixLQUFLeXRCLGNBQWMrL0IsaUJBQWlCeG5ELEdBQUtoRyxLQUFLa2hELGFBQWFsN0MsR0FDM0RoRyxLQUFLeXRCLGNBQWMrL0IsaUJBQWlCem5ELEdBQUsvRixLQUFLa2hELGFBQWFuN0MsR0FDM0QvRixLQUFLeXRCLGNBQWNnZ0MsYUFBZXp0RCxLQUFLNDdDLGdCQUFnQjJOLFNBQ2hELEdBWUYsWUFBQTdELGNBQVAsU0FBcUIzRixHQVVuQixPQVRBLy9DLEtBQUt5dEIsY0FBYzdiLEVBQUk1UixLQUFLeXRCLGNBQWM2L0IsUUFBVSxFQUNwRHR0RCxLQUFLeXRCLGNBQWM1YixFQUFJckwsS0FBS3dCLElBQUloSSxLQUFLeXRCLGNBQWM4L0IsT0FBU3Z0RCxLQUFLeXRCLGNBQWN4TixNQUFPLEdBQ3RGamdCLEtBQUtraEQsYUFBYWw3QyxHQUFLaEcsS0FBS3l0QixjQUFjKy9CLGlCQUFpQnhuRCxHQUMzRGhHLEtBQUtraEQsYUFBYW43QyxHQUFLL0YsS0FBS3l0QixjQUFjKy9CLGlCQUFpQnpuRCxHQUMzRC9GLEtBQUs0N0MsZ0JBQWdCMk4sUUFBV3ZwRCxLQUFhNnRELGNBQ3pDN3RELEtBQUt5dEIsY0FBY2dnQyxlQUNyQnp0RCxLQUFLNDdDLGdCQUFnQjJOLFFBQVV2cEQsS0FBS3l0QixjQUFjZ2dDLGNBRXBEenRELEtBQUt5cUQsbUJBQ0UsR0FjRixZQUFBdkQsU0FBUCxTQUFnQjM2QyxHQUdkLE9BRkF2TSxLQUFLOGdELGFBQWV2MEMsRUFDcEJ2TSxLQUFLNmIsZUFBZW5KLEtBQUtuRyxJQUNsQixHQU9GLFlBQUE0NkMsWUFBUCxTQUFtQjU2QyxHQUVqQixPQURBdk0sS0FBSytnRCxVQUFZeDBDLEdBQ1YsR0FXRixZQUFBNjZDLHdCQUFQLFNBQStCNzZDLEdBRzdCLElBRkEsSUFBTTBCLEVBQXFCLEdBQ3JCNi9DLEVBQVF2aEQsRUFBS0csTUFBTSxLQUNsQm9oRCxFQUFNcHdELE9BQVMsR0FBRyxDQUN2QixJQUFNeXJDLEVBQU0ya0IsRUFBTWp0RCxRQUNaa3RELEVBQU9ELEVBQU1qdEQsUUFDbkIsR0FBSSxRQUFROFEsS0FBS3czQixHQUFNLENBQ3JCLElBQU1wekIsRUFBUTNPLFNBQVMraEMsR0FDdkIsR0FBSSxHQUFLcHpCLEdBQVNBLEVBQVEsSUFDeEIsR0FBYSxNQUFUZzRDLEVBQ0Y5L0MsRUFBTWhOLEtBQUssQ0FBRWtNLEtBQU0sRUFBeUI0SSxNQUFLLFFBQzVDLENBQ0wsSUFBTWxRLEdBQVEsSUFBQW1vRCxZQUFXRCxHQUNyQmxvRCxHQUNGb0ksRUFBTWhOLEtBQUssQ0FBRWtNLEtBQU0sRUFBc0I0SSxNQUFLLEVBQUVsUSxNQUFLLE1BUy9ELE9BSElvSSxFQUFNdlEsUUFDUnNDLEtBQUs0aEQsU0FBU2x2QyxLQUFLekUsSUFFZCxHQVdELFlBQUFnZ0QseUJBQVIsU0FBaUMxaEQsRUFBY2k5QixHQUU3QyxJQURBLElBQU1za0IsRUFBUXZoRCxFQUFLRyxNQUFNLEtBQ2hCeFEsRUFBSSxFQUFHQSxFQUFJNHhELEVBQU1wd0QsVUFDcEI4ckMsR0FBVXhwQyxLQUFLa2lELGVBQWV4a0QsVUFEQXhCLElBQUtzdEMsRUFFdkMsR0FBaUIsTUFBYnNrQixFQUFNNXhELEdBQ1I4RCxLQUFLNGhELFNBQVNsdkMsS0FBSyxDQUFDLENBQUV2RixLQUFNLEVBQXlCNEksTUFBTy9WLEtBQUtraUQsZUFBZTFZLFVBQzNFLENBQ0wsSUFBTTNqQyxHQUFRLElBQUFtb0QsWUFBV0YsRUFBTTV4RCxJQUMzQjJKLEdBQ0Y3RixLQUFLNGhELFNBQVNsdkMsS0FBSyxDQUFDLENBQUV2RixLQUFNLEVBQXNCNEksTUFBTy9WLEtBQUtraUQsZUFBZTFZLEdBQVMzakMsTUFBSyxLQUlqRyxPQUFPLEdBeUJGLFlBQUF3aEQsbUJBQVAsU0FBMEI5NkMsR0FDeEIsT0FBT3ZNLEtBQUtpdUQseUJBQXlCMWhELEVBQU0sSUFRdEMsWUFBQSs2QyxtQkFBUCxTQUEwQi82QyxHQUN4QixPQUFPdk0sS0FBS2l1RCx5QkFBeUIxaEQsRUFBTSxJQVF0QyxZQUFBZzdDLHVCQUFQLFNBQThCaDdDLEdBQzVCLE9BQU92TSxLQUFLaXVELHlCQUF5QjFoRCxFQUFNLElBV3RDLFlBQUFpN0Msb0JBQVAsU0FBMkJqN0MsR0FDekIsSUFBS0EsRUFFSCxPQURBdk0sS0FBSzRoRCxTQUFTbHZDLEtBQUssQ0FBQyxDQUFFdkYsS0FBTSxNQUNyQixFQUlULElBRkEsSUFBTWMsRUFBcUIsR0FDckI2L0MsRUFBUXZoRCxFQUFLRyxNQUFNLEtBQ2hCeFEsRUFBSSxFQUFHQSxFQUFJNHhELEVBQU1wd0QsU0FBVXhCLEVBQ2xDLEdBQUksUUFBUXlWLEtBQUttOEMsRUFBTTV4RCxJQUFLLENBQzFCLElBQU02WixFQUFRM08sU0FBUzBtRCxFQUFNNXhELElBQ3pCLEdBQUs2WixHQUFTQSxFQUFRLEtBQ3hCOUgsRUFBTWhOLEtBQUssQ0FBRWtNLEtBQU0sRUFBMEI0SSxNQUFLLElBT3hELE9BSEk5SCxFQUFNdlEsUUFDUnNDLEtBQUs0aEQsU0FBU2x2QyxLQUFLekUsSUFFZCxHQVFGLFlBQUF3NUMsZUFBUCxTQUFzQmw3QyxHQUVwQixPQURBdk0sS0FBSzRoRCxTQUFTbHZDLEtBQUssQ0FBQyxDQUFFdkYsS0FBTSxFQUEwQjRJLE1BQU8sUUFDdEQsR0FRRixZQUFBMnhDLGVBQVAsU0FBc0JuN0MsR0FFcEIsT0FEQXZNLEtBQUs0aEQsU0FBU2x2QyxLQUFLLENBQUMsQ0FBRXZGLEtBQU0sRUFBMEI0SSxNQUFPLFFBQ3RELEdBUUYsWUFBQTR4QyxtQkFBUCxTQUEwQnA3QyxHQUV4QixPQURBdk0sS0FBSzRoRCxTQUFTbHZDLEtBQUssQ0FBQyxDQUFFdkYsS0FBTSxFQUEwQjRJLE1BQU8sUUFDdEQsR0FZRixZQUFBK3dDLFNBQVAsV0FHRSxPQUZBOW1ELEtBQUt5dEIsY0FBYzdiLEVBQUksRUFDdkI1UixLQUFLK1YsU0FDRSxHQVFGLFlBQUE4eEMsc0JBQVAsV0FJRSxPQUhBN25ELEtBQUt3TixZQUFZZ0MsTUFBTSw2Q0FDdkJ4UCxLQUFLMnZCLGFBQWFwc0IsZ0JBQWdCaXhCLG1CQUFvQixFQUN0RHgwQixLQUFLd2hELHdCQUF3Qjl1QyxRQUN0QixHQVFGLFlBQUFvMUMsa0JBQVAsV0FJRSxPQUhBOW5ELEtBQUt3TixZQUFZZ0MsTUFBTSxvQ0FDdkJ4UCxLQUFLMnZCLGFBQWFwc0IsZ0JBQWdCaXhCLG1CQUFvQixFQUN0RHgwQixLQUFLd2hELHdCQUF3Qjl1QyxRQUN0QixHQVNGLFlBQUF1MUMscUJBQVAsV0FHRSxPQUZBam9ELEtBQUs0N0MsZ0JBQWdCb00sVUFBVSxHQUMvQmhvRCxLQUFLNDdDLGdCQUFnQm9RLFlBQVksRUFBRyxFQUFBQyxrQkFDN0IsR0FtQkYsWUFBQTlELGNBQVAsU0FBcUIrRixHQUNuQixPQUE4QixJQUExQkEsRUFBZXh3RCxRQUNqQnNDLEtBQUtpb0Qsd0JBQ0UsSUFFaUIsTUFBdEJpRyxFQUFlLElBR25CbHVELEtBQUs0N0MsZ0JBQWdCb1EsWUFBWS9OLEVBQU9pUSxFQUFlLElBQUssRUFBQTlGLFNBQVM4RixFQUFlLEtBQU8sRUFBQWpDLGtCQUZsRixJQWVKLFlBQUFsMkMsTUFBUCxXQVVFLE9BVEEvVixLQUFLeXFELGtCQUNMenFELEtBQUt5dEIsY0FBYzViLElBQ2Y3UixLQUFLeXRCLGNBQWM1YixJQUFNN1IsS0FBS3l0QixjQUFjd3VCLGFBQWUsR0FDN0RqOEMsS0FBS3l0QixjQUFjNWIsSUFDbkI3UixLQUFLdU4sZUFBZXV2QyxPQUFPOThDLEtBQUtncUQsbUJBQ3ZCaHFELEtBQUt5dEIsY0FBYzViLEdBQUs3UixLQUFLdU4sZUFBZXJRLE9BQ3JEOEMsS0FBS3l0QixjQUFjNWIsRUFBSTdSLEtBQUt1TixlQUFlclEsS0FBTyxHQUVwRDhDLEtBQUt5cUQsbUJBQ0UsR0FhRixZQUFBekQsT0FBUCxXQUVFLE9BREFobkQsS0FBS3l0QixjQUFjeTlCLEtBQUtsckQsS0FBS3l0QixjQUFjN2IsSUFBSyxHQUN6QyxHQVlGLFlBQUFnMkMsYUFBUCxXQUVFLEdBREE1bkQsS0FBS3lxRCxrQkFDRHpxRCxLQUFLeXRCLGNBQWM1YixJQUFNN1IsS0FBS3l0QixjQUFjUyxVQUFXLENBSXpELElBQU1pZ0MsRUFBcUJudUQsS0FBS3l0QixjQUFjd3VCLGFBQWVqOEMsS0FBS3l0QixjQUFjUyxVQUNoRmx1QixLQUFLeXRCLGNBQWNsdEIsTUFBTTY1QyxjQUFjcDZDLEtBQUt5dEIsY0FBY3hOLE1BQVFqZ0IsS0FBS3l0QixjQUFjNWIsRUFBR3M4QyxFQUFvQixHQUM1R251RCxLQUFLeXRCLGNBQWNsdEIsTUFBTThVLElBQUlyVixLQUFLeXRCLGNBQWN4TixNQUFRamdCLEtBQUt5dEIsY0FBYzViLEVBQUc3UixLQUFLeXRCLGNBQWMzQyxhQUFhOXFCLEtBQUtncUQsbUJBQ25IaHFELEtBQUt1N0MsaUJBQWlCUyxlQUFlaDhDLEtBQUt5dEIsY0FBY1MsVUFBV2x1QixLQUFLeXRCLGNBQWN3dUIsbUJBRXRGajhDLEtBQUt5dEIsY0FBYzViLElBQ25CN1IsS0FBS3lxRCxrQkFFUCxPQUFPLEdBUUYsWUFBQTFDLFVBQVAsV0FHRSxPQUZBL25ELEtBQUsrekIsUUFBUTlXLFFBQ2JqZCxLQUFLc2hELGdCQUFnQjV1QyxRQUNkLEdBR0YsWUFBQXVLLE1BQVAsV0FDRWpkLEtBQUtraEQsYUFBZSxFQUFBbjJCLGtCQUFrQnd2QixRQUN0Q3Y2QyxLQUFLbWhELHVCQUF5QixFQUFBcDJCLGtCQUFrQnd2QixTQU0xQyxZQUFBeVAsZUFBUixXQUdFLE9BRkFocUQsS0FBS21oRCx1QkFBdUJwN0MsS0FBTSxTQUNsQy9GLEtBQUttaEQsdUJBQXVCcDdDLElBQTZCLFNBQXZCL0YsS0FBS2toRCxhQUFhbjdDLEdBQzdDL0YsS0FBS21oRCx3QkFhUCxZQUFBNkcsVUFBUCxTQUFpQm9HLEdBRWYsT0FEQXB1RCxLQUFLNDdDLGdCQUFnQm9NLFVBQVVvRyxJQUN4QixHQVdGLFlBQUEvRix1QkFBUCxXQUVFLElBQU1udkIsRUFBTyxJQUFJLEVBQUErRCxTQUNqQi9ELEVBQUszcEIsUUFBVSxHQUFLLEdBQXNCLElBQUkwcEMsV0FBVyxHQUN6RC9mLEVBQUtsekIsR0FBS2hHLEtBQUtraEQsYUFBYWw3QyxHQUM1Qmt6QixFQUFLbnpCLEdBQUsvRixLQUFLa2hELGFBQWFuN0MsR0FHNUIvRixLQUFLNnFELFdBQVcsRUFBRyxHQUNuQixJQUFLLElBQUlsckIsRUFBVSxFQUFHQSxFQUFVMy9CLEtBQUt1TixlQUFlclEsT0FBUXlpQyxFQUFTLENBQ25FLElBQU03WixFQUFNOWxCLEtBQUt5dEIsY0FBY3hOLE1BQVFqZ0IsS0FBS3l0QixjQUFjNWIsRUFBSTh0QixFQUN4RHR1QixFQUFPclIsS0FBS3l0QixjQUFjbHRCLE1BQU0rUSxJQUFJd1UsR0FDdEN6VSxJQUNGQSxFQUFLbTZDLEtBQUt0eUIsR0FDVjduQixFQUFLb2dCLFdBQVksR0FLckIsT0FGQXp4QixLQUFLdTdDLGlCQUFpQjhTLGVBQ3RCcnVELEtBQUs2cUQsV0FBVyxFQUFHLElBQ1osR0FFWCxFQTU3RkEsQ0FBa0MsRUFBQWhvRCxZQUFyQixFQUFBazVDLGFBQUFBLCtIQ3ROYixpQkFJRSxhQUhVLEtBQUF1UyxhQUE4QixHQUM5QixLQUFBandDLGFBQXVCLEVBcUNuQyxPQTdCUyxZQUFBdmUsUUFBUCxXQUNFRSxLQUFLcWUsYUFBYyxFQUNuQixJQUFnQixVQUFBcmUsS0FBS3N1RCxhQUFMLGVBQUosS0FDUnh1RCxVQUVKRSxLQUFLc3VELGFBQWE1d0QsT0FBUyxHQVF0QixZQUFBVyxTQUFQLFNBQXVDa3dELEdBRXJDLE9BREF2dUQsS0FBS3N1RCxhQUFhcnRELEtBQUtzdEQsR0FDaEJBLEdBUUYsWUFBQUMsV0FBUCxTQUF5Q0QsR0FDdkMsSUFBTXg0QyxFQUFRL1YsS0FBS3N1RCxhQUFhcjlDLFFBQVFzOUMsSUFDekIsSUFBWHg0QyxHQUNGL1YsS0FBS3N1RCxhQUFhaCtDLE9BQU95RixFQUFPLElBR3RDLEVBdkNBLEdBNENBLFNBQWdCVyxFQUFhKzNDLEdBQzNCLElBQWdCLFVBQUFBLEVBQUEsZUFBSixLQUNSM3VELFVBRUoydUQsRUFBWS93RCxPQUFTLEVBaERELEVBQUFtRixXQUFBQSxFQTRDdEIsaUJBVUEscUNBQTBDNnJELEdBQ3hDLE1BQU8sQ0FBRTV1RCxRQUFTLFdBQU0sT0FBQTRXLEVBQWFnNEMsb0tDbkR2QyxJQUFNQyxFQUErQixvQkFBZEMsVUFDakJDLEVBQVksRUFBVyxPQUFTRCxVQUFVQyxVQUMxQ0MsRUFBVyxFQUFXLE9BQVNGLFVBQVVFLFNBRWxDLEVBQUE3dEMsVUFBWTR0QyxFQUFVcDdCLFNBQVMsV0FDL0IsRUFBQXVULGFBQWU2bkIsRUFBVXA3QixTQUFTLFFBQ2xDLEVBQUFpVyxTQUFXLGlDQUFpQ3FsQixLQUFLRixHQUtqRCxFQUFBanRELE1BQVEsQ0FBQyxZQUFhLFdBQVksU0FBVSxVQUFVNnhCLFNBQVNxN0IsR0FDL0QsRUFBQUUsT0FBc0IsU0FBYkYsRUFDVCxFQUFBRyxTQUF3QixXQUFiSCxFQUNYLEVBQUE5a0MsVUFBWSxDQUFDLFVBQVcsUUFBUyxRQUFTLFNBQVN5SixTQUFTcTdCLEdBQzVELEVBQUF6dEMsUUFBVXl0QyxFQUFTNzlDLFFBQVEsVUFBWSxnQkNWcEQsU0FBZ0JpK0MsRUFBbUNSLEVBQVVqckQsRUFBZWhGLEVBQW1CQyxHQUs3RixRQUwwRSxJQUFBRCxJQUFBQSxFQUFBLFFBQW1CLElBQUFDLElBQUFBLEVBQWNnd0QsRUFBTWh4RCxRQUs3R2UsR0FBU2l3RCxFQUFNaHhELE9BQ2pCLE9BQU9neEQsRUFFVGp3RCxHQUFTaXdELEVBQU1oeEQsT0FBU2UsR0FBU2l3RCxFQUFNaHhELE9BRXJDZ0IsRUFERUEsR0FBT2d3RCxFQUFNaHhELE9BQ1RneEQsRUFBTWh4RCxRQUVMZ3hELEVBQU1oeEQsT0FBU2dCLEdBQU9nd0QsRUFBTWh4RCxPQUVyQyxJQUFLLElBQUl4QixFQUFJdUMsRUFBT3ZDLEVBQUl3QyxJQUFPeEMsRUFDN0J3eUQsRUFBTXh5RCxHQUFLdUgsRUFFYixPQUFPaXJELHlGQXpCVCxnQkFBMkNBLEVBQVVqckQsRUFBZWhGLEVBQWdCQyxHQUVsRixPQUFJZ3dELEVBQU1sRCxLQUNEa0QsRUFBTWxELEtBQUsvbkQsRUFBT2hGLEVBQU9DLEdBRTNCd3dELEVBQWFSLEVBQU9qckQsRUFBT2hGLEVBQU9DLElBRzNDLGlCQXdCQSxrQkFBNkN6QyxFQUFNeUosR0FDakQsSUFBTW1CLEVBQVMsSUFBSzVLLEVBQUVrekQsWUFBb0JsekQsRUFBRXlCLE9BQVNnSSxFQUFFaEksUUFHdkQsT0FGQW1KLEVBQU93TyxJQUFJcFosR0FDWDRLLEVBQU93TyxJQUFJM1AsRUFBR3pKLEVBQUV5QixRQUNUbUosMkdDM0NULGFBR0EseUNBQThDcXFCLEdBVzVDLElBQU03ZixFQUFPNmYsRUFBYzV3QixPQUFPQyxNQUFNK1EsSUFBSTRmLEVBQWM1d0IsT0FBTzJmLE1BQVFpUixFQUFjNXdCLE9BQU91UixFQUFJLEdBQzVGdTlDLEVBQVcvOUMsTUFBQUEsT0FBSSxFQUFKQSxFQUFNQyxJQUFJNGYsRUFBY2xpQixLQUFPLEdBRTFDODNDLEVBQVc1MUIsRUFBYzV3QixPQUFPQyxNQUFNK1EsSUFBSTRmLEVBQWM1d0IsT0FBTzJmLE1BQVFpUixFQUFjNXdCLE9BQU91UixHQUM5RmkxQyxHQUFZc0ksSUFDZHRJLEVBQVNyMUIsVUFBYTI5QixFQUFTLEVBQUFDLHdCQUEwQixFQUFBbHFCLGdCQUFrQmlxQixFQUFTLEVBQUFDLHdCQUEwQixFQUFBdjBCLDZIQ2hCbEgsOEJBc0JTLEtBQUE5MEIsR0FBSyxFQUNMLEtBQUFELEdBQUssRUFDTCxLQUFBNmpELFNBQVcsSUFBSTBGLEVBeUZ4QixPQWhIZ0IsRUFBQW5vRCxXQUFkLFNBQXlCMUQsR0FDdkIsTUFBTyxDQUNMQSxJQUFVLEdBQXVCLElBQ2pDQSxJQUFVLEVBQXlCLElBQzNCLElBQVJBLElBSVUsRUFBQWlwRCxhQUFkLFNBQTJCanBELEdBQ3pCLE9BQW1CLElBQVhBLEVBQU0sS0FBYSxJQUFtQyxJQUFYQSxFQUFNLEtBQWEsRUFBb0MsSUFBWEEsRUFBTSxJQUdoRyxZQUFBODJDLE1BQVAsV0FDRSxJQUFNZ1YsRUFBUyxJQUFJbjBCLEVBSW5CLE9BSEFtMEIsRUFBT3ZwRCxHQUFLaEcsS0FBS2dHLEdBQ2pCdXBELEVBQU94cEQsR0FBSy9GLEtBQUsrRixHQUNqQndwRCxFQUFPM0YsU0FBVzVwRCxLQUFLNHBELFNBQVNyUCxRQUN6QmdWLEdBU0YsWUFBQXAxQixVQUFQLFdBQW1DLE9BQWlCLFNBQVZuNkIsS0FBS2dHLElBQ3hDLFlBQUEyMEIsT0FBUCxXQUFtQyxPQUFpQixVQUFWMzZCLEtBQUtnRyxJQUN4QyxZQUFBMC9CLFlBQVAsV0FBbUMsT0FBaUIsVUFBVjFsQyxLQUFLZ0csSUFDeEMsWUFBQXdwRCxRQUFQLFdBQW1DLE9BQWlCLFVBQVZ4dkQsS0FBS2dHLElBQ3hDLFlBQUF5L0IsWUFBUCxXQUFtQyxPQUFpQixXQUFWemxDLEtBQUtnRyxJQUN4QyxZQUFBZzFCLFNBQVAsV0FBbUMsT0FBaUIsU0FBVmg3QixLQUFLK0YsSUFDeEMsWUFBQWcxQixNQUFQLFdBQW1DLE9BQWlCLFVBQVYvNkIsS0FBSytGLElBQ3hDLFlBQUE0L0IsZ0JBQVAsV0FBbUMsT0FBaUIsV0FBVjNsQyxLQUFLZ0csSUFHeEMsWUFBQWkyQixlQUFQLFdBQWtDLE9BQWlCLFNBQVZqOEIsS0FBS2dHLElBQ3ZDLFlBQUFvMkIsZUFBUCxXQUFrQyxPQUFpQixTQUFWcDhCLEtBQUsrRixJQUN2QyxZQUFBaTBCLFFBQVAsV0FBa0MsT0FBMEMsV0FBeEIsU0FBVmg2QixLQUFLZ0csS0FDeEMsWUFBQWkwQixRQUFQLFdBQWtDLE9BQTBDLFdBQXhCLFNBQVZqNkIsS0FBSytGLEtBQ3hDLFlBQUEwcEQsWUFBUCxXQUFrQyxPQUEwQyxXQUF4QixTQUFWenZELEtBQUtnRyxLQUFxRixXQUF4QixTQUFWaEcsS0FBS2dHLEtBQ2hHLFlBQUF1L0IsWUFBUCxXQUFrQyxPQUEwQyxXQUF4QixTQUFWdmxDLEtBQUsrRixLQUFxRixXQUF4QixTQUFWL0YsS0FBSytGLEtBQ2hHLFlBQUF3MEIsWUFBUCxXQUFrQyxPQUEwQyxJQUF4QixTQUFWdjZCLEtBQUtnRyxLQUN4QyxZQUFBbzBCLFlBQVAsV0FBa0MsT0FBMEMsSUFBeEIsU0FBVnA2QixLQUFLK0YsS0FDeEMsWUFBQTJwRCxtQkFBUCxXQUF1QyxPQUFtQixJQUFaMXZELEtBQUtnRyxJQUF3QixJQUFaaEcsS0FBSytGLElBRzdELFlBQUF5MEIsV0FBUCxXQUNFLE9BQWtCLFNBQVZ4NkIsS0FBS2dHLElBQ1gsS0FBSyxTQUNMLEtBQUssU0FBcUIsT0FBaUIsSUFBVmhHLEtBQUtnRyxHQUN0QyxLQUFLLFNBQXFCLE9BQWlCLFNBQVZoRyxLQUFLZ0csR0FDdEMsUUFBMEIsT0FBUSxJQUcvQixZQUFBczBCLFdBQVAsV0FDRSxPQUFrQixTQUFWdDZCLEtBQUsrRixJQUNYLEtBQUssU0FDTCxLQUFLLFNBQXFCLE9BQWlCLElBQVYvRixLQUFLK0YsR0FDdEMsS0FBSyxTQUFxQixPQUFpQixTQUFWL0YsS0FBSytGLEdBQ3RDLFFBQTBCLE9BQVEsSUFLL0IsWUFBQTRwRCxpQkFBUCxXQUNFLE9BQWlCLFVBQVYzdkQsS0FBSytGLElBRVAsWUFBQXNuRCxlQUFQLFdBQ01ydEQsS0FBSzRwRCxTQUFTL2dCLFVBQ2hCN29DLEtBQUsrRixLQUFNLFVBRVgvRixLQUFLK0YsSUFBTSxXQUdSLFlBQUE2cEQsa0JBQVAsV0FDRSxHQUFlLFVBQVY1dkQsS0FBSytGLEtBQStCL0YsS0FBSzRwRCxTQUFTc0QsZUFDckQsT0FBdUMsU0FBL0JsdEQsS0FBSzRwRCxTQUFTc0QsZ0JBQ3BCLEtBQUssU0FDTCxLQUFLLFNBQXFCLE9BQXNDLElBQS9CbHRELEtBQUs0cEQsU0FBU3NELGVBQy9DLEtBQUssU0FBcUIsT0FBc0MsU0FBL0JsdEQsS0FBSzRwRCxTQUFTc0QsZUFDL0MsUUFBMEIsT0FBT2x0RCxLQUFLdzZCLGFBRzFDLE9BQU94NkIsS0FBS3c2QixjQUVQLFlBQUFxMUIsc0JBQVAsV0FDRSxPQUFrQixVQUFWN3ZELEtBQUsrRixLQUErQi9GLEtBQUs0cEQsU0FBU3NELGVBQ3ZCLFNBQS9CbHRELEtBQUs0cEQsU0FBU3NELGVBQ2RsdEQsS0FBS2k4QixrQkFFSixZQUFBNnpCLG9CQUFQLFdBQ0UsT0FBa0IsVUFBVjl2RCxLQUFLK0YsS0FBK0IvRixLQUFLNHBELFNBQVNzRCxlQUNFLFdBQXhCLFNBQS9CbHRELEtBQUs0cEQsU0FBU3NELGdCQUNmbHRELEtBQUtnNkIsV0FFSixZQUFBKzFCLHdCQUFQLFdBQ0UsT0FBa0IsVUFBVi92RCxLQUFLK0YsS0FBK0IvRixLQUFLNHBELFNBQVNzRCxlQUNFLFdBQXhCLFNBQS9CbHRELEtBQUs0cEQsU0FBU3NELGlCQUM4QyxXQUF4QixTQUEvQmx0RCxLQUFLNHBELFNBQVNzRCxnQkFDcEJsdEQsS0FBS3l2RCxlQUVKLFlBQUFPLHdCQUFQLFdBQ0UsT0FBa0IsVUFBVmh3RCxLQUFLK0YsS0FBK0IvRixLQUFLNHBELFNBQVNzRCxlQUNFLElBQXhCLFNBQS9CbHRELEtBQUs0cEQsU0FBU3NELGdCQUNmbHRELEtBQUt1NkIsZUFFSixZQUFBMDFCLGtCQUFQLFdBQ0UsT0FBaUIsVUFBVmp3RCxLQUFLZ0csR0FDRyxVQUFWaEcsS0FBSytGLEdBQTRCL0YsS0FBSzRwRCxTQUFTd0QsZUFBaUIsRUFDakUsR0FFUixFQWpIQSxHQUFhLEVBQUFoeUIsY0FBQUEsRUF3SGIsaUJBQ0UsV0FFU2d5QixFQUVBRixRQUZBLElBQUFFLElBQUFBLEVBQUEsUUFFQSxJQUFBRixJQUFBQSxHQUEwQixHQUYxQixLQUFBRSxlQUFBQSxFQUVBLEtBQUFGLGVBQUFBLEVBY1gsT0FYUyxZQUFBM1MsTUFBUCxXQUNFLE9BQU8sSUFBSStVLEVBQWN0dkQsS0FBS290RCxlQUFnQnB0RCxLQUFLa3RELGlCQU85QyxZQUFBcmtCLFFBQVAsV0FDRSxPQUErQixJQUF4QjdvQyxLQUFLb3RELGdCQUVoQixFQW5CQSxHQUFhLEVBQUFrQyxjQUFBQSw0SEMzSGIsY0FHQSxVQUNBLFNBQ0EsU0FDQSxVQUNBLFVBRUEsVUFDQSxVQUVhLEVBQUFZLGdCQUFrQixXQVMvQixpQkFxQkUsV0FDVUMsRUFDQWg0QyxFQUNBNUssR0FGQSxLQUFBNGlELGVBQUFBLEVBQ0EsS0FBQWg0QyxnQkFBQUEsRUFDQSxLQUFBNUssZUFBQUEsRUF0QkgsS0FBQWxMLE1BQWdCLEVBQ2hCLEtBQUE0ZCxNQUFnQixFQUNoQixLQUFBcE8sRUFBWSxFQUNaLEtBQUFELEVBQVksRUFLWixLQUFBMjdDLE9BQWlCLEVBQ2pCLEtBQUFELE9BQWlCLEVBQ2pCLEtBQUFFLGlCQUFtQixFQUFBemlDLGtCQUFrQnd2QixRQUNyQyxLQUFBa1QsYUFBcUMsRUFBQXhCLGdCQUNyQyxLQUFBN2pDLFFBQW9CLEdBQ25CLEtBQUFnb0MsVUFBdUIsRUFBQW56QixTQUFTb3pCLGFBQWEsQ0FBQyxFQUFHLEVBQUFDLGVBQWdCLEVBQUFuRyxnQkFBaUIsRUFBQWhsQixpQkFDbEYsS0FBQW9yQixnQkFBNkIsRUFBQXR6QixTQUFTb3pCLGFBQWEsQ0FBQyxFQUFHLEVBQUF6MUIscUJBQXNCLEVBQUE0MUIsc0JBQXVCLEVBQUExMUIsdUJBR3BHLEtBQUEyMUIsYUFBdUIsRUFPN0J6d0QsS0FBSzB3RCxNQUFRMXdELEtBQUt1TixlQUFleUIsS0FDakNoUCxLQUFLMndELE1BQVEzd0QsS0FBS3VOLGVBQWVyUSxLQUNqQzhDLEtBQUtPLE1BQVEsSUFBSSxFQUFBKzVDLGFBQTBCdDZDLEtBQUs0d0Qsd0JBQXdCNXdELEtBQUsyd0QsUUFDN0Uzd0QsS0FBS2t1QixVQUFZLEVBQ2pCbHVCLEtBQUtpOEMsYUFBZWo4QyxLQUFLMndELE1BQVEsRUFDakMzd0QsS0FBS29mLGdCQTJrQlQsT0F4a0JTLFlBQUE4cUMsWUFBUCxTQUFtQjM0QyxHQVVqQixPQVRJQSxHQUNGdlIsS0FBS293RCxVQUFVcHFELEdBQUt1TCxFQUFLdkwsR0FDekJoRyxLQUFLb3dELFVBQVVycUQsR0FBS3dMLEVBQUt4TCxHQUN6Qi9GLEtBQUtvd0QsVUFBVXhHLFNBQVdyNEMsRUFBS3E0QyxXQUUvQjVwRCxLQUFLb3dELFVBQVVwcUQsR0FBSyxFQUNwQmhHLEtBQUtvd0QsVUFBVXJxRCxHQUFLLEVBQ3BCL0YsS0FBS293RCxVQUFVeEcsU0FBVyxJQUFJLEVBQUEwRixlQUV6QnR2RCxLQUFLb3dELFdBR1AsWUFBQVMsa0JBQVAsU0FBeUJ0L0MsR0FVdkIsT0FUSUEsR0FDRnZSLEtBQUt1d0QsZ0JBQWdCdnFELEdBQUt1TCxFQUFLdkwsR0FDL0JoRyxLQUFLdXdELGdCQUFnQnhxRCxHQUFLd0wsRUFBS3hMLEdBQy9CL0YsS0FBS3V3RCxnQkFBZ0IzRyxTQUFXcjRDLEVBQUtxNEMsV0FFckM1cEQsS0FBS3V3RCxnQkFBZ0J2cUQsR0FBSyxFQUMxQmhHLEtBQUt1d0QsZ0JBQWdCeHFELEdBQUssRUFDMUIvRixLQUFLdXdELGdCQUFnQjNHLFNBQVcsSUFBSSxFQUFBMEYsZUFFL0J0dkQsS0FBS3V3RCxpQkFHUCxZQUFBemxDLGFBQVAsU0FBb0J2WixFQUFzQmtnQixHQUN4QyxPQUFPLElBQUksRUFBQXEvQixXQUFXOXdELEtBQUt1TixlQUFleUIsS0FBTWhQLEtBQUtrcUQsWUFBWTM0QyxHQUFPa2dCLElBRzFFLHNCQUFXLDRCQUFhLEtBQXhCLFdBQ0UsT0FBT3p4QixLQUFLbXdELGdCQUFrQm53RCxLQUFLTyxNQUFNd3dELFVBQVkvd0QsS0FBSzJ3RCx1Q0FHNUQsc0JBQVcsaUNBQWtCLEtBQTdCLFdBQ0UsSUFDTUssRUFEWWh4RCxLQUFLaWdCLE1BQVFqZ0IsS0FBSzZSLEVBQ043UixLQUFLcUMsTUFDbkMsT0FBUTJ1RCxHQUFhLEdBQUtBLEVBQVloeEQsS0FBSzJ3RCx1Q0FRckMsWUFBQUMsd0JBQVIsU0FBZ0MxekQsR0FDOUIsSUFBSzhDLEtBQUttd0QsZUFDUixPQUFPanpELEVBR1QsSUFBTSt6RCxFQUFzQi96RCxFQUFPOEMsS0FBS21ZLGdCQUFnQm1CLFdBQVc2VSxXQUVuRSxPQUFPOGlDLEVBQXNCLEVBQUFmLGdCQUFrQixFQUFBQSxnQkFBa0JlLEdBTTVELFlBQUFDLGlCQUFQLFNBQXdCQyxHQUN0QixHQUEwQixJQUF0Qm54RCxLQUFLTyxNQUFNN0MsT0FBYyxNQUNWaUksSUFBYndyRCxJQUNGQSxFQUFXLEVBQUFwbUMsbUJBR2IsSUFEQSxJQUFJN3VCLEVBQUk4RCxLQUFLMndELE1BQ056MEQsS0FDTDhELEtBQUtPLE1BQU1VLEtBQUtqQixLQUFLOHFCLGFBQWFxbUMsTUFRakMsWUFBQTNvRCxNQUFQLFdBQ0V4SSxLQUFLcUMsTUFBUSxFQUNickMsS0FBS2lnQixNQUFRLEVBQ2JqZ0IsS0FBSzZSLEVBQUksRUFDVDdSLEtBQUs0UixFQUFJLEVBQ1Q1UixLQUFLTyxNQUFRLElBQUksRUFBQSs1QyxhQUEwQnQ2QyxLQUFLNHdELHdCQUF3QjV3RCxLQUFLMndELFFBQzdFM3dELEtBQUtrdUIsVUFBWSxFQUNqQmx1QixLQUFLaThDLGFBQWVqOEMsS0FBSzJ3RCxNQUFRLEVBQ2pDM3dELEtBQUtvZixpQkFRQSxZQUFBbUUsT0FBUCxTQUFjNnRDLEVBQWlCQyxHQUU3QixJQUFNQyxFQUFXdHhELEtBQUtrcUQsWUFBWSxFQUFBbi9CLG1CQUk1QjR1QixFQUFlMzVDLEtBQUs0d0Qsd0JBQXdCUyxHQU9sRCxHQU5JMVgsRUFBZTM1QyxLQUFLTyxNQUFNd3dELFlBQzVCL3dELEtBQUtPLE1BQU13d0QsVUFBWXBYLEdBS3JCMzVDLEtBQUtPLE1BQU03QyxPQUFTLEVBQUcsQ0FFekIsR0FBSXNDLEtBQUswd0QsTUFBUVUsRUFDZixJQUFLLElBQUlsMUQsRUFBSSxFQUFHQSxFQUFJOEQsS0FBS08sTUFBTTdDLE9BQVF4QixJQUNyQzhELEtBQUtPLE1BQU0rUSxJQUFJcFYsR0FBSXFuQixPQUFPNnRDLEVBQVNFLEdBS3ZDLElBQUlDLEVBQVMsRUFDYixHQUFJdnhELEtBQUsyd0QsTUFBUVUsRUFDZixJQUFLLElBQUl4L0MsRUFBSTdSLEtBQUsyd0QsTUFBTzkrQyxFQUFJdy9DLEVBQVN4L0MsSUFDaEM3UixLQUFLTyxNQUFNN0MsT0FBUzJ6RCxFQUFVcnhELEtBQUtpZ0IsUUFDakNqZ0IsS0FBS21ZLGdCQUFnQm1CLFdBQVc4akMsWUFHbENwOUMsS0FBS08sTUFBTVUsS0FBSyxJQUFJLEVBQUE2dkQsV0FBV00sRUFBU0UsSUFFcEN0eEQsS0FBS2lnQixNQUFRLEdBQUtqZ0IsS0FBS08sTUFBTTdDLFFBQVVzQyxLQUFLaWdCLE1BQVFqZ0IsS0FBSzZSLEVBQUkwL0MsRUFBUyxHQUd4RXZ4RCxLQUFLaWdCLFFBQ0xzeEMsSUFDSXZ4RCxLQUFLcUMsTUFBUSxHQUVmckMsS0FBS3FDLFNBS1ByQyxLQUFLTyxNQUFNVSxLQUFLLElBQUksRUFBQTZ2RCxXQUFXTSxFQUFTRSxVQU1oRCxJQUFTei9DLEVBQUk3UixLQUFLMndELE1BQU85K0MsRUFBSXcvQyxFQUFTeC9DLElBQ2hDN1IsS0FBS08sTUFBTTdDLE9BQVMyekQsRUFBVXJ4RCxLQUFLaWdCLFFBQ2pDamdCLEtBQUtPLE1BQU03QyxPQUFTc0MsS0FBS2lnQixNQUFRamdCLEtBQUs2UixFQUFJLEVBRTVDN1IsS0FBS08sTUFBTUksT0FHWFgsS0FBS2lnQixRQUNMamdCLEtBQUtxQyxVQVFiLEdBQUlzM0MsRUFBZTM1QyxLQUFLTyxNQUFNd3dELFVBQVcsQ0FFdkMsSUFBTVMsRUFBZXh4RCxLQUFLTyxNQUFNN0MsT0FBU2k4QyxFQUNyQzZYLEVBQWUsSUFDakJ4eEQsS0FBS08sTUFBTTQ1QyxVQUFVcVgsR0FDckJ4eEQsS0FBS2lnQixNQUFRelosS0FBS3dCLElBQUloSSxLQUFLaWdCLE1BQVF1eEMsRUFBYyxHQUNqRHh4RCxLQUFLcUMsTUFBUW1FLEtBQUt3QixJQUFJaEksS0FBS3FDLE1BQVFtdkQsRUFBYyxHQUNqRHh4RCxLQUFLdXRELE9BQVMvbUQsS0FBS3dCLElBQUloSSxLQUFLdXRELE9BQVNpRSxFQUFjLElBRXJEeHhELEtBQUtPLE1BQU13d0QsVUFBWXBYLEVBSXpCMzVDLEtBQUs0UixFQUFJcEwsS0FBSzJCLElBQUluSSxLQUFLNFIsRUFBR3cvQyxFQUFVLEdBQ3BDcHhELEtBQUs2UixFQUFJckwsS0FBSzJCLElBQUluSSxLQUFLNlIsRUFBR3cvQyxFQUFVLEdBQ2hDRSxJQUNGdnhELEtBQUs2UixHQUFLMC9DLEdBRVp2eEQsS0FBS3N0RCxPQUFTOW1ELEtBQUsyQixJQUFJbkksS0FBS3N0RCxPQUFROEQsRUFBVSxHQUU5Q3B4RCxLQUFLa3VCLFVBQVksRUFLbkIsR0FGQWx1QixLQUFLaThDLGFBQWVvVixFQUFVLEVBRTFCcnhELEtBQUt5eEQsbUJBQ1B6eEQsS0FBSzB4RCxRQUFRTixFQUFTQyxHQUdsQnJ4RCxLQUFLMHdELE1BQVFVLEdBQ2YsSUFBU2wxRCxFQUFJLEVBQUdBLEVBQUk4RCxLQUFLTyxNQUFNN0MsT0FBUXhCLElBQ3JDOEQsS0FBS08sTUFBTStRLElBQUlwVixHQUFJcW5CLE9BQU82dEMsRUFBU0UsR0FLekN0eEQsS0FBSzB3RCxNQUFRVSxFQUNicHhELEtBQUsyd0QsTUFBUVUsR0FHZixzQkFBWSwrQkFBZ0IsS0FBNUIsV0FDRSxPQUFPcnhELEtBQUttd0QsaUJBQW1CbndELEtBQUttWSxnQkFBZ0JtQixXQUFXOGpDLDZDQUd6RCxZQUFBc1UsUUFBUixTQUFnQk4sRUFBaUJDLEdBQzNCcnhELEtBQUswd0QsUUFBVVUsSUFLZkEsRUFBVXB4RCxLQUFLMHdELE1BQ2pCMXdELEtBQUsyeEQsY0FBY1AsRUFBU0MsR0FFNUJyeEQsS0FBSzR4RCxlQUFlUixFQUFTQyxLQUl6QixZQUFBTSxjQUFSLFNBQXNCUCxFQUFpQkMsR0FDckMsSUFBTVEsR0FBcUIsSUFBQUMsOEJBQTZCOXhELEtBQUtPLE1BQU9QLEtBQUswd0QsTUFBT1UsRUFBU3B4RCxLQUFLaWdCLE1BQVFqZ0IsS0FBSzZSLEVBQUc3UixLQUFLa3FELFlBQVksRUFBQW4vQixvQkFDL0gsR0FBSThtQyxFQUFTbjBELE9BQVMsRUFBRyxDQUN2QixJQUFNcTBELEdBQWtCLElBQUFDLDZCQUE0Qmh5RCxLQUFLTyxNQUFPc3hELElBQ2hFLElBQUFJLDRCQUEyQmp5RCxLQUFLTyxNQUFPd3hELEVBQWdCRyxRQUN2RGx5RCxLQUFLbXlELDRCQUE0QmYsRUFBU0MsRUFBU1UsRUFBZ0JLLGdCQUkvRCxZQUFBRCw0QkFBUixTQUFvQ2YsRUFBaUJDLEVBQWlCZSxHQUlwRSxJQUhBLElBQU1kLEVBQVd0eEQsS0FBS2txRCxZQUFZLEVBQUFuL0IsbUJBRTlCc25DLEVBQXNCRCxFQUNuQkMsS0FBd0IsR0FDVixJQUFmcnlELEtBQUtpZ0IsT0FDSGpnQixLQUFLNlIsRUFBSSxHQUNYN1IsS0FBSzZSLElBRUg3UixLQUFLTyxNQUFNN0MsT0FBUzJ6RCxHQUV0QnJ4RCxLQUFLTyxNQUFNVSxLQUFLLElBQUksRUFBQTZ2RCxXQUFXTSxFQUFTRSxNQUd0Q3R4RCxLQUFLcUMsUUFBVXJDLEtBQUtpZ0IsT0FDdEJqZ0IsS0FBS3FDLFFBRVByQyxLQUFLaWdCLFNBR1RqZ0IsS0FBS3V0RCxPQUFTL21ELEtBQUt3QixJQUFJaEksS0FBS3V0RCxPQUFTNkUsRUFBYyxJQUc3QyxZQUFBUixlQUFSLFNBQXVCUixFQUFpQkMsR0FPdEMsSUFOQSxJQUFNQyxFQUFXdHhELEtBQUtrcUQsWUFBWSxFQUFBbi9CLG1CQUc1QnVuQyxFQUFXLEdBQ2JDLEVBQWdCLEVBRVgxZ0QsRUFBSTdSLEtBQUtPLE1BQU03QyxPQUFTLEVBQUdtVSxHQUFLLEVBQUdBLElBQUssQ0FFL0MsSUFBSWkxQyxFQUFXOW1ELEtBQUtPLE1BQU0rUSxJQUFJTyxHQUM5QixNQUFLaTFDLElBQWFBLEVBQVNyMUIsV0FBYXExQixFQUFTcFgsb0JBQXNCMGhCLEdBQXZFLENBTUEsSUFEQSxJQUFNb0IsRUFBNkIsQ0FBQzFMLEdBQzdCQSxFQUFTcjFCLFdBQWE1ZixFQUFJLEdBQy9CaTFDLEVBQVc5bUQsS0FBS08sTUFBTStRLE1BQU1PLEdBQzVCMmdELEVBQWF4eEQsUUFBUThsRCxHQUt2QixJQUFNMkwsRUFBWXp5RCxLQUFLaWdCLE1BQVFqZ0IsS0FBSzZSLEVBQ3BDLEtBQUk0Z0QsR0FBYTVnRCxHQUFLNGdELEVBQVk1Z0QsRUFBSTJnRCxFQUFhOTBELFFBQW5ELENBSUEsSUFHSWcxRCxFQUhFQyxFQUFpQkgsRUFBYUEsRUFBYTkwRCxPQUFTLEdBQUdneUMsbUJBQ3ZEa2pCLEdBQWtCLElBQUFDLGdDQUErQkwsRUFBY3h5RCxLQUFLMHdELE1BQU9VLEdBQzNFMEIsRUFBYUYsRUFBZ0JsMUQsT0FBUzgwRCxFQUFhOTBELE9BSXZEZzFELEVBRmlCLElBQWYxeUQsS0FBS2lnQixPQUFlamdCLEtBQUs2UixJQUFNN1IsS0FBS08sTUFBTTdDLE9BQVMsRUFFdEM4SSxLQUFLd0IsSUFBSSxFQUFHaEksS0FBSzZSLEVBQUk3UixLQUFLTyxNQUFNd3dELFVBQVkrQixHQUU1Q3RzRCxLQUFLd0IsSUFBSSxFQUFHaEksS0FBS08sTUFBTTdDLE9BQVNzQyxLQUFLTyxNQUFNd3dELFVBQVkrQixHQUt4RSxJQURBLElBQU1DLEVBQXlCLEdBQ3RCNzJELEVBQUksRUFBR0EsRUFBSTQyRCxFQUFZNTJELElBQUssQ0FDbkMsSUFBTTgyRCxFQUFVaHpELEtBQUs4cUIsYUFBYSxFQUFBQyxtQkFBbUIsR0FDckRnb0MsRUFBUzl4RCxLQUFLK3hELEdBRVpELEVBQVNyMUQsT0FBUyxJQUNwQjQwRCxFQUFTcnhELEtBQUssQ0FHWnhDLE1BQU9vVCxFQUFJMmdELEVBQWE5MEQsT0FBUzYwRCxFQUNqQ1EsU0FBUSxJQUVWUixHQUFpQlEsRUFBU3IxRCxRQUU1QjgwRCxFQUFhdnhELEtBQUksTUFBakJ1eEQsRUFBcUJPLEdBR3JCLElBQUlFLEVBQWdCTCxFQUFnQmwxRCxPQUFTLEVBQ3pDdzFELEVBQVVOLEVBQWdCSyxHQUNkLElBQVpDLElBRUZBLEVBQVVOLElBRFZLLElBS0YsSUFGQSxJQUFJRSxFQUFlWCxFQUFhOTBELE9BQVNvMUQsRUFBYSxFQUNsRE0sRUFBU1QsRUFDTlEsR0FBZ0IsR0FBRyxDQUN4QixJQUFNRSxFQUFjN3NELEtBQUsyQixJQUFJaXJELEVBQVFGLEdBQ3JDLFFBQW9DdnRELElBQWhDNnNELEVBQWFTLEdBR2YsTUFTRixHQVBBVCxFQUFhUyxHQUFlSyxjQUFjZCxFQUFhVyxHQUFlQyxFQUFTQyxFQUFhSCxFQUFVRyxFQUFhQSxHQUFhLEdBRWhILElBRGhCSCxHQUFXRyxLQUdUSCxFQUFVTixJQURWSyxJQUlhLElBRGZHLEdBQVVDLEdBQ1EsQ0FDaEJGLElBQ0EsSUFBTUksRUFBb0Ivc0QsS0FBS3dCLElBQUltckQsRUFBYyxHQUNqREMsR0FBUyxJQUFBSSw2QkFBNEJoQixFQUFjZSxFQUFtQnZ6RCxLQUFLMHdELFFBSy9FLElBQVN4MEQsRUFBSSxFQUFHQSxFQUFJczJELEVBQWE5MEQsT0FBUXhCLElBQ25DMDJELEVBQWdCMTJELEdBQUtrMUQsR0FDdkJvQixFQUFhdDJELEdBQUd1M0QsUUFBUWIsRUFBZ0IxMkQsR0FBSW8xRCxHQU1oRCxJQURBLElBQUllLEVBQXNCUyxFQUFhSixFQUNoQ0wsS0FBd0IsR0FDVixJQUFmcnlELEtBQUtpZ0IsTUFDSGpnQixLQUFLNlIsRUFBSXcvQyxFQUFVLEdBQ3JCcnhELEtBQUs2UixJQUNMN1IsS0FBS08sTUFBTUksUUFFWFgsS0FBS2lnQixRQUNMamdCLEtBQUtxQyxTQUlIckMsS0FBS2lnQixNQUFRelosS0FBSzJCLElBQUluSSxLQUFLTyxNQUFNd3dELFVBQVcvd0QsS0FBS08sTUFBTTdDLE9BQVM2MEQsR0FBaUJsQixJQUMvRXJ4RCxLQUFLaWdCLFFBQVVqZ0IsS0FBS3FDLE9BQ3RCckMsS0FBS3FDLFFBRVByQyxLQUFLaWdCLFNBSVhqZ0IsS0FBS3V0RCxPQUFTL21ELEtBQUsyQixJQUFJbkksS0FBS3V0RCxPQUFTdUYsRUFBWTl5RCxLQUFLaWdCLE1BQVFveEMsRUFBVSxLQU0xRSxHQUFJaUIsRUFBUzUwRCxPQUFTLEVBQUcsQ0FHdkIsSUFBTWcyRCxFQUErQixHQUcvQkMsRUFBOEIsR0FDcEMsSUFBU3ozRCxFQUFJLEVBQUdBLEVBQUk4RCxLQUFLTyxNQUFNN0MsT0FBUXhCLElBQ3JDeTNELEVBQWMxeUQsS0FBS2pCLEtBQUtPLE1BQU0rUSxJQUFJcFYsSUFFcEMsSUFBTTAzRCxFQUFzQjV6RCxLQUFLTyxNQUFNN0MsT0FFbkNtMkQsRUFBb0JELEVBQXNCLEVBQzFDRSxFQUFvQixFQUNwQkMsRUFBZXpCLEVBQVN3QixHQUM1Qjl6RCxLQUFLTyxNQUFNN0MsT0FBUzhJLEtBQUsyQixJQUFJbkksS0FBS08sTUFBTXd3RCxVQUFXL3dELEtBQUtPLE1BQU03QyxPQUFTNjBELEdBQ3ZFLElBQUl5QixFQUFxQixFQUN6QixJQUFTOTNELEVBQUlzSyxLQUFLMkIsSUFBSW5JLEtBQUtPLE1BQU13d0QsVUFBWSxFQUFHNkMsRUFBc0JyQixFQUFnQixHQUFJcjJELEdBQUssRUFBR0EsSUFDaEcsR0FBSTYzRCxHQUFnQkEsRUFBYXQxRCxNQUFRbzFELEVBQW9CRyxFQUFvQixDQUUvRSxJQUFLLElBQUlDLEVBQVFGLEVBQWFoQixTQUFTcjFELE9BQVMsRUFBR3UyRCxHQUFTLEVBQUdBLElBQzdEajBELEtBQUtPLE1BQU04VSxJQUFJblosSUFBSzYzRCxFQUFhaEIsU0FBU2tCLElBRTVDLzNELElBR0F3M0QsRUFBYXp5RCxLQUFLLENBQ2hCOFUsTUFBTzg5QyxFQUFvQixFQUMzQjl2QyxPQUFRZ3dDLEVBQWFoQixTQUFTcjFELFNBR2hDczJELEdBQXNCRCxFQUFhaEIsU0FBU3IxRCxPQUM1Q3EyRCxFQUFlekIsSUFBV3dCLFFBRTFCOXpELEtBQUtPLE1BQU04VSxJQUFJblosRUFBR3kzRCxFQUFjRSxNQUtwQyxJQUFJSyxFQUFxQixFQUN6QixJQUFTaDRELEVBQUl3M0QsRUFBYWgyRCxPQUFTLEVBQUd4QixHQUFLLEVBQUdBLElBQzVDdzNELEVBQWF4M0QsR0FBRzZaLE9BQVNtK0MsRUFDekJsMEQsS0FBS08sTUFBTTg0QyxnQkFBZ0IzbUMsS0FBS2doRCxFQUFheDNELElBQzdDZzRELEdBQXNCUixFQUFheDNELEdBQUc2bkIsT0FFeEMsSUFBTXl0QyxFQUFlaHJELEtBQUt3QixJQUFJLEVBQUc0ckQsRUFBc0JyQixFQUFnQnZ5RCxLQUFLTyxNQUFNd3dELFdBQzlFUyxFQUFlLEdBQ2pCeHhELEtBQUtPLE1BQU0rNEMsY0FBYzVtQyxLQUFLOCtDLEtBb0I3QixZQUFBcGdELHlCQUFQLFNBQWdDK2lELEVBQW1CcGpELEVBQXFCcWpELEdBQ3RFLFNBRHNFLElBQUFBLElBQUFBLEdBQUEsR0FDL0RyakQsR0FBYSxDQUNsQixJQUFNTSxFQUFPclIsS0FBS08sTUFBTStRLElBQUk2aUQsR0FDNUIsSUFBSzlpRCxFQUNILE1BQU8sRUFBRSxHQUFJLEdBR2YsSUFEQSxJQUFNLEVBQVMsRUFBY0EsRUFBS3ErQixtQkFBcUJyK0IsRUFBSzNULE9BQ25EeEIsRUFBSSxFQUFHQSxFQUFJLElBQVVBLEVBTTVCLEdBTEltVixFQUFLQyxJQUFJcFYsR0FBRyxFQUFBbTRELHlCQUdkdGpELEdBQWVNLEVBQUtDLElBQUlwVixHQUFHLEVBQUFvNEQsc0JBQXNCNTJELFFBQVUsR0FFekRxVCxFQUFjLEVBQ2hCLE1BQU8sQ0FBQ29qRCxFQUFXajRELEdBR3ZCaTRELElBRUYsTUFBTyxDQUFDQSxFQUFXLElBYWQsWUFBQS94RCw0QkFBUCxTQUFtQyt4RCxFQUFtQkMsRUFBb0J0aUMsRUFBc0JDLFFBQXRCLElBQUFELElBQUFBLEVBQUEsR0FDeEUsSUFBTXpnQixFQUFPclIsS0FBS08sTUFBTStRLElBQUk2aUQsR0FDNUIsT0FBSzlpRCxFQUdFQSxFQUFLMnpCLGtCQUFrQm92QixFQUFXdGlDLEVBQVVDLEdBRjFDLElBS0osWUFBQTJsQix1QkFBUCxTQUE4QjdsQyxHQUk1QixJQUhBLElBQUl2QyxFQUFRdUMsRUFDUjhsQyxFQUFPOWxDLEVBRUp2QyxFQUFRLEdBQUt0UCxLQUFLTyxNQUFNK1EsSUFBSWhDLEdBQVFtaUIsV0FDekNuaUIsSUFHRixLQUFPcW9DLEVBQU8sRUFBSTMzQyxLQUFLTyxNQUFNN0MsUUFBVXNDLEtBQUtPLE1BQU0rUSxJQUFJcW1DLEVBQU8sR0FBSWxtQixXQUMvRGttQixJQUVGLE1BQU8sQ0FBRXJvQyxNQUFLLEVBQUVxb0MsS0FBSSxJQU9mLFlBQUF2NEIsY0FBUCxTQUFxQmxqQixHQVVuQixJQVRJQSxNQUFBQSxFQUNHOEQsS0FBS2tyRCxLQUFLaHZELEtBQ2JBLEVBQUk4RCxLQUFLbXJELFNBQVNqdkQsS0FHcEI4RCxLQUFLa3JELEtBQU8sR0FDWmh2RCxFQUFJLEdBR0NBLEVBQUk4RCxLQUFLMHdELE1BQU94MEQsR0FBSzhELEtBQUttWSxnQkFBZ0JtQixXQUFXaTdDLGFBQzFEdjBELEtBQUtrckQsS0FBS2h2RCxJQUFLLEdBUVosWUFBQWl2RCxTQUFQLFNBQWdCdjVDLEdBSWQsSUFISUEsTUFBQUEsSUFDRkEsRUFBSTVSLEtBQUs0UixJQUVINVIsS0FBS2tyRCxPQUFPdDVDLElBQU1BLEVBQUksSUFDOUIsT0FBT0EsR0FBSzVSLEtBQUswd0QsTUFBUTF3RCxLQUFLMHdELE1BQVEsRUFBSTkrQyxFQUFJLEVBQUksRUFBSUEsR0FPakQsWUFBQSs0QyxTQUFQLFNBQWdCLzRDLEdBSWQsSUFISUEsTUFBQUEsSUFDRkEsRUFBSTVSLEtBQUs0UixJQUVINVIsS0FBS2tyRCxPQUFPdDVDLElBQU1BLEVBQUk1UixLQUFLMHdELFFBQ25DLE9BQU85K0MsR0FBSzVSLEtBQUswd0QsTUFBUTF3RCxLQUFLMHdELE1BQVEsRUFBSTkrQyxFQUFJLEVBQUksRUFBSUEsR0FHakQsWUFBQWlaLGFBQVAsU0FBb0JoWixHQUVsQixHQURBN1IsS0FBS3l3RCxhQUFjLE9BQ1Q5cUQsSUFBTmtNLEVBQ0YsSUFBSyxJQUFJM1YsRUFBSSxFQUFHQSxFQUFJOEQsS0FBS29vQixRQUFRMXFCLE9BQVF4QixJQUNuQzhELEtBQUtvb0IsUUFBUWxzQixHQUFHbVYsT0FBU1EsSUFDM0I3UixLQUFLb29CLFFBQVFsc0IsR0FBRzRELFVBQ2hCRSxLQUFLb29CLFFBQVE5WCxPQUFPcFUsSUFBSyxRQUd4QixDQUNMLElBQXFCLFVBQUE4RCxLQUFLb29CLFFBQUwsZUFBSixLQUNSdG9CLFVBRVRFLEtBQUtvb0IsUUFBVSxHQUVqQnBvQixLQUFLeXdELGFBQWMsR0FHZCxZQUFBcG9DLFVBQVAsU0FBaUJ4VyxHQUFqQixXQUNRKytCLEVBQVMsSUFBSSxFQUFBNGpCLE9BQU8zaUQsR0EwQjFCLE9BekJBN1IsS0FBS29vQixRQUFRbm5CLEtBQUsydkMsR0FDbEJBLEVBQU92eUMsU0FBUzJCLEtBQUtPLE1BQU0wdEMsUUFBTyxTQUFBbHFCLEdBQ2hDNnNCLEVBQU92L0IsTUFBUTBTLEVBRVg2c0IsRUFBT3YvQixLQUFPLEdBQ2hCdS9CLEVBQU85d0MsY0FHWDh3QyxFQUFPdnlDLFNBQVMyQixLQUFLTyxNQUFNazBELFVBQVMsU0FBQXhtRCxHQUM5QjJpQyxFQUFPdi9CLE1BQVFwRCxFQUFNOEgsUUFDdkI2NkIsRUFBT3YvQixNQUFRcEQsRUFBTThWLFlBR3pCNnNCLEVBQU92eUMsU0FBUzJCLEtBQUtPLE1BQU1tMEQsVUFBUyxTQUFBem1ELEdBRTlCMmlDLEVBQU92L0IsTUFBUXBELEVBQU04SCxPQUFTNjZCLEVBQU92L0IsS0FBT3BELEVBQU04SCxNQUFROUgsRUFBTThWLFFBQ2xFNnNCLEVBQU85d0MsVUFJTDh3QyxFQUFPdi9CLEtBQU9wRCxFQUFNOEgsUUFDdEI2NkIsRUFBT3YvQixNQUFRcEQsRUFBTThWLFlBR3pCNnNCLEVBQU92eUMsU0FBU3V5QyxFQUFPSSxXQUFVLFdBQU0sU0FBSzJqQixjQUFjL2pCLE9BQ25EQSxHQUdELFlBQUErakIsY0FBUixTQUFzQi9qQixHQUNmNXdDLEtBQUt5d0QsYUFDUnp3RCxLQUFLb29CLFFBQVE5WCxPQUFPdFEsS0FBS29vQixRQUFRblgsUUFBUTIvQixHQUFTLElBSS9DLFlBQUEzaEMsU0FBUCxTQUFnQm1sRCxFQUFvQnhrQixFQUFxQkMsRUFBbUIra0IsRUFBd0JDLEdBQ2xHLE9BQU8sSUFBSUMsRUFBcUI5MEQsS0FBTW8wRCxFQUFXeGtCLEVBQVlDLEVBQVUra0IsRUFBZUMsSUFFMUYsRUExbUJBLEdBQWEsRUFBQUUsT0FBQUEsRUF3bkJiLGlCQUdFLFdBQ1U3Z0MsRUFDQThnQyxFQUNBdmIsRUFDQXdiLEVBQ0FDLEVBQ0FDLFFBSEEsSUFBQTFiLElBQUFBLEVBQUEsUUFDQSxJQUFBd2IsSUFBQUEsRUFBb0IvZ0MsRUFBUTN6QixNQUFNN0MsYUFDbEMsSUFBQXczRCxJQUFBQSxFQUFBLFFBQ0EsSUFBQUMsSUFBQUEsRUFBQSxHQUxBLEtBQUFqaEMsUUFBQUEsRUFDQSxLQUFBOGdDLFdBQUFBLEVBQ0EsS0FBQXZiLFlBQUFBLEVBQ0EsS0FBQXdiLFVBQUFBLEVBQ0EsS0FBQUMsZUFBQUEsRUFDQSxLQUFBQyxhQUFBQSxFQUVKbjFELEtBQUt5NUMsWUFBYyxJQUNyQno1QyxLQUFLeTVDLFlBQWMsR0FFakJ6NUMsS0FBS2kxRCxVQUFZajFELEtBQUtrMEIsUUFBUTN6QixNQUFNN0MsU0FDdENzQyxLQUFLaTFELFVBQVlqMUQsS0FBS2swQixRQUFRM3pCLE1BQU03QyxRQUV0Q3NDLEtBQUtvMUQsU0FBV3AxRCxLQUFLeTVDLFlBMEJ6QixPQXZCUyxZQUFBdnFDLFFBQVAsV0FDRSxPQUFPbFAsS0FBS28xRCxTQUFXcDFELEtBQUtpMUQsV0FHdkIsWUFBQTlsRCxLQUFQLFdBQ0UsSUFBTUUsRUFBUXJQLEtBQUtrMEIsUUFBUXdqQix1QkFBdUIxM0MsS0FBS28xRCxVQUVuRC9sRCxFQUFNQyxNQUFRdFAsS0FBS3k1QyxZQUFjejVDLEtBQUtrMUQsaUJBQ3hDN2xELEVBQU1DLE1BQVF0UCxLQUFLeTVDLFlBQWN6NUMsS0FBS2sxRCxnQkFFcEM3bEQsRUFBTXNvQyxLQUFPMzNDLEtBQUtpMUQsVUFBWWoxRCxLQUFLbTFELGVBQ3JDOWxELEVBQU1zb0MsS0FBTzMzQyxLQUFLaTFELFVBQVlqMUQsS0FBS20xRCxjQUdyQzlsRCxFQUFNQyxNQUFROUksS0FBS3dCLElBQUlxSCxFQUFNQyxNQUFPLEdBQ3BDRCxFQUFNc29DLEtBQU9ueEMsS0FBSzJCLElBQUlrSCxFQUFNc29DLEtBQU0zM0MsS0FBS2swQixRQUFRM3pCLE1BQU03QyxRQUVyRCxJQURBLElBQUk2UixFQUFVLEdBQ0xyVCxFQUFJbVQsRUFBTUMsTUFBT3BULEdBQUttVCxFQUFNc29DLE9BQVF6N0MsRUFDM0NxVCxHQUFXdlAsS0FBS2swQixRQUFROXhCLDRCQUE0QmxHLEVBQUc4RCxLQUFLZzFELFlBRzlELE9BREFoMUQsS0FBS28xRCxTQUFXL2xELEVBQU1zb0MsS0FBTyxFQUN0QixDQUFFdG9DLE1BQUssRUFBRUUsUUFBTyxJQUUzQixFQTNDQSxHQUFhLEVBQUF1bEQscUJBQUFBLDJHQzVvQmIsYUFDQSxTQUNBLFNBQ0EsVUE0QmEsRUFBQS9wQyxrQkFBb0IzaEIsT0FBT0MsT0FBTyxJQUFJLEVBQUEreEIsZUFpQm5ELGlCQU1FLFdBQVlwc0IsRUFBY3FtRCxFQUFpQzVqQyxRQUFBLElBQUFBLElBQUFBLEdBQUEsUUFBQUEsVUFBQUEsRUFKakQsS0FBQTZqQyxVQUF1QyxHQUN2QyxLQUFBQyxlQUFtRCxHQUkzRHYxRCxLQUFLNC9DLE1BQVEsSUFBSUMsWUF4Q0gsRUF3Q2U3d0MsR0FFN0IsSUFEQSxJQUFNa3FCLEVBQU9tOEIsR0FBZ0IsRUFBQXA0QixTQUFTb3pCLGFBQWEsQ0FBQyxFQUFHLEVBQUFDLGVBQWdCLEVBQUFuRyxnQkFBaUIsRUFBQWhsQixpQkFDL0VqcEMsRUFBSSxFQUFHQSxFQUFJOFMsSUFBUTlTLEVBQzFCOEQsS0FBS3l6RCxRQUFRdjNELEVBQUdnOUIsR0FFbEJsNUIsS0FBS3RDLE9BQVNzUixFQXNYbEIsT0EvV1MsWUFBQXNDLElBQVAsU0FBV3lFLEdBQ1QsSUFBTXhHLEVBQVV2UCxLQUFLNC9DLE1BckRQLEVBcURhN3BDLEVBQW9CLEdBQ3pDeS9DLEVBQWUsUUFBVmptRCxFQUNYLE1BQU8sQ0FDTHZQLEtBQUs0L0MsTUF4RE8sRUF3REQ3cEMsRUFBb0IsR0FDcEIsUUFBVnhHLEVBQ0d2UCxLQUFLczFELFVBQVV2L0MsR0FDZixHQUFPLElBQUFnMEMscUJBQW9CeUwsR0FBTSxHQUNyQ2ptRCxHQUFXLEdBQ0EsUUFBVkEsRUFDR3ZQLEtBQUtzMUQsVUFBVXYvQyxHQUFPa2pDLFdBQVdqNUMsS0FBS3MxRCxVQUFVdi9DLEdBQU9yWSxPQUFTLEdBQ2hFODNELElBUUQsWUFBQW5nRCxJQUFQLFNBQVdVLEVBQWV0UyxHQUN4QnpELEtBQUs0L0MsTUF4RVMsRUF3RUg3cEMsRUFBb0IsR0FBV3RTLEVBQU0sRUFBQWd5RCxzQkFDNUNoeUQsRUFBTSxFQUFBNndELHNCQUFzQjUyRCxPQUFTLEdBQ3ZDc0MsS0FBS3MxRCxVQUFVdi9DLEdBQVN0UyxFQUFNLEdBQzlCekQsS0FBSzQvQyxNQTNFTyxFQTJFRDdwQyxFQUFvQixHQUF3QixRQUFSQSxFQUFvQ3RTLEVBQU0sRUFBQTR3RCx3QkFBMEIsSUFFbkhyMEQsS0FBSzQvQyxNQTdFTyxFQTZFRDdwQyxFQUFvQixHQUFnQnRTLEVBQU0sRUFBQTZ3RCxzQkFBc0JyYixXQUFXLEdBQU14MUMsRUFBTSxFQUFBNHdELHdCQUEwQixJQVF6SCxZQUFBaDBDLFNBQVAsU0FBZ0J0SyxHQUNkLE9BQU8vVixLQUFLNC9DLE1BdEZFLEVBc0ZJN3BDLEVBQW9CLElBQWlCLElBSWxELFlBQUE4L0IsU0FBUCxTQUFnQjkvQixHQUNkLE9BQXNELFNBQS9DL1YsS0FBSzQvQyxNQTNGRSxFQTJGSTdwQyxFQUFvQixJQUlqQyxZQUFBdkUsTUFBUCxTQUFhdUUsR0FDWCxPQUFPL1YsS0FBSzQvQyxNQWhHRSxFQWdHSTdwQyxFQUFvQixJQUlqQyxZQUFBMDVCLE1BQVAsU0FBYTE1QixHQUNYLE9BQU8vVixLQUFLNC9DLE1BckdFLEVBcUdJN3BDLEVBQW9CLElBUWpDLFlBQUF1MEMsV0FBUCxTQUFrQnYwQyxHQUNoQixPQUFzRCxRQUEvQy9WLEtBQUs0L0MsTUE5R0UsRUE4R0k3cEMsRUFBb0IsSUFRakMsWUFBQW12QixhQUFQLFNBQW9CbnZCLEdBQ2xCLElBQU14RyxFQUFVdlAsS0FBSzQvQyxNQXZIUCxFQXVIYTdwQyxFQUFvQixHQUMvQyxPQUFjLFFBQVZ4RyxFQUNLdlAsS0FBS3MxRCxVQUFVdi9DLEdBQU9rakMsV0FBV2o1QyxLQUFLczFELFVBQVV2L0MsR0FBT3JZLE9BQVMsR0FFeEQsUUFBVjZSLEdBSUYsWUFBQXEvQixXQUFQLFNBQWtCNzRCLEdBQ2hCLE9BQXNELFFBQS9DL1YsS0FBSzQvQyxNQWhJRSxFQWdJSTdwQyxFQUFvQixJQUlqQyxZQUFBczZCLFVBQVAsU0FBaUJ0NkIsR0FDZixJQUFNeEcsRUFBVXZQLEtBQUs0L0MsTUFySVAsRUFxSWE3cEMsRUFBb0IsR0FDL0MsT0FBYyxRQUFWeEcsRUFDS3ZQLEtBQUtzMUQsVUFBVXYvQyxHQUVWLFFBQVZ4RyxHQUNLLElBQUF3NkMscUJBQThCLFFBQVZ4NkMsR0FHdEIsSUFPRixZQUFBNnVCLFNBQVAsU0FBZ0Jyb0IsRUFBZW1qQixHQUM3QixJQUFNMFcsRUFySlEsRUFxSks3NUIsRUFVbkIsT0FUQW1qQixFQUFLM3BCLFFBQVV2UCxLQUFLNC9DLE1BQU1oUSxFQUFhLEdBQ3ZDMVcsRUFBS2x6QixHQUFLaEcsS0FBSzQvQyxNQUFNaFEsRUFBYSxHQUNsQzFXLEVBQUtuekIsR0FBSy9GLEtBQUs0L0MsTUFBTWhRLEVBQWEsR0FDZixRQUFmMVcsRUFBSzNwQixVQUNQMnBCLEVBQUt5VixhQUFlM3VDLEtBQUtzMUQsVUFBVXYvQyxJQUV2QixVQUFWbWpCLEVBQUtuekIsS0FDUG16QixFQUFLMHdCLFNBQVc1cEQsS0FBS3UxRCxlQUFleC9DLElBRS9CbWpCLEdBTUYsWUFBQXU2QixRQUFQLFNBQWUxOUMsRUFBZW1qQixHQUNULFFBQWZBLEVBQUszcEIsVUFDUHZQLEtBQUtzMUQsVUFBVXYvQyxHQUFTbWpCLEVBQUt5VixjQUVqQixVQUFWelYsRUFBS256QixLQUNQL0YsS0FBS3UxRCxlQUFleC9DLEdBQVNtakIsRUFBSzB3QixVQUVwQzVwRCxLQUFLNC9DLE1BNUtTLEVBNEtIN3BDLEVBQW9CLEdBQWdCbWpCLEVBQUszcEIsUUFDcER2UCxLQUFLNC9DLE1BN0tTLEVBNktIN3BDLEVBQW9CLEdBQVdtakIsRUFBS2x6QixHQUMvQ2hHLEtBQUs0L0MsTUE5S1MsRUE4S0g3cEMsRUFBb0IsR0FBV21qQixFQUFLbnpCLElBUTFDLFlBQUE0akQscUJBQVAsU0FBNEI1ekMsRUFBZTIvQyxFQUFtQnZ4RCxFQUFlNkIsRUFBWUQsRUFBWTR2RCxHQUMxRixVQUFMNXZELElBQ0YvRixLQUFLdTFELGVBQWV4L0MsR0FBUzQvQyxHQUUvQjMxRCxLQUFLNC9DLE1BMUxTLEVBMExIN3BDLEVBQW9CLEdBQWdCMi9DLEVBQWF2eEQsR0FBUyxHQUNyRW5FLEtBQUs0L0MsTUEzTFMsRUEyTEg3cEMsRUFBb0IsR0FBVy9QLEVBQzFDaEcsS0FBSzQvQyxNQTVMUyxFQTRMSDdwQyxFQUFvQixHQUFXaFEsR0FTckMsWUFBQXFrRCxtQkFBUCxTQUEwQnIwQyxFQUFlMi9DLEdBQ3ZDLElBQUlubUQsRUFBVXZQLEtBQUs0L0MsTUF0TUwsRUFzTVc3cEMsRUFBb0IsR0FDL0IsUUFBVnhHLEVBRUZ2UCxLQUFLczFELFVBQVV2L0MsS0FBVSxJQUFBZzBDLHFCQUFvQjJMLElBRS9CLFFBQVZubUQsR0FJRnZQLEtBQUtzMUQsVUFBVXYvQyxJQUFTLElBQUFnMEMscUJBQThCLFFBQVZ4NkMsSUFBb0MsSUFBQXc2QyxxQkFBb0IyTCxHQUNwR25tRCxJQUFXLFFBQ1hBLEdBQVcsU0FJWEEsRUFBVW1tRCxFQUFhLEdBQUssR0FFOUIxMUQsS0FBSzQvQyxNQXZOTyxFQXVORDdwQyxFQUFvQixHQUFnQnhHLElBSTVDLFlBQUEwNkMsWUFBUCxTQUFtQnBtRCxFQUFhdTZDLEVBQVdpWCxFQUF5QnRZLEdBUWxFLElBUEFsNUMsR0FBTzdELEtBQUt0QyxTQUcwQixJQUEzQnNDLEtBQUtxZ0IsU0FBU3hjLEVBQU0sSUFDN0I3RCxLQUFLMnBELHFCQUFxQjlsRCxFQUFNLEVBQUcsRUFBRyxHQUFHazVDLE1BQUFBLE9BQVMsRUFBVEEsRUFBVy8yQyxLQUFNLEdBQUcrMkMsTUFBQUEsT0FBUyxFQUFUQSxFQUFXaDNDLEtBQU0sR0FBR2czQyxNQUFBQSxPQUFTLEVBQVRBLEVBQVc2TSxXQUFZLElBQUksRUFBQTBGLGVBRzFHbFIsRUFBSXArQyxLQUFLdEMsT0FBU21HLEVBQUssQ0FFekIsSUFEQSxJQUFNcTFCLEVBQU8sSUFBSSxFQUFBK0QsU0FDUi9nQyxFQUFJOEQsS0FBS3RDLE9BQVNtRyxFQUFNdTZDLEVBQUksRUFBR2xpRCxHQUFLLElBQUtBLEVBQ2hEOEQsS0FBS3l6RCxRQUFRNXZELEVBQU11NkMsRUFBSWxpRCxFQUFHOEQsS0FBS28rQixTQUFTdjZCLEVBQU0zSCxFQUFHZzlCLElBRW5ELElBQVNoOUIsRUFBSSxFQUFHQSxFQUFJa2lELElBQUtsaUQsRUFDdkI4RCxLQUFLeXpELFFBQVE1dkQsRUFBTTNILEVBQUdtNUQsUUFHeEIsSUFBU241RCxFQUFJMkgsRUFBSzNILEVBQUk4RCxLQUFLdEMsU0FBVXhCLEVBQ25DOEQsS0FBS3l6RCxRQUFRdjNELEVBQUdtNUQsR0FLbUIsSUFBbkNyMUQsS0FBS3FnQixTQUFTcmdCLEtBQUt0QyxPQUFTLElBQzlCc0MsS0FBSzJwRCxxQkFBcUIzcEQsS0FBS3RDLE9BQVMsRUFBRyxFQUFHLEdBQUdxL0MsTUFBQUEsT0FBUyxFQUFUQSxFQUFXLzJDLEtBQU0sR0FBRysyQyxNQUFBQSxPQUFTLEVBQVRBLEVBQVdoM0MsS0FBTSxHQUFHZzNDLE1BQUFBLE9BQVMsRUFBVEEsRUFBVzZNLFdBQVksSUFBSSxFQUFBMEYsZ0JBSWpILFlBQUExRCxZQUFQLFNBQW1CL25ELEVBQWF1NkMsRUFBV2lYLEVBQXlCdFksR0FFbEUsR0FEQWw1QyxHQUFPN0QsS0FBS3RDLE9BQ1IwZ0QsRUFBSXArQyxLQUFLdEMsT0FBU21HLEVBQUssQ0FFekIsSUFEQSxJQUFNcTFCLEVBQU8sSUFBSSxFQUFBK0QsU0FDUi9nQyxFQUFJLEVBQUdBLEVBQUk4RCxLQUFLdEMsT0FBU21HLEVBQU11NkMsSUFBS2xpRCxFQUMzQzhELEtBQUt5ekQsUUFBUTV2RCxFQUFNM0gsRUFBRzhELEtBQUtvK0IsU0FBU3Y2QixFQUFNdTZDLEVBQUlsaUQsRUFBR2c5QixJQUVuRCxJQUFTaDlCLEVBQUk4RCxLQUFLdEMsT0FBUzBnRCxFQUFHbGlELEVBQUk4RCxLQUFLdEMsU0FBVXhCLEVBQy9DOEQsS0FBS3l6RCxRQUFRdjNELEVBQUdtNUQsUUFHbEIsSUFBU241RCxFQUFJMkgsRUFBSzNILEVBQUk4RCxLQUFLdEMsU0FBVXhCLEVBQ25DOEQsS0FBS3l6RCxRQUFRdjNELEVBQUdtNUQsR0FPaEJ4eEQsR0FBa0MsSUFBM0I3RCxLQUFLcWdCLFNBQVN4YyxFQUFNLElBQzdCN0QsS0FBSzJwRCxxQkFBcUI5bEQsRUFBTSxFQUFHLEVBQUcsR0FBR2s1QyxNQUFBQSxPQUFTLEVBQVRBLEVBQVcvMkMsS0FBTSxHQUFHKzJDLE1BQUFBLE9BQVMsRUFBVEEsRUFBV2gzQyxLQUFNLEdBQUdnM0MsTUFBQUEsT0FBUyxFQUFUQSxFQUFXNk0sV0FBWSxJQUFJLEVBQUEwRixlQUVuRixJQUF2QnR2RCxLQUFLcWdCLFNBQVN4YyxJQUFlN0QsS0FBS3NxRCxXQUFXem1ELElBQy9DN0QsS0FBSzJwRCxxQkFBcUI5bEQsRUFBSyxFQUFHLEdBQUdrNUMsTUFBQUEsT0FBUyxFQUFUQSxFQUFXLzJDLEtBQU0sR0FBRysyQyxNQUFBQSxPQUFTLEVBQVRBLEVBQVdoM0MsS0FBTSxHQUFHZzNDLE1BQUFBLE9BQVMsRUFBVEEsRUFBVzZNLFdBQVksSUFBSSxFQUFBMEYsZ0JBSXJHLFlBQUFoRSxhQUFQLFNBQW9CN3NELEVBQWVDLEVBQWEyMkQsRUFBeUJ0WSxHQVV2RSxJQVJJdCtDLEdBQXNDLElBQTdCdUIsS0FBS3FnQixTQUFTNWhCLEVBQVEsSUFDakN1QixLQUFLMnBELHFCQUFxQmxyRCxFQUFRLEVBQUcsRUFBRyxHQUFHcytDLE1BQUFBLE9BQVMsRUFBVEEsRUFBVy8yQyxLQUFNLEdBQUcrMkMsTUFBQUEsT0FBUyxFQUFUQSxFQUFXaDNDLEtBQU0sR0FBR2czQyxNQUFBQSxPQUFTLEVBQVRBLEVBQVc2TSxXQUFZLElBQUksRUFBQTBGLGVBRzVHNXdELEVBQU1zQixLQUFLdEMsUUFBcUMsSUFBM0JzQyxLQUFLcWdCLFNBQVMzaEIsRUFBTSxJQUMzQ3NCLEtBQUsycEQscUJBQXFCanJELEVBQUssRUFBRyxHQUFHcStDLE1BQUFBLE9BQVMsRUFBVEEsRUFBVy8yQyxLQUFNLEdBQUcrMkMsTUFBQUEsT0FBUyxFQUFUQSxFQUFXaDNDLEtBQU0sR0FBR2czQyxNQUFBQSxPQUFTLEVBQVRBLEVBQVc2TSxXQUFZLElBQUksRUFBQTBGLGVBR25HN3dELEVBQVFDLEdBQVFELEVBQVF1QixLQUFLdEMsUUFDbENzQyxLQUFLeXpELFFBQVFoMUQsSUFBUzQyRCxJQUluQixZQUFBOXhDLE9BQVAsU0FBY3ZVLEVBQWNxbUQsR0FDMUIsR0FBSXJtRCxJQUFTaFAsS0FBS3RDLE9BQWxCLENBR0EsR0FBSXNSLEVBQU9oUCxLQUFLdEMsT0FBUSxDQUN0QixJQUFNNk8sRUFBTyxJQUFJc3pDLFlBdFNMLEVBc1NpQjd3QyxHQUN6QmhQLEtBQUt0QyxTQXZTRyxFQXdTTnNSLEVBQW1CaFAsS0FBSzQvQyxNQUFNbGlELE9BQ2hDNk8sRUFBSzhJLElBQUlyVixLQUFLNC9DLE1BQU1NLFNBQVMsRUF6U3JCLEVBeVN3Qmx4QyxJQUVoQ3pDLEVBQUs4SSxJQUFJclYsS0FBSzQvQyxRQUdsQjUvQyxLQUFLNC9DLE1BQVFyekMsRUFDYixJQUFLLElBQUlyUSxFQUFJOEQsS0FBS3RDLE9BQVF4QixFQUFJOFMsSUFBUTlTLEVBQ3BDOEQsS0FBS3l6RCxRQUFRdjNELEVBQUdtNUQsUUFHbEIsR0FBSXJtRCxFQUFNLEVBQ0Z6QyxFQUFPLElBQUlzekMsWUFwVFAsRUFvVG1CN3dDLElBQ3hCcUcsSUFBSXJWLEtBQUs0L0MsTUFBTU0sU0FBUyxFQXJUbkIsRUFxVHNCbHhDLElBQ2hDaFAsS0FBSzQvQyxNQUFRcnpDLEVBRWIsSUFBTXFwRCxFQUFPeHNELE9BQU93c0QsS0FBSzUxRCxLQUFLczFELFdBQzlCLElBQVNwNUQsRUFBSSxFQUFHQSxFQUFJMDVELEVBQUtsNEQsT0FBUXhCLElBQUssQ0FDcEMsSUFBTW1ELEVBQU0rSCxTQUFTd3VELEVBQUsxNUQsR0FBSSxJQUMxQm1ELEdBQU8yUCxVQUNGaFAsS0FBS3MxRCxVQUFVajJELFNBSTFCVyxLQUFLNC9DLE1BQVEsSUFBSUMsWUFBWSxHQUM3QjcvQyxLQUFLczFELFVBQVksR0FHckJ0MUQsS0FBS3RDLE9BQVNzUixJQUlULFlBQUF3OEMsS0FBUCxTQUFZNkosR0FDVnIxRCxLQUFLczFELFVBQVksR0FDakJ0MUQsS0FBS3UxRCxlQUFpQixHQUN0QixJQUFLLElBQUlyNUQsRUFBSSxFQUFHQSxFQUFJOEQsS0FBS3RDLFNBQVV4QixFQUNqQzhELEtBQUt5ekQsUUFBUXYzRCxFQUFHbTVELElBS2IsWUFBQVEsU0FBUCxTQUFnQnhrRCxHQVNkLElBQUssSUFBTStULEtBUlBwbEIsS0FBS3RDLFNBQVcyVCxFQUFLM1QsT0FDdkJzQyxLQUFLNC9DLE1BQVEsSUFBSUMsWUFBWXh1QyxFQUFLdXVDLE9BR2xDNS9DLEtBQUs0L0MsTUFBTXZxQyxJQUFJaEUsRUFBS3V1QyxPQUV0QjUvQyxLQUFLdEMsT0FBUzJULEVBQUszVCxPQUNuQnNDLEtBQUtzMUQsVUFBWSxHQUNBamtELEVBQUtpa0QsVUFDcEJ0MUQsS0FBS3MxRCxVQUFVbHdDLEdBQU0vVCxFQUFLaWtELFVBQVVsd0MsR0FHdEMsSUFBSyxJQUFNQSxLQURYcGxCLEtBQUt1MUQsZUFBaUIsR0FDTGxrRCxFQUFLa2tELGVBQ3BCdjFELEtBQUt1MUQsZUFBZW53QyxHQUFNL1QsRUFBS2trRCxlQUFlbndDLEdBRWhEcGxCLEtBQUt5eEIsVUFBWXBnQixFQUFLb2dCLFdBSWpCLFlBQUE4b0IsTUFBUCxXQUNFLElBQU15WSxFQUFVLElBQUlsQyxFQUFXLEdBRy9CLElBQUssSUFBTTFyQyxLQUZYNHRDLEVBQVFwVCxNQUFRLElBQUlDLFlBQVk3L0MsS0FBSzQvQyxPQUNyQ29ULEVBQVF0MUQsT0FBU3NDLEtBQUt0QyxPQUNMc0MsS0FBS3MxRCxVQUNwQnRDLEVBQVFzQyxVQUFVbHdDLEdBQU1wbEIsS0FBS3MxRCxVQUFVbHdDLEdBRXpDLElBQUssSUFBTUEsS0FBTXBsQixLQUFLdTFELGVBQ3BCdkMsRUFBUXVDLGVBQWVud0MsR0FBTXBsQixLQUFLdTFELGVBQWVud0MsR0FHbkQsT0FEQTR0QyxFQUFRdmhDLFVBQVl6eEIsS0FBS3l4QixVQUNsQnVoQyxHQUdGLFlBQUF0akIsaUJBQVAsV0FDRSxJQUFLLElBQUl4ekMsRUFBSThELEtBQUt0QyxPQUFTLEVBQUd4QixHQUFLLElBQUtBLEVBQ3RDLEdBQWdELFFBQTNDOEQsS0FBSzQvQyxNQXJYRSxFQXFYSTFqRCxFQUFnQixHQUM5QixPQUFPQSxHQUFLOEQsS0FBSzQvQyxNQXRYUCxFQXNYYTFqRCxFQUFnQixJQUFpQixJQUc1RCxPQUFPLEdBR0YsWUFBQW8zRCxjQUFQLFNBQXFCd0MsRUFBaUIxQyxFQUFnQkYsRUFBaUJ4MUQsRUFBZ0JxNEQsR0FDckYsSUFBTUMsRUFBVUYsRUFBSWxXLE1BQ3BCLEdBQUltVyxFQUNGLElBQUssSUFBSTc4QixFQUFPeDdCLEVBQVMsRUFBR3c3QixHQUFRLEVBQUdBLElBQ3JDLElBQUssSUFBSWg5QixFQUFJLEVBQUdBLEVBaFlOLEVBZ1lxQkEsSUFDN0I4RCxLQUFLNC9DLE1BallHLEdBaVlJc1QsRUFBVWg2QixHQUFvQmg5QixHQUFLODVELEVBall2QyxHQWlZZ0Q1QyxFQUFTbDZCLEdBQW9CaDlCLFFBSXpGLElBQVNnOUIsRUFBTyxFQUFHQSxFQUFPeDdCLEVBQVF3N0IsSUFDaEMsSUFBU2g5QixFQUFJLEVBQUdBLEVBdFlOLEVBc1lxQkEsSUFDN0I4RCxLQUFLNC9DLE1BdllHLEdBdVlJc1QsRUFBVWg2QixHQUFvQmg5QixHQUFLODVELEVBdll2QyxHQXVZZ0Q1QyxFQUFTbDZCLEdBQW9CaDlCLEdBTTNGLElBQU0rNUQsRUFBa0I3c0QsT0FBT3dzRCxLQUFLRSxFQUFJUixXQUN4QyxJQUFTcDVELEVBQUksRUFBR0EsRUFBSSs1RCxFQUFnQnY0RCxPQUFReEIsSUFBSyxDQUMvQyxJQUFNbUQsRUFBTStILFNBQVM2dUQsRUFBZ0IvNUQsR0FBSSxJQUNyQ21ELEdBQU8rekQsSUFDVHB6RCxLQUFLczFELFVBQVVqMkQsRUFBTSt6RCxFQUFTRixHQUFXNEMsRUFBSVIsVUFBVWoyRCxNQUt0RCxZQUFBMmxDLGtCQUFQLFNBQXlCb3ZCLEVBQTRCdGlDLEVBQXNCQyxRQUFsRCxJQUFBcWlDLElBQUFBLEdBQUEsUUFBNEIsSUFBQXRpQyxJQUFBQSxFQUFBLFFBQXNCLElBQUFDLElBQUFBLEVBQWlCL3hCLEtBQUt0QyxRQUMzRjAyRCxJQUNGcmlDLEVBQVN2ckIsS0FBSzJCLElBQUk0cEIsRUFBUS94QixLQUFLMHZDLHFCQUdqQyxJQURBLElBQUk3b0MsRUFBUyxHQUNOaXJCLEVBQVdDLEdBQVEsQ0FDeEIsSUFBTXhpQixFQUFVdlAsS0FBSzQvQyxNQTVaVCxFQTRaZTl0QixFQUF1QixHQUM1QzBqQyxFQUFlLFFBQVZqbUQsRUFDWDFJLEdBQXFCLFFBQVYwSSxFQUFzQ3ZQLEtBQUtzMUQsVUFBVXhqQyxHQUFZLEdBQU8sSUFBQWk0QixxQkFBb0J5TCxHQUFNLEVBQUE1NkIscUJBQzdHOUksR0FBYXZpQixHQUFXLElBQXdCLEVBRWxELE9BQU8xSSxHQUVYLEVBbFlBLEdBQWEsRUFBQWlxRCxXQUFBQSx5RkMvQ2IsMEJBQStCemhELEVBQXFCNm1ELEdBQ2xELEdBQUk3bUQsRUFBTTVRLE1BQU1vVCxFQUFJeEMsRUFBTTNRLElBQUltVCxFQUM1QixNQUFNLElBQUkxVCxNQUFNLHFCQUFxQmtSLEVBQU0zUSxJQUFJa1QsRUFBQyxLQUFLdkMsRUFBTTNRLElBQUltVCxFQUFDLDZCQUE2QnhDLEVBQU01USxNQUFNbVQsRUFBQyxLQUFLdkMsRUFBTTVRLE1BQU1vVCxFQUFDLEtBRTlILE9BQU9xa0QsR0FBYzdtRCxFQUFNM1EsSUFBSW1ULEVBQUl4QyxFQUFNNVEsTUFBTW9ULElBQU14QyxFQUFNM1EsSUFBSWtULEVBQUl2QyxFQUFNNVEsTUFBTW1ULEVBQUksa0JDa01yRixTQUFnQjRoRCxFQUE0Qmp6RCxFQUFxQnJFLEVBQVc4UyxHQUUxRSxHQUFJOVMsSUFBTXFFLEVBQU03QyxPQUFTLEVBQ3ZCLE9BQU82QyxFQUFNckUsR0FBR3d6QyxtQkFLbEIsSUFBTXltQixHQUFlNTFELEVBQU1yRSxHQUFHb3VELFdBQVd0N0MsRUFBTyxJQUF1QyxJQUFoQ3pPLEVBQU1yRSxHQUFHbWtCLFNBQVNyUixFQUFPLEdBQzFFb25ELEVBQTJELElBQTdCNzFELEVBQU1yRSxFQUFJLEdBQUdta0IsU0FBUyxHQUMxRCxPQUFJODFDLEdBQWNDLEVBQ1RwbkQsRUFBTyxFQUVUQSxtTkF0TVQsd0NBQTZDek8sRUFBa0M4MUQsRUFBaUJqRixFQUFpQmtGLEVBQXlCaEYsR0FLeEksSUFGQSxJQUFNTyxFQUFxQixHQUVsQmhnRCxFQUFJLEVBQUdBLEVBQUl0UixFQUFNN0MsT0FBUyxFQUFHbVUsSUFBSyxDQUV6QyxJQUFJM1YsRUFBSTJWLEVBQ0ppMUMsRUFBV3ZtRCxFQUFNK1EsTUFBTXBWLEdBQzNCLEdBQUs0cUQsRUFBU3IxQixVQUFkLENBTUEsSUFEQSxJQUFNK2dDLEVBQTZCLENBQUNqeUQsRUFBTStRLElBQUlPLElBQ3ZDM1YsRUFBSXFFLEVBQU03QyxRQUFVb3BELEVBQVNyMUIsV0FDbEMrZ0MsRUFBYXZ4RCxLQUFLNmxELEdBQ2xCQSxFQUFXdm1ELEVBQU0rUSxNQUFNcFYsR0FLekIsR0FBSW82RCxHQUFtQnprRCxHQUFLeWtELEVBQWtCcDZELEVBQzVDMlYsR0FBSzJnRCxFQUFhOTBELE9BQVMsTUFEN0IsQ0FVQSxJQUpBLElBQUl1MUQsRUFBZ0IsRUFDaEJDLEVBQVVNLEVBQTRCaEIsRUFBY1MsRUFBZW9ELEdBQ25FbEQsRUFBZSxFQUNmQyxFQUFTLEVBQ05ELEVBQWVYLEVBQWE5MEQsUUFBUSxDQUN6QyxJQUFNNjRELEVBQXVCL0MsRUFBNEJoQixFQUFjVyxFQUFja0QsR0FDL0VHLEVBQW9CRCxFQUF1Qm5ELEVBQzNDcUQsRUFBcUJyRixFQUFVOEIsRUFDL0JHLEVBQWM3c0QsS0FBSzJCLElBQUlxdUQsRUFBbUJDLEdBRWhEakUsRUFBYVMsR0FBZUssY0FBY2QsRUFBYVcsR0FBZUMsRUFBUUYsRUFBU0csR0FBYSxJQUVwR0gsR0FBV0csS0FDS2pDLElBQ2Q2QixJQUNBQyxFQUFVLElBRVpFLEdBQVVDLEtBQ0trRCxJQUNicEQsSUFDQUMsRUFBUyxHQUlLLElBQVpGLEdBQW1DLElBQWxCRCxHQUMyQyxJQUExRFQsRUFBYVMsRUFBZ0IsR0FBRzV5QyxTQUFTK3dDLEVBQVUsS0FDckRvQixFQUFhUyxHQUFlSyxjQUFjZCxFQUFhUyxFQUFnQixHQUFJN0IsRUFBVSxFQUFHOEIsSUFBVyxHQUFHLEdBRXRHVixFQUFhUyxFQUFnQixHQUFHUSxRQUFRckMsRUFBVSxFQUFHRSxJQU0zRGtCLEVBQWFTLEdBQWUzSCxhQUFhNEgsRUFBUzlCLEVBQVNFLEdBSTNELElBREEsSUFBSW9GLEVBQWdCLEVBQ1gsRUFBSWxFLEVBQWE5MEQsT0FBUyxFQUFHLEVBQUksSUFDcEMsRUFBSXUxRCxHQUF3RCxJQUF2Q1QsRUFBYSxHQUFHOWlCLG9CQURFLElBRXpDZ25CLElBTUFBLEVBQWdCLElBQ2xCN0UsRUFBUzV3RCxLQUFLNFEsRUFBSTJnRCxFQUFhOTBELE9BQVNnNUQsR0FDeEM3RSxFQUFTNXdELEtBQUt5MUQsSUFHaEI3a0QsR0FBSzJnRCxFQUFhOTBELE9BQVMsSUFFN0IsT0FBT20wRCxHQVFULHVDQUE0Q3R4RCxFQUFrQ3N4RCxHQU01RSxJQUxBLElBQU1LLEVBQW1CLEdBRXJCeUUsRUFBb0IsRUFDcEJDLEVBQW9CL0UsRUFBUzhFLEdBQzdCRSxFQUFvQixFQUNmMzZELEVBQUksRUFBR0EsRUFBSXFFLEVBQU03QyxPQUFReEIsSUFDaEMsR0FBSTA2RCxJQUFzQjE2RCxFQUFHLENBQzNCLElBQU13NkQsRUFBZ0I3RSxJQUFXOEUsR0FHakNwMkQsRUFBTTY0QyxnQkFBZ0IxbUMsS0FBSyxDQUN6QnFELE1BQU83WixFQUFJMjZELEVBQ1g5eUMsT0FBUTJ5QyxJQUdWeDZELEdBQUt3NkQsRUFBZ0IsRUFDckJHLEdBQXFCSCxFQUNyQkUsRUFBb0IvRSxJQUFXOEUsUUFFL0J6RSxFQUFPanhELEtBQUsvRSxHQUdoQixNQUFPLENBQ0xnMkQsT0FBTSxFQUNORSxhQUFjeUUsSUFVbEIsc0NBQTJDdDJELEVBQWtDdTJELEdBRzNFLElBREEsSUFBTUMsRUFBK0IsR0FDNUI3NkQsRUFBSSxFQUFHQSxFQUFJNDZELEVBQVVwNUQsT0FBUXhCLElBQ3BDNjZELEVBQWU5MUQsS0FBS1YsRUFBTStRLElBQUl3bEQsRUFBVTU2RCxLQUkxQyxJQUFTQSxFQUFJLEVBQUdBLEVBQUk2NkQsRUFBZXI1RCxPQUFReEIsSUFDekNxRSxFQUFNOFUsSUFBSW5aLEVBQUc2NkQsRUFBZTc2RCxJQUU5QnFFLEVBQU03QyxPQUFTbzVELEVBQVVwNUQsUUFpQjNCLDBDQUErQzgwRCxFQUE0QjZELEVBQWlCakYsR0FTMUYsSUFSQSxJQUFNNEYsRUFBMkIsR0FDM0JDLEVBQWN6RSxFQUFhN2xELEtBQUksU0FBQ3MyQixFQUFHL21DLEdBQU0sT0FBQXMzRCxFQUE0QmhCLEVBQWN0MkQsRUFBR202RCxNQUFVYSxRQUFPLFNBQUN4TyxFQUFHeGpELEdBQU0sT0FBQXdqRCxFQUFJeGpELEtBSXZIa3VELEVBQVMsRUFDVCtELEVBQVUsRUFDVkMsRUFBaUIsRUFDZEEsRUFBaUJILEdBQWEsQ0FDbkMsR0FBSUEsRUFBY0csRUFBaUJoRyxFQUFTLENBRTFDNEYsRUFBZS8xRCxLQUFLZzJELEVBQWNHLEdBQ2xDLE1BRUZoRSxHQUFVaEMsRUFDVixJQUFNaUcsRUFBbUI3RCxFQUE0QmhCLEVBQWMyRSxFQUFTZCxHQUN4RWpELEVBQVNpRSxJQUNYakUsR0FBVWlFLEVBQ1ZGLEtBRUYsSUFBTUcsRUFBOEQsSUFBL0M5RSxFQUFhMkUsR0FBUzkyQyxTQUFTK3lDLEVBQVMsR0FDekRrRSxHQUNGbEUsSUFFRixJQUFNOWxCLEVBQWFncUIsRUFBZWxHLEVBQVUsRUFBSUEsRUFDaEQ0RixFQUFlLzFELEtBQUtxc0MsR0FDcEI4cEIsR0FBa0I5cEIsRUFHcEIsT0FBTzBwQixHQUdULHlsQkN0TUEsY0FDQSxVQVFBLGNBWUUsV0FDbUI3K0MsRUFDQTVLLEdBRm5CLE1BSUUsY0FBTyxZQUhVLEVBQUE0SyxnQkFBQUEsRUFDQSxFQUFBNUssZUFBQUEsRUFUWCxFQUFBMm1DLGtCQUFvQixFQUFLNzFDLFNBQVMsSUFBSSxFQUFBd1AsY0FZNUMsRUFBS29QLFVBaUdULE9BbEgrQixPQU03QixzQkFBVywrQkFBZ0IsS0FBM0IsV0FBMEYsT0FBT2pkLEtBQUtrMEMsa0JBQWtCam1DLHVDQWNqSCxZQUFBZ1AsTUFBUCxXQUNFamQsS0FBS3UzRCxRQUFVLElBQUksRUFBQXhDLFFBQU8sRUFBTS8wRCxLQUFLbVksZ0JBQWlCblksS0FBS3VOLGdCQUMzRHZOLEtBQUt1M0QsUUFBUXJHLG1CQUlibHhELEtBQUt3M0QsS0FBTyxJQUFJLEVBQUF6QyxRQUFPLEVBQU8vMEQsS0FBS21ZLGdCQUFpQm5ZLEtBQUt1TixnQkFDekR2TixLQUFLeXRCLGNBQWdCenRCLEtBQUt1M0QsUUFDMUJ2M0QsS0FBS2swQyxrQkFBa0J4aEMsS0FBSyxDQUMxQmliLGFBQWMzdEIsS0FBS3UzRCxRQUNuQkUsZUFBZ0J6M0QsS0FBS3czRCxPQUd2QngzRCxLQUFLb2YsaUJBTVAsc0JBQVcsa0JBQUcsS0FBZCxXQUNFLE9BQU9wZixLQUFLdzNELHNDQU1kLHNCQUFXLHFCQUFNLEtBQWpCLFdBQ0UsT0FBT3gzRCxLQUFLeXRCLCtDQU1kLHNCQUFXLHFCQUFNLEtBQWpCLFdBQ0UsT0FBT3p0QixLQUFLdTNELHlDQU1QLFlBQUFuTCxxQkFBUCxXQUNNcHNELEtBQUt5dEIsZ0JBQWtCenRCLEtBQUt1M0QsVUFHaEN2M0QsS0FBS3UzRCxRQUFRM2xELEVBQUk1UixLQUFLdzNELEtBQUs1bEQsRUFDM0I1UixLQUFLdTNELFFBQVExbEQsRUFBSTdSLEtBQUt3M0QsS0FBSzNsRCxFQUkzQjdSLEtBQUt3M0QsS0FBS2h2RCxRQUNWeEksS0FBS3l0QixjQUFnQnp0QixLQUFLdTNELFFBQzFCdjNELEtBQUtrMEMsa0JBQWtCeGhDLEtBQUssQ0FDMUJpYixhQUFjM3RCLEtBQUt1M0QsUUFDbkJFLGVBQWdCejNELEtBQUt3M0QsU0FPbEIsWUFBQXJMLGtCQUFQLFNBQXlCZ0YsR0FDbkJueEQsS0FBS3l0QixnQkFBa0J6dEIsS0FBS3czRCxPQUtoQ3gzRCxLQUFLdzNELEtBQUt0RyxpQkFBaUJDLEdBQzNCbnhELEtBQUt3M0QsS0FBSzVsRCxFQUFJNVIsS0FBS3UzRCxRQUFRM2xELEVBQzNCNVIsS0FBS3czRCxLQUFLM2xELEVBQUk3UixLQUFLdTNELFFBQVExbEQsRUFDM0I3UixLQUFLeXRCLGNBQWdCenRCLEtBQUt3M0QsS0FDMUJ4M0QsS0FBS2swQyxrQkFBa0J4aEMsS0FBSyxDQUMxQmliLGFBQWMzdEIsS0FBS3czRCxLQUNuQkMsZUFBZ0J6M0QsS0FBS3UzRCxZQVNsQixZQUFBaDBDLE9BQVAsU0FBYzZ0QyxFQUFpQkMsR0FDN0JyeEQsS0FBS3UzRCxRQUFRaDBDLE9BQU82dEMsRUFBU0MsR0FDN0JyeEQsS0FBS3czRCxLQUFLajBDLE9BQU82dEMsRUFBU0MsSUFPckIsWUFBQWp5QyxjQUFQLFNBQXFCbGpCLEdBQ25COEQsS0FBS3UzRCxRQUFRbjRDLGNBQWNsakIsR0FDM0I4RCxLQUFLdzNELEtBQUtwNEMsY0FBY2xqQixJQUU1QixFQWxIQSxDQU5BLE9BTStCMkcsWUFBbEIsRUFBQTYwRCxVQUFBQSx5akJDVmIsYUFDQSxTQUNBLFVBS0EsZ0ZBUVMsRUFBQW5vRCxRQUFVLEVBQ1YsRUFBQXZKLEdBQUssRUFDTCxFQUFBRCxHQUFLLEVBQ0wsRUFBQTZqRCxTQUEyQixJQUFJLEVBQUEwRixjQUMvQixFQUFBM2dCLGFBQWUsS0FvRXhCLE9BaEY4QixPQUVkLEVBQUEwaEIsYUFBZCxTQUEyQjVzRCxHQUN6QixJQUFNazBELEVBQU0sSUFBSTE2QixFQUVoQixPQURBMDZCLEVBQUk5b0IsZ0JBQWdCcHJDLEdBQ2JrMEQsR0FTRixZQUFBL29CLFdBQVAsV0FDRSxPQUFzQixRQUFmNXVDLEtBQUt1UCxTQUdQLFlBQUE4USxTQUFQLFdBQ0UsT0FBT3JnQixLQUFLdVAsU0FBVyxJQUdsQixZQUFBb3FCLFNBQVAsV0FDRSxPQUFtQixRQUFmMzVCLEtBQUt1UCxRQUNBdlAsS0FBSzJ1QyxhQUVLLFFBQWYzdUMsS0FBS3VQLFNBQ0EsSUFBQXc2QyxxQkFBbUMsUUFBZi9wRCxLQUFLdVAsU0FFM0IsSUFRRixZQUFBc3JCLFFBQVAsV0FDRSxPQUFRNzZCLEtBQUs0dUMsYUFDVDV1QyxLQUFLMnVDLGFBQWFzSyxXQUFXajVDLEtBQUsydUMsYUFBYWp4QyxPQUFTLEdBQ3pDLFFBQWZzQyxLQUFLdVAsU0FHSixZQUFBcy9CLGdCQUFQLFNBQXVCcHJDLEdBQ3JCekQsS0FBS2dHLEdBQUt2QyxFQUFNLEVBQUFneUQsc0JBQ2hCejFELEtBQUsrRixHQUFLLEVBQ1YsSUFBSTZ4RCxHQUFXLEVBRWYsR0FBSW4wRCxFQUFNLEVBQUE2d0Qsc0JBQXNCNTJELE9BQVMsRUFDdkNrNkQsR0FBVyxPQUVSLEdBQTJDLElBQXZDbjBELEVBQU0sRUFBQTZ3RCxzQkFBc0I1MkQsT0FBYyxDQUNqRCxJQUFNczVCLEVBQU92ekIsRUFBTSxFQUFBNndELHNCQUFzQnJiLFdBQVcsR0FHcEQsR0FBSSxPQUFVamlCLEdBQVFBLEdBQVEsTUFBUSxDQUNwQyxJQUFNNDJCLEVBQVNucUQsRUFBTSxFQUFBNndELHNCQUFzQnJiLFdBQVcsR0FDbEQsT0FBVTJVLEdBQVVBLEdBQVUsTUFDaEM1dEQsS0FBS3VQLFFBQTZCLE1BQWpCeW5CLEVBQU8sT0FBa0I0MkIsRUFBUyxNQUFTLE1BQVlucUQsRUFBTSxFQUFBNHdELHdCQUEwQixHQUd4R3VELEdBQVcsT0FJYkEsR0FBVyxPQUliNTNELEtBQUt1UCxRQUFVOUwsRUFBTSxFQUFBNndELHNCQUFzQnJiLFdBQVcsR0FBTXgxQyxFQUFNLEVBQUE0d0Qsd0JBQTBCLEdBRTFGdUQsSUFDRjUzRCxLQUFLMnVDLGFBQWVsckMsRUFBTSxFQUFBNndELHNCQUMxQnQwRCxLQUFLdVAsUUFBVSxRQUE0QjlMLEVBQU0sRUFBQTR3RCx3QkFBMEIsS0FJeEUsWUFBQXZsQixjQUFQLFdBQ0UsTUFBTyxDQUFDOXVDLEtBQUtnRyxHQUFJaEcsS0FBSzI1QixXQUFZMzVCLEtBQUtxZ0IsV0FBWXJnQixLQUFLNjZCLFlBRTVELEVBaEZBLENBQThCLEVBQUFPLGVBQWpCLEVBQUE2QixTQUFBQSw2VENSQSxFQUFBeEMsY0FBZ0IsSUFDaEIsRUFBQW85QixhQUFlLElBQWEsRUFBQXA5QixlQUFpQixFQUU3QyxFQUFBZzdCLHFCQUF1QixFQUN2QixFQUFBbkIscUJBQXVCLEVBQ3ZCLEVBQUFELHNCQUF3QixFQUN4QixFQUFBaEYscUJBQXVCLEVBT3ZCLEVBQUFpQixlQUFpQixHQUNqQixFQUFBbkcsZ0JBQWtCLEVBQ2xCLEVBQUFobEIsZUFBaUIsRUFPakIsRUFBQXZLLHFCQUF1QixJQUN2QixFQUFBNDFCLHNCQUF3QixFQUN4QixFQUFBMTFCLHFCQUF1Qix5akJDeEJwQyxjQUlBLGNBV0UsV0FDU3pwQixHQURULE1BR0UsY0FBTyxZQUZBLEVBQUFBLEtBQUFBLEVBVEQsRUFBQW94QixJQUFjK3hCLEVBQU9zRCxVQUN0QixFQUFBam5CLFlBQXNCLEVBSXJCLEVBQUFPLFdBQWEsSUFBSSxFQUFBdmpDLGVBbUIzQixPQTNCNEIsT0FNMUIsc0JBQVcsaUJBQUUsS0FBYixXQUEwQixPQUFPN04sS0FBS3lpQyxxQ0FHdEMsc0JBQVcsd0JBQVMsS0FBcEIsV0FBdUMsT0FBT3ppQyxLQUFLb3hDLFdBQVduakMsdUNBUXZELFlBQUFuTyxRQUFQLFdBQ01FLEtBQUs2d0MsYUFHVDd3QyxLQUFLNndDLFlBQWEsRUFDbEI3d0MsS0FBS3FSLE1BQVEsRUFFYnJSLEtBQUtveEMsV0FBVzErQixPQUNoQixZQUFNNVMsUUFBTyxhQXhCQSxFQUFBZzRELFFBQVUsRUEwQjNCLEVBM0JBLENBSEEsT0FHNEJqMUQsWUFBZixFQUFBMnhELE9BQUFBLHFHQ0dBLEVBQUFwTSxTQUFvRCxHQUtwRCxFQUFBNkQsZ0JBQXdDLEVBQUE3RCxTQUFZLEVBWWpFLEVBQUFBLFNBQUEsR0FBZ0IsQ0FDZCxJQUFLLElBQ0wsRUFBSyxJQUNMLEVBQUssSUFDTCxFQUFLLElBQ0wsRUFBSyxJQUNMLEVBQUssSUFDTCxFQUFLLElBQ0wsRUFBSyxJQUNMLEVBQUssSUFDTCxFQUFLLElBQ0wsRUFBSyxJQUNMLEVBQUssSUFDTCxFQUFLLElBQ0wsRUFBSyxJQUNMLEVBQUssSUFDTCxFQUFLLElBQ0wsRUFBSyxJQUNMLEVBQUssSUFDTCxFQUFLLElBQ0wsRUFBSyxJQUNMLEVBQUssSUFDTCxFQUFLLElBQ0wsRUFBSyxJQUNMLEVBQUssSUFDTCxFQUFLLElBQ0wsRUFBSyxJQUNMLEVBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLEtBUVAsRUFBQUEsU0FBQSxFQUFnQixDQUNkLElBQUssS0FPUCxFQUFBQSxTQUFBLE9BQWdCemlELEVBT2hCLEVBQUF5aUQsU0FBQSxHQUFnQixDQUNkLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxLQUNMLEtBQU0sSUFDTixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxLQVFQLEVBQUFBLFNBQUEyUCxFQUNBLEVBQUEzUCxTQUFBLEdBQWdCLENBQ2QsSUFBSyxJQUNMLEtBQU0sSUFDTixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLEtBUVAsRUFBQUEsU0FBQSxFQUFnQixDQUNkLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLEtBQU0sSUFDTixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxLQVFQLEVBQUFBLFNBQUEsRUFBZ0IsQ0FDZCxJQUFLLElBQ0wsSUFBSyxJQUNMLEtBQU0sSUFDTixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLEtBUVAsRUFBQUEsU0FBQSxFQUFnQixDQUNkLElBQUssSUFDTCxJQUFLLElBQ0wsS0FBTSxJQUNOLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLEtBUVAsRUFBQUEsU0FBQSxFQUFnQixDQUNkLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLEtBQU0sSUFDTixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssS0FRUCxFQUFBQSxTQUFBLEVBQ0EsRUFBQUEsU0FBQSxHQUFnQixDQUNkLElBQUssSUFDTCxJQUFLLElBQ0wsS0FBTSxJQUNOLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssS0FRUCxFQUFBQSxTQUFBLEVBQWdCLENBQ2QsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsS0FBTSxJQUNOLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssS0FRUCxFQUFBQSxTQUFBLEVBQ0EsRUFBQUEsU0FBQSxHQUFnQixDQUNkLElBQUssSUFDTCxJQUFLLElBQ0wsS0FBTSxJQUNOLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssS0FRUCxFQUFBQSxTQUFBLEtBQWdCLENBQ2QsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsS0FBTSxJQUNOLElBQUssSUFDTCxJQUFLLElBRUwsRUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLG1CQzFLUCxJQUFpQnpCLEVBM0VBN29DLHFFQUFBQSxFQUFBLEVBQUFBLEtBQUEsRUFBQUEsR0FBRSxLQUVKazZDLElBQU0sS0FFTixFQUFBQyxJQUFNLElBRU4sRUFBQUMsSUFBTSxJQUVOLEVBQUF2dUMsSUFBTSxJQUVOLEVBQUF3dUMsSUFBTSxJQUVOLEVBQUFDLElBQU0sSUFFTixFQUFBQyxJQUFNLElBRU4sRUFBQXA2QyxJQUFNLElBRU4sRUFBQWtvQyxHQUFNLEtBRU4sRUFBQUUsR0FBTSxLQUVOLEVBQUFQLEdBQU0sS0FFTixFQUFBRSxHQUFNLEtBRU4sRUFBQUMsR0FBTSxLQUVOLEVBQUFyOEIsR0FBTSxLQUVOLEVBQUEyOEIsR0FBTSxJQUVOLEVBQUFFLEdBQU0sSUFFTixFQUFBNlIsSUFBTSxJQUVOLEVBQUFDLElBQU0sSUFFTixFQUFBQyxJQUFNLElBRU4sRUFBQUMsSUFBTSxJQUVOLEVBQUFDLElBQU0sSUFFTixFQUFBQyxJQUFNLElBRU4sRUFBQUMsSUFBTSxJQUVOLEVBQUFDLElBQU0sSUFFTixFQUFBQyxJQUFNLElBRU4sRUFBQUMsR0FBTSxJQUVOLEVBQUFDLElBQU0sSUFFTixFQUFBajdDLElBQU0sSUFFTixFQUFBazdDLEdBQU0sSUFFTixFQUFBQyxHQUFNLElBRU4sRUFBQUMsR0FBTSxJQUVOLEVBQUFDLEdBQU0sSUFFTixFQUFBQyxHQUFNLElBRU4sRUFBQUMsSUFBTSxLQU9KM1MsRUFBQSxFQUFBQSxLQUFBLEVBQUFBLEdBQUUsS0FFSjRTLElBQU0sSUFFTixFQUFBQyxJQUFNLElBRU4sRUFBQUMsSUFBTSxJQUVOLEVBQUFDLElBQU0sSUFFTixFQUFBOVMsSUFBTSxJQUVOLEVBQUFDLElBQU0sSUFFTixFQUFBOFMsSUFBTSxJQUVOLEVBQUFDLElBQU0sSUFFTixFQUFBN1MsSUFBTSxJQUVOLEVBQUE4UyxJQUFNLElBRU4sRUFBQUMsSUFBTSxJQUVOLEVBQUFDLElBQU0sSUFFTixFQUFBQyxJQUFNLElBRU4sRUFBQUMsR0FBSyxJQUVMLEVBQUFDLElBQU0sSUFFTixFQUFBQyxJQUFNLElBRU4sRUFBQUMsSUFBTSxJQUVOLEVBQUFDLElBQU0sSUFFTixFQUFBQyxJQUFNLElBRU4sRUFBQUMsSUFBTSxJQUVOLEVBQUFDLElBQU0sSUFFTixFQUFBQyxHQUFLLElBRUwsRUFBQUMsSUFBTSxJQUVOLEVBQUFDLElBQU0s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dTlDLEVBQVksR0FBSyxJQUVuQyxFQUFBeDlDLEdBQUdDLElBQU0sS0FFeEIsTUFDRixLQUFLLElBRURsWCxFQUFPeEgsSUFETGk4RCxFQUNXLEVBQUF4OUMsR0FBR0MsSUFBTSxPQUFTdTlDLEVBQVksR0FBSyxJQUVuQyxFQUFBeDlDLEdBQUdDLElBQU0sS0FFeEIsTUFDRixLQUFLLElBRURsWCxFQUFPeEgsSUFETGk4RCxFQUNXLEVBQUF4OUMsR0FBR0MsSUFBTSxPQUFTdTlDLEVBQVksR0FBSyxJQUVuQyxFQUFBeDlDLEdBQUdDLElBQU0sS0FFeEIsTUFDRixLQUFLLElBRURsWCxFQUFPeEgsSUFETGk4RCxFQUNXLEVBQUF4OUMsR0FBR0MsSUFBTSxRQUFVdTlDLEVBQVksR0FBSyxJQUVwQyxFQUFBeDlDLEdBQUdDLElBQU0sT0FFeEIsTUFDRixLQUFLLElBRURsWCxFQUFPeEgsSUFETGk4RCxFQUNXLEVBQUF4OUMsR0FBR0MsSUFBTSxRQUFVdTlDLEVBQVksR0FBSyxJQUVwQyxFQUFBeDlDLEdBQUdDLElBQU0sT0FFeEIsTUFDRixLQUFLLElBRURsWCxFQUFPeEgsSUFETGk4RCxFQUNXLEVBQUF4OUMsR0FBR0MsSUFBTSxRQUFVdTlDLEVBQVksR0FBSyxJQUVwQyxFQUFBeDlDLEdBQUdDLElBQU0sT0FFeEIsTUFDRixLQUFLLElBRURsWCxFQUFPeEgsSUFETGk4RCxFQUNXLEVBQUF4OUMsR0FBR0MsSUFBTSxRQUFVdTlDLEVBQVksR0FBSyxJQUVwQyxFQUFBeDlDLEdBQUdDLElBQU0sT0FFeEIsTUFDRixLQUFLLElBRURsWCxFQUFPeEgsSUFETGk4RCxFQUNXLEVBQUF4OUMsR0FBR0MsSUFBTSxRQUFVdTlDLEVBQVksR0FBSyxJQUVwQyxFQUFBeDlDLEdBQUdDLElBQU0sT0FFeEIsTUFDRixLQUFLLElBRURsWCxFQUFPeEgsSUFETGk4RCxFQUNXLEVBQUF4OUMsR0FBR0MsSUFBTSxRQUFVdTlDLEVBQVksR0FBSyxJQUVwQyxFQUFBeDlDLEdBQUdDLElBQU0sT0FFeEIsTUFDRixLQUFLLElBRURs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LEdBRVgsRUFqT0EsR0FBYSxFQUFBdXJDLFlBQUFBLHFGQ25IYixJQTBESXViLEVBMURKLFVBSU1DLEVBQWdCLENBQ3BCLENBQUMsSUFBUSxLQUFTLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUM3QyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFDN0MsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQzdDLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUM3QyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFDN0MsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQzdDLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUM3QyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFDN0MsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQzdDLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUM3QyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFDN0MsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQzdDLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUM3QyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFDN0MsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQzdDLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUM3QyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFDN0MsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQzdDLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUM3QyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFDN0MsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQzdDLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUM3QyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFDN0MsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQzdDLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUM3QyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFDN0MsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQzdDLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUM3QyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFDN0MsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQzdDLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUM3QyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFDN0MsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQzdDLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUM3QyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFDN0MsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQzdDLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUM3QyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFBUyxDQUFDLEtBQVEsTUFDN0MsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQVMsQ0FBQyxLQUFRLE1BQzdDLENBQUMsS0FBUSxNQUFTLENBQUMsS0FBUSxNQUFTLENBQUMsTUFBUSxPQUM3QyxDQUFDLE1BQVEsT0FBUyxDQUFDLE1BQVEsT0FBUyxDQUFDLE1BQVEsT0FDN0MsQ0FBQyxNQUFRLE9BQVMsQ0FBQyxNQUFRLE9BQVMsQ0FBQyxNQUFRLE9BQzdDLENBQUMsTUFBUSxPQUFTLENBQUMsTUFBUSxPQUFTLENBQUMsTUFBUSxRQUV6Q0MsRUFBaUIsQ0FDckIsQ0FBQyxNQUFTLE9BQVUsQ0FBQyxNQUFTLE9BQVUsQ0FBQyxNQUFTLE9BQ2xELENBQUMsTUFBUyxPQUFVLENBQUMsTUFBUyxPQUFVLENBQUMsT0FBUyxRQUNsRCxDQUFDLE9BQVMsUUFBVSxDQUFDLE9BQVMsUUFBVSxDQUFDLE9BQVMsUUFDbEQsQ0FBQyxPQUFTLFFBQVUsQ0FBQyxPQUFTLFFBQVUsQ0FBQyxPQUFTLFFBQ2xELENBQUMsT0FBUyxTQTBCWixhQUdFLGFBRUUsR0FKYyxLQUFBQyxRQUFVLEtBSW5CSCxFQUFPLENBQ1ZBLEVBQVEsSUFBSXBqQixXQUFXLFFBQ3ZCLElBQUF3UyxNQUFLNFEsRUFBTyxHQUNaQSxFQUFNLEdBQUssR0FFWCxJQUFBNVEsTUFBSzRRLEVBQU8sRUFBRyxFQUFHLEtBQ2xCLElBQUE1USxNQUFLNFEsRUFBTyxFQUFHLElBQU0sTUFJckIsSUFBQTVRLE1BQUs0USxFQUFPLEVBQUcsS0FBUSxNQUN2QkEsRUFBTSxNQUFVLEVBQ2hCQSxFQUFNLE1BQVUsR0FDaEIsSUFBQTVRLE1BQUs0USxFQUFPLEVBQUcsTUFBUSxPQUN2QkEsRUFBTSxPQUFVLEdBRWhCLElBQUE1USxNQUFLNFEsRUFBTyxFQUFHLE1BQVEsUUFDdkIsSUFBQTVRLE1BQUs0USxFQUFPLEVBQUcsTUFBUSxRQUN2QixJQUFBNVEsTUFBSzRRLEVBQU8sRUFBRyxNQUFRLFFBQ3ZCLElBQUE1USxNQUFLNFEsRUFBTyxFQUFHLE1BQVEsUUFDdkIsSUFBQTVRLE1BQUs0USxFQUFPLEVBQUcsTUFBUSxRQUN2QixJQUFBNVEsTUFBSzRRLEVBQU8sRUFBRyxNQUFRLE9BT3ZCLElBQUssSUFBSTUyRCxFQUFJLEVBQUdBLEVBQUk2MkQsRUFBYzMrRCxTQUFVOEgsR0FDMUMsSUFBQWdtRCxNQUFLNFEsRUFBTyxFQUFHQyxFQUFjNzJELEdBQUcsR0FBSTYyRCxFQUFjNzJELEdBQUcsR0FBSyxJQWFsRSxPQVJTLFlBQUFxa0QsUUFBUCxTQUFlMlMsR0FDYixPQUFJQSxFQUFNLEdBQVcsRUFDakJBLEVBQU0sSUFBWSxFQUNsQkEsRUFBTSxNQUFjSixFQUFNSSxHQTlEbEMsU0FBa0JDLEVBQWFsd0QsR0FDN0IsSUFFSW13RCxFQUZBdjBELEVBQU0sRUFDTkgsRUFBTXVFLEVBQUs3TyxPQUFTLEVBRXhCLEdBQUkrK0QsRUFBTWx3RCxFQUFLLEdBQUcsSUFBTWt3RCxFQUFNbHdELEVBQUt2RSxHQUFLLEdBQ3RDLE9BQU8sRUFFVCxLQUFPQSxHQUFPRyxHQUVaLEdBQUlzMEQsRUFBTWx3RCxFQURWbXdELEVBQU92MEQsRUFBTUgsR0FBUSxHQUNELEdBQ2xCRyxFQUFNdTBELEVBQU0sTUFDUCxNQUFJRCxFQUFNbHdELEVBQUttd0QsR0FBSyxJQUd6QixPQUFPLEVBRlAxMEQsRUFBTTAwRCxFQUFNLEVBS2hCLE9BQU8sRUE4Q0RDLENBQVNILEVBQUtGLEdBQXdCLEVBQ3JDRSxHQUFPLFFBQVdBLEdBQU8sUUFBYUEsR0FBTyxRQUFXQSxHQUFPLE9BQWlCLEVBQzlFLEdBRVgsRUEvQ0EsR0FBYSxFQUFBSSxVQUFBQSxzRkNyRWIsSUFrQk1DLEVBQTJELG9CQUFuQkMsZUFDMUMsU0FBQ0MsR0FBcUJwVSxRQUFRcVUsVUFBVWx6QixLQUFLaXpCLElBQzdDRCxlQUdKLGFBUUUsV0FBb0JHLEdBQUEsS0FBQUEsUUFBQUEsRUFQWixLQUFBL2dCLGFBQXdDLEdBQ3hDLEtBQUFnaEIsV0FBMkMsR0FDM0MsS0FBQUMsYUFBZSxFQUNmLEtBQUFDLGNBQWdCLEVBQ2hCLEtBQUFDLGdCQUFpQixFQUNqQixLQUFBQyxXQUFhLEVBa0x2QixPQTNLUyxZQUFBOWdCLFVBQVAsU0FBaUJqd0MsRUFBMkJrd0MsR0FJMUMsUUFBMkI5MkMsSUFBdkI4MkMsR0FBb0N6OEMsS0FBS3M5RCxXQUFhN2dCLEVBR3hEejhDLEtBQUtzOUQsV0FBYSxPQVdwQixHQVBBdDlELEtBQUttOUQsY0FBZ0I1d0QsRUFBSzdPLE9BQzFCc0MsS0FBS2s4QyxhQUFhajdDLEtBQUtzTCxHQUN2QnZNLEtBQUtrOUQsV0FBV2o4RCxVQUFLMEUsR0FHckIzRixLQUFLczlELGNBRUR0OUQsS0FBS3E5RCxlQUFULENBU0EsSUFBSUUsRUFDSixJQVBBdjlELEtBQUtxOUQsZ0JBQWlCLEVBT2ZFLEVBQVF2OUQsS0FBS2s4QyxhQUFhcjdDLFNBQVMsQ0FDeENiLEtBQUtpOUQsUUFBUU0sR0FDYixJQUFNUixFQUFLLzhELEtBQUtrOUQsV0FBV3I4RCxRQUN2Qms4RCxHQUFJQSxJQUlWLzhELEtBQUttOUQsYUFBZSxFQUNwQm45RCxLQUFLbzlELGNBQWdCLFdBR3JCcDlELEtBQUtxOUQsZ0JBQWlCLEVBQ3RCcjlELEtBQUtzOUQsV0FBYSxJQUdiLFlBQUEvK0MsTUFBUCxTQUFhaFMsRUFBMkJtcEIsR0FBeEMsV0FDRSxHQUFJMTFCLEtBQUttOUQsYUFoRmEsSUFpRnBCLE1BQU0sSUFBSWgvRCxNQUFNLCtEQUliNkIsS0FBS2s4QyxhQUFheCtDLFNBQ3JCc0MsS0FBS285RCxjQUFnQixFQUNyQnQ3RCxZQUFXLFdBQU0sU0FBSzA3RCxrQkFHeEJ4OUQsS0FBS205RCxjQUFnQjV3RCxFQUFLN08sT0FDMUJzQyxLQUFLazhDLGFBQWFqN0MsS0FBS3NMLEdBQ3ZCdk0sS0FBS2s5RCxXQUFXajhELEtBQUt5MEIsSUErQmIsWUFBQThuQyxZQUFWLFNBQXNCQyxFQUFzQnJoQixHQUE1QyxnQkFBc0IsSUFBQXFoQixJQUFBQSxFQUFBLFFBQXNCLElBQUFyaEIsSUFBQUEsR0FBQSxHQUUxQyxJQURBLElBQU1zaEIsRUFBWUQsR0FBWW54QyxLQUFLQyxNQUM1QnZzQixLQUFLazhDLGFBQWF4K0MsT0FBU3NDLEtBQUtvOUQsZUFBZSxDQUNwRCxJQUFNN3dELEVBQU92TSxLQUFLazhDLGFBQWFsOEMsS0FBS285RCxlQUM5QnYyRCxFQUFTN0csS0FBS2k5RCxRQUFRMXdELEVBQU02dkMsR0FDbEMsR0FBSXYxQyxFQW1ERixZQUpBQSxFQUFPa2lELE9BQU0sU0FBQUMsR0FFWCxPQURBNlQsR0FBSSxXQUFPLE1BQU03VCxLQUNWTCxRQUFRcVUsU0FBUSxNQUN0Qmx6QixNQTNCd0MsU0FBQ3RrQyxHQUFlLE9BQUE4bUIsS0FBS0MsTUFBUW14QyxHQS9JdkQsR0FnSmI1N0QsWUFBVyxXQUFNLFNBQUswN0QsWUFBWSxFQUFHaDRELE1BQ3JDLEVBQUtnNEQsWUFBWUUsRUFBV2w0RCxNQTZCbEMsSUFBTXUzRCxFQUFLLzhELEtBQUtrOUQsV0FBV2w5RCxLQUFLbzlELGVBS2hDLEdBSklMLEdBQUlBLElBQ1IvOEQsS0FBS285RCxnQkFDTHA5RCxLQUFLbTlELGNBQWdCNXdELEVBQUs3TyxPQUV0QjR1QixLQUFLQyxNQUFRbXhDLEdBbkxFLEdBb0xqQixNQUdBMTlELEtBQUtrOEMsYUFBYXgrQyxPQUFTc0MsS0FBS285RCxlQUc5QnA5RCxLQUFLbzlELGNBbkx1QixLQW9MOUJwOUQsS0FBS2s4QyxhQUFlbDhDLEtBQUtrOEMsYUFBYTcwQyxNQUFNckgsS0FBS285RCxlQUNqRHA5RCxLQUFLazlELFdBQWFsOUQsS0FBS2s5RCxXQUFXNzFELE1BQU1ySCxLQUFLbzlELGVBQzdDcDlELEtBQUtvOUQsY0FBZ0IsR0FFdkJ0N0QsWUFBVyxXQUFNLFNBQUswN0QsbUJBRXRCeDlELEtBQUtrOEMsYUFBYXgrQyxPQUFTLEVBQzNCc0MsS0FBS2s5RCxXQUFXeC9ELE9BQVMsRUFDekJzQyxLQUFLbTlELGFBQWUsRUFDcEJuOUQsS0FBS285RCxjQUFnQixJQUczQixFQXhMQSxHQUFhLEVBQUFqaEIsWUFBQUEsbUdDaENiLElBQU13aEIsRUFBVSw4S0FFVkMsRUFBVyxhQWlEakIsU0FBU0MsRUFBSXpmLEVBQVcwZixHQUN0QixJQUFNMzRELEVBQUlpNUMsRUFBRWw4QyxTQUFTLElBQ2Y2N0QsRUFBSzU0RCxFQUFFekgsT0FBUyxFQUFJLElBQU15SCxFQUFJQSxFQUNwQyxPQUFRMjRELEdBQ04sS0FBSyxFQUNILE9BQU8zNEQsRUFBRSxHQUNYLEtBQUssRUFDSCxPQUFPNDRELEVBQ1QsS0FBSyxHQUNILE9BQVFBLEVBQUtBLEdBQUkxMkQsTUFBTSxFQUFHLEdBQzVCLFFBQ0UsT0FBTzAyRCxFQUFLQSxHQS9DbEIsc0JBQTJCeHhELEdBQ3pCLEdBQUtBLEVBQUwsQ0FFQSxJQUFJeXhELEVBQU16eEQsRUFBSzB4RCxjQUNmLEdBQTRCLElBQXhCRCxFQUFJL3NELFFBQVEsUUFBZSxDQUU3QitzRCxFQUFNQSxFQUFJMzJELE1BQU0sR0FDaEIsSUFBTStzQixFQUFJdXBDLEVBQVFoc0QsS0FBS3FzRCxHQUN2QixHQUFJNXBDLEVBQUcsQ0FDTCxJQUFNOHBDLEVBQU85cEMsRUFBRSxHQUFLLEdBQUtBLEVBQUUsR0FBSyxJQUFNQSxFQUFFLEdBQUssS0FBTyxNQUNwRCxNQUFPLENBQ0w1dEIsS0FBS0MsTUFBTVcsU0FBU2d0QixFQUFFLElBQU1BLEVBQUUsSUFBTUEsRUFBRSxJQUFNQSxFQUFFLElBQUssSUFBTThwQyxFQUFPLEtBQ2hFMTNELEtBQUtDLE1BQU1XLFNBQVNndEIsRUFBRSxJQUFNQSxFQUFFLElBQU1BLEVBQUUsSUFBTUEsRUFBRSxJQUFLLElBQU04cEMsRUFBTyxLQUNoRTEzRCxLQUFLQyxNQUFNVyxTQUFTZ3RCLEVBQUUsSUFBTUEsRUFBRSxJQUFNQSxFQUFFLElBQU1BLEVBQUUsSUFBSyxJQUFNOHBDLEVBQU8sWUFHL0QsR0FBeUIsSUFBckJGLEVBQUkvc0QsUUFBUSxPQUVyQitzRCxFQUFNQSxFQUFJMzJELE1BQU0sR0FDWnUyRCxFQUFTanNELEtBQUtxc0QsSUFBUSxDQUFDLEVBQUcsRUFBRyxFQUFHLElBQUl2cUMsU0FBU3VxQyxFQUFJdGdFLFNBQVMsQ0FHNUQsSUFGQSxJQUFNeWdFLEVBQU1ILEVBQUl0Z0UsT0FBUyxFQUNuQm1KLEVBQW1DLENBQUMsRUFBRyxFQUFHLEdBQ3ZDM0ssRUFBSSxFQUFHQSxFQUFJLElBQUtBLEVBQUcsQ0FDMUIsSUFBTWdKLEVBQUlrQyxTQUFTNDJELEVBQUkzMkQsTUFBTTgyRCxFQUFNamlFLEVBQUdpaUUsRUFBTWppRSxFQUFJaWlFLEdBQU0sSUFDdER0M0QsRUFBTzNLLEdBQWEsSUFBUmlpRSxFQUFZajVELEdBQUssRUFBWSxJQUFSaTVELEVBQVlqNUQsRUFBWSxJQUFSaTVELEVBQVlqNUQsR0FBSyxFQUFJQSxHQUFLLEVBRTdFLE9BQU8yQixLQTRCYix1QkFBNEJoQixFQUFpQ2k0RCxRQUFBLElBQUFBLElBQUFBLEVBQUEsSUFDcEQsSUFBQXQ0RCxFQUFXSyxFQUFLLEdBQWJKLEVBQVFJLEVBQUssR0FBVkgsRUFBS0csRUFBSyxHQUN2QixNQUFPLE9BQU9nNEQsRUFBSXI0RCxFQUFHczRELEdBQUssSUFBSUQsRUFBSXA0RCxFQUFHcTRELEdBQUssSUFBSUQsRUFBSW40RCxFQUFHbzRELDBGQ3JCMUMsRUFBQU0sY0FBZ0IscUdDbEQ3QixhQUNBLFVBQ0EsVUFFTUMsRUFBZ0MsR0FFdEMsMEJBQ1UsS0FBQUMsVUFBNkNsMUQsT0FBT20xRCxPQUFPLE1BQzNELEtBQUFDLFFBQXlCSCxFQUN6QixLQUFBSSxPQUFpQixFQUNqQixLQUFBQyxXQUFxQyxhQUNyQyxLQUFBQyxPQUErQixDQUNyQzdjLFFBQVEsRUFDUjhjLGFBQWMsRUFDZEMsYUFBYSxHQThHakIsT0EzR1MsWUFBQS8rRCxRQUFQLFdBQ0VFLEtBQUtzK0QsVUFBWWwxRCxPQUFPbTFELE9BQU8sTUFDL0J2K0QsS0FBSzArRCxXQUFhLGFBQ2xCMStELEtBQUt3K0QsUUFBVUgsR0FHVixZQUFBUyxnQkFBUCxTQUF1QmpoRCxFQUFlelEsUUFDTnpILElBQTFCM0YsS0FBS3MrRCxVQUFVemdELEtBQ2pCN2QsS0FBS3MrRCxVQUFVemdELEdBQVMsSUFFMUIsSUFBTWtoRCxFQUFjLytELEtBQUtzK0QsVUFBVXpnRCxHQUVuQyxPQURBa2hELEVBQVk5OUQsS0FBS21NLEdBQ1YsQ0FDTHROLFFBQVMsV0FDUCxJQUFNay9ELEVBQWVELEVBQVk5dEQsUUFBUTdELElBQ25CLElBQWxCNHhELEdBQ0ZELEVBQVl6dUQsT0FBTzB1RCxFQUFjLE1BTWxDLFlBQUFDLGFBQVAsU0FBb0JwaEQsR0FDZDdkLEtBQUtzK0QsVUFBVXpnRCxXQUFlN2QsS0FBS3MrRCxVQUFVemdELElBRzVDLFlBQUFxaEQsbUJBQVAsU0FBMEI5eEQsR0FDeEJwTixLQUFLMCtELFdBQWF0eEQsR0FHYixZQUFBNlAsTUFBUCxXQUVFLEdBQUlqZCxLQUFLdytELFFBQVE5Z0UsT0FDZixJQUFLLElBQUl1WSxFQUFJalcsS0FBSzIrRCxPQUFPN2MsT0FBUzloRCxLQUFLMitELE9BQU9DLGFBQWUsRUFBSTUrRCxLQUFLdytELFFBQVE5Z0UsT0FBUyxFQUFHdVksR0FBSyxJQUFLQSxFQUNsR2pXLEtBQUt3K0QsUUFBUXZvRCxHQUFHa3FDLFFBQU8sR0FHM0JuZ0QsS0FBSzIrRCxPQUFPN2MsUUFBUyxFQUNyQjloRCxLQUFLdytELFFBQVVILEVBQ2ZyK0QsS0FBS3krRCxPQUFTLEdBR1QsWUFBQTNlLEtBQVAsU0FBWWppQyxFQUFla2lDLEdBS3pCLEdBSEEvL0MsS0FBS2lkLFFBQ0xqZCxLQUFLeStELE9BQVM1Z0QsRUFDZDdkLEtBQUt3K0QsUUFBVXgrRCxLQUFLcytELFVBQVV6Z0QsSUFBVXdnRCxFQUNuQ3IrRCxLQUFLdytELFFBQVE5Z0UsT0FHaEIsSUFBSyxJQUFJdVksRUFBSWpXLEtBQUt3K0QsUUFBUTlnRSxPQUFTLEVBQUd1WSxHQUFLLEVBQUdBLElBQzVDalcsS0FBS3crRCxRQUFRdm9ELEdBQUc2cEMsS0FBS0MsUUFIdkIvL0MsS0FBSzArRCxXQUFXMStELEtBQUt5K0QsT0FBUSxPQUFRMWUsSUFRbEMsWUFBQUMsSUFBUCxTQUFXenpDLEVBQW1COU4sRUFBZUMsR0FDM0MsR0FBS3NCLEtBQUt3K0QsUUFBUTlnRSxPQUdoQixJQUFLLElBQUl1WSxFQUFJalcsS0FBS3crRCxRQUFROWdFLE9BQVMsRUFBR3VZLEdBQUssRUFBR0EsSUFDNUNqVyxLQUFLdytELFFBQVF2b0QsR0FBRytwQyxJQUFJenpDLEVBQU05TixFQUFPQyxRQUhuQ3NCLEtBQUswK0QsV0FBVzErRCxLQUFLeStELE9BQVEsT0FBTyxJQUFBcGUsZUFBYzl6QyxFQUFNOU4sRUFBT0MsS0FRNUQsWUFBQXloRCxPQUFQLFNBQWNDLEVBQWtCaEUsR0FDOUIsUUFEOEIsSUFBQUEsSUFBQUEsR0FBQSxHQUN6QnA4QyxLQUFLdytELFFBQVE5Z0UsT0FFWCxDQUNMLElBQUl5aEUsR0FBNEMsRUFDNUNscEQsRUFBSWpXLEtBQUt3K0QsUUFBUTlnRSxPQUFTLEVBQzFCbWhFLEdBQWMsRUFPbEIsR0FOSTcrRCxLQUFLMitELE9BQU83YyxTQUNkN3JDLEVBQUlqVyxLQUFLMitELE9BQU9DLGFBQWUsRUFDL0JPLEVBQWdCL2lCLEVBQ2hCeWlCLEVBQWM3K0QsS0FBSzIrRCxPQUFPRSxZQUMxQjcrRCxLQUFLMitELE9BQU83YyxRQUFTLElBRWxCK2MsSUFBaUMsSUFBbEJNLEVBQXlCLENBQzNDLEtBQU9scEQsR0FBSyxJQUVZLEtBRHRCa3BELEVBQWdCbi9ELEtBQUt3K0QsUUFBUXZvRCxHQUFHa3FDLE9BQU9DLElBRDFCbnFDLElBSU4sR0FBSWtwRCxhQUF5QnhXLFFBSWxDLE9BSEEzb0QsS0FBSzIrRCxPQUFPN2MsUUFBUyxFQUNyQjloRCxLQUFLMitELE9BQU9DLGFBQWUzb0QsRUFDM0JqVyxLQUFLMitELE9BQU9FLGFBQWMsRUFDbkJNLEVBR1hscEQsSUFHRixLQUFPQSxHQUFLLEVBQUdBLElBRWIsSUFEQWtwRCxFQUFnQm4vRCxLQUFLdytELFFBQVF2b0QsR0FBR2txQyxRQUFPLGNBQ1Z3SSxRQUkzQixPQUhBM29ELEtBQUsyK0QsT0FBTzdjLFFBQVMsRUFDckI5aEQsS0FBSzIrRCxPQUFPQyxhQUFlM29ELEVBQzNCalcsS0FBSzIrRCxPQUFPRSxhQUFjLEVBQ25CTSxPQWhDWG4vRCxLQUFLMCtELFdBQVcxK0QsS0FBS3krRCxPQUFRLFNBQVVyZSxHQW9DekNwZ0QsS0FBS3crRCxRQUFVSCxFQUNmcitELEtBQUt5K0QsT0FBUyxHQUVsQixFQXRIQSxHQUFhLEVBQUFXLFVBQUFBLEVBeUhiLElBQU1DLEVBQWUsSUFBSSxFQUFBQyxPQUN6QkQsRUFBYUUsU0FBUyxHQU10QixpQkFLRSxXQUFvQkMsR0FBQSxLQUFBQSxTQUFBQSxFQUpaLEtBQUE1ZixNQUFRLEdBQ1IsS0FBQTZmLFFBQW1CSixFQUNuQixLQUFBSyxXQUFxQixFQStDL0IsT0EzQ1MsWUFBQTVmLEtBQVAsU0FBWUMsR0FLVi8vQyxLQUFLeS9ELFFBQVcxZixFQUFPcmlELE9BQVMsR0FBS3FpRCxFQUFPQSxPQUFPLEdBQU1BLEVBQU94RixRQUFVOGtCLEVBQzFFci9ELEtBQUs0L0MsTUFBUSxHQUNiNS9DLEtBQUswL0QsV0FBWSxHQUdaLFlBQUExZixJQUFQLFNBQVd6ekMsRUFBbUI5TixFQUFlQyxHQUN2Q3NCLEtBQUswL0QsWUFHVDEvRCxLQUFLNC9DLFFBQVMsSUFBQVMsZUFBYzl6QyxFQUFNOU4sRUFBT0MsR0FDckNzQixLQUFLNC9DLE1BQU1saUQsT0FBUyxFQUFBMGdFLGdCQUN0QnArRCxLQUFLNC9DLE1BQVEsR0FDYjUvQyxLQUFLMC9ELFdBQVksS0FJZCxZQUFBdmYsT0FBUCxTQUFjQyxHQUFkLFdBQ011ZixHQUFrQyxFQUN0QyxHQUFJMy9ELEtBQUswL0QsVUFDUEMsR0FBTSxPQUNELEdBQUl2ZixJQUNUdWYsRUFBTTMvRCxLQUFLdy9ELFNBQVN4L0QsS0FBSzQvQyxNQUFPNS9DLEtBQUt5L0Qsb0JBQ2xCOVcsUUFHakIsT0FBT2dYLEVBQUk3MUIsTUFBSyxTQUFBK2UsR0FJZCxPQUhBLEVBQUs0VyxRQUFVSixFQUNmLEVBQUt6ZixNQUFRLEdBQ2IsRUFBSzhmLFdBQVksRUFDVjdXLEtBT2IsT0FIQTdvRCxLQUFLeS9ELFFBQVVKLEVBQ2ZyL0QsS0FBSzQvQyxNQUFRLEdBQ2I1L0MsS0FBSzAvRCxXQUFZLEVBQ1ZDLEdBRVgsRUFsREEsR0FBYSxFQUFBcFYsV0FBQUEsaW5CQ3RJYixhQUVBLFVBQ0EsVUFDQSxVQUNBLFVBZ0JBLGFBR0UsV0FBWTdzRCxHQUNWc0MsS0FBS284RCxNQUFRLElBQUlwakIsV0FBV3Q3QyxHQW1DaEMsT0EzQlMsWUFBQWtpRSxXQUFQLFNBQWtCcjZDLEVBQXNCcFcsSUFDdEMsSUFBQXE4QyxNQUFLeHJELEtBQUtvOEQsTUFBTzcyQyxHQUFVLEVBQXNDcFcsSUFVNUQsWUFBQXRTLElBQVAsU0FBV202QixFQUFjcmdCLEVBQW9CNE8sRUFBc0JwVyxHQUNqRW5QLEtBQUtvOEQsTUFBTXpsRCxHQUFTLEVBQWdDcWdCLEdBQVF6UixHQUFVLEVBQXNDcFcsR0FVdkcsWUFBQTB3RCxRQUFQLFNBQWVDLEVBQWlCbnBELEVBQW9CNE8sRUFBc0JwVyxHQUN4RSxJQUFLLElBQUlqVCxFQUFJLEVBQUdBLEVBQUk0akUsRUFBTXBpRSxPQUFReEIsSUFDaEM4RCxLQUFLbzhELE1BQU16bEQsR0FBUyxFQUFnQ21wRCxFQUFNNWpFLElBQU1xcEIsR0FBVSxFQUFzQ3BXLEdBR3RILEVBdkNBLEdBQWEsRUFBQTR3RCxnQkFBQUEsRUEyQ2IsSUFBTUMsRUFBc0IsSUFPZixFQUFBQyx1QkFBeUIsV0FDcEMsSUFBTTdELEVBQXlCLElBQUkyRCxFQUFnQixNQUk3Q0csRUFBWTFtQixNQUFNMm1CLE1BQU0sS0FBTTNtQixNQURoQixNQUNvQzdzQyxLQUFJLFNBQUN5ekQsRUFBYWxrRSxHQUFjLE9BQUFBLEtBQ2xGc0osRUFBSSxTQUFDL0csRUFBZUMsR0FBMEIsT0FBQXdoRSxFQUFVNzRELE1BQU01SSxFQUFPQyxJQUdyRTJoRSxFQUFhNzZELEVBQUUsR0FBTSxLQUNyQjg2RCxFQUFjOTZELEVBQUUsRUFBTSxJQUM1Qjg2RCxFQUFZci9ELEtBQUssSUFDakJxL0QsRUFBWXIvRCxLQUFLay9ELE1BQU1HLEVBQWE5NkQsRUFBRSxHQUFNLEtBRTVDLElBQ0ltUixFQURFNHBELEVBQW1CLzZELEVBQUUsRUFBb0IsSUFRL0MsSUFBS21SLEtBSkx5bEQsRUFBTXdELFdBQVcsRUFBRCxHQUVoQnhELEVBQU15RCxRQUFRUSxFQUFZLEVBQUYsS0FFVkUsRUFDWm5FLEVBQU15RCxRQUFRLENBQUMsR0FBTSxHQUFNLElBQU0sS0FBT2xwRCxFQUFPLEVBQUYsR0FDN0N5bEQsRUFBTXlELFFBQVFyNkQsRUFBRSxJQUFNLEtBQU9tUixFQUFPLEVBQUYsR0FDbEN5bEQsRUFBTXlELFFBQVFyNkQsRUFBRSxJQUFNLEtBQU9tUixFQUFPLEVBQUYsR0FDbEN5bEQsRUFBTXYvRCxJQUFJLElBQU04WixFQUFPLEVBQUYsR0FDckJ5bEQsRUFBTXYvRCxJQUFJLEdBQU04WixFQUFPLEdBQUYsR0FDckJ5bEQsRUFBTXYvRCxJQUFJLElBQU04WixFQUFPLEVBQUYsR0FDckJ5bEQsRUFBTXlELFFBQVEsQ0FBQyxJQUFNLElBQU0sS0FBT2xwRCxFQUFPLEVBQUYsR0FDdkN5bEQsRUFBTXYvRCxJQUFJLElBQU04WixFQUFPLEdBQUYsR0FDckJ5bEQsRUFBTXYvRCxJQUFJLElBQU04WixFQUFPLEdBQUYsR0F1RnZCLE9BcEZBeWxELEVBQU15RCxRQUFRUyxFQUFhLEVBQUYsS0FDekJsRSxFQUFNeUQsUUFBUVMsRUFBYSxFQUFGLEtBQ3pCbEUsRUFBTXYvRCxJQUFJLElBQU0sRUFBRixLQUNkdS9ELEVBQU15RCxRQUFRUyxFQUFhLEVBQUYsS0FDekJsRSxFQUFNeUQsUUFBUVMsRUFBYSxFQUFGLEtBQ3pCbEUsRUFBTXYvRCxJQUFJLElBQU0sRUFBRixLQUNkdS9ELEVBQU15RCxRQUFRUyxFQUFhLEVBQUYsS0FDekJsRSxFQUFNdi9ELElBQUksSUFBTSxFQUFGLEtBQ2R1L0QsRUFBTXlELFFBQVFTLEVBQWEsRUFBRixLQUN6QmxFLEVBQU15RCxRQUFRUyxFQUFhLEVBQUYsS0FDekJsRSxFQUFNdi9ELElBQUksSUFBTSxFQUFGLEtBQ2R1L0QsRUFBTXlELFFBQVFTLEVBQWEsRUFBRixLQUN6QmxFLEVBQU12L0QsSUFBSSxJQUFNLEVBQUYsS0FFZHUvRCxFQUFNdi9ELElBQUksR0FBTSxFQUFGLEtBQ2R1L0QsRUFBTXlELFFBQVFRLEVBQVksRUFBRixLQUN4QmpFLEVBQU12L0QsSUFBSSxJQUFNLEVBQUYsS0FDZHUvRCxFQUFNeUQsUUFBUSxDQUFDLElBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTyxFQUFGLEtBQzVDekQsRUFBTXlELFFBQVFyNkQsRUFBRSxHQUFNLElBQU8sRUFBRixLQUUzQjQyRCxFQUFNeUQsUUFBUSxDQUFDLEdBQU0sR0FBTSxJQUFPLEVBQUYsS0FDaEN6RCxFQUFNeUQsUUFBUVEsRUFBWSxFQUFGLEtBQ3hCakUsRUFBTXlELFFBQVFTLEVBQWEsRUFBRixLQUN6QmxFLEVBQU12L0QsSUFBSSxJQUFNLEVBQUYsS0FDZHUvRCxFQUFNdi9ELElBQUksSUFBTSxFQUFGLEtBRWR1L0QsRUFBTXYvRCxJQUFJLEdBQU0sRUFBRixNQUNkdS9ELEVBQU15RCxRQUFRcjZELEVBQUUsR0FBTSxLQUFPLEVBQUYsS0FDM0I0MkQsRUFBTXlELFFBQVFyNkQsRUFBRSxHQUFNLElBQU8sRUFBRixLQUMzQjQyRCxFQUFNeUQsUUFBUSxDQUFDLEdBQU0sR0FBTSxHQUFNLElBQU8sRUFBRixLQUN0Q3pELEVBQU15RCxRQUFRcjZELEVBQUUsR0FBTSxJQUFPLEVBQUYsS0FDM0I0MkQsRUFBTXlELFFBQVFyNkQsRUFBRSxHQUFNLEtBQU8sRUFBRixLQUMzQjQyRCxFQUFNeUQsUUFBUSxDQUFDLEdBQU0sR0FBTSxHQUFNLElBQU8sRUFBRixLQUN0Q3pELEVBQU15RCxRQUFRcjZELEVBQUUsR0FBTSxJQUFPLEVBQUYsS0FDM0I0MkQsRUFBTXYvRCxJQUFJLElBQU0sRUFBRixLQUNkdS9ELEVBQU15RCxRQUFRcjZELEVBQUUsR0FBTSxLQUFPLEVBQUYsS0FDM0I0MkQsRUFBTXlELFFBQVFyNkQsRUFBRSxHQUFNLElBQU8sRUFBRixLQUMzQjQyRCxFQUFNeUQsUUFBUXI2RCxFQUFFLEdBQU0sSUFBTyxFQUFGLEtBQzNCNDJELEVBQU15RCxRQUFRcjZELEVBQUUsR0FBTSxJQUFPLEVBQUYsS0FDM0I0MkQsRUFBTXlELFFBQVFyNkQsRUFBRSxHQUFNLEtBQU8sRUFBRixLQUMzQjQyRCxFQUFNeUQsUUFBUXI2RCxFQUFFLEdBQU0sSUFBTyxFQUFGLEtBRTNCNDJELEVBQU15RCxRQUFRcjZELEVBQUUsR0FBTSxJQUFPLEVBQUYsS0FDM0I0MkQsRUFBTXlELFFBQVFyNkQsRUFBRSxHQUFNLElBQU8sRUFBRixLQUMzQjQyRCxFQUFNeUQsUUFBUXI2RCxFQUFFLEdBQU0sS0FBTyxFQUFGLE1BQzNCNDJELEVBQU15RCxRQUFRcjZELEVBQUUsR0FBTSxJQUFPLEVBQUYsTUFDM0I0MkQsRUFBTXlELFFBQVFyNkQsRUFBRSxHQUFNLElBQU8sRUFBRixNQUMzQjQyRCxFQUFNeUQsUUFBUSxDQUFDLEdBQU0sR0FBTSxJQUFPLEVBQUYsTUFDaEN6RCxFQUFNeUQsUUFBUXI2RCxFQUFFLEdBQU0sS0FBTyxFQUFGLE1BRTNCNDJELEVBQU12L0QsSUFBSSxHQUFNLEVBQUYsTUFDZHUvRCxFQUFNeUQsUUFBUVMsRUFBYSxFQUFGLEtBQ3pCbEUsRUFBTXYvRCxJQUFJLElBQU0sRUFBRixLQUNkdS9ELEVBQU15RCxRQUFRcjZELEVBQUUsR0FBTSxJQUFPLEVBQUYsS0FDM0I0MkQsRUFBTXlELFFBQVFyNkQsRUFBRSxHQUFNLElBQU8sRUFBRixNQUMzQjQyRCxFQUFNeUQsUUFBUXI2RCxFQUFFLEdBQU0sSUFBTyxFQUFGLE1BQzNCNDJELEVBQU15RCxRQUFRLENBQUMsR0FBTSxHQUFNLEdBQU0sSUFBTyxFQUFGLE1BQ3RDekQsRUFBTXlELFFBQVFTLEVBQWEsR0FBRixNQUN6QmxFLEVBQU15RCxRQUFRcjZELEVBQUUsR0FBTSxLQUFPLEdBQUYsTUFDM0I0MkQsRUFBTXlELFFBQVFyNkQsRUFBRSxHQUFNLElBQU8sR0FBRixNQUMzQjQyRCxFQUFNeUQsUUFBUVMsRUFBYSxHQUFGLE1BQ3pCbEUsRUFBTXYvRCxJQUFJLElBQU0sR0FBRixNQUNkdS9ELEVBQU15RCxRQUFRcjZELEVBQUUsR0FBTSxJQUFPLEdBQUYsTUFDM0I0MkQsRUFBTXlELFFBQVFyNkQsRUFBRSxHQUFNLElBQU8sR0FBRixNQUMzQjQyRCxFQUFNeUQsUUFBUSxDQUFDLEdBQU0sR0FBTSxHQUFNLElBQU8sR0FBRixNQUN0Q3pELEVBQU15RCxRQUFRcjZELEVBQUUsR0FBTSxJQUFPLEdBQUYsTUFDM0I0MkQsRUFBTXlELFFBQVFTLEVBQWEsR0FBRixNQUN6QmxFLEVBQU12L0QsSUFBSSxJQUFNLEdBQUYsTUFDZHUvRCxFQUFNeUQsUUFBUXI2RCxFQUFFLEdBQU0sSUFBTyxHQUFGLE1BQzNCNDJELEVBQU15RCxRQUFRcjZELEVBQUUsR0FBTSxJQUFPLEdBQUYsTUFDM0I0MkQsRUFBTXlELFFBQVFyNkQsRUFBRSxHQUFNLElBQU8sR0FBRixNQUMzQjQyRCxFQUFNeUQsUUFBUXI2RCxFQUFFLEdBQU0sS0FBTyxHQUFGLE9BQzNCNDJELEVBQU15RCxRQUFRcjZELEVBQUUsR0FBTSxLQUFPLEdBQUYsT0FDM0I0MkQsRUFBTXlELFFBQVFyNkQsRUFBRSxHQUFNLEtBQU8sRUFBRixPQUMzQjQyRCxFQUFNeUQsUUFBUVMsRUFBYSxHQUFGLE9BQ3pCbEUsRUFBTXlELFFBQVFRLEVBQVksR0FBRixPQUN4QmpFLEVBQU12L0QsSUFBSSxJQUFNLEdBQUYsTUFDZHUvRCxFQUFNeUQsUUFBUSxDQUFDLEdBQU0sSUFBTSxHQUFNLElBQU8sR0FBRixNQUV0Q3pELEVBQU12L0QsSUFBSW1qRSxFQUFxQixFQUFGLEtBQzdCNUQsRUFBTXYvRCxJQUFJbWpFLEVBQXFCLEVBQUYsS0FDN0I1RCxFQUFNdi9ELElBQUltakUsRUFBcUIsRUFBRixLQUM3QjVELEVBQU12L0QsSUFBSW1qRSxFQUFxQixHQUFGLE1BQzdCNUQsRUFBTXYvRCxJQUFJbWpFLEVBQXFCLEdBQUYsT0FDdEI1RCxFQXRINkIsR0F3SnRDLGtCQWtDRSxXQUNxQm9FLFFBQUEsSUFBQUEsSUFBQUEsRUFBZ0MsRUFBQVAsd0JBRHJELE1BR0UsY0FBTyxZQUZZLEVBQUFPLGFBQUFBLEVBVFgsRUFBQTNlLFlBQWlDLENBQ3pDbHJDLE1BQU8sRUFDUDhwRCxTQUFVLEdBQ1ZDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxTQUFVLEdBUVYsRUFBS0MsYUFBZSxFQUNwQixFQUFLQyxhQUFlLEVBQUtELGFBQ3pCLEVBQUtwQixRQUFVLElBQUksRUFBQUgsT0FDbkIsRUFBS0csUUFBUUYsU0FBUyxHQUN0QixFQUFLd0IsU0FBVyxFQUNoQixFQUFLMVcsbUJBQXFCLEVBRzFCLEVBQUsyVyxnQkFBa0IsU0FBQ3owRCxFQUFNOU4sRUFBT0MsS0FDckMsRUFBS3VpRSxrQkFBb0IsU0FBQ2pxQyxLQUMxQixFQUFLa3FDLGNBQWdCLFNBQUNyakQsRUFBZWtpQyxLQUNyQyxFQUFLb2hCLGNBQWdCLFNBQUN0akQsS0FDdEIsRUFBS3VqRCxnQkFBa0IsU0FBQ3pxRCxHQUF3QyxPQUFBQSxHQUNoRSxFQUFLMHFELGNBQWdCLEVBQUtMLGdCQUMxQixFQUFLTSxpQkFBbUJsNEQsT0FBT20xRCxPQUFPLE1BQ3RDLEVBQUtnRCxhQUFlbjRELE9BQU9tMUQsT0FBTyxNQUNsQyxFQUFLaUQsYUFBZXA0RCxPQUFPbTFELE9BQU8sTUFDbEMsRUFBS2tELFdBQWEsSUFBSSxFQUFBQyxVQUN0QixFQUFLQyxXQUFhLElBQUksRUFBQXZDLFVBQ3RCLEVBQUt3QyxjQUFnQixFQUFLUixnQkFHMUIsRUFBS3BrQixtQkFBbUIsQ0FBRU8sTUFBTyxPQUFRLFdBQU0sY0F3Zm5ELE9BcmpCMEMsT0FnRTlCLFlBQUFza0IsWUFBVixTQUFzQmp5RCxFQUF5Qmt5RCxRQUFBLElBQUFBLElBQUFBLEVBQUEsQ0FBd0IsR0FBTSxNQUMzRSxJQUFJalosRUFBTSxFQUNWLEdBQUlqNUMsRUFBR2cwQyxPQUFRLENBQ2IsR0FBSWgwQyxFQUFHZzBDLE9BQU9sbUQsT0FBUyxFQUNyQixNQUFNLElBQUlTLE1BQU0scUNBR2xCLElBREEwcUQsRUFBTWo1QyxFQUFHZzBDLE9BQU8zSyxXQUFXLEtBQ2hCLEdBQU80UCxHQUFPQSxFQUFNLEdBQzdCLE1BQU0sSUFBSTFxRCxNQUFNLHdDQUdwQixHQUFJeVIsRUFBR216QyxjQUFlLENBQ3BCLEdBQUluekMsRUFBR216QyxjQUFjcmxELE9BQVMsRUFDNUIsTUFBTSxJQUFJUyxNQUFNLGlEQUVsQixJQUFLLElBQUlqQyxFQUFJLEVBQUdBLEVBQUkwVCxFQUFHbXpDLGNBQWNybEQsU0FBVXhCLEVBQUcsQ0FDaEQsSUFBTTZsRSxFQUFlbnlELEVBQUdtekMsY0FBYzlKLFdBQVcvOEMsR0FDakQsR0FBSSxHQUFPNmxFLEdBQWdCQSxFQUFlLEdBQ3hDLE1BQU0sSUFBSTVqRSxNQUFNLDhDQUVsQjBxRCxJQUFRLEVBQ1JBLEdBQU9rWixHQUdYLEdBQXdCLElBQXBCbnlELEVBQUcydEMsTUFBTTcvQyxPQUNYLE1BQU0sSUFBSVMsTUFBTSwrQkFFbEIsSUFBTTZqRSxFQUFZcHlELEVBQUcydEMsTUFBTXRFLFdBQVcsR0FDdEMsR0FBSTZvQixFQUFXLEdBQUtFLEdBQWFBLEVBQVlGLEVBQVcsR0FDdEQsTUFBTSxJQUFJM2pFLE1BQU0sMEJBQTBCMmpFLEVBQVcsR0FBRSxPQUFPQSxFQUFXLElBSzNFLE9BSEFqWixJQUFRLEdBQ0RtWixHQUtGLFlBQUEzZixjQUFQLFNBQXFCeGtDLEdBRW5CLElBREEsSUFBTWdyQyxFQUFnQixHQUNmaHJDLEdBQ0xnckMsRUFBSTVuRCxLQUFLcXBCLE9BQU9DLGFBQXFCLElBQVIxTSxJQUM3QkEsSUFBVSxFQUVaLE9BQU9nckMsRUFBSW9aLFVBQVU1bUMsS0FBSyxLQUdyQixZQUFBdjdCLFFBQVAsV0FDRUUsS0FBS3VoRSxhQUFlbjRELE9BQU9tMUQsT0FBTyxNQUNsQ3YrRCxLQUFLc2hFLGlCQUFtQmw0RCxPQUFPbTFELE9BQU8sTUFDdEN2K0QsS0FBS3doRSxhQUFlcDRELE9BQU9tMUQsT0FBTyxNQUNsQ3YrRCxLQUFLeWhFLFdBQVczaEUsVUFDaEJFLEtBQUsyaEUsV0FBVzdoRSxXQUdYLFlBQUE4aUQsZ0JBQVAsU0FBdUJ4MUMsR0FDckJwTixLQUFLcWhFLGNBQWdCajBELEdBRWhCLFlBQUE4MEQsa0JBQVAsV0FDRWxpRSxLQUFLcWhFLGNBQWdCcmhFLEtBQUtnaEUsaUJBR3JCLFlBQUFoa0IsbUJBQVAsU0FBMEJwdEMsRUFBeUJ4QyxHQUNqRCxJQUFNeVEsRUFBUTdkLEtBQUs2aEUsWUFBWWp5RCxFQUFJLENBQUMsR0FBTSxXQUNUakssSUFBN0IzRixLQUFLd2hFLGFBQWEzakQsS0FDcEI3ZCxLQUFLd2hFLGFBQWEzakQsR0FBUyxJQUU3QixJQUFNa2hELEVBQWMvK0QsS0FBS3doRSxhQUFhM2pELEdBRXRDLE9BREFraEQsRUFBWTk5RCxLQUFLbU0sR0FDVixDQUNMdE4sUUFBUyxXQUNQLElBQU1rL0QsRUFBZUQsRUFBWTl0RCxRQUFRN0QsSUFDbkIsSUFBbEI0eEQsR0FDRkQsRUFBWXp1RCxPQUFPMHVELEVBQWMsTUFLbEMsWUFBQW1ELGdCQUFQLFNBQXVCdnlELEdBQ2pCNVAsS0FBS3doRSxhQUFheGhFLEtBQUs2aEUsWUFBWWp5RCxFQUFJLENBQUMsR0FBTSxlQUFnQjVQLEtBQUt3aEUsYUFBYXhoRSxLQUFLNmhFLFlBQVlqeUQsRUFBSSxDQUFDLEdBQU0sUUFFM0csWUFBQTJ5QyxzQkFBUCxTQUE2Qm4xQyxHQUMzQnBOLEtBQUttaEUsY0FBZ0IvekQsR0FHaEIsWUFBQXk0QyxrQkFBUCxTQUF5QnFDLEVBQWM5NkMsR0FDckNwTixLQUFLc2hFLGlCQUFpQnBaLEVBQUtqUCxXQUFXLElBQU03ckMsR0FFdkMsWUFBQWcxRCxvQkFBUCxTQUEyQmxhLEdBQ3JCbG9ELEtBQUtzaEUsaUJBQWlCcFosRUFBS2pQLFdBQVcsWUFBWWo1QyxLQUFLc2hFLGlCQUFpQnBaLEVBQUtqUCxXQUFXLEtBRXZGLFlBQUF1SiwwQkFBUCxTQUFpQ3AxQyxHQUMvQnBOLEtBQUtpaEUsa0JBQW9CN3pELEdBR3BCLFlBQUE4dkMsbUJBQVAsU0FBMEJ0dEMsRUFBeUJ4QyxHQUNqRCxJQUFNeVEsRUFBUTdkLEtBQUs2aEUsWUFBWWp5RCxRQUNFakssSUFBN0IzRixLQUFLdWhFLGFBQWExakQsS0FDcEI3ZCxLQUFLdWhFLGFBQWExakQsR0FBUyxJQUU3QixJQUFNa2hELEVBQWMvK0QsS0FBS3VoRSxhQUFhMWpELEdBRXRDLE9BREFraEQsRUFBWTk5RCxLQUFLbU0sR0FDVixDQUNMdE4sUUFBUyxXQUNQLElBQU1rL0QsRUFBZUQsRUFBWTl0RCxRQUFRN0QsSUFDbkIsSUFBbEI0eEQsR0FDRkQsRUFBWXp1RCxPQUFPMHVELEVBQWMsTUFLbEMsWUFBQXFELGdCQUFQLFNBQXVCenlELEdBQ2pCNVAsS0FBS3VoRSxhQUFhdmhFLEtBQUs2aEUsWUFBWWp5RCxZQUFhNVAsS0FBS3VoRSxhQUFhdmhFLEtBQUs2aEUsWUFBWWp5RCxLQUVsRixZQUFBdXlDLHNCQUFQLFNBQTZCenNCLEdBQzNCMTFCLEtBQUtraEUsY0FBZ0J4ckMsR0FHaEIsWUFBQXVuQixtQkFBUCxTQUEwQnJ0QyxFQUF5QnhDLEdBQ2pELE9BQU9wTixLQUFLMmhFLFdBQVc3QyxnQkFBZ0I5K0QsS0FBSzZoRSxZQUFZanlELEdBQUt4QyxJQUV4RCxZQUFBazFELGdCQUFQLFNBQXVCMXlELEdBQ3JCNVAsS0FBSzJoRSxXQUFXMUMsYUFBYWovRCxLQUFLNmhFLFlBQVlqeUQsS0FFekMsWUFBQTh5QyxzQkFBUCxTQUE2QnQxQyxHQUMzQnBOLEtBQUsyaEUsV0FBV3pDLG1CQUFtQjl4RCxJQUc5QixZQUFBK3ZDLG1CQUFQLFNBQTBCdC9CLEVBQWV6USxHQUN2QyxPQUFPcE4sS0FBS3loRSxXQUFXM0MsZ0JBQWdCamhELEVBQU96USxJQUV6QyxZQUFBbTFELGdCQUFQLFNBQXVCMWtELEdBQ3JCN2QsS0FBS3loRSxXQUFXeEMsYUFBYXBoRCxJQUV4QixZQUFBNGtDLHNCQUFQLFNBQTZCcjFDLEdBQzNCcE4sS0FBS3loRSxXQUFXdkMsbUJBQW1COXhELElBRzlCLFlBQUFrN0MsZ0JBQVAsU0FBdUI1eUIsR0FDckIxMUIsS0FBSzRoRSxjQUFnQmxzQyxHQUVoQixZQUFBOHNDLGtCQUFQLFdBQ0V4aUUsS0FBSzRoRSxjQUFnQjVoRSxLQUFLb2hFLGlCQVlyQixZQUFBbmtELE1BQVAsV0FDRWpkLEtBQUs4Z0UsYUFBZTlnRSxLQUFLNmdFLGFBQ3pCN2dFLEtBQUt5aEUsV0FBV3hrRCxRQUNoQmpkLEtBQUsyaEUsV0FBVzFrRCxRQUNoQmpkLEtBQUt5L0QsUUFBUXhpRCxRQUNiamQsS0FBS3kvRCxRQUFRRixTQUFTLEdBQ3RCdi9ELEtBQUsrZ0UsU0FBVyxFQUNoQi9nRSxLQUFLcXFELG1CQUFxQixFQUlLLElBQTNCcnFELEtBQUs2aEQsWUFBWWxyQyxRQUNuQjNXLEtBQUs2aEQsWUFBWWxyQyxNQUFRLEVBQ3pCM1csS0FBSzZoRCxZQUFZNGUsU0FBVyxLQU90QixZQUFBalksZUFBVixTQUNFN3hDLEVBQ0E4cEQsRUFDQUMsRUFDQUMsRUFDQUMsR0FFQTVnRSxLQUFLNmhELFlBQVlsckMsTUFBUUEsRUFDekIzVyxLQUFLNmhELFlBQVk0ZSxTQUFXQSxFQUM1QnpnRSxLQUFLNmhELFlBQVk2ZSxXQUFhQSxFQUM5QjFnRSxLQUFLNmhELFlBQVk4ZSxXQUFhQSxFQUM5QjNnRSxLQUFLNmhELFlBQVkrZSxTQUFXQSxHQTRDdkIsWUFBQXZrQixNQUFQLFNBQWE5dkMsRUFBbUI3TyxFQUFnQjArQyxHQUM5QyxJQUdJK2lCLEVBSEFub0MsRUFBTyxFQUNQMnBDLEVBQWEsRUFDYmxpRSxFQUFRLEVBSVosR0FBSXVCLEtBQUs2aEQsWUFBWWxyQyxNQUduQixHQUErQixJQUEzQjNXLEtBQUs2aEQsWUFBWWxyQyxNQUNuQjNXLEtBQUs2aEQsWUFBWWxyQyxNQUFRLEVBQ3pCbFksRUFBUXVCLEtBQUs2aEQsWUFBWStlLFNBQVcsTUFDL0IsQ0FDTCxRQUFzQmo3RCxJQUFsQnkyQyxHQUEwRCxJQUEzQnA4QyxLQUFLNmhELFlBQVlsckMsTUFpQmxELE1BREEzVyxLQUFLNmhELFlBQVlsckMsTUFBUSxFQUNuQixJQUFJeFksTUFBTSwwRUFNbEIsSUFBTXNpRSxFQUFXemdFLEtBQUs2aEQsWUFBWTRlLFNBQzlCQyxFQUFhMWdFLEtBQUs2aEQsWUFBWTZlLFdBQWEsRUFDL0MsT0FBUTFnRSxLQUFLNmhELFlBQVlsckMsT0FDdkIsS0FBSyxFQUNILElBQXNCLElBQWxCeWxDLEdBQTJCc2tCLEdBQWMsRUFDM0MsS0FBT0EsR0FBYyxJQUVHLEtBRHRCdkIsRUFBaUJzQixFQUE4QkMsR0FBWTFnRSxLQUFLeS9ELFVBRDFDaUIsSUFJZixHQUFJdkIsYUFBeUJ4VyxRQUVsQyxPQURBM29ELEtBQUs2aEQsWUFBWTZlLFdBQWFBLEVBQ3ZCdkIsRUFJYm4vRCxLQUFLNmhELFlBQVk0ZSxTQUFXLEdBQzVCLE1BQ0YsS0FBSyxFQUNILElBQXNCLElBQWxCcmtCLEdBQTJCc2tCLEdBQWMsRUFDM0MsS0FBT0EsR0FBYyxJQUVHLEtBRHRCdkIsRUFBaUJzQixFQUE4QkMsTUFEekJBLElBSWYsR0FBSXZCLGFBQXlCeFcsUUFFbEMsT0FEQTNvRCxLQUFLNmhELFlBQVk2ZSxXQUFhQSxFQUN2QnZCLEVBSWJuL0QsS0FBSzZoRCxZQUFZNGUsU0FBVyxHQUM1QixNQUNGLEtBQUssRUFHSCxHQUZBenBDLEVBQU96cUIsRUFBS3ZNLEtBQUs2aEQsWUFBWStlLFVBQzdCekIsRUFBZ0JuL0QsS0FBSzJoRSxXQUFXeGhCLE9BQWdCLEtBQVRucEIsR0FBMEIsS0FBVEEsRUFBZW9sQixHQUVyRSxPQUFPK2lCLEVBRUksS0FBVG5vQyxJQUFlaDNCLEtBQUs2aEQsWUFBWThlLFlBQWMsR0FDbEQzZ0UsS0FBS3kvRCxRQUFReGlELFFBQ2JqZCxLQUFLeS9ELFFBQVFGLFNBQVMsR0FDdEJ2L0QsS0FBSytnRSxTQUFXLEVBQ2hCLE1BQ0YsS0FBSyxFQUdILEdBRkEvcEMsRUFBT3pxQixFQUFLdk0sS0FBSzZoRCxZQUFZK2UsVUFDN0J6QixFQUFnQm4vRCxLQUFLeWhFLFdBQVcvaUUsSUFBYSxLQUFUczRCLEdBQTBCLEtBQVRBLEVBQWVvbEIsR0FFbEUsT0FBTytpQixFQUVJLEtBQVRub0MsSUFBZWgzQixLQUFLNmhELFlBQVk4ZSxZQUFjLEdBQ2xEM2dFLEtBQUt5L0QsUUFBUXhpRCxRQUNiamQsS0FBS3kvRCxRQUFRRixTQUFTLEdBQ3RCdi9ELEtBQUsrZ0UsU0FBVyxFQUlwQi9nRSxLQUFLNmhELFlBQVlsckMsTUFBUSxFQUN6QmxZLEVBQVF1QixLQUFLNmhELFlBQVkrZSxTQUFXLEVBQ3BDNWdFLEtBQUtxcUQsbUJBQXFCLEVBQzFCcnFELEtBQUs4Z0UsYUFBNkMsR0FBOUI5Z0UsS0FBSzZoRCxZQUFZOGUsV0FPekMsSUFBSyxJQUFJemtFLEVBQUl1QyxFQUFPdkMsRUFBSXdCLElBQVV4QixFQUFHLENBS25DLE9BSkE4NkIsRUFBT3pxQixFQUFLclEsSUFHWnlrRSxFQUFhM2dFLEtBQUt3Z0UsYUFBYXBFLE1BQU1wOEQsS0FBSzhnRSxjQUFnQixHQUFpQzlwQyxFQUFPLElBQU9BLEVBQU9ncEMsTUFDMUYsR0FDcEIsS0FBSyxFQUdILElBQUssSUFBSSxFQUFJOWpFLEVBQUksS0FBTyxFQUFHLENBQ3pCLEdBQUksR0FBS3dCLElBQVdzNUIsRUFBT3pxQixFQUFLLElBQU0sSUFBU3lxQixFQUFPLEtBQVFBLEVBQU9ncEMsRUFBc0IsQ0FDekZoZ0UsS0FBS3FoRSxjQUFjOTBELEVBQU1yUSxFQUFHLEdBQzVCQSxFQUFJLEVBQUksRUFDUixNQUVGLEtBQU0sR0FBS3dCLElBQVdzNUIsRUFBT3pxQixFQUFLLElBQU0sSUFBU3lxQixFQUFPLEtBQVFBLEVBQU9ncEMsRUFBc0IsQ0FDM0ZoZ0UsS0FBS3FoRSxjQUFjOTBELEVBQU1yUSxFQUFHLEdBQzVCQSxFQUFJLEVBQUksRUFDUixNQUVGLEtBQU0sR0FBS3dCLElBQVdzNUIsRUFBT3pxQixFQUFLLElBQU0sSUFBU3lxQixFQUFPLEtBQVFBLEVBQU9ncEMsRUFBc0IsQ0FDM0ZoZ0UsS0FBS3FoRSxjQUFjOTBELEVBQU1yUSxFQUFHLEdBQzVCQSxFQUFJLEVBQUksRUFDUixNQUVGLEtBQU0sR0FBS3dCLElBQVdzNUIsRUFBT3pxQixFQUFLLElBQU0sSUFBU3lxQixFQUFPLEtBQVFBLEVBQU9ncEMsRUFBc0IsQ0FDM0ZoZ0UsS0FBS3FoRSxjQUFjOTBELEVBQU1yUSxFQUFHLEdBQzVCQSxFQUFJLEVBQUksRUFDUixPQUdKLE1BQ0YsS0FBSyxFQUNDOEQsS0FBS3NoRSxpQkFBaUJ0cUMsR0FBT2gzQixLQUFLc2hFLGlCQUFpQnRxQyxLQUNsRGgzQixLQUFLaWhFLGtCQUFrQmpxQyxHQUM1QmgzQixLQUFLcXFELG1CQUFxQixFQUMxQixNQUNGLEtBQUssRUFDSCxNQUNGLEtBQUssRUFVSCxHQVQ4QnJxRCxLQUFLNGhFLGNBQ2pDLENBQ0UzaEUsU0FBVS9ELEVBQ1Y4NkIsS0FBSSxFQUNKOHBDLGFBQWM5Z0UsS0FBSzhnRSxhQUNuQjJCLFFBQVN6aUUsS0FBSytnRSxTQUNkaGhCLE9BQVEvL0MsS0FBS3kvRCxRQUNiaUQsT0FBTyxJQUVBQSxNQUFPLE9BRWxCLE1BQ0YsS0FBSyxFQUlILElBRkEsSUFDSXpzRCxHQURFd3FELEVBQVd6Z0UsS0FBS3VoRSxhQUFhdmhFLEtBQUsrZ0UsVUFBWSxFQUFJL3BDLElBQ3JDeXBDLEVBQVMvaUUsT0FBUyxHQUFLLEVBQ25DdVksR0FBSyxJQUlZLEtBRHRCa3BELEVBQWdCc0IsRUFBU3hxRCxHQUFHalcsS0FBS3kvRCxVQUhwQnhwRCxJQU1OLEdBQUlrcEQsYUFBeUJ4VyxRQUVsQyxPQURBM29ELEtBQUt3b0QsZUFBZSxFQUFxQmlZLEVBQVV4cUQsRUFBRzBxRCxFQUFZemtFLEdBQzNEaWpFLEVBR1BscEQsRUFBSSxHQUNOalcsS0FBS2toRSxjQUFjbGhFLEtBQUsrZ0UsVUFBWSxFQUFJL3BDLEVBQU1oM0IsS0FBS3kvRCxTQUVyRHovRCxLQUFLcXFELG1CQUFxQixFQUMxQixNQUNGLEtBQUssRUFFSCxHQUNFLE9BQVFyekIsR0FDTixLQUFLLEdBQ0hoM0IsS0FBS3kvRCxRQUFRRixTQUFTLEdBQ3RCLE1BQ0YsS0FBSyxHQUNIdi9ELEtBQUt5L0QsUUFBUWtELGFBQWEsR0FDMUIsTUFDRixRQUNFM2lFLEtBQUt5L0QsUUFBUW1ELFNBQVM1ckMsRUFBTyxhQUV4Qjk2QixFQUFJd0IsSUFBV3M1QixFQUFPenFCLEVBQUtyUSxJQUFNLElBQVE4NkIsRUFBTyxJQUMzRDk2QixJQUNBLE1BQ0YsS0FBSyxFQUNIOEQsS0FBSytnRSxXQUFhLEVBQ2xCL2dFLEtBQUsrZ0UsVUFBWS9wQyxFQUNqQixNQUNGLEtBQUssR0FHSCxJQUZBLElBQU02ckMsRUFBYzdpRSxLQUFLd2hFLGFBQWF4aEUsS0FBSytnRSxVQUFZLEVBQUkvcEMsR0FDdkQ4ckMsRUFBS0QsRUFBY0EsRUFBWW5sRSxPQUFTLEdBQUssRUFDMUNvbEUsR0FBTSxJQUlXLEtBRHRCM0QsRUFBZ0IwRCxFQUFZQyxNQUhkQSxJQU1QLEdBQUkzRCxhQUF5QnhXLFFBRWxDLE9BREEzb0QsS0FBS3dvRCxlQUFlLEVBQXFCcWEsRUFBYUMsRUFBSW5DLEVBQVl6a0UsR0FDL0RpakUsRUFHUDJELEVBQUssR0FDUDlpRSxLQUFLbWhFLGNBQWNuaEUsS0FBSytnRSxVQUFZLEVBQUkvcEMsR0FFMUNoM0IsS0FBS3FxRCxtQkFBcUIsRUFDMUIsTUFDRixLQUFLLEdBQ0hycUQsS0FBS3kvRCxRQUFReGlELFFBQ2JqZCxLQUFLeS9ELFFBQVFGLFNBQVMsR0FDdEJ2L0QsS0FBSytnRSxTQUFXLEVBQ2hCLE1BQ0YsS0FBSyxHQUNIL2dFLEtBQUsyaEUsV0FBVzdoQixLQUFLOS9DLEtBQUsrZ0UsVUFBWSxFQUFJL3BDLEVBQU1oM0IsS0FBS3kvRCxTQUNyRCxNQUNGLEtBQUssR0FHSCxJQUFLLElBQUksRUFBSXZqRSxFQUFJLEtBQU8sRUFDdEIsR0FBSSxHQUFLd0IsR0FBK0IsTUFBcEJzNUIsRUFBT3pxQixFQUFLLEtBQXlCLEtBQVR5cUIsR0FBMEIsS0FBVEEsR0FBa0JBLEVBQU8sS0FBUUEsRUFBT2dwQyxFQUFzQixDQUM3SGhnRSxLQUFLMmhFLFdBQVczaEIsSUFBSXp6QyxFQUFNclEsRUFBRyxHQUM3QkEsRUFBSSxFQUFJLEVBQ1IsTUFHSixNQUNGLEtBQUssR0FFSCxHQURBaWpFLEVBQWdCbi9ELEtBQUsyaEUsV0FBV3hoQixPQUFnQixLQUFUbnBCLEdBQTBCLEtBQVRBLEdBR3RELE9BREFoM0IsS0FBS3dvRCxlQUFlLEVBQXFCLEdBQUksRUFBR21ZLEVBQVl6a0UsR0FDckRpakUsRUFFSSxLQUFUbm9DLElBQWUycEMsR0FBYyxHQUNqQzNnRSxLQUFLeS9ELFFBQVF4aUQsUUFDYmpkLEtBQUt5L0QsUUFBUUYsU0FBUyxHQUN0QnYvRCxLQUFLK2dFLFNBQVcsRUFDaEIvZ0UsS0FBS3FxRCxtQkFBcUIsRUFDMUIsTUFDRixLQUFLLEVBQ0hycUQsS0FBS3loRSxXQUFXaGpFLFFBQ2hCLE1BQ0YsS0FBSyxFQUVILElBQUssSUFBSSxFQUFJdkMsRUFBSSxHQUFLLElBQ3BCLEdBQUksR0FBS3dCLElBQVdzNUIsRUFBT3pxQixFQUFLLElBQU0sSUFBU3lxQixFQUFPLEtBQVFBLEVBQU9ncEMsRUFBc0IsQ0FDekZoZ0UsS0FBS3loRSxXQUFXemhCLElBQUl6ekMsRUFBTXJRLEVBQUcsR0FDN0JBLEVBQUksRUFBSSxFQUNSLE1BR0osTUFDRixLQUFLLEVBRUgsR0FEQWlqRSxFQUFnQm4vRCxLQUFLeWhFLFdBQVcvaUUsSUFBYSxLQUFUczRCLEdBQTBCLEtBQVRBLEdBR25ELE9BREFoM0IsS0FBS3dvRCxlQUFlLEVBQXFCLEdBQUksRUFBR21ZLEVBQVl6a0UsR0FDckRpakUsRUFFSSxLQUFUbm9DLElBQWUycEMsR0FBYyxHQUNqQzNnRSxLQUFLeS9ELFFBQVF4aUQsUUFDYmpkLEtBQUt5L0QsUUFBUUYsU0FBUyxHQUN0QnYvRCxLQUFLK2dFLFNBQVcsRUFDaEIvZ0UsS0FBS3FxRCxtQkFBcUIsRUFHOUJycUQsS0FBSzhnRSxhQUE0QixHQUFiSCxJQUcxQixFQXJqQkEsQ0FBMEMsRUFBQTk5RCxZQUE3QixFQUFBMjlDLHFCQUFBQSxtR0NoT2IsY0FDQSxTQUdNNmQsRUFBZ0MsR0FFdEMsMEJBQ1UsS0FBQW5oQyxPQUFTLEVBQ1QsS0FBQXNoQyxRQUFVSCxFQUNWLEtBQUE1N0IsS0FBTyxFQUNQLEtBQUE2N0IsVUFBNkNsMUQsT0FBT20xRCxPQUFPLE1BQzNELEtBQUFHLFdBQXFDLGFBQ3JDLEtBQUFDLE9BQStCLENBQ3JDN2MsUUFBUSxFQUNSOGMsYUFBYyxFQUNkQyxhQUFhLEdBd0tqQixPQXJLUyxZQUFBQyxnQkFBUCxTQUF1QmpoRCxFQUFlelEsUUFDTnpILElBQTFCM0YsS0FBS3MrRCxVQUFVemdELEtBQ2pCN2QsS0FBS3MrRCxVQUFVemdELEdBQVMsSUFFMUIsSUFBTWtoRCxFQUFjLytELEtBQUtzK0QsVUFBVXpnRCxHQUVuQyxPQURBa2hELEVBQVk5OUQsS0FBS21NLEdBQ1YsQ0FDTHROLFFBQVMsV0FDUCxJQUFNay9ELEVBQWVELEVBQVk5dEQsUUFBUTdELElBQ25CLElBQWxCNHhELEdBQ0ZELEVBQVl6dUQsT0FBTzB1RCxFQUFjLE1BS2xDLFlBQUFDLGFBQVAsU0FBb0JwaEQsR0FDZDdkLEtBQUtzK0QsVUFBVXpnRCxXQUFlN2QsS0FBS3MrRCxVQUFVemdELElBRTVDLFlBQUFxaEQsbUJBQVAsU0FBMEI5eEQsR0FDeEJwTixLQUFLMCtELFdBQWF0eEQsR0FHYixZQUFBdE4sUUFBUCxXQUNFRSxLQUFLcytELFVBQVlsMUQsT0FBT20xRCxPQUFPLE1BQy9CditELEtBQUswK0QsV0FBYSxhQUNsQjErRCxLQUFLdytELFFBQVVILEdBR1YsWUFBQXBoRCxNQUFQLFdBRUUsR0FBb0IsSUFBaEJqZCxLQUFLazlCLE9BQ1AsSUFBSyxJQUFJam5CLEVBQUlqVyxLQUFLMitELE9BQU83YyxPQUFTOWhELEtBQUsyK0QsT0FBT0MsYUFBZSxFQUFJNStELEtBQUt3K0QsUUFBUTlnRSxPQUFTLEVBQUd1WSxHQUFLLElBQUtBLEVBQ2xHalcsS0FBS3crRCxRQUFRdm9ELEdBQUd2WCxLQUFJLEdBR3hCc0IsS0FBSzIrRCxPQUFPN2MsUUFBUyxFQUNyQjloRCxLQUFLdytELFFBQVVILEVBQ2ZyK0QsS0FBS3lpQyxLQUFPLEVBQ1p6aUMsS0FBS2s5QixPQUFTLEdBR1IsWUFBQTZsQyxPQUFSLFdBRUUsR0FEQS9pRSxLQUFLdytELFFBQVV4K0QsS0FBS3MrRCxVQUFVdCtELEtBQUt5aUMsTUFBUTQ3QixFQUN0Q3IrRCxLQUFLdytELFFBQVE5Z0UsT0FHaEIsSUFBSyxJQUFJdVksRUFBSWpXLEtBQUt3K0QsUUFBUTlnRSxPQUFTLEVBQUd1WSxHQUFLLEVBQUdBLElBQzVDalcsS0FBS3crRCxRQUFRdm9ELEdBQUd4WCxhQUhsQnVCLEtBQUswK0QsV0FBVzErRCxLQUFLeWlDLElBQUssVUFRdEIsWUFBQXVnQyxLQUFSLFNBQWF6MkQsRUFBbUI5TixFQUFlQyxHQUM3QyxHQUFLc0IsS0FBS3crRCxRQUFROWdFLE9BR2hCLElBQUssSUFBSXVZLEVBQUlqVyxLQUFLdytELFFBQVE5Z0UsT0FBUyxFQUFHdVksR0FBSyxFQUFHQSxJQUM1Q2pXLEtBQUt3K0QsUUFBUXZvRCxHQUFHK3BDLElBQUl6ekMsRUFBTTlOLEVBQU9DLFFBSG5Dc0IsS0FBSzArRCxXQUFXMStELEtBQUt5aUMsSUFBSyxPQUFPLElBQUE0ZCxlQUFjOXpDLEVBQU05TixFQUFPQyxLQVF6RCxZQUFBRCxNQUFQLFdBRUV1QixLQUFLaWQsUUFDTGpkLEtBQUtrOUIsT0FBUyxHQVVULFlBQUE4aUIsSUFBUCxTQUFXenpDLEVBQW1COU4sRUFBZUMsR0FDM0MsR0FBb0IsSUFBaEJzQixLQUFLazlCLE9BQVQsQ0FHQSxHQUFvQixJQUFoQmw5QixLQUFLazlCLE9BQ1AsS0FBT3orQixFQUFRQyxHQUFLLENBQ2xCLElBQU1zNEIsRUFBT3pxQixFQUFLOU4sS0FDbEIsR0FBYSxLQUFUdTRCLEVBQWUsQ0FDakJoM0IsS0FBS2s5QixPQUFTLEVBQ2RsOUIsS0FBSytpRSxTQUNMLE1BRUYsR0FBSS9yQyxFQUFPLElBQVEsR0FBT0EsRUFFeEIsWUFEQWgzQixLQUFLazlCLE9BQVMsSUFHRSxJQUFkbDlCLEtBQUt5aUMsTUFDUHppQyxLQUFLeWlDLElBQU0sR0FFYnppQyxLQUFLeWlDLElBQWlCLEdBQVh6aUMsS0FBS3lpQyxJQUFXekwsRUFBTyxHQUdsQixJQUFoQmgzQixLQUFLazlCLFFBQStCeCtCLEVBQU1ELEVBQVEsR0FDcER1QixLQUFLZ2pFLEtBQUt6MkQsRUFBTTlOLEVBQU9DLEtBU3BCLFlBQUFBLElBQVAsU0FBVzBoRCxFQUFrQmhFLEdBQzNCLFFBRDJCLElBQUFBLElBQUFBLEdBQUEsR0FDUCxJQUFoQnA4QyxLQUFLazlCLE9BQVQsQ0FJQSxHQUFvQixJQUFoQmw5QixLQUFLazlCLE9BUVAsR0FKb0IsSUFBaEJsOUIsS0FBS2s5QixRQUNQbDlCLEtBQUsraUUsU0FHRi9pRSxLQUFLdytELFFBQVE5Z0UsT0FFWCxDQUNMLElBQUl5aEUsR0FBNEMsRUFDNUNscEQsRUFBSWpXLEtBQUt3K0QsUUFBUTlnRSxPQUFTLEVBQzFCbWhFLEdBQWMsRUFPbEIsR0FOSTcrRCxLQUFLMitELE9BQU83YyxTQUNkN3JDLEVBQUlqVyxLQUFLMitELE9BQU9DLGFBQWUsRUFDL0JPLEVBQWdCL2lCLEVBQ2hCeWlCLEVBQWM3K0QsS0FBSzIrRCxPQUFPRSxZQUMxQjcrRCxLQUFLMitELE9BQU83YyxRQUFTLElBRWxCK2MsSUFBaUMsSUFBbEJNLEVBQXlCLENBQzNDLEtBQU9scEQsR0FBSyxJQUVZLEtBRHRCa3BELEVBQWdCbi9ELEtBQUt3K0QsUUFBUXZvRCxHQUFHdlgsSUFBSTBoRCxJQUR2Qm5xQyxJQUlOLEdBQUlrcEQsYUFBeUJ4VyxRQUlsQyxPQUhBM29ELEtBQUsyK0QsT0FBTzdjLFFBQVMsRUFDckI5aEQsS0FBSzIrRCxPQUFPQyxhQUFlM29ELEVBQzNCalcsS0FBSzIrRCxPQUFPRSxhQUFjLEVBQ25CTSxFQUdYbHBELElBS0YsS0FBT0EsR0FBSyxFQUFHQSxJQUViLElBREFrcEQsRUFBZ0JuL0QsS0FBS3crRCxRQUFRdm9ELEdBQUd2WCxLQUFJLGNBQ1BpcUQsUUFJM0IsT0FIQTNvRCxLQUFLMitELE9BQU83YyxRQUFTLEVBQ3JCOWhELEtBQUsyK0QsT0FBT0MsYUFBZTNvRCxFQUMzQmpXLEtBQUsyK0QsT0FBT0UsYUFBYyxFQUNuQk0sT0FsQ1huL0QsS0FBSzArRCxXQUFXMStELEtBQUt5aUMsSUFBSyxNQUFPMmQsR0F3Q3JDcGdELEtBQUt3K0QsUUFBVUgsRUFDZnIrRCxLQUFLeWlDLEtBQU8sRUFDWnppQyxLQUFLazlCLE9BQVMsSUFFbEIsRUFqTEEsR0FBYSxFQUFBd2tDLFVBQUFBLEVBdUxiLGlCQUlFLFdBQW9CbEMsR0FBQSxLQUFBQSxTQUFBQSxFQUhaLEtBQUE1ZixNQUFRLEdBQ1IsS0FBQThmLFdBQXFCLEVBd0MvQixPQXBDUyxZQUFBamhFLE1BQVAsV0FDRXVCLEtBQUs0L0MsTUFBUSxHQUNiNS9DLEtBQUswL0QsV0FBWSxHQUdaLFlBQUExZixJQUFQLFNBQVd6ekMsRUFBbUI5TixFQUFlQyxHQUN2Q3NCLEtBQUswL0QsWUFHVDEvRCxLQUFLNC9DLFFBQVMsSUFBQVMsZUFBYzl6QyxFQUFNOU4sRUFBT0MsR0FDckNzQixLQUFLNC9DLE1BQU1saUQsT0FBUyxFQUFBMGdFLGdCQUN0QnArRCxLQUFLNC9DLE1BQVEsR0FDYjUvQyxLQUFLMC9ELFdBQVksS0FJZCxZQUFBaGhFLElBQVAsU0FBVzBoRCxHQUFYLFdBQ011ZixHQUFrQyxFQUN0QyxHQUFJMy9ELEtBQUswL0QsVUFDUEMsR0FBTSxPQUNELEdBQUl2ZixJQUNUdWYsRUFBTTMvRCxLQUFLdy9ELFNBQVN4L0QsS0FBSzQvQyxrQkFDTitJLFFBR2pCLE9BQU9nWCxFQUFJNzFCLE1BQUssU0FBQStlLEdBR2QsT0FGQSxFQUFLakosTUFBUSxHQUNiLEVBQUs4ZixXQUFZLEVBQ1Y3VyxLQU1iLE9BRkE3b0QsS0FBSzQvQyxNQUFRLEdBQ2I1L0MsS0FBSzAvRCxXQUFZLEVBQ1ZDLEdBRVgsRUExQ0EsR0FBYSxFQUFBMVksV0FBQUEsaUZDNUxiLElBQU1nYyxFQUFZLFdBdUJsQixhQXlDRSxXQUFtQmxTLEVBQStCbVMsR0FDaEQsUUFEaUIsSUFBQW5TLElBQUFBLEVBQUEsU0FBK0IsSUFBQW1TLElBQUFBLEVBQUEsSUFBL0IsS0FBQW5TLFVBQUFBLEVBQStCLEtBQUFtUyxtQkFBQUEsRUFDNUNBLEVBL0RjLElBZ0VoQixNQUFNLElBQUkva0UsTUFBTSxtREFFbEI2QixLQUFLKy9DLE9BQVMsSUFBSW9qQixXQUFXcFMsR0FDN0Ivd0QsS0FBS3RDLE9BQVMsRUFDZHNDLEtBQUtvakUsV0FBYSxJQUFJRCxXQUFXRCxHQUNqQ2xqRSxLQUFLcWpFLGlCQUFtQixFQUN4QnJqRSxLQUFLc2pFLGNBQWdCLElBQUlDLFlBQVl4UyxHQUNyQy93RCxLQUFLd2pFLGVBQWdCLEVBQ3JCeGpFLEtBQUt5akUsa0JBQW1CLEVBQ3hCempFLEtBQUswakUsYUFBYyxFQWtKdkIsT0FwTGdCLEVBQUFDLFVBQWQsU0FBd0IxdEMsR0FDdEIsSUFBTThwQixFQUFTLElBQUl1ZixFQUNuQixJQUFLcnBDLEVBQU92NEIsT0FDVixPQUFPcWlELEVBR1QsSUFBSyxJQUFJN2pELEVBQUtzOUMsTUFBTW1CLFFBQVExa0IsRUFBTyxJQUFPLEVBQUksRUFBRy81QixFQUFJKzVCLEVBQU92NEIsU0FBVXhCLEVBQUcsQ0FDdkUsSUFBTXVILEVBQVF3eUIsRUFBTy81QixHQUNyQixHQUFJczlDLE1BQU1tQixRQUFRbDNDLEdBQ2hCLElBQUssSUFBSW1nRSxFQUFJLEVBQUdBLEVBQUluZ0UsRUFBTS9GLFNBQVVrbUUsRUFDbEM3akIsRUFBTzRpQixZQUFZbC9ELEVBQU1tZ0UsU0FHM0I3akIsRUFBT3dmLFNBQVM5N0QsR0FHcEIsT0FBT3M4QyxHQXdCRixZQUFBeEYsTUFBUCxXQUNFLElBQU1zcEIsRUFBWSxJQUFJdkUsRUFBT3QvRCxLQUFLK3dELFVBQVcvd0QsS0FBS2tqRSxvQkFTbEQsT0FSQVcsRUFBVTlqQixPQUFPMXFDLElBQUlyVixLQUFLKy9DLFFBQzFCOGpCLEVBQVVubUUsT0FBU3NDLEtBQUt0QyxPQUN4Qm1tRSxFQUFVVCxXQUFXL3RELElBQUlyVixLQUFLb2pFLFlBQzlCUyxFQUFVUixpQkFBbUJyakUsS0FBS3FqRSxpQkFDbENRLEVBQVVQLGNBQWNqdUQsSUFBSXJWLEtBQUtzakUsZUFDakNPLEVBQVVMLGNBQWdCeGpFLEtBQUt3akUsY0FDL0JLLEVBQVVKLGlCQUFtQnpqRSxLQUFLeWpFLGlCQUNsQ0ksRUFBVUgsWUFBYzFqRSxLQUFLMGpFLFlBQ3RCRyxHQVNGLFlBQUF2aEIsUUFBUCxXQUVFLElBREEsSUFBTXVHLEVBQW1CLEdBQ2hCM3NELEVBQUksRUFBR0EsRUFBSThELEtBQUt0QyxTQUFVeEIsRUFBRyxDQUNwQzJzRCxFQUFJNW5ELEtBQUtqQixLQUFLKy9DLE9BQU83akQsSUFDckIsSUFBTXVDLEVBQVF1QixLQUFLc2pFLGNBQWNwbkUsSUFBTSxFQUNqQ3dDLEVBQThCLElBQXhCc0IsS0FBS3NqRSxjQUFjcG5FLEdBQzNCd0MsRUFBTUQsRUFBUSxHQUNoQm9xRCxFQUFJNW5ELEtBQUt1NEMsTUFBTTJQLFVBQVU5aEQsTUFBTXkyQyxLQUFLOTlDLEtBQUtvakUsV0FBWTNrRSxFQUFPQyxJQUdoRSxPQUFPbXFELEdBTUYsWUFBQTVyQyxNQUFQLFdBQ0VqZCxLQUFLdEMsT0FBUyxFQUNkc0MsS0FBS3FqRSxpQkFBbUIsRUFDeEJyakUsS0FBS3dqRSxlQUFnQixFQUNyQnhqRSxLQUFLeWpFLGtCQUFtQixFQUN4QnpqRSxLQUFLMGpFLGFBQWMsR0FVZCxZQUFBbkUsU0FBUCxTQUFnQjk3RCxHQUVkLEdBREF6RCxLQUFLMGpFLGFBQWMsRUFDZjFqRSxLQUFLdEMsUUFBVXNDLEtBQUsrd0QsVUFDdEIvd0QsS0FBS3dqRSxlQUFnQixNQUR2QixDQUlBLEdBQUkvL0QsR0FBUyxFQUNYLE1BQU0sSUFBSXRGLE1BQU0seUNBRWxCNkIsS0FBS3NqRSxjQUFjdGpFLEtBQUt0QyxRQUFVc0MsS0FBS3FqRSxrQkFBb0IsRUFBSXJqRSxLQUFLcWpFLGlCQUNwRXJqRSxLQUFLKy9DLE9BQU8vL0MsS0FBS3RDLFVBQVkrRixFQUFRdy9ELEVBQVlBLEVBQVl4L0QsSUFVeEQsWUFBQWsvRCxZQUFQLFNBQW1CbC9ELEdBRWpCLEdBREF6RCxLQUFLMGpFLGFBQWMsRUFDZDFqRSxLQUFLdEMsT0FHVixHQUFJc0MsS0FBS3dqRSxlQUFpQnhqRSxLQUFLcWpFLGtCQUFvQnJqRSxLQUFLa2pFLG1CQUN0RGxqRSxLQUFLeWpFLGtCQUFtQixNQUQxQixDQUlBLEdBQUloZ0UsR0FBUyxFQUNYLE1BQU0sSUFBSXRGLE1BQU0seUNBRWxCNkIsS0FBS29qRSxXQUFXcGpFLEtBQUtxakUsb0JBQXNCNS9ELEVBQVF3L0QsRUFBWUEsRUFBWXgvRCxFQUMzRXpELEtBQUtzakUsY0FBY3RqRSxLQUFLdEMsT0FBUyxPQU01QixZQUFBcXZELGFBQVAsU0FBb0I1akIsR0FDbEIsT0FBbUMsSUFBMUJucEMsS0FBS3NqRSxjQUFjbjZCLEtBQWdCbnBDLEtBQUtzakUsY0FBY242QixJQUFRLEdBQUssR0FRdkUsWUFBQThqQixhQUFQLFNBQW9COWpCLEdBQ2xCLElBQU0xcUMsRUFBUXVCLEtBQUtzakUsY0FBY242QixJQUFRLEVBQ25DenFDLEVBQWdDLElBQTFCc0IsS0FBS3NqRSxjQUFjbjZCLEdBQy9CLE9BQUl6cUMsRUFBTUQsRUFBUSxFQUNUdUIsS0FBS29qRSxXQUFXbGpCLFNBQVN6aEQsRUFBT0MsR0FFbEMsTUFPRixZQUFBb2xFLGdCQUFQLFdBRUUsSUFEQSxJQUFNajlELEVBQXNDLEdBQ25DM0ssRUFBSSxFQUFHQSxFQUFJOEQsS0FBS3RDLFNBQVV4QixFQUFHLENBQ3BDLElBQU11QyxFQUFRdUIsS0FBS3NqRSxjQUFjcG5FLElBQU0sRUFDakN3QyxFQUE4QixJQUF4QnNCLEtBQUtzakUsY0FBY3BuRSxHQUMzQndDLEVBQU1ELEVBQVEsSUFDaEJvSSxFQUFPM0ssR0FBSzhELEtBQUtvakUsV0FBVy83RCxNQUFNNUksRUFBT0MsSUFHN0MsT0FBT21JLEdBT0YsWUFBQSs3RCxTQUFQLFNBQWdCbi9ELEdBQ2QsSUFBSS9GLEVBQ0osS0FBSXNDLEtBQUt3akUsaUJBQ0Y5bEUsRUFBU3NDLEtBQUswakUsWUFBYzFqRSxLQUFLcWpFLGlCQUFtQnJqRSxLQUFLdEMsU0FDMURzQyxLQUFLMGpFLGFBQWUxakUsS0FBS3lqRSxrQkFGL0IsQ0FPQSxJQUFNTSxFQUFRL2pFLEtBQUswakUsWUFBYzFqRSxLQUFLb2pFLFdBQWFwakUsS0FBSysvQyxPQUNsRGlrQixFQUFNRCxFQUFNcm1FLEVBQVMsR0FDM0JxbUUsRUFBTXJtRSxFQUFTLElBQU1zbUUsRUFBTXg5RCxLQUFLMkIsSUFBVSxHQUFONjdELEVBQVd2Z0UsRUFBT3cvRCxHQUFheC9ELElBRXZFLEVBdE1BLEdBQWEsRUFBQTY3RCxPQUFBQSx1RkNqQmIsaUJBR0UsYUFGVSxLQUFBMkUsUUFBMEIsR0F5Q3RDLE9BcENTLFlBQUFua0UsUUFBUCxXQUNFLElBQUssSUFBSTVELEVBQUk4RCxLQUFLaWtFLFFBQVF2bUUsT0FBUyxFQUFHeEIsR0FBSyxFQUFHQSxJQUM1QzhELEtBQUtpa0UsUUFBUS9uRSxHQUFHZ29FLFNBQVNwa0UsV0FJdEIsWUFBQWkyQixVQUFQLFNBQWlCb3VDLEVBQW9CRCxHQUFyQyxXQUNRRSxFQUE0QixDQUNoQ0YsU0FBUSxFQUNScGtFLFFBQVNva0UsRUFBU3BrRSxRQUNsQit3QyxZQUFZLEdBRWQ3d0MsS0FBS2lrRSxRQUFRaGpFLEtBQUttakUsR0FDbEJGLEVBQVNwa0UsUUFBVSxXQUFNLFNBQUt1a0UscUJBQXFCRCxJQUNuREYsRUFBUzV0RCxTQUFTNnRELElBR1osWUFBQUUscUJBQVIsU0FBNkJELEdBQzNCLElBQUlBLEVBQVl2ekIsV0FBaEIsQ0FLQSxJQURBLElBQUk5NkIsR0FBUyxFQUNKN1osRUFBSSxFQUFHQSxFQUFJOEQsS0FBS2lrRSxRQUFRdm1FLE9BQVF4QixJQUN2QyxHQUFJOEQsS0FBS2lrRSxRQUFRL25FLEtBQU9rb0UsRUFBYSxDQUNuQ3J1RCxFQUFRN1osRUFDUixNQUdKLElBQWUsSUFBWDZaLEVBQ0YsTUFBTSxJQUFJNVgsTUFBTSx1REFFbEJpbUUsRUFBWXZ6QixZQUFhLEVBQ3pCdXpCLEVBQVl0a0UsUUFBUXFnRSxNQUFNaUUsRUFBWUYsVUFDdENsa0UsS0FBS2lrRSxRQUFRM3pELE9BQU95RixFQUFPLEtBRS9CLEVBMUNBLEdBQWEsRUFBQWtkLGFBQUFBLDBGQ05iLGNBQ0EsU0FFQSxhQUNFLFdBQ1VpQixFQUNRL21CLEdBRFIsS0FBQSttQixRQUFBQSxFQUNRLEtBQUEvbUIsS0FBQUEsRUFxQnBCLE9BbEJTLFlBQUFtM0QsS0FBUCxTQUFZaGtFLEdBRVYsT0FEQU4sS0FBS2swQixRQUFVNXpCLEVBQ1JOLE1BR1Qsc0JBQVcsc0JBQU8sS0FBbEIsV0FBK0IsT0FBT0EsS0FBS2swQixRQUFRcmlCLG1DQUNuRCxzQkFBVyxzQkFBTyxLQUFsQixXQUErQixPQUFPN1IsS0FBS2swQixRQUFRdGlCLG1DQUNuRCxzQkFBVyx3QkFBUyxLQUFwQixXQUFpQyxPQUFPNVIsS0FBS2swQixRQUFRN3hCLHVDQUNyRCxzQkFBVyxvQkFBSyxLQUFoQixXQUE2QixPQUFPckMsS0FBS2swQixRQUFRalUsdUNBQ2pELHNCQUFXLHFCQUFNLEtBQWpCLFdBQThCLE9BQU9qZ0IsS0FBS2swQixRQUFRM3pCLE1BQU03Qyx3Q0FDakQsWUFBQTZtRSxRQUFQLFNBQWUxeUQsR0FDYixJQUFNUixFQUFPclIsS0FBS2swQixRQUFRM3pCLE1BQU0rUSxJQUFJTyxHQUNwQyxHQUFLUixFQUdMLE9BQU8sSUFBSSxFQUFBbXpELGtCQUFrQm56RCxJQUV4QixZQUFBNjRDLFlBQVAsV0FBdUMsT0FBTyxJQUFJLEVBQUFqdEIsVUFDcEQsRUF4QkEsR0FBYSxFQUFBd25DLGNBQUFBLDhGQ0xiLGFBSUEsYUFDRSxXQUFvQkMsR0FBQSxLQUFBQSxNQUFBQSxFQWtCdEIsT0FoQkUsc0JBQVcsd0JBQVMsS0FBcEIsV0FBa0MsT0FBTzFrRSxLQUFLMGtFLE1BQU1qekMsMkNBQ3BELHNCQUFXLHFCQUFNLEtBQWpCLFdBQThCLE9BQU96eEIsS0FBSzBrRSxNQUFNaG5FLHdDQUN6QyxZQUFBaW5FLFFBQVAsU0FBZS95RCxFQUFXc25CLEdBQ3hCLEtBQUl0bkIsRUFBSSxHQUFLQSxHQUFLNVIsS0FBSzBrRSxNQUFNaG5FLFFBSTdCLE9BQUl3N0IsR0FDRmw1QixLQUFLMGtFLE1BQU10bUMsU0FBU3hzQixFQUFHc25CLEdBQ2hCQSxHQUVGbDVCLEtBQUswa0UsTUFBTXRtQyxTQUFTeHNCLEVBQUcsSUFBSSxFQUFBcXJCLFdBRTdCLFlBQUErSCxrQkFBUCxTQUF5Qm92QixFQUFxQnRyQyxFQUFzQkUsR0FDbEUsT0FBT2hwQixLQUFLMGtFLE1BQU0xL0Isa0JBQWtCb3ZCLEVBQVd0ckMsRUFBYUUsSUFFaEUsRUFuQkEsR0FBYSxFQUFBdzdDLGtCQUFBQSwrRkNIYixjQUNBLFVBR0EsYUFNRSxXQUFvQnp4QyxHQUFwQixXQUFvQixLQUFBQSxNQUFBQSxFQUhaLEtBQUE2eEMsZ0JBQWtCLElBQUksRUFBQS8yRCxhQUk1QjdOLEtBQUt1M0QsUUFBVSxJQUFJLEVBQUFrTixjQUFjemtFLEtBQUsreUIsTUFBTXZVLFFBQVErSixPQUFRLFVBQzVEdm9CLEtBQUs2a0UsV0FBYSxJQUFJLEVBQUFKLGNBQWN6a0UsS0FBSyt5QixNQUFNdlUsUUFBUXlILElBQUssYUFDNURqbUIsS0FBSyt5QixNQUFNdlUsUUFBUWtQLGtCQUFpQixXQUFNLFNBQUtrM0MsZ0JBQWdCbHlELEtBQUssRUFBSytMLFdBYTdFLE9BbEJFLHNCQUFXLDZCQUFjLEtBQXpCLFdBQWtELE9BQU96ZSxLQUFLNGtFLGdCQUFnQjMyRCx1Q0FPOUUsc0JBQVcscUJBQU0sS0FBakIsV0FDRSxHQUFJak8sS0FBSyt5QixNQUFNdlUsUUFBUUMsU0FBV3plLEtBQUsreUIsTUFBTXZVLFFBQVErSixPQUFVLE9BQU92b0IsS0FBS3VvQixPQUMzRSxHQUFJdm9CLEtBQUsreUIsTUFBTXZVLFFBQVFDLFNBQVd6ZSxLQUFLK3lCLE1BQU12VSxRQUFReUgsSUFBTyxPQUFPam1CLEtBQUs4a0UsVUFDeEUsTUFBTSxJQUFJM21FLE1BQU0sa0ZBRWxCLHNCQUFXLHFCQUFNLEtBQWpCLFdBQ0UsT0FBTzZCLEtBQUt1M0QsUUFBUStNLEtBQUt0a0UsS0FBSyt5QixNQUFNdlUsUUFBUStKLHlDQUU5QyxzQkFBVyx3QkFBUyxLQUFwQixXQUNFLE9BQU92b0IsS0FBSzZrRSxXQUFXUCxLQUFLdGtFLEtBQUsreUIsTUFBTXZVLFFBQVF5SCxzQ0FFbkQsRUF0QkEsR0FBYSxFQUFBa08sbUJBQUFBLG9GQ0RiLGlCQUNFLFdBQW9CcEIsR0FBQSxLQUFBQSxNQUFBQSxFQTBCdEIsT0F4QlMsWUFBQW1xQixtQkFBUCxTQUEwQnR0QyxFQUF5QjhsQixHQUNqRCxPQUFPMTFCLEtBQUsreUIsTUFBTW1xQixtQkFBbUJ0dEMsR0FBSSxTQUFDbXdDLEdBQW9CLE9BQUFycUIsRUFBU3FxQixFQUFPdUMsZUFFekUsWUFBQXlpQixjQUFQLFNBQXFCbjFELEVBQXlCOGxCLEdBQzVDLE9BQU8xMUIsS0FBS2s5QyxtQkFBbUJ0dEMsRUFBSThsQixJQUU5QixZQUFBdW5CLG1CQUFQLFNBQTBCcnRDLEVBQXlCOGxCLEdBQ2pELE9BQU8xMUIsS0FBSyt5QixNQUFNa3FCLG1CQUFtQnJ0QyxHQUFJLFNBQUNyRCxFQUFjd3pDLEdBQW9CLE9BQUFycUIsRUFBU25wQixFQUFNd3pDLEVBQU91QyxlQUU3RixZQUFBMGlCLGNBQVAsU0FBcUJwMUQsRUFBeUI4bEIsR0FDNUMsT0FBTzExQixLQUFLaTlDLG1CQUFtQnJ0QyxFQUFJOGxCLElBRTlCLFlBQUFzbkIsbUJBQVAsU0FBMEJwdEMsRUFBeUJ4QyxHQUNqRCxPQUFPcE4sS0FBSyt5QixNQUFNaXFCLG1CQUFtQnB0QyxFQUFJeEMsSUFFcEMsWUFBQTYzRCxjQUFQLFNBQXFCcjFELEVBQXlCeEMsR0FDNUMsT0FBT3BOLEtBQUtnOUMsbUJBQW1CcHRDLEVBQUl4QyxJQUU5QixZQUFBK3ZDLG1CQUFQLFNBQTBCdC9CLEVBQWU2WCxHQUN2QyxPQUFPMTFCLEtBQUsreUIsTUFBTW9xQixtQkFBbUJ0L0IsRUFBTzZYLElBRXZDLFlBQUF3dkMsY0FBUCxTQUFxQnJuRCxFQUFlNlgsR0FDbEMsT0FBTzExQixLQUFLbTlDLG1CQUFtQnQvQixFQUFPNlgsSUFFMUMsRUEzQkEsR0FBYSxFQUFBMUIsVUFBQUEscUZDRGIsaUJBQ0UsV0FBb0JqQixHQUFBLEtBQUFBLE1BQUFBLEVBaUJ0QixPQWZTLFlBQUExMEIsU0FBUCxTQUFnQjhtRSxHQUNkbmxFLEtBQUsreUIsTUFBTTJvQixlQUFlcjlDLFNBQVM4bUUsSUFHckMsc0JBQVcsdUJBQVEsS0FBbkIsV0FDRSxPQUFPbmxFLEtBQUsreUIsTUFBTTJvQixlQUFlMHBCLDBDQUduQyxzQkFBVyw0QkFBYSxLQUF4QixXQUNFLE9BQU9wbEUsS0FBSyt5QixNQUFNMm9CLGVBQWUycEIsbUJBR25DLFNBQXlCOUksR0FDdkJ2OEQsS0FBSyt5QixNQUFNMm9CLGVBQWUycEIsY0FBZ0I5SSxtQ0FFOUMsRUFsQkEsR0FBYSxFQUFBdG9DLFdBQUFBLDYvQkNIYixjQUNBLFVBRUEsVUFDQSxTQUdhLEVBQUEyb0IsYUFBZSxFQUNmLEVBQUFDLGFBQWUsRUFFNUIsa0JBbUJFLFdBQzJCMWtDLEdBRDNCLE1BR0UsY0FBTyxZQUZrQixFQUFBQSxnQkFBQUEsRUFicEIsRUFBQW10RCxpQkFBMkIsRUFFMUIsRUFBQS9tRSxVQUFZLElBQUksRUFBQXNQLGFBRWhCLEVBQUE2VyxVQUFZLElBQUksRUFBQTdXLGFBWXRCLEVBQUttQixLQUFPeEksS0FBS3dCLElBQUltUSxFQUFnQm1CLFdBQVd0SyxNQUFRLEVBQUcsRUFBQTR0QyxjQUMzRCxFQUFLMS9DLEtBQU9zSixLQUFLd0IsSUFBSW1RLEVBQWdCbUIsV0FBV3BjLE1BQVEsRUFBRyxFQUFBMi9DLGNBQzNELEVBQUtyK0IsUUFBVSxJQUFJLEVBQUFrNUMsVUFBVXYvQyxFQUFpQixLQWdKbEQsT0F6S21DLE9BVWpDLHNCQUFXLHVCQUFRLEtBQW5CLFdBQWdFLE9BQU9uWSxLQUFLekIsVUFBVTBQLHVDQUV0RixzQkFBVyx1QkFBUSxLQUFuQixXQUF3QyxPQUFPak8sS0FBSzBrQixVQUFVelcsdUNBRTlELHNCQUFXLHFCQUFNLEtBQWpCLFdBQStCLE9BQU9qTyxLQUFLd2UsUUFBUUMsd0NBYzVDLFlBQUEzZSxRQUFQLFdBQ0UsWUFBTUEsUUFBTyxXQUNiRSxLQUFLd2UsUUFBUTFlLFdBR1IsWUFBQXlqQixPQUFQLFNBQWN2VSxFQUFjOVIsR0FDMUI4QyxLQUFLZ1AsS0FBT0EsRUFDWmhQLEtBQUs5QyxLQUFPQSxFQUNaOEMsS0FBS3dlLFFBQVErRSxPQUFPdlUsRUFBTTlSLEdBQzFCOEMsS0FBS3dlLFFBQVFZLGNBQWNwZixLQUFLZ1AsTUFDaENoUCxLQUFLekIsVUFBVW1VLEtBQUssQ0FBRTFELEtBQUksRUFBRTlSLEtBQUksS0FHM0IsWUFBQStmLE1BQVAsV0FDRWpkLEtBQUt3ZSxRQUFRdkIsUUFDYmpkLEtBQUtzbEUsaUJBQWtCLEdBT2xCLFlBQUF4b0IsT0FBUCxTQUFjQyxFQUEyQnRyQixRQUFBLElBQUFBLElBQUFBLEdBQUEsR0FDdkMsSUFFSXVoQyxFQUZFMXlELEVBQVNOLEtBQUtNLFFBR3BCMHlELEVBQVVoekQsS0FBS3VsRSxtQkFDQ3ZTLEVBQVF0MUQsU0FBV3NDLEtBQUtnUCxNQUFRZ2tELEVBQVF4aEQsTUFBTSxLQUFPdXJDLEVBQVUvMkMsSUFBTWd0RCxFQUFRdmpCLE1BQU0sS0FBT3NOLEVBQVVoM0MsS0FDbEhpdEQsRUFBVTF5RCxFQUFPd3FCLGFBQWFpeUIsRUFBV3RyQixHQUN6Q3p4QixLQUFLdWxFLGlCQUFtQnZTLEdBRTFCQSxFQUFRdmhDLFVBQVlBLEVBRXBCLElBQU0rekMsRUFBU2xsRSxFQUFPMmYsTUFBUTNmLEVBQU80dEIsVUFDL0J1M0MsRUFBWW5sRSxFQUFPMmYsTUFBUTNmLEVBQU8yN0MsYUFFeEMsR0FBeUIsSUFBckIzN0MsRUFBTzR0QixVQUFpQixDQUUxQixJQUFNdzNDLEVBQXNCcGxFLEVBQU9DLE1BQU1vbEUsT0FHckNGLElBQWNubEUsRUFBT0MsTUFBTTdDLE9BQVMsRUFDbENnb0UsRUFDRnBsRSxFQUFPQyxNQUFNdzVDLFVBQVU4YixTQUFTN0MsR0FFaEMxeUQsRUFBT0MsTUFBTVUsS0FBSyt4RCxFQUFRelksU0FHNUJqNkMsRUFBT0MsTUFBTStQLE9BQU9tMUQsRUFBWSxFQUFHLEVBQUd6UyxFQUFRelksU0FJM0NtckIsRUFTQzFsRSxLQUFLc2xFLGtCQUNQaGxFLEVBQU8rQixNQUFRbUUsS0FBS3dCLElBQUkxSCxFQUFPK0IsTUFBUSxFQUFHLEtBVDVDL0IsRUFBTzJmLFFBRUZqZ0IsS0FBS3NsRSxpQkFDUmhsRSxFQUFPK0IsYUFTTixDQUdMLElBQU04ckQsRUFBcUJzWCxFQUFZRCxFQUFTLEVBQ2hEbGxFLEVBQU9DLE1BQU02NUMsY0FBY29yQixFQUFTLEVBQUdyWCxFQUFxQixHQUFJLEdBQ2hFN3RELEVBQU9DLE1BQU04VSxJQUFJb3dELEVBQVd6UyxFQUFRelksU0FLakN2NkMsS0FBS3NsRSxrQkFDUmhsRSxFQUFPK0IsTUFBUS9CLEVBQU8yZixPQUd4QmpnQixLQUFLMGtCLFVBQVVoUyxLQUFLcFMsRUFBTytCLFFBVXRCLFlBQUFuQixZQUFQLFNBQW1CMm1CLEVBQWN6RCxFQUErQnZULEdBQzlELElBQU12USxFQUFTTixLQUFLTSxPQUNwQixHQUFJdW5CLEVBQU8sRUFBRyxDQUNaLEdBQXFCLElBQWpCdm5CLEVBQU8rQixNQUNULE9BRUZyQyxLQUFLc2xFLGlCQUFrQixPQUNkejlDLEVBQU92bkIsRUFBTytCLE9BQVMvQixFQUFPMmYsUUFDdkNqZ0IsS0FBS3NsRSxpQkFBa0IsR0FHekIsSUFBTU0sRUFBV3RsRSxFQUFPK0IsTUFDeEIvQixFQUFPK0IsTUFBUW1FLEtBQUt3QixJQUFJeEIsS0FBSzJCLElBQUk3SCxFQUFPK0IsTUFBUXdsQixFQUFNdm5CLEVBQU8yZixPQUFRLEdBR2pFMmxELElBQWF0bEUsRUFBTytCLFFBSW5CK2hCLEdBQ0hwa0IsS0FBSzBrQixVQUFVaFMsS0FBS3BTLEVBQU8rQixTQVF4QixZQUFBaXpCLFlBQVAsU0FBbUJDLEdBQ2pCdjFCLEtBQUtrQixZQUFZcTBCLEdBQWF2MUIsS0FBSzlDLEtBQU8sS0FNckMsWUFBQXM0QixZQUFQLFdBQ0V4MUIsS0FBS2tCLGFBQWFsQixLQUFLTSxPQUFPK0IsUUFNekIsWUFBQWluQixlQUFQLFdBQ0V0cEIsS0FBS2tCLFlBQVlsQixLQUFLTSxPQUFPMmYsTUFBUWpnQixLQUFLTSxPQUFPK0IsUUFHNUMsWUFBQW96QixhQUFQLFNBQW9CcGtCLEdBQ2xCLElBQU13MEQsRUFBZXgwRCxFQUFPclIsS0FBS00sT0FBTytCLE1BQ25CLElBQWpCd2pFLEdBQ0Y3bEUsS0FBS2tCLFlBQVkya0UsSUF0S0csR0FvQnJCLE1BQUFqc0Qsa0JBcEJRc2hDLEdBQWIsQ0FBbUMsRUFBQXI0QyxZQUF0QixFQUFBcTRDLGNBQUFBLHlGQ1BiLDhCQUlTLEtBQUE0cUIsT0FBaUIsRUFFaEIsS0FBQUMsVUFBc0MsR0FtQmhELE9BakJTLFlBQUE5b0QsTUFBUCxXQUNFamQsS0FBS3VwRCxhQUFVNWpELEVBQ2YzRixLQUFLK2xFLFVBQVksR0FDakIvbEUsS0FBSzhsRSxPQUFTLEdBR1QsWUFBQTlkLFVBQVAsU0FBaUJ2aUQsR0FDZnpGLEtBQUs4bEUsT0FBU3JnRSxFQUNkekYsS0FBS3VwRCxRQUFVdnBELEtBQUsrbEUsVUFBVXRnRSxJQUd6QixZQUFBdW1ELFlBQVAsU0FBbUJ2bUQsRUFBVzhqRCxHQUM1QnZwRCxLQUFLK2xFLFVBQVV0Z0UsR0FBSzhqRCxFQUNoQnZwRCxLQUFLOGxFLFNBQVdyZ0UsSUFDbEJ6RixLQUFLdXBELFFBQVVBLElBR3JCLEVBekJBLEdBQWEsRUFBQTFOLGVBQUFBLHdnQkNKYixjQUNBLFVBTU1tcUIsRUFBeUQsQ0FNN0RDLEtBQU0sQ0FDSnIvQyxPQUFRLEVBQ1JzL0MsU0FBVSxXQUFNLFdBT2xCQyxJQUFLLENBQ0h2L0MsT0FBUSxFQUNScy9DLFNBQVUsU0FBQzVvRSxHQUVULE9BQWlCLElBQWJBLEVBQUU0akIsUUFBaUQsSUFBYjVqQixFQUFFaW9CLFNBSTVDam9CLEVBQUV5b0IsTUFBTyxFQUNUem9CLEVBQUUyb0IsS0FBTSxFQUNSM29CLEVBQUV1RCxPQUFRLEdBQ0gsS0FRWHVsRSxNQUFPLENBQ0x4L0MsT0FBUSxHQUNScy9DLFNBQVUsU0FBQzVvRSxHQUVULE9BQWlCLEtBQWJBLEVBQUVpb0IsU0FXVjhnRCxLQUFNLENBQ0p6L0MsT0FBUSxHQUNScy9DLFNBQVUsU0FBQzVvRSxHQUVULE9BQWlCLEtBQWJBLEVBQUVpb0IsUUFBZ0QsSUFBYmpvQixFQUFFNGpCLFNBVy9Db2xELElBQUssQ0FDSDEvQyxPQUNFLEdBRUZzL0MsU0FBVSxTQUFDNW9FLEdBQXVCLFlBV3RDLFNBQVNpcEUsRUFBVWpwRSxFQUFvQmtwRSxHQUNyQyxJQUFJeHZDLEdBQVExNUIsRUFBRXlvQixLQUFPLEdBQWlCLElBQU16b0IsRUFBRXVELE1BQVEsRUFBa0IsSUFBTXZELEVBQUUyb0IsSUFBTSxFQUFnQixHQW9CdEcsT0FuQmlCLElBQWIzb0IsRUFBRTRqQixRQUNKOFYsR0FBUSxHQUNSQSxHQUFRMTVCLEVBQUVpb0IsU0FFVnlSLEdBQW1CLEVBQVgxNUIsRUFBRTRqQixPQUNLLEVBQVg1akIsRUFBRTRqQixTQUNKOFYsR0FBUSxJQUVLLEVBQVgxNUIsRUFBRTRqQixTQUNKOFYsR0FBUSxLQUVPLEtBQWIxNUIsRUFBRWlvQixPQUNKeVIsR0FBUSxHQUNjLElBQWIxNUIsRUFBRWlvQixRQUFrQ2loRCxJQUc3Q3h2QyxHQUFRLElBR0xBLEVBR1QsSUFBTXl2QyxFQUFJbjhDLE9BQU9DLGFBS1htOEMsRUFBd0QsQ0FNNURDLFFBQVMsU0FBQ3JwRSxHQUNSLElBQU15aUQsRUFBUyxDQUFDd21CLEVBQVVqcEUsR0FBRyxHQUFTLEdBQUlBLEVBQUV1b0IsSUFBTSxHQUFJdm9CLEVBQUV3b0IsSUFBTSxJQUs5RCxPQUFJaTZCLEVBQU8sR0FBSyxLQUFPQSxFQUFPLEdBQUssS0FBT0EsRUFBTyxHQUFLLElBQzdDLEdBRUYsTUFBUzBtQixFQUFFMW1CLEVBQU8sSUFBTTBtQixFQUFFMW1CLEVBQU8sSUFBTTBtQixFQUFFMW1CLEVBQU8sS0FPekQ2bUIsSUFBSyxTQUFDdHBFLEdBQ0osSUFBTWlnRCxFQUFzQixJQUFiamdELEVBQUVpb0IsUUFBOEMsSUFBYmpvQixFQUFFNGpCLE9BQW9DLElBQU0sSUFDOUYsTUFBTyxNQUFTcWxELEVBQVVqcEUsR0FBRyxHQUFLLElBQUlBLEVBQUV1b0IsSUFBRyxJQUFJdm9CLEVBQUV3b0IsSUFBTXkzQixJQW9CM0QsYUFRRSxXQUNtQ2h3QyxFQUNGb2lCLEdBREUsS0FBQXBpQixlQUFBQSxFQUNGLEtBQUFvaUIsYUFBQUEsRUFUekIsS0FBQWszQyxXQUFtRCxHQUNuRCxLQUFBQyxXQUFrRCxHQUNsRCxLQUFBQyxnQkFBMEIsR0FDMUIsS0FBQUMsZ0JBQTBCLEdBQzFCLEtBQUFDLGtCQUFvQixJQUFJLEVBQUFwNUQsYUFDeEIsS0FBQXE1RCxXQUFxQyxLQU8zQyxJQUFtQixVQUFBOTlELE9BQU93c0QsS0FBS29RLEdBQVosZUFBZ0MsQ0FBOUMsSUFBTSxFQUFJLEtBQW9DaG1FLEtBQUttbkUsWUFBWSxFQUFNbkIsRUFBa0IsSUFDNUYsSUFBbUIsVUFBQTU4RCxPQUFPd3NELEtBQUs4USxHQUFaLGVBQWdDLENBQTlDLElBQU0sRUFBSSxLQUFvQzFtRSxLQUFLb25FLFlBQVksRUFBTVYsRUFBa0IsSUFFNUYxbUUsS0FBS2lkLFFBaUlULE9BOUhTLFlBQUFrcUQsWUFBUCxTQUFtQkUsRUFBY0MsR0FDL0J0bkUsS0FBSzZtRSxXQUFXUSxHQUFRQyxHQUduQixZQUFBRixZQUFQLFNBQW1CQyxFQUFjRSxHQUMvQnZuRSxLQUFLOG1FLFdBQVdPLEdBQVFFLEdBRzFCLHNCQUFXLDZCQUFjLEtBQXpCLFdBQ0UsT0FBT3ZuRSxLQUFLK21FLHFCQU9kLFNBQTBCTSxHQUN4QixJQUFLcm5FLEtBQUs2bUUsV0FBV1EsR0FDbkIsTUFBTSxJQUFJbHBFLE1BQU0scUJBQXFCa3BFLEVBQUksS0FFM0NybkUsS0FBSyttRSxnQkFBa0JNLEVBQ3ZCcm5FLEtBQUtpbkUsa0JBQWtCdjBELEtBQUsxUyxLQUFLNm1FLFdBQVdRLEdBQU16Z0QseUNBVHBELHNCQUFXLG1DQUFvQixLQUEvQixXQUNFLE9BQXdELElBQWpENW1CLEtBQUs2bUUsV0FBVzdtRSxLQUFLK21FLGlCQUFpQm5nRCx3Q0FXL0Msc0JBQVcsNkJBQWMsS0FBekIsV0FDRSxPQUFPNW1CLEtBQUtnbkUscUJBR2QsU0FBMEJLLEdBQ3hCLElBQUtybkUsS0FBSzhtRSxXQUFXTyxHQUNuQixNQUFNLElBQUlscEUsTUFBTSxxQkFBcUJrcEUsRUFBSSxLQUUzQ3JuRSxLQUFLZ25FLGdCQUFrQkssbUNBR2xCLFlBQUFwcUQsTUFBUCxXQUNFamQsS0FBS2duQixlQUFpQixPQUN0QmhuQixLQUFLa3NELGVBQWlCLFVBQ3RCbHNELEtBQUtrbkUsV0FBYSxNQU1wQixzQkFBVywrQkFBZ0IsS0FBM0IsV0FDRSxPQUFPbG5FLEtBQUtpbkUsa0JBQWtCaDVELHVDQWF6QixZQUFBMlgsa0JBQVAsU0FBeUJ0b0IsR0FFdkIsR0FBSUEsRUFBRXVvQixJQUFNLEdBQUt2b0IsRUFBRXVvQixLQUFPN2xCLEtBQUt1TixlQUFleUIsTUFDdkMxUixFQUFFd29CLElBQU0sR0FBS3hvQixFQUFFd29CLEtBQU85bEIsS0FBS3VOLGVBQWVyUSxLQUMvQyxPQUFPLEVBSVQsR0FBaUIsSUFBYkksRUFBRTRqQixRQUFpRCxLQUFiNWpCLEVBQUVpb0IsT0FDMUMsT0FBTyxFQUVULEdBQWlCLElBQWJqb0IsRUFBRTRqQixRQUFnRCxLQUFiNWpCLEVBQUVpb0IsT0FDekMsT0FBTyxFQUVULEdBQWlCLElBQWJqb0IsRUFBRTRqQixTQUFrRCxJQUFiNWpCLEVBQUVpb0IsUUFBZ0QsSUFBYmpvQixFQUFFaW9CLFFBQ2hGLE9BQU8sRUFRVCxHQUpBam9CLEVBQUV1b0IsTUFDRnZvQixFQUFFd29CLE1BR2UsS0FBYnhvQixFQUFFaW9CLFFBQW1DdmxCLEtBQUtrbkUsWUFBY2xuRSxLQUFLd25FLGVBQWV4bkUsS0FBS2tuRSxXQUFZNXBFLEdBQy9GLE9BQU8sRUFJVCxJQUFLMEMsS0FBSzZtRSxXQUFXN21FLEtBQUsrbUUsaUJBQWlCYixTQUFTNW9FLEdBQ2xELE9BQU8sRUFJVCxJQUFNbXFFLEVBQVN6bkUsS0FBSzhtRSxXQUFXOW1FLEtBQUtnbkUsaUJBQWlCMXBFLEdBWXJELE9BWEltcUUsSUFFMkIsWUFBekJ6bkUsS0FBS2duRSxnQkFDUGhuRSxLQUFLMnZCLGFBQWErM0MsbUJBQW1CRCxHQUVyQ3puRSxLQUFLMnZCLGFBQWFuc0IsaUJBQWlCaWtFLEdBQVEsSUFJL0N6bkUsS0FBS2tuRSxXQUFhNXBFLEdBRVgsR0FHRixZQUFBd3BCLGNBQVAsU0FBcUJGLEdBQ25CLE1BQU8sQ0FDTCtnRCxRQUFrQixFQUFUL2dELEdBQ1RnaEQsTUFBZ0IsRUFBVGhoRCxHQUNQaWhELFFBQWtCLEVBQVRqaEQsR0FDVGtoRCxRQUFrQixFQUFUbGhELEdBQ1ROLFNBQW1CLEdBQVRNLEtBSU4sWUFBQTRnRCxlQUFSLFNBQXVCTyxFQUFxQkMsR0FDMUMsT0FBSUQsRUFBR2xpRCxNQUFRbWlELEVBQUduaUQsS0FDZGtpRCxFQUFHamlELE1BQVFraUQsRUFBR2xpRCxLQUNkaWlELEVBQUc3bUQsU0FBVzhtRCxFQUFHOW1ELFFBQ2pCNm1ELEVBQUd4aUQsU0FBV3lpRCxFQUFHemlELFFBQ2pCd2lELEVBQUdoaUQsT0FBU2lpRCxFQUFHamlELE1BQ2ZnaUQsRUFBRzloRCxNQUFRK2hELEVBQUcvaEQsS0FDZDhoRCxFQUFHbG5FLFFBQVVtbkUsRUFBR25uRSxPQTlJSyxHQVN4QixNQUFBZ1MsZ0JBQ0EsTUFBQTRkLGVBVlE0cUIsR0FBYixHQUFhLEVBQUFBLGlCQUFBQSw4OUJDOUpiLGNBQ0EsVUFFQSxVQUNBLFNBRU00c0IsRUFBd0I3K0QsT0FBT0MsT0FBTyxDQUMxQ29yQixZQUFZLElBR1J5ekMsRUFBOEM5K0QsT0FBT0MsT0FBTyxDQUNoRWdlLHVCQUF1QixFQUN2Qm1OLG1CQUFtQixFQUNuQnJ4QixvQkFBb0IsRUFDcEJ5eEIsUUFBUSxFQUNSRSxtQkFBbUIsRUFDbkJ2VixXQUFXLEVBQ1gwVixZQUFZLElBR2QsY0FrQkUsV0FFRTNMLEVBQ2lDL2IsRUFDSEMsRUFDSTJLLEdBTHBDLE1BT0UsY0FBTyxZQUowQixFQUFBNUssZUFBQUEsRUFDSCxFQUFBQyxZQUFBQSxFQUNJLEVBQUEySyxnQkFBQUEsRUFwQjdCLEVBQUF5UCxxQkFBK0IsRUFDL0IsRUFBQXNXLGdCQUEwQixFQU96QixFQUFBNGMsUUFBVSxFQUFLejhDLFNBQVMsSUFBSSxFQUFBd1AsY0FFNUIsRUFBQXM2RCxhQUFlLEVBQUs5cEUsU0FBUyxJQUFJLEVBQUF3UCxjQUVqQyxFQUFBZ3RDLFVBQVksRUFBS3g4QyxTQUFTLElBQUksRUFBQXdQLGNBV3BDLEVBQUt1NkQsZ0JBQWtCOStDLEVBQ3ZCLEVBQUtqckIsU0FBUyxDQUFFeUIsUUFBUyxXQUFNLFNBQUtzb0UscUJBQWtCemlFLEtBQ3RELEVBQUsrdUIsT0FBUSxJQUFBNmxCLE9BQU0wdEIsR0FDbkIsRUFBSzFrRSxpQkFBa0IsSUFBQWczQyxPQUFNMnRCLEtBcUNqQyxPQWxFaUMsT0FZL0Isc0JBQVcscUJBQU0sS0FBakIsV0FBc0MsT0FBT2xvRSxLQUFLODZDLFFBQVE3c0MsdUNBRTFELHNCQUFXLDBCQUFXLEtBQXRCLFdBQXlDLE9BQU9qTyxLQUFLbW9FLGFBQWFsNkQsdUNBRWxFLHNCQUFXLHVCQUFRLEtBQW5CLFdBQXdDLE9BQU9qTyxLQUFLNjZDLFVBQVU1c0MsdUNBZ0J2RCxZQUFBZ1AsTUFBUCxXQUNFamQsS0FBSzAwQixPQUFRLElBQUE2bEIsT0FBTTB0QixHQUNuQmpvRSxLQUFLdUQsaUJBQWtCLElBQUFnM0MsT0FBTTJ0QixJQUd4QixZQUFBMWtFLGlCQUFQLFNBQXdCK0ksRUFBYzg3RCxHQUVwQyxRQUZvQyxJQUFBQSxJQUFBQSxHQUFBLElBRWhDcm9FLEtBQUttWSxnQkFBZ0JtQixXQUFXZ3ZELGFBQXBDLENBS0EsSUFBTWhvRSxFQUFTTixLQUFLdU4sZUFBZWpOLE9BQy9CQSxFQUFPMmYsUUFBVTNmLEVBQU8rQixPQUMxQnJDLEtBQUtvb0Usa0JBSUhDLEdBQ0Zyb0UsS0FBS21vRSxhQUFhejFELE9BSXBCMVMsS0FBS3dOLFlBQVlnQyxNQUFNLGlCQUFpQmpELEVBQUksS0FBSyxXQUFNLE9BQUFBLEVBQUtHLE1BQU0sSUFBSUMsS0FBSSxTQUFBclAsR0FBSyxPQUFBQSxFQUFFMjdDLFdBQVcsU0FDNUZqNUMsS0FBSzg2QyxRQUFRcG9DLEtBQUtuRyxLQUdiLFlBQUFtN0QsbUJBQVAsU0FBMEJuN0QsR0FDcEJ2TSxLQUFLbVksZ0JBQWdCbUIsV0FBV2d2RCxlQUdwQ3RvRSxLQUFLd04sWUFBWWdDLE1BQU0sbUJBQW1CakQsRUFBSSxLQUFLLFdBQU0sT0FBQUEsRUFBS0csTUFBTSxJQUFJQyxLQUFJLFNBQUFyUCxHQUFLLE9BQUFBLEVBQUUyN0MsV0FBVyxTQUM5Rmo1QyxLQUFLNjZDLFVBQVVub0MsS0FBS25HLEtBaEVBLEdBcUJuQixNQUFBc0csZ0JBQ0EsTUFBQUMsYUFDQSxNQUFBOEcsa0JBdkJRd2hDLEdBQWIsQ0FBaUMsRUFBQXY0QyxZQUFwQixFQUFBdTRDLFlBQUFBLHVnQkNwQmIsY0FFQSxhQVNFLFdBQ21DN3RDLEdBQUEsS0FBQUEsZUFBQUEsRUFFakN2TixLQUFLb3BELGFBaUNULE9BdkNFLHNCQUFXLG9CQUFLLEtBQWhCLFdBQTZCLE9BQU9wcEQsS0FBSytpRSx3Q0FDekMsc0JBQVcsa0JBQUcsS0FBZCxXQUEyQixPQUFPL2lFLEtBQUt1b0Usc0NBUWhDLFlBQUFuZixXQUFQLFdBQ0VwcEQsS0FBSytpRSxPQUFTL2lFLEtBQUt1TixlQUFlak4sT0FBT3VSLEVBQ3pDN1IsS0FBS3VvRSxLQUFPdm9FLEtBQUt1TixlQUFlak4sT0FBT3VSLEdBR2xDLFlBQUE2M0MsVUFBUCxTQUFpQjczQyxHQUNYQSxFQUFJN1IsS0FBSytpRSxPQUNYL2lFLEtBQUsraUUsT0FBU2x4RCxFQUNMQSxFQUFJN1IsS0FBS3VvRSxPQUNsQnZvRSxLQUFLdW9FLEtBQU8xMkQsSUFJVCxZQUFBbXFDLGVBQVAsU0FBc0JocUMsRUFBWUcsR0FDaEMsR0FBSUgsRUFBS0csRUFBSSxDQUNYLElBQU1rcUIsRUFBT3JxQixFQUNiQSxFQUFLRyxFQUNMQSxFQUFLa3FCLEVBRUhycUIsRUFBS2hTLEtBQUsraUUsU0FDWi9pRSxLQUFLK2lFLE9BQVMvd0QsR0FFWkcsRUFBS25TLEtBQUt1b0UsT0FDWnZvRSxLQUFLdW9FLEtBQU9wMkQsSUFJVCxZQUFBazhDLGFBQVAsV0FDRXJ1RCxLQUFLZzhDLGVBQWUsRUFBR2g4QyxLQUFLdU4sZUFBZXJRLEtBQU8sSUEzQzFCLEdBVXZCLE1BQUEyVixpQkFWUTJvQyxHQUFiLEdBQWEsRUFBQUEsZ0JBQUFBLDJWQ0liLGNBQ0EsVUFFQSxhQUlFLGlCQUFZLHNEQUZKLEtBQUFndEIsU0FBVyxJQUFJenpELElBR3JCLElBQTRCLFVBQUFrc0IsRUFBQSxlQUFTLENBQTFCLFdBQUNyeEIsRUFBRSxLQUFFNjRELEVBQU8sS0FDckJ6b0UsS0FBS3FWLElBQUl6RixFQUFJNjRELElBcUJuQixPQWpCUyxZQUFBcHpELElBQVAsU0FBY3pGLEVBQTJCczBELEdBQ3ZDLElBQU1yOUQsRUFBUzdHLEtBQUt3b0UsU0FBU2wzRCxJQUFJMUIsR0FFakMsT0FEQTVQLEtBQUt3b0UsU0FBU256RCxJQUFJekYsRUFBSXMwRCxHQUNmcjlELEdBR0YsWUFBQStOLFFBQVAsU0FBZThnQixHQUNiMTFCLEtBQUt3b0UsU0FBUzV6RCxTQUFRLFNBQUNuUixFQUFPcEUsR0FBUSxPQUFBcTJCLEVBQVNyMkIsRUFBS29FLE9BRy9DLFlBQUFxUyxJQUFQLFNBQVdsRyxHQUNULE9BQU81UCxLQUFLd29FLFNBQVMxeUQsSUFBSWxHLElBR3BCLFlBQUEwQixJQUFQLFNBQWMxQixHQUNaLE9BQU81UCxLQUFLd29FLFNBQVNsM0QsSUFBSTFCLElBRTdCLEVBM0JBLEdBQWEsRUFBQTg0RCxrQkFBQUEsRUE2QmIsaUJBS0UsYUFGaUIsS0FBQUMsVUFBK0IsSUFBSUQsRUFHbEQxb0UsS0FBSzJvRSxVQUFVdHpELElBQUksRUFBQWt1QixzQkFBdUJ2akMsTUFpQzlDLE9BOUJTLFlBQUEyaUIsV0FBUCxTQUFxQi9TLEVBQTJCczBELEdBQzlDbGtFLEtBQUsyb0UsVUFBVXR6RCxJQUFJekYsRUFBSXMwRCxJQUdsQixZQUFBMEUsV0FBUCxTQUFxQmg1RCxHQUNuQixPQUFPNVAsS0FBSzJvRSxVQUFVcjNELElBQUkxQixJQUdyQixZQUFBME0sZUFBUCxTQUF5QnVzRCxPQUFXLHdEQUlsQyxJQUhBLElBQU1DLEdBQXNCLElBQUFDLHdCQUF1QkYsR0FBTUcsTUFBSyxTQUFDL3NFLEVBQUd5SixHQUFNLE9BQUF6SixFQUFFOFosTUFBUXJRLEVBQUVxUSxTQUU5RWt6RCxFQUFxQixHQUNGLE1BQUFILEVBQUEsZUFBcUIsQ0FBekMsSUFBTUksRUFBVSxLQUNiVCxFQUFVem9FLEtBQUsyb0UsVUFBVXIzRCxJQUFJNDNELEVBQVd0NUQsSUFDOUMsSUFBSzY0RCxFQUNILE1BQU0sSUFBSXRxRSxNQUFNLG9CQUFvQjBxRSxFQUFLeEIsS0FBSSwrQkFBK0I2QixFQUFXdDVELEdBQUUsS0FFM0ZxNUQsRUFBWWhvRSxLQUFLd25FLEdBR25CLElBQU1VLEVBQXFCTCxFQUFvQnByRSxPQUFTLEVBQUlvckUsRUFBb0IsR0FBRy95RCxNQUFRdXJCLEVBQUs1akMsT0FHaEcsR0FBSTRqQyxFQUFLNWpDLFNBQVd5ckUsRUFDbEIsTUFBTSxJQUFJaHJFLE1BQU0sZ0RBQWdEMHFFLEVBQUt4QixLQUFJLGlCQUFnQjhCLEVBQXFCLEdBQUMsbUJBQW1CN25DLEVBQUs1akMsT0FBTSxxQkFJL0ksT0FBTyxJQUFJbXJFLEVBQUksV0FBSkEsRUFBSSxrQkFBUXZuQyxHQUFNLEdBQUcybkMsR0FBVyxVQUUvQyxFQXZDQSxHQUFhLEVBQUFqdUIscUJBQUFBLDh0QkN0Q2IsY0FnQk1vdUIsRUFBd0QsQ0FDNUQ1NUQsTUFBTyxFQUFBa3RDLGFBQWF3TSxNQUNwQm1nQixLQUFNLEVBQUEzc0IsYUFBYTRzQixLQUNuQmo5RCxLQUFNLEVBQUFxd0MsYUFBYUMsS0FDbkJuYixNQUFPLEVBQUFrYixhQUFhNnNCLE1BQ3BCQyxJQUFLLEVBQUE5c0IsYUFBYStzQixLQUtwQixhQUtFLFdBQ29DdHhELEdBRHBDLFdBQ29DLEtBQUFBLGdCQUFBQSxFQUg3QixLQUFBME8sU0FBeUIsRUFBQTYxQixhQUFhK3NCLElBSzNDenBFLEtBQUswcEUsa0JBQ0wxcEUsS0FBS21ZLGdCQUFnQjZLLGdCQUFlLFNBQUEzakIsR0FDdEIsYUFBUkEsR0FDRixFQUFLcXFFLHFCQTZDYixPQXhDVSxZQUFBQSxnQkFBUixXQUNFMXBFLEtBQUs2bUIsU0FBV3VpRCxFQUFxQnBwRSxLQUFLbVksZ0JBQWdCbUIsV0FBV3VOLFdBRy9ELFlBQUE4aUQsd0JBQVIsU0FBZ0NDLEdBQzlCLElBQUssSUFBSTF0RSxFQUFJLEVBQUdBLEVBQUkwdEUsRUFBZWxzRSxPQUFReEIsSUFDUixtQkFBdEIwdEUsRUFBZTF0RSxLQUN4QjB0RSxFQUFlMXRFLEdBQUswdEUsRUFBZTF0RSxPQUtqQyxZQUFBMnRFLEtBQVIsU0FBYTE4RCxFQUFlMjhELEVBQWlCRixHQUMzQzVwRSxLQUFLMnBFLHdCQUF3QkMsR0FDN0J6OEQsRUFBSzJ3QyxLQUFJLE1BQVQzd0MsRUFBSSxHQUFNZixRQWhDSyxhQWdDaUIwOUQsR0FBWUYsR0FBYyxLQUdyRCxZQUFBcDZELE1BQVAsU0FBYXM2RCxPQUFpQix3REFDeEI5cEUsS0FBSzZtQixVQUFZLEVBQUE2MUIsYUFBYXdNLE9BQ2hDbHBELEtBQUs2cEUsS0FBS3o5RCxRQUFRMjlELElBQUtELEVBQVNGLElBSTdCLFlBQUFQLEtBQVAsU0FBWVMsT0FBaUIsd0RBQ3ZCOXBFLEtBQUs2bUIsVUFBWSxFQUFBNjFCLGFBQWE0c0IsTUFDaEN0cEUsS0FBSzZwRSxLQUFLejlELFFBQVFpOUQsS0FBTVMsRUFBU0YsSUFJOUIsWUFBQXY5RCxLQUFQLFNBQVl5OUQsT0FBaUIsd0RBQ3ZCOXBFLEtBQUs2bUIsVUFBWSxFQUFBNjFCLGFBQWFDLE1BQ2hDMzhDLEtBQUs2cEUsS0FBS3o5RCxRQUFRQyxLQUFNeTlELEVBQVNGLElBSTlCLFlBQUFwb0MsTUFBUCxTQUFhc29DLE9BQWlCLHdEQUN4QjlwRSxLQUFLNm1CLFVBQVksRUFBQTYxQixhQUFhNnNCLE9BQ2hDdnBFLEtBQUs2cEUsS0FBS3o5RCxRQUFRbzFCLE1BQU9zb0MsRUFBU0YsSUFyRGpCLEdBTWxCLE1BQUFod0Qsa0JBTlF1aEMsR0FBYixHQUFhLEVBQUFBLFdBQUFBLGlYQ3pCYixjQUNBLFVBTWEsRUFBQTZ1QixtQkFBcUIsaW9CQUVyQixFQUFBQyxnQkFBOEMsQ0FDekRqN0QsS0FBTSxHQUNOOVIsS0FBTSxHQUNOMmdDLGFBQWEsRUFDYlEsWUFBYSxRQUNiRyxZQUFhLEVBQ2IvRSxjQUFjLEVBQ2QrZSxVQUFXLEVBQUF3eEIsbUJBQ1hsK0MsVUFBVyxPQUNYNE8sNEJBQTRCLEVBQzVCcEwsbUJBQW9CLE1BQ3BCQyxzQkFBdUIsRUFDdkJlLFdBQVksa0NBQ1pDLFNBQVUsR0FDVnFMLFdBQVksU0FDWkQsZUFBZ0IsT0FDaEJqYixXQUFZLEVBQ1puSCx5QkFBMEIsSUFDMUIrcEIsY0FBZSxFQUNmemMsU0FBVSxPQUNWc0gsV0FBWSxJQUNacUIsa0JBQW1CLEVBQ25CdFEsa0JBQWtCLEVBQ2xCc0ssaUJBQWlCLEVBQ2pCMnJCLCtCQUErQixFQUMvQnRaLHFCQUFzQixFQUN0QnlzQyxjQUFjLEVBQ2QzMEMsa0JBQWtCLEVBQ2xCbnFCLG1CQUFtQixFQUNuQitxRCxhQUFjLEVBQ2QzcEQsTUFBTyxHQUNQd1csc0JBQXVCLEVBQUF4ZixNQUN2QnFqQixhQUFjLFNBQ2R3Z0MsY0FBZSxHQUNmckksYUFBYSxFQUNiNUYsY0FBZSxlQUNmMHlCLHFCQUFxQixFQUNyQjFmLFlBQVksRUFDWnVCLFNBQVUsUUFDVm5nQyxjQUFjLEdBR2hCLElBQU11K0MsRUFBcUQsQ0FBQyxTQUFVLE9BQVEsTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE9BRXRJLGFBU0UsV0FBWTk4RCxHQUhKLEtBQUErOEQsZ0JBQWtCLElBQUksRUFBQXY4RCxhQUs1QixJQUFNdzhELEVBQWlCLEVBQUgsR0FBUSxFQUFBSixpQkFDNUIsSUFBSyxJQUFNNXFFLEtBQU9nTyxFQUNoQixHQUFJaE8sS0FBT2dyRSxFQUNULElBQ0UsSUFBTUMsRUFBV2o5RCxFQUFRaE8sR0FDekJnckUsRUFBZWhyRSxHQUFPVyxLQUFLdXFFLDJCQUEyQmxyRSxFQUFLaXJFLEdBQzNELE1BQU9odEUsR0FDUDhPLFFBQVFvMUIsTUFBTWxrQyxHQU1wQjBDLEtBQUtzWixXQUFhK3dELEVBQ2xCcnFFLEtBQUtxTixRQUFVLEVBQUgsR0FBU2c5RCxHQUNyQnJxRSxLQUFLd3FFLGdCQTJGVCxPQTlHRSxzQkFBVyw2QkFBYyxLQUF6QixXQUE4QyxPQUFPeHFFLEtBQUtvcUUsZ0JBQWdCbjhELHVDQXNCbEUsWUFBQXU4RCxjQUFSLHNCQUNRcjNDLEVBQVMsU0FBQ0MsR0FDZCxLQUFNQSxLQUFZLEVBQUE2MkMsaUJBQ2hCLE1BQU0sSUFBSTlyRSxNQUFNLHVCQUF1QmkxQixFQUFRLEtBRWpELE9BQU8sRUFBSzlaLFdBQVc4WixJQUduQkMsRUFBUyxTQUFDRCxFQUFrQjN2QixHQUNoQyxLQUFNMnZCLEtBQVksRUFBQTYyQyxpQkFDaEIsTUFBTSxJQUFJOXJFLE1BQU0sdUJBQXVCaTFCLEVBQVEsS0FHakQzdkIsRUFBUSxFQUFLOG1FLDJCQUEyQm4zQyxFQUFVM3ZCLEdBRTlDLEVBQUs2VixXQUFXOFosS0FBYzN2QixJQUNoQyxFQUFLNlYsV0FBVzhaLEdBQVkzdkIsRUFDNUIsRUFBSzJtRSxnQkFBZ0IxM0QsS0FBSzBnQixLQUk5QixJQUFLLElBQU1BLEtBQVlwekIsS0FBS3NaLFdBQVksQ0FDdEMsSUFBTWlhLEVBQU8sQ0FDWGppQixJQUFLNmhCLEVBQU9wMUIsS0FBS2lDLEtBQU1vekIsR0FDdkIvZCxJQUFLZ2UsRUFBT3QxQixLQUFLaUMsS0FBTW96QixJQUV6QmhxQixPQUFPb3FCLGVBQWV4ekIsS0FBS3FOLFFBQVMrbEIsRUFBVUcsS0FJM0MsWUFBQXVDLFVBQVAsU0FBaUJ6MkIsRUFBYW9FLEdBQzVCekQsS0FBS3FOLFFBQVFoTyxHQUFPb0UsR0FHZCxZQUFBOG1FLDJCQUFSLFNBQW1DbHJFLEVBQWFvRSxHQUM5QyxPQUFRcEUsR0FDTixJQUFLLFlBQ0wsSUFBSyxjQUNMLElBQUssZUFDTCxJQUFLLGdCQUNFb0UsSUFDSEEsRUFBUSxFQUFBd21FLGdCQUFnQjVxRSxJQUUxQixNQUNGLElBQUssYUFDTCxJQUFLLGlCQUNILEdBQXFCLGlCQUFWb0UsR0FBc0IsR0FBS0EsR0FBU0EsR0FBUyxJQUV0RCxNQUVGQSxFQUFRMG1FLEVBQW9CMTJDLFNBQVNod0IsR0FBU0EsRUFBUSxFQUFBd21FLGdCQUFnQjVxRSxHQUN0RSxNQUNGLElBQUssY0FDSG9FLEVBQVErQyxLQUFLeUwsTUFBTXhPLEdBRXJCLElBQUssYUFDTCxJQUFLLGVBQ0gsR0FBSUEsRUFBUSxFQUNWLE1BQU0sSUFBSXRGLE1BQVNrQixFQUFHLGtDQUFrQ29FLEdBRTFELE1BQ0YsSUFBSyx1QkFDSEEsRUFBUStDLEtBQUt3QixJQUFJLEVBQUd4QixLQUFLMkIsSUFBSSxHQUFJM0IsS0FBS0MsTUFBYyxHQUFSaEQsR0FBYyxLQUMxRCxNQUNGLElBQUssYUFFSCxJQURBQSxFQUFRK0MsS0FBSzJCLElBQUkxRSxFQUFPLGFBQ1osRUFDVixNQUFNLElBQUl0RixNQUFTa0IsRUFBRyxrQ0FBa0NvRSxHQUUxRCxNQUNGLElBQUssd0JBQ0wsSUFBSyxvQkFDSCxHQUFJQSxHQUFTLEVBQ1gsTUFBTSxJQUFJdEYsTUFBU2tCLEVBQUcsOENBQThDb0UsR0FFeEUsSUFBSyxPQUNMLElBQUssT0FDSCxJQUFLQSxHQUFtQixJQUFWQSxFQUNaLE1BQU0sSUFBSXRGLE1BQVNrQixFQUFHLDRCQUE0Qm9FLEdBSXhELE9BQU9BLEdBR0YsWUFBQW95QixVQUFQLFNBQWlCeDJCLEdBQ2YsT0FBT1csS0FBS3FOLFFBQVFoTyxJQUV4QixFQXJIQSxHQUFhLEVBQUE0N0MsZUFBQUEsZ0JDbEJiLFNBQVN3dkIsRUFBdUI3NkQsRUFBY3pQLEVBQWtCNFYsR0FDekQ1VixFQUF3QixZQUFNQSxFQUNoQ0EsRUFBOEIsZ0JBQUVjLEtBQUssQ0FBRTJPLEdBQUUsRUFBRW1HLE1BQUssS0FFaEQ1VixFQUE4QixnQkFBSSxDQUFDLENBQUV5UCxHQUFFLEVBQUVtRyxNQUFLLElBQzlDNVYsRUFBd0IsVUFBSUEsd0hBOUJwQixFQUFBdXFFLGdCQUF3RCxJQUFJMzFELElBRXpFLGtDQUF1Qzh6RCxHQUNyQyxPQUFPQSxFQUFvQixpQkFBSyxJQUdsQywyQkFBbUNqNUQsR0FDakMsR0FBSSxFQUFBODZELGdCQUFnQjUwRCxJQUFJbEcsR0FDdEIsT0FBTyxFQUFBODZELGdCQUFnQnA1RCxJQUFJMUIsR0FHN0IsSUFBTSs2RCxFQUFpQixTQUFVeHFFLEVBQWtCZCxFQUFhMFcsR0FDOUQsR0FBeUIsSUFBckI2MEQsVUFBVWx0RSxPQUNaLE1BQU0sSUFBSVMsTUFBTSxvRUFHbEJzc0UsRUFBdUJFLEVBQVd4cUUsRUFBUTRWLElBTTVDLE9BSEE0MEQsRUFBVXpvRSxTQUFXLFdBQU0sT0FBQTBOLEdBRTNCLEVBQUE4NkQsZ0JBQWdCcjFELElBQUl6RixFQUFJKzZELEdBQ2pCQSw2UEM5QlQsSUE4SllqdUIsRUE5SlosVUFFYSxFQUFBN3BDLGdCQUFpQixJQUFBK2tDLGlCQUFnQyxpQkFxQmpELEVBQUEwRCxtQkFBb0IsSUFBQTFELGlCQUFtQyxvQkFnQ3ZELEVBQUFubkIsY0FBZSxJQUFBbW5CLGlCQUE4QixlQXFDN0MsRUFBQWtFLGlCQUFrQixJQUFBbEUsaUJBQWlDLGtCQXVCbkQsRUFBQTZELGtCQUFtQixJQUFBN0QsaUJBQWtDLG1CQWtDckQsRUFBQXJVLHVCQUF3QixJQUFBcVUsaUJBQXVDLHlCQVNoRThFLEVBQUEsRUFBQUEsZUFBQSxFQUFBQSxhQUFZLEtBQ3RCLG1CQUNBLG1CQUNBLG1CQUNBLHFCQUNBLGlCQUdXLEVBQUE1cEMsYUFBYyxJQUFBOGtDLGlCQUE2QixjQVkzQyxFQUFBaCtCLGlCQUFrQixJQUFBZytCLGlCQUFpQyxrQkEyRm5ELEVBQUE3a0MsaUJBQWtCLElBQUE2a0MsaUJBQWlDLDJHQ2hSaEUsY0FDQSxTQUdBLGFBU0UsYUFOUSxLQUFBaXpCLFdBQXVEemhFLE9BQU9tMUQsT0FBTyxNQUNyRSxLQUFBQyxRQUFrQixHQUVsQixLQUFBc00sVUFBWSxJQUFJLEVBQUFqOUQsYUFJdEIsSUFBTWs5RCxFQUFrQixJQUFJLEVBQUFuTyxVQUM1QjU4RCxLQUFLM0IsU0FBUzBzRSxHQUNkL3FFLEtBQUt3K0QsUUFBVXVNLEVBQWdCeE8sUUFDL0J2OEQsS0FBS2dyRSxnQkFBa0JELEVBMkQzQixPQWpFRSxzQkFBVyx1QkFBUSxLQUFuQixXQUF3QyxPQUFPL3FFLEtBQUs4cUUsVUFBVTc4RCx1Q0FTOUQsc0JBQVcsdUJBQVEsS0FBbkIsV0FDRSxPQUFPN0UsT0FBT3dzRCxLQUFLNTFELEtBQUs2cUUsNkNBRzFCLHNCQUFXLDRCQUFhLEtBQXhCLFdBQ0UsT0FBTzdxRSxLQUFLdytELGFBR2QsU0FBeUJqQyxHQUN2QixJQUFLdjhELEtBQUs2cUUsV0FBV3RPLEdBQ25CLE1BQU0sSUFBSXArRCxNQUFNLDRCQUE0Qm8rRCxFQUFPLEtBRXJEdjhELEtBQUt3K0QsUUFBVWpDLEVBQ2Z2OEQsS0FBS2dyRSxnQkFBa0JockUsS0FBSzZxRSxXQUFXdE8sR0FDdkN2OEQsS0FBSzhxRSxVQUFVcDRELEtBQUs2cEQsb0NBR2YsWUFBQWwrRCxTQUFQLFNBQWdCOG1FLEdBQ2RubEUsS0FBSzZxRSxXQUFXMUYsRUFBUzVJLFNBQVc0SSxHQU0vQixZQUFBdGIsUUFBUCxTQUFlMlMsR0FDYixPQUFPeDhELEtBQUtnckUsZ0JBQWdCbmhCLFFBQVEyUyxJQUcvQixZQUFBMXFELG1CQUFQLFNBQTBCM00sR0FHeEIsSUFGQSxJQUFJMEIsRUFBUyxFQUNQbkosRUFBU3lILEVBQUV6SCxPQUNSeEIsRUFBSSxFQUFHQSxFQUFJd0IsSUFBVXhCLEVBQUcsQ0FDL0IsSUFBSTg2QixFQUFPN3hCLEVBQUU4ekMsV0FBVy84QyxHQUV4QixHQUFJLE9BQVU4NkIsR0FBUUEsR0FBUSxNQUFRLENBQ3BDLEtBQU05NkIsR0FBS3dCLEVBTVQsT0FBT21KLEVBQVM3RyxLQUFLNnBELFFBQVE3eUIsR0FFL0IsSUFBTTQyQixFQUFTem9ELEVBQUU4ekMsV0FBVy84QyxHQUd4QixPQUFVMHhELEdBQVVBLEdBQVUsTUFDaEM1MkIsRUFBeUIsTUFBakJBLEVBQU8sT0FBa0I0MkIsRUFBUyxNQUFTLE1BRW5EL21ELEdBQVU3RyxLQUFLNnBELFFBQVErRCxHQUczQi9tRCxHQUFVN0csS0FBSzZwRCxRQUFRN3lCLEdBRXpCLE9BQU9ud0IsR0FFWCxFQXhFQSxHQUFhLEVBQUE4MEMsZUFBQUEsSUNSVHN2QixFQUEyQixVQUcvQixTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUgsRUFBeUJFLEdBQzVDLFFBQXFCeGxFLElBQWpCeWxFLEVBQ0gsT0FBT0EsRUFBYXZ2RSxRQUdyQixJQUFJQyxFQUFTbXZFLEVBQXlCRSxHQUFZLENBR2pEdHZFLFFBQVMsSUFPVixPQUhBd3ZFLEVBQW9CRixHQUFVcnRCLEtBQUtoaUQsRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU3F2RSxHQUdwRXB2RSxFQUFPRCxRQ2xCV3F2RSxDQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvQWNjZXNzaWJpbGl0eU1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvQ2xpcGJvYXJkLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9icm93c2VyL0NvbG9yLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9icm93c2VyL0NvbG9yQ29udHJhc3RDYWNoZS50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvYnJvd3Nlci9Db2xvck1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvRG9tLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9icm93c2VyL0xpZmVjeWNsZS50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvYnJvd3Nlci9MaW5raWZpZXIudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvTGlua2lmaWVyMi50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvYnJvd3Nlci9Mb2NhbGl6YWJsZVN0cmluZ3MudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvTW91c2Vab25lTWFuYWdlci50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvYnJvd3Nlci9SZW5kZXJEZWJvdW5jZXIudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvU2NyZWVuRHByTW9uaXRvci50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvYnJvd3Nlci9UZXJtaW5hbC50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvYnJvd3Nlci9UaW1lQmFzZWREZWJvdW5jZXIudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvVmlld3BvcnQudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvaW5wdXQvQ29tcG9zaXRpb25IZWxwZXIudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvaW5wdXQvTW91c2UudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvaW5wdXQvTW92ZVRvQ2VsbC50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvYnJvd3Nlci9wdWJsaWMvVGVybWluYWwudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvcmVuZGVyZXIvQmFzZVJlbmRlckxheWVyLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9icm93c2VyL3JlbmRlcmVyL0N1cnNvclJlbmRlckxheWVyLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9icm93c2VyL3JlbmRlcmVyL0N1c3RvbUdseXBocy50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvYnJvd3Nlci9yZW5kZXJlci9HcmlkQ2FjaGUudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvcmVuZGVyZXIvTGlua1JlbmRlckxheWVyLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9icm93c2VyL3JlbmRlcmVyL1JlbmRlcmVyLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9icm93c2VyL3JlbmRlcmVyL1JlbmRlcmVyVXRpbHMudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvcmVuZGVyZXIvU2VsZWN0aW9uUmVuZGVyTGF5ZXIudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvcmVuZGVyZXIvVGV4dFJlbmRlckxheWVyLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9icm93c2VyL3JlbmRlcmVyL2F0bGFzL0Jhc2VDaGFyQXRsYXMudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvcmVuZGVyZXIvYXRsYXMvQ2hhckF0bGFzQ2FjaGUudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvcmVuZGVyZXIvYXRsYXMvQ2hhckF0bGFzVXRpbHMudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvcmVuZGVyZXIvYXRsYXMvQ29uc3RhbnRzLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9icm93c2VyL3JlbmRlcmVyL2F0bGFzL0R5bmFtaWNDaGFyQXRsYXMudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvcmVuZGVyZXIvYXRsYXMvTFJVTWFwLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9icm93c2VyL3JlbmRlcmVyL2RvbS9Eb21SZW5kZXJlci50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvYnJvd3Nlci9yZW5kZXJlci9kb20vRG9tUmVuZGVyZXJSb3dGYWN0b3J5LnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9icm93c2VyL3NlbGVjdGlvbi9TZWxlY3Rpb25Nb2RlbC50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvYnJvd3Nlci9zZXJ2aWNlcy9DaGFyU2l6ZVNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvc2VydmljZXMvQ2hhcmFjdGVySm9pbmVyU2VydmljZS50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvYnJvd3Nlci9zZXJ2aWNlcy9Db3JlQnJvd3NlclNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvc2VydmljZXMvRGVjb3JhdGlvblNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvc2VydmljZXMvTW91c2VTZXJ2aWNlLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9icm93c2VyL3NlcnZpY2VzL1JlbmRlclNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2Jyb3dzZXIvc2VydmljZXMvU2VsZWN0aW9uU2VydmljZS50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvYnJvd3Nlci9zZXJ2aWNlcy9TZXJ2aWNlcy50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvYnJvd3Nlci9zZXJ2aWNlcy9Tb3VuZFNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2NvbW1vbi9DaXJjdWxhckxpc3QudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2NvbW1vbi9DbG9uZS50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvY29tbW9uL0NvcmVUZXJtaW5hbC50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvY29tbW9uL0V2ZW50RW1pdHRlci50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvY29tbW9uL0lucHV0SGFuZGxlci50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvY29tbW9uL0xpZmVjeWNsZS50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvY29tbW9uL1BsYXRmb3JtLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9jb21tb24vVHlwZWRBcnJheVV0aWxzLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9jb21tb24vV2luZG93c01vZGUudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2NvbW1vbi9idWZmZXIvQXR0cmlidXRlRGF0YS50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvY29tbW9uL2J1ZmZlci9CdWZmZXIudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2NvbW1vbi9idWZmZXIvQnVmZmVyTGluZS50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvY29tbW9uL2J1ZmZlci9CdWZmZXJSYW5nZS50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvY29tbW9uL2J1ZmZlci9CdWZmZXJSZWZsb3cudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2NvbW1vbi9idWZmZXIvQnVmZmVyU2V0LnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9jb21tb24vYnVmZmVyL0NlbGxEYXRhLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9jb21tb24vYnVmZmVyL0NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvY29tbW9uL2J1ZmZlci9NYXJrZXIudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2NvbW1vbi9kYXRhL0NoYXJzZXRzLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9jb21tb24vZGF0YS9Fc2NhcGVTZXF1ZW5jZXMudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2NvbW1vbi9pbnB1dC9LZXlib2FyZC50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvY29tbW9uL2lucHV0L1RleHREZWNvZGVyLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9jb21tb24vaW5wdXQvVW5pY29kZVY2LnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9jb21tb24vaW5wdXQvV3JpdGVCdWZmZXIudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2NvbW1vbi9pbnB1dC9YUGFyc2VDb2xvci50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvY29tbW9uL3BhcnNlci9Db25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2NvbW1vbi9wYXJzZXIvRGNzUGFyc2VyLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9jb21tb24vcGFyc2VyL0VzY2FwZVNlcXVlbmNlUGFyc2VyLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9jb21tb24vcGFyc2VyL09zY1BhcnNlci50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvY29tbW9uL3BhcnNlci9QYXJhbXMudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2NvbW1vbi9wdWJsaWMvQWRkb25NYW5hZ2VyLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9jb21tb24vcHVibGljL0J1ZmZlckFwaVZpZXcudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2NvbW1vbi9wdWJsaWMvQnVmZmVyTGluZUFwaVZpZXcudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2NvbW1vbi9wdWJsaWMvQnVmZmVyTmFtZXNwYWNlQXBpLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9jb21tb24vcHVibGljL1BhcnNlckFwaS50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvY29tbW9uL3B1YmxpYy9Vbmljb2RlQXBpLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9jb21tb24vc2VydmljZXMvQnVmZmVyU2VydmljZS50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvY29tbW9uL3NlcnZpY2VzL0NoYXJzZXRTZXJ2aWNlLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9jb21tb24vc2VydmljZXMvQ29yZU1vdXNlU2VydmljZS50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvY29tbW9uL3NlcnZpY2VzL0NvcmVTZXJ2aWNlLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9jb21tb24vc2VydmljZXMvRGlydHlSb3dTZXJ2aWNlLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9jb21tb24vc2VydmljZXMvSW5zdGFudGlhdGlvblNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2NvbW1vbi9zZXJ2aWNlcy9Mb2dTZXJ2aWNlLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS8uL3NyYy9jb21tb24vc2VydmljZXMvT3B0aW9uc1NlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlUmVnaXN0cnkudHMiLCJ3ZWJwYWNrOi8vc2VlLXRoZS1jb2RlL3h0ZXJtLy4vc3JjL2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlcy50cyIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vLi9zcmMvY29tbW9uL3NlcnZpY2VzL1VuaWNvZGVTZXJ2aWNlLnRzIiwid2VicGFjazovL3NlZS10aGUtY29kZS94dGVybS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9zZWUtdGhlLWNvZGUveHRlcm0vd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSB7XG5cdFx0dmFyIGEgPSBmYWN0b3J5KCk7XG5cdFx0Zm9yKHZhciBpIGluIGEpICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgPyBleHBvcnRzIDogcm9vdClbaV0gPSBhW2ldO1xuXHR9XG59KShzZWxmLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCAqIGFzIFN0cmluZ3MgZnJvbSAnYnJvd3Nlci9Mb2NhbGl6YWJsZVN0cmluZ3MnO1xuaW1wb3J0IHsgSVRlcm1pbmFsLCBJUmVuZGVyRGVib3VuY2VyIH0gZnJvbSAnYnJvd3Nlci9UeXBlcyc7XG5pbXBvcnQgeyBJQnVmZmVyIH0gZnJvbSAnY29tbW9uL2J1ZmZlci9UeXBlcyc7XG5pbXBvcnQgeyBpc01hYyB9IGZyb20gJ2NvbW1vbi9QbGF0Zm9ybSc7XG5pbXBvcnQgeyBUaW1lQmFzZWREZWJvdW5jZXIgfSBmcm9tICdicm93c2VyL1RpbWVCYXNlZERlYm91bmNlcic7XG5pbXBvcnQgeyBhZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIgfSBmcm9tICdicm93c2VyL0xpZmVjeWNsZSc7XG5pbXBvcnQgeyBEaXNwb3NhYmxlIH0gZnJvbSAnY29tbW9uL0xpZmVjeWNsZSc7XG5pbXBvcnQgeyBTY3JlZW5EcHJNb25pdG9yIH0gZnJvbSAnYnJvd3Nlci9TY3JlZW5EcHJNb25pdG9yJztcbmltcG9ydCB7IElSZW5kZXJTZXJ2aWNlIH0gZnJvbSAnYnJvd3Nlci9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5pbXBvcnQgeyByZW1vdmVFbGVtZW50RnJvbVBhcmVudCB9IGZyb20gJ2Jyb3dzZXIvRG9tJztcblxuY29uc3QgTUFYX1JPV1NfVE9fUkVBRCA9IDIwO1xuXG5jb25zdCBlbnVtIEJvdW5kYXJ5UG9zaXRpb24ge1xuICBUT1AsXG4gIEJPVFRPTVxufVxuXG5leHBvcnQgY2xhc3MgQWNjZXNzaWJpbGl0eU1hbmFnZXIgZXh0ZW5kcyBEaXNwb3NhYmxlIHtcbiAgcHJpdmF0ZSBfYWNjZXNzaWJpbGl0eVRyZWVSb290OiBIVE1MRWxlbWVudDtcbiAgcHJpdmF0ZSBfcm93Q29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgcHJpdmF0ZSBfcm93RWxlbWVudHM6IEhUTUxFbGVtZW50W107XG4gIHByaXZhdGUgX2xpdmVSZWdpb246IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIF9saXZlUmVnaW9uTGluZUNvdW50OiBudW1iZXIgPSAwO1xuXG4gIHByaXZhdGUgX3JlbmRlclJvd3NEZWJvdW5jZXI6IElSZW5kZXJEZWJvdW5jZXI7XG4gIHByaXZhdGUgX3NjcmVlbkRwck1vbml0b3I6IFNjcmVlbkRwck1vbml0b3I7XG5cbiAgcHJpdmF0ZSBfdG9wQm91bmRhcnlGb2N1c0xpc3RlbmVyOiAoZTogRm9jdXNFdmVudCkgPT4gdm9pZDtcbiAgcHJpdmF0ZSBfYm90dG9tQm91bmRhcnlGb2N1c0xpc3RlbmVyOiAoZTogRm9jdXNFdmVudCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogVGhpcyBxdWV1ZSBoYXMgYSBjaGFyYWN0ZXIgcHVzaGVkIHRvIGl0IGZvciBrZXlzIHRoYXQgYXJlIHByZXNzZWQsIGlmIHRoZVxuICAgKiBuZXh0IGNoYXJhY3RlciBhZGRlZCB0byB0aGUgdGVybWluYWwgaXMgZXF1YWwgdG8gdGhlIGtleSBjaGFyIHRoZW4gaXQgaXNcbiAgICogbm90IGFubm91bmNlZCAoYWRkZWQgdG8gbGl2ZSByZWdpb24pIGJlY2F1c2UgaXQgaGFzIGFscmVhZHkgYmVlbiBhbm5vdW5jZWRcbiAgICogYnkgdGhlIHRleHRhcmVhIGV2ZW50ICh3aGljaCBjYW5ub3QgYmUgY2FuY2VsZWQpLiBUaGVyZSBhcmUgc29tZSByYWNlXG4gICAqIGNvbmRpdGlvbiBjYXNlcyBpZiB0aGVyZSBpcyB0eXBpbmcgd2hpbGUgZGF0YSBpcyBzdHJlYW1pbmcsIGJ1dCB0aGlzIGNvdmVyc1xuICAgKiB0aGUgbWFpbiBjYXNlIG9mIHR5cGluZyBpbnRvIHRoZSBwcm9tcHQgYW5kIGlucHV0dGluZyB0aGUgYW5zd2VyIHRvIGFcbiAgICogcXVlc3Rpb24gKFkvTiwgZXRjLikuXG4gICAqL1xuICBwcml2YXRlIF9jaGFyc1RvQ29uc3VtZTogc3RyaW5nW10gPSBbXTtcblxuICBwcml2YXRlIF9jaGFyc1RvQW5ub3VuY2U6IHN0cmluZyA9ICcnO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3Rlcm1pbmFsOiBJVGVybWluYWwsXG4gICAgcHJpdmF0ZSByZWFkb25seSBfcmVuZGVyU2VydmljZTogSVJlbmRlclNlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9hY2Nlc3NpYmlsaXR5VHJlZVJvb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLl9hY2Nlc3NpYmlsaXR5VHJlZVJvb3QuY2xhc3NMaXN0LmFkZCgneHRlcm0tYWNjZXNzaWJpbGl0eScpO1xuICAgIHRoaXMuX2FjY2Vzc2liaWxpdHlUcmVlUm9vdC50YWJJbmRleCA9IDA7XG5cbiAgICB0aGlzLl9yb3dDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLl9yb3dDb250YWluZXIuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2xpc3QnKTtcbiAgICB0aGlzLl9yb3dDb250YWluZXIuY2xhc3NMaXN0LmFkZCgneHRlcm0tYWNjZXNzaWJpbGl0eS10cmVlJyk7XG4gICAgdGhpcy5fcm93RWxlbWVudHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3Rlcm1pbmFsLnJvd3M7IGkrKykge1xuICAgICAgdGhpcy5fcm93RWxlbWVudHNbaV0gPSB0aGlzLl9jcmVhdGVBY2Nlc3NpYmlsaXR5VHJlZU5vZGUoKTtcbiAgICAgIHRoaXMuX3Jvd0NvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLl9yb3dFbGVtZW50c1tpXSk7XG4gICAgfVxuXG4gICAgdGhpcy5fdG9wQm91bmRhcnlGb2N1c0xpc3RlbmVyID0gZSA9PiB0aGlzLl9vbkJvdW5kYXJ5Rm9jdXMoZSwgQm91bmRhcnlQb3NpdGlvbi5UT1ApO1xuICAgIHRoaXMuX2JvdHRvbUJvdW5kYXJ5Rm9jdXNMaXN0ZW5lciA9IGUgPT4gdGhpcy5fb25Cb3VuZGFyeUZvY3VzKGUsIEJvdW5kYXJ5UG9zaXRpb24uQk9UVE9NKTtcbiAgICB0aGlzLl9yb3dFbGVtZW50c1swXS5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMuX3RvcEJvdW5kYXJ5Rm9jdXNMaXN0ZW5lcik7XG4gICAgdGhpcy5fcm93RWxlbWVudHNbdGhpcy5fcm93RWxlbWVudHMubGVuZ3RoIC0gMV0uYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLl9ib3R0b21Cb3VuZGFyeUZvY3VzTGlzdGVuZXIpO1xuXG4gICAgdGhpcy5fcmVmcmVzaFJvd3NEaW1lbnNpb25zKCk7XG4gICAgdGhpcy5fYWNjZXNzaWJpbGl0eVRyZWVSb290LmFwcGVuZENoaWxkKHRoaXMuX3Jvd0NvbnRhaW5lcik7XG5cbiAgICB0aGlzLl9yZW5kZXJSb3dzRGVib3VuY2VyID0gbmV3IFRpbWVCYXNlZERlYm91bmNlcih0aGlzLl9yZW5kZXJSb3dzLmJpbmQodGhpcykpO1xuICAgIHRoaXMuX3JlZnJlc2hSb3dzKCk7XG5cbiAgICB0aGlzLl9saXZlUmVnaW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5fbGl2ZVJlZ2lvbi5jbGFzc0xpc3QuYWRkKCdsaXZlLXJlZ2lvbicpO1xuICAgIHRoaXMuX2xpdmVSZWdpb24uc2V0QXR0cmlidXRlKCdhcmlhLWxpdmUnLCAnYXNzZXJ0aXZlJyk7XG4gICAgdGhpcy5fYWNjZXNzaWJpbGl0eVRyZWVSb290LmFwcGVuZENoaWxkKHRoaXMuX2xpdmVSZWdpb24pO1xuXG4gICAgaWYgKCF0aGlzLl90ZXJtaW5hbC5lbGVtZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBlbmFibGUgYWNjZXNzaWJpbGl0eSBiZWZvcmUgVGVybWluYWwub3BlbicpO1xuICAgIH1cbiAgICB0aGlzLl90ZXJtaW5hbC5lbGVtZW50Lmluc2VydEFkamFjZW50RWxlbWVudCgnYWZ0ZXJiZWdpbicsIHRoaXMuX2FjY2Vzc2liaWxpdHlUcmVlUm9vdCk7XG5cbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuX3JlbmRlclJvd3NEZWJvdW5jZXIpO1xuICAgIHRoaXMucmVnaXN0ZXIodGhpcy5fdGVybWluYWwub25SZXNpemUoZSA9PiB0aGlzLl9vblJlc2l6ZShlLnJvd3MpKSk7XG4gICAgdGhpcy5yZWdpc3Rlcih0aGlzLl90ZXJtaW5hbC5vblJlbmRlcihlID0+IHRoaXMuX3JlZnJlc2hSb3dzKGUuc3RhcnQsIGUuZW5kKSkpO1xuICAgIHRoaXMucmVnaXN0ZXIodGhpcy5fdGVybWluYWwub25TY3JvbGwoKCkgPT4gdGhpcy5fcmVmcmVzaFJvd3MoKSkpO1xuICAgIC8vIExpbmUgZmVlZCBpcyBhbiBpc3N1ZSBhcyB0aGUgcHJvbXB0IHdvbid0IGJlIHJlYWQgb3V0IGFmdGVyIGEgY29tbWFuZCBpcyBydW5cbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuX3Rlcm1pbmFsLm9uQTExeUNoYXIoY2hhciA9PiB0aGlzLl9vbkNoYXIoY2hhcikpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuX3Rlcm1pbmFsLm9uTGluZUZlZWQoKCkgPT4gdGhpcy5fb25DaGFyKCdcXG4nKSkpO1xuICAgIHRoaXMucmVnaXN0ZXIodGhpcy5fdGVybWluYWwub25BMTF5VGFiKHNwYWNlQ291bnQgPT4gdGhpcy5fb25UYWIoc3BhY2VDb3VudCkpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuX3Rlcm1pbmFsLm9uS2V5KGUgPT4gdGhpcy5fb25LZXkoZS5rZXkpKSk7XG4gICAgdGhpcy5yZWdpc3Rlcih0aGlzLl90ZXJtaW5hbC5vbkJsdXIoKCkgPT4gdGhpcy5fY2xlYXJMaXZlUmVnaW9uKCkpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuX3JlbmRlclNlcnZpY2Uub25EaW1lbnNpb25zQ2hhbmdlKCgpID0+IHRoaXMuX3JlZnJlc2hSb3dzRGltZW5zaW9ucygpKSk7XG5cbiAgICB0aGlzLl9zY3JlZW5EcHJNb25pdG9yID0gbmV3IFNjcmVlbkRwck1vbml0b3IoKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuX3NjcmVlbkRwck1vbml0b3IpO1xuICAgIHRoaXMuX3NjcmVlbkRwck1vbml0b3Iuc2V0TGlzdGVuZXIoKCkgPT4gdGhpcy5fcmVmcmVzaFJvd3NEaW1lbnNpb25zKCkpO1xuICAgIC8vIFRoaXMgc2hvdWxkbid0IGJlIG5lZWRlZCBvbiBtb2Rlcm4gYnJvd3NlcnMgYnV0IGlzIHByZXNlbnQgaW4gY2FzZSB0aGVcbiAgICAvLyBtZWRpYSBxdWVyeSB0aGF0IGRyaXZlcyB0aGUgU2NyZWVuRHByTW9uaXRvciBpc24ndCBzdXBwb3J0ZWRcbiAgICB0aGlzLnJlZ2lzdGVyKGFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih3aW5kb3csICdyZXNpemUnLCAoKSA9PiB0aGlzLl9yZWZyZXNoUm93c0RpbWVuc2lvbnMoKSkpO1xuICB9XG5cbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICAgIHJlbW92ZUVsZW1lbnRGcm9tUGFyZW50KHRoaXMuX2FjY2Vzc2liaWxpdHlUcmVlUm9vdCk7XG4gICAgdGhpcy5fcm93RWxlbWVudHMubGVuZ3RoID0gMDtcbiAgfVxuXG4gIHByaXZhdGUgX29uQm91bmRhcnlGb2N1cyhlOiBGb2N1c0V2ZW50LCBwb3NpdGlvbjogQm91bmRhcnlQb3NpdGlvbik6IHZvaWQge1xuICAgIGNvbnN0IGJvdW5kYXJ5RWxlbWVudCA9IGUudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnN0IGJlZm9yZUJvdW5kYXJ5RWxlbWVudCA9IHRoaXMuX3Jvd0VsZW1lbnRzW3Bvc2l0aW9uID09PSBCb3VuZGFyeVBvc2l0aW9uLlRPUCA/IDEgOiB0aGlzLl9yb3dFbGVtZW50cy5sZW5ndGggLSAyXTtcblxuICAgIC8vIERvbid0IHNjcm9sbCBpZiB0aGUgYnVmZmVyIHRvcCBoYXMgcmVhY2hlZCB0aGUgZW5kIGluIHRoYXQgZGlyZWN0aW9uXG4gICAgY29uc3QgcG9zSW5TZXQgPSBib3VuZGFyeUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLXBvc2luc2V0Jyk7XG4gICAgY29uc3QgbGFzdFJvd1BvcyA9IHBvc2l0aW9uID09PSBCb3VuZGFyeVBvc2l0aW9uLlRPUCA/ICcxJyA6IGAke3RoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5saW5lcy5sZW5ndGh9YDtcbiAgICBpZiAocG9zSW5TZXQgPT09IGxhc3RSb3dQb3MpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBEb24ndCBzY3JvbGwgd2hlbiB0aGUgbGFzdCBmb2N1c2VkIGl0ZW0gd2FzIG5vdCB0aGUgc2Vjb25kIHJvdyAoZm9jdXMgaXMgZ29pbmcgdGhlIG90aGVyXG4gICAgLy8gZGlyZWN0aW9uKVxuICAgIGlmIChlLnJlbGF0ZWRUYXJnZXQgIT09IGJlZm9yZUJvdW5kYXJ5RWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZSBvbGQgYm91bmRhcnkgZWxlbWVudCBmcm9tIGFycmF5XG4gICAgbGV0IHRvcEJvdW5kYXJ5RWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgbGV0IGJvdHRvbUJvdW5kYXJ5RWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgaWYgKHBvc2l0aW9uID09PSBCb3VuZGFyeVBvc2l0aW9uLlRPUCkge1xuICAgICAgdG9wQm91bmRhcnlFbGVtZW50ID0gYm91bmRhcnlFbGVtZW50O1xuICAgICAgYm90dG9tQm91bmRhcnlFbGVtZW50ID0gdGhpcy5fcm93RWxlbWVudHMucG9wKCkhO1xuICAgICAgdGhpcy5fcm93Q29udGFpbmVyLnJlbW92ZUNoaWxkKGJvdHRvbUJvdW5kYXJ5RWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvcEJvdW5kYXJ5RWxlbWVudCA9IHRoaXMuX3Jvd0VsZW1lbnRzLnNoaWZ0KCkhO1xuICAgICAgYm90dG9tQm91bmRhcnlFbGVtZW50ID0gYm91bmRhcnlFbGVtZW50O1xuICAgICAgdGhpcy5fcm93Q29udGFpbmVyLnJlbW92ZUNoaWxkKHRvcEJvdW5kYXJ5RWxlbWVudCk7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGxpc3RlbmVycyBmcm9tIG9sZCBib3VuZGFyeSBlbGVtZW50c1xuICAgIHRvcEJvdW5kYXJ5RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMuX3RvcEJvdW5kYXJ5Rm9jdXNMaXN0ZW5lcik7XG4gICAgYm90dG9tQm91bmRhcnlFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5fYm90dG9tQm91bmRhcnlGb2N1c0xpc3RlbmVyKTtcblxuICAgIC8vIEFkZCBuZXcgZWxlbWVudCB0byBhcnJheS9ET01cbiAgICBpZiAocG9zaXRpb24gPT09IEJvdW5kYXJ5UG9zaXRpb24uVE9QKSB7XG4gICAgICBjb25zdCBuZXdFbGVtZW50ID0gdGhpcy5fY3JlYXRlQWNjZXNzaWJpbGl0eVRyZWVOb2RlKCk7XG4gICAgICB0aGlzLl9yb3dFbGVtZW50cy51bnNoaWZ0KG5ld0VsZW1lbnQpO1xuICAgICAgdGhpcy5fcm93Q29udGFpbmVyLmluc2VydEFkamFjZW50RWxlbWVudCgnYWZ0ZXJiZWdpbicsIG5ld0VsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBuZXdFbGVtZW50ID0gdGhpcy5fY3JlYXRlQWNjZXNzaWJpbGl0eVRyZWVOb2RlKCk7XG4gICAgICB0aGlzLl9yb3dFbGVtZW50cy5wdXNoKG5ld0VsZW1lbnQpO1xuICAgICAgdGhpcy5fcm93Q29udGFpbmVyLmFwcGVuZENoaWxkKG5ld0VsZW1lbnQpO1xuICAgIH1cblxuICAgIC8vIEFkZCBsaXN0ZW5lcnMgdG8gbmV3IGJvdW5kYXJ5IGVsZW1lbnRzXG4gICAgdGhpcy5fcm93RWxlbWVudHNbMF0uYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLl90b3BCb3VuZGFyeUZvY3VzTGlzdGVuZXIpO1xuICAgIHRoaXMuX3Jvd0VsZW1lbnRzW3RoaXMuX3Jvd0VsZW1lbnRzLmxlbmd0aCAtIDFdLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5fYm90dG9tQm91bmRhcnlGb2N1c0xpc3RlbmVyKTtcblxuICAgIC8vIFNjcm9sbCB1cFxuICAgIHRoaXMuX3Rlcm1pbmFsLnNjcm9sbExpbmVzKHBvc2l0aW9uID09PSBCb3VuZGFyeVBvc2l0aW9uLlRPUCA/IC0xIDogMSk7XG5cbiAgICAvLyBGb2N1cyBuZXcgYm91bmRhcnkgYmVmb3JlIGVsZW1lbnRcbiAgICB0aGlzLl9yb3dFbGVtZW50c1twb3NpdGlvbiA9PT0gQm91bmRhcnlQb3NpdGlvbi5UT1AgPyAxIDogdGhpcy5fcm93RWxlbWVudHMubGVuZ3RoIC0gMl0uZm9jdXMoKTtcblxuICAgIC8vIFByZXZlbnQgdGhlIHN0YW5kYXJkIGJlaGF2aW9yXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gIH1cblxuICBwcml2YXRlIF9vblJlc2l6ZShyb3dzOiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyBSZW1vdmUgYm90dG9tIGJvdW5kYXJ5IGxpc3RlbmVyXG4gICAgdGhpcy5fcm93RWxlbWVudHNbdGhpcy5fcm93RWxlbWVudHMubGVuZ3RoIC0gMV0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLl9ib3R0b21Cb3VuZGFyeUZvY3VzTGlzdGVuZXIpO1xuXG4gICAgLy8gR3JvdyByb3dzIGFzIHJlcXVpcmVkXG4gICAgZm9yIChsZXQgaSA9IHRoaXMuX3Jvd0NvbnRhaW5lci5jaGlsZHJlbi5sZW5ndGg7IGkgPCB0aGlzLl90ZXJtaW5hbC5yb3dzOyBpKyspIHtcbiAgICAgIHRoaXMuX3Jvd0VsZW1lbnRzW2ldID0gdGhpcy5fY3JlYXRlQWNjZXNzaWJpbGl0eVRyZWVOb2RlKCk7XG4gICAgICB0aGlzLl9yb3dDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5fcm93RWxlbWVudHNbaV0pO1xuICAgIH1cbiAgICAvLyBTaHJpbmsgcm93cyBhcyByZXF1aXJlZFxuICAgIHdoaWxlICh0aGlzLl9yb3dFbGVtZW50cy5sZW5ndGggPiByb3dzKSB7XG4gICAgICB0aGlzLl9yb3dDb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5fcm93RWxlbWVudHMucG9wKCkhKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgYm90dG9tIGJvdW5kYXJ5IGxpc3RlbmVyXG4gICAgdGhpcy5fcm93RWxlbWVudHNbdGhpcy5fcm93RWxlbWVudHMubGVuZ3RoIC0gMV0uYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLl9ib3R0b21Cb3VuZGFyeUZvY3VzTGlzdGVuZXIpO1xuXG4gICAgdGhpcy5fcmVmcmVzaFJvd3NEaW1lbnNpb25zKCk7XG4gIH1cblxuICBwcml2YXRlIF9jcmVhdGVBY2Nlc3NpYmlsaXR5VHJlZU5vZGUoKTogSFRNTEVsZW1lbnQge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgncm9sZScsICdsaXN0aXRlbScpO1xuICAgIGVsZW1lbnQudGFiSW5kZXggPSAtMTtcbiAgICB0aGlzLl9yZWZyZXNoUm93RGltZW5zaW9ucyhlbGVtZW50KTtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHByaXZhdGUgX29uVGFiKHNwYWNlQ291bnQ6IG51bWJlcik6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3BhY2VDb3VudDsgaSsrKSB7XG4gICAgICB0aGlzLl9vbkNoYXIoJyAnKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9vbkNoYXIoY2hhcjogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2xpdmVSZWdpb25MaW5lQ291bnQgPCBNQVhfUk9XU19UT19SRUFEICsgMSkge1xuICAgICAgaWYgKHRoaXMuX2NoYXJzVG9Db25zdW1lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gSGF2ZSB0aGUgc2NyZWVuIHJlYWRlciBpZ25vcmUgdGhlIGNoYXIgaWYgaXQgd2FzIGp1c3QgaW5wdXRcbiAgICAgICAgY29uc3Qgc2hpZnRlZENoYXIgPSB0aGlzLl9jaGFyc1RvQ29uc3VtZS5zaGlmdCgpO1xuICAgICAgICBpZiAoc2hpZnRlZENoYXIgIT09IGNoYXIpIHtcbiAgICAgICAgICB0aGlzLl9jaGFyc1RvQW5ub3VuY2UgKz0gY2hhcjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY2hhcnNUb0Fubm91bmNlICs9IGNoYXI7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFyID09PSAnXFxuJykge1xuICAgICAgICB0aGlzLl9saXZlUmVnaW9uTGluZUNvdW50Kys7XG4gICAgICAgIGlmICh0aGlzLl9saXZlUmVnaW9uTGluZUNvdW50ID09PSBNQVhfUk9XU19UT19SRUFEICsgMSkge1xuICAgICAgICAgIHRoaXMuX2xpdmVSZWdpb24udGV4dENvbnRlbnQgKz0gU3RyaW5ncy50b29NdWNoT3V0cHV0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE9ubHkgZGV0YWNoL2F0dGFjaCBvbiBtYWMgYXMgb3RoZXJ3aXNlIG1lc3NhZ2VzIGNhbiBnbyB1bmFjY291bmNlZFxuICAgICAgaWYgKGlzTWFjKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXZlUmVnaW9uLnRleHRDb250ZW50ICYmIHRoaXMuX2xpdmVSZWdpb24udGV4dENvbnRlbnQubGVuZ3RoID4gMCAmJiAhdGhpcy5fbGl2ZVJlZ2lvbi5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9hY2Nlc3NpYmlsaXR5VHJlZVJvb3QuYXBwZW5kQ2hpbGQodGhpcy5fbGl2ZVJlZ2lvbik7XG4gICAgICAgICAgfSwgMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9jbGVhckxpdmVSZWdpb24oKTogdm9pZCB7XG4gICAgdGhpcy5fbGl2ZVJlZ2lvbi50ZXh0Q29udGVudCA9ICcnO1xuICAgIHRoaXMuX2xpdmVSZWdpb25MaW5lQ291bnQgPSAwO1xuXG4gICAgLy8gT25seSBkZXRhY2gvYXR0YWNoIG9uIG1hYyBhcyBvdGhlcndpc2UgbWVzc2FnZXMgY2FuIGdvIHVuYWNjb3VuY2VkXG4gICAgaWYgKGlzTWFjKSB7XG4gICAgICByZW1vdmVFbGVtZW50RnJvbVBhcmVudCh0aGlzLl9saXZlUmVnaW9uKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9vbktleShrZXlDaGFyOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLl9jbGVhckxpdmVSZWdpb24oKTtcbiAgICB0aGlzLl9jaGFyc1RvQ29uc3VtZS5wdXNoKGtleUNoYXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVmcmVzaFJvd3Moc3RhcnQ/OiBudW1iZXIsIGVuZD86IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3JlbmRlclJvd3NEZWJvdW5jZXIucmVmcmVzaChzdGFydCwgZW5kLCB0aGlzLl90ZXJtaW5hbC5yb3dzKTtcbiAgfVxuXG4gIHByaXZhdGUgX3JlbmRlclJvd3Moc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBidWZmZXI6IElCdWZmZXIgPSB0aGlzLl90ZXJtaW5hbC5idWZmZXI7XG4gICAgY29uc3Qgc2V0U2l6ZSA9IGJ1ZmZlci5saW5lcy5sZW5ndGgudG9TdHJpbmcoKTtcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPD0gZW5kOyBpKyspIHtcbiAgICAgIGNvbnN0IGxpbmVEYXRhID0gYnVmZmVyLnRyYW5zbGF0ZUJ1ZmZlckxpbmVUb1N0cmluZyhidWZmZXIueWRpc3AgKyBpLCB0cnVlKTtcbiAgICAgIGNvbnN0IHBvc0luU2V0ID0gKGJ1ZmZlci55ZGlzcCArIGkgKyAxKS50b1N0cmluZygpO1xuICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX3Jvd0VsZW1lbnRzW2ldO1xuICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKGxpbmVEYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGVsZW1lbnQuaW5uZXJUZXh0ID0gJ1xcdTAwYTAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSBsaW5lRGF0YTtcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1wb3NpbnNldCcsIHBvc0luU2V0KTtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2V0c2l6ZScsIHNldFNpemUpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9hbm5vdW5jZUNoYXJhY3RlcnMoKTtcbiAgfVxuXG4gIHByaXZhdGUgX3JlZnJlc2hSb3dzRGltZW5zaW9ucygpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX3JlbmRlclNlcnZpY2UuZGltZW5zaW9ucy5hY3R1YWxDZWxsSGVpZ2h0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLl9yb3dFbGVtZW50cy5sZW5ndGggIT09IHRoaXMuX3Rlcm1pbmFsLnJvd3MpIHtcbiAgICAgIHRoaXMuX29uUmVzaXplKHRoaXMuX3Rlcm1pbmFsLnJvd3MpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3Rlcm1pbmFsLnJvd3M7IGkrKykge1xuICAgICAgdGhpcy5fcmVmcmVzaFJvd0RpbWVuc2lvbnModGhpcy5fcm93RWxlbWVudHNbaV0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX3JlZnJlc2hSb3dEaW1lbnNpb25zKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBgJHt0aGlzLl9yZW5kZXJTZXJ2aWNlLmRpbWVuc2lvbnMuYWN0dWFsQ2VsbEhlaWdodH1weGA7XG4gIH1cblxuICBwcml2YXRlIF9hbm5vdW5jZUNoYXJhY3RlcnMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2NoYXJzVG9Bbm5vdW5jZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fbGl2ZVJlZ2lvbi50ZXh0Q29udGVudCArPSB0aGlzLl9jaGFyc1RvQW5ub3VuY2U7XG4gICAgdGhpcy5fY2hhcnNUb0Fubm91bmNlID0gJyc7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE2IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSVNlbGVjdGlvblNlcnZpY2UgfSBmcm9tICdicm93c2VyL3NlcnZpY2VzL1NlcnZpY2VzJztcbmltcG9ydCB7IElDb3JlU2VydmljZSB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5cbi8qKlxuICogUHJlcGFyZXMgdGV4dCB0byBiZSBwYXN0ZWQgaW50byB0aGUgdGVybWluYWwgYnkgbm9ybWFsaXppbmcgdGhlIGxpbmUgZW5kaW5nc1xuICogQHBhcmFtIHRleHQgVGhlIHBhc3RlZCB0ZXh0IHRoYXQgbmVlZHMgcHJvY2Vzc2luZyBiZWZvcmUgaW5zZXJ0aW5nIGludG8gdGhlIHRlcm1pbmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlVGV4dEZvclRlcm1pbmFsKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiB0ZXh0LnJlcGxhY2UoL1xccj9cXG4vZywgJ1xccicpO1xufVxuXG4vKipcbiAqIEJyYWNrZXQgdGV4dCBmb3IgcGFzdGUsIGlmIG5lY2Vzc2FyeSwgYXMgcGVyIGh0dHBzOi8vY2lydy5pbi9ibG9nL2JyYWNrZXRlZC1wYXN0ZVxuICogQHBhcmFtIHRleHQgVGhlIHBhc3RlZCB0ZXh0IHRvIGJyYWNrZXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJyYWNrZXRUZXh0Rm9yUGFzdGUodGV4dDogc3RyaW5nLCBicmFja2V0ZWRQYXN0ZU1vZGU6IGJvb2xlYW4pOiBzdHJpbmcge1xuICBpZiAoYnJhY2tldGVkUGFzdGVNb2RlKSB7XG4gICAgcmV0dXJuICdcXHgxYlsyMDB+JyArIHRleHQgKyAnXFx4MWJbMjAxfic7XG4gIH1cbiAgcmV0dXJuIHRleHQ7XG59XG5cbi8qKlxuICogQmluZHMgY29weSBmdW5jdGlvbmFsaXR5IHRvIHRoZSBnaXZlbiB0ZXJtaW5hbC5cbiAqIEBwYXJhbSBldiBUaGUgb3JpZ2luYWwgY29weSBldmVudCB0byBiZSBoYW5kbGVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3B5SGFuZGxlcihldjogQ2xpcGJvYXJkRXZlbnQsIHNlbGVjdGlvblNlcnZpY2U6IElTZWxlY3Rpb25TZXJ2aWNlKTogdm9pZCB7XG4gIGlmIChldi5jbGlwYm9hcmREYXRhKSB7XG4gICAgZXYuY2xpcGJvYXJkRGF0YS5zZXREYXRhKCd0ZXh0L3BsYWluJywgc2VsZWN0aW9uU2VydmljZS5zZWxlY3Rpb25UZXh0KTtcbiAgfVxuICAvLyBQcmV2ZW50IG9yIHRoZSBvcmlnaW5hbCB0ZXh0IHdpbGwgYmUgY29waWVkLlxuICBldi5wcmV2ZW50RGVmYXVsdCgpO1xufVxuXG4vKipcbiAqIFJlZGlyZWN0IHRoZSBjbGlwYm9hcmQncyBkYXRhIHRvIHRoZSB0ZXJtaW5hbCdzIGlucHV0IGhhbmRsZXIuXG4gKiBAcGFyYW0gZXYgVGhlIG9yaWdpbmFsIHBhc3RlIGV2ZW50IHRvIGJlIGhhbmRsZWRcbiAqIEBwYXJhbSB0ZXJtIFRoZSB0ZXJtaW5hbCBvbiB3aGljaCB0byBhcHBseSB0aGUgaGFuZGxlZCBwYXN0ZSBldmVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlUGFzdGVFdmVudChldjogQ2xpcGJvYXJkRXZlbnQsIHRleHRhcmVhOiBIVE1MVGV4dEFyZWFFbGVtZW50LCBjb3JlU2VydmljZTogSUNvcmVTZXJ2aWNlKTogdm9pZCB7XG4gIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICBpZiAoZXYuY2xpcGJvYXJkRGF0YSkge1xuICAgIGNvbnN0IHRleHQgPSBldi5jbGlwYm9hcmREYXRhLmdldERhdGEoJ3RleHQvcGxhaW4nKTtcbiAgICBwYXN0ZSh0ZXh0LCB0ZXh0YXJlYSwgY29yZVNlcnZpY2UpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXN0ZSh0ZXh0OiBzdHJpbmcsIHRleHRhcmVhOiBIVE1MVGV4dEFyZWFFbGVtZW50LCBjb3JlU2VydmljZTogSUNvcmVTZXJ2aWNlKTogdm9pZCB7XG4gIHRleHQgPSBwcmVwYXJlVGV4dEZvclRlcm1pbmFsKHRleHQpO1xuICB0ZXh0ID0gYnJhY2tldFRleHRGb3JQYXN0ZSh0ZXh0LCBjb3JlU2VydmljZS5kZWNQcml2YXRlTW9kZXMuYnJhY2tldGVkUGFzdGVNb2RlKTtcbiAgY29yZVNlcnZpY2UudHJpZ2dlckRhdGFFdmVudCh0ZXh0LCB0cnVlKTtcbiAgdGV4dGFyZWEudmFsdWUgPSAnJztcbn1cblxuLyoqXG4gKiBNb3ZlcyB0aGUgdGV4dGFyZWEgdW5kZXIgdGhlIG1vdXNlIGN1cnNvciBhbmQgZm9jdXNlcyBpdC5cbiAqIEBwYXJhbSBldiBUaGUgb3JpZ2luYWwgcmlnaHQgY2xpY2sgZXZlbnQgdG8gYmUgaGFuZGxlZC5cbiAqIEBwYXJhbSB0ZXh0YXJlYSBUaGUgdGVybWluYWwncyB0ZXh0YXJlYS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1vdmVUZXh0QXJlYVVuZGVyTW91c2VDdXJzb3IoZXY6IE1vdXNlRXZlbnQsIHRleHRhcmVhOiBIVE1MVGV4dEFyZWFFbGVtZW50LCBzY3JlZW5FbGVtZW50OiBIVE1MRWxlbWVudCk6IHZvaWQge1xuXG4gIC8vIENhbGN1bGF0ZSB0ZXh0YXJlYSBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgc2NyZWVuIGVsZW1lbnRcbiAgY29uc3QgcG9zID0gc2NyZWVuRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgbGVmdCA9IGV2LmNsaWVudFggLSBwb3MubGVmdCAtIDEwO1xuICBjb25zdCB0b3AgPSBldi5jbGllbnRZIC0gcG9zLnRvcCAtIDEwO1xuXG4gIC8vIEJyaW5nIHRleHRhcmVhIGF0IHRoZSBjdXJzb3IgcG9zaXRpb25cbiAgdGV4dGFyZWEuc3R5bGUud2lkdGggPSAnMjBweCc7XG4gIHRleHRhcmVhLnN0eWxlLmhlaWdodCA9ICcyMHB4JztcbiAgdGV4dGFyZWEuc3R5bGUubGVmdCA9IGAke2xlZnR9cHhgO1xuICB0ZXh0YXJlYS5zdHlsZS50b3AgPSBgJHt0b3B9cHhgO1xuICB0ZXh0YXJlYS5zdHlsZS56SW5kZXggPSAnMTAwMCc7XG5cbiAgdGV4dGFyZWEuZm9jdXMoKTtcbn1cblxuLyoqXG4gKiBCaW5kIHRvIHJpZ2h0LWNsaWNrIGV2ZW50IGFuZCBhbGxvdyByaWdodC1jbGljayBjb3B5IGFuZCBwYXN0ZS5cbiAqIEBwYXJhbSBldiBUaGUgb3JpZ2luYWwgcmlnaHQgY2xpY2sgZXZlbnQgdG8gYmUgaGFuZGxlZC5cbiAqIEBwYXJhbSB0ZXh0YXJlYSBUaGUgdGVybWluYWwncyB0ZXh0YXJlYS5cbiAqIEBwYXJhbSBzZWxlY3Rpb25TZXJ2aWNlIFRoZSB0ZXJtaW5hbCdzIHNlbGVjdGlvbiBtYW5hZ2VyLlxuICogQHBhcmFtIHNob3VsZFNlbGVjdFdvcmQgSWYgdHJ1ZSBhbmQgdGhlcmUgaXMgbm8gc2VsZWN0aW9uIHRoZSBjdXJyZW50IHdvcmQgd2lsbCBiZSBzZWxlY3RlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmlnaHRDbGlja0hhbmRsZXIoZXY6IE1vdXNlRXZlbnQsIHRleHRhcmVhOiBIVE1MVGV4dEFyZWFFbGVtZW50LCBzY3JlZW5FbGVtZW50OiBIVE1MRWxlbWVudCwgc2VsZWN0aW9uU2VydmljZTogSVNlbGVjdGlvblNlcnZpY2UsIHNob3VsZFNlbGVjdFdvcmQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgbW92ZVRleHRBcmVhVW5kZXJNb3VzZUN1cnNvcihldiwgdGV4dGFyZWEsIHNjcmVlbkVsZW1lbnQpO1xuXG4gIGlmIChzaG91bGRTZWxlY3RXb3JkKSB7XG4gICAgc2VsZWN0aW9uU2VydmljZS5yaWdodENsaWNrU2VsZWN0KGV2KTtcbiAgfVxuXG4gIC8vIEdldCB0ZXh0YXJlYSByZWFkeSB0byBjb3B5IGZyb20gdGhlIGNvbnRleHQgbWVudVxuICB0ZXh0YXJlYS52YWx1ZSA9IHNlbGVjdGlvblNlcnZpY2Uuc2VsZWN0aW9uVGV4dDtcbiAgdGV4dGFyZWEuc2VsZWN0KCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElDb2xvciB9IGZyb20gJ2Jyb3dzZXIvVHlwZXMnO1xuaW1wb3J0IHsgSUNvbG9yUkdCIH0gZnJvbSAnY29tbW9uL1R5cGVzJztcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb25zIHdoZXJlIHRoZSBzb3VyY2UgdHlwZSBpcyBcImNoYW5uZWxzXCIgKGluZGl2aWR1YWwgY29sb3IgY2hhbm5lbHMgYXMgbnVtYmVycykuXG4gKi9cbmV4cG9ydCBuYW1lc3BhY2UgY2hhbm5lbHMge1xuICBleHBvcnQgZnVuY3Rpb24gdG9Dc3MocjogbnVtYmVyLCBnOiBudW1iZXIsIGI6IG51bWJlciwgYT86IG51bWJlcik6IHN0cmluZyB7XG4gICAgaWYgKGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGAjJHt0b1BhZGRlZEhleChyKX0ke3RvUGFkZGVkSGV4KGcpfSR7dG9QYWRkZWRIZXgoYil9JHt0b1BhZGRlZEhleChhKX1gO1xuICAgIH1cbiAgICByZXR1cm4gYCMke3RvUGFkZGVkSGV4KHIpfSR7dG9QYWRkZWRIZXgoZyl9JHt0b1BhZGRlZEhleChiKX1gO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHRvUmdiYShyOiBudW1iZXIsIGc6IG51bWJlciwgYjogbnVtYmVyLCBhOiBudW1iZXIgPSAweEZGKTogbnVtYmVyIHtcbiAgICAvLyBOb3RlOiBUaGUgYWdncmVnYXRlZCBudW1iZXIgaXMgUkdCQTMyIChCRSksIHRodXMgbmVlZHMgdG8gYmUgY29udmVydGVkIHRvIEFCR1IzMlxuICAgIC8vIG9uIExFIHN5c3RlbXMsIGJlZm9yZSBpdCBjYW4gYmUgdXNlZCBmb3IgZGlyZWN0IDMyLWJpdCBidWZmZXIgd3JpdGVzLlxuICAgIC8vID4+PiAwIGZvcmNlcyBhbiB1bnNpZ25lZCBpbnRcbiAgICByZXR1cm4gKHIgPDwgMjQgfCBnIDw8IDE2IHwgYiA8PCA4IHwgYSkgPj4+IDA7XG4gIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb25zIHdoZXJlIHRoZSBzb3VyY2UgdHlwZSBpcyBgSUNvbG9yYC5cbiAqL1xuZXhwb3J0IG5hbWVzcGFjZSBjb2xvciB7XG4gIGV4cG9ydCBmdW5jdGlvbiBibGVuZChiZzogSUNvbG9yLCBmZzogSUNvbG9yKTogSUNvbG9yIHtcbiAgICBjb25zdCBhID0gKGZnLnJnYmEgJiAweEZGKSAvIDI1NTtcbiAgICBpZiAoYSA9PT0gMSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY3NzOiBmZy5jc3MsXG4gICAgICAgIHJnYmE6IGZnLnJnYmFcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGZnUiA9IChmZy5yZ2JhID4+IDI0KSAmIDB4RkY7XG4gICAgY29uc3QgZmdHID0gKGZnLnJnYmEgPj4gMTYpICYgMHhGRjtcbiAgICBjb25zdCBmZ0IgPSAoZmcucmdiYSA+PiA4KSAmIDB4RkY7XG4gICAgY29uc3QgYmdSID0gKGJnLnJnYmEgPj4gMjQpICYgMHhGRjtcbiAgICBjb25zdCBiZ0cgPSAoYmcucmdiYSA+PiAxNikgJiAweEZGO1xuICAgIGNvbnN0IGJnQiA9IChiZy5yZ2JhID4+IDgpICYgMHhGRjtcbiAgICBjb25zdCByID0gYmdSICsgTWF0aC5yb3VuZCgoZmdSIC0gYmdSKSAqIGEpO1xuICAgIGNvbnN0IGcgPSBiZ0cgKyBNYXRoLnJvdW5kKChmZ0cgLSBiZ0cpICogYSk7XG4gICAgY29uc3QgYiA9IGJnQiArIE1hdGgucm91bmQoKGZnQiAtIGJnQikgKiBhKTtcbiAgICBjb25zdCBjc3MgPSBjaGFubmVscy50b0NzcyhyLCBnLCBiKTtcbiAgICBjb25zdCByZ2JhID0gY2hhbm5lbHMudG9SZ2JhKHIsIGcsIGIpO1xuICAgIHJldHVybiB7IGNzcywgcmdiYSB9O1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGlzT3BhcXVlKGNvbG9yOiBJQ29sb3IpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKGNvbG9yLnJnYmEgJiAweEZGKSA9PT0gMHhGRjtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBlbnN1cmVDb250cmFzdFJhdGlvKGJnOiBJQ29sb3IsIGZnOiBJQ29sb3IsIHJhdGlvOiBudW1iZXIpOiBJQ29sb3IgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IHJlc3VsdCA9IHJnYmEuZW5zdXJlQ29udHJhc3RSYXRpbyhiZy5yZ2JhLCBmZy5yZ2JhLCByYXRpbyk7XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiByZ2JhLnRvQ29sb3IoXG4gICAgICAocmVzdWx0ID4+IDI0ICYgMHhGRiksXG4gICAgICAocmVzdWx0ID4+IDE2ICYgMHhGRiksXG4gICAgICAocmVzdWx0ID4+IDggICYgMHhGRilcbiAgICApO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIG9wYXF1ZShjb2xvcjogSUNvbG9yKTogSUNvbG9yIHtcbiAgICBjb25zdCByZ2JhQ29sb3IgPSAoY29sb3IucmdiYSB8IDB4RkYpID4+PiAwO1xuICAgIGNvbnN0IFtyLCBnLCBiXSA9IHJnYmEudG9DaGFubmVscyhyZ2JhQ29sb3IpO1xuICAgIHJldHVybiB7XG4gICAgICBjc3M6IGNoYW5uZWxzLnRvQ3NzKHIsIGcsIGIpLFxuICAgICAgcmdiYTogcmdiYUNvbG9yXG4gICAgfTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBvcGFjaXR5KGNvbG9yOiBJQ29sb3IsIG9wYWNpdHk6IG51bWJlcik6IElDb2xvciB7XG4gICAgY29uc3QgYSA9IE1hdGgucm91bmQob3BhY2l0eSAqIDB4RkYpO1xuICAgIGNvbnN0IFtyLCBnLCBiXSA9IHJnYmEudG9DaGFubmVscyhjb2xvci5yZ2JhKTtcbiAgICByZXR1cm4ge1xuICAgICAgY3NzOiBjaGFubmVscy50b0NzcyhyLCBnLCBiLCBhKSxcbiAgICAgIHJnYmE6IGNoYW5uZWxzLnRvUmdiYShyLCBnLCBiLCBhKVxuICAgIH07XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gdG9Db2xvclJHQihjb2xvcjogSUNvbG9yKTogSUNvbG9yUkdCIHtcbiAgICByZXR1cm4gWyhjb2xvci5yZ2JhID4+IDI0KSAmIDB4RkYsIChjb2xvci5yZ2JhID4+IDE2KSAmIDB4RkYsIChjb2xvci5yZ2JhID4+IDgpICYgMHhGRl07XG4gIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb25zIHdoZXJlIHRoZSBzb3VyY2UgdHlwZSBpcyBcImNzc1wiIChzdHJpbmc6ICcjcmdiJywgJyNyZ2JhJywgJyNycmdnYmInLCAnI3JyZ2diYmFhJykuXG4gKi9cbmV4cG9ydCBuYW1lc3BhY2UgY3NzIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIHRvQ29sb3IoY3NzOiBzdHJpbmcpOiBJQ29sb3Ige1xuICAgIHN3aXRjaCAoY3NzLmxlbmd0aCkge1xuICAgICAgY2FzZSA3OiAvLyAjcnJnZ2JiXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY3NzLFxuICAgICAgICAgIHJnYmE6IChwYXJzZUludChjc3Muc2xpY2UoMSksIDE2KSA8PCA4IHwgMHhGRikgPj4+IDBcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgOTogLy8gI3JyZ2diYmFhXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY3NzLFxuICAgICAgICAgIHJnYmE6IHBhcnNlSW50KGNzcy5zbGljZSgxKSwgMTYpID4+PiAwXG4gICAgICAgIH07XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignY3NzLnRvQ29sb3I6IFVuc3VwcG9ydGVkIGNzcyBmb3JtYXQnKTtcbiAgfVxufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbnMgd2hlcmUgdGhlIHNvdXJjZSB0eXBlIGlzIFwicmdiXCIgKG51bWJlcjogMHhycmdnYmIpLlxuICovXG5leHBvcnQgbmFtZXNwYWNlIHJnYiB7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSByZWxhdGl2ZSBsdW1pbmFuY2Ugb2YgYW4gUkdCIGNvbG9yLCB0aGlzIGlzIHVzZWZ1bCBpbiBkZXRlcm1pbmluZyB0aGUgY29udHJhc3QgcmF0aW9cbiAgICogYmV0d2VlbiB0d28gY29sb3JzLlxuICAgKiBAcGFyYW0gcmdiIFRoZSBjb2xvciB0byB1c2UuXG4gICAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC8jcmVsYXRpdmVsdW1pbmFuY2VkZWZcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiByZWxhdGl2ZUx1bWluYW5jZShyZ2I6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHJlbGF0aXZlTHVtaW5hbmNlMihcbiAgICAgIChyZ2IgPj4gMTYpICYgMHhGRixcbiAgICAgIChyZ2IgPj4gOCApICYgMHhGRixcbiAgICAgIChyZ2IgICAgICApICYgMHhGRik7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgcmVsYXRpdmUgbHVtaW5hbmNlIG9mIGFuIFJHQiBjb2xvciwgdGhpcyBpcyB1c2VmdWwgaW4gZGV0ZXJtaW5pbmcgdGhlIGNvbnRyYXN0IHJhdGlvXG4gICAqIGJldHdlZW4gdHdvIGNvbG9ycy5cbiAgICogQHBhcmFtIHIgVGhlIHJlZCBjaGFubmVsICgweDAwIHRvIDB4RkYpLlxuICAgKiBAcGFyYW0gZyBUaGUgZ3JlZW4gY2hhbm5lbCAoMHgwMCB0byAweEZGKS5cbiAgICogQHBhcmFtIGIgVGhlIGJsdWUgY2hhbm5lbCAoMHgwMCB0byAweEZGKS5cbiAgICogQHNlZSBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLyNyZWxhdGl2ZWx1bWluYW5jZWRlZlxuICAgKi9cbiAgZXhwb3J0IGZ1bmN0aW9uIHJlbGF0aXZlTHVtaW5hbmNlMihyOiBudW1iZXIsIGc6IG51bWJlciwgYjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBycyA9IHIgLyAyNTU7XG4gICAgY29uc3QgZ3MgPSBnIC8gMjU1O1xuICAgIGNvbnN0IGJzID0gYiAvIDI1NTtcbiAgICBjb25zdCByciA9IHJzIDw9IDAuMDM5MjggPyBycyAvIDEyLjkyIDogTWF0aC5wb3coKHJzICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gICAgY29uc3QgcmcgPSBncyA8PSAwLjAzOTI4ID8gZ3MgLyAxMi45MiA6IE1hdGgucG93KChncyArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICAgIGNvbnN0IHJiID0gYnMgPD0gMC4wMzkyOCA/IGJzIC8gMTIuOTIgOiBNYXRoLnBvdygoYnMgKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgICByZXR1cm4gcnIgKiAwLjIxMjYgKyByZyAqIDAuNzE1MiArIHJiICogMC4wNzIyO1xuICB9XG59XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9ucyB3aGVyZSB0aGUgc291cmNlIHR5cGUgaXMgXCJyZ2JhXCIgKG51bWJlcjogMHhycmdnYmJhYSkuXG4gKi9cbmV4cG9ydCBuYW1lc3BhY2UgcmdiYSB7XG4gIGV4cG9ydCBmdW5jdGlvbiBlbnN1cmVDb250cmFzdFJhdGlvKGJnUmdiYTogbnVtYmVyLCBmZ1JnYmE6IG51bWJlciwgcmF0aW86IG51bWJlcik6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgYmdMID0gcmdiLnJlbGF0aXZlTHVtaW5hbmNlKGJnUmdiYSA+PiA4KTtcbiAgICBjb25zdCBmZ0wgPSByZ2IucmVsYXRpdmVMdW1pbmFuY2UoZmdSZ2JhID4+IDgpO1xuICAgIGNvbnN0IGNyID0gY29udHJhc3RSYXRpbyhiZ0wsIGZnTCk7XG4gICAgaWYgKGNyIDwgcmF0aW8pIHtcbiAgICAgIGlmIChmZ0wgPCBiZ0wpIHtcbiAgICAgICAgcmV0dXJuIHJlZHVjZUx1bWluYW5jZShiZ1JnYmEsIGZnUmdiYSwgcmF0aW8pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGluY3JlYXNlTHVtaW5hbmNlKGJnUmdiYSwgZmdSZ2JhLCByYXRpbyk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gcmVkdWNlTHVtaW5hbmNlKGJnUmdiYTogbnVtYmVyLCBmZ1JnYmE6IG51bWJlciwgcmF0aW86IG51bWJlcik6IG51bWJlciB7XG4gICAgLy8gVGhpcyBpcyBhIG5haXZlIGJ1dCBmYXN0IGFwcHJvYWNoIHRvIHJlZHVjaW5nIGx1bWluYW5jZSBhcyBjb252ZXJ0aW5nIHRvXG4gICAgLy8gSFNMIGFuZCBiYWNrIGlzIGV4cGVuc2l2ZVxuICAgIGNvbnN0IGJnUiA9IChiZ1JnYmEgPj4gMjQpICYgMHhGRjtcbiAgICBjb25zdCBiZ0cgPSAoYmdSZ2JhID4+IDE2KSAmIDB4RkY7XG4gICAgY29uc3QgYmdCID0gKGJnUmdiYSA+PiAgOCkgJiAweEZGO1xuICAgIGxldCBmZ1IgPSAoZmdSZ2JhID4+IDI0KSAmIDB4RkY7XG4gICAgbGV0IGZnRyA9IChmZ1JnYmEgPj4gMTYpICYgMHhGRjtcbiAgICBsZXQgZmdCID0gKGZnUmdiYSA+PiAgOCkgJiAweEZGO1xuICAgIGxldCBjciA9IGNvbnRyYXN0UmF0aW8ocmdiLnJlbGF0aXZlTHVtaW5hbmNlMihmZ1IsIGZnQiwgZmdHKSwgcmdiLnJlbGF0aXZlTHVtaW5hbmNlMihiZ1IsIGJnRywgYmdCKSk7XG4gICAgd2hpbGUgKGNyIDwgcmF0aW8gJiYgKGZnUiA+IDAgfHwgZmdHID4gMCB8fCBmZ0IgPiAwKSkge1xuICAgICAgLy8gUmVkdWNlIGJ5IDEwJSB1bnRpbCB0aGUgcmF0aW8gaXMgaGl0XG4gICAgICBmZ1IgLT0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKGZnUiAqIDAuMSkpO1xuICAgICAgZmdHIC09IE1hdGgubWF4KDAsIE1hdGguY2VpbChmZ0cgKiAwLjEpKTtcbiAgICAgIGZnQiAtPSBNYXRoLm1heCgwLCBNYXRoLmNlaWwoZmdCICogMC4xKSk7XG4gICAgICBjciA9IGNvbnRyYXN0UmF0aW8ocmdiLnJlbGF0aXZlTHVtaW5hbmNlMihmZ1IsIGZnQiwgZmdHKSwgcmdiLnJlbGF0aXZlTHVtaW5hbmNlMihiZ1IsIGJnRywgYmdCKSk7XG4gICAgfVxuICAgIHJldHVybiAoZmdSIDw8IDI0IHwgZmdHIDw8IDE2IHwgZmdCIDw8IDggfCAweEZGKSA+Pj4gMDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBpbmNyZWFzZUx1bWluYW5jZShiZ1JnYmE6IG51bWJlciwgZmdSZ2JhOiBudW1iZXIsIHJhdGlvOiBudW1iZXIpOiBudW1iZXIge1xuICAgIC8vIFRoaXMgaXMgYSBuYWl2ZSBidXQgZmFzdCBhcHByb2FjaCB0byBpbmNyZWFzaW5nIGx1bWluYW5jZSBhcyBjb252ZXJ0aW5nIHRvXG4gICAgLy8gSFNMIGFuZCBiYWNrIGlzIGV4cGVuc2l2ZVxuICAgIGNvbnN0IGJnUiA9IChiZ1JnYmEgPj4gMjQpICYgMHhGRjtcbiAgICBjb25zdCBiZ0cgPSAoYmdSZ2JhID4+IDE2KSAmIDB4RkY7XG4gICAgY29uc3QgYmdCID0gKGJnUmdiYSA+PiAgOCkgJiAweEZGO1xuICAgIGxldCBmZ1IgPSAoZmdSZ2JhID4+IDI0KSAmIDB4RkY7XG4gICAgbGV0IGZnRyA9IChmZ1JnYmEgPj4gMTYpICYgMHhGRjtcbiAgICBsZXQgZmdCID0gKGZnUmdiYSA+PiAgOCkgJiAweEZGO1xuICAgIGxldCBjciA9IGNvbnRyYXN0UmF0aW8ocmdiLnJlbGF0aXZlTHVtaW5hbmNlMihmZ1IsIGZnQiwgZmdHKSwgcmdiLnJlbGF0aXZlTHVtaW5hbmNlMihiZ1IsIGJnRywgYmdCKSk7XG4gICAgd2hpbGUgKGNyIDwgcmF0aW8gJiYgKGZnUiA8IDB4RkYgfHwgZmdHIDwgMHhGRiB8fCBmZ0IgPCAweEZGKSkge1xuICAgICAgLy8gSW5jcmVhc2UgYnkgMTAlIHVudGlsIHRoZSByYXRpbyBpcyBoaXRcbiAgICAgIGZnUiA9IE1hdGgubWluKDB4RkYsIGZnUiArIE1hdGguY2VpbCgoMjU1IC0gZmdSKSAqIDAuMSkpO1xuICAgICAgZmdHID0gTWF0aC5taW4oMHhGRiwgZmdHICsgTWF0aC5jZWlsKCgyNTUgLSBmZ0cpICogMC4xKSk7XG4gICAgICBmZ0IgPSBNYXRoLm1pbigweEZGLCBmZ0IgKyBNYXRoLmNlaWwoKDI1NSAtIGZnQikgKiAwLjEpKTtcbiAgICAgIGNyID0gY29udHJhc3RSYXRpbyhyZ2IucmVsYXRpdmVMdW1pbmFuY2UyKGZnUiwgZmdCLCBmZ0cpLCByZ2IucmVsYXRpdmVMdW1pbmFuY2UyKGJnUiwgYmdHLCBiZ0IpKTtcbiAgICB9XG4gICAgcmV0dXJuIChmZ1IgPDwgMjQgfCBmZ0cgPDwgMTYgfCBmZ0IgPDwgOCB8IDB4RkYpID4+PiAwO1xuICB9XG5cbiAgLy8gRklYTUU6IE1vdmUgdGhpcyB0byBjaGFubmVscyBOUz9cbiAgZXhwb3J0IGZ1bmN0aW9uIHRvQ2hhbm5lbHModmFsdWU6IG51bWJlcik6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdIHtcbiAgICByZXR1cm4gWyh2YWx1ZSA+PiAyNCkgJiAweEZGLCAodmFsdWUgPj4gMTYpICYgMHhGRiwgKHZhbHVlID4+IDgpICYgMHhGRiwgdmFsdWUgJiAweEZGXTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiB0b0NvbG9yKHI6IG51bWJlciwgZzogbnVtYmVyLCBiOiBudW1iZXIpOiBJQ29sb3Ige1xuICAgIHJldHVybiB7XG4gICAgICBjc3M6IGNoYW5uZWxzLnRvQ3NzKHIsIGcsIGIpLFxuICAgICAgcmdiYTogY2hhbm5lbHMudG9SZ2JhKHIsIGcsIGIpXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9QYWRkZWRIZXgoYzogbnVtYmVyKTogc3RyaW5nIHtcbiAgY29uc3QgcyA9IGMudG9TdHJpbmcoMTYpO1xuICByZXR1cm4gcy5sZW5ndGggPCAyID8gJzAnICsgcyA6IHM7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgY29udHJhc3QgcmF0aW8gYmV0d2VlbiB0d28gcmVsYXRpdmUgbHVtaW5hbmNlIHZhbHVlcy5cbiAqIEBwYXJhbSBsMSBUaGUgZmlyc3QgcmVsYXRpdmUgbHVtaW5hbmNlLlxuICogQHBhcmFtIGwyIFRoZSBmaXJzdCByZWxhdGl2ZSBsdW1pbmFuY2UuXG4gKiBAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAvI2NvbnRyYXN0LXJhdGlvZGVmXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb250cmFzdFJhdGlvKGwxOiBudW1iZXIsIGwyOiBudW1iZXIpOiBudW1iZXIge1xuICBpZiAobDEgPCBsMikge1xuICAgIHJldHVybiAobDIgKyAwLjA1KSAvIChsMSArIDAuMDUpO1xuICB9XG4gIHJldHVybiAobDEgKyAwLjA1KSAvIChsMiArIDAuMDUpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJQ29sb3IsIElDb2xvckNvbnRyYXN0Q2FjaGUgfSBmcm9tICdicm93c2VyL1R5cGVzJztcblxuZXhwb3J0IGNsYXNzIENvbG9yQ29udHJhc3RDYWNoZSBpbXBsZW1lbnRzIElDb2xvckNvbnRyYXN0Q2FjaGUge1xuICBwcml2YXRlIF9jb2xvcjogeyBbYmc6IG51bWJlcl06IHsgW2ZnOiBudW1iZXJdOiBJQ29sb3IgfCBudWxsIHwgdW5kZWZpbmVkIH0gfCB1bmRlZmluZWQgfSA9IHt9O1xuICBwcml2YXRlIF9yZ2JhOiB7IFtiZzogbnVtYmVyXTogeyBbZmc6IG51bWJlcl06IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQgfSB8IHVuZGVmaW5lZCB9ID0ge307XG5cbiAgcHVibGljIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuX2NvbG9yID0ge307XG4gICAgdGhpcy5fcmdiYSA9IHt9O1xuICB9XG5cbiAgcHVibGljIHNldENzcyhiZzogbnVtYmVyLCBmZzogbnVtYmVyLCB2YWx1ZTogc3RyaW5nIHwgbnVsbCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5fcmdiYVtiZ10pIHtcbiAgICAgIHRoaXMuX3JnYmFbYmddID0ge307XG4gICAgfVxuICAgIHRoaXMuX3JnYmFbYmddIVtmZ10gPSB2YWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDc3MoYmc6IG51bWJlciwgZmc6IG51bWJlcik6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9yZ2JhW2JnXSA/IHRoaXMuX3JnYmFbYmddIVtmZ10gOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0Q29sb3IoYmc6IG51bWJlciwgZmc6IG51bWJlciwgdmFsdWU6IElDb2xvciB8IG51bGwpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX2NvbG9yW2JnXSkge1xuICAgICAgdGhpcy5fY29sb3JbYmddID0ge307XG4gICAgfVxuICAgIHRoaXMuX2NvbG9yW2JnXSFbZmddID0gdmFsdWU7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q29sb3IoYmc6IG51bWJlciwgZmc6IG51bWJlcik6IElDb2xvciB8IG51bGwgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9jb2xvcltiZ10gPyB0aGlzLl9jb2xvcltiZ10hW2ZnXSA6IHVuZGVmaW5lZDtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJQ29sb3JNYW5hZ2VyLCBJQ29sb3IsIElDb2xvclNldCwgSUNvbG9yQ29udHJhc3RDYWNoZSB9IGZyb20gJ2Jyb3dzZXIvVHlwZXMnO1xuaW1wb3J0IHsgSVRoZW1lIH0gZnJvbSAnY29tbW9uL3NlcnZpY2VzL1NlcnZpY2VzJztcbmltcG9ydCB7IGNoYW5uZWxzLCBjb2xvciwgY3NzIH0gZnJvbSAnYnJvd3Nlci9Db2xvcic7XG5pbXBvcnQgeyBDb2xvckNvbnRyYXN0Q2FjaGUgfSBmcm9tICdicm93c2VyL0NvbG9yQ29udHJhc3RDYWNoZSc7XG5pbXBvcnQgeyBDb2xvckluZGV4IH0gZnJvbSAnY29tbW9uL1R5cGVzJztcblxuXG5pbnRlcmZhY2UgSVJlc3RvcmVDb2xvclNldCB7XG4gIGZvcmVncm91bmQ6IElDb2xvcjtcbiAgYmFja2dyb3VuZDogSUNvbG9yO1xuICBjdXJzb3I6IElDb2xvcjtcbiAgYW5zaTogSUNvbG9yW107XG59XG5cblxuY29uc3QgREVGQVVMVF9GT1JFR1JPVU5EID0gY3NzLnRvQ29sb3IoJyNmZmZmZmYnKTtcbmNvbnN0IERFRkFVTFRfQkFDS0dST1VORCA9IGNzcy50b0NvbG9yKCcjMDAwMDAwJyk7XG5jb25zdCBERUZBVUxUX0NVUlNPUiA9IGNzcy50b0NvbG9yKCcjZmZmZmZmJyk7XG5jb25zdCBERUZBVUxUX0NVUlNPUl9BQ0NFTlQgPSBjc3MudG9Db2xvcignIzAwMDAwMCcpO1xuY29uc3QgREVGQVVMVF9TRUxFQ1RJT04gPSB7XG4gIGNzczogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKScsXG4gIHJnYmE6IDB4RkZGRkZGNERcbn07XG5cbi8vIEFuIElJRkUgdG8gZ2VuZXJhdGUgREVGQVVMVF9BTlNJX0NPTE9SUy5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0FOU0lfQ09MT1JTID0gT2JqZWN0LmZyZWV6ZSgoKCkgPT4ge1xuICBjb25zdCBjb2xvcnMgPSBbXG4gICAgLy8gZGFyazpcbiAgICBjc3MudG9Db2xvcignIzJlMzQzNicpLFxuICAgIGNzcy50b0NvbG9yKCcjY2MwMDAwJyksXG4gICAgY3NzLnRvQ29sb3IoJyM0ZTlhMDYnKSxcbiAgICBjc3MudG9Db2xvcignI2M0YTAwMCcpLFxuICAgIGNzcy50b0NvbG9yKCcjMzQ2NWE0JyksXG4gICAgY3NzLnRvQ29sb3IoJyM3NTUwN2InKSxcbiAgICBjc3MudG9Db2xvcignIzA2OTg5YScpLFxuICAgIGNzcy50b0NvbG9yKCcjZDNkN2NmJyksXG4gICAgLy8gYnJpZ2h0OlxuICAgIGNzcy50b0NvbG9yKCcjNTU1NzUzJyksXG4gICAgY3NzLnRvQ29sb3IoJyNlZjI5MjknKSxcbiAgICBjc3MudG9Db2xvcignIzhhZTIzNCcpLFxuICAgIGNzcy50b0NvbG9yKCcjZmNlOTRmJyksXG4gICAgY3NzLnRvQ29sb3IoJyM3MjlmY2YnKSxcbiAgICBjc3MudG9Db2xvcignI2FkN2ZhOCcpLFxuICAgIGNzcy50b0NvbG9yKCcjMzRlMmUyJyksXG4gICAgY3NzLnRvQ29sb3IoJyNlZWVlZWMnKVxuICBdO1xuXG4gIC8vIEZpbGwgaW4gdGhlIHJlbWFpbmluZyAyNDAgQU5TSSBjb2xvcnMuXG4gIC8vIEdlbmVyYXRlIGNvbG9ycyAoMTYtMjMxKVxuICBjb25zdCB2ID0gWzB4MDAsIDB4NWYsIDB4ODcsIDB4YWYsIDB4ZDcsIDB4ZmZdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDIxNjsgaSsrKSB7XG4gICAgY29uc3QgciA9IHZbKGkgLyAzNikgJSA2IHwgMF07XG4gICAgY29uc3QgZyA9IHZbKGkgLyA2KSAlIDYgfCAwXTtcbiAgICBjb25zdCBiID0gdltpICUgNl07XG4gICAgY29sb3JzLnB1c2goe1xuICAgICAgY3NzOiBjaGFubmVscy50b0NzcyhyLCBnLCBiKSxcbiAgICAgIHJnYmE6IGNoYW5uZWxzLnRvUmdiYShyLCBnLCBiKVxuICAgIH0pO1xuICB9XG5cbiAgLy8gR2VuZXJhdGUgZ3JleXMgKDIzMi0yNTUpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMjQ7IGkrKykge1xuICAgIGNvbnN0IGMgPSA4ICsgaSAqIDEwO1xuICAgIGNvbG9ycy5wdXNoKHtcbiAgICAgIGNzczogY2hhbm5lbHMudG9Dc3MoYywgYywgYyksXG4gICAgICByZ2JhOiBjaGFubmVscy50b1JnYmEoYywgYywgYylcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBjb2xvcnM7XG59KSgpKTtcblxuLyoqXG4gKiBNYW5hZ2VzIHRoZSBzb3VyY2Ugb2YgdHJ1dGggZm9yIGEgdGVybWluYWwncyBjb2xvcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBDb2xvck1hbmFnZXIgaW1wbGVtZW50cyBJQ29sb3JNYW5hZ2VyIHtcbiAgcHVibGljIGNvbG9yczogSUNvbG9yU2V0O1xuICBwcml2YXRlIF9jdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiAgcHJpdmF0ZSBfbGl0bXVzQ29sb3I6IENhbnZhc0dyYWRpZW50O1xuICBwcml2YXRlIF9jb250cmFzdENhY2hlOiBJQ29sb3JDb250cmFzdENhY2hlO1xuICBwcml2YXRlIF9yZXN0b3JlQ29sb3JzITogSVJlc3RvcmVDb2xvclNldDtcblxuICBjb25zdHJ1Y3Rvcihkb2N1bWVudDogRG9jdW1lbnQsIHB1YmxpYyBhbGxvd1RyYW5zcGFyZW5jeTogYm9vbGVhbikge1xuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGNhbnZhcy53aWR0aCA9IDE7XG4gICAgY2FudmFzLmhlaWdodCA9IDE7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgaWYgKCFjdHgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGdldCByZW5kZXJpbmcgY29udGV4dCcpO1xuICAgIH1cbiAgICB0aGlzLl9jdHggPSBjdHg7XG4gICAgdGhpcy5fY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdjb3B5JztcbiAgICB0aGlzLl9saXRtdXNDb2xvciA9IHRoaXMuX2N0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCAwLCAxLCAxKTtcbiAgICB0aGlzLl9jb250cmFzdENhY2hlID0gbmV3IENvbG9yQ29udHJhc3RDYWNoZSgpO1xuICAgIHRoaXMuY29sb3JzID0ge1xuICAgICAgZm9yZWdyb3VuZDogREVGQVVMVF9GT1JFR1JPVU5ELFxuICAgICAgYmFja2dyb3VuZDogREVGQVVMVF9CQUNLR1JPVU5ELFxuICAgICAgY3Vyc29yOiBERUZBVUxUX0NVUlNPUixcbiAgICAgIGN1cnNvckFjY2VudDogREVGQVVMVF9DVVJTT1JfQUNDRU5ULFxuICAgICAgc2VsZWN0aW9uVHJhbnNwYXJlbnQ6IERFRkFVTFRfU0VMRUNUSU9OLFxuICAgICAgc2VsZWN0aW9uT3BhcXVlOiBjb2xvci5ibGVuZChERUZBVUxUX0JBQ0tHUk9VTkQsIERFRkFVTFRfU0VMRUNUSU9OKSxcbiAgICAgIGFuc2k6IERFRkFVTFRfQU5TSV9DT0xPUlMuc2xpY2UoKSxcbiAgICAgIGNvbnRyYXN0Q2FjaGU6IHRoaXMuX2NvbnRyYXN0Q2FjaGVcbiAgICB9O1xuICAgIHRoaXMuX3VwZGF0ZVJlc3RvcmVDb2xvcnMoKTtcbiAgfVxuXG4gIHB1YmxpYyBvbk9wdGlvbnNDaGFuZ2Uoa2V5OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoa2V5ID09PSAnbWluaW11bUNvbnRyYXN0UmF0aW8nKSB7XG4gICAgICB0aGlzLl9jb250cmFzdENhY2hlLmNsZWFyKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHRlcm1pbmFsJ3MgdGhlbWUuXG4gICAqIEBwYXJhbSB0aGVtZSBUaGUgIHRoZW1lIHRvIHVzZS4gSWYgYSBwYXJ0aWFsIHRoZW1lIGlzIHByb3ZpZGVkIHRoZW4gZGVmYXVsdFxuICAgKiBjb2xvcnMgd2lsbCBiZSB1c2VkIHdoZXJlIGNvbG9ycyBhcmUgbm90IGRlZmluZWQuXG4gICAqL1xuICBwdWJsaWMgc2V0VGhlbWUodGhlbWU6IElUaGVtZSA9IHt9KTogdm9pZCB7XG4gICAgdGhpcy5jb2xvcnMuZm9yZWdyb3VuZCA9IHRoaXMuX3BhcnNlQ29sb3IodGhlbWUuZm9yZWdyb3VuZCwgREVGQVVMVF9GT1JFR1JPVU5EKTtcbiAgICB0aGlzLmNvbG9ycy5iYWNrZ3JvdW5kID0gdGhpcy5fcGFyc2VDb2xvcih0aGVtZS5iYWNrZ3JvdW5kLCBERUZBVUxUX0JBQ0tHUk9VTkQpO1xuICAgIHRoaXMuY29sb3JzLmN1cnNvciA9IHRoaXMuX3BhcnNlQ29sb3IodGhlbWUuY3Vyc29yLCBERUZBVUxUX0NVUlNPUiwgdHJ1ZSk7XG4gICAgdGhpcy5jb2xvcnMuY3Vyc29yQWNjZW50ID0gdGhpcy5fcGFyc2VDb2xvcih0aGVtZS5jdXJzb3JBY2NlbnQsIERFRkFVTFRfQ1VSU09SX0FDQ0VOVCwgdHJ1ZSk7XG4gICAgdGhpcy5jb2xvcnMuc2VsZWN0aW9uVHJhbnNwYXJlbnQgPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLnNlbGVjdGlvbiwgREVGQVVMVF9TRUxFQ1RJT04sIHRydWUpO1xuICAgIHRoaXMuY29sb3JzLnNlbGVjdGlvbk9wYXF1ZSA9IGNvbG9yLmJsZW5kKHRoaXMuY29sb3JzLmJhY2tncm91bmQsIHRoaXMuY29sb3JzLnNlbGVjdGlvblRyYW5zcGFyZW50KTtcbiAgICAvKipcbiAgICAgKiBJZiBzZWxlY3Rpb24gY29sb3IgaXMgb3BhcXVlLCBibGVuZCBpdCB3aXRoIGJhY2tncm91bmQgd2l0aCAwLjMgb3BhY2l0eVxuICAgICAqIElzc3VlICMyNzM3XG4gICAgICovXG4gICAgaWYgKGNvbG9yLmlzT3BhcXVlKHRoaXMuY29sb3JzLnNlbGVjdGlvblRyYW5zcGFyZW50KSkge1xuICAgICAgY29uc3Qgb3BhY2l0eSA9IDAuMztcbiAgICAgIHRoaXMuY29sb3JzLnNlbGVjdGlvblRyYW5zcGFyZW50ID0gY29sb3Iub3BhY2l0eSh0aGlzLmNvbG9ycy5zZWxlY3Rpb25UcmFuc3BhcmVudCwgb3BhY2l0eSk7XG4gICAgfVxuICAgIHRoaXMuY29sb3JzLmFuc2lbMF0gPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLmJsYWNrLCBERUZBVUxUX0FOU0lfQ09MT1JTWzBdKTtcbiAgICB0aGlzLmNvbG9ycy5hbnNpWzFdID0gdGhpcy5fcGFyc2VDb2xvcih0aGVtZS5yZWQsIERFRkFVTFRfQU5TSV9DT0xPUlNbMV0pO1xuICAgIHRoaXMuY29sb3JzLmFuc2lbMl0gPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLmdyZWVuLCBERUZBVUxUX0FOU0lfQ09MT1JTWzJdKTtcbiAgICB0aGlzLmNvbG9ycy5hbnNpWzNdID0gdGhpcy5fcGFyc2VDb2xvcih0aGVtZS55ZWxsb3csIERFRkFVTFRfQU5TSV9DT0xPUlNbM10pO1xuICAgIHRoaXMuY29sb3JzLmFuc2lbNF0gPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLmJsdWUsIERFRkFVTFRfQU5TSV9DT0xPUlNbNF0pO1xuICAgIHRoaXMuY29sb3JzLmFuc2lbNV0gPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLm1hZ2VudGEsIERFRkFVTFRfQU5TSV9DT0xPUlNbNV0pO1xuICAgIHRoaXMuY29sb3JzLmFuc2lbNl0gPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLmN5YW4sIERFRkFVTFRfQU5TSV9DT0xPUlNbNl0pO1xuICAgIHRoaXMuY29sb3JzLmFuc2lbN10gPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLndoaXRlLCBERUZBVUxUX0FOU0lfQ09MT1JTWzddKTtcbiAgICB0aGlzLmNvbG9ycy5hbnNpWzhdID0gdGhpcy5fcGFyc2VDb2xvcih0aGVtZS5icmlnaHRCbGFjaywgREVGQVVMVF9BTlNJX0NPTE9SU1s4XSk7XG4gICAgdGhpcy5jb2xvcnMuYW5zaVs5XSA9IHRoaXMuX3BhcnNlQ29sb3IodGhlbWUuYnJpZ2h0UmVkLCBERUZBVUxUX0FOU0lfQ09MT1JTWzldKTtcbiAgICB0aGlzLmNvbG9ycy5hbnNpWzEwXSA9IHRoaXMuX3BhcnNlQ29sb3IodGhlbWUuYnJpZ2h0R3JlZW4sIERFRkFVTFRfQU5TSV9DT0xPUlNbMTBdKTtcbiAgICB0aGlzLmNvbG9ycy5hbnNpWzExXSA9IHRoaXMuX3BhcnNlQ29sb3IodGhlbWUuYnJpZ2h0WWVsbG93LCBERUZBVUxUX0FOU0lfQ09MT1JTWzExXSk7XG4gICAgdGhpcy5jb2xvcnMuYW5zaVsxMl0gPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLmJyaWdodEJsdWUsIERFRkFVTFRfQU5TSV9DT0xPUlNbMTJdKTtcbiAgICB0aGlzLmNvbG9ycy5hbnNpWzEzXSA9IHRoaXMuX3BhcnNlQ29sb3IodGhlbWUuYnJpZ2h0TWFnZW50YSwgREVGQVVMVF9BTlNJX0NPTE9SU1sxM10pO1xuICAgIHRoaXMuY29sb3JzLmFuc2lbMTRdID0gdGhpcy5fcGFyc2VDb2xvcih0aGVtZS5icmlnaHRDeWFuLCBERUZBVUxUX0FOU0lfQ09MT1JTWzE0XSk7XG4gICAgdGhpcy5jb2xvcnMuYW5zaVsxNV0gPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLmJyaWdodFdoaXRlLCBERUZBVUxUX0FOU0lfQ09MT1JTWzE1XSk7XG4gICAgLy8gQ2xlYXIgb3VyIHRoZSBjYWNoZVxuICAgIHRoaXMuX2NvbnRyYXN0Q2FjaGUuY2xlYXIoKTtcbiAgICB0aGlzLl91cGRhdGVSZXN0b3JlQ29sb3JzKCk7XG4gIH1cblxuICBwdWJsaWMgcmVzdG9yZUNvbG9yKHNsb3Q/OiBDb2xvckluZGV4KTogdm9pZCB7XG4gICAgLy8gdW5zZXQgc2xvdCByZXN0b3JlcyBhbGwgYW5zaSBjb2xvcnNcbiAgICBpZiAoc2xvdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3Jlc3RvcmVDb2xvcnMuYW5zaS5sZW5ndGg7ICsraSkge1xuICAgICAgICB0aGlzLmNvbG9ycy5hbnNpW2ldID0gdGhpcy5fcmVzdG9yZUNvbG9ycy5hbnNpW2ldO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2l0Y2ggKHNsb3QpIHtcbiAgICAgIGNhc2UgQ29sb3JJbmRleC5GT1JFR1JPVU5EOlxuICAgICAgICB0aGlzLmNvbG9ycy5mb3JlZ3JvdW5kID0gdGhpcy5fcmVzdG9yZUNvbG9ycy5mb3JlZ3JvdW5kO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQ29sb3JJbmRleC5CQUNLR1JPVU5EOlxuICAgICAgICB0aGlzLmNvbG9ycy5iYWNrZ3JvdW5kID0gdGhpcy5fcmVzdG9yZUNvbG9ycy5iYWNrZ3JvdW5kO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQ29sb3JJbmRleC5DVVJTT1I6XG4gICAgICAgIHRoaXMuY29sb3JzLmN1cnNvciA9IHRoaXMuX3Jlc3RvcmVDb2xvcnMuY3Vyc29yO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMuY29sb3JzLmFuc2lbc2xvdF0gPSB0aGlzLl9yZXN0b3JlQ29sb3JzLmFuc2lbc2xvdF07XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfdXBkYXRlUmVzdG9yZUNvbG9ycygpOiB2b2lkIHtcbiAgICB0aGlzLl9yZXN0b3JlQ29sb3JzID0ge1xuICAgICAgZm9yZWdyb3VuZDogdGhpcy5jb2xvcnMuZm9yZWdyb3VuZCxcbiAgICAgIGJhY2tncm91bmQ6IHRoaXMuY29sb3JzLmJhY2tncm91bmQsXG4gICAgICBjdXJzb3I6IHRoaXMuY29sb3JzLmN1cnNvcixcbiAgICAgIGFuc2k6IFsuLi50aGlzLmNvbG9ycy5hbnNpXVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIF9wYXJzZUNvbG9yKFxuICAgIGNzczogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgIGZhbGxiYWNrOiBJQ29sb3IsXG4gICAgYWxsb3dUcmFuc3BhcmVuY3k6IGJvb2xlYW4gPSB0aGlzLmFsbG93VHJhbnNwYXJlbmN5XG4gICk6IElDb2xvciB7XG4gICAgaWYgKGNzcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgfVxuXG4gICAgLy8gSWYgcGFyc2luZyB0aGUgdmFsdWUgcmVzdWx0cyBpbiBmYWlsdXJlLCB0aGVuIGl0IG11c3QgYmUgaWdub3JlZCwgYW5kIHRoZSBhdHRyaWJ1dGUgbXVzdFxuICAgIC8vIHJldGFpbiBpdHMgcHJldmlvdXMgdmFsdWUuXG4gICAgLy8gLS0gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvY2FudmFzLmh0bWwjZmlsbC1hbmQtc3Ryb2tlLXN0eWxlc1xuICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLl9saXRtdXNDb2xvcjtcbiAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gY3NzO1xuICAgIGlmICh0eXBlb2YgdGhpcy5fY3R4LmZpbGxTdHlsZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnNvbGUud2FybihgQ29sb3I6ICR7Y3NzfSBpcyBpbnZhbGlkIHVzaW5nIGZhbGxiYWNrICR7ZmFsbGJhY2suY3NzfWApO1xuICAgICAgcmV0dXJuIGZhbGxiYWNrO1xuICAgIH1cblxuICAgIHRoaXMuX2N0eC5maWxsUmVjdCgwLCAwLCAxLCAxKTtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5fY3R4LmdldEltYWdlRGF0YSgwLCAwLCAxLCAxKS5kYXRhO1xuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIHByaW50ZWQgY29sb3Igd2FzIHRyYW5zcGFyZW50XG4gICAgaWYgKGRhdGFbM10gIT09IDB4RkYpIHtcbiAgICAgIGlmICghYWxsb3dUcmFuc3BhcmVuY3kpIHtcbiAgICAgICAgLy8gSWRlYWxseSB3ZSdkIGp1c3QgaWdub3JlIHRoZSBhbHBoYSBjaGFubmVsLCBidXQuLi5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gQnJvd3NlcnMgbWF5IG5vdCBnaXZlIGJhY2sgZXhhY3RseSB0aGUgc2FtZSBSR0IgdmFsdWVzIHdlIHB1dCBpbiwgYmVjYXVzZSBtb3N0L2FsbFxuICAgICAgICAvLyBjb252ZXJ0IHRoZSBjb2xvciB0byBhIHByZS1tdWx0aXBsaWVkIHJlcHJlc2VudGF0aW9uLiBnZXRJbWFnZURhdGEgY29udmVydHMgdGhhdCBiYWNrIHRvXG4gICAgICAgIC8vIGEgdW4tcHJlbXVsdGlwbGVkIHJlcHJlc2VudGF0aW9uLCBidXQgdGhlIHByZWNpc2lvbiBsb3NzIG1heSBtYWtlIHRoZSBSR0IgY2hhbm5lbHMgdW51YWJsZVxuICAgICAgICAvLyBvbiB0aGVpciBvd24uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEUuZy4gSW4gQ2hyb21lICMxMjM0NTYxMCB0dXJucyBpbnRvICMxMDMwNTAxMCwgYW5kIGluIHRoZSBleHRyZW1lIGNhc2UsIDB4RkZGRkZGMDAgdHVybnNcbiAgICAgICAgLy8gaW50byAweDAwMDAwMDAwLlxuICAgICAgICAvL1xuICAgICAgICAvLyBcIk5vdGU6IER1ZSB0byB0aGUgbG9zc3kgbmF0dXJlIG9mIGNvbnZlcnRpbmcgdG8gYW5kIGZyb20gcHJlbXVsdGlwbGllZCBhbHBoYSBjb2xvciB2YWx1ZXMsXG4gICAgICAgIC8vIHBpeGVscyB0aGF0IGhhdmUganVzdCBiZWVuIHNldCB1c2luZyBwdXRJbWFnZURhdGEoKSBtaWdodCBiZSByZXR1cm5lZCB0byBhbiBlcXVpdmFsZW50XG4gICAgICAgIC8vIGdldEltYWdlRGF0YSgpIGFzIGRpZmZlcmVudCB2YWx1ZXMuXCJcbiAgICAgICAgLy8gLS0gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvY2FudmFzLmh0bWwjcGl4ZWwtbWFuaXB1bGF0aW9uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFNvIGxldCdzIGp1c3QgdXNlIHRoZSBmYWxsYmFjayBjb2xvciBpbiB0aGlzIGNhc2UgaW5zdGVhZC5cbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBDb2xvcjogJHtjc3N9IGlzIHVzaW5nIHRyYW5zcGFyZW5jeSwgYnV0IGFsbG93VHJhbnNwYXJlbmN5IGlzIGZhbHNlLiBgICtcbiAgICAgICAgICBgVXNpbmcgZmFsbGJhY2sgJHtmYWxsYmFjay5jc3N9LmBcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrO1xuICAgICAgfVxuXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9jYW52YXMuaHRtbCNzZXJpYWxpc2F0aW9uLW9mLWEtY29sb3JcbiAgICAgIC8vIHRoZSBjb2xvciB2YWx1ZSBoYXMgYWxwaGEgbGVzcyB0aGFuIDEuMCwgYW5kIHRoZSBzdHJpbmcgaXMgdGhlIGNvbG9yIHZhbHVlIGluIHRoZSBDU1MgcmdiYSgpXG4gICAgICBjb25zdCBbciwgZywgYiwgYV0gPSB0aGlzLl9jdHguZmlsbFN0eWxlLnN1YnN0cmluZyg1LCB0aGlzLl9jdHguZmlsbFN0eWxlLmxlbmd0aCAtIDEpLnNwbGl0KCcsJykubWFwKGNvbXBvbmVudCA9PiBOdW1iZXIoY29tcG9uZW50KSk7XG4gICAgICBjb25zdCBhbHBoYSA9IE1hdGgucm91bmQoYSAqIDI1NSk7XG4gICAgICBjb25zdCByZ2JhOiBudW1iZXIgPSBjaGFubmVscy50b1JnYmEociwgZywgYiwgYWxwaGEpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmdiYSxcbiAgICAgICAgY3NzXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9jYW52YXMuaHRtbCNzZXJpYWxpc2F0aW9uLW9mLWEtY29sb3JcbiAgICAgIC8vIGlmIGl0IGhhcyBhbHBoYSBlcXVhbCB0byAxLjAsIHRoZW4gdGhlIHN0cmluZyBpcyBhIGxvd2VyY2FzZSBzaXgtZGlnaXQgaGV4IHZhbHVlLCBwcmVmaXhlZCB3aXRoIGEgXCIjXCIgY2hhcmFjdGVyXG4gICAgICBjc3M6IHRoaXMuX2N0eC5maWxsU3R5bGUsXG4gICAgICByZ2JhOiBjaGFubmVscy50b1JnYmEoZGF0YVswXSwgZGF0YVsxXSwgZGF0YVsyXSwgZGF0YVszXSlcbiAgICB9O1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAyMCBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVFbGVtZW50RnJvbVBhcmVudCguLi5lbGVtZW50czogKEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkKVtdKTogdm9pZCB7XG4gIGZvciAoY29uc3QgZSBvZiBlbGVtZW50cykge1xuICAgIGU/LnBhcmVudEVsZW1lbnQ/LnJlbW92ZUNoaWxkKGUpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOCBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElEaXNwb3NhYmxlIH0gZnJvbSAnY29tbW9uL1R5cGVzJztcblxuLyoqXG4gKiBBZGRzIGEgZGlzcG9zYWJsZSBsaXN0ZW5lciB0byBhIG5vZGUgaW4gdGhlIERPTSwgcmV0dXJuaW5nIHRoZSBkaXNwb3NhYmxlLlxuICogQHBhcmFtIHR5cGUgVGhlIGV2ZW50IHR5cGUuXG4gKiBAcGFyYW0gaGFuZGxlciBUaGUgaGFuZGxlciBmb3IgdGhlIGxpc3RlbmVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKFxuICBub2RlOiBFbGVtZW50IHwgV2luZG93IHwgRG9jdW1lbnQsXG4gIHR5cGU6IHN0cmluZyxcbiAgaGFuZGxlcjogKGU6IGFueSkgPT4gdm9pZCxcbiAgb3B0aW9ucz86IGJvb2xlYW4gfCBBZGRFdmVudExpc3RlbmVyT3B0aW9uc1xuKTogSURpc3Bvc2FibGUge1xuICBub2RlLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gIGxldCBkaXNwb3NlZCA9IGZhbHNlO1xuICByZXR1cm4ge1xuICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgIGlmIChkaXNwb3NlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkaXNwb3NlZCA9IHRydWU7XG4gICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgfVxuICB9O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJTGlua2lmaWVyRXZlbnQsIElMaW5rTWF0Y2hlciwgTGlua01hdGNoZXJIYW5kbGVyLCBJTGlua01hdGNoZXJPcHRpb25zLCBJTGlua2lmaWVyLCBJTW91c2Vab25lTWFuYWdlciwgSU1vdXNlWm9uZSwgSVJlZ2lzdGVyZWRMaW5rTWF0Y2hlciB9IGZyb20gJ2Jyb3dzZXIvVHlwZXMnO1xuaW1wb3J0IHsgSUJ1ZmZlclN0cmluZ0l0ZXJhdG9yUmVzdWx0IH0gZnJvbSAnY29tbW9uL2J1ZmZlci9UeXBlcyc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElFdmVudCB9IGZyb20gJ2NvbW1vbi9FdmVudEVtaXR0ZXInO1xuaW1wb3J0IHsgSUxvZ1NlcnZpY2UsIElCdWZmZXJTZXJ2aWNlLCBJT3B0aW9uc1NlcnZpY2UsIElVbmljb2RlU2VydmljZSB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5cbi8qKlxuICogTGltaXQgb2YgdGhlIHVud3JhcHBpbmcgbGluZSBleHBhbnNpb24gKG92ZXJzY2FuKSBhdCB0aGUgdG9wIGFuZCBib3R0b21cbiAqIG9mIHRoZSBhY3R1YWwgdmlld3BvcnQgaW4gQVNDSUkgY2hhcmFjdGVycy5cbiAqIEEgbGltaXQgb2YgMjAwMCBzaG91bGQgbWF0Y2ggbW9zdCBzYW5lIHVybHMuXG4gKi9cbmNvbnN0IE9WRVJTQ0FOX0NIQVJfTElNSVQgPSAyMDAwO1xuXG4vKipcbiAqIFRoZSBMaW5raWZpZXIgYXBwbGllcyBsaW5rcyB0byByb3dzIHNob3J0bHkgYWZ0ZXIgdGhleSBoYXZlIGJlZW4gcmVmcmVzaGVkLlxuICovXG5leHBvcnQgY2xhc3MgTGlua2lmaWVyIGltcGxlbWVudHMgSUxpbmtpZmllciB7XG4gIC8qKlxuICAgKiBUaGUgdGltZSB0byB3YWl0IGFmdGVyIGEgcm93IGlzIGNoYW5nZWQgYmVmb3JlIGl0IGlzIGxpbmtpZmllZC4gVGhpcyBwcmV2ZW50c1xuICAgKiB0aGUgY29zdGx5IG9wZXJhdGlvbiBvZiBzZWFyY2hpbmcgZXZlcnkgcm93IG11bHRpcGxlIHRpbWVzLCBwb3RlbnRpYWxseSBhXG4gICAqIGh1Z2UgYW1vdW50IG9mIHRpbWVzLlxuICAgKi9cbiAgcHJvdGVjdGVkIHN0YXRpYyBfdGltZUJlZm9yZUxhdGVuY3kgPSAyMDA7XG5cbiAgcHJvdGVjdGVkIF9saW5rTWF0Y2hlcnM6IElSZWdpc3RlcmVkTGlua01hdGNoZXJbXSA9IFtdO1xuXG4gIHByaXZhdGUgX21vdXNlWm9uZU1hbmFnZXI6IElNb3VzZVpvbmVNYW5hZ2VyIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIF9lbGVtZW50OiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZDtcblxuICBwcml2YXRlIF9yb3dzVGltZW91dElkOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX25leHRMaW5rTWF0Y2hlcklkID0gMDtcbiAgcHJpdmF0ZSBfcm93c1RvTGlua2lmeTogeyBzdGFydDogbnVtYmVyIHwgdW5kZWZpbmVkLCBlbmQ6IG51bWJlciB8IHVuZGVmaW5lZCB9O1xuXG4gIHByaXZhdGUgX29uU2hvd0xpbmtVbmRlcmxpbmUgPSBuZXcgRXZlbnRFbWl0dGVyPElMaW5raWZpZXJFdmVudD4oKTtcbiAgcHVibGljIGdldCBvblNob3dMaW5rVW5kZXJsaW5lKCk6IElFdmVudDxJTGlua2lmaWVyRXZlbnQ+IHsgcmV0dXJuIHRoaXMuX29uU2hvd0xpbmtVbmRlcmxpbmUuZXZlbnQ7IH1cbiAgcHJpdmF0ZSBfb25IaWRlTGlua1VuZGVybGluZSA9IG5ldyBFdmVudEVtaXR0ZXI8SUxpbmtpZmllckV2ZW50PigpO1xuICBwdWJsaWMgZ2V0IG9uSGlkZUxpbmtVbmRlcmxpbmUoKTogSUV2ZW50PElMaW5raWZpZXJFdmVudD4geyByZXR1cm4gdGhpcy5fb25IaWRlTGlua1VuZGVybGluZS5ldmVudDsgfVxuICBwcml2YXRlIF9vbkxpbmtUb29sdGlwID0gbmV3IEV2ZW50RW1pdHRlcjxJTGlua2lmaWVyRXZlbnQ+KCk7XG4gIHB1YmxpYyBnZXQgb25MaW5rVG9vbHRpcCgpOiBJRXZlbnQ8SUxpbmtpZmllckV2ZW50PiB7IHJldHVybiB0aGlzLl9vbkxpbmtUb29sdGlwLmV2ZW50OyB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQElCdWZmZXJTZXJ2aWNlIHByb3RlY3RlZCByZWFkb25seSBfYnVmZmVyU2VydmljZTogSUJ1ZmZlclNlcnZpY2UsXG4gICAgQElMb2dTZXJ2aWNlIHByaXZhdGUgcmVhZG9ubHkgX2xvZ1NlcnZpY2U6IElMb2dTZXJ2aWNlLFxuICAgIEBJVW5pY29kZVNlcnZpY2UgcHJpdmF0ZSByZWFkb25seSBfdW5pY29kZVNlcnZpY2U6IElVbmljb2RlU2VydmljZVxuICApIHtcbiAgICB0aGlzLl9yb3dzVG9MaW5raWZ5ID0ge1xuICAgICAgc3RhcnQ6IHVuZGVmaW5lZCxcbiAgICAgIGVuZDogdW5kZWZpbmVkXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdHRhY2hlcyB0aGUgbGlua2lmaWVyIHRvIHRoZSBET00sIGVuYWJsaW5nIGxpbmtpZmljYXRpb24uXG4gICAqIEBwYXJhbSBtb3VzZVpvbmVNYW5hZ2VyIFRoZSBtb3VzZSB6b25lIG1hbmFnZXIgdG8gcmVnaXN0ZXIgbGluayB6b25lcyB3aXRoLlxuICAgKi9cbiAgcHVibGljIGF0dGFjaFRvRG9tKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBtb3VzZVpvbmVNYW5hZ2VyOiBJTW91c2Vab25lTWFuYWdlcik6IHZvaWQge1xuICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuX21vdXNlWm9uZU1hbmFnZXIgPSBtb3VzZVpvbmVNYW5hZ2VyO1xuICB9XG5cbiAgLyoqXG4gICAqIFF1ZXVlIGxpbmtpZmljYXRpb24gb24gYSBzZXQgb2Ygcm93cy5cbiAgICogQHBhcmFtIHN0YXJ0IFRoZSByb3cgdG8gbGlua2lmeSBmcm9tIChpbmNsdXNpdmUpLlxuICAgKiBAcGFyYW0gZW5kIFRoZSByb3cgdG8gbGlua2lmeSB0byAoaW5jbHVzaXZlKS5cbiAgICovXG4gIHB1YmxpYyBsaW5raWZ5Um93cyhzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcik6IHZvaWQge1xuICAgIC8vIERvbid0IGF0dGVtcHQgbGlua2lmeSBpZiBub3QgeWV0IGF0dGFjaGVkIHRvIERPTVxuICAgIGlmICghdGhpcy5fbW91c2Vab25lTWFuYWdlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEluY3JlYXNlIHJhbmdlIHRvIGxpbmtpZnlcbiAgICBpZiAodGhpcy5fcm93c1RvTGlua2lmeS5zdGFydCA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3Jvd3NUb0xpbmtpZnkuZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX3Jvd3NUb0xpbmtpZnkuc3RhcnQgPSBzdGFydDtcbiAgICAgIHRoaXMuX3Jvd3NUb0xpbmtpZnkuZW5kID0gZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9yb3dzVG9MaW5raWZ5LnN0YXJ0ID0gTWF0aC5taW4odGhpcy5fcm93c1RvTGlua2lmeS5zdGFydCwgc3RhcnQpO1xuICAgICAgdGhpcy5fcm93c1RvTGlua2lmeS5lbmQgPSBNYXRoLm1heCh0aGlzLl9yb3dzVG9MaW5raWZ5LmVuZCwgZW5kKTtcbiAgICB9XG5cbiAgICAvLyBDbGVhciBvdXQgYW55IGV4aXN0aW5nIGxpbmtzIG9uIHRoaXMgcm93IHJhbmdlXG4gICAgdGhpcy5fbW91c2Vab25lTWFuYWdlci5jbGVhckFsbChzdGFydCwgZW5kKTtcblxuICAgIC8vIFJlc3RhcnQgdGltZXJcbiAgICBpZiAodGhpcy5fcm93c1RpbWVvdXRJZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3Jvd3NUaW1lb3V0SWQpO1xuICAgIH1cblxuICAgIC8vIENhbm5vdCB1c2Ugd2luZG93LnNldFRpbWVvdXQgc2luY2UgdGVzdHMgbmVlZCB0byBydW4gaW4gbm9kZVxuICAgIHRoaXMuX3Jvd3NUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuX2xpbmtpZnlSb3dzKCksIExpbmtpZmllci5fdGltZUJlZm9yZUxhdGVuY3kpIGFzIGFueSBhcyBudW1iZXI7XG4gIH1cblxuICAvKipcbiAgICogTGlua2lmaWVzIHRoZSByb3dzIHJlcXVlc3RlZC5cbiAgICovXG4gIHByaXZhdGUgX2xpbmtpZnlSb3dzKCk6IHZvaWQge1xuICAgIHRoaXMuX3Jvd3NUaW1lb3V0SWQgPSB1bmRlZmluZWQ7XG4gICAgY29uc3QgYnVmZmVyID0gdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXI7XG5cbiAgICBpZiAodGhpcy5fcm93c1RvTGlua2lmeS5zdGFydCA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3Jvd3NUb0xpbmtpZnkuZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX2xvZ1NlcnZpY2UuZGVidWcoJ19yb3dUb0xpbmtpZnkgd2FzIHVuc2V0IGJlZm9yZSBfbGlua2lmeVJvd3Mgd2FzIGNhbGxlZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEVuc3VyZSB0aGUgc3RhcnQgcm93IGV4aXN0c1xuICAgIGNvbnN0IGFic29sdXRlUm93SW5kZXhTdGFydCA9IGJ1ZmZlci55ZGlzcCArIHRoaXMuX3Jvd3NUb0xpbmtpZnkuc3RhcnQ7XG4gICAgaWYgKGFic29sdXRlUm93SW5kZXhTdGFydCA+PSBidWZmZXIubGluZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSW52YWxpZGF0ZSBiYWQgZW5kIHJvdyB2YWx1ZXMgKGlmIGEgcmVzaXplIGhhcHBlbmVkKVxuICAgIGNvbnN0IGFic29sdXRlUm93SW5kZXhFbmQgPSBidWZmZXIueWRpc3AgKyBNYXRoLm1pbih0aGlzLl9yb3dzVG9MaW5raWZ5LmVuZCwgdGhpcy5fYnVmZmVyU2VydmljZS5yb3dzKSArIDE7XG5cbiAgICAvLyBJdGVyYXRlIG92ZXIgdGhlIHJhbmdlIG9mIHVud3JhcHBlZCBjb250ZW50IHN0cmluZ3Mgd2l0aGluIHN0YXJ0Li5lbmRcbiAgICAvLyAoZXhjbHVkaW5nKS5cbiAgICAvLyBfZG9MaW5raWZ5Um93IGdldHMgZnVsbCB1bndyYXBwZWQgbGluZXMgd2l0aCB0aGUgc3RhcnQgcm93IGFzIGJ1ZmZlciBvZmZzZXRcbiAgICAvLyBmb3IgZXZlcnkgbWF0Y2hlci5cbiAgICAvLyBUaGUgdW53cmFwcGluZyBpcyBuZWVkZWQgdG8gYWxzbyBtYXRjaCBjb250ZW50IHRoYXQgZ290IHdyYXBwZWQgYWNyb3NzXG4gICAgLy8gc2V2ZXJhbCBidWZmZXIgbGluZXMuIFRvIGF2b2lkIGEgd29yc3QgY2FzZSBzY2VuYXJpbyB3aGVyZSB0aGUgd2hvbGUgYnVmZmVyXG4gICAgLy8gY29udGFpbnMganVzdCBhIHNpbmdsZSB1bndyYXBwZWQgc3RyaW5nIHdlIGxpbWl0IHRoaXMgbGluZSBleHBhbnNpb24gYmV5b25kXG4gICAgLy8gdGhlIHZpZXdwb3J0IHRvICtPVkVSU0NBTl9DSEFSX0xJTUlUIGNoYXJzIChvdmVyc2NhbikgYXQgdG9wIGFuZCBib3R0b20uXG4gICAgLy8gVGhpcyBjb21lcyB3aXRoIHRoZSB0cmFkZW9mZiB0aGF0IG1hdGNoZXMgbG9uZ2VyIHRoYW4gT1ZFUlNDQU5fQ0hBUl9MSU1JVFxuICAgIC8vIGNoYXJzIHdpbGwgbm90IG1hdGNoIGFueW1vcmUgYXQgdGhlIHZpZXdwb3J0IGJvcmRlcnMuXG4gICAgY29uc3Qgb3ZlcnNjYW5MaW5lTGltaXQgPSBNYXRoLmNlaWwoT1ZFUlNDQU5fQ0hBUl9MSU1JVCAvIHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scyk7XG4gICAgY29uc3QgaXRlcmF0b3IgPSB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlci5pdGVyYXRvcihcbiAgICAgIGZhbHNlLCBhYnNvbHV0ZVJvd0luZGV4U3RhcnQsIGFic29sdXRlUm93SW5kZXhFbmQsIG92ZXJzY2FuTGluZUxpbWl0LCBvdmVyc2NhbkxpbmVMaW1pdCk7XG4gICAgd2hpbGUgKGl0ZXJhdG9yLmhhc05leHQoKSkge1xuICAgICAgY29uc3QgbGluZURhdGE6IElCdWZmZXJTdHJpbmdJdGVyYXRvclJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbGlua01hdGNoZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuX2RvTGlua2lmeVJvdyhsaW5lRGF0YS5yYW5nZS5maXJzdCwgbGluZURhdGEuY29udGVudCwgdGhpcy5fbGlua01hdGNoZXJzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9yb3dzVG9MaW5raWZ5LnN0YXJ0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3Jvd3NUb0xpbmtpZnkuZW5kID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGxpbmsgbWF0Y2hlciwgYWxsb3dpbmcgY3VzdG9tIGxpbmsgcGF0dGVybnMgdG8gYmUgbWF0Y2hlZCBhbmRcbiAgICogaGFuZGxlZC5cbiAgICogQHBhcmFtIHJlZ2V4IFRoZSByZWd1bGFyIGV4cHJlc3Npb24gdG8gc2VhcmNoIGZvci4gU3BlY2lmaWNhbGx5LCB0aGlzXG4gICAqIHNlYXJjaGVzIHRoZSB0ZXh0Q29udGVudCBvZiB0aGUgcm93cy4gWW91IHdpbGwgd2FudCB0byB1c2UgXFxzIHRvIG1hdGNoIGFcbiAgICogc3BhY2UgJyAnIGNoYXJhY3RlciBmb3IgZXhhbXBsZS5cbiAgICogQHBhcmFtIGhhbmRsZXIgVGhlIGNhbGxiYWNrIHdoZW4gdGhlIGxpbmsgaXMgY2FsbGVkLlxuICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIGZvciB0aGUgbGluayBtYXRjaGVyLlxuICAgKiBAcmV0dXJuIFRoZSBJRCBvZiB0aGUgbmV3IG1hdGNoZXIsIHRoaXMgY2FuIGJlIHVzZWQgdG8gZGVyZWdpc3Rlci5cbiAgICovXG4gIHB1YmxpYyByZWdpc3RlckxpbmtNYXRjaGVyKHJlZ2V4OiBSZWdFeHAsIGhhbmRsZXI6IExpbmtNYXRjaGVySGFuZGxlciwgb3B0aW9uczogSUxpbmtNYXRjaGVyT3B0aW9ucyA9IHt9KTogbnVtYmVyIHtcbiAgICBpZiAoIWhhbmRsZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaGFuZGxlciBtdXN0IGJlIGRlZmluZWQnKTtcbiAgICB9XG4gICAgY29uc3QgbWF0Y2hlcjogSVJlZ2lzdGVyZWRMaW5rTWF0Y2hlciA9IHtcbiAgICAgIGlkOiB0aGlzLl9uZXh0TGlua01hdGNoZXJJZCsrLFxuICAgICAgcmVnZXgsXG4gICAgICBoYW5kbGVyLFxuICAgICAgbWF0Y2hJbmRleDogb3B0aW9ucy5tYXRjaEluZGV4LFxuICAgICAgdmFsaWRhdGlvbkNhbGxiYWNrOiBvcHRpb25zLnZhbGlkYXRpb25DYWxsYmFjayxcbiAgICAgIGhvdmVyVG9vbHRpcENhbGxiYWNrOiBvcHRpb25zLnRvb2x0aXBDYWxsYmFjayxcbiAgICAgIGhvdmVyTGVhdmVDYWxsYmFjazogb3B0aW9ucy5sZWF2ZUNhbGxiYWNrLFxuICAgICAgd2lsbExpbmtBY3RpdmF0ZTogb3B0aW9ucy53aWxsTGlua0FjdGl2YXRlLFxuICAgICAgcHJpb3JpdHk6IG9wdGlvbnMucHJpb3JpdHkgfHwgMFxuICAgIH07XG4gICAgdGhpcy5fYWRkTGlua01hdGNoZXJUb0xpc3QobWF0Y2hlcik7XG4gICAgcmV0dXJuIG1hdGNoZXIuaWQ7XG4gIH1cblxuICAvKipcbiAgICogSW5zZXJ0cyBhIGxpbmsgbWF0Y2hlciB0byB0aGUgbGlzdCBpbiB0aGUgY29ycmVjdCBwb3NpdGlvbiBiYXNlZCBvbiB0aGVcbiAgICogcHJpb3JpdHkgb2YgZWFjaCBsaW5rIG1hdGNoZXIuIE5ldyBsaW5rIG1hdGNoZXJzIG9mIGVxdWFsIHByaW9yaXR5IGFyZVxuICAgKiBjb25zaWRlcmVkIGFmdGVyIG9sZGVyIGxpbmsgbWF0Y2hlcnMuXG4gICAqIEBwYXJhbSBtYXRjaGVyIFRoZSBsaW5rIG1hdGNoZXIgdG8gYmUgYWRkZWQuXG4gICAqL1xuICBwcml2YXRlIF9hZGRMaW5rTWF0Y2hlclRvTGlzdChtYXRjaGVyOiBJUmVnaXN0ZXJlZExpbmtNYXRjaGVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2xpbmtNYXRjaGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuX2xpbmtNYXRjaGVycy5wdXNoKG1hdGNoZXIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSB0aGlzLl9saW5rTWF0Y2hlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGlmIChtYXRjaGVyLnByaW9yaXR5IDw9IHRoaXMuX2xpbmtNYXRjaGVyc1tpXS5wcmlvcml0eSkge1xuICAgICAgICB0aGlzLl9saW5rTWF0Y2hlcnMuc3BsaWNlKGkgKyAxLCAwLCBtYXRjaGVyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2xpbmtNYXRjaGVycy5zcGxpY2UoMCwgMCwgbWF0Y2hlcik7XG4gIH1cblxuICAvKipcbiAgICogRGVyZWdpc3RlcnMgYSBsaW5rIG1hdGNoZXIgaWYgaXQgaGFzIGJlZW4gcmVnaXN0ZXJlZC5cbiAgICogQHBhcmFtIG1hdGNoZXJJZCBUaGUgbGluayBtYXRjaGVyJ3MgSUQgKHJldHVybmVkIGFmdGVyIHJlZ2lzdGVyKVxuICAgKiBAcmV0dXJuIFdoZXRoZXIgYSBsaW5rIG1hdGNoZXIgd2FzIGZvdW5kIGFuZCBkZXJlZ2lzdGVyZWQuXG4gICAqL1xuICBwdWJsaWMgZGVyZWdpc3RlckxpbmtNYXRjaGVyKG1hdGNoZXJJZDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9saW5rTWF0Y2hlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLl9saW5rTWF0Y2hlcnNbaV0uaWQgPT09IG1hdGNoZXJJZCkge1xuICAgICAgICB0aGlzLl9saW5rTWF0Y2hlcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIExpbmtpZmllcyBhIHJvdyBnaXZlbiBhIHNwZWNpZmljIGhhbmRsZXIuXG4gICAqIEBwYXJhbSByb3dJbmRleCBUaGUgcm93IGluZGV4IHRvIGxpbmtpZnkgKGFic29sdXRlIGluZGV4KS5cbiAgICogQHBhcmFtIHRleHQgc3RyaW5nIGNvbnRlbnQgb2YgdGhlIHVud3JhcHBlZCByb3cuXG4gICAqIEBwYXJhbSBtYXRjaGVyIFRoZSBsaW5rIG1hdGNoZXIgZm9yIHRoaXMgbGluZS5cbiAgICovXG4gIHByaXZhdGUgX2RvTGlua2lmeVJvdyhyb3dJbmRleDogbnVtYmVyLCB0ZXh0OiBzdHJpbmcsIG1hdGNoZXI6IElMaW5rTWF0Y2hlcik6IHZvaWQge1xuICAgIC8vIGNsb25lIHJlZ2V4IHRvIGRvIGEgZ2xvYmFsIHNlYXJjaCBvbiB0ZXh0XG4gICAgY29uc3QgcmV4ID0gbmV3IFJlZ0V4cChtYXRjaGVyLnJlZ2V4LnNvdXJjZSwgKG1hdGNoZXIucmVnZXguZmxhZ3MgfHwgJycpICsgJ2cnKTtcbiAgICBsZXQgbWF0Y2g7XG4gICAgbGV0IHN0cmluZ0luZGV4ID0gLTE7XG4gICAgd2hpbGUgKChtYXRjaCA9IHJleC5leGVjKHRleHQpKSAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgdXJpID0gbWF0Y2hbdHlwZW9mIG1hdGNoZXIubWF0Y2hJbmRleCAhPT0gJ251bWJlcicgPyAwIDogbWF0Y2hlci5tYXRjaEluZGV4XTtcbiAgICAgIGlmICghdXJpKSB7XG4gICAgICAgIC8vIHNvbWV0aGluZyBtYXRjaGVkIGJ1dCBkb2VzIG5vdCBjb21wbHkgd2l0aCB0aGUgZ2l2ZW4gbWF0Y2hJbmRleFxuICAgICAgICAvLyBzaW5jZSB0aGlzIGlzIG1vc3QgbGlrZWx5IGEgYnVnIHRoZSByZWdleCBpdHNlbGYgd2Ugc2ltcGx5IGRvIG5vdGhpbmcgaGVyZVxuICAgICAgICB0aGlzLl9sb2dTZXJ2aWNlLmRlYnVnKCdtYXRjaCBmb3VuZCB3aXRob3V0IGNvcnJlc3BvbmRpbmcgbWF0Y2hJbmRleCcsIG1hdGNoLCBtYXRjaGVyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIC8vIEdldCBpbmRleCwgbWF0Y2guaW5kZXggaXMgZm9yIHRoZSBvdXRlciBtYXRjaCB3aGljaCBpbmNsdWRlcyBuZWdhdGVkIGNoYXJzXG4gICAgICAvLyB0aGVyZWZvcmUgd2UgY2Fubm90IHVzZSBtYXRjaC5pbmRleCBkaXJlY3RseSwgaW5zdGVhZCB3ZSBzZWFyY2ggdGhlIHBvc2l0aW9uXG4gICAgICAvLyBvZiB0aGUgbWF0Y2ggZ3JvdXAgaW4gdGV4dCBhZ2FpblxuICAgICAgLy8gYWxzbyBjb3JyZWN0IHJlZ2V4IGFuZCBzdHJpbmcgc2VhcmNoIG9mZnNldHMgZm9yIHRoZSBuZXh0IGxvb3AgcnVuXG4gICAgICBzdHJpbmdJbmRleCA9IHRleHQuaW5kZXhPZih1cmksIHN0cmluZ0luZGV4ICsgMSk7XG4gICAgICByZXgubGFzdEluZGV4ID0gc3RyaW5nSW5kZXggKyB1cmkubGVuZ3RoO1xuICAgICAgaWYgKHN0cmluZ0luZGV4IDwgMCkge1xuICAgICAgICAvLyBpbnZhbGlkIHN0cmluZ0luZGV4IChzaG91bGQgbm90IGhhdmUgaGFwcGVuZWQpXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICAvLyBnZXQgdGhlIGJ1ZmZlciBpbmRleCBhcyBbYWJzb2x1dGUgcm93LCBjb2xdIGZvciB0aGUgbWF0Y2hcbiAgICAgIGNvbnN0IGJ1ZmZlckluZGV4ID0gdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXIuc3RyaW5nSW5kZXhUb0J1ZmZlckluZGV4KHJvd0luZGV4LCBzdHJpbmdJbmRleCk7XG4gICAgICBpZiAoYnVmZmVySW5kZXhbMF0gPCAwKSB7XG4gICAgICAgIC8vIGludmFsaWQgYnVmZmVySW5kZXggKHNob3VsZCBub3QgaGF2ZSBoYXBwZW5lZClcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGxpbmUgPSB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlci5saW5lcy5nZXQoYnVmZmVySW5kZXhbMF0pO1xuICAgICAgaWYgKCFsaW5lKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBhdHRyID0gbGluZS5nZXRGZyhidWZmZXJJbmRleFsxXSk7XG4gICAgICBjb25zdCBmZyA9IGF0dHIgPyAoYXR0ciA+PiA5KSAmIDB4MWZmIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAobWF0Y2hlci52YWxpZGF0aW9uQ2FsbGJhY2spIHtcbiAgICAgICAgbWF0Y2hlci52YWxpZGF0aW9uQ2FsbGJhY2sodXJpLCBpc1ZhbGlkID0+IHtcbiAgICAgICAgICAvLyBEaXNjYXJkIGxpbmsgaWYgdGhlIGxpbmUgaGFzIGFscmVhZHkgY2hhbmdlZFxuICAgICAgICAgIGlmICh0aGlzLl9yb3dzVGltZW91dElkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRMaW5rKGJ1ZmZlckluZGV4WzFdLCBidWZmZXJJbmRleFswXSAtIHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLnlkaXNwLCB1cmksIG1hdGNoZXIsIGZnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fYWRkTGluayhidWZmZXJJbmRleFsxXSwgYnVmZmVySW5kZXhbMF0gLSB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlci55ZGlzcCwgdXJpLCBtYXRjaGVyLCBmZyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGxpbmsgdG8gdGhlIG1vdXNlIHpvbmUgbWFuYWdlci5cbiAgICogQHBhcmFtIHggVGhlIGNvbHVtbiB0aGUgbGluayBzdGFydHMuXG4gICAqIEBwYXJhbSB5IFRoZSByb3cgdGhlIGxpbmsgaXMgb24uXG4gICAqIEBwYXJhbSB1cmkgVGhlIFVSSSBvZiB0aGUgbGluay5cbiAgICogQHBhcmFtIG1hdGNoZXIgVGhlIGxpbmsgbWF0Y2hlciBmb3IgdGhlIGxpbmsuXG4gICAqIEBwYXJhbSBmZyBUaGUgbGluayBjb2xvciBmb3IgaG92ZXIgZXZlbnQuXG4gICAqL1xuICBwcml2YXRlIF9hZGRMaW5rKHg6IG51bWJlciwgeTogbnVtYmVyLCB1cmk6IHN0cmluZywgbWF0Y2hlcjogSUxpbmtNYXRjaGVyLCBmZzogbnVtYmVyIHwgdW5kZWZpbmVkKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9tb3VzZVpvbmVNYW5hZ2VyIHx8ICF0aGlzLl9lbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIEZJWE1FOiBnZXQgY2VsbCBsZW5ndGggZnJvbSBidWZmZXIgdG8gYXZvaWQgbWlzbWF0Y2ggYWZ0ZXIgVW5pY29kZSB2ZXJzaW9uIGNoYW5nZVxuICAgIGNvbnN0IHdpZHRoID0gdGhpcy5fdW5pY29kZVNlcnZpY2UuZ2V0U3RyaW5nQ2VsbFdpZHRoKHVyaSk7XG4gICAgY29uc3QgeDEgPSB4ICUgdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzO1xuICAgIGNvbnN0IHkxID0geSArIE1hdGguZmxvb3IoeCAvIHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scyk7XG4gICAgbGV0IHgyID0gKHgxICsgd2lkdGgpICUgdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzO1xuICAgIGxldCB5MiA9IHkxICsgTWF0aC5mbG9vcigoeDEgKyB3aWR0aCkgLyB0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHMpO1xuICAgIGlmICh4MiA9PT0gMCkge1xuICAgICAgeDIgPSB0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHM7XG4gICAgICB5Mi0tO1xuICAgIH1cblxuICAgIHRoaXMuX21vdXNlWm9uZU1hbmFnZXIuYWRkKG5ldyBNb3VzZVpvbmUoXG4gICAgICB4MSArIDEsXG4gICAgICB5MSArIDEsXG4gICAgICB4MiArIDEsXG4gICAgICB5MiArIDEsXG4gICAgICBlID0+IHtcbiAgICAgICAgaWYgKG1hdGNoZXIuaGFuZGxlcikge1xuICAgICAgICAgIHJldHVybiBtYXRjaGVyLmhhbmRsZXIoZSwgdXJpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdXaW5kb3cgPSB3aW5kb3cub3BlbigpO1xuICAgICAgICBpZiAobmV3V2luZG93KSB7XG4gICAgICAgICAgbmV3V2luZG93Lm9wZW5lciA9IG51bGw7XG4gICAgICAgICAgbmV3V2luZG93LmxvY2F0aW9uLmhyZWYgPSB1cmk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdPcGVuaW5nIGxpbmsgYmxvY2tlZCBhcyBvcGVuZXIgY291bGQgbm90IGJlIGNsZWFyZWQnKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgdGhpcy5fb25TaG93TGlua1VuZGVybGluZS5maXJlKHRoaXMuX2NyZWF0ZUxpbmtIb3ZlckV2ZW50KHgxLCB5MSwgeDIsIHkyLCBmZykpO1xuICAgICAgICB0aGlzLl9lbGVtZW50IS5jbGFzc0xpc3QuYWRkKCd4dGVybS1jdXJzb3ItcG9pbnRlcicpO1xuICAgICAgfSxcbiAgICAgIGUgPT4ge1xuICAgICAgICB0aGlzLl9vbkxpbmtUb29sdGlwLmZpcmUodGhpcy5fY3JlYXRlTGlua0hvdmVyRXZlbnQoeDEsIHkxLCB4MiwgeTIsIGZnKSk7XG4gICAgICAgIGlmIChtYXRjaGVyLmhvdmVyVG9vbHRpcENhbGxiYWNrKSB7XG4gICAgICAgICAgLy8gTm90ZSB0aGF0IElWaWV3cG9ydFJhbmdlIHVzZSAxLWJhc2VkIGNvb3JkaW5hdGVzIHRvIGFsaWduIHdpdGggZXNjYXBlIHNlcXVlbmNlcyBzdWNoXG4gICAgICAgICAgLy8gYXMgQ1VQIHdoaWNoIHVzZSAxLDEgYXMgdGhlIGRlZmF1bHQgZm9yIHJvdy9jb2xcbiAgICAgICAgICBtYXRjaGVyLmhvdmVyVG9vbHRpcENhbGxiYWNrKGUsIHVyaSwgeyBzdGFydDogeyB4OiB4MSwgeTogeTEgfSwgZW5kOiB7IHg6IHgyLCB5OiB5MiB9IH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgKCkgPT4ge1xuICAgICAgICB0aGlzLl9vbkhpZGVMaW5rVW5kZXJsaW5lLmZpcmUodGhpcy5fY3JlYXRlTGlua0hvdmVyRXZlbnQoeDEsIHkxLCB4MiwgeTIsIGZnKSk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQhLmNsYXNzTGlzdC5yZW1vdmUoJ3h0ZXJtLWN1cnNvci1wb2ludGVyJyk7XG4gICAgICAgIGlmIChtYXRjaGVyLmhvdmVyTGVhdmVDYWxsYmFjaykge1xuICAgICAgICAgIG1hdGNoZXIuaG92ZXJMZWF2ZUNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBlID0+IHtcbiAgICAgICAgaWYgKG1hdGNoZXIud2lsbExpbmtBY3RpdmF0ZSkge1xuICAgICAgICAgIHJldHVybiBtYXRjaGVyLndpbGxMaW5rQWN0aXZhdGUoZSwgdXJpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICApKTtcbiAgfVxuXG4gIHByaXZhdGUgX2NyZWF0ZUxpbmtIb3ZlckV2ZW50KHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIsIGZnOiBudW1iZXIgfCB1bmRlZmluZWQpOiBJTGlua2lmaWVyRXZlbnQge1xuICAgIHJldHVybiB7IHgxLCB5MSwgeDIsIHkyLCBjb2xzOiB0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHMsIGZnIH07XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1vdXNlWm9uZSBpbXBsZW1lbnRzIElNb3VzZVpvbmUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgeDE6IG51bWJlcixcbiAgICBwdWJsaWMgeTE6IG51bWJlcixcbiAgICBwdWJsaWMgeDI6IG51bWJlcixcbiAgICBwdWJsaWMgeTI6IG51bWJlcixcbiAgICBwdWJsaWMgY2xpY2tDYWxsYmFjazogKGU6IE1vdXNlRXZlbnQpID0+IGFueSxcbiAgICBwdWJsaWMgaG92ZXJDYWxsYmFjazogKGU6IE1vdXNlRXZlbnQpID0+IGFueSxcbiAgICBwdWJsaWMgdG9vbHRpcENhbGxiYWNrOiAoZTogTW91c2VFdmVudCkgPT4gYW55LFxuICAgIHB1YmxpYyBsZWF2ZUNhbGxiYWNrOiAoKSA9PiB2b2lkLFxuICAgIHB1YmxpYyB3aWxsTGlua0FjdGl2YXRlOiAoZTogTW91c2VFdmVudCkgPT4gYm9vbGVhblxuICApIHtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJTGlua2lmaWVyMiwgSUxpbmtQcm92aWRlciwgSUJ1ZmZlckNlbGxQb3NpdGlvbiwgSUxpbmssIElMaW5raWZpZXJFdmVudCwgSUxpbmtEZWNvcmF0aW9ucywgSUxpbmtXaXRoU3RhdGUgfSBmcm9tICdicm93c2VyL1R5cGVzJztcbmltcG9ydCB7IElEaXNwb3NhYmxlIH0gZnJvbSAnY29tbW9uL1R5cGVzJztcbmltcG9ydCB7IElNb3VzZVNlcnZpY2UsIElSZW5kZXJTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5pbXBvcnQgeyBJQnVmZmVyU2VydmljZSB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElFdmVudCB9IGZyb20gJ2NvbW1vbi9FdmVudEVtaXR0ZXInO1xuaW1wb3J0IHsgRGlzcG9zYWJsZSwgZ2V0RGlzcG9zZUFycmF5RGlzcG9zYWJsZSwgZGlzcG9zZUFycmF5IH0gZnJvbSAnY29tbW9uL0xpZmVjeWNsZSc7XG5pbXBvcnQgeyBhZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIgfSBmcm9tICdicm93c2VyL0xpZmVjeWNsZSc7XG5cbmV4cG9ydCBjbGFzcyBMaW5raWZpZXIyIGV4dGVuZHMgRGlzcG9zYWJsZSBpbXBsZW1lbnRzIElMaW5raWZpZXIyIHtcbiAgcHJpdmF0ZSBfZWxlbWVudDogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX21vdXNlU2VydmljZTogSU1vdXNlU2VydmljZSB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBfcmVuZGVyU2VydmljZTogSVJlbmRlclNlcnZpY2UgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX2xpbmtQcm92aWRlcnM6IElMaW5rUHJvdmlkZXJbXSA9IFtdO1xuICBwdWJsaWMgZ2V0IGN1cnJlbnRMaW5rKCk6IElMaW5rV2l0aFN0YXRlIHwgdW5kZWZpbmVkIHsgcmV0dXJuIHRoaXMuX2N1cnJlbnRMaW5rOyB9XG4gIHByb3RlY3RlZCBfY3VycmVudExpbms6IElMaW5rV2l0aFN0YXRlIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIF9sYXN0TW91c2VFdmVudDogTW91c2VFdmVudCB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBfbGlua0NhY2hlRGlzcG9zYWJsZXM6IElEaXNwb3NhYmxlW10gPSBbXTtcbiAgcHJpdmF0ZSBfbGFzdEJ1ZmZlckNlbGw6IElCdWZmZXJDZWxsUG9zaXRpb24gfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX2lzTW91c2VPdXQ6IGJvb2xlYW4gPSB0cnVlO1xuICBwcml2YXRlIF9hY3RpdmVQcm92aWRlclJlcGxpZXM6IE1hcDxOdW1iZXIsIElMaW5rV2l0aFN0YXRlW10gfCB1bmRlZmluZWQ+IHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIF9hY3RpdmVMaW5lOiBudW1iZXIgPSAtMTtcblxuICBwcml2YXRlIF9vblNob3dMaW5rVW5kZXJsaW5lID0gdGhpcy5yZWdpc3RlcihuZXcgRXZlbnRFbWl0dGVyPElMaW5raWZpZXJFdmVudD4oKSk7XG4gIHB1YmxpYyBnZXQgb25TaG93TGlua1VuZGVybGluZSgpOiBJRXZlbnQ8SUxpbmtpZmllckV2ZW50PiB7IHJldHVybiB0aGlzLl9vblNob3dMaW5rVW5kZXJsaW5lLmV2ZW50OyB9XG4gIHByaXZhdGUgX29uSGlkZUxpbmtVbmRlcmxpbmUgPSB0aGlzLnJlZ2lzdGVyKG5ldyBFdmVudEVtaXR0ZXI8SUxpbmtpZmllckV2ZW50PigpKTtcbiAgcHVibGljIGdldCBvbkhpZGVMaW5rVW5kZXJsaW5lKCk6IElFdmVudDxJTGlua2lmaWVyRXZlbnQ+IHsgcmV0dXJuIHRoaXMuX29uSGlkZUxpbmtVbmRlcmxpbmUuZXZlbnQ7IH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBASUJ1ZmZlclNlcnZpY2UgcHJpdmF0ZSByZWFkb25seSBfYnVmZmVyU2VydmljZTogSUJ1ZmZlclNlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnJlZ2lzdGVyKGdldERpc3Bvc2VBcnJheURpc3Bvc2FibGUodGhpcy5fbGlua0NhY2hlRGlzcG9zYWJsZXMpKTtcbiAgfVxuXG4gIHB1YmxpYyByZWdpc3RlckxpbmtQcm92aWRlcihsaW5rUHJvdmlkZXI6IElMaW5rUHJvdmlkZXIpOiBJRGlzcG9zYWJsZSB7XG4gICAgdGhpcy5fbGlua1Byb3ZpZGVycy5wdXNoKGxpbmtQcm92aWRlcik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBsaW5rIHByb3ZpZGVyIGZyb20gdGhlIGxpc3RcbiAgICAgICAgY29uc3QgcHJvdmlkZXJJbmRleCA9IHRoaXMuX2xpbmtQcm92aWRlcnMuaW5kZXhPZihsaW5rUHJvdmlkZXIpO1xuXG4gICAgICAgIGlmIChwcm92aWRlckluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIHRoaXMuX2xpbmtQcm92aWRlcnMuc3BsaWNlKHByb3ZpZGVySW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBhdHRhY2hUb0RvbShlbGVtZW50OiBIVE1MRWxlbWVudCwgbW91c2VTZXJ2aWNlOiBJTW91c2VTZXJ2aWNlLCByZW5kZXJTZXJ2aWNlOiBJUmVuZGVyU2VydmljZSk6IHZvaWQge1xuICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuX21vdXNlU2VydmljZSA9IG1vdXNlU2VydmljZTtcbiAgICB0aGlzLl9yZW5kZXJTZXJ2aWNlID0gcmVuZGVyU2VydmljZTtcblxuICAgIHRoaXMucmVnaXN0ZXIoYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKHRoaXMuX2VsZW1lbnQsICdtb3VzZWxlYXZlJywgKCkgPT4ge1xuICAgICAgdGhpcy5faXNNb3VzZU91dCA9IHRydWU7XG4gICAgICB0aGlzLl9jbGVhckN1cnJlbnRMaW5rKCk7XG4gICAgfSkpO1xuICAgIHRoaXMucmVnaXN0ZXIoYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKHRoaXMuX2VsZW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9vbk1vdXNlTW92ZS5iaW5kKHRoaXMpKSk7XG4gICAgdGhpcy5yZWdpc3RlcihhZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIodGhpcy5fZWxlbWVudCwgJ2NsaWNrJywgdGhpcy5fb25DbGljay5iaW5kKHRoaXMpKSk7XG4gIH1cblxuICBwcml2YXRlIF9vbk1vdXNlTW92ZShldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIHRoaXMuX2xhc3RNb3VzZUV2ZW50ID0gZXZlbnQ7XG5cbiAgICBpZiAoIXRoaXMuX2VsZW1lbnQgfHwgIXRoaXMuX21vdXNlU2VydmljZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5fcG9zaXRpb25Gcm9tTW91c2VFdmVudChldmVudCwgdGhpcy5fZWxlbWVudCwgdGhpcy5fbW91c2VTZXJ2aWNlKTtcbiAgICBpZiAoIXBvc2l0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2lzTW91c2VPdXQgPSBmYWxzZTtcblxuICAgIC8vIElnbm9yZSB0aGUgZXZlbnQgaWYgaXQncyBhbiBlbWJlZGRlciBjcmVhdGVkIGhvdmVyIHdpZGdldFxuICAgIGNvbnN0IGNvbXBvc2VkUGF0aCA9IGV2ZW50LmNvbXBvc2VkUGF0aCgpIGFzIEhUTUxFbGVtZW50W107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb21wb3NlZFBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGNvbXBvc2VkUGF0aFtpXTtcbiAgICAgIC8vIEhpdCBUZXJtaW5hbC5lbGVtZW50LCBicmVhayBhbmQgY29udGludWVcbiAgICAgIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd4dGVybScpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgLy8gSXQncyBhIGhvdmVyLCBkb24ndCByZXNwZWN0IGhvdmVyIGV2ZW50XG4gICAgICBpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygneHRlcm0taG92ZXInKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9sYXN0QnVmZmVyQ2VsbCB8fCAocG9zaXRpb24ueCAhPT0gdGhpcy5fbGFzdEJ1ZmZlckNlbGwueCB8fCBwb3NpdGlvbi55ICE9PSB0aGlzLl9sYXN0QnVmZmVyQ2VsbC55KSkge1xuICAgICAgdGhpcy5fb25Ib3Zlcihwb3NpdGlvbik7XG4gICAgICB0aGlzLl9sYXN0QnVmZmVyQ2VsbCA9IHBvc2l0aW9uO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX29uSG92ZXIocG9zaXRpb246IElCdWZmZXJDZWxsUG9zaXRpb24pOiB2b2lkIHtcbiAgICAvLyBUT0RPOiBUaGlzIGN1cnJlbnRseSBkb2VzIG5vdCBjYWNoZSBsaW5rIHByb3ZpZGVyIHJlc3VsdHMgYWNyb3NzIHdyYXBwZWQgbGluZXMsIGFjdGl2ZUxpbmUgc2hvdWxkIGJlIHNvbWV0aGluZyBsaWtlIGBhY3RpdmVSYW5nZToge3N0YXJ0WSwgZW5kWX1gXG4gICAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byBjbGVhciB0aGUgbGlua1xuICAgIGlmICh0aGlzLl9hY3RpdmVMaW5lICE9PSBwb3NpdGlvbi55KSB7XG4gICAgICB0aGlzLl9jbGVhckN1cnJlbnRMaW5rKCk7XG4gICAgICB0aGlzLl9hc2tGb3JMaW5rKHBvc2l0aW9uLCBmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgdGhlIGlmIHRoZSBsaW5rIGlzIGluIHRoZSBtb3VzZSBwb3NpdGlvblxuICAgIGNvbnN0IGlzQ3VycmVudExpbmtJblBvc2l0aW9uID0gdGhpcy5fY3VycmVudExpbmsgJiYgdGhpcy5fbGlua0F0UG9zaXRpb24odGhpcy5fY3VycmVudExpbmsubGluaywgcG9zaXRpb24pO1xuICAgIGlmICghaXNDdXJyZW50TGlua0luUG9zaXRpb24pIHtcbiAgICAgIHRoaXMuX2NsZWFyQ3VycmVudExpbmsoKTtcbiAgICAgIHRoaXMuX2Fza0ZvckxpbmsocG9zaXRpb24sIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2Fza0ZvckxpbmsocG9zaXRpb246IElCdWZmZXJDZWxsUG9zaXRpb24sIHVzZUxpbmVDYWNoZTogYm9vbGVhbik6IHZvaWQge1xuICAgIGlmICghdGhpcy5fYWN0aXZlUHJvdmlkZXJSZXBsaWVzIHx8ICF1c2VMaW5lQ2FjaGUpIHtcbiAgICAgIHRoaXMuX2FjdGl2ZVByb3ZpZGVyUmVwbGllcz8uZm9yRWFjaChyZXBseSA9PiB7XG4gICAgICAgIHJlcGx5Py5mb3JFYWNoKGxpbmtXaXRoU3RhdGUgPT4ge1xuICAgICAgICAgIGlmIChsaW5rV2l0aFN0YXRlLmxpbmsuZGlzcG9zZSkge1xuICAgICAgICAgICAgbGlua1dpdGhTdGF0ZS5saW5rLmRpc3Bvc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLl9hY3RpdmVQcm92aWRlclJlcGxpZXMgPSBuZXcgTWFwKCk7XG4gICAgICB0aGlzLl9hY3RpdmVMaW5lID0gcG9zaXRpb24ueTtcbiAgICB9XG4gICAgbGV0IGxpbmtQcm92aWRlZCA9IGZhbHNlO1xuXG4gICAgLy8gVGhlcmUgaXMgbm8gbGluayBjYWNoZWQsIHNvIGFzayBmb3Igb25lXG4gICAgdGhpcy5fbGlua1Byb3ZpZGVycy5mb3JFYWNoKChsaW5rUHJvdmlkZXIsIGkpID0+IHtcbiAgICAgIGlmICh1c2VMaW5lQ2FjaGUpIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdSZXBseSA9IHRoaXMuX2FjdGl2ZVByb3ZpZGVyUmVwbGllcz8uZ2V0KGkpO1xuICAgICAgICAvLyBJZiB0aGVyZSBpc24ndCBhIHJlcGx5LCB0aGUgcHJvdmlkZXIgaGFzbid0IHJlc3BvbmRlZCB5ZXQuXG5cbiAgICAgICAgLy8gVE9ETzogSWYgdGhlcmUgaXNuJ3QgYSByZXBseSB5ZXQgaXQgbWVhbnMgdGhhdCB0aGUgcHJvdmlkZXIgaXMgc3RpbGwgcmVzb2x2aW5nLiBFbnN1cmluZ1xuICAgICAgICAvLyBwcm92aWRlTGlua3MgaXNuJ3QgdHJpZ2dlcmVkIGFnYWluIHNhdmVzIElMaW5rLmhvdmVyIGZpcmluZyB0d2ljZSB0aG91Z2guIFRoaXMgcHJvYmFibHlcbiAgICAgICAgLy8gbmVlZHMgcHJvbWlzZXMgdG8gZ2V0IGZpeGVkXG4gICAgICAgIGlmIChleGlzdGluZ1JlcGx5KSB7XG4gICAgICAgICAgbGlua1Byb3ZpZGVkID0gdGhpcy5fY2hlY2tMaW5rUHJvdmlkZXJSZXN1bHQoaSwgcG9zaXRpb24sIGxpbmtQcm92aWRlZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpbmtQcm92aWRlci5wcm92aWRlTGlua3MocG9zaXRpb24ueSwgKGxpbmtzOiBJTGlua1tdIHwgdW5kZWZpbmVkKSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMuX2lzTW91c2VPdXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgbGlua3NXaXRoU3RhdGU6IElMaW5rV2l0aFN0YXRlW10gfCB1bmRlZmluZWQgPSBsaW5rcz8ubWFwKGxpbmsgID0+ICh7IGxpbmsgfSkpO1xuICAgICAgICAgIHRoaXMuX2FjdGl2ZVByb3ZpZGVyUmVwbGllcz8uc2V0KGksIGxpbmtzV2l0aFN0YXRlKTtcbiAgICAgICAgICBsaW5rUHJvdmlkZWQgPSB0aGlzLl9jaGVja0xpbmtQcm92aWRlclJlc3VsdChpLCBwb3NpdGlvbiwgbGlua1Byb3ZpZGVkKTtcblxuICAgICAgICAgIC8vIElmIGFsbCBwcm92aWRlcnMgaGF2ZSByZXNwb25kZWQsIHJlbW92ZSBsb3dlciBwcmlvcml0eSBsaW5rcyB0aGF0IGludGVyc2VjdCByYW5nZXMgb2ZcbiAgICAgICAgICAvLyBoaWdoZXIgcHJpb3JpdHkgbGlua3NcbiAgICAgICAgICBpZiAodGhpcy5fYWN0aXZlUHJvdmlkZXJSZXBsaWVzPy5zaXplID09PSB0aGlzLl9saW5rUHJvdmlkZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlSW50ZXJzZWN0aW5nTGlua3MocG9zaXRpb24ueSwgdGhpcy5fYWN0aXZlUHJvdmlkZXJSZXBsaWVzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVtb3ZlSW50ZXJzZWN0aW5nTGlua3MoeTogbnVtYmVyLCByZXBsaWVzOiBNYXA8TnVtYmVyLCBJTGlua1dpdGhTdGF0ZVtdIHwgdW5kZWZpbmVkPik6IHZvaWQge1xuICAgIGNvbnN0IG9jY3VwaWVkQ2VsbHMgPSBuZXcgU2V0PG51bWJlcj4oKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcGxpZXMuc2l6ZTsgaSsrKSB7XG4gICAgICBjb25zdCBwcm92aWRlclJlcGx5ID0gcmVwbGllcy5nZXQoaSk7XG4gICAgICBpZiAoIXByb3ZpZGVyUmVwbHkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3ZpZGVyUmVwbHkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgbGlua1dpdGhTdGF0ZSA9IHByb3ZpZGVyUmVwbHlbaV07XG4gICAgICAgIGNvbnN0IHN0YXJ0WCA9IGxpbmtXaXRoU3RhdGUubGluay5yYW5nZS5zdGFydC55IDwgeSA/IDAgOiBsaW5rV2l0aFN0YXRlLmxpbmsucmFuZ2Uuc3RhcnQueDtcbiAgICAgICAgY29uc3QgZW5kWCA9IGxpbmtXaXRoU3RhdGUubGluay5yYW5nZS5lbmQueSA+IHkgPyB0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHMgOiBsaW5rV2l0aFN0YXRlLmxpbmsucmFuZ2UuZW5kLng7XG4gICAgICAgIGZvciAobGV0IHggPSBzdGFydFg7IHggPD0gZW5kWDsgeCsrKSB7XG4gICAgICAgICAgaWYgKG9jY3VwaWVkQ2VsbHMuaGFzKHgpKSB7XG4gICAgICAgICAgICBwcm92aWRlclJlcGx5LnNwbGljZShpLS0sIDEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9jY3VwaWVkQ2VsbHMuYWRkKHgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfY2hlY2tMaW5rUHJvdmlkZXJSZXN1bHQoaW5kZXg6IG51bWJlciwgcG9zaXRpb246IElCdWZmZXJDZWxsUG9zaXRpb24sIGxpbmtQcm92aWRlZDogYm9vbGVhbik6IGJvb2xlYW4ge1xuICAgIGlmICghdGhpcy5fYWN0aXZlUHJvdmlkZXJSZXBsaWVzKSB7XG4gICAgICByZXR1cm4gbGlua1Byb3ZpZGVkO1xuICAgIH1cblxuICAgIGNvbnN0IGxpbmtzID0gdGhpcy5fYWN0aXZlUHJvdmlkZXJSZXBsaWVzLmdldChpbmRleCk7XG5cbiAgICAvLyBDaGVjayBpZiBldmVyeSBwcm92aWRlciBiZWZvcmUgdGhpcyBvbmUgaGFzIGNvbWUgYmFjayB1bmRlZmluZWRcbiAgICBsZXQgaGFzTGlua0JlZm9yZSA9IGZhbHNlO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgaW5kZXg7IGorKykge1xuICAgICAgaWYgKCF0aGlzLl9hY3RpdmVQcm92aWRlclJlcGxpZXMuaGFzKGopIHx8IHRoaXMuX2FjdGl2ZVByb3ZpZGVyUmVwbGllcy5nZXQoaikpIHtcbiAgICAgICAgaGFzTGlua0JlZm9yZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgYWxsIHByb3ZpZGVycyB3aXRoIGhpZ2hlciBwcmlvcml0eSBjYW1lIGJhY2sgdW5kZWZpbmVkLCB0aGVuIHRoaXMgcHJvdmlkZXIncyBsaW5rIGZvclxuICAgIC8vIHRoZSBwb3NpdGlvbiBzaG91bGQgYmUgdXNlZFxuICAgIGlmICghaGFzTGlua0JlZm9yZSAmJiBsaW5rcykge1xuICAgICAgY29uc3QgbGlua0F0UG9zaXRpb24gPSBsaW5rcy5maW5kKGxpbmsgPT4gdGhpcy5fbGlua0F0UG9zaXRpb24obGluay5saW5rLCBwb3NpdGlvbikpO1xuICAgICAgaWYgKGxpbmtBdFBvc2l0aW9uKSB7XG4gICAgICAgIGxpbmtQcm92aWRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX2hhbmRsZU5ld0xpbmsobGlua0F0UG9zaXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIGFsbCB0aGUgcHJvdmlkZXJzIGhhdmUgcmVzcG9uZGVkXG4gICAgaWYgKHRoaXMuX2FjdGl2ZVByb3ZpZGVyUmVwbGllcy5zaXplID09PSB0aGlzLl9saW5rUHJvdmlkZXJzLmxlbmd0aCAmJiAhbGlua1Byb3ZpZGVkKSB7XG4gICAgICAvLyBSZXNwZWN0IHRoZSBvcmRlciBvZiB0aGUgbGluayBwcm92aWRlcnNcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5fYWN0aXZlUHJvdmlkZXJSZXBsaWVzLnNpemU7IGorKykge1xuICAgICAgICBjb25zdCBjdXJyZW50TGluayA9IHRoaXMuX2FjdGl2ZVByb3ZpZGVyUmVwbGllcy5nZXQoaik/LmZpbmQobGluayA9PiB0aGlzLl9saW5rQXRQb3NpdGlvbihsaW5rLmxpbmssIHBvc2l0aW9uKSk7XG4gICAgICAgIGlmIChjdXJyZW50TGluaykge1xuICAgICAgICAgIGxpbmtQcm92aWRlZCA9IHRydWU7XG4gICAgICAgICAgdGhpcy5faGFuZGxlTmV3TGluayhjdXJyZW50TGluayk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGlua1Byb3ZpZGVkO1xuICB9XG5cbiAgcHJpdmF0ZSBfb25DbGljayhldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5fZWxlbWVudCB8fCAhdGhpcy5fbW91c2VTZXJ2aWNlIHx8ICF0aGlzLl9jdXJyZW50TGluaykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5fcG9zaXRpb25Gcm9tTW91c2VFdmVudChldmVudCwgdGhpcy5fZWxlbWVudCwgdGhpcy5fbW91c2VTZXJ2aWNlKTtcblxuICAgIGlmICghcG9zaXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGlua0F0UG9zaXRpb24odGhpcy5fY3VycmVudExpbmsubGluaywgcG9zaXRpb24pKSB7XG4gICAgICB0aGlzLl9jdXJyZW50TGluay5saW5rLmFjdGl2YXRlKGV2ZW50LCB0aGlzLl9jdXJyZW50TGluay5saW5rLnRleHQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2NsZWFyQ3VycmVudExpbmsoc3RhcnRSb3c/OiBudW1iZXIsIGVuZFJvdz86IG51bWJlcik6IHZvaWQge1xuICAgIGlmICghdGhpcy5fZWxlbWVudCB8fCAhdGhpcy5fY3VycmVudExpbmsgfHwgIXRoaXMuX2xhc3RNb3VzZUV2ZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgaGF2ZSBhIHN0YXJ0IGFuZCBlbmQgcm93LCBjaGVjayB0aGF0IHRoZSBsaW5rIGlzIHdpdGhpbiBpdFxuICAgIGlmICghc3RhcnRSb3cgfHwgIWVuZFJvdyB8fCAodGhpcy5fY3VycmVudExpbmsubGluay5yYW5nZS5zdGFydC55ID49IHN0YXJ0Um93ICYmIHRoaXMuX2N1cnJlbnRMaW5rLmxpbmsucmFuZ2UuZW5kLnkgPD0gZW5kUm93KSkge1xuICAgICAgdGhpcy5fbGlua0xlYXZlKHRoaXMuX2VsZW1lbnQsIHRoaXMuX2N1cnJlbnRMaW5rLmxpbmssIHRoaXMuX2xhc3RNb3VzZUV2ZW50KTtcbiAgICAgIHRoaXMuX2N1cnJlbnRMaW5rID0gdW5kZWZpbmVkO1xuICAgICAgZGlzcG9zZUFycmF5KHRoaXMuX2xpbmtDYWNoZURpc3Bvc2FibGVzKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9oYW5kbGVOZXdMaW5rKGxpbmtXaXRoU3RhdGU6IElMaW5rV2l0aFN0YXRlKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9lbGVtZW50IHx8ICF0aGlzLl9sYXN0TW91c2VFdmVudCB8fCAhdGhpcy5fbW91c2VTZXJ2aWNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLl9wb3NpdGlvbkZyb21Nb3VzZUV2ZW50KHRoaXMuX2xhc3RNb3VzZUV2ZW50LCB0aGlzLl9lbGVtZW50LCB0aGlzLl9tb3VzZVNlcnZpY2UpO1xuXG4gICAgaWYgKCFwb3NpdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFRyaWdnZXIgaG92ZXIgaWYgdGhlIHdlIGhhdmUgYSBsaW5rIGF0IHRoZSBwb3NpdGlvblxuICAgIGlmICh0aGlzLl9saW5rQXRQb3NpdGlvbihsaW5rV2l0aFN0YXRlLmxpbmssIHBvc2l0aW9uKSkge1xuICAgICAgdGhpcy5fY3VycmVudExpbmsgPSBsaW5rV2l0aFN0YXRlO1xuICAgICAgdGhpcy5fY3VycmVudExpbmsuc3RhdGUgPSB7XG4gICAgICAgIGRlY29yYXRpb25zOiB7XG4gICAgICAgICAgdW5kZXJsaW5lOiBsaW5rV2l0aFN0YXRlLmxpbmsuZGVjb3JhdGlvbnMgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBsaW5rV2l0aFN0YXRlLmxpbmsuZGVjb3JhdGlvbnMudW5kZXJsaW5lLFxuICAgICAgICAgIHBvaW50ZXJDdXJzb3I6IGxpbmtXaXRoU3RhdGUubGluay5kZWNvcmF0aW9ucyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGxpbmtXaXRoU3RhdGUubGluay5kZWNvcmF0aW9ucy5wb2ludGVyQ3Vyc29yXG4gICAgICAgIH0sXG4gICAgICAgIGlzSG92ZXJlZDogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHRoaXMuX2xpbmtIb3Zlcih0aGlzLl9lbGVtZW50LCBsaW5rV2l0aFN0YXRlLmxpbmssIHRoaXMuX2xhc3RNb3VzZUV2ZW50KTtcblxuICAgICAgLy8gQWRkIGxpc3RlbmVyIGZvciB0cmFja2luZyBkZWNvcmF0aW9ucyBjaGFuZ2VzXG4gICAgICBsaW5rV2l0aFN0YXRlLmxpbmsuZGVjb3JhdGlvbnMgPSB7fSBhcyBJTGlua0RlY29yYXRpb25zO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMobGlua1dpdGhTdGF0ZS5saW5rLmRlY29yYXRpb25zLCB7XG4gICAgICAgIHBvaW50ZXJDdXJzb3I6IHtcbiAgICAgICAgICBnZXQ6ICgpID0+IHRoaXMuX2N1cnJlbnRMaW5rPy5zdGF0ZT8uZGVjb3JhdGlvbnMucG9pbnRlckN1cnNvcixcbiAgICAgICAgICBzZXQ6IHYgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRMaW5rPy5zdGF0ZSAmJiB0aGlzLl9jdXJyZW50TGluay5zdGF0ZS5kZWNvcmF0aW9ucy5wb2ludGVyQ3Vyc29yICE9PSB2KSB7XG4gICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRMaW5rLnN0YXRlLmRlY29yYXRpb25zLnBvaW50ZXJDdXJzb3IgPSB2O1xuICAgICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudExpbmsuc3RhdGUuaXNIb3ZlcmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZWxlbWVudD8uY2xhc3NMaXN0LnRvZ2dsZSgneHRlcm0tY3Vyc29yLXBvaW50ZXInLCB2KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdW5kZXJsaW5lOiB7XG4gICAgICAgICAgZ2V0OiAoKSA9PiB0aGlzLl9jdXJyZW50TGluaz8uc3RhdGU/LmRlY29yYXRpb25zLnVuZGVybGluZSxcbiAgICAgICAgICBzZXQ6IHYgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRMaW5rPy5zdGF0ZSAmJiB0aGlzLl9jdXJyZW50TGluaz8uc3RhdGU/LmRlY29yYXRpb25zLnVuZGVybGluZSAhPT0gdikge1xuICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50TGluay5zdGF0ZS5kZWNvcmF0aW9ucy51bmRlcmxpbmUgPSB2O1xuICAgICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudExpbmsuc3RhdGUuaXNIb3ZlcmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmlyZVVuZGVybGluZUV2ZW50KGxpbmtXaXRoU3RhdGUubGluaywgdik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBBZGQgbGlzdGVuZXIgZm9yIHJlcmVuZGVyaW5nXG4gICAgICBpZiAodGhpcy5fcmVuZGVyU2VydmljZSkge1xuICAgICAgICB0aGlzLl9saW5rQ2FjaGVEaXNwb3NhYmxlcy5wdXNoKHRoaXMuX3JlbmRlclNlcnZpY2Uub25SZW5kZXJlZEJ1ZmZlckNoYW5nZShlID0+IHtcbiAgICAgICAgICAvLyBXaGVuIHN0YXJ0IGlzIDAgYSBzY3JvbGwgbW9zdCBsaWtlbHkgb2NjdXJyZWQsIG1ha2Ugc3VyZSBsaW5rcyBhYm92ZSB0aGUgZm9sZCBhbHNvIGdldFxuICAgICAgICAgIC8vIGNsZWFyZWQuXG4gICAgICAgICAgY29uc3Qgc3RhcnQgPSBlLnN0YXJ0ID09PSAwID8gMCA6IGUuc3RhcnQgKyAxICsgdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXIueWRpc3A7XG4gICAgICAgICAgdGhpcy5fY2xlYXJDdXJyZW50TGluayhzdGFydCwgZS5lbmQgKyAxICsgdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXIueWRpc3ApO1xuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIF9saW5rSG92ZXIoZWxlbWVudDogSFRNTEVsZW1lbnQsIGxpbms6IElMaW5rLCBldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9jdXJyZW50TGluaz8uc3RhdGUpIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRMaW5rLnN0YXRlLmlzSG92ZXJlZCA9IHRydWU7XG4gICAgICBpZiAodGhpcy5fY3VycmVudExpbmsuc3RhdGUuZGVjb3JhdGlvbnMudW5kZXJsaW5lKSB7XG4gICAgICAgIHRoaXMuX2ZpcmVVbmRlcmxpbmVFdmVudChsaW5rLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9jdXJyZW50TGluay5zdGF0ZS5kZWNvcmF0aW9ucy5wb2ludGVyQ3Vyc29yKSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgneHRlcm0tY3Vyc29yLXBvaW50ZXInKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobGluay5ob3Zlcikge1xuICAgICAgbGluay5ob3ZlcihldmVudCwgbGluay50ZXh0KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9maXJlVW5kZXJsaW5lRXZlbnQobGluazogSUxpbmssIHNob3dFdmVudDogYm9vbGVhbik6IHZvaWQge1xuICAgIGNvbnN0IHJhbmdlID0gbGluay5yYW5nZTtcbiAgICBjb25zdCBzY3JvbGxPZmZzZXQgPSB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlci55ZGlzcDtcbiAgICBjb25zdCBldmVudCA9IHRoaXMuX2NyZWF0ZUxpbmtVbmRlcmxpbmVFdmVudChyYW5nZS5zdGFydC54IC0gMSwgcmFuZ2Uuc3RhcnQueSAtIHNjcm9sbE9mZnNldCAtIDEsIHJhbmdlLmVuZC54LCByYW5nZS5lbmQueSAtIHNjcm9sbE9mZnNldCAtIDEsIHVuZGVmaW5lZCk7XG4gICAgY29uc3QgZW1pdHRlciA9IHNob3dFdmVudCA/IHRoaXMuX29uU2hvd0xpbmtVbmRlcmxpbmUgOiB0aGlzLl9vbkhpZGVMaW5rVW5kZXJsaW5lO1xuICAgIGVtaXR0ZXIuZmlyZShldmVudCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX2xpbmtMZWF2ZShlbGVtZW50OiBIVE1MRWxlbWVudCwgbGluazogSUxpbmssIGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2N1cnJlbnRMaW5rPy5zdGF0ZSkge1xuICAgICAgdGhpcy5fY3VycmVudExpbmsuc3RhdGUuaXNIb3ZlcmVkID0gZmFsc2U7XG4gICAgICBpZiAodGhpcy5fY3VycmVudExpbmsuc3RhdGUuZGVjb3JhdGlvbnMudW5kZXJsaW5lKSB7XG4gICAgICAgIHRoaXMuX2ZpcmVVbmRlcmxpbmVFdmVudChsaW5rLCBmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fY3VycmVudExpbmsuc3RhdGUuZGVjb3JhdGlvbnMucG9pbnRlckN1cnNvcikge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3h0ZXJtLWN1cnNvci1wb2ludGVyJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGxpbmsubGVhdmUpIHtcbiAgICAgIGxpbmsubGVhdmUoZXZlbnQsIGxpbmsudGV4dCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBidWZmZXIgcG9zaXRpb24gaXMgd2l0aGluIHRoZSBsaW5rXG4gICAqIEBwYXJhbSBsaW5rXG4gICAqIEBwYXJhbSBwb3NpdGlvblxuICAgKi9cbiAgcHJpdmF0ZSBfbGlua0F0UG9zaXRpb24obGluazogSUxpbmssIHBvc2l0aW9uOiBJQnVmZmVyQ2VsbFBvc2l0aW9uKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgc2FtZUxpbmUgPSBsaW5rLnJhbmdlLnN0YXJ0LnkgPT09IGxpbmsucmFuZ2UuZW5kLnk7XG4gICAgY29uc3Qgd3JhcHBlZEZyb21MZWZ0ID0gbGluay5yYW5nZS5zdGFydC55IDwgcG9zaXRpb24ueTtcbiAgICBjb25zdCB3cmFwcGVkVG9SaWdodCA9IGxpbmsucmFuZ2UuZW5kLnkgPiBwb3NpdGlvbi55O1xuXG4gICAgLy8gSWYgdGhlIHN0YXJ0IGFuZCBlbmQgaGF2ZSB0aGUgc2FtZSB5LCB0aGVuIHRoZSBwb3NpdGlvbiBtdXN0IGJlIGJldHdlZW4gc3RhcnQgYW5kIGVuZCB4XG4gICAgLy8gSWYgbm90LCB0aGVuIGhhbmRsZSBlYWNoIGNhc2Ugc2VwZXJhdGVseSwgZGVwZW5kaW5nIG9uIHdoaWNoIHdheSBpdCB3cmFwc1xuICAgIHJldHVybiAoKHNhbWVMaW5lICYmIGxpbmsucmFuZ2Uuc3RhcnQueCA8PSBwb3NpdGlvbi54ICYmIGxpbmsucmFuZ2UuZW5kLnggPj0gcG9zaXRpb24ueCkgfHxcbiAgICAgICh3cmFwcGVkRnJvbUxlZnQgJiYgbGluay5yYW5nZS5lbmQueCA+PSBwb3NpdGlvbi54KSB8fFxuICAgICAgKHdyYXBwZWRUb1JpZ2h0ICYmIGxpbmsucmFuZ2Uuc3RhcnQueCA8PSBwb3NpdGlvbi54KSB8fFxuICAgICAgKHdyYXBwZWRGcm9tTGVmdCAmJiB3cmFwcGVkVG9SaWdodCkpICYmXG4gICAgICBsaW5rLnJhbmdlLnN0YXJ0LnkgPD0gcG9zaXRpb24ueSAmJlxuICAgICAgbGluay5yYW5nZS5lbmQueSA+PSBwb3NpdGlvbi55O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgYnVmZmVyIHBvc2l0aW9uIGZyb20gYSBtb3VzZSBldmVudFxuICAgKiBAcGFyYW0gZXZlbnRcbiAgICovXG4gIHByaXZhdGUgX3Bvc2l0aW9uRnJvbU1vdXNlRXZlbnQoZXZlbnQ6IE1vdXNlRXZlbnQsIGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBtb3VzZVNlcnZpY2U6IElNb3VzZVNlcnZpY2UpOiBJQnVmZmVyQ2VsbFBvc2l0aW9uIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBjb29yZHMgPSBtb3VzZVNlcnZpY2UuZ2V0Q29vcmRzKGV2ZW50LCBlbGVtZW50LCB0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHMsIHRoaXMuX2J1ZmZlclNlcnZpY2Uucm93cyk7XG4gICAgaWYgKCFjb29yZHMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4geyB4OiBjb29yZHNbMF0sIHk6IGNvb3Jkc1sxXSArIHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLnlkaXNwIH07XG4gIH1cblxuICBwcml2YXRlIF9jcmVhdGVMaW5rVW5kZXJsaW5lRXZlbnQoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlciwgZmc6IG51bWJlciB8IHVuZGVmaW5lZCk6IElMaW5raWZpZXJFdmVudCB7XG4gICAgcmV0dXJuIHsgeDEsIHkxLCB4MiwgeTIsIGNvbHM6IHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scywgZmcgfTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWNvbnN0XG5leHBvcnQgbGV0IHByb21wdExhYmVsID0gJ1Rlcm1pbmFsIGlucHV0JztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1jb25zdFxuZXhwb3J0IGxldCB0b29NdWNoT3V0cHV0ID0gJ1RvbyBtdWNoIG91dHB1dCB0byBhbm5vdW5jZSwgbmF2aWdhdGUgdG8gcm93cyBtYW51YWxseSB0byByZWFkJztcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgRGlzcG9zYWJsZSB9IGZyb20gJ2NvbW1vbi9MaWZlY3ljbGUnO1xuaW1wb3J0IHsgYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyIH0gZnJvbSAnYnJvd3Nlci9MaWZlY3ljbGUnO1xuaW1wb3J0IHsgSU1vdXNlU2VydmljZSwgSVNlbGVjdGlvblNlcnZpY2UgfSBmcm9tICdicm93c2VyL3NlcnZpY2VzL1NlcnZpY2VzJztcbmltcG9ydCB7IElNb3VzZVpvbmVNYW5hZ2VyLCBJTW91c2Vab25lIH0gZnJvbSAnYnJvd3Nlci9UeXBlcyc7XG5pbXBvcnQgeyBJQnVmZmVyU2VydmljZSwgSU9wdGlvbnNTZXJ2aWNlIH0gZnJvbSAnY29tbW9uL3NlcnZpY2VzL1NlcnZpY2VzJztcblxuLyoqXG4gKiBUaGUgTW91c2Vab25lTWFuYWdlciBhbGxvd3MgY29tcG9uZW50cyB0byByZWdpc3RlciB6b25lcyB3aXRoaW4gdGhlIHRlcm1pbmFsXG4gKiB0aGF0IHRyaWdnZXIgaG92ZXIgYW5kIGNsaWNrIGNhbGxiYWNrcy5cbiAqXG4gKiBUaGlzIGNsYXNzIHdhcyBpbnRlbnRpb25hbGx5IG1hZGUgbm90IHNvIHJvYnVzdCBpbml0aWFsbHkgYXMgdGhlIG9ubHkgY2FzZSBpdFxuICogbmVlZGVkIHRvIHN1cHBvcnQgd2FzIHNpbmdsZS1saW5lIGxpbmtzIHdoaWNoIG5ldmVyIG92ZXJsYXAuIEltcHJvdmVtZW50cyBjYW5cbiAqIGJlIG1hZGUgaW4gdGhlIGZ1dHVyZS5cbiAqL1xuZXhwb3J0IGNsYXNzIE1vdXNlWm9uZU1hbmFnZXIgZXh0ZW5kcyBEaXNwb3NhYmxlIGltcGxlbWVudHMgSU1vdXNlWm9uZU1hbmFnZXIge1xuICBwcml2YXRlIF96b25lczogSU1vdXNlWm9uZVtdID0gW107XG5cbiAgcHJpdmF0ZSBfYXJlWm9uZXNBY3RpdmU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfbW91c2VNb3ZlTGlzdGVuZXI6IChlOiBNb3VzZUV2ZW50KSA9PiBhbnk7XG4gIHByaXZhdGUgX21vdXNlTGVhdmVMaXN0ZW5lcjogKGU6IE1vdXNlRXZlbnQpID0+IGFueTtcbiAgcHJpdmF0ZSBfY2xpY2tMaXN0ZW5lcjogKGU6IE1vdXNlRXZlbnQpID0+IGFueTtcblxuICBwcml2YXRlIF90b29sdGlwVGltZW91dDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIF9jdXJyZW50Wm9uZTogSU1vdXNlWm9uZSB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBfbGFzdEhvdmVyQ29vcmRzOiBbbnVtYmVyIHwgdW5kZWZpbmVkLCBudW1iZXIgfCB1bmRlZmluZWRdID0gW3VuZGVmaW5lZCwgdW5kZWZpbmVkXTtcbiAgcHJpdmF0ZSBfaW5pdGlhbFNlbGVjdGlvbkxlbmd0aDogbnVtYmVyID0gMDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9lbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9zY3JlZW5FbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICBASUJ1ZmZlclNlcnZpY2UgcHJpdmF0ZSByZWFkb25seSBfYnVmZmVyU2VydmljZTogSUJ1ZmZlclNlcnZpY2UsXG4gICAgQElNb3VzZVNlcnZpY2UgcHJpdmF0ZSByZWFkb25seSBfbW91c2VTZXJ2aWNlOiBJTW91c2VTZXJ2aWNlLFxuICAgIEBJU2VsZWN0aW9uU2VydmljZSBwcml2YXRlIHJlYWRvbmx5IF9zZWxlY3Rpb25TZXJ2aWNlOiBJU2VsZWN0aW9uU2VydmljZSxcbiAgICBASU9wdGlvbnNTZXJ2aWNlIHByaXZhdGUgcmVhZG9ubHkgX29wdGlvbnNTZXJ2aWNlOiBJT3B0aW9uc1NlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMucmVnaXN0ZXIoYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKHRoaXMuX2VsZW1lbnQsICdtb3VzZWRvd24nLCBlID0+IHRoaXMuX29uTW91c2VEb3duKGUpKSk7XG5cbiAgICAvLyBUaGVzZSBldmVudHMgYXJlIGV4cGVuc2l2ZSwgb25seSBsaXN0ZW4gdG8gaXQgd2hlbiBtb3VzZSB6b25lcyBhcmUgYWN0aXZlXG4gICAgdGhpcy5fbW91c2VNb3ZlTGlzdGVuZXIgPSBlID0+IHRoaXMuX29uTW91c2VNb3ZlKGUpO1xuICAgIHRoaXMuX21vdXNlTGVhdmVMaXN0ZW5lciA9IGUgPT4gdGhpcy5fb25Nb3VzZUxlYXZlKGUpO1xuICAgIHRoaXMuX2NsaWNrTGlzdGVuZXIgPSBlID0+IHRoaXMuX29uQ2xpY2soZSk7XG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICBzdXBlci5kaXNwb3NlKCk7XG4gICAgdGhpcy5fZGVhY3RpdmF0ZSgpO1xuICB9XG5cbiAgcHVibGljIGFkZCh6b25lOiBJTW91c2Vab25lKTogdm9pZCB7XG4gICAgdGhpcy5fem9uZXMucHVzaCh6b25lKTtcbiAgICBpZiAodGhpcy5fem9uZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICB0aGlzLl9hY3RpdmF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBjbGVhckFsbChzdGFydD86IG51bWJlciwgZW5kPzogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8gRXhpdCBpZiB0aGVyZSdzIG5vdGhpbmcgdG8gY2xlYXJcbiAgICBpZiAodGhpcy5fem9uZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ2xlYXIgYWxsIGlmIHN0YXJ0L2VuZCB3ZXJlbid0IHNldFxuICAgIGlmICghc3RhcnQgfHwgIWVuZCkge1xuICAgICAgc3RhcnQgPSAwO1xuICAgICAgZW5kID0gdGhpcy5fYnVmZmVyU2VydmljZS5yb3dzIC0gMTtcbiAgICB9XG5cbiAgICAvLyBJdGVyYXRlIHRocm91Z2ggem9uZXMgYW5kIGNsZWFyIHRoZW0gb3V0IGlmIHRoZXkncmUgd2l0aGluIHRoZSByYW5nZVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fem9uZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHpvbmUgPSB0aGlzLl96b25lc1tpXTtcbiAgICAgIGlmICgoem9uZS55MSA+IHN0YXJ0ICYmIHpvbmUueTEgPD0gZW5kICsgMSkgfHxcbiAgICAgICAgICAoem9uZS55MiA+IHN0YXJ0ICYmIHpvbmUueTIgPD0gZW5kICsgMSkgfHxcbiAgICAgICAgICAoem9uZS55MSA8IHN0YXJ0ICYmIHpvbmUueTIgPiBlbmQgKyAxKSkge1xuICAgICAgICBpZiAodGhpcy5fY3VycmVudFpvbmUgJiYgdGhpcy5fY3VycmVudFpvbmUgPT09IHpvbmUpIHtcbiAgICAgICAgICB0aGlzLl9jdXJyZW50Wm9uZS5sZWF2ZUNhbGxiYWNrKCk7XG4gICAgICAgICAgdGhpcy5fY3VycmVudFpvbmUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fem9uZXMuc3BsaWNlKGktLSwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVhY3RpdmF0ZSB0aGUgbW91c2Ugem9uZSBtYW5hZ2VyIGlmIGFsbCB0aGUgem9uZXMgaGF2ZSBiZWVuIHJlbW92ZWRcbiAgICBpZiAodGhpcy5fem9uZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLl9kZWFjdGl2YXRlKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfYWN0aXZhdGUoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9hcmVab25lc0FjdGl2ZSkge1xuICAgICAgdGhpcy5fYXJlWm9uZXNBY3RpdmUgPSB0cnVlO1xuICAgICAgdGhpcy5fZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLl9tb3VzZU1vdmVMaXN0ZW5lcik7XG4gICAgICB0aGlzLl9lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLl9tb3VzZUxlYXZlTGlzdGVuZXIpO1xuICAgICAgdGhpcy5fZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX2NsaWNrTGlzdGVuZXIpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2RlYWN0aXZhdGUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2FyZVpvbmVzQWN0aXZlKSB7XG4gICAgICB0aGlzLl9hcmVab25lc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLl9tb3VzZU1vdmVMaXN0ZW5lcik7XG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLl9tb3VzZUxlYXZlTGlzdGVuZXIpO1xuICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX2NsaWNrTGlzdGVuZXIpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX29uTW91c2VNb3ZlKGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICAvLyBUT0RPOiBJZGVhbGx5IHRoaXMgd291bGQgb25seSBjbGVhciB0aGUgaG92ZXIgc3RhdGUgd2hlbiB0aGUgbW91c2UgbW92ZXNcbiAgICAvLyBvdXRzaWRlIG9mIHRoZSBtb3VzZSB6b25lXG4gICAgaWYgKHRoaXMuX2xhc3RIb3ZlckNvb3Jkc1swXSAhPT0gZS5wYWdlWCB8fCB0aGlzLl9sYXN0SG92ZXJDb29yZHNbMV0gIT09IGUucGFnZVkpIHtcbiAgICAgIHRoaXMuX29uSG92ZXIoZSk7XG4gICAgICAvLyBSZWNvcmQgdGhlIGN1cnJlbnQgY29vcmRpbmF0ZXNcbiAgICAgIHRoaXMuX2xhc3RIb3ZlckNvb3JkcyA9IFtlLnBhZ2VYLCBlLnBhZ2VZXTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9vbkhvdmVyKGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBjb25zdCB6b25lID0gdGhpcy5fZmluZFpvbmVFdmVudEF0KGUpO1xuXG4gICAgLy8gRG8gbm90aGluZyBpZiB0aGUgem9uZSBpcyB0aGUgc2FtZVxuICAgIGlmICh6b25lID09PSB0aGlzLl9jdXJyZW50Wm9uZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEZpcmUgdGhlIGhvdmVyIGVuZCBjYWxsYmFjayBhbmQgY2FuY2VsIGFueSBleGlzdGluZyB0aW1lciBpZiBhIG5ldyB6b25lXG4gICAgLy8gaXMgYmVpbmcgaG92ZXJlZFxuICAgIGlmICh0aGlzLl9jdXJyZW50Wm9uZSkge1xuICAgICAgdGhpcy5fY3VycmVudFpvbmUubGVhdmVDYWxsYmFjaygpO1xuICAgICAgdGhpcy5fY3VycmVudFpvbmUgPSB1bmRlZmluZWQ7XG4gICAgICBpZiAodGhpcy5fdG9vbHRpcFRpbWVvdXQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3Rvb2x0aXBUaW1lb3V0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFeGl0IGlmIHRoZXJlIGlzIG5vdCB6b25lXG4gICAgaWYgKCF6b25lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2N1cnJlbnRab25lID0gem9uZTtcblxuICAgIC8vIFRyaWdnZXIgdGhlIGhvdmVyIGNhbGxiYWNrXG4gICAgaWYgKHpvbmUuaG92ZXJDYWxsYmFjaykge1xuICAgICAgem9uZS5ob3ZlckNhbGxiYWNrKGUpO1xuICAgIH1cblxuICAgIC8vIFJlc3RhcnQgdGhlIHRvb2x0aXAgdGltZW91dFxuICAgIHRoaXMuX3Rvb2x0aXBUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4gdGhpcy5fb25Ub29sdGlwKGUpLCB0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLmxpbmtUb29sdGlwSG92ZXJEdXJhdGlvbik7XG4gIH1cblxuICBwcml2YXRlIF9vblRvb2x0aXAoZTogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIHRoaXMuX3Rvb2x0aXBUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IHpvbmUgPSB0aGlzLl9maW5kWm9uZUV2ZW50QXQoZSk7XG4gICAgem9uZT8udG9vbHRpcENhbGxiYWNrKGUpO1xuICB9XG5cbiAgcHJpdmF0ZSBfb25Nb3VzZURvd24oZTogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIC8vIFN0b3JlIGN1cnJlbnQgdGVybWluYWwgc2VsZWN0aW9uIGxlbmd0aCwgdG8gY2hlY2sgaWYgd2UncmUgcGVyZm9ybWluZ1xuICAgIC8vIGEgc2VsZWN0aW9uIG9wZXJhdGlvblxuICAgIHRoaXMuX2luaXRpYWxTZWxlY3Rpb25MZW5ndGggPSB0aGlzLl9nZXRTZWxlY3Rpb25MZW5ndGgoKTtcblxuICAgIC8vIElnbm9yZSB0aGUgZXZlbnQgaWYgdGhlcmUgYXJlIG5vIHpvbmVzIGFjdGl2ZVxuICAgIGlmICghdGhpcy5fYXJlWm9uZXNBY3RpdmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBGaW5kIHRoZSBhY3RpdmUgem9uZSwgcHJldmVudCBldmVudCBwcm9wYWdhdGlvbiBpZiBmb3VuZCB0byBwcmV2ZW50IG90aGVyXG4gICAgLy8gY29tcG9uZW50cyBmcm9tIGhhbmRsaW5nIHRoZSBtb3VzZSBldmVudC5cbiAgICBjb25zdCB6b25lID0gdGhpcy5fZmluZFpvbmVFdmVudEF0KGUpO1xuICAgIGlmICh6b25lPy53aWxsTGlua0FjdGl2YXRlKGUpKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX29uTW91c2VMZWF2ZShlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgLy8gRmlyZSB0aGUgaG92ZXIgZW5kIGNhbGxiYWNrIGFuZCBjYW5jZWwgYW55IGV4aXN0aW5nIHRpbWVyIGlmIHRoZSBtb3VzZVxuICAgIC8vIGxlYXZlcyB0aGUgdGVybWluYWwgZWxlbWVudFxuICAgIGlmICh0aGlzLl9jdXJyZW50Wm9uZSkge1xuICAgICAgdGhpcy5fY3VycmVudFpvbmUubGVhdmVDYWxsYmFjaygpO1xuICAgICAgdGhpcy5fY3VycmVudFpvbmUgPSB1bmRlZmluZWQ7XG4gICAgICBpZiAodGhpcy5fdG9vbHRpcFRpbWVvdXQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3Rvb2x0aXBUaW1lb3V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9vbkNsaWNrKGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICAvLyBGaW5kIHRoZSBhY3RpdmUgem9uZSBhbmQgY2xpY2sgaXQgaWYgZm91bmQgYW5kIG5vIHNlbGVjdGlvbiB3YXNcbiAgICAvLyBiZWluZyBwZXJmb3JtZWRcbiAgICBjb25zdCB6b25lID0gdGhpcy5fZmluZFpvbmVFdmVudEF0KGUpO1xuICAgIGNvbnN0IGN1cnJlbnRTZWxlY3Rpb25MZW5ndGggPSB0aGlzLl9nZXRTZWxlY3Rpb25MZW5ndGgoKTtcblxuICAgIGlmICh6b25lICYmIGN1cnJlbnRTZWxlY3Rpb25MZW5ndGggPT09IHRoaXMuX2luaXRpYWxTZWxlY3Rpb25MZW5ndGgpIHtcbiAgICAgIHpvbmUuY2xpY2tDYWxsYmFjayhlKTtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfZ2V0U2VsZWN0aW9uTGVuZ3RoKCk6IG51bWJlciB7XG4gICAgY29uc3Qgc2VsZWN0aW9uVGV4dCA9IHRoaXMuX3NlbGVjdGlvblNlcnZpY2Uuc2VsZWN0aW9uVGV4dDtcbiAgICByZXR1cm4gc2VsZWN0aW9uVGV4dCA/IHNlbGVjdGlvblRleHQubGVuZ3RoIDogMDtcbiAgfVxuXG4gIHByaXZhdGUgX2ZpbmRab25lRXZlbnRBdChlOiBNb3VzZUV2ZW50KTogSU1vdXNlWm9uZSB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgY29vcmRzID0gdGhpcy5fbW91c2VTZXJ2aWNlLmdldENvb3JkcyhlLCB0aGlzLl9zY3JlZW5FbGVtZW50LCB0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHMsIHRoaXMuX2J1ZmZlclNlcnZpY2Uucm93cyk7XG4gICAgaWYgKCFjb29yZHMpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IHggPSBjb29yZHNbMF07XG4gICAgY29uc3QgeSA9IGNvb3Jkc1sxXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3pvbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB6b25lID0gdGhpcy5fem9uZXNbaV07XG4gICAgICBpZiAoem9uZS55MSA9PT0gem9uZS55Mikge1xuICAgICAgICAvLyBTaW5nbGUgbGluZSBsaW5rXG4gICAgICAgIGlmICh5ID09PSB6b25lLnkxICYmIHggPj0gem9uZS54MSAmJiB4IDwgem9uZS54Mikge1xuICAgICAgICAgIHJldHVybiB6b25lO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNdWx0aS1saW5lIGxpbmtcbiAgICAgICAgaWYgKCh5ID09PSB6b25lLnkxICYmIHggPj0gem9uZS54MSkgfHxcbiAgICAgICAgICAgICh5ID09PSB6b25lLnkyICYmIHggPCB6b25lLngyKSB8fFxuICAgICAgICAgICAgKHkgPiB6b25lLnkxICYmIHkgPCB6b25lLnkyKSkge1xuICAgICAgICAgIHJldHVybiB6b25lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE4IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSVJlbmRlckRlYm91bmNlciB9IGZyb20gJ2Jyb3dzZXIvVHlwZXMnO1xuXG4vKipcbiAqIERlYm91bmNlcyBjYWxscyB0byByZW5kZXIgdGVybWluYWwgcm93cyB1c2luZyBhbmltYXRpb24gZnJhbWVzLlxuICovXG5leHBvcnQgY2xhc3MgUmVuZGVyRGVib3VuY2VyIGltcGxlbWVudHMgSVJlbmRlckRlYm91bmNlciB7XG4gIHByaXZhdGUgX3Jvd1N0YXJ0OiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX3Jvd0VuZDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIF9yb3dDb3VudDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIF9hbmltYXRpb25GcmFtZTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX3JlbmRlckNhbGxiYWNrOiAoc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpID0+IHZvaWRcbiAgKSB7XG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fYW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl9hbmltYXRpb25GcmFtZSk7XG4gICAgICB0aGlzLl9hbmltYXRpb25GcmFtZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVmcmVzaChyb3dTdGFydDogbnVtYmVyIHwgdW5kZWZpbmVkLCByb3dFbmQ6IG51bWJlciB8IHVuZGVmaW5lZCwgcm93Q291bnQ6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3Jvd0NvdW50ID0gcm93Q291bnQ7XG4gICAgLy8gR2V0IHRoZSBtaW4vbWF4IHJvdyBzdGFydC9lbmQgZm9yIHRoZSBhcmcgdmFsdWVzXG4gICAgcm93U3RhcnQgPSByb3dTdGFydCAhPT0gdW5kZWZpbmVkID8gcm93U3RhcnQgOiAwO1xuICAgIHJvd0VuZCA9IHJvd0VuZCAhPT0gdW5kZWZpbmVkID8gcm93RW5kIDogdGhpcy5fcm93Q291bnQgLSAxO1xuICAgIC8vIFNldCB0aGUgcHJvcGVydGllcyB0byB0aGUgdXBkYXRlZCB2YWx1ZXNcbiAgICB0aGlzLl9yb3dTdGFydCA9IHRoaXMuX3Jvd1N0YXJ0ICE9PSB1bmRlZmluZWQgPyBNYXRoLm1pbih0aGlzLl9yb3dTdGFydCwgcm93U3RhcnQpIDogcm93U3RhcnQ7XG4gICAgdGhpcy5fcm93RW5kID0gdGhpcy5fcm93RW5kICE9PSB1bmRlZmluZWQgPyBNYXRoLm1heCh0aGlzLl9yb3dFbmQsIHJvd0VuZCkgOiByb3dFbmQ7XG5cbiAgICBpZiAodGhpcy5fYW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9hbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5faW5uZXJSZWZyZXNoKCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBfaW5uZXJSZWZyZXNoKCk6IHZvaWQge1xuICAgIC8vIE1ha2Ugc3VyZSB2YWx1ZXMgYXJlIHNldFxuICAgIGlmICh0aGlzLl9yb3dTdGFydCA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3Jvd0VuZCA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3Jvd0NvdW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDbGFtcCB2YWx1ZXNcbiAgICBjb25zdCBzdGFydCA9IE1hdGgubWF4KHRoaXMuX3Jvd1N0YXJ0LCAwKTtcbiAgICBjb25zdCBlbmQgPSBNYXRoLm1pbih0aGlzLl9yb3dFbmQsIHRoaXMuX3Jvd0NvdW50IC0gMSk7XG5cbiAgICAvLyBSZXNldCBkZWJvdW5jZXIgKHRoaXMgaGFwcGVucyBiZWZvcmUgcmVuZGVyIGNhbGxiYWNrIGFzIHRoZSByZW5kZXIgY291bGQgdHJpZ2dlciBpdCBhZ2FpbilcbiAgICB0aGlzLl9yb3dTdGFydCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9yb3dFbmQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fYW5pbWF0aW9uRnJhbWUgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBSdW4gcmVuZGVyIGNhbGxiYWNrXG4gICAgdGhpcy5fcmVuZGVyQ2FsbGJhY2soc3RhcnQsIGVuZCk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgRGlzcG9zYWJsZSB9IGZyb20gJ2NvbW1vbi9MaWZlY3ljbGUnO1xuXG5leHBvcnQgdHlwZSBTY3JlZW5EcHJMaXN0ZW5lciA9IChuZXdEZXZpY2VQaXhlbFJhdGlvPzogbnVtYmVyLCBvbGREZXZpY2VQaXhlbFJhdGlvPzogbnVtYmVyKSA9PiB2b2lkO1xuXG4vKipcbiAqIFRoZSBzY3JlZW4gZGV2aWNlIHBpeGVsIHJhdGlvIG1vbml0b3IgYWxsb3dzIGxpc3RlbmluZyBmb3Igd2hlbiB0aGVcbiAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHZhbHVlIGNoYW5nZXMuIFRoaXMgaXMgZG9uZSBub3Qgd2l0aCBwb2xsaW5nIGJ1dCB3aXRoXG4gKiB0aGUgdXNlIG9mIHdpbmRvdy5tYXRjaE1lZGlhIHRvIHdhdGNoIG1lZGlhIHF1ZXJpZXMuIFdoZW4gdGhlIGV2ZW50IGZpcmVzLFxuICogdGhlIGxpc3RlbmVyIHdpbGwgYmUgcmVhdHRhY2hlZCB1c2luZyBhIGRpZmZlcmVudCBtZWRpYSBxdWVyeSB0byBlbnN1cmUgdGhhdFxuICogYW55IGZ1cnRoZXIgY2hhbmdlcyB3aWxsIHJlZ2lzdGVyLlxuICpcbiAqIFRoZSBsaXN0ZW5lciBzaG91bGQgZmlyZSBvbiBib3RoIHdpbmRvdyB6b29tIGNoYW5nZXMgYW5kIHN3aXRjaGluZyB0byBhXG4gKiBtb25pdG9yIHdpdGggYSBkaWZmZXJlbnQgRFBJLlxuICovXG5leHBvcnQgY2xhc3MgU2NyZWVuRHByTW9uaXRvciBleHRlbmRzIERpc3Bvc2FibGUge1xuICBwcml2YXRlIF9jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbzogbnVtYmVyID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gIHByaXZhdGUgX291dGVyTGlzdGVuZXI6ICgodGhpczogTWVkaWFRdWVyeUxpc3QsIGV2OiBNZWRpYVF1ZXJ5TGlzdEV2ZW50KSA9PiBhbnkpIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIF9saXN0ZW5lcjogU2NyZWVuRHByTGlzdGVuZXIgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX3Jlc29sdXRpb25NZWRpYU1hdGNoTGlzdDogTWVkaWFRdWVyeUxpc3QgfCB1bmRlZmluZWQ7XG5cbiAgcHVibGljIHNldExpc3RlbmVyKGxpc3RlbmVyOiBTY3JlZW5EcHJMaXN0ZW5lcik6IHZvaWQge1xuICAgIGlmICh0aGlzLl9saXN0ZW5lcikge1xuICAgICAgdGhpcy5jbGVhckxpc3RlbmVyKCk7XG4gICAgfVxuICAgIHRoaXMuX2xpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgdGhpcy5fb3V0ZXJMaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5fbGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fbGlzdGVuZXIod2luZG93LmRldmljZVBpeGVsUmF0aW8sIHRoaXMuX2N1cnJlbnREZXZpY2VQaXhlbFJhdGlvKTtcbiAgICAgIHRoaXMuX3VwZGF0ZURwcigpO1xuICAgIH07XG4gICAgdGhpcy5fdXBkYXRlRHByKCk7XG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICBzdXBlci5kaXNwb3NlKCk7XG4gICAgdGhpcy5jbGVhckxpc3RlbmVyKCk7XG4gIH1cblxuICBwcml2YXRlIF91cGRhdGVEcHIoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9vdXRlckxpc3RlbmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ2xlYXIgbGlzdGVuZXJzIGZvciBvbGQgRFBSXG4gICAgdGhpcy5fcmVzb2x1dGlvbk1lZGlhTWF0Y2hMaXN0Py5yZW1vdmVMaXN0ZW5lcih0aGlzLl9vdXRlckxpc3RlbmVyKTtcblxuICAgIC8vIEFkZCBsaXN0ZW5lcnMgZm9yIG5ldyBEUFJcbiAgICB0aGlzLl9jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgIHRoaXMuX3Jlc29sdXRpb25NZWRpYU1hdGNoTGlzdCA9IHdpbmRvdy5tYXRjaE1lZGlhKGBzY3JlZW4gYW5kIChyZXNvbHV0aW9uOiAke3dpbmRvdy5kZXZpY2VQaXhlbFJhdGlvfWRwcHgpYCk7XG4gICAgdGhpcy5fcmVzb2x1dGlvbk1lZGlhTWF0Y2hMaXN0LmFkZExpc3RlbmVyKHRoaXMuX291dGVyTGlzdGVuZXIpO1xuICB9XG5cbiAgcHVibGljIGNsZWFyTGlzdGVuZXIoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9yZXNvbHV0aW9uTWVkaWFNYXRjaExpc3QgfHwgIXRoaXMuX2xpc3RlbmVyIHx8ICF0aGlzLl9vdXRlckxpc3RlbmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3Jlc29sdXRpb25NZWRpYU1hdGNoTGlzdC5yZW1vdmVMaXN0ZW5lcih0aGlzLl9vdXRlckxpc3RlbmVyKTtcbiAgICB0aGlzLl9yZXNvbHV0aW9uTWVkaWFNYXRjaExpc3QgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fbGlzdGVuZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fb3V0ZXJMaXN0ZW5lciA9IHVuZGVmaW5lZDtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxMywgQ2hyaXN0b3BoZXIgSmVmZnJleSAoTUlUIExpY2Vuc2UpXG4gKiBAbGljZW5zZSBNSVRcbiAqXG4gKiBPcmlnaW5hbGx5IGZvcmtlZCBmcm9tICh3aXRoIHRoZSBhdXRob3IncyBwZXJtaXNzaW9uKTpcbiAqICAgRmFicmljZSBCZWxsYXJkJ3MgamF2YXNjcmlwdCB2dDEwMCBmb3IganNsaW51eDpcbiAqICAgaHR0cDovL2JlbGxhcmQub3JnL2pzbGludXgvXG4gKiAgIENvcHlyaWdodCAoYykgMjAxMSBGYWJyaWNlIEJlbGxhcmRcbiAqICAgVGhlIG9yaWdpbmFsIGRlc2lnbiByZW1haW5zLiBUaGUgdGVybWluYWwgaXRzZWxmXG4gKiAgIGhhcyBiZWVuIGV4dGVuZGVkIHRvIGluY2x1ZGUgeHRlcm0gQ1NJIGNvZGVzLCBhbW9uZ1xuICogICBvdGhlciBmZWF0dXJlcy5cbiAqXG4gKiBUZXJtaW5hbCBFbXVsYXRpb24gUmVmZXJlbmNlczpcbiAqICAgaHR0cDovL3Z0MTAwLm5ldC9cbiAqICAgaHR0cDovL2ludmlzaWJsZS1pc2xhbmQubmV0L3h0ZXJtL2N0bHNlcXMvY3Rsc2Vxcy50eHRcbiAqICAgaHR0cDovL2ludmlzaWJsZS1pc2xhbmQubmV0L3h0ZXJtL2N0bHNlcXMvY3Rsc2Vxcy5odG1sXG4gKiAgIGh0dHA6Ly9pbnZpc2libGUtaXNsYW5kLm5ldC92dHRlc3QvXG4gKiAgIGh0dHA6Ly93d3cuaW53YXAuY29tL3BkcDEwL2Fuc2ljb2RlLnR4dFxuICogICBodHRwOi8vbGludXguZGllLm5ldC9tYW4vNC9jb25zb2xlX2NvZGVzXG4gKiAgIGh0dHA6Ly9saW51eC5kaWUubmV0L21hbi83L3VyeHZ0XG4gKi9cblxuaW1wb3J0IHsgSUNvbXBvc2l0aW9uSGVscGVyLCBJVGVybWluYWwsIElCcm93c2VyLCBDdXN0b21LZXlFdmVudEhhbmRsZXIsIElMaW5raWZpZXIsIElNb3VzZVpvbmVNYW5hZ2VyLCBMaW5rTWF0Y2hlckhhbmRsZXIsIElMaW5rTWF0Y2hlck9wdGlvbnMsIElWaWV3cG9ydCwgSUxpbmtpZmllcjIsIENoYXJhY3RlckpvaW5lckhhbmRsZXIgfSBmcm9tICdicm93c2VyL1R5cGVzJztcbmltcG9ydCB7IElSZW5kZXJlciB9IGZyb20gJ2Jyb3dzZXIvcmVuZGVyZXIvVHlwZXMnO1xuaW1wb3J0IHsgQ29tcG9zaXRpb25IZWxwZXIgfSBmcm9tICdicm93c2VyL2lucHV0L0NvbXBvc2l0aW9uSGVscGVyJztcbmltcG9ydCB7IFZpZXdwb3J0IH0gZnJvbSAnYnJvd3Nlci9WaWV3cG9ydCc7XG5pbXBvcnQgeyByaWdodENsaWNrSGFuZGxlciwgbW92ZVRleHRBcmVhVW5kZXJNb3VzZUN1cnNvciwgaGFuZGxlUGFzdGVFdmVudCwgY29weUhhbmRsZXIsIHBhc3RlIH0gZnJvbSAnYnJvd3Nlci9DbGlwYm9hcmQnO1xuaW1wb3J0IHsgQzAgfSBmcm9tICdjb21tb24vZGF0YS9Fc2NhcGVTZXF1ZW5jZXMnO1xuaW1wb3J0IHsgV2luZG93c09wdGlvbnNSZXBvcnRUeXBlIH0gZnJvbSAnLi4vY29tbW9uL0lucHV0SGFuZGxlcic7XG5pbXBvcnQgeyBSZW5kZXJlciB9IGZyb20gJ2Jyb3dzZXIvcmVuZGVyZXIvUmVuZGVyZXInO1xuaW1wb3J0IHsgTGlua2lmaWVyIH0gZnJvbSAnYnJvd3Nlci9MaW5raWZpZXInO1xuaW1wb3J0IHsgU2VsZWN0aW9uU2VydmljZSB9IGZyb20gJ2Jyb3dzZXIvc2VydmljZXMvU2VsZWN0aW9uU2VydmljZSc7XG5pbXBvcnQgKiBhcyBCcm93c2VyIGZyb20gJ2NvbW1vbi9QbGF0Zm9ybSc7XG5pbXBvcnQgeyBhZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIgfSBmcm9tICdicm93c2VyL0xpZmVjeWNsZSc7XG5pbXBvcnQgKiBhcyBTdHJpbmdzIGZyb20gJ2Jyb3dzZXIvTG9jYWxpemFibGVTdHJpbmdzJztcbmltcG9ydCB7IFNvdW5kU2VydmljZSB9IGZyb20gJ2Jyb3dzZXIvc2VydmljZXMvU291bmRTZXJ2aWNlJztcbmltcG9ydCB7IE1vdXNlWm9uZU1hbmFnZXIgfSBmcm9tICdicm93c2VyL01vdXNlWm9uZU1hbmFnZXInO1xuaW1wb3J0IHsgQWNjZXNzaWJpbGl0eU1hbmFnZXIgfSBmcm9tICcuL0FjY2Vzc2liaWxpdHlNYW5hZ2VyJztcbmltcG9ydCB7IElUaGVtZSwgSU1hcmtlciwgSURpc3Bvc2FibGUsIElTZWxlY3Rpb25Qb3NpdGlvbiwgSUxpbmtQcm92aWRlciwgSURlY29yYXRpb25PcHRpb25zLCBJRGVjb3JhdGlvbiB9IGZyb20gJ3h0ZXJtJztcbmltcG9ydCB7IERvbVJlbmRlcmVyIH0gZnJvbSAnYnJvd3Nlci9yZW5kZXJlci9kb20vRG9tUmVuZGVyZXInO1xuaW1wb3J0IHsgS2V5Ym9hcmRSZXN1bHRUeXBlLCBDb3JlTW91c2VFdmVudFR5cGUsIENvcmVNb3VzZUJ1dHRvbiwgQ29yZU1vdXNlQWN0aW9uLCBJVGVybWluYWxPcHRpb25zLCBTY3JvbGxTb3VyY2UsIElDb2xvckV2ZW50LCBDb2xvckluZGV4LCBDb2xvclJlcXVlc3RUeXBlIH0gZnJvbSAnY29tbW9uL1R5cGVzJztcbmltcG9ydCB7IGV2YWx1YXRlS2V5Ym9hcmRFdmVudCB9IGZyb20gJ2NvbW1vbi9pbnB1dC9LZXlib2FyZCc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElFdmVudCwgZm9yd2FyZEV2ZW50IH0gZnJvbSAnY29tbW9uL0V2ZW50RW1pdHRlcic7XG5pbXBvcnQgeyBERUZBVUxUX0FUVFJfREFUQSB9IGZyb20gJ2NvbW1vbi9idWZmZXIvQnVmZmVyTGluZSc7XG5pbXBvcnQgeyBDb2xvck1hbmFnZXIgfSBmcm9tICdicm93c2VyL0NvbG9yTWFuYWdlcic7XG5pbXBvcnQgeyBSZW5kZXJTZXJ2aWNlIH0gZnJvbSAnYnJvd3Nlci9zZXJ2aWNlcy9SZW5kZXJTZXJ2aWNlJztcbmltcG9ydCB7IElDaGFyU2l6ZVNlcnZpY2UsIElSZW5kZXJTZXJ2aWNlLCBJTW91c2VTZXJ2aWNlLCBJU2VsZWN0aW9uU2VydmljZSwgSVNvdW5kU2VydmljZSwgSUNvcmVCcm93c2VyU2VydmljZSwgSUNoYXJhY3RlckpvaW5lclNlcnZpY2UsIElEZWNvcmF0aW9uU2VydmljZSB9IGZyb20gJ2Jyb3dzZXIvc2VydmljZXMvU2VydmljZXMnO1xuaW1wb3J0IHsgQ2hhclNpemVTZXJ2aWNlIH0gZnJvbSAnYnJvd3Nlci9zZXJ2aWNlcy9DaGFyU2l6ZVNlcnZpY2UnO1xuaW1wb3J0IHsgSUJ1ZmZlciB9IGZyb20gJ2NvbW1vbi9idWZmZXIvVHlwZXMnO1xuaW1wb3J0IHsgTW91c2VTZXJ2aWNlIH0gZnJvbSAnYnJvd3Nlci9zZXJ2aWNlcy9Nb3VzZVNlcnZpY2UnO1xuaW1wb3J0IHsgTGlua2lmaWVyMiB9IGZyb20gJ2Jyb3dzZXIvTGlua2lmaWVyMic7XG5pbXBvcnQgeyBDb3JlQnJvd3NlclNlcnZpY2UgfSBmcm9tICdicm93c2VyL3NlcnZpY2VzL0NvcmVCcm93c2VyU2VydmljZSc7XG5pbXBvcnQgeyBDb3JlVGVybWluYWwgfSBmcm9tICdjb21tb24vQ29yZVRlcm1pbmFsJztcbmltcG9ydCB7IGNvbG9yLCByZ2JhIH0gZnJvbSAnYnJvd3Nlci9Db2xvcic7XG5pbXBvcnQgeyBDaGFyYWN0ZXJKb2luZXJTZXJ2aWNlIH0gZnJvbSAnYnJvd3Nlci9zZXJ2aWNlcy9DaGFyYWN0ZXJKb2luZXJTZXJ2aWNlJztcbmltcG9ydCB7IHRvUmdiU3RyaW5nIH0gZnJvbSAnY29tbW9uL2lucHV0L1hQYXJzZUNvbG9yJztcbmltcG9ydCB7IERlY29yYXRpb25TZXJ2aWNlIH0gZnJvbSAnYnJvd3Nlci9zZXJ2aWNlcy9EZWNvcmF0aW9uU2VydmljZSc7XG5cbi8vIExldCBpdCB3b3JrIGluc2lkZSBOb2RlLmpzIGZvciBhdXRvbWF0ZWQgdGVzdGluZyBwdXJwb3Nlcy5cbmNvbnN0IGRvY3VtZW50OiBEb2N1bWVudCA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgPyB3aW5kb3cuZG9jdW1lbnQgOiBudWxsIGFzIGFueTtcblxuZXhwb3J0IGNsYXNzIFRlcm1pbmFsIGV4dGVuZHMgQ29yZVRlcm1pbmFsIGltcGxlbWVudHMgSVRlcm1pbmFsIHtcbiAgcHVibGljIHRleHRhcmVhOiBIVE1MVGV4dEFyZWFFbGVtZW50IHwgdW5kZWZpbmVkO1xuICBwdWJsaWMgZWxlbWVudDogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XG4gIHB1YmxpYyBzY3JlZW5FbGVtZW50OiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZDtcblxuICBwcml2YXRlIF9kb2N1bWVudDogRG9jdW1lbnQgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX3ZpZXdwb3J0U2Nyb2xsQXJlYTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX3ZpZXdwb3J0RWxlbWVudDogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX2hlbHBlckNvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX2NvbXBvc2l0aW9uVmlldzogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XG5cbiAgLy8gcHJpdmF0ZSBfdmlzdWFsQmVsbFRpbWVyOiBudW1iZXI7XG5cbiAgcHVibGljIGJyb3dzZXI6IElCcm93c2VyID0gQnJvd3NlciBhcyBhbnk7XG5cbiAgcHJpdmF0ZSBfY3VzdG9tS2V5RXZlbnRIYW5kbGVyOiBDdXN0b21LZXlFdmVudEhhbmRsZXIgfCB1bmRlZmluZWQ7XG5cbiAgLy8gYnJvd3NlciBzZXJ2aWNlc1xuICBwcml2YXRlIF9jaGFyU2l6ZVNlcnZpY2U6IElDaGFyU2l6ZVNlcnZpY2UgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX21vdXNlU2VydmljZTogSU1vdXNlU2VydmljZSB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBfcmVuZGVyU2VydmljZTogSVJlbmRlclNlcnZpY2UgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX2NoYXJhY3RlckpvaW5lclNlcnZpY2U6IElDaGFyYWN0ZXJKb2luZXJTZXJ2aWNlIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIF9zZWxlY3Rpb25TZXJ2aWNlOiBJU2VsZWN0aW9uU2VydmljZSB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBfc291bmRTZXJ2aWNlOiBJU291bmRTZXJ2aWNlIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBSZWNvcmRzIHdoZXRoZXIgdGhlIGtleWRvd24gZXZlbnQgaGFzIGFscmVhZHkgYmVlbiBoYW5kbGVkIGFuZCB0cmlnZ2VyZWQgYSBkYXRhIGV2ZW50LCBpZiBzb1xuICAgKiB0aGUga2V5cHJlc3MgZXZlbnQgc2hvdWxkIG5vdCB0cmlnZ2VyIGEgZGF0YSBldmVudCBidXQgc2hvdWxkIHN0aWxsIHByaW50IHRvIHRoZSB0ZXh0YXJlYSBzb1xuICAgKiBzY3JlZW4gcmVhZGVycyB3aWxsIGFubm91bmNlIGl0LlxuICAgKi9cbiAgcHJpdmF0ZSBfa2V5RG93bkhhbmRsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogUmVjb3JkcyB3aGV0aGVyIHRoZSBrZXlwcmVzcyBldmVudCBoYXMgYWxyZWFkeSBiZWVuIGhhbmRsZWQgYW5kIHRyaWdnZXJlZCBhIGRhdGEgZXZlbnQsIGlmIHNvXG4gICAqIHRoZSBpbnB1dCBldmVudCBzaG91bGQgbm90IHRyaWdnZXIgYSBkYXRhIGV2ZW50IGJ1dCBzaG91bGQgc3RpbGwgcHJpbnQgdG8gdGhlIHRleHRhcmVhIHNvXG4gICAqIHNjcmVlbiByZWFkZXJzIHdpbGwgYW5ub3VuY2UgaXQuXG4gICAqL1xuICBwcml2YXRlIF9rZXlQcmVzc0hhbmRsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogUmVjb3JkcyB3aGV0aGVyIHRoZXJlIGhhcyBiZWVuIGEga2V5ZG93biBldmVudCBmb3IgYSBkZWFkIGtleSB3aXRob3V0IGEgY29ycmVzcG9uZGluZyBrZXlkb3duXG4gICAqIGV2ZW50IGZvciB0aGUgY29tcG9zZWQvYWx0ZXJuYXRpdmUgY2hhcmFjdGVyLiBJZiB3ZSBjYW5jZWwgdGhlIGtleWRvd24gZXZlbnQgZm9yIHRoZSBkZWFkIGtleSxcbiAgICogbm8gZXZlbnRzIHdpbGwgYmUgZW1pdHRlZCBmb3IgdGhlIGZpbmFsIGNoYXJhY3Rlci5cbiAgICovXG4gIHByaXZhdGUgX3VucHJvY2Vzc2VkRGVhZEtleTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHB1YmxpYyBsaW5raWZpZXI6IElMaW5raWZpZXI7XG4gIHB1YmxpYyBsaW5raWZpZXIyOiBJTGlua2lmaWVyMjtcbiAgcHVibGljIHZpZXdwb3J0OiBJVmlld3BvcnQgfCB1bmRlZmluZWQ7XG4gIHB1YmxpYyBkZWNvcmF0aW9uU2VydmljZTogSURlY29yYXRpb25TZXJ2aWNlO1xuICBwcml2YXRlIF9jb21wb3NpdGlvbkhlbHBlcjogSUNvbXBvc2l0aW9uSGVscGVyIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIF9tb3VzZVpvbmVNYW5hZ2VyOiBJTW91c2Vab25lTWFuYWdlciB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBfYWNjZXNzaWJpbGl0eU1hbmFnZXI6IEFjY2Vzc2liaWxpdHlNYW5hZ2VyIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIF9jb2xvck1hbmFnZXI6IENvbG9yTWFuYWdlciB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBfdGhlbWU6IElUaGVtZSB8IHVuZGVmaW5lZDtcblxuICBwcml2YXRlIF9vbkN1cnNvck1vdmUgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIHB1YmxpYyBnZXQgb25DdXJzb3JNb3ZlKCk6IElFdmVudDx2b2lkPiB7IHJldHVybiB0aGlzLl9vbkN1cnNvck1vdmUuZXZlbnQ7IH1cbiAgcHJpdmF0ZSBfb25LZXkgPSBuZXcgRXZlbnRFbWl0dGVyPHsga2V5OiBzdHJpbmcsIGRvbUV2ZW50OiBLZXlib2FyZEV2ZW50IH0+KCk7XG4gIHB1YmxpYyBnZXQgb25LZXkoKTogSUV2ZW50PHsga2V5OiBzdHJpbmcsIGRvbUV2ZW50OiBLZXlib2FyZEV2ZW50IH0+IHsgcmV0dXJuIHRoaXMuX29uS2V5LmV2ZW50OyB9XG4gIHByaXZhdGUgX29uUmVuZGVyID0gbmV3IEV2ZW50RW1pdHRlcjx7IHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyIH0+KCk7XG4gIHB1YmxpYyBnZXQgb25SZW5kZXIoKTogSUV2ZW50PHsgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIgfT4geyByZXR1cm4gdGhpcy5fb25SZW5kZXIuZXZlbnQ7IH1cbiAgcHJpdmF0ZSBfb25TZWxlY3Rpb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIHB1YmxpYyBnZXQgb25TZWxlY3Rpb25DaGFuZ2UoKTogSUV2ZW50PHZvaWQ+IHsgcmV0dXJuIHRoaXMuX29uU2VsZWN0aW9uQ2hhbmdlLmV2ZW50OyB9XG4gIHByaXZhdGUgX29uVGl0bGVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgcHVibGljIGdldCBvblRpdGxlQ2hhbmdlKCk6IElFdmVudDxzdHJpbmc+IHsgcmV0dXJuIHRoaXMuX29uVGl0bGVDaGFuZ2UuZXZlbnQ7IH1cbiAgcHJpdmF0ZSBfb25CZWxsID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBwdWJsaWMgZ2V0IG9uQmVsbCgpOiBJRXZlbnQ8dm9pZD4geyByZXR1cm4gdGhpcy5fb25CZWxsLmV2ZW50OyB9XG5cbiAgcHJpdmF0ZSBfb25Gb2N1cyA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgcHVibGljIGdldCBvbkZvY3VzKCk6IElFdmVudDx2b2lkPiB7IHJldHVybiB0aGlzLl9vbkZvY3VzLmV2ZW50OyB9XG4gIHByaXZhdGUgX29uQmx1ciA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgcHVibGljIGdldCBvbkJsdXIoKTogSUV2ZW50PHZvaWQ+IHsgcmV0dXJuIHRoaXMuX29uQmx1ci5ldmVudDsgfVxuICBwcml2YXRlIF9vbkExMXlDaGFyRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuICBwdWJsaWMgZ2V0IG9uQTExeUNoYXIoKTogSUV2ZW50PHN0cmluZz4geyByZXR1cm4gdGhpcy5fb25BMTF5Q2hhckVtaXR0ZXIuZXZlbnQ7IH1cbiAgcHJpdmF0ZSBfb25BMTF5VGFiRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xuICBwdWJsaWMgZ2V0IG9uQTExeVRhYigpOiBJRXZlbnQ8bnVtYmVyPiB7IHJldHVybiB0aGlzLl9vbkExMXlUYWJFbWl0dGVyLmV2ZW50OyB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgYFRlcm1pbmFsYCBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25zIEFuIG9iamVjdCBjb250YWluaW5nIGEgc2V0IG9mIG9wdGlvbnMsIHRoZSBhdmFpbGFibGUgb3B0aW9ucyBhcmU6XG4gICAqICAgLSBgY3Vyc29yQmxpbmtgIChib29sZWFuKTogV2hldGhlciB0aGUgdGVybWluYWwgY3Vyc29yIGJsaW5rc1xuICAgKiAgIC0gYGNvbHNgIChudW1iZXIpOiBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgb2YgdGhlIHRlcm1pbmFsIChob3Jpem9udGFsIHNpemUpXG4gICAqICAgLSBgcm93c2AgKG51bWJlcik6IFRoZSBudW1iZXIgb2Ygcm93cyBvZiB0aGUgdGVybWluYWwgKHZlcnRpY2FsIHNpemUpXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQGNsYXNzIFh0ZXJtIFh0ZXJtXG4gICAqIEBhbGlhcyBtb2R1bGU6eHRlcm0vc3JjL3h0ZXJtXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBvcHRpb25zOiBQYXJ0aWFsPElUZXJtaW5hbE9wdGlvbnM+ID0ge31cbiAgKSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICB0aGlzLl9zZXR1cCgpO1xuXG4gICAgdGhpcy5saW5raWZpZXIgPSB0aGlzLl9pbnN0YW50aWF0aW9uU2VydmljZS5jcmVhdGVJbnN0YW5jZShMaW5raWZpZXIpO1xuICAgIHRoaXMubGlua2lmaWVyMiA9IHRoaXMucmVnaXN0ZXIodGhpcy5faW5zdGFudGlhdGlvblNlcnZpY2UuY3JlYXRlSW5zdGFuY2UoTGlua2lmaWVyMikpO1xuICAgIHRoaXMuZGVjb3JhdGlvblNlcnZpY2UgPSB0aGlzLnJlZ2lzdGVyKHRoaXMuX2luc3RhbnRpYXRpb25TZXJ2aWNlLmNyZWF0ZUluc3RhbmNlKERlY29yYXRpb25TZXJ2aWNlKSk7XG5cbiAgICAvLyBTZXR1cCBJbnB1dEhhbmRsZXIgbGlzdGVuZXJzXG4gICAgdGhpcy5yZWdpc3Rlcih0aGlzLl9pbnB1dEhhbmRsZXIub25SZXF1ZXN0QmVsbCgoKSA9PiB0aGlzLmJlbGwoKSkpO1xuICAgIHRoaXMucmVnaXN0ZXIodGhpcy5faW5wdXRIYW5kbGVyLm9uUmVxdWVzdFJlZnJlc2hSb3dzKChzdGFydCwgZW5kKSA9PiB0aGlzLnJlZnJlc2goc3RhcnQsIGVuZCkpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuX2lucHV0SGFuZGxlci5vblJlcXVlc3RTZW5kRm9jdXMoKCkgPT4gdGhpcy5fcmVwb3J0Rm9jdXMoKSkpO1xuICAgIHRoaXMucmVnaXN0ZXIodGhpcy5faW5wdXRIYW5kbGVyLm9uUmVxdWVzdFJlc2V0KCgpID0+IHRoaXMucmVzZXQoKSkpO1xuICAgIHRoaXMucmVnaXN0ZXIodGhpcy5faW5wdXRIYW5kbGVyLm9uUmVxdWVzdFdpbmRvd3NPcHRpb25zUmVwb3J0KHR5cGUgPT4gdGhpcy5fcmVwb3J0V2luZG93c09wdGlvbnModHlwZSkpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuX2lucHV0SGFuZGxlci5vbkNvbG9yKChldmVudCkgPT4gdGhpcy5faGFuZGxlQ29sb3JFdmVudChldmVudCkpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKGZvcndhcmRFdmVudCh0aGlzLl9pbnB1dEhhbmRsZXIub25DdXJzb3JNb3ZlLCB0aGlzLl9vbkN1cnNvck1vdmUpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKGZvcndhcmRFdmVudCh0aGlzLl9pbnB1dEhhbmRsZXIub25UaXRsZUNoYW5nZSwgdGhpcy5fb25UaXRsZUNoYW5nZSkpO1xuICAgIHRoaXMucmVnaXN0ZXIoZm9yd2FyZEV2ZW50KHRoaXMuX2lucHV0SGFuZGxlci5vbkExMXlDaGFyLCB0aGlzLl9vbkExMXlDaGFyRW1pdHRlcikpO1xuICAgIHRoaXMucmVnaXN0ZXIoZm9yd2FyZEV2ZW50KHRoaXMuX2lucHV0SGFuZGxlci5vbkExMXlUYWIsIHRoaXMuX29uQTExeVRhYkVtaXR0ZXIpKTtcblxuICAgIC8vIFNldHVwIGxpc3RlbmVyc1xuICAgIHRoaXMucmVnaXN0ZXIodGhpcy5fYnVmZmVyU2VydmljZS5vblJlc2l6ZShlID0+IHRoaXMuX2FmdGVyUmVzaXplKGUuY29scywgZS5yb3dzKSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBjb2xvciBldmVudCBmcm9tIGlucHV0aGFuZGxlciBmb3IgT1NDIDR8MTA0IHwgMTB8MTEwIHwgMTF8MTExIHwgMTJ8MTEyLlxuICAgKiBBbiBldmVudCBmcm9tIE9TQyA0fDEwNCBtYXkgY29udGFpbiBtdWx0aXBsZSBzZXQgb3IgcmVwb3J0IHJlcXVlc3RzLCBhbmQgbXVsdGlwbGVcbiAgICogb3Igbm9uZSByZXN0b3JlIHJlcXVlc3RzIChyZXNldHRpbmcgYWxsKSxcbiAgICogd2hpbGUgYW4gZXZlbnQgZnJvbSBPU0MgMTB8MTEwIHwgMTF8MTExIHwgMTJ8MTEyIGFsd2F5cyBjb250YWlucyBhIHNpbmdsZSByZXF1ZXN0LlxuICAgKi9cbiAgcHJpdmF0ZSBfaGFuZGxlQ29sb3JFdmVudChldmVudDogSUNvbG9yRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX2NvbG9yTWFuYWdlcikgcmV0dXJuO1xuICAgIGZvciAoY29uc3QgcmVxIG9mIGV2ZW50KSB7XG4gICAgICBsZXQgYWNjOiAnZm9yZWdyb3VuZCcgfCAnYmFja2dyb3VuZCcgfCAnY3Vyc29yJyB8ICdhbnNpJyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICAgIGxldCBpZGVudCA9ICcnO1xuICAgICAgc3dpdGNoIChyZXEuaW5kZXgpIHtcbiAgICAgICAgY2FzZSBDb2xvckluZGV4LkZPUkVHUk9VTkQ6IC8vIE9TQyAxMCB8IDExMFxuICAgICAgICAgIGFjYyA9ICdmb3JlZ3JvdW5kJztcbiAgICAgICAgICBpZGVudCA9ICcxMCc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQ29sb3JJbmRleC5CQUNLR1JPVU5EOiAvLyBPU0MgMTEgfCAxMTFcbiAgICAgICAgICBhY2MgPSAnYmFja2dyb3VuZCc7XG4gICAgICAgICAgaWRlbnQgPSAnMTEnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIENvbG9ySW5kZXguQ1VSU09SOiAvLyBPU0MgMTIgfCAxMTJcbiAgICAgICAgICBhY2MgPSAnY3Vyc29yJztcbiAgICAgICAgICBpZGVudCA9ICcxMic7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIE9TQyA0IHwgMTA0XG4gICAgICAgICAgLy8gd2UgY2FuIHNraXAgdGhlIFswLi4yNTVdIHJhbmdlIGNoZWNrIGhlcmUgKGFscmVhZHkgZG9uZSBpbiBpbnB1dGhhbmRsZXIpXG4gICAgICAgICAgYWNjID0gJ2Fuc2knO1xuICAgICAgICAgIGlkZW50ID0gJzQ7JyArIHJlcS5pbmRleDtcbiAgICAgIH1cbiAgICAgIGlmIChhY2MpIHtcbiAgICAgICAgc3dpdGNoIChyZXEudHlwZSkge1xuICAgICAgICAgIGNhc2UgQ29sb3JSZXF1ZXN0VHlwZS5SRVBPUlQ6XG4gICAgICAgICAgICBjb25zdCBjaGFubmVscyA9IGNvbG9yLnRvQ29sb3JSR0IoYWNjID09PSAnYW5zaSdcbiAgICAgICAgICAgICAgPyB0aGlzLl9jb2xvck1hbmFnZXIuY29sb3JzLmFuc2lbcmVxLmluZGV4XVxuICAgICAgICAgICAgICA6IHRoaXMuX2NvbG9yTWFuYWdlci5jb2xvcnNbYWNjXSk7XG4gICAgICAgICAgICB0aGlzLmNvcmVTZXJ2aWNlLnRyaWdnZXJEYXRhRXZlbnQoYCR7QzAuRVNDfV0ke2lkZW50fTske3RvUmdiU3RyaW5nKGNoYW5uZWxzKX0ke0MwLkJFTH1gKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgQ29sb3JSZXF1ZXN0VHlwZS5TRVQ6XG4gICAgICAgICAgICBpZiAoYWNjID09PSAnYW5zaScpIHRoaXMuX2NvbG9yTWFuYWdlci5jb2xvcnMuYW5zaVtyZXEuaW5kZXhdID0gcmdiYS50b0NvbG9yKC4uLnJlcS5jb2xvcik7XG4gICAgICAgICAgICBlbHNlIHRoaXMuX2NvbG9yTWFuYWdlci5jb2xvcnNbYWNjXSA9IHJnYmEudG9Db2xvciguLi5yZXEuY29sb3IpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBDb2xvclJlcXVlc3RUeXBlLlJFU1RPUkU6XG4gICAgICAgICAgICB0aGlzLl9jb2xvck1hbmFnZXIucmVzdG9yZUNvbG9yKHJlcS5pbmRleCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9yZW5kZXJTZXJ2aWNlPy5zZXRDb2xvcnModGhpcy5fY29sb3JNYW5hZ2VyLmNvbG9ycyk7XG4gICAgdGhpcy52aWV3cG9ydD8ub25UaGVtZUNoYW5nZSh0aGlzLl9jb2xvck1hbmFnZXIuY29sb3JzKTtcbiAgfVxuXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9pc0Rpc3Bvc2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICB0aGlzLl9yZW5kZXJTZXJ2aWNlPy5kaXNwb3NlKCk7XG4gICAgdGhpcy5fY3VzdG9tS2V5RXZlbnRIYW5kbGVyID0gdW5kZWZpbmVkO1xuICAgIHRoaXMud3JpdGUgPSAoKSA9PiB7IH07XG4gICAgdGhpcy5lbGVtZW50Py5wYXJlbnROb2RlPy5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9zZXR1cCgpOiB2b2lkIHtcbiAgICBzdXBlci5fc2V0dXAoKTtcblxuICAgIHRoaXMuX2N1c3RvbUtleUV2ZW50SGFuZGxlciA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZW5pZW5jZSBwcm9wZXJ0eSB0byBhY3RpdmUgYnVmZmVyLlxuICAgKi9cbiAgcHVibGljIGdldCBidWZmZXIoKTogSUJ1ZmZlciB7XG4gICAgcmV0dXJuIHRoaXMuYnVmZmVycy5hY3RpdmU7XG4gIH1cblxuICAvKipcbiAgICogRm9jdXMgdGhlIHRlcm1pbmFsLiBEZWxlZ2F0ZXMgZm9jdXMgaGFuZGxpbmcgdG8gdGhlIHRlcm1pbmFsJ3MgRE9NIGVsZW1lbnQuXG4gICAqL1xuICBwdWJsaWMgZm9jdXMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudGV4dGFyZWEpIHtcbiAgICAgIHRoaXMudGV4dGFyZWEuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBfdXBkYXRlT3B0aW9ucyhrZXk6IHN0cmluZyk6IHZvaWQge1xuICAgIHN1cGVyLl91cGRhdGVPcHRpb25zKGtleSk7XG5cbiAgICAvLyBUT0RPOiBUaGVzZSBsaXN0ZW5lcnMgc2hvdWxkIGJlIG93bmVkIGJ5IGluZGl2aWR1YWwgY29tcG9uZW50c1xuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICBjYXNlICdmb250RmFtaWx5JzpcbiAgICAgIGNhc2UgJ2ZvbnRTaXplJzpcbiAgICAgICAgLy8gV2hlbiB0aGUgZm9udCBjaGFuZ2VzIHRoZSBzaXplIG9mIHRoZSBjZWxscyBtYXkgY2hhbmdlIHdoaWNoIHJlcXVpcmVzIGEgcmVuZGVyZXIgY2xlYXJcbiAgICAgICAgdGhpcy5fcmVuZGVyU2VydmljZT8uY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fY2hhclNpemVTZXJ2aWNlPy5tZWFzdXJlKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnY3Vyc29yQmxpbmsnOlxuICAgICAgY2FzZSAnY3Vyc29yU3R5bGUnOlxuICAgICAgICAvLyBUaGUgRE9NIHJlbmRlcmVyIG5lZWRzIGEgcm93IHJlZnJlc2ggdG8gdXBkYXRlIHRoZSBjdXJzb3Igc3R5bGVzXG4gICAgICAgIHRoaXMucmVmcmVzaCh0aGlzLmJ1ZmZlci55LCB0aGlzLmJ1ZmZlci55KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdjdXN0b21HbHlwaHMnOlxuICAgICAgY2FzZSAnZHJhd0JvbGRUZXh0SW5CcmlnaHRDb2xvcnMnOlxuICAgICAgY2FzZSAnbGV0dGVyU3BhY2luZyc6XG4gICAgICBjYXNlICdsaW5lSGVpZ2h0JzpcbiAgICAgIGNhc2UgJ2ZvbnRXZWlnaHQnOlxuICAgICAgY2FzZSAnZm9udFdlaWdodEJvbGQnOlxuICAgICAgY2FzZSAnbWluaW11bUNvbnRyYXN0UmF0aW8nOlxuICAgICAgICAvLyBXaGVuIHRoZSBmb250IGNoYW5nZXMgdGhlIHNpemUgb2YgdGhlIGNlbGxzIG1heSBjaGFuZ2Ugd2hpY2ggcmVxdWlyZXMgYSByZW5kZXJlciBjbGVhclxuICAgICAgICBpZiAodGhpcy5fcmVuZGVyU2VydmljZSkge1xuICAgICAgICAgIHRoaXMuX3JlbmRlclNlcnZpY2UuY2xlYXIoKTtcbiAgICAgICAgICB0aGlzLl9yZW5kZXJTZXJ2aWNlLm9uUmVzaXplKHRoaXMuY29scywgdGhpcy5yb3dzKTtcbiAgICAgICAgICB0aGlzLnJlZnJlc2goMCwgdGhpcy5yb3dzIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZW5kZXJlclR5cGUnOlxuICAgICAgICBpZiAodGhpcy5fcmVuZGVyU2VydmljZSkge1xuICAgICAgICAgIHRoaXMuX3JlbmRlclNlcnZpY2Uuc2V0UmVuZGVyZXIodGhpcy5fY3JlYXRlUmVuZGVyZXIoKSk7XG4gICAgICAgICAgdGhpcy5fcmVuZGVyU2VydmljZS5vblJlc2l6ZSh0aGlzLmNvbHMsIHRoaXMucm93cyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzY3JvbGxiYWNrJzpcbiAgICAgICAgdGhpcy52aWV3cG9ydD8uc3luY1Njcm9sbEFyZWEoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzY3JlZW5SZWFkZXJNb2RlJzpcbiAgICAgICAgaWYgKHRoaXMub3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy5zY3JlZW5SZWFkZXJNb2RlKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLl9hY2Nlc3NpYmlsaXR5TWFuYWdlciAmJiB0aGlzLl9yZW5kZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICB0aGlzLl9hY2Nlc3NpYmlsaXR5TWFuYWdlciA9IG5ldyBBY2Nlc3NpYmlsaXR5TWFuYWdlcih0aGlzLCB0aGlzLl9yZW5kZXJTZXJ2aWNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fYWNjZXNzaWJpbGl0eU1hbmFnZXI/LmRpc3Bvc2UoKTtcbiAgICAgICAgICB0aGlzLl9hY2Nlc3NpYmlsaXR5TWFuYWdlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RhYlN0b3BXaWR0aCc6IHRoaXMuYnVmZmVycy5zZXR1cFRhYlN0b3BzKCk7IGJyZWFrO1xuICAgICAgY2FzZSAndGhlbWUnOlxuICAgICAgICB0aGlzLl9zZXRUaGVtZSh0aGlzLm9wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMudGhlbWUpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQmluZHMgdGhlIGRlc2lyZWQgZm9jdXMgYmVoYXZpb3Igb24gYSBnaXZlbiB0ZXJtaW5hbCBvYmplY3QuXG4gICAqL1xuICBwcml2YXRlIF9vblRleHRBcmVhRm9jdXMoZXY6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jb3JlU2VydmljZS5kZWNQcml2YXRlTW9kZXMuc2VuZEZvY3VzKSB7XG4gICAgICB0aGlzLmNvcmVTZXJ2aWNlLnRyaWdnZXJEYXRhRXZlbnQoQzAuRVNDICsgJ1tJJyk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlQ3Vyc29yU3R5bGUoZXYpO1xuICAgIHRoaXMuZWxlbWVudCEuY2xhc3NMaXN0LmFkZCgnZm9jdXMnKTtcbiAgICB0aGlzLl9zaG93Q3Vyc29yKCk7XG4gICAgdGhpcy5fb25Gb2N1cy5maXJlKCk7XG4gIH1cblxuICAvKipcbiAgICogQmx1ciB0aGUgdGVybWluYWwsIGNhbGxpbmcgdGhlIGJsdXIgZnVuY3Rpb24gb24gdGhlIHRlcm1pbmFsJ3MgdW5kZXJseWluZ1xuICAgKiB0ZXh0YXJlYS5cbiAgICovXG4gIHB1YmxpYyBibHVyKCk6IHZvaWQge1xuICAgIHJldHVybiB0aGlzLnRleHRhcmVhPy5ibHVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQmluZHMgdGhlIGRlc2lyZWQgYmx1ciBiZWhhdmlvciBvbiBhIGdpdmVuIHRlcm1pbmFsIG9iamVjdC5cbiAgICovXG4gIHByaXZhdGUgX29uVGV4dEFyZWFCbHVyKCk6IHZvaWQge1xuICAgIC8vIFRleHQgY2FuIHNhZmVseSBiZSByZW1vdmVkIG9uIGJsdXIuIERvaW5nIGl0IGVhcmxpZXIgY291bGQgaW50ZXJmZXJlIHdpdGhcbiAgICAvLyBzY3JlZW4gcmVhZGVycyByZWFkaW5nIGl0IG91dC5cbiAgICB0aGlzLnRleHRhcmVhIS52YWx1ZSA9ICcnO1xuICAgIHRoaXMucmVmcmVzaCh0aGlzLmJ1ZmZlci55LCB0aGlzLmJ1ZmZlci55KTtcbiAgICBpZiAodGhpcy5jb3JlU2VydmljZS5kZWNQcml2YXRlTW9kZXMuc2VuZEZvY3VzKSB7XG4gICAgICB0aGlzLmNvcmVTZXJ2aWNlLnRyaWdnZXJEYXRhRXZlbnQoQzAuRVNDICsgJ1tPJyk7XG4gICAgfVxuICAgIHRoaXMuZWxlbWVudCEuY2xhc3NMaXN0LnJlbW92ZSgnZm9jdXMnKTtcbiAgICB0aGlzLl9vbkJsdXIuZmlyZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBfc3luY1RleHRBcmVhKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy50ZXh0YXJlYSB8fCAhdGhpcy5idWZmZXIuaXNDdXJzb3JJblZpZXdwb3J0IHx8IHRoaXMuX2NvbXBvc2l0aW9uSGVscGVyIS5pc0NvbXBvc2luZyB8fCAhdGhpcy5fcmVuZGVyU2VydmljZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjdXJzb3JZID0gdGhpcy5idWZmZXIueWJhc2UgKyB0aGlzLmJ1ZmZlci55O1xuICAgIGNvbnN0IGJ1ZmZlckxpbmUgPSB0aGlzLmJ1ZmZlci5saW5lcy5nZXQoY3Vyc29yWSk7XG4gICAgaWYgKCFidWZmZXJMaW5lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGN1cnNvclggPSBNYXRoLm1pbih0aGlzLmJ1ZmZlci54LCB0aGlzLmNvbHMgLSAxKTtcbiAgICBjb25zdCBjZWxsSGVpZ2h0ID0gdGhpcy5fcmVuZGVyU2VydmljZS5kaW1lbnNpb25zLmFjdHVhbENlbGxIZWlnaHQ7XG4gICAgY29uc3Qgd2lkdGggPSBidWZmZXJMaW5lLmdldFdpZHRoKGN1cnNvclgpO1xuICAgIGNvbnN0IGNlbGxXaWR0aCA9IHRoaXMuX3JlbmRlclNlcnZpY2UuZGltZW5zaW9ucy5hY3R1YWxDZWxsV2lkdGggKiB3aWR0aDtcbiAgICBjb25zdCBjdXJzb3JUb3AgPSB0aGlzLmJ1ZmZlci55ICogdGhpcy5fcmVuZGVyU2VydmljZS5kaW1lbnNpb25zLmFjdHVhbENlbGxIZWlnaHQ7XG4gICAgY29uc3QgY3Vyc29yTGVmdCA9IGN1cnNvclggKiB0aGlzLl9yZW5kZXJTZXJ2aWNlLmRpbWVuc2lvbnMuYWN0dWFsQ2VsbFdpZHRoO1xuXG4gICAgLy8gU3luYyB0aGUgdGV4dGFyZWEgdG8gdGhlIGV4YWN0IHBvc2l0aW9uIG9mIHRoZSBjb21wb3NpdGlvbiB2aWV3IHNvIHRoZSBJTUUga25vd3Mgd2hlcmUgdGhlXG4gICAgLy8gdGV4dCBpcy5cbiAgICB0aGlzLnRleHRhcmVhLnN0eWxlLmxlZnQgPSBjdXJzb3JMZWZ0ICsgJ3B4JztcbiAgICB0aGlzLnRleHRhcmVhLnN0eWxlLnRvcCA9IGN1cnNvclRvcCArICdweCc7XG4gICAgdGhpcy50ZXh0YXJlYS5zdHlsZS53aWR0aCA9IGNlbGxXaWR0aCArICdweCc7XG4gICAgdGhpcy50ZXh0YXJlYS5zdHlsZS5oZWlnaHQgPSBjZWxsSGVpZ2h0ICsgJ3B4JztcbiAgICB0aGlzLnRleHRhcmVhLnN0eWxlLmxpbmVIZWlnaHQgPSBjZWxsSGVpZ2h0ICsgJ3B4JztcbiAgICB0aGlzLnRleHRhcmVhLnN0eWxlLnpJbmRleCA9ICctNSc7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBkZWZhdWx0IGJlaGF2aW9yXG4gICAqL1xuICBwcml2YXRlIF9pbml0R2xvYmFsKCk6IHZvaWQge1xuICAgIHRoaXMuX2JpbmRLZXlzKCk7XG5cbiAgICAvLyBCaW5kIGNsaXBib2FyZCBmdW5jdGlvbmFsaXR5XG4gICAgdGhpcy5yZWdpc3RlcihhZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIodGhpcy5lbGVtZW50ISwgJ2NvcHknLCAoZXZlbnQ6IENsaXBib2FyZEV2ZW50KSA9PiB7XG4gICAgICAvLyBJZiBtb3VzZSBldmVudHMgYXJlIGFjdGl2ZSBpdCBtZWFucyB0aGUgc2VsZWN0aW9uIG1hbmFnZXIgaXMgZGlzYWJsZWQgYW5kXG4gICAgICAvLyBjb3B5IHNob3VsZCBiZSBoYW5kbGVkIGJ5IHRoZSBob3N0IHByb2dyYW0uXG4gICAgICBpZiAoIXRoaXMuaGFzU2VsZWN0aW9uKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29weUhhbmRsZXIoZXZlbnQsIHRoaXMuX3NlbGVjdGlvblNlcnZpY2UhKTtcbiAgICB9KSk7XG4gICAgY29uc3QgcGFzdGVIYW5kbGVyV3JhcHBlciA9IChldmVudDogQ2xpcGJvYXJkRXZlbnQpOiB2b2lkID0+IGhhbmRsZVBhc3RlRXZlbnQoZXZlbnQsIHRoaXMudGV4dGFyZWEhLCB0aGlzLmNvcmVTZXJ2aWNlKTtcbiAgICB0aGlzLnJlZ2lzdGVyKGFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLnRleHRhcmVhISwgJ3Bhc3RlJywgcGFzdGVIYW5kbGVyV3JhcHBlcikpO1xuICAgIHRoaXMucmVnaXN0ZXIoYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKHRoaXMuZWxlbWVudCEsICdwYXN0ZScsIHBhc3RlSGFuZGxlcldyYXBwZXIpKTtcblxuICAgIC8vIEhhbmRsZSByaWdodCBjbGljayBjb250ZXh0IG1lbnVzXG4gICAgaWYgKEJyb3dzZXIuaXNGaXJlZm94KSB7XG4gICAgICAvLyBGaXJlZm94IGRvZXNuJ3QgYXBwZWFyIHRvIGZpcmUgdGhlIGNvbnRleHRtZW51IGV2ZW50IG9uIHJpZ2h0IGNsaWNrXG4gICAgICB0aGlzLnJlZ2lzdGVyKGFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLmVsZW1lbnQhLCAnbW91c2Vkb3duJywgKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC5idXR0b24gPT09IDIpIHtcbiAgICAgICAgICByaWdodENsaWNrSGFuZGxlcihldmVudCwgdGhpcy50ZXh0YXJlYSEsIHRoaXMuc2NyZWVuRWxlbWVudCEsIHRoaXMuX3NlbGVjdGlvblNlcnZpY2UhLCB0aGlzLm9wdGlvbnMucmlnaHRDbGlja1NlbGVjdHNXb3JkKTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlZ2lzdGVyKGFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLmVsZW1lbnQhLCAnY29udGV4dG1lbnUnLCAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgcmlnaHRDbGlja0hhbmRsZXIoZXZlbnQsIHRoaXMudGV4dGFyZWEhLCB0aGlzLnNjcmVlbkVsZW1lbnQhLCB0aGlzLl9zZWxlY3Rpb25TZXJ2aWNlISwgdGhpcy5vcHRpb25zLnJpZ2h0Q2xpY2tTZWxlY3RzV29yZCk7XG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgLy8gTW92ZSB0aGUgdGV4dGFyZWEgdW5kZXIgdGhlIGN1cnNvciB3aGVuIG1pZGRsZSBjbGlja2luZyBvbiBMaW51eCB0byBlbnN1cmVcbiAgICAvLyBtaWRkbGUgY2xpY2sgdG8gcGFzdGUgc2VsZWN0aW9uIHdvcmtzLiBUaGlzIG9ubHkgYXBwZWFycyB0byB3b3JrIGluIENocm9tZVxuICAgIC8vIGF0IHRoZSB0aW1lIGlzIHdyaXRpbmcuXG4gICAgaWYgKEJyb3dzZXIuaXNMaW51eCkge1xuICAgICAgLy8gVXNlIGF1eGNsaWNrIGV2ZW50IG92ZXIgbW91c2Vkb3duIHRoZSBsYXR0ZXIgZG9lc24ndCBzZWVtIHRvIHdvcmsuIE5vdGVcbiAgICAgIC8vIHRoYXQgdGhlIHJlZ3VsYXIgY2xpY2sgZXZlbnQgZG9lc24ndCBmaXJlIGZvciB0aGUgbWlkZGxlIG1vdXNlIGJ1dHRvbi5cbiAgICAgIHRoaXMucmVnaXN0ZXIoYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKHRoaXMuZWxlbWVudCEsICdhdXhjbGljaycsIChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQuYnV0dG9uID09PSAxKSB7XG4gICAgICAgICAgbW92ZVRleHRBcmVhVW5kZXJNb3VzZUN1cnNvcihldmVudCwgdGhpcy50ZXh0YXJlYSEsIHRoaXMuc2NyZWVuRWxlbWVudCEpO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFwcGx5IGtleSBoYW5kbGluZyB0byB0aGUgdGVybWluYWxcbiAgICovXG4gIHByaXZhdGUgX2JpbmRLZXlzKCk6IHZvaWQge1xuICAgIHRoaXMucmVnaXN0ZXIoYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKHRoaXMudGV4dGFyZWEhLCAna2V5dXAnLCAoZXY6IEtleWJvYXJkRXZlbnQpID0+IHRoaXMuX2tleVVwKGV2KSwgdHJ1ZSkpO1xuICAgIHRoaXMucmVnaXN0ZXIoYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKHRoaXMudGV4dGFyZWEhLCAna2V5ZG93bicsIChldjogS2V5Ym9hcmRFdmVudCkgPT4gdGhpcy5fa2V5RG93bihldiksIHRydWUpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKGFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLnRleHRhcmVhISwgJ2tleXByZXNzJywgKGV2OiBLZXlib2FyZEV2ZW50KSA9PiB0aGlzLl9rZXlQcmVzcyhldiksIHRydWUpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKGFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLnRleHRhcmVhISwgJ2NvbXBvc2l0aW9uc3RhcnQnLCAoKSA9PiB0aGlzLl9jb21wb3NpdGlvbkhlbHBlciEuY29tcG9zaXRpb25zdGFydCgpKSk7XG4gICAgdGhpcy5yZWdpc3RlcihhZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIodGhpcy50ZXh0YXJlYSEsICdjb21wb3NpdGlvbnVwZGF0ZScsIChlOiBDb21wb3NpdGlvbkV2ZW50KSA9PiB0aGlzLl9jb21wb3NpdGlvbkhlbHBlciEuY29tcG9zaXRpb251cGRhdGUoZSkpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKGFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLnRleHRhcmVhISwgJ2NvbXBvc2l0aW9uZW5kJywgKCkgPT4gdGhpcy5fY29tcG9zaXRpb25IZWxwZXIhLmNvbXBvc2l0aW9uZW5kKCkpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKGFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLnRleHRhcmVhISwgJ2lucHV0JywgKGV2OiBJbnB1dEV2ZW50KSA9PiB0aGlzLl9pbnB1dEV2ZW50KGV2KSwgdHJ1ZSkpO1xuICAgIHRoaXMucmVnaXN0ZXIodGhpcy5vblJlbmRlcigoKSA9PiB0aGlzLl9jb21wb3NpdGlvbkhlbHBlciEudXBkYXRlQ29tcG9zaXRpb25FbGVtZW50cygpKSk7XG4gICAgdGhpcy5yZWdpc3Rlcih0aGlzLm9uUmVuZGVyKGUgPT4gdGhpcy5fcXVldWVMaW5raWZpY2F0aW9uKGUuc3RhcnQsIGUuZW5kKSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSB0ZXJtaW5hbCB3aXRoaW4gYW4gZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHBhcmVudCBUaGUgZWxlbWVudCB0byBjcmVhdGUgdGhlIHRlcm1pbmFsIHdpdGhpbi5cbiAgICovXG4gIHB1YmxpYyBvcGVuKHBhcmVudDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICBpZiAoIXBhcmVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZXJtaW5hbCByZXF1aXJlcyBhIHBhcmVudCBlbGVtZW50LicpO1xuICAgIH1cblxuICAgIGlmICghcGFyZW50LmlzQ29ubmVjdGVkKSB7XG4gICAgICB0aGlzLl9sb2dTZXJ2aWNlLmRlYnVnKCdUZXJtaW5hbC5vcGVuIHdhcyBjYWxsZWQgb24gYW4gZWxlbWVudCB0aGF0IHdhcyBub3QgYXR0YWNoZWQgdG8gdGhlIERPTScpO1xuICAgIH1cblxuICAgIHRoaXMuX2RvY3VtZW50ID0gcGFyZW50Lm93bmVyRG9jdW1lbnQhO1xuXG4gICAgLy8gQ3JlYXRlIG1haW4gZWxlbWVudCBjb250YWluZXJcbiAgICB0aGlzLmVsZW1lbnQgPSB0aGlzLl9kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmVsZW1lbnQuZGlyID0gJ2x0cic7ICAgLy8geHRlcm0uY3NzIGFzc3VtZXMgTFRSXG4gICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3Rlcm1pbmFsJyk7XG4gICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3h0ZXJtJyk7XG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnMCcpO1xuICAgIHBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnQpO1xuXG4gICAgLy8gUGVyZm9ybWFuY2U6IFVzZSBhIGRvY3VtZW50IGZyYWdtZW50IHRvIGJ1aWxkIHRoZSB0ZXJtaW5hbFxuICAgIC8vIHZpZXdwb3J0IGFuZCBoZWxwZXIgZWxlbWVudHMgZGV0YWNoZWQgZnJvbSB0aGUgRE9NXG4gICAgY29uc3QgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgdGhpcy5fdmlld3BvcnRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5fdmlld3BvcnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3h0ZXJtLXZpZXdwb3J0Jyk7XG4gICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQodGhpcy5fdmlld3BvcnRFbGVtZW50KTtcbiAgICB0aGlzLl92aWV3cG9ydFNjcm9sbEFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLl92aWV3cG9ydFNjcm9sbEFyZWEuY2xhc3NMaXN0LmFkZCgneHRlcm0tc2Nyb2xsLWFyZWEnKTtcbiAgICB0aGlzLl92aWV3cG9ydEVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fdmlld3BvcnRTY3JvbGxBcmVhKTtcblxuICAgIHRoaXMuc2NyZWVuRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuc2NyZWVuRWxlbWVudC5jbGFzc0xpc3QuYWRkKCd4dGVybS1zY3JlZW4nKTtcbiAgICAvLyBDcmVhdGUgdGhlIGNvbnRhaW5lciB0aGF0IHdpbGwgaG9sZCBoZWxwZXJzIGxpa2UgdGhlIHRleHRhcmVhIGZvclxuICAgIC8vIGNhcHR1cmluZyBET00gRXZlbnRzLiBUaGVuIHByb2R1Y2UgdGhlIGhlbHBlcnMuXG4gICAgdGhpcy5faGVscGVyQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5faGVscGVyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3h0ZXJtLWhlbHBlcnMnKTtcbiAgICB0aGlzLnNjcmVlbkVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5faGVscGVyQ29udGFpbmVyKTtcbiAgICBmcmFnbWVudC5hcHBlbmRDaGlsZCh0aGlzLnNjcmVlbkVsZW1lbnQpO1xuXG4gICAgdGhpcy50ZXh0YXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gICAgdGhpcy50ZXh0YXJlYS5jbGFzc0xpc3QuYWRkKCd4dGVybS1oZWxwZXItdGV4dGFyZWEnKTtcbiAgICB0aGlzLnRleHRhcmVhLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIFN0cmluZ3MucHJvbXB0TGFiZWwpO1xuICAgIHRoaXMudGV4dGFyZWEuc2V0QXR0cmlidXRlKCdhcmlhLW11bHRpbGluZScsICdmYWxzZScpO1xuICAgIHRoaXMudGV4dGFyZWEuc2V0QXR0cmlidXRlKCdhdXRvY29ycmVjdCcsICdvZmYnKTtcbiAgICB0aGlzLnRleHRhcmVhLnNldEF0dHJpYnV0ZSgnYXV0b2NhcGl0YWxpemUnLCAnb2ZmJyk7XG4gICAgdGhpcy50ZXh0YXJlYS5zZXRBdHRyaWJ1dGUoJ3NwZWxsY2hlY2snLCAnZmFsc2UnKTtcbiAgICB0aGlzLnRleHRhcmVhLnRhYkluZGV4ID0gMDtcbiAgICB0aGlzLnJlZ2lzdGVyKGFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLnRleHRhcmVhLCAnZm9jdXMnLCAoZXY6IEtleWJvYXJkRXZlbnQpID0+IHRoaXMuX29uVGV4dEFyZWFGb2N1cyhldikpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKGFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLnRleHRhcmVhLCAnYmx1cicsICgpID0+IHRoaXMuX29uVGV4dEFyZWFCbHVyKCkpKTtcbiAgICB0aGlzLl9oZWxwZXJDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy50ZXh0YXJlYSk7XG5cbiAgICBjb25zdCBjb3JlQnJvd3NlclNlcnZpY2UgPSB0aGlzLl9pbnN0YW50aWF0aW9uU2VydmljZS5jcmVhdGVJbnN0YW5jZShDb3JlQnJvd3NlclNlcnZpY2UsIHRoaXMudGV4dGFyZWEpO1xuICAgIHRoaXMuX2luc3RhbnRpYXRpb25TZXJ2aWNlLnNldFNlcnZpY2UoSUNvcmVCcm93c2VyU2VydmljZSwgY29yZUJyb3dzZXJTZXJ2aWNlKTtcblxuICAgIHRoaXMuX2NoYXJTaXplU2VydmljZSA9IHRoaXMuX2luc3RhbnRpYXRpb25TZXJ2aWNlLmNyZWF0ZUluc3RhbmNlKENoYXJTaXplU2VydmljZSwgdGhpcy5fZG9jdW1lbnQsIHRoaXMuX2hlbHBlckNvbnRhaW5lcik7XG4gICAgdGhpcy5faW5zdGFudGlhdGlvblNlcnZpY2Uuc2V0U2VydmljZShJQ2hhclNpemVTZXJ2aWNlLCB0aGlzLl9jaGFyU2l6ZVNlcnZpY2UpO1xuXG4gICAgdGhpcy5fdGhlbWUgPSB0aGlzLm9wdGlvbnMudGhlbWUgfHwgdGhpcy5fdGhlbWU7XG4gICAgdGhpcy5fY29sb3JNYW5hZ2VyID0gbmV3IENvbG9yTWFuYWdlcihkb2N1bWVudCwgdGhpcy5vcHRpb25zLmFsbG93VHJhbnNwYXJlbmN5KTtcbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMub3B0aW9uc1NlcnZpY2Uub25PcHRpb25DaGFuZ2UoZSA9PiB0aGlzLl9jb2xvck1hbmFnZXIhLm9uT3B0aW9uc0NoYW5nZShlKSkpO1xuICAgIHRoaXMuX2NvbG9yTWFuYWdlci5zZXRUaGVtZSh0aGlzLl90aGVtZSk7XG5cbiAgICB0aGlzLl9jaGFyYWN0ZXJKb2luZXJTZXJ2aWNlID0gdGhpcy5faW5zdGFudGlhdGlvblNlcnZpY2UuY3JlYXRlSW5zdGFuY2UoQ2hhcmFjdGVySm9pbmVyU2VydmljZSk7XG4gICAgdGhpcy5faW5zdGFudGlhdGlvblNlcnZpY2Uuc2V0U2VydmljZShJQ2hhcmFjdGVySm9pbmVyU2VydmljZSwgdGhpcy5fY2hhcmFjdGVySm9pbmVyU2VydmljZSk7XG5cbiAgICBjb25zdCByZW5kZXJlciA9IHRoaXMuX2NyZWF0ZVJlbmRlcmVyKCk7XG4gICAgdGhpcy5fcmVuZGVyU2VydmljZSA9IHRoaXMucmVnaXN0ZXIodGhpcy5faW5zdGFudGlhdGlvblNlcnZpY2UuY3JlYXRlSW5zdGFuY2UoUmVuZGVyU2VydmljZSwgcmVuZGVyZXIsIHRoaXMucm93cywgdGhpcy5zY3JlZW5FbGVtZW50KSk7XG4gICAgdGhpcy5faW5zdGFudGlhdGlvblNlcnZpY2Uuc2V0U2VydmljZShJUmVuZGVyU2VydmljZSwgdGhpcy5fcmVuZGVyU2VydmljZSk7XG4gICAgdGhpcy5yZWdpc3Rlcih0aGlzLl9yZW5kZXJTZXJ2aWNlLm9uUmVuZGVyZWRCdWZmZXJDaGFuZ2UoZSA9PiB0aGlzLl9vblJlbmRlci5maXJlKGUpKSk7XG4gICAgdGhpcy5vblJlc2l6ZShlID0+IHRoaXMuX3JlbmRlclNlcnZpY2UhLnJlc2l6ZShlLmNvbHMsIGUucm93cykpO1xuXG4gICAgdGhpcy5fY29tcG9zaXRpb25WaWV3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5fY29tcG9zaXRpb25WaWV3LmNsYXNzTGlzdC5hZGQoJ2NvbXBvc2l0aW9uLXZpZXcnKTtcbiAgICB0aGlzLl9jb21wb3NpdGlvbkhlbHBlciA9IHRoaXMuX2luc3RhbnRpYXRpb25TZXJ2aWNlLmNyZWF0ZUluc3RhbmNlKENvbXBvc2l0aW9uSGVscGVyLCB0aGlzLnRleHRhcmVhLCB0aGlzLl9jb21wb3NpdGlvblZpZXcpO1xuICAgIHRoaXMuX2hlbHBlckNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLl9jb21wb3NpdGlvblZpZXcpO1xuXG4gICAgLy8gUGVyZm9ybWFuY2U6IEFkZCB2aWV3cG9ydCBhbmQgaGVscGVyIGVsZW1lbnRzIGZyb20gdGhlIGZyYWdtZW50XG4gICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKGZyYWdtZW50KTtcblxuICAgIHRoaXMuX3NvdW5kU2VydmljZSA9IHRoaXMuX2luc3RhbnRpYXRpb25TZXJ2aWNlLmNyZWF0ZUluc3RhbmNlKFNvdW5kU2VydmljZSk7XG4gICAgdGhpcy5faW5zdGFudGlhdGlvblNlcnZpY2Uuc2V0U2VydmljZShJU291bmRTZXJ2aWNlLCB0aGlzLl9zb3VuZFNlcnZpY2UpO1xuICAgIHRoaXMuX21vdXNlU2VydmljZSA9IHRoaXMuX2luc3RhbnRpYXRpb25TZXJ2aWNlLmNyZWF0ZUluc3RhbmNlKE1vdXNlU2VydmljZSk7XG4gICAgdGhpcy5faW5zdGFudGlhdGlvblNlcnZpY2Uuc2V0U2VydmljZShJTW91c2VTZXJ2aWNlLCB0aGlzLl9tb3VzZVNlcnZpY2UpO1xuXG4gICAgdGhpcy52aWV3cG9ydCA9IHRoaXMuX2luc3RhbnRpYXRpb25TZXJ2aWNlLmNyZWF0ZUluc3RhbmNlKFZpZXdwb3J0LFxuICAgICAgKGFtb3VudDogbnVtYmVyKSA9PiB0aGlzLnNjcm9sbExpbmVzKGFtb3VudCwgdHJ1ZSwgU2Nyb2xsU291cmNlLlZJRVdQT1JUKSxcbiAgICAgIHRoaXMuX3ZpZXdwb3J0RWxlbWVudCxcbiAgICAgIHRoaXMuX3ZpZXdwb3J0U2Nyb2xsQXJlYSxcbiAgICAgIHRoaXMuZWxlbWVudFxuICAgICk7XG4gICAgdGhpcy52aWV3cG9ydC5vblRoZW1lQ2hhbmdlKHRoaXMuX2NvbG9yTWFuYWdlci5jb2xvcnMpO1xuICAgIHRoaXMucmVnaXN0ZXIodGhpcy5faW5wdXRIYW5kbGVyLm9uUmVxdWVzdFN5bmNTY3JvbGxCYXIoKCkgPT4gdGhpcy52aWV3cG9ydCEuc3luY1Njcm9sbEFyZWEoKSkpO1xuICAgIHRoaXMucmVnaXN0ZXIodGhpcy52aWV3cG9ydCk7XG5cbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMub25DdXJzb3JNb3ZlKCgpID0+IHtcbiAgICAgIHRoaXMuX3JlbmRlclNlcnZpY2UhLm9uQ3Vyc29yTW92ZSgpO1xuICAgICAgdGhpcy5fc3luY1RleHRBcmVhKCk7XG4gICAgfSkpO1xuICAgIHRoaXMucmVnaXN0ZXIodGhpcy5vblJlc2l6ZSgoKSA9PiB0aGlzLl9yZW5kZXJTZXJ2aWNlIS5vblJlc2l6ZSh0aGlzLmNvbHMsIHRoaXMucm93cykpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMub25CbHVyKCgpID0+IHRoaXMuX3JlbmRlclNlcnZpY2UhLm9uQmx1cigpKSk7XG4gICAgdGhpcy5yZWdpc3Rlcih0aGlzLm9uRm9jdXMoKCkgPT4gdGhpcy5fcmVuZGVyU2VydmljZSEub25Gb2N1cygpKSk7XG4gICAgdGhpcy5yZWdpc3Rlcih0aGlzLl9yZW5kZXJTZXJ2aWNlLm9uRGltZW5zaW9uc0NoYW5nZSgoKSA9PiB0aGlzLnZpZXdwb3J0IS5zeW5jU2Nyb2xsQXJlYSgpKSk7XG5cbiAgICB0aGlzLl9zZWxlY3Rpb25TZXJ2aWNlID0gdGhpcy5yZWdpc3Rlcih0aGlzLl9pbnN0YW50aWF0aW9uU2VydmljZS5jcmVhdGVJbnN0YW5jZShTZWxlY3Rpb25TZXJ2aWNlLFxuICAgICAgdGhpcy5lbGVtZW50LFxuICAgICAgdGhpcy5zY3JlZW5FbGVtZW50LFxuICAgICAgdGhpcy5saW5raWZpZXIyXG4gICAgKSk7XG4gICAgdGhpcy5faW5zdGFudGlhdGlvblNlcnZpY2Uuc2V0U2VydmljZShJU2VsZWN0aW9uU2VydmljZSwgdGhpcy5fc2VsZWN0aW9uU2VydmljZSk7XG4gICAgdGhpcy5yZWdpc3Rlcih0aGlzLl9zZWxlY3Rpb25TZXJ2aWNlLm9uUmVxdWVzdFNjcm9sbExpbmVzKGUgPT4gdGhpcy5zY3JvbGxMaW5lcyhlLmFtb3VudCwgZS5zdXBwcmVzc1Njcm9sbEV2ZW50KSkpO1xuICAgIHRoaXMucmVnaXN0ZXIodGhpcy5fc2VsZWN0aW9uU2VydmljZS5vblNlbGVjdGlvbkNoYW5nZSgoKSA9PiB0aGlzLl9vblNlbGVjdGlvbkNoYW5nZS5maXJlKCkpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuX3NlbGVjdGlvblNlcnZpY2Uub25SZXF1ZXN0UmVkcmF3KGUgPT4gdGhpcy5fcmVuZGVyU2VydmljZSEub25TZWxlY3Rpb25DaGFuZ2VkKGUuc3RhcnQsIGUuZW5kLCBlLmNvbHVtblNlbGVjdE1vZGUpKSk7XG4gICAgdGhpcy5yZWdpc3Rlcih0aGlzLl9zZWxlY3Rpb25TZXJ2aWNlLm9uTGludXhNb3VzZVNlbGVjdGlvbih0ZXh0ID0+IHtcbiAgICAgIC8vIElmIHRoZXJlJ3MgYSBuZXcgc2VsZWN0aW9uLCBwdXQgaXQgaW50byB0aGUgdGV4dGFyZWEsIGZvY3VzIGFuZCBzZWxlY3QgaXRcbiAgICAgIC8vIGluIG9yZGVyIHRvIHJlZ2lzdGVyIGl0IGFzIGEgc2VsZWN0aW9uIG9uIHRoZSBPUy4gVGhpcyBldmVudCBpcyBmaXJlZFxuICAgICAgLy8gb25seSBvbiBMaW51eCB0byBlbmFibGUgbWlkZGxlIGNsaWNrIHRvIHBhc3RlIHNlbGVjdGlvbi5cbiAgICAgIHRoaXMudGV4dGFyZWEhLnZhbHVlID0gdGV4dDtcbiAgICAgIHRoaXMudGV4dGFyZWEhLmZvY3VzKCk7XG4gICAgICB0aGlzLnRleHRhcmVhIS5zZWxlY3QoKTtcbiAgICB9KSk7XG4gICAgdGhpcy5yZWdpc3Rlcih0aGlzLl9vblNjcm9sbC5ldmVudChldiA9PiB7XG4gICAgICB0aGlzLnZpZXdwb3J0IS5zeW5jU2Nyb2xsQXJlYSgpO1xuICAgICAgdGhpcy5fc2VsZWN0aW9uU2VydmljZSEucmVmcmVzaCgpO1xuICAgIH0pKTtcbiAgICB0aGlzLnJlZ2lzdGVyKGFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLl92aWV3cG9ydEVsZW1lbnQsICdzY3JvbGwnLCAoKSA9PiB0aGlzLl9zZWxlY3Rpb25TZXJ2aWNlIS5yZWZyZXNoKCkpKTtcblxuICAgIHRoaXMuX21vdXNlWm9uZU1hbmFnZXIgPSB0aGlzLl9pbnN0YW50aWF0aW9uU2VydmljZS5jcmVhdGVJbnN0YW5jZShNb3VzZVpvbmVNYW5hZ2VyLCB0aGlzLmVsZW1lbnQsIHRoaXMuc2NyZWVuRWxlbWVudCk7XG4gICAgdGhpcy5yZWdpc3Rlcih0aGlzLl9tb3VzZVpvbmVNYW5hZ2VyKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMub25TY3JvbGwoKCkgPT4gdGhpcy5fbW91c2Vab25lTWFuYWdlciEuY2xlYXJBbGwoKSkpO1xuICAgIHRoaXMubGlua2lmaWVyLmF0dGFjaFRvRG9tKHRoaXMuZWxlbWVudCwgdGhpcy5fbW91c2Vab25lTWFuYWdlcik7XG4gICAgdGhpcy5saW5raWZpZXIyLmF0dGFjaFRvRG9tKHRoaXMuc2NyZWVuRWxlbWVudCwgdGhpcy5fbW91c2VTZXJ2aWNlLCB0aGlzLl9yZW5kZXJTZXJ2aWNlKTtcblxuICAgIHRoaXMuZGVjb3JhdGlvblNlcnZpY2UuYXR0YWNoVG9Eb20odGhpcy5zY3JlZW5FbGVtZW50LCB0aGlzLl9yZW5kZXJTZXJ2aWNlLCB0aGlzLl9idWZmZXJTZXJ2aWNlKTtcbiAgICAvLyBUaGlzIGV2ZW50IGxpc3RlbmVyIG11c3QgYmUgcmVnaXN0ZXJlZCBhZnRyZSBNb3VzZVpvbmVNYW5hZ2VyIGlzIGNyZWF0ZWRcbiAgICB0aGlzLnJlZ2lzdGVyKGFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLmVsZW1lbnQsICdtb3VzZWRvd24nLCAoZTogTW91c2VFdmVudCkgPT4gdGhpcy5fc2VsZWN0aW9uU2VydmljZSEub25Nb3VzZURvd24oZSkpKTtcblxuICAgIC8vIGFwcGx5IG1vdXNlIGV2ZW50IGNsYXNzZXMgc2V0IGJ5IGVzY2FwZSBjb2RlcyBiZWZvcmUgdGVybWluYWwgd2FzIGF0dGFjaGVkXG4gICAgaWYgKHRoaXMuY29yZU1vdXNlU2VydmljZS5hcmVNb3VzZUV2ZW50c0FjdGl2ZSkge1xuICAgICAgdGhpcy5fc2VsZWN0aW9uU2VydmljZS5kaXNhYmxlKCk7XG4gICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZW5hYmxlLW1vdXNlLWV2ZW50cycpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zZWxlY3Rpb25TZXJ2aWNlLmVuYWJsZSgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuc2NyZWVuUmVhZGVyTW9kZSkge1xuICAgICAgLy8gTm90ZSB0aGF0IHRoaXMgbXVzdCBiZSBkb25lICphZnRlciogdGhlIHJlbmRlcmVyIGlzIGNyZWF0ZWQgaW4gb3JkZXIgdG9cbiAgICAgIC8vIGVuc3VyZSB0aGUgY29ycmVjdCBvcmRlciBvZiB0aGUgZHByY2hhbmdlIGV2ZW50XG4gICAgICB0aGlzLl9hY2Nlc3NpYmlsaXR5TWFuYWdlciA9IG5ldyBBY2Nlc3NpYmlsaXR5TWFuYWdlcih0aGlzLCB0aGlzLl9yZW5kZXJTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICAvLyBNZWFzdXJlIHRoZSBjaGFyYWN0ZXIgc2l6ZVxuICAgIHRoaXMuX2NoYXJTaXplU2VydmljZS5tZWFzdXJlKCk7XG5cbiAgICAvLyBTZXR1cCBsb29wIHRoYXQgZHJhd3MgdG8gc2NyZWVuXG4gICAgdGhpcy5yZWZyZXNoKDAsIHRoaXMucm93cyAtIDEpO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBnbG9iYWwgYWN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgdGFrZW4gb24gdGhlIGRvY3VtZW50LlxuICAgIHRoaXMuX2luaXRHbG9iYWwoKTtcblxuICAgIC8vIExpc3RlbiBmb3IgbW91c2UgZXZlbnRzIGFuZCB0cmFuc2xhdGVcbiAgICAvLyB0aGVtIGludG8gdGVybWluYWwgbW91c2UgcHJvdG9jb2xzLlxuICAgIHRoaXMuYmluZE1vdXNlKCk7XG4gIH1cblxuICBwcml2YXRlIF9jcmVhdGVSZW5kZXJlcigpOiBJUmVuZGVyZXIge1xuICAgIHN3aXRjaCAodGhpcy5vcHRpb25zLnJlbmRlcmVyVHlwZSkge1xuICAgICAgY2FzZSAnY2FudmFzJzogcmV0dXJuIHRoaXMuX2luc3RhbnRpYXRpb25TZXJ2aWNlLmNyZWF0ZUluc3RhbmNlKFJlbmRlcmVyLCB0aGlzLl9jb2xvck1hbmFnZXIhLmNvbG9ycywgdGhpcy5zY3JlZW5FbGVtZW50ISwgdGhpcy5saW5raWZpZXIsIHRoaXMubGlua2lmaWVyMik7XG4gICAgICBjYXNlICdkb20nOiByZXR1cm4gdGhpcy5faW5zdGFudGlhdGlvblNlcnZpY2UuY3JlYXRlSW5zdGFuY2UoRG9tUmVuZGVyZXIsIHRoaXMuX2NvbG9yTWFuYWdlciEuY29sb3JzLCB0aGlzLmVsZW1lbnQhLCB0aGlzLnNjcmVlbkVsZW1lbnQhLCB0aGlzLl92aWV3cG9ydEVsZW1lbnQhLCB0aGlzLmxpbmtpZmllciwgdGhpcy5saW5raWZpZXIyKTtcbiAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihgVW5yZWNvZ25pemVkIHJlbmRlcmVyVHlwZSBcIiR7dGhpcy5vcHRpb25zLnJlbmRlcmVyVHlwZX1cImApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB0aGVtZSBvbiB0aGUgcmVuZGVyZXIuIFRoZSByZW5kZXJlciBtdXN0IGhhdmUgYmVlbiBpbml0aWFsaXplZC5cbiAgICogQHBhcmFtIHRoZW1lIFRoZSB0aGVtZSB0byBzZXQuXG4gICAqL1xuICBwcml2YXRlIF9zZXRUaGVtZSh0aGVtZTogSVRoZW1lKTogdm9pZCB7XG4gICAgdGhpcy5fdGhlbWUgPSB0aGVtZTtcbiAgICB0aGlzLl9jb2xvck1hbmFnZXI/LnNldFRoZW1lKHRoZW1lKTtcbiAgICB0aGlzLl9yZW5kZXJTZXJ2aWNlPy5zZXRDb2xvcnModGhpcy5fY29sb3JNYW5hZ2VyIS5jb2xvcnMpO1xuICAgIHRoaXMudmlld3BvcnQ/Lm9uVGhlbWVDaGFuZ2UodGhpcy5fY29sb3JNYW5hZ2VyIS5jb2xvcnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJpbmQgY2VydGFpbiBtb3VzZSBldmVudHMgdG8gdGhlIHRlcm1pbmFsLlxuICAgKiBCeSBkZWZhdWx0IG9ubHkgMyBidXR0b24gKyB3aGVlbCB1cC9kb3duIGlzIGF0aXZhdGVkLiBGb3IgaGlnaGVyIGJ1dHRvbnNcbiAgICogbm8gbW91c2UgcmVwb3J0IHdpbGwgYmUgY3JlYXRlZC4gVHlwaWNhbGx5IHRoZSBzdGFuZGFyZCBhY3Rpb25zIHdpbGwgYmUgYWN0aXZlLlxuICAgKlxuICAgKiBUaGVyZSBhcmUgc2V2ZXJhbCByZWFzb25zIG5vdCB0byBlbmFibGUgc3VwcG9ydCBmb3IgaGlnaGVyIGJ1dHRvbnMvd2hlZWw6XG4gICAqIC0gQnV0dG9uIDQgYW5kIDUgYXJlIHR5cGljYWxseSB1c2VkIGZvciBoaXN0b3J5IGJhY2sgYW5kIGZvcndhcmQgbmF2aWdhdGlvbixcbiAgICogICB0aGVyZSBpcyBubyBzdHJhaWdodCBmb3J3YXJkIHdheSB0byBzdXByZXNzL2ludGVyY2VwdCB0aG9zZSBzdGFuZGFyZCBhY3Rpb25zLlxuICAgKiAtIFN1cHBvcnQgZm9yIGhpZ2hlciBidXR0b25zIGRvZXMgbm90IHdvcmsgaW4gc29tZSBwbGF0Zm9ybS9icm93c2VyIGNvbWJpbmF0aW9ucy5cbiAgICogLSBMZWZ0L3JpZ2h0IHdoZWVsIHdhcyBub3QgdGVzdGVkLlxuICAgKiAtIEVtdWxhdG9ycyB2YXJ5IGluIG1vdXNlIGJ1dHRvbiBzdXBwb3J0LCB0eXBpY2FsbHkgb25seSAzIGJ1dHRvbnMgYW5kXG4gICAqICAgd2hlZWwgdXAvZG93biB3b3JrIHJlbGlhYmxlLlxuICAgKlxuICAgKiBUT0RPOiBNb3ZlIG1vdXNlIGV2ZW50IGNvZGUgaW50byBpdHMgb3duIGZpbGUuXG4gICAqL1xuICBwdWJsaWMgYmluZE1vdXNlKCk6IHZvaWQge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGVsID0gdGhpcy5lbGVtZW50ITtcblxuICAgIC8vIHNlbmQgZXZlbnQgdG8gQ29yZU1vdXNlU2VydmljZVxuICAgIGZ1bmN0aW9uIHNlbmRFdmVudChldjogTW91c2VFdmVudCB8IFdoZWVsRXZlbnQpOiBib29sZWFuIHtcbiAgICAgIC8vIGdldCBtb3VzZSBjb29yZGluYXRlc1xuICAgICAgY29uc3QgcG9zID0gc2VsZi5fbW91c2VTZXJ2aWNlIS5nZXRSYXdCeXRlQ29vcmRzKGV2LCBzZWxmLnNjcmVlbkVsZW1lbnQhLCBzZWxmLmNvbHMsIHNlbGYucm93cyk7XG4gICAgICBpZiAoIXBvcykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGxldCBidXQ6IENvcmVNb3VzZUJ1dHRvbjtcbiAgICAgIGxldCBhY3Rpb246IENvcmVNb3VzZUFjdGlvbiB8IHVuZGVmaW5lZDtcbiAgICAgIHN3aXRjaCAoKGV2IGFzIGFueSkub3ZlcnJpZGVUeXBlIHx8IGV2LnR5cGUpIHtcbiAgICAgICAgY2FzZSAnbW91c2Vtb3ZlJzpcbiAgICAgICAgICBhY3Rpb24gPSBDb3JlTW91c2VBY3Rpb24uTU9WRTtcbiAgICAgICAgICBpZiAoZXYuYnV0dG9ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBidXR0b25zIGlzIG5vdCBzdXBwb3J0ZWQgb24gbWFjT1MsIHRyeSB0byBnZXQgYSB2YWx1ZSBmcm9tIGJ1dHRvbiBpbnN0ZWFkXG4gICAgICAgICAgICBidXQgPSBDb3JlTW91c2VCdXR0b24uTk9ORTtcbiAgICAgICAgICAgIGlmIChldi5idXR0b24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBidXQgPSBldi5idXR0b24gPCAzID8gZXYuYnV0dG9uIDogQ29yZU1vdXNlQnV0dG9uLk5PTkU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGFjY29yZGluZyB0byBNRE4gYnV0dG9ucyBvbmx5IHJlcG9ydHMgdXAgdG8gYnV0dG9uIDUgKEFVWDIpXG4gICAgICAgICAgICBidXQgPSBldi5idXR0b25zICYgMSA/IENvcmVNb3VzZUJ1dHRvbi5MRUZUIDpcbiAgICAgICAgICAgICAgZXYuYnV0dG9ucyAmIDQgPyBDb3JlTW91c2VCdXR0b24uTUlERExFIDpcbiAgICAgICAgICAgICAgICBldi5idXR0b25zICYgMiA/IENvcmVNb3VzZUJ1dHRvbi5SSUdIVCA6XG4gICAgICAgICAgICAgICAgICBDb3JlTW91c2VCdXR0b24uTk9ORTsgLy8gZmFsbGJhY2sgdG8gTk9ORVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbW91c2V1cCc6XG4gICAgICAgICAgYWN0aW9uID0gQ29yZU1vdXNlQWN0aW9uLlVQO1xuICAgICAgICAgIGJ1dCA9IGV2LmJ1dHRvbiA8IDMgPyBldi5idXR0b24gOiBDb3JlTW91c2VCdXR0b24uTk9ORTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbW91c2Vkb3duJzpcbiAgICAgICAgICBhY3Rpb24gPSBDb3JlTW91c2VBY3Rpb24uRE9XTjtcbiAgICAgICAgICBidXQgPSBldi5idXR0b24gPCAzID8gZXYuYnV0dG9uIDogQ29yZU1vdXNlQnV0dG9uLk5PTkU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3doZWVsJzpcbiAgICAgICAgICAvLyBvbmx5IFVQL0RPV04gd2hlZWwgZXZlbnRzIGFyZSByZXNwZWN0ZWRcbiAgICAgICAgICBpZiAoKGV2IGFzIFdoZWVsRXZlbnQpLmRlbHRhWSAhPT0gMCkge1xuICAgICAgICAgICAgYWN0aW9uID0gKGV2IGFzIFdoZWVsRXZlbnQpLmRlbHRhWSA8IDAgPyBDb3JlTW91c2VBY3Rpb24uVVAgOiBDb3JlTW91c2VBY3Rpb24uRE9XTjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnV0ID0gQ29yZU1vdXNlQnV0dG9uLldIRUVMO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIC8vIGRvbnQgaGFuZGxlIG90aGVyIGV2ZW50IHR5cGVzIGJ5IGFjY2lkZW50XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBleGl0IGlmIHdlIGNhbm5vdCBkZXRlcm1pbmUgdmFsaWQgYnV0dG9uL2FjdGlvbiB2YWx1ZXNcbiAgICAgIC8vIGRvIG5vdGhpbmcgZm9yIGhpZ2hlciBidXR0b25zIHRoYW4gd2hlZWxcbiAgICAgIGlmIChhY3Rpb24gPT09IHVuZGVmaW5lZCB8fCBidXQgPT09IHVuZGVmaW5lZCB8fCBidXQgPiBDb3JlTW91c2VCdXR0b24uV0hFRUwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZi5jb3JlTW91c2VTZXJ2aWNlLnRyaWdnZXJNb3VzZUV2ZW50KHtcbiAgICAgICAgY29sOiBwb3MueCAtIDMzLCAvLyBGSVhNRTogd2h5IC0zMyBoZXJlP1xuICAgICAgICByb3c6IHBvcy55IC0gMzMsXG4gICAgICAgIGJ1dHRvbjogYnV0LFxuICAgICAgICBhY3Rpb24sXG4gICAgICAgIGN0cmw6IGV2LmN0cmxLZXksXG4gICAgICAgIGFsdDogZXYuYWx0S2V5LFxuICAgICAgICBzaGlmdDogZXYuc2hpZnRLZXlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV2ZW50IGxpc3RlbmVyIHN0YXRlIGhhbmRsaW5nLlxuICAgICAqIFdlIGxpc3RlbiB0byB0aGUgb25Qcm90b2NvbENoYW5nZSBldmVudCBvZiBDb3JlTW91c2VTZXJ2aWNlIGFuZCBwdXRcbiAgICAgKiByZXF1ZXN0ZWQgbGlzdGVuZXJzIGluIGByZXF1ZXN0ZWRFdmVudHNgLiBXaXRoIHRoaXMgdGhlIGxpc3RlbmVyc1xuICAgICAqIGhhdmUgYWxsIGJpdHMgdG8gZG8gdGhlIGV2ZW50IGxpc3RlbmVyIGp1Z2dsaW5nLlxuICAgICAqIE5vdGU6ICdtb3VzZWRvd24nIGN1cnJlbnRseSBpcyBcImFsd2F5cyBvblwiIGFuZCBub3QgbWFuYWdlZFxuICAgICAqIGJ5IG9uUHJvdG9jb2xDaGFuZ2UuXG4gICAgICovXG4gICAgY29uc3QgcmVxdWVzdGVkRXZlbnRzOiB7IFtrZXk6IHN0cmluZ106ICgoZXY6IEV2ZW50KSA9PiB2b2lkKSB8IG51bGwgfSA9IHtcbiAgICAgIG1vdXNldXA6IG51bGwsXG4gICAgICB3aGVlbDogbnVsbCxcbiAgICAgIG1vdXNlZHJhZzogbnVsbCxcbiAgICAgIG1vdXNlbW92ZTogbnVsbFxuICAgIH07XG4gICAgY29uc3QgZXZlbnRMaXN0ZW5lcnM6IHsgW2tleTogc3RyaW5nXTogKGV2OiBhbnkpID0+IHZvaWQgfCBib29sZWFuIH0gPSB7XG4gICAgICBtb3VzZXVwOiAoZXY6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgc2VuZEV2ZW50KGV2KTtcbiAgICAgICAgaWYgKCFldi5idXR0b25zKSB7XG4gICAgICAgICAgLy8gaWYgbm8gb3RoZXIgYnV0dG9uIGlzIGhlbGQgcmVtb3ZlIGdsb2JhbCBoYW5kbGVyc1xuICAgICAgICAgIHRoaXMuX2RvY3VtZW50IS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgcmVxdWVzdGVkRXZlbnRzLm1vdXNldXAhKTtcbiAgICAgICAgICBpZiAocmVxdWVzdGVkRXZlbnRzLm1vdXNlZHJhZykge1xuICAgICAgICAgICAgdGhpcy5fZG9jdW1lbnQhLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHJlcXVlc3RlZEV2ZW50cy5tb3VzZWRyYWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jYW5jZWwoZXYpO1xuICAgICAgfSxcbiAgICAgIHdoZWVsOiAoZXY6IFdoZWVsRXZlbnQpID0+IHtcbiAgICAgICAgc2VuZEV2ZW50KGV2KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FuY2VsKGV2LCB0cnVlKTtcbiAgICAgIH0sXG4gICAgICBtb3VzZWRyYWc6IChldjogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAvLyBkZWFsIG9ubHkgd2l0aCBtb3ZlIHdoaWxlIGEgYnV0dG9uIGlzIGhlbGRcbiAgICAgICAgaWYgKGV2LmJ1dHRvbnMpIHtcbiAgICAgICAgICBzZW5kRXZlbnQoZXYpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgbW91c2Vtb3ZlOiAoZXY6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgLy8gZGVhbCBvbmx5IHdpdGggbW92ZSB3aXRob3V0IGFueSBidXR0b25cbiAgICAgICAgaWYgKCFldi5idXR0b25zKSB7XG4gICAgICAgICAgc2VuZEV2ZW50KGV2KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5yZWdpc3Rlcih0aGlzLmNvcmVNb3VzZVNlcnZpY2Uub25Qcm90b2NvbENoYW5nZShldmVudHMgPT4ge1xuICAgICAgLy8gYXBwbHkgZ2xvYmFsIGNoYW5nZXMgb24gZXZlbnRzXG4gICAgICBpZiAoZXZlbnRzKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMubG9nTGV2ZWwgPT09ICdkZWJ1ZycpIHtcbiAgICAgICAgICB0aGlzLl9sb2dTZXJ2aWNlLmRlYnVnKCdCaW5kaW5nIHRvIG1vdXNlIGV2ZW50czonLCB0aGlzLmNvcmVNb3VzZVNlcnZpY2UuZXhwbGFpbkV2ZW50cyhldmVudHMpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVsZW1lbnQhLmNsYXNzTGlzdC5hZGQoJ2VuYWJsZS1tb3VzZS1ldmVudHMnKTtcbiAgICAgICAgdGhpcy5fc2VsZWN0aW9uU2VydmljZSEuZGlzYWJsZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fbG9nU2VydmljZS5kZWJ1ZygnVW5iaW5kaW5nIGZyb20gbW91c2UgZXZlbnRzLicpO1xuICAgICAgICB0aGlzLmVsZW1lbnQhLmNsYXNzTGlzdC5yZW1vdmUoJ2VuYWJsZS1tb3VzZS1ldmVudHMnKTtcbiAgICAgICAgdGhpcy5fc2VsZWN0aW9uU2VydmljZSEuZW5hYmxlKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGFkZC9yZW1vdmUgaGFuZGxlcnMgZnJvbSByZXF1ZXN0ZWRFdmVudHNcblxuICAgICAgaWYgKCEoZXZlbnRzICYgQ29yZU1vdXNlRXZlbnRUeXBlLk1PVkUpKSB7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHJlcXVlc3RlZEV2ZW50cy5tb3VzZW1vdmUhKTtcbiAgICAgICAgcmVxdWVzdGVkRXZlbnRzLm1vdXNlbW92ZSA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKCFyZXF1ZXN0ZWRFdmVudHMubW91c2Vtb3ZlKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGV2ZW50TGlzdGVuZXJzLm1vdXNlbW92ZSk7XG4gICAgICAgIHJlcXVlc3RlZEV2ZW50cy5tb3VzZW1vdmUgPSBldmVudExpc3RlbmVycy5tb3VzZW1vdmU7XG4gICAgICB9XG5cbiAgICAgIGlmICghKGV2ZW50cyAmIENvcmVNb3VzZUV2ZW50VHlwZS5XSEVFTCkpIHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2hlZWwnLCByZXF1ZXN0ZWRFdmVudHMud2hlZWwhKTtcbiAgICAgICAgcmVxdWVzdGVkRXZlbnRzLndoZWVsID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAoIXJlcXVlc3RlZEV2ZW50cy53aGVlbCkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIGV2ZW50TGlzdGVuZXJzLndoZWVsLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xuICAgICAgICByZXF1ZXN0ZWRFdmVudHMud2hlZWwgPSBldmVudExpc3RlbmVycy53aGVlbDtcbiAgICAgIH1cblxuICAgICAgaWYgKCEoZXZlbnRzICYgQ29yZU1vdXNlRXZlbnRUeXBlLlVQKSkge1xuICAgICAgICB0aGlzLl9kb2N1bWVudCEucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHJlcXVlc3RlZEV2ZW50cy5tb3VzZXVwISk7XG4gICAgICAgIHJlcXVlc3RlZEV2ZW50cy5tb3VzZXVwID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAoIXJlcXVlc3RlZEV2ZW50cy5tb3VzZXVwKSB7XG4gICAgICAgIHJlcXVlc3RlZEV2ZW50cy5tb3VzZXVwID0gZXZlbnRMaXN0ZW5lcnMubW91c2V1cDtcbiAgICAgIH1cblxuICAgICAgaWYgKCEoZXZlbnRzICYgQ29yZU1vdXNlRXZlbnRUeXBlLkRSQUcpKSB7XG4gICAgICAgIHRoaXMuX2RvY3VtZW50IS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCByZXF1ZXN0ZWRFdmVudHMubW91c2VkcmFnISk7XG4gICAgICAgIHJlcXVlc3RlZEV2ZW50cy5tb3VzZWRyYWcgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmICghcmVxdWVzdGVkRXZlbnRzLm1vdXNlZHJhZykge1xuICAgICAgICByZXF1ZXN0ZWRFdmVudHMubW91c2VkcmFnID0gZXZlbnRMaXN0ZW5lcnMubW91c2VkcmFnO1xuICAgICAgfVxuICAgIH0pKTtcbiAgICAvLyBmb3JjZSBpbml0aWFsIG9uUHJvdG9jb2xDaGFuZ2Ugc28gd2UgZG9udCBtaXNzIGVhcmx5IG1vdXNlIHJlcXVlc3RzXG4gICAgdGhpcy5jb3JlTW91c2VTZXJ2aWNlLmFjdGl2ZVByb3RvY29sID0gdGhpcy5jb3JlTW91c2VTZXJ2aWNlLmFjdGl2ZVByb3RvY29sO1xuXG4gICAgLyoqXG4gICAgICogXCJBbHdheXMgb25cIiBldmVudCBsaXN0ZW5lcnMuXG4gICAgICovXG4gICAgdGhpcy5yZWdpc3RlcihhZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIoZWwsICdtb3VzZWRvd24nLCAoZXY6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLmZvY3VzKCk7XG5cbiAgICAgIC8vIERvbid0IHNlbmQgdGhlIG1vdXNlIGJ1dHRvbiB0byB0aGUgcHR5IGlmIG1vdXNlIGV2ZW50cyBhcmUgZGlzYWJsZWQgb3JcbiAgICAgIC8vIGlmIHRoZSBzZWxlY3Rpb24gbWFuYWdlciBpcyBoYXZpbmcgc2VsZWN0aW9uIGZvcmNlZCAoaWUuIGEgbW9kaWZpZXIgaXNcbiAgICAgIC8vIGhlbGQpLlxuICAgICAgaWYgKCF0aGlzLmNvcmVNb3VzZVNlcnZpY2UuYXJlTW91c2VFdmVudHNBY3RpdmUgfHwgdGhpcy5fc2VsZWN0aW9uU2VydmljZSEuc2hvdWxkRm9yY2VTZWxlY3Rpb24oZXYpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2VuZEV2ZW50KGV2KTtcblxuICAgICAgLy8gUmVnaXN0ZXIgYWRkaXRpb25hbCBnbG9iYWwgaGFuZGxlcnMgd2hpY2ggc2hvdWxkIGtlZXAgcmVwb3J0aW5nIG91dHNpZGVcbiAgICAgIC8vIG9mIHRoZSB0ZXJtaW5hbCBlbGVtZW50LlxuICAgICAgLy8gTm90ZTogT3RoZXIgZW11bGF0b3JzIGFsc28gZG8gdGhpcyBmb3IgJ21vdXNlZG93bicgd2hpbGUgYSBidXR0b25cbiAgICAgIC8vIGlzIGhlbGQsIHdlIGN1cnJlbnRseSBsaW1pdCAnbW91c2Vkb3duJyB0byB0aGUgdGVybWluYWwgb25seS5cbiAgICAgIGlmIChyZXF1ZXN0ZWRFdmVudHMubW91c2V1cCkge1xuICAgICAgICB0aGlzLl9kb2N1bWVudCEuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHJlcXVlc3RlZEV2ZW50cy5tb3VzZXVwKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXF1ZXN0ZWRFdmVudHMubW91c2VkcmFnKSB7XG4gICAgICAgIHRoaXMuX2RvY3VtZW50IS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCByZXF1ZXN0ZWRFdmVudHMubW91c2VkcmFnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY2FuY2VsKGV2KTtcbiAgICB9KSk7XG5cbiAgICB0aGlzLnJlZ2lzdGVyKGFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcihlbCwgJ3doZWVsJywgKGV2OiBXaGVlbEV2ZW50KSA9PiB7XG4gICAgICAvLyBkbyBub3RoaW5nLCBpZiBhcHAgc2lkZSBoYW5kbGVzIHdoZWVsIGl0c2VsZlxuICAgICAgaWYgKHJlcXVlc3RlZEV2ZW50cy53aGVlbCkgcmV0dXJuO1xuXG4gICAgICBpZiAoIXRoaXMuYnVmZmVyLmhhc1Njcm9sbGJhY2spIHtcbiAgICAgICAgLy8gQ29udmVydCB3aGVlbCBldmVudHMgaW50byB1cC9kb3duIGV2ZW50cyB3aGVuIHRoZSBidWZmZXIgZG9lcyBub3QgaGF2ZSBzY3JvbGxiYWNrLCB0aGlzXG4gICAgICAgIC8vIGVuYWJsZXMgc2Nyb2xsaW5nIGluIGFwcHMgaG9zdGVkIGluIHRoZSBhbHQgYnVmZmVyIHN1Y2ggYXMgdmltIG9yIHRtdXguXG4gICAgICAgIGNvbnN0IGFtb3VudCA9IHRoaXMudmlld3BvcnQhLmdldExpbmVzU2Nyb2xsZWQoZXYpO1xuXG4gICAgICAgIC8vIERvIG5vdGhpbmcgaWYgdGhlcmUncyBubyB2ZXJ0aWNhbCBzY3JvbGxcbiAgICAgICAgaWYgKGFtb3VudCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbnN0cnVjdCBhbmQgc2VuZCBzZXF1ZW5jZXNcbiAgICAgICAgY29uc3Qgc2VxdWVuY2UgPSBDMC5FU0MgKyAodGhpcy5jb3JlU2VydmljZS5kZWNQcml2YXRlTW9kZXMuYXBwbGljYXRpb25DdXJzb3JLZXlzID8gJ08nIDogJ1snKSArIChldi5kZWx0YVkgPCAwID8gJ0EnIDogJ0InKTtcbiAgICAgICAgbGV0IGRhdGEgPSAnJztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNYXRoLmFicyhhbW91bnQpOyBpKyspIHtcbiAgICAgICAgICBkYXRhICs9IHNlcXVlbmNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29yZVNlcnZpY2UudHJpZ2dlckRhdGFFdmVudChkYXRhLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FuY2VsKGV2LCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgLy8gbm9ybWFsIHZpZXdwb3J0IHNjcm9sbGluZ1xuICAgICAgLy8gY29uZGl0aW9uYWxseSBzdG9wIGV2ZW50LCBpZiB0aGUgdmlld3BvcnQgc3RpbGwgaGFkIHJvd3MgdG8gc2Nyb2xsIHdpdGhpblxuICAgICAgaWYgKHRoaXMudmlld3BvcnQhLm9uV2hlZWwoZXYpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbmNlbChldik7XG4gICAgICB9XG4gICAgfSwgeyBwYXNzaXZlOiBmYWxzZSB9KSk7XG5cbiAgICB0aGlzLnJlZ2lzdGVyKGFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcihlbCwgJ3RvdWNoc3RhcnQnLCAoZXY6IFRvdWNoRXZlbnQpID0+IHtcbiAgICAgIGlmICh0aGlzLmNvcmVNb3VzZVNlcnZpY2UuYXJlTW91c2VFdmVudHNBY3RpdmUpIHJldHVybjtcbiAgICAgIHRoaXMudmlld3BvcnQhLm9uVG91Y2hTdGFydChldik7XG4gICAgICByZXR1cm4gdGhpcy5jYW5jZWwoZXYpO1xuICAgIH0sIHsgcGFzc2l2ZTogdHJ1ZSB9KSk7XG5cbiAgICB0aGlzLnJlZ2lzdGVyKGFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcihlbCwgJ3RvdWNobW92ZScsIChldjogVG91Y2hFdmVudCkgPT4ge1xuICAgICAgaWYgKHRoaXMuY29yZU1vdXNlU2VydmljZS5hcmVNb3VzZUV2ZW50c0FjdGl2ZSkgcmV0dXJuO1xuICAgICAgaWYgKCF0aGlzLnZpZXdwb3J0IS5vblRvdWNoTW92ZShldikpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FuY2VsKGV2KTtcbiAgICAgIH1cbiAgICB9LCB7IHBhc3NpdmU6IGZhbHNlIH0pKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFRlbGxzIHRoZSByZW5kZXJlciB0byByZWZyZXNoIHRlcm1pbmFsIGNvbnRlbnQgYmV0d2VlbiB0d28gcm93cyAoaW5jbHVzaXZlKSBhdCB0aGUgbmV4dFxuICAgKiBvcHBvcnR1bml0eS5cbiAgICogQHBhcmFtIHN0YXJ0IFRoZSByb3cgdG8gc3RhcnQgZnJvbSAoYmV0d2VlbiAwIGFuZCB0aGlzLnJvd3MgLSAxKS5cbiAgICogQHBhcmFtIGVuZCBUaGUgcm93IHRvIGVuZCBhdCAoYmV0d2VlbiBzdGFydCBhbmQgdGhpcy5yb3dzIC0gMSkuXG4gICAqL1xuICBwdWJsaWMgcmVmcmVzaChzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3JlbmRlclNlcnZpY2U/LnJlZnJlc2hSb3dzKHN0YXJ0LCBlbmQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFF1ZXVlcyBsaW5raWZpY2F0aW9uIGZvciB0aGUgc3BlY2lmaWVkIHJvd3MuXG4gICAqIEBwYXJhbSBzdGFydCBUaGUgcm93IHRvIHN0YXJ0IGZyb20gKGJldHdlZW4gMCBhbmQgdGhpcy5yb3dzIC0gMSkuXG4gICAqIEBwYXJhbSBlbmQgVGhlIHJvdyB0byBlbmQgYXQgKGJldHdlZW4gc3RhcnQgYW5kIHRoaXMucm93cyAtIDEpLlxuICAgKi9cbiAgcHJpdmF0ZSBfcXVldWVMaW5raWZpY2F0aW9uKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5saW5raWZpZXI/LmxpbmtpZnlSb3dzKHN0YXJ0LCBlbmQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgY3Vyc29yIHN0eWxlIGZvciBkaWZmZXJlbnQgc2VsZWN0aW9uIG1vZGVzXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlQ3Vyc29yU3R5bGUoZXY6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fc2VsZWN0aW9uU2VydmljZT8uc2hvdWxkQ29sdW1uU2VsZWN0KGV2KSkge1xuICAgICAgdGhpcy5lbGVtZW50IS5jbGFzc0xpc3QuYWRkKCdjb2x1bW4tc2VsZWN0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWxlbWVudCEuY2xhc3NMaXN0LnJlbW92ZSgnY29sdW1uLXNlbGVjdCcpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwbGF5IHRoZSBjdXJzb3IgZWxlbWVudFxuICAgKi9cbiAgcHJpdmF0ZSBfc2hvd0N1cnNvcigpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuY29yZVNlcnZpY2UuaXNDdXJzb3JJbml0aWFsaXplZCkge1xuICAgICAgdGhpcy5jb3JlU2VydmljZS5pc0N1cnNvckluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgIHRoaXMucmVmcmVzaCh0aGlzLmJ1ZmZlci55LCB0aGlzLmJ1ZmZlci55KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2Nyb2xsTGluZXMoZGlzcDogbnVtYmVyLCBzdXBwcmVzc1Njcm9sbEV2ZW50PzogYm9vbGVhbiwgc291cmNlID0gU2Nyb2xsU291cmNlLlRFUk1JTkFMKTogdm9pZCB7XG4gICAgc3VwZXIuc2Nyb2xsTGluZXMoZGlzcCwgc3VwcHJlc3NTY3JvbGxFdmVudCwgc291cmNlKTtcbiAgICB0aGlzLnJlZnJlc2goMCwgdGhpcy5yb3dzIC0gMSk7XG4gIH1cblxuICBwdWJsaWMgcGFzdGUoZGF0YTogc3RyaW5nKTogdm9pZCB7XG4gICAgcGFzdGUoZGF0YSwgdGhpcy50ZXh0YXJlYSEsIHRoaXMuY29yZVNlcnZpY2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dGFjaGVzIGEgY3VzdG9tIGtleSBldmVudCBoYW5kbGVyIHdoaWNoIGlzIHJ1biBiZWZvcmUga2V5cyBhcmUgcHJvY2Vzc2VkLFxuICAgKiBnaXZpbmcgY29uc3VtZXJzIG9mIHh0ZXJtLmpzIHVsdGltYXRlIGNvbnRyb2wgYXMgdG8gd2hhdCBrZXlzIHNob3VsZCBiZVxuICAgKiBwcm9jZXNzZWQgYnkgdGhlIHRlcm1pbmFsIGFuZCB3aGF0IGtleXMgc2hvdWxkIG5vdC5cbiAgICogQHBhcmFtIGN1c3RvbUtleUV2ZW50SGFuZGxlciBUaGUgY3VzdG9tIEtleWJvYXJkRXZlbnQgaGFuZGxlciB0byBhdHRhY2guXG4gICAqIFRoaXMgaXMgYSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgS2V5Ym9hcmRFdmVudCwgYWxsb3dpbmcgY29uc3VtZXJzIHRvIHN0b3BcbiAgICogcHJvcGFnYXRpb24gYW5kL29yIHByZXZlbnQgdGhlIGRlZmF1bHQgYWN0aW9uLiBUaGUgZnVuY3Rpb24gcmV0dXJucyB3aGV0aGVyXG4gICAqIHRoZSBldmVudCBzaG91bGQgYmUgcHJvY2Vzc2VkIGJ5IHh0ZXJtLmpzLlxuICAgKi9cbiAgcHVibGljIGF0dGFjaEN1c3RvbUtleUV2ZW50SGFuZGxlcihjdXN0b21LZXlFdmVudEhhbmRsZXI6IEN1c3RvbUtleUV2ZW50SGFuZGxlcik6IHZvaWQge1xuICAgIHRoaXMuX2N1c3RvbUtleUV2ZW50SGFuZGxlciA9IGN1c3RvbUtleUV2ZW50SGFuZGxlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYSBsaW5rIG1hdGNoZXIsIGFsbG93aW5nIGN1c3RvbSBsaW5rIHBhdHRlcm5zIHRvIGJlIG1hdGNoZWQgYW5kXG4gICAqIGhhbmRsZWQuXG4gICAqIEBwYXJhbSByZWdleCBUaGUgcmVndWxhciBleHByZXNzaW9uIHRvIHNlYXJjaCBmb3IsIHNwZWNpZmljYWxseVxuICAgKiB0aGlzIHNlYXJjaGVzIHRoZSB0ZXh0Q29udGVudCBvZiB0aGUgcm93cy4gWW91IHdpbGwgd2FudCB0byB1c2UgXFxzIHRvIG1hdGNoXG4gICAqIGEgc3BhY2UgJyAnIGNoYXJhY3RlciBmb3IgZXhhbXBsZS5cbiAgICogQHBhcmFtIGhhbmRsZXIgVGhlIGNhbGxiYWNrIHdoZW4gdGhlIGxpbmsgaXMgY2FsbGVkLlxuICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIGZvciB0aGUgbGluayBtYXRjaGVyLlxuICAgKiBAcmV0dXJuIFRoZSBJRCBvZiB0aGUgbmV3IG1hdGNoZXIsIHRoaXMgY2FuIGJlIHVzZWQgdG8gZGVyZWdpc3Rlci5cbiAgICovXG4gIHB1YmxpYyByZWdpc3RlckxpbmtNYXRjaGVyKHJlZ2V4OiBSZWdFeHAsIGhhbmRsZXI6IExpbmtNYXRjaGVySGFuZGxlciwgb3B0aW9ucz86IElMaW5rTWF0Y2hlck9wdGlvbnMpOiBudW1iZXIge1xuICAgIGNvbnN0IG1hdGNoZXJJZCA9IHRoaXMubGlua2lmaWVyLnJlZ2lzdGVyTGlua01hdGNoZXIocmVnZXgsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIHRoaXMucmVmcmVzaCgwLCB0aGlzLnJvd3MgLSAxKTtcbiAgICByZXR1cm4gbWF0Y2hlcklkO1xuICB9XG5cbiAgLyoqXG4gICAqIERlcmVnaXN0ZXJzIGEgbGluayBtYXRjaGVyIGlmIGl0IGhhcyBiZWVuIHJlZ2lzdGVyZWQuXG4gICAqIEBwYXJhbSBtYXRjaGVySWQgVGhlIGxpbmsgbWF0Y2hlcidzIElEIChyZXR1cm5lZCBhZnRlciByZWdpc3RlcilcbiAgICovXG4gIHB1YmxpYyBkZXJlZ2lzdGVyTGlua01hdGNoZXIobWF0Y2hlcklkOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5saW5raWZpZXIuZGVyZWdpc3RlckxpbmtNYXRjaGVyKG1hdGNoZXJJZCkpIHtcbiAgICAgIHRoaXMucmVmcmVzaCgwLCB0aGlzLnJvd3MgLSAxKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVnaXN0ZXJMaW5rUHJvdmlkZXIobGlua1Byb3ZpZGVyOiBJTGlua1Byb3ZpZGVyKTogSURpc3Bvc2FibGUge1xuICAgIHJldHVybiB0aGlzLmxpbmtpZmllcjIucmVnaXN0ZXJMaW5rUHJvdmlkZXIobGlua1Byb3ZpZGVyKTtcbiAgfVxuXG4gIHB1YmxpYyByZWdpc3RlckNoYXJhY3RlckpvaW5lcihoYW5kbGVyOiBDaGFyYWN0ZXJKb2luZXJIYW5kbGVyKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuX2NoYXJhY3RlckpvaW5lclNlcnZpY2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGVybWluYWwgbXVzdCBiZSBvcGVuZWQgZmlyc3QnKTtcbiAgICB9XG4gICAgY29uc3Qgam9pbmVySWQgPSB0aGlzLl9jaGFyYWN0ZXJKb2luZXJTZXJ2aWNlLnJlZ2lzdGVyKGhhbmRsZXIpO1xuICAgIHRoaXMucmVmcmVzaCgwLCB0aGlzLnJvd3MgLSAxKTtcbiAgICByZXR1cm4gam9pbmVySWQ7XG4gIH1cblxuICBwdWJsaWMgZGVyZWdpc3RlckNoYXJhY3RlckpvaW5lcihqb2luZXJJZDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9jaGFyYWN0ZXJKb2luZXJTZXJ2aWNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Rlcm1pbmFsIG11c3QgYmUgb3BlbmVkIGZpcnN0Jyk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9jaGFyYWN0ZXJKb2luZXJTZXJ2aWNlLmRlcmVnaXN0ZXIoam9pbmVySWQpKSB7XG4gICAgICB0aGlzLnJlZnJlc2goMCwgdGhpcy5yb3dzIC0gMSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldCBtYXJrZXJzKCk6IElNYXJrZXJbXSB7XG4gICAgcmV0dXJuIHRoaXMuYnVmZmVyLm1hcmtlcnM7XG4gIH1cblxuICBwdWJsaWMgYWRkTWFya2VyKGN1cnNvcllPZmZzZXQ6IG51bWJlcik6IElNYXJrZXIgfCB1bmRlZmluZWQge1xuICAgIC8vIERpc2FsbG93IG1hcmtlcnMgb24gdGhlIGFsdCBidWZmZXJcbiAgICBpZiAodGhpcy5idWZmZXIgIT09IHRoaXMuYnVmZmVycy5ub3JtYWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5idWZmZXIuYWRkTWFya2VyKHRoaXMuYnVmZmVyLnliYXNlICsgdGhpcy5idWZmZXIueSArIGN1cnNvcllPZmZzZXQpO1xuICB9XG5cbiAgcHVibGljIHJlZ2lzdGVyRGVjb3JhdGlvbihkZWNvcmF0aW9uT3B0aW9uczogSURlY29yYXRpb25PcHRpb25zKTogSURlY29yYXRpb24gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmRlY29yYXRpb25TZXJ2aWNlIS5yZWdpc3RlckRlY29yYXRpb24oZGVjb3JhdGlvbk9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgd2hldGhlciB0aGUgdGVybWluYWwgaGFzIGFuIGFjdGl2ZSBzZWxlY3Rpb24uXG4gICAqL1xuICBwdWJsaWMgaGFzU2VsZWN0aW9uKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb25TZXJ2aWNlID8gdGhpcy5fc2VsZWN0aW9uU2VydmljZS5oYXNTZWxlY3Rpb24gOiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWxlY3RzIHRleHQgd2l0aGluIHRoZSB0ZXJtaW5hbC5cbiAgICogQHBhcmFtIGNvbHVtbiBUaGUgY29sdW1uIHRoZSBzZWxlY3Rpb24gc3RhcnRzIGF0Li5cbiAgICogQHBhcmFtIHJvdyBUaGUgcm93IHRoZSBzZWxlY3Rpb24gc3RhcnRzIGF0LlxuICAgKiBAcGFyYW0gbGVuZ3RoIFRoZSBsZW5ndGggb2YgdGhlIHNlbGVjdGlvbi5cbiAgICovXG4gIHB1YmxpYyBzZWxlY3QoY29sdW1uOiBudW1iZXIsIHJvdzogbnVtYmVyLCBsZW5ndGg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3NlbGVjdGlvblNlcnZpY2UhLnNldFNlbGVjdGlvbihjb2x1bW4sIHJvdywgbGVuZ3RoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB0ZXJtaW5hbCdzIGN1cnJlbnQgc2VsZWN0aW9uLCB0aGlzIGlzIHVzZWZ1bCBmb3IgaW1wbGVtZW50aW5nIGNvcHlcbiAgICogYmVoYXZpb3Igb3V0c2lkZSBvZiB4dGVybS5qcy5cbiAgICovXG4gIHB1YmxpYyBnZXRTZWxlY3Rpb24oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uU2VydmljZSA/IHRoaXMuX3NlbGVjdGlvblNlcnZpY2Uuc2VsZWN0aW9uVGV4dCA6ICcnO1xuICB9XG5cbiAgcHVibGljIGdldFNlbGVjdGlvblBvc2l0aW9uKCk6IElTZWxlY3Rpb25Qb3NpdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKCF0aGlzLl9zZWxlY3Rpb25TZXJ2aWNlIHx8ICF0aGlzLl9zZWxlY3Rpb25TZXJ2aWNlLmhhc1NlbGVjdGlvbikge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnRDb2x1bW46IHRoaXMuX3NlbGVjdGlvblNlcnZpY2Uuc2VsZWN0aW9uU3RhcnQhWzBdLFxuICAgICAgc3RhcnRSb3c6IHRoaXMuX3NlbGVjdGlvblNlcnZpY2Uuc2VsZWN0aW9uU3RhcnQhWzFdLFxuICAgICAgZW5kQ29sdW1uOiB0aGlzLl9zZWxlY3Rpb25TZXJ2aWNlLnNlbGVjdGlvbkVuZCFbMF0sXG4gICAgICBlbmRSb3c6IHRoaXMuX3NlbGVjdGlvblNlcnZpY2Uuc2VsZWN0aW9uRW5kIVsxXVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIHRoZSBjdXJyZW50IHRlcm1pbmFsIHNlbGVjdGlvbi5cbiAgICovXG4gIHB1YmxpYyBjbGVhclNlbGVjdGlvbigpOiB2b2lkIHtcbiAgICB0aGlzLl9zZWxlY3Rpb25TZXJ2aWNlPy5jbGVhclNlbGVjdGlvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbGVjdHMgYWxsIHRleHQgd2l0aGluIHRoZSB0ZXJtaW5hbC5cbiAgICovXG4gIHB1YmxpYyBzZWxlY3RBbGwoKTogdm9pZCB7XG4gICAgdGhpcy5fc2VsZWN0aW9uU2VydmljZT8uc2VsZWN0QWxsKCk7XG4gIH1cblxuICBwdWJsaWMgc2VsZWN0TGluZXMoc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9zZWxlY3Rpb25TZXJ2aWNlPy5zZWxlY3RMaW5lcyhzdGFydCwgZW5kKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgYSBrZXlkb3duIGV2ZW50XG4gICAqIEtleSBSZXNvdXJjZXM6XG4gICAqICAgLSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0RPTS9LZXlib2FyZEV2ZW50XG4gICAqIEBwYXJhbSBldiBUaGUga2V5ZG93biBldmVudCB0byBiZSBoYW5kbGVkLlxuICAgKi9cbiAgcHJvdGVjdGVkIF9rZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogYm9vbGVhbiB8IHVuZGVmaW5lZCB7XG4gICAgdGhpcy5fa2V5RG93bkhhbmRsZWQgPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLl9jdXN0b21LZXlFdmVudEhhbmRsZXIgJiYgdGhpcy5fY3VzdG9tS2V5RXZlbnRIYW5kbGVyKGV2ZW50KSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX2NvbXBvc2l0aW9uSGVscGVyIS5rZXlkb3duKGV2ZW50KSkge1xuICAgICAgaWYgKHRoaXMuYnVmZmVyLnliYXNlICE9PSB0aGlzLmJ1ZmZlci55ZGlzcCkge1xuICAgICAgICB0aGlzLl9idWZmZXJTZXJ2aWNlLnNjcm9sbFRvQm90dG9tKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJ0RlYWQnIHx8IGV2ZW50LmtleSA9PT0gJ0FsdEdyYXBoJykge1xuICAgICAgdGhpcy5fdW5wcm9jZXNzZWREZWFkS2V5ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBldmFsdWF0ZUtleWJvYXJkRXZlbnQoZXZlbnQsIHRoaXMuY29yZVNlcnZpY2UuZGVjUHJpdmF0ZU1vZGVzLmFwcGxpY2F0aW9uQ3Vyc29yS2V5cywgdGhpcy5icm93c2VyLmlzTWFjLCB0aGlzLm9wdGlvbnMubWFjT3B0aW9uSXNNZXRhKTtcblxuICAgIHRoaXMudXBkYXRlQ3Vyc29yU3R5bGUoZXZlbnQpO1xuXG4gICAgaWYgKHJlc3VsdC50eXBlID09PSBLZXlib2FyZFJlc3VsdFR5cGUuUEFHRV9ET1dOIHx8IHJlc3VsdC50eXBlID09PSBLZXlib2FyZFJlc3VsdFR5cGUuUEFHRV9VUCkge1xuICAgICAgY29uc3Qgc2Nyb2xsQ291bnQgPSB0aGlzLnJvd3MgLSAxO1xuICAgICAgdGhpcy5zY3JvbGxMaW5lcyhyZXN1bHQudHlwZSA9PT0gS2V5Ym9hcmRSZXN1bHRUeXBlLlBBR0VfVVAgPyAtc2Nyb2xsQ291bnQgOiBzY3JvbGxDb3VudCk7XG4gICAgICByZXR1cm4gdGhpcy5jYW5jZWwoZXZlbnQsIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChyZXN1bHQudHlwZSA9PT0gS2V5Ym9hcmRSZXN1bHRUeXBlLlNFTEVDVF9BTEwpIHtcbiAgICAgIHRoaXMuc2VsZWN0QWxsKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2lzVGhpcmRMZXZlbFNoaWZ0KHRoaXMuYnJvd3NlciwgZXZlbnQpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAocmVzdWx0LmNhbmNlbCkge1xuICAgICAgLy8gVGhlIGV2ZW50IGlzIGNhbmNlbGVkIGF0IHRoZSBlbmQgYWxyZWFkeSwgaXMgdGhpcyBuZWNlc3Nhcnk/XG4gICAgICB0aGlzLmNhbmNlbChldmVudCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXN1bHQua2V5KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdW5wcm9jZXNzZWREZWFkS2V5KSB7XG4gICAgICB0aGlzLl91bnByb2Nlc3NlZERlYWRLZXkgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIElmIGN0cmwrYyBvciBlbnRlciBpcyBiZWluZyBzZW50LCBjbGVhciBvdXQgdGhlIHRleHRhcmVhLiBUaGlzIGlzIGRvbmUgc28gdGhhdCBzY3JlZW4gcmVhZGVyc1xuICAgIC8vIHdpbGwgYW5ub3VuY2UgZGVsZXRlZCBjaGFyYWN0ZXJzLiBUaGlzIHdpbGwgbm90IHdvcmsgMTAwJSBvZiB0aGUgdGltZSBidXQgaXQgc2hvdWxkIGNvdmVyXG4gICAgLy8gbW9zdCBzY2VuYXJpb3MuXG4gICAgaWYgKHJlc3VsdC5rZXkgPT09IEMwLkVUWCB8fCByZXN1bHQua2V5ID09PSBDMC5DUikge1xuICAgICAgdGhpcy50ZXh0YXJlYSEudmFsdWUgPSAnJztcbiAgICB9XG5cbiAgICB0aGlzLl9vbktleS5maXJlKHsga2V5OiByZXN1bHQua2V5LCBkb21FdmVudDogZXZlbnQgfSk7XG4gICAgdGhpcy5fc2hvd0N1cnNvcigpO1xuICAgIHRoaXMuY29yZVNlcnZpY2UudHJpZ2dlckRhdGFFdmVudChyZXN1bHQua2V5LCB0cnVlKTtcblxuICAgIC8vIENhbmNlbCBldmVudHMgd2hlbiBub3QgaW4gc2NyZWVuIHJlYWRlciBtb2RlIHNvIGV2ZW50cyBkb24ndCBnZXQgYnViYmxlZCB1cCBhbmQgaGFuZGxlZCBieVxuICAgIC8vIG90aGVyIGxpc3RlbmVycy4gV2hlbiBzY3JlZW4gcmVhZGVyIG1vZGUgaXMgZW5hYmxlZCwgdGhpcyBjb3VsZCBjYXVzZSBpc3N1ZXMgaWYgdGhlIGV2ZW50XG4gICAgLy8gaXMgaGFuZGxlZCBhdCBhIGhpZ2hlciBsZXZlbCwgdGhpcyBpcyBhIGNvbXByb21pc2UgaW4gb3JkZXIgdG8gZWNobyBrZXlzIHRvIHRoZSBzY3JlZW5cbiAgICAvLyByZWFkZXIuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMuc2NyZWVuUmVhZGVyTW9kZSkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FuY2VsKGV2ZW50LCB0cnVlKTtcbiAgICB9XG5cbiAgICB0aGlzLl9rZXlEb3duSGFuZGxlZCA9IHRydWU7XG4gIH1cblxuICBwcml2YXRlIF9pc1RoaXJkTGV2ZWxTaGlmdChicm93c2VyOiBJQnJvd3NlciwgZXY6IEtleWJvYXJkRXZlbnQpOiBib29sZWFuIHtcbiAgICBjb25zdCB0aGlyZExldmVsS2V5ID1cbiAgICAgIChicm93c2VyLmlzTWFjICYmICF0aGlzLm9wdGlvbnMubWFjT3B0aW9uSXNNZXRhICYmIGV2LmFsdEtleSAmJiAhZXYuY3RybEtleSAmJiAhZXYubWV0YUtleSkgfHxcbiAgICAgIChicm93c2VyLmlzV2luZG93cyAmJiBldi5hbHRLZXkgJiYgZXYuY3RybEtleSAmJiAhZXYubWV0YUtleSkgfHxcbiAgICAgIChicm93c2VyLmlzV2luZG93cyAmJiBldi5nZXRNb2RpZmllclN0YXRlKCdBbHRHcmFwaCcpKTtcblxuICAgIGlmIChldi50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgICByZXR1cm4gdGhpcmRMZXZlbEtleTtcbiAgICB9XG5cbiAgICAvLyBEb24ndCBpbnZva2UgZm9yIGFycm93cywgcGFnZURvd24sIGhvbWUsIGJhY2tzcGFjZSwgZXRjLiAob24gbm9uLWtleXByZXNzIGV2ZW50cylcbiAgICByZXR1cm4gdGhpcmRMZXZlbEtleSAmJiAoIWV2LmtleUNvZGUgfHwgZXYua2V5Q29kZSA+IDQ3KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfa2V5VXAoZXY6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fY3VzdG9tS2V5RXZlbnRIYW5kbGVyICYmIHRoaXMuX2N1c3RvbUtleUV2ZW50SGFuZGxlcihldikgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF3YXNNb2RpZmllcktleU9ubHlFdmVudChldikpIHtcbiAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZUN1cnNvclN0eWxlKGV2KTtcbiAgICB0aGlzLl9rZXlQcmVzc0hhbmRsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgYSBrZXlwcmVzcyBldmVudC5cbiAgICogS2V5IFJlc291cmNlczpcbiAgICogICAtIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvRE9NL0tleWJvYXJkRXZlbnRcbiAgICogQHBhcmFtIGV2IFRoZSBrZXlwcmVzcyBldmVudCB0byBiZSBoYW5kbGVkLlxuICAgKi9cbiAgcHJvdGVjdGVkIF9rZXlQcmVzcyhldjogS2V5Ym9hcmRFdmVudCk6IGJvb2xlYW4ge1xuICAgIGxldCBrZXk7XG5cbiAgICB0aGlzLl9rZXlQcmVzc0hhbmRsZWQgPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLl9rZXlEb3duSGFuZGxlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9jdXN0b21LZXlFdmVudEhhbmRsZXIgJiYgdGhpcy5fY3VzdG9tS2V5RXZlbnRIYW5kbGVyKGV2KSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLmNhbmNlbChldik7XG5cbiAgICBpZiAoZXYuY2hhckNvZGUpIHtcbiAgICAgIGtleSA9IGV2LmNoYXJDb2RlO1xuICAgIH0gZWxzZSBpZiAoZXYud2hpY2ggPT09IG51bGwgfHwgZXYud2hpY2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAga2V5ID0gZXYua2V5Q29kZTtcbiAgICB9IGVsc2UgaWYgKGV2LndoaWNoICE9PSAwICYmIGV2LmNoYXJDb2RlICE9PSAwKSB7XG4gICAgICBrZXkgPSBldi53aGljaDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICgha2V5IHx8IChcbiAgICAgIChldi5hbHRLZXkgfHwgZXYuY3RybEtleSB8fCBldi5tZXRhS2V5KSAmJiAhdGhpcy5faXNUaGlyZExldmVsU2hpZnQodGhpcy5icm93c2VyLCBldilcbiAgICApKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAga2V5ID0gU3RyaW5nLmZyb21DaGFyQ29kZShrZXkpO1xuXG4gICAgdGhpcy5fb25LZXkuZmlyZSh7IGtleSwgZG9tRXZlbnQ6IGV2IH0pO1xuICAgIHRoaXMuX3Nob3dDdXJzb3IoKTtcbiAgICB0aGlzLmNvcmVTZXJ2aWNlLnRyaWdnZXJEYXRhRXZlbnQoa2V5LCB0cnVlKTtcblxuICAgIHRoaXMuX2tleVByZXNzSGFuZGxlZCA9IHRydWU7XG5cbiAgICAvLyBUaGUga2V5IHdhcyBoYW5kbGVkIHNvIGNsZWFyIHRoZSBkZWFkIGtleSBzdGF0ZSwgb3RoZXJ3aXNlIGNlcnRhaW4ga2V5c3Ryb2tlcyBsaWtlIGFycm93XG4gICAgLy8ga2V5cyBjb3VsZCBiZSBpZ25vcmVkXG4gICAgdGhpcy5fdW5wcm9jZXNzZWREZWFkS2V5ID0gZmFsc2U7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgYW4gaW5wdXQgZXZlbnQuXG4gICAqIEtleSBSZXNvdXJjZXM6XG4gICAqICAgLSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSW5wdXRFdmVudFxuICAgKiBAcGFyYW0gZXYgVGhlIGlucHV0IGV2ZW50IHRvIGJlIGhhbmRsZWQuXG4gICAqL1xuICBwcm90ZWN0ZWQgX2lucHV0RXZlbnQoZXY6IElucHV0RXZlbnQpOiBib29sZWFuIHtcbiAgICAvLyBPbmx5IHN1cHBvcnQgZW1vamkgSU1FcyB3aGVuIHNjcmVlbiByZWFkZXIgbW9kZSBpcyBkaXNhYmxlZCBhcyB0aGUgZXZlbnQgbXVzdCBidWJibGUgdXAgdG9cbiAgICAvLyBzdXBwb3J0IHJlYWRpbmcgb3V0IGNoYXJhY3RlciBpbnB1dCB3aGljaCBjYW4gZG91YmxpbmcgdXAgaW5wdXQgY2hhcmFjdGVyc1xuICAgIGlmIChldi5kYXRhICYmIGV2LmlucHV0VHlwZSA9PT0gJ2luc2VydFRleHQnICYmICFldi5jb21wb3NlZCAmJiAhdGhpcy5vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLnNjcmVlblJlYWRlck1vZGUpIHtcbiAgICAgIGlmICh0aGlzLl9rZXlQcmVzc0hhbmRsZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUga2V5IHdhcyBoYW5kbGVkIHNvIGNsZWFyIHRoZSBkZWFkIGtleSBzdGF0ZSwgb3RoZXJ3aXNlIGNlcnRhaW4ga2V5c3Ryb2tlcyBsaWtlIGFycm93XG4gICAgICAvLyBrZXlzIGNvdWxkIGJlIGlnbm9yZWRcbiAgICAgIHRoaXMuX3VucHJvY2Vzc2VkRGVhZEtleSA9IGZhbHNlO1xuXG4gICAgICBjb25zdCB0ZXh0ID0gZXYuZGF0YTtcbiAgICAgIHRoaXMuY29yZVNlcnZpY2UudHJpZ2dlckRhdGFFdmVudCh0ZXh0LCB0cnVlKTtcblxuICAgICAgdGhpcy5jYW5jZWwoZXYpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJpbmcgdGhlIGJlbGwuXG4gICAqIE5vdGU6IFdlIGNvdWxkIGRvIHN3ZWV0IHRoaW5ncyB3aXRoIHdlYmF1ZGlvIGhlcmVcbiAgICovXG4gIHB1YmxpYyBiZWxsKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9zb3VuZEJlbGwoKSkge1xuICAgICAgdGhpcy5fc291bmRTZXJ2aWNlPy5wbGF5QmVsbFNvdW5kKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fb25CZWxsLmZpcmUoKTtcblxuICAgIC8vIGlmICh0aGlzLl92aXN1YWxCZWxsKCkpIHtcbiAgICAvLyAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCd2aXN1YWwtYmVsbC1hY3RpdmUnKTtcbiAgICAvLyAgIGNsZWFyVGltZW91dCh0aGlzLl92aXN1YWxCZWxsVGltZXIpO1xuICAgIC8vICAgdGhpcy5fdmlzdWFsQmVsbFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgIC8vICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgndmlzdWFsLWJlbGwtYWN0aXZlJyk7XG4gICAgLy8gICB9LCAyMDApO1xuICAgIC8vIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNpemVzIHRoZSB0ZXJtaW5hbC5cbiAgICpcbiAgICogQHBhcmFtIHggVGhlIG51bWJlciBvZiBjb2x1bW5zIHRvIHJlc2l6ZSB0by5cbiAgICogQHBhcmFtIHkgVGhlIG51bWJlciBvZiByb3dzIHRvIHJlc2l6ZSB0by5cbiAgICovXG4gIHB1YmxpYyByZXNpemUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoeCA9PT0gdGhpcy5jb2xzICYmIHkgPT09IHRoaXMucm93cykge1xuICAgICAgLy8gQ2hlY2sgaWYgd2Ugc3RpbGwgbmVlZCB0byBtZWFzdXJlIHRoZSBjaGFyIHNpemUgKGZpeGVzICM3ODUpLlxuICAgICAgaWYgKHRoaXMuX2NoYXJTaXplU2VydmljZSAmJiAhdGhpcy5fY2hhclNpemVTZXJ2aWNlLmhhc1ZhbGlkU2l6ZSkge1xuICAgICAgICB0aGlzLl9jaGFyU2l6ZVNlcnZpY2UubWVhc3VyZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN1cGVyLnJlc2l6ZSh4LCB5KTtcbiAgfVxuXG4gIHByaXZhdGUgX2FmdGVyUmVzaXplKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fY2hhclNpemVTZXJ2aWNlPy5tZWFzdXJlKCk7XG5cbiAgICAvLyBTeW5jIHRoZSBzY3JvbGwgYXJlYSB0byBtYWtlIHN1cmUgc2Nyb2xsIGV2ZW50cyBkb24ndCBmaXJlIGFuZCBzY3JvbGwgdGhlIHZpZXdwb3J0IHRvIGFuXG4gICAgLy8gaW52YWxpZCBsb2NhdGlvblxuICAgIHRoaXMudmlld3BvcnQ/LnN5bmNTY3JvbGxBcmVhKHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIHRoZSBlbnRpcmUgYnVmZmVyLCBtYWtpbmcgdGhlIHByb21wdCBsaW5lIHRoZSBuZXcgZmlyc3QgbGluZS5cbiAgICovXG4gIHB1YmxpYyBjbGVhcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5idWZmZXIueWJhc2UgPT09IDAgJiYgdGhpcy5idWZmZXIueSA9PT0gMCkge1xuICAgICAgLy8gRG9uJ3QgY2xlYXIgaWYgaXQncyBhbHJlYWR5IGNsZWFyXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuYnVmZmVyLmNsZWFyTWFya2VycygpO1xuICAgIHRoaXMuYnVmZmVyLmxpbmVzLnNldCgwLCB0aGlzLmJ1ZmZlci5saW5lcy5nZXQodGhpcy5idWZmZXIueWJhc2UgKyB0aGlzLmJ1ZmZlci55KSEpO1xuICAgIHRoaXMuYnVmZmVyLmxpbmVzLmxlbmd0aCA9IDE7XG4gICAgdGhpcy5idWZmZXIueWRpc3AgPSAwO1xuICAgIHRoaXMuYnVmZmVyLnliYXNlID0gMDtcbiAgICB0aGlzLmJ1ZmZlci55ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICB0aGlzLmJ1ZmZlci5saW5lcy5wdXNoKHRoaXMuYnVmZmVyLmdldEJsYW5rTGluZShERUZBVUxUX0FUVFJfREFUQSkpO1xuICAgIH1cbiAgICB0aGlzLnJlZnJlc2goMCwgdGhpcy5yb3dzIC0gMSk7XG4gICAgdGhpcy5fb25TY3JvbGwuZmlyZSh7IHBvc2l0aW9uOiB0aGlzLmJ1ZmZlci55ZGlzcCwgc291cmNlOiBTY3JvbGxTb3VyY2UuVEVSTUlOQUwgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVzZXQgdGVybWluYWwuXG4gICAqIE5vdGU6IENhbGxpbmcgdGhpcyBkaXJlY3RseSBmcm9tIEpTIGlzIHN5bmNocm9ub3VzIGJ1dCBkb2VzIG5vdCBjbGVhclxuICAgKiBpbnB1dCBidWZmZXJzIGFuZCBkb2VzIG5vdCByZXNldCB0aGUgcGFyc2VyLCB0aHVzIHRoZSB0ZXJtaW5hbCB3aWxsXG4gICAqIGNvbnRpbnVlIHRvIGFwcGx5IHBlbmRpbmcgaW5wdXQgZGF0YS5cbiAgICogSWYgeW91IG5lZWQgaW4gYmFuZCByZXNldCAoc3luY2hyb25vdXMgd2l0aCBpbnB1dCBkYXRhKSBjb25zaWRlclxuICAgKiB1c2luZyBERUNTVFIgKHNvZnQgcmVzZXQsIENTSSAhIHApIG9yIFJJUyBpbnN0ZWFkIChoYXJkIHJlc2V0LCBFU0MgYykuXG4gICAqL1xuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XG4gICAgLyoqXG4gICAgICogU2luY2UgX3NldHVwIGhhbmRsZXMgYSBmdWxsIHRlcm1pbmFsIGNyZWF0aW9uLCB3ZSBoYXZlIHRvIGNhcnJ5IGZvcndhcmRcbiAgICAgKiBhIGZldyB0aGluZ3MgdGhhdCBzaG91bGQgbm90IHJlc2V0LlxuICAgICAqL1xuICAgIHRoaXMub3B0aW9ucy5yb3dzID0gdGhpcy5yb3dzO1xuICAgIHRoaXMub3B0aW9ucy5jb2xzID0gdGhpcy5jb2xzO1xuICAgIGNvbnN0IGN1c3RvbUtleUV2ZW50SGFuZGxlciA9IHRoaXMuX2N1c3RvbUtleUV2ZW50SGFuZGxlcjtcblxuICAgIHRoaXMuX3NldHVwKCk7XG4gICAgc3VwZXIucmVzZXQoKTtcbiAgICB0aGlzLl9zZWxlY3Rpb25TZXJ2aWNlPy5yZXNldCgpO1xuXG4gICAgLy8gcmVhdHRhY2hcbiAgICB0aGlzLl9jdXN0b21LZXlFdmVudEhhbmRsZXIgPSBjdXN0b21LZXlFdmVudEhhbmRsZXI7XG5cbiAgICAvLyBkbyBhIGZ1bGwgc2NyZWVuIHJlZnJlc2hcbiAgICB0aGlzLnJlZnJlc2goMCwgdGhpcy5yb3dzIC0gMSk7XG4gICAgdGhpcy52aWV3cG9ydD8uc3luY1Njcm9sbEFyZWEoKTtcbiAgfVxuXG4gIHB1YmxpYyBjbGVhclRleHR1cmVBdGxhcygpOiB2b2lkIHtcbiAgICB0aGlzLl9yZW5kZXJTZXJ2aWNlPy5jbGVhclRleHR1cmVBdGxhcygpO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVwb3J0Rm9jdXMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZWxlbWVudD8uY2xhc3NMaXN0LmNvbnRhaW5zKCdmb2N1cycpKSB7XG4gICAgICB0aGlzLmNvcmVTZXJ2aWNlLnRyaWdnZXJEYXRhRXZlbnQoQzAuRVNDICsgJ1tJJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29yZVNlcnZpY2UudHJpZ2dlckRhdGFFdmVudChDMC5FU0MgKyAnW08nKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9yZXBvcnRXaW5kb3dzT3B0aW9ucyh0eXBlOiBXaW5kb3dzT3B0aW9uc1JlcG9ydFR5cGUpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX3JlbmRlclNlcnZpY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgV2luZG93c09wdGlvbnNSZXBvcnRUeXBlLkdFVF9XSU5fU0laRV9QSVhFTFM6XG4gICAgICAgIGNvbnN0IGNhbnZhc1dpZHRoID0gdGhpcy5fcmVuZGVyU2VydmljZS5kaW1lbnNpb25zLnNjYWxlZENhbnZhc1dpZHRoLnRvRml4ZWQoMCk7XG4gICAgICAgIGNvbnN0IGNhbnZhc0hlaWdodCA9IHRoaXMuX3JlbmRlclNlcnZpY2UuZGltZW5zaW9ucy5zY2FsZWRDYW52YXNIZWlnaHQudG9GaXhlZCgwKTtcbiAgICAgICAgdGhpcy5jb3JlU2VydmljZS50cmlnZ2VyRGF0YUV2ZW50KGAke0MwLkVTQ31bNDske2NhbnZhc0hlaWdodH07JHtjYW52YXNXaWR0aH10YCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBXaW5kb3dzT3B0aW9uc1JlcG9ydFR5cGUuR0VUX0NFTExfU0laRV9QSVhFTFM6XG4gICAgICAgIGNvbnN0IGNlbGxXaWR0aCA9IHRoaXMuX3JlbmRlclNlcnZpY2UuZGltZW5zaW9ucy5zY2FsZWRDZWxsV2lkdGgudG9GaXhlZCgwKTtcbiAgICAgICAgY29uc3QgY2VsbEhlaWdodCA9IHRoaXMuX3JlbmRlclNlcnZpY2UuZGltZW5zaW9ucy5zY2FsZWRDZWxsSGVpZ2h0LnRvRml4ZWQoMCk7XG4gICAgICAgIHRoaXMuY29yZVNlcnZpY2UudHJpZ2dlckRhdGFFdmVudChgJHtDMC5FU0N9WzY7JHtjZWxsSGVpZ2h0fTske2NlbGxXaWR0aH10YCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8vIFRPRE86IFJlbW92ZSBjYW5jZWwgZnVuY3Rpb24gYW5kIGNhbmNlbEV2ZW50cyBvcHRpb25cbiAgcHVibGljIGNhbmNlbChldjogRXZlbnQsIGZvcmNlPzogYm9vbGVhbik6IGJvb2xlYW4gfCB1bmRlZmluZWQge1xuICAgIGlmICghdGhpcy5vcHRpb25zLmNhbmNlbEV2ZW50cyAmJiAhZm9yY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIF92aXN1YWxCZWxsKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgICAvLyByZXR1cm4gdGhpcy5vcHRpb25zLmJlbGxTdHlsZSA9PT0gJ3Zpc3VhbCcgfHxcbiAgICAvLyAgICAgdGhpcy5vcHRpb25zLmJlbGxTdHlsZSA9PT0gJ2JvdGgnO1xuICB9XG5cbiAgcHJpdmF0ZSBfc291bmRCZWxsKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYmVsbFN0eWxlID09PSAnc291bmQnO1xuICAgIC8vIHJldHVybiB0aGlzLm9wdGlvbnMuYmVsbFN0eWxlID09PSAnc291bmQnIHx8XG4gICAgLy8gICAgIHRoaXMub3B0aW9ucy5iZWxsU3R5bGUgPT09ICdib3RoJztcbiAgfVxufVxuXG4vKipcbiAqIEhlbHBlcnNcbiAqL1xuXG5mdW5jdGlvbiB3YXNNb2RpZmllcktleU9ubHlFdmVudChldjogS2V5Ym9hcmRFdmVudCk6IGJvb2xlYW4ge1xuICByZXR1cm4gZXYua2V5Q29kZSA9PT0gMTYgfHwgLy8gU2hpZnRcbiAgICBldi5rZXlDb2RlID09PSAxNyB8fCAvLyBDdHJsXG4gICAgZXYua2V5Q29kZSA9PT0gMTg7IC8vIEFsdFxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5jb25zdCBSRU5ERVJfREVCT1VOQ0VfVEhSRVNIT0xEX01TID0gMTAwMDsgLy8gMSBTZWNvbmRcblxuaW1wb3J0IHsgSVJlbmRlckRlYm91bmNlciB9IGZyb20gJ2Jyb3dzZXIvVHlwZXMnO1xuXG4vKipcbiAqIERlYm91bmNlcyBjYWxscyB0byB1cGRhdGUgc2NyZWVuIHJlYWRlcnMgdG8gdXBkYXRlIGF0IG1vc3Qgb25jZSBjb25maWd1cmFibGUgaW50ZXJ2YWwgb2YgdGltZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFRpbWVCYXNlZERlYm91bmNlciBpbXBsZW1lbnRzIElSZW5kZXJEZWJvdW5jZXIge1xuICBwcml2YXRlIF9yb3dTdGFydDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIF9yb3dFbmQ6IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBfcm93Q291bnQ6IG51bWJlciB8IHVuZGVmaW5lZDtcblxuICAvLyBUaGUgbGFzdCBtb21lbnQgdGhhdCB0aGUgVGVybWluYWwgd2FzIHJlZnJlc2hlZCBhdFxuICBwcml2YXRlIF9sYXN0UmVmcmVzaE1zID0gMDtcbiAgLy8gV2hldGhlciBhIHRyYWlsaW5nIHJlZnJlc2ggc2hvdWxkIGJlIHRyaWdnZXJlZCBkdWUgdG8gYSByZWZyZXNoIHJlcXVlc3QgdGhhdCB3YXMgdGhyb3R0bGVkXG4gIHByaXZhdGUgX2FkZGl0aW9uYWxSZWZyZXNoUmVxdWVzdGVkID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBfcmVmcmVzaFRpbWVvdXRJRDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX3JlbmRlckNhbGxiYWNrOiAoc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpID0+IHZvaWQsXG4gICAgcHJpdmF0ZSByZWFkb25seSBfZGVib3VuY2VUaHJlc2hvbGRNUyA9IFJFTkRFUl9ERUJPVU5DRV9USFJFU0hPTERfTVNcbiAgKSB7XG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fcmVmcmVzaFRpbWVvdXRJRCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3JlZnJlc2hUaW1lb3V0SUQpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZWZyZXNoKHJvd1N0YXJ0OiBudW1iZXIgfCB1bmRlZmluZWQsIHJvd0VuZDogbnVtYmVyIHwgdW5kZWZpbmVkLCByb3dDb3VudDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fcm93Q291bnQgPSByb3dDb3VudDtcbiAgICAvLyBHZXQgdGhlIG1pbi9tYXggcm93IHN0YXJ0L2VuZCBmb3IgdGhlIGFyZyB2YWx1ZXNcbiAgICByb3dTdGFydCA9IHJvd1N0YXJ0ICE9PSB1bmRlZmluZWQgPyByb3dTdGFydCA6IDA7XG4gICAgcm93RW5kID0gcm93RW5kICE9PSB1bmRlZmluZWQgPyByb3dFbmQgOiB0aGlzLl9yb3dDb3VudCAtIDE7XG4gICAgLy8gU2V0IHRoZSBwcm9wZXJ0aWVzIHRvIHRoZSB1cGRhdGVkIHZhbHVlc1xuICAgIHRoaXMuX3Jvd1N0YXJ0ID0gdGhpcy5fcm93U3RhcnQgIT09IHVuZGVmaW5lZCA/IE1hdGgubWluKHRoaXMuX3Jvd1N0YXJ0LCByb3dTdGFydCkgOiByb3dTdGFydDtcbiAgICB0aGlzLl9yb3dFbmQgPSB0aGlzLl9yb3dFbmQgIT09IHVuZGVmaW5lZCA/IE1hdGgubWF4KHRoaXMuX3Jvd0VuZCwgcm93RW5kKSA6IHJvd0VuZDtcblxuICAgIC8vIE9ubHkgcmVmcmVzaCBpZiB0aGUgdGltZSBzaW5jZSBsYXN0IHJlZnJlc2ggaXMgYWJvdmUgYSB0aHJlc2hvbGQsIG90aGVyd2lzZSB3YWl0IGZvclxuICAgIC8vIGVub3VnaCB0aW1lIHRvIHBhc3MgYmVmb3JlIHJlZnJlc2hpbmcgYWdhaW4uXG4gICAgY29uc3QgcmVmcmVzaFJlcXVlc3RUaW1lOiBudW1iZXIgPSBEYXRlLm5vdygpO1xuICAgIGlmIChyZWZyZXNoUmVxdWVzdFRpbWUgLSB0aGlzLl9sYXN0UmVmcmVzaE1zID49IHRoaXMuX2RlYm91bmNlVGhyZXNob2xkTVMpIHtcbiAgICAgIC8vIEVub3VnaCB0aW1lIGhhcyBsYXBzZWQgc2luY2UgdGhlIGxhc3QgcmVmcmVzaDsgcmVmcmVzaCBpbW1lZGlhdGVseVxuICAgICAgdGhpcy5fbGFzdFJlZnJlc2hNcyA9IHJlZnJlc2hSZXF1ZXN0VGltZTtcbiAgICAgIHRoaXMuX2lubmVyUmVmcmVzaCgpO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMuX2FkZGl0aW9uYWxSZWZyZXNoUmVxdWVzdGVkKSB7XG4gICAgICAvLyBUaGlzIGlzIHRoZSBmaXJzdCBhZGRpdGlvbmFsIHJlcXVlc3QgdGhyb3R0bGVkOyBzZXQgdXAgdHJhaWxpbmcgcmVmcmVzaFxuICAgICAgY29uc3QgZWxhcHNlZCA9IHJlZnJlc2hSZXF1ZXN0VGltZSAtIHRoaXMuX2xhc3RSZWZyZXNoTXM7XG4gICAgICBjb25zdCB3YWl0UGVyaW9kQmVmb3JlVHJhaWxpbmdSZWZyZXNoID0gdGhpcy5fZGVib3VuY2VUaHJlc2hvbGRNUyAtIGVsYXBzZWQ7XG4gICAgICB0aGlzLl9hZGRpdGlvbmFsUmVmcmVzaFJlcXVlc3RlZCA9IHRydWU7XG5cbiAgICAgIHRoaXMuX3JlZnJlc2hUaW1lb3V0SUQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuX2xhc3RSZWZyZXNoTXMgPSBEYXRlLm5vdygpO1xuICAgICAgICB0aGlzLl9pbm5lclJlZnJlc2goKTtcbiAgICAgICAgdGhpcy5fYWRkaXRpb25hbFJlZnJlc2hSZXF1ZXN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcmVmcmVzaFRpbWVvdXRJRCA9IHVuZGVmaW5lZDsgLy8gTm8gbG9uZ2VyIG5lZWQgdG8gY2xlYXIgdGhlIHRpbWVvdXRcbiAgICAgIH0sIHdhaXRQZXJpb2RCZWZvcmVUcmFpbGluZ1JlZnJlc2gpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2lubmVyUmVmcmVzaCgpOiB2b2lkIHtcbiAgICAvLyBNYWtlIHN1cmUgdmFsdWVzIGFyZSBzZXRcbiAgICBpZiAodGhpcy5fcm93U3RhcnQgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl9yb3dFbmQgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl9yb3dDb3VudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ2xhbXAgdmFsdWVzXG4gICAgY29uc3Qgc3RhcnQgPSBNYXRoLm1heCh0aGlzLl9yb3dTdGFydCwgMCk7XG4gICAgY29uc3QgZW5kID0gTWF0aC5taW4odGhpcy5fcm93RW5kLCB0aGlzLl9yb3dDb3VudCAtIDEpO1xuXG4gICAgLy8gUmVzZXQgZGVib3VuY2VyICh0aGlzIGhhcHBlbnMgYmVmb3JlIHJlbmRlciBjYWxsYmFjayBhcyB0aGUgcmVuZGVyIGNvdWxkIHRyaWdnZXIgaXQgYWdhaW4pXG4gICAgdGhpcy5fcm93U3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fcm93RW5kID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gUnVuIHJlbmRlciBjYWxsYmFja1xuICAgIHRoaXMuX3JlbmRlckNhbGxiYWNrKHN0YXJ0LCBlbmQpO1xuICB9XG59XG5cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE2IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgRGlzcG9zYWJsZSB9IGZyb20gJ2NvbW1vbi9MaWZlY3ljbGUnO1xuaW1wb3J0IHsgYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyIH0gZnJvbSAnYnJvd3Nlci9MaWZlY3ljbGUnO1xuaW1wb3J0IHsgSUNvbG9yU2V0LCBJVmlld3BvcnQgfSBmcm9tICdicm93c2VyL1R5cGVzJztcbmltcG9ydCB7IElDaGFyU2l6ZVNlcnZpY2UsIElSZW5kZXJTZXJ2aWNlIH0gZnJvbSAnYnJvd3Nlci9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5pbXBvcnQgeyBJQnVmZmVyU2VydmljZSwgSU9wdGlvbnNTZXJ2aWNlIH0gZnJvbSAnY29tbW9uL3NlcnZpY2VzL1NlcnZpY2VzJztcbmltcG9ydCB7IElCdWZmZXIgfSBmcm9tICdjb21tb24vYnVmZmVyL1R5cGVzJztcbmltcG9ydCB7IElSZW5kZXJEaW1lbnNpb25zIH0gZnJvbSAnYnJvd3Nlci9yZW5kZXJlci9UeXBlcyc7XG5cbmNvbnN0IEZBTExCQUNLX1NDUk9MTF9CQVJfV0lEVEggPSAxNTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSB2aWV3cG9ydCBvZiBhIHRlcm1pbmFsLCB0aGUgdmlzaWJsZSBhcmVhIHdpdGhpbiB0aGUgbGFyZ2VyIGJ1ZmZlciBvZiBvdXRwdXQuXG4gKiBMb2dpYyBmb3IgdGhlIHZpcnR1YWwgc2Nyb2xsIGJhciBpcyBpbmNsdWRlZCBpbiB0aGlzIG9iamVjdC5cbiAqL1xuZXhwb3J0IGNsYXNzIFZpZXdwb3J0IGV4dGVuZHMgRGlzcG9zYWJsZSBpbXBsZW1lbnRzIElWaWV3cG9ydCB7XG4gIHB1YmxpYyBzY3JvbGxCYXJXaWR0aDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfY3VycmVudFJvd0hlaWdodDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfY3VycmVudFNjYWxlZENlbGxIZWlnaHQ6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgX2xhc3RSZWNvcmRlZEJ1ZmZlckxlbmd0aDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfbGFzdFJlY29yZGVkVmlld3BvcnRIZWlnaHQ6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgX2xhc3RSZWNvcmRlZEJ1ZmZlckhlaWdodDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfbGFzdFRvdWNoWTogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfbGFzdFNjcm9sbFRvcDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfbGFzdEhhZFNjcm9sbEJhcjogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF9hY3RpdmVCdWZmZXI6IElCdWZmZXI7XG4gIHByaXZhdGUgX3JlbmRlckRpbWVuc2lvbnM6IElSZW5kZXJEaW1lbnNpb25zO1xuXG4gIC8vIFN0b3JlcyBhIHBhcnRpYWwgbGluZSBhbW91bnQgd2hlbiBzY3JvbGxpbmcsIHRoaXMgaXMgdXNlZCB0byBrZWVwIHRyYWNrIG9mIGhvdyBtdWNoIG9mIGEgbGluZVxuICAvLyBpcyBzY3JvbGxlZCBzbyB3ZSBjYW4gXCJzY3JvbGxcIiBvdmVyIHBhcnRpYWwgbGluZXMgYW5kIGZlZWwgbmF0dXJhbCBvbiB0b3VjaHBhZHMuIFRoaXMgaXMgYVxuICAvLyBxdWljayBmaXggYW5kIGNvdWxkIGhhdmUgYSBtb3JlIHJvYnVzdCBzb2x1dGlvbiBpbiBwbGFjZSB0aGF0IHJlc2V0IHRoZSB2YWx1ZSB3aGVuIG5lZWRlZC5cbiAgcHJpdmF0ZSBfd2hlZWxQYXJ0aWFsU2Nyb2xsOiBudW1iZXIgPSAwO1xuXG4gIHByaXZhdGUgX3JlZnJlc2hBbmltYXRpb25GcmFtZTogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgX2lnbm9yZU5leHRTY3JvbGxFdmVudDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3Njcm9sbExpbmVzOiAoYW1vdW50OiBudW1iZXIpID0+IHZvaWQsXG4gICAgcHJpdmF0ZSByZWFkb25seSBfdmlld3BvcnRFbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9zY3JvbGxBcmVhOiBIVE1MRWxlbWVudCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9lbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICBASUJ1ZmZlclNlcnZpY2UgcHJpdmF0ZSByZWFkb25seSBfYnVmZmVyU2VydmljZTogSUJ1ZmZlclNlcnZpY2UsXG4gICAgQElPcHRpb25zU2VydmljZSBwcml2YXRlIHJlYWRvbmx5IF9vcHRpb25zU2VydmljZTogSU9wdGlvbnNTZXJ2aWNlLFxuICAgIEBJQ2hhclNpemVTZXJ2aWNlIHByaXZhdGUgcmVhZG9ubHkgX2NoYXJTaXplU2VydmljZTogSUNoYXJTaXplU2VydmljZSxcbiAgICBASVJlbmRlclNlcnZpY2UgcHJpdmF0ZSByZWFkb25seSBfcmVuZGVyU2VydmljZTogSVJlbmRlclNlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8vIE1lYXN1cmUgdGhlIHdpZHRoIG9mIHRoZSBzY3JvbGxiYXIuIElmIGl0IGlzIDAgd2UgY2FuIGFzc3VtZSBpdCdzIGFuIE9TWCBvdmVybGF5IHNjcm9sbGJhci5cbiAgICAvLyBVbmZvcnR1bmF0ZWx5IHRoZSBvdmVybGF5IHNjcm9sbGJhciB3b3VsZCBiZSBoaWRkZW4gdW5kZXJuZWF0aCB0aGUgc2NyZWVuIGVsZW1lbnQgaW4gdGhhdCBjYXNlLFxuICAgIC8vIHRoZXJlZm9yZSB3ZSBhY2NvdW50IGZvciBhIHN0YW5kYXJkIGFtb3VudCB0byBtYWtlIGl0IHZpc2libGVcbiAgICB0aGlzLnNjcm9sbEJhcldpZHRoID0gKHRoaXMuX3ZpZXdwb3J0RWxlbWVudC5vZmZzZXRXaWR0aCAtIHRoaXMuX3Njcm9sbEFyZWEub2Zmc2V0V2lkdGgpIHx8IEZBTExCQUNLX1NDUk9MTF9CQVJfV0lEVEg7XG4gICAgdGhpcy5fbGFzdEhhZFNjcm9sbEJhciA9IHRydWU7XG4gICAgdGhpcy5yZWdpc3RlcihhZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIodGhpcy5fdmlld3BvcnRFbGVtZW50LCAnc2Nyb2xsJywgdGhpcy5fb25TY3JvbGwuYmluZCh0aGlzKSkpO1xuXG4gICAgLy8gVHJhY2sgcHJvcGVydGllcyB1c2VkIGluIHBlcmZvcm1hbmNlIGNyaXRpY2FsIGNvZGUgbWFudWFsbHkgdG8gYXZvaWQgdXNpbmcgc2xvdyBnZXR0ZXJzXG4gICAgdGhpcy5fYWN0aXZlQnVmZmVyID0gdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXI7XG4gICAgdGhpcy5yZWdpc3Rlcih0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlcnMub25CdWZmZXJBY3RpdmF0ZShlID0+IHRoaXMuX2FjdGl2ZUJ1ZmZlciA9IGUuYWN0aXZlQnVmZmVyKSk7XG4gICAgdGhpcy5fcmVuZGVyRGltZW5zaW9ucyA9IHRoaXMuX3JlbmRlclNlcnZpY2UuZGltZW5zaW9ucztcbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuX3JlbmRlclNlcnZpY2Uub25EaW1lbnNpb25zQ2hhbmdlKGUgPT4gdGhpcy5fcmVuZGVyRGltZW5zaW9ucyA9IGUpKTtcblxuICAgIC8vIFBlcmZvcm0gdGhpcyBhc3luYyB0byBlbnN1cmUgdGhlIElDaGFyU2l6ZVNlcnZpY2UgaXMgcmVhZHkuXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnN5bmNTY3JvbGxBcmVhKCksIDApO1xuICB9XG5cbiAgcHVibGljIG9uVGhlbWVDaGFuZ2UoY29sb3JzOiBJQ29sb3JTZXQpOiB2b2lkIHtcbiAgICB0aGlzLl92aWV3cG9ydEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3JzLmJhY2tncm91bmQuY3NzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZnJlc2hlcyByb3cgaGVpZ2h0LCBzZXR0aW5nIGxpbmUtaGVpZ2h0LCB2aWV3cG9ydCBoZWlnaHQgYW5kIHNjcm9sbCBhcmVhIGhlaWdodCBpZlxuICAgKiBuZWNlc3NhcnkuXG4gICAqL1xuICBwcml2YXRlIF9yZWZyZXNoKGltbWVkaWF0ZTogYm9vbGVhbik6IHZvaWQge1xuICAgIGlmIChpbW1lZGlhdGUpIHtcbiAgICAgIHRoaXMuX2lubmVyUmVmcmVzaCgpO1xuICAgICAgaWYgKHRoaXMuX3JlZnJlc2hBbmltYXRpb25GcmFtZSAhPT0gbnVsbCkge1xuICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl9yZWZyZXNoQW5pbWF0aW9uRnJhbWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5fcmVmcmVzaEFuaW1hdGlvbkZyYW1lID09PSBudWxsKSB7XG4gICAgICB0aGlzLl9yZWZyZXNoQW5pbWF0aW9uRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5faW5uZXJSZWZyZXNoKCkpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2lubmVyUmVmcmVzaCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fY2hhclNpemVTZXJ2aWNlLmhlaWdodCA+IDApIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRSb3dIZWlnaHQgPSB0aGlzLl9yZW5kZXJTZXJ2aWNlLmRpbWVuc2lvbnMuc2NhbGVkQ2VsbEhlaWdodCAvIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgdGhpcy5fY3VycmVudFNjYWxlZENlbGxIZWlnaHQgPSB0aGlzLl9yZW5kZXJTZXJ2aWNlLmRpbWVuc2lvbnMuc2NhbGVkQ2VsbEhlaWdodDtcbiAgICAgIHRoaXMuX2xhc3RSZWNvcmRlZFZpZXdwb3J0SGVpZ2h0ID0gdGhpcy5fdmlld3BvcnRFbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICAgIGNvbnN0IG5ld0J1ZmZlckhlaWdodCA9IE1hdGgucm91bmQodGhpcy5fY3VycmVudFJvd0hlaWdodCAqIHRoaXMuX2xhc3RSZWNvcmRlZEJ1ZmZlckxlbmd0aCkgKyAodGhpcy5fbGFzdFJlY29yZGVkVmlld3BvcnRIZWlnaHQgLSB0aGlzLl9yZW5kZXJTZXJ2aWNlLmRpbWVuc2lvbnMuY2FudmFzSGVpZ2h0KTtcbiAgICAgIGlmICh0aGlzLl9sYXN0UmVjb3JkZWRCdWZmZXJIZWlnaHQgIT09IG5ld0J1ZmZlckhlaWdodCkge1xuICAgICAgICB0aGlzLl9sYXN0UmVjb3JkZWRCdWZmZXJIZWlnaHQgPSBuZXdCdWZmZXJIZWlnaHQ7XG4gICAgICAgIHRoaXMuX3Njcm9sbEFyZWEuc3R5bGUuaGVpZ2h0ID0gdGhpcy5fbGFzdFJlY29yZGVkQnVmZmVySGVpZ2h0ICsgJ3B4JztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTeW5jIHNjcm9sbFRvcFxuICAgIGNvbnN0IHNjcm9sbFRvcCA9IHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLnlkaXNwICogdGhpcy5fY3VycmVudFJvd0hlaWdodDtcbiAgICBpZiAodGhpcy5fdmlld3BvcnRFbGVtZW50LnNjcm9sbFRvcCAhPT0gc2Nyb2xsVG9wKSB7XG4gICAgICAvLyBJZ25vcmUgdGhlIG5leHQgc2Nyb2xsIGV2ZW50IHdoaWNoIHdpbGwgYmUgdHJpZ2dlcmVkIGJ5IHNldHRpbmcgdGhlIHNjcm9sbFRvcCBhcyB3ZSBkbyBub3RcbiAgICAgIC8vIHdhbnQgdGhpcyBldmVudCB0byBzY3JvbGwgdGhlIHRlcm1pbmFsXG4gICAgICB0aGlzLl9pZ25vcmVOZXh0U2Nyb2xsRXZlbnQgPSB0cnVlO1xuICAgICAgdGhpcy5fdmlld3BvcnRFbGVtZW50LnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgc2Nyb2xsIGJhciB3aWR0aFxuICAgIGlmICh0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLnNjcm9sbGJhY2sgPT09IDApIHtcbiAgICAgIHRoaXMuc2Nyb2xsQmFyV2lkdGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNjcm9sbEJhcldpZHRoID0gKHRoaXMuX3ZpZXdwb3J0RWxlbWVudC5vZmZzZXRXaWR0aCAtIHRoaXMuX3Njcm9sbEFyZWEub2Zmc2V0V2lkdGgpIHx8IEZBTExCQUNLX1NDUk9MTF9CQVJfV0lEVEg7XG4gICAgfVxuICAgIHRoaXMuX2xhc3RIYWRTY3JvbGxCYXIgPSB0aGlzLnNjcm9sbEJhcldpZHRoID4gMDtcblxuICAgIGNvbnN0IGVsZW1lbnRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuX2VsZW1lbnQpO1xuICAgIGNvbnN0IGVsZW1lbnRQYWRkaW5nID0gcGFyc2VJbnQoZWxlbWVudFN0eWxlLnBhZGRpbmdMZWZ0KSArIHBhcnNlSW50KGVsZW1lbnRTdHlsZS5wYWRkaW5nUmlnaHQpO1xuICAgIHRoaXMuX3ZpZXdwb3J0RWxlbWVudC5zdHlsZS53aWR0aCA9ICh0aGlzLl9yZW5kZXJTZXJ2aWNlLmRpbWVuc2lvbnMuYWN0dWFsQ2VsbFdpZHRoICogKHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scykgKyB0aGlzLnNjcm9sbEJhcldpZHRoICsgKHRoaXMuX2xhc3RIYWRTY3JvbGxCYXIgPyBlbGVtZW50UGFkZGluZyA6IDApKS50b1N0cmluZygpICsgJ3B4JztcbiAgICB0aGlzLl9yZWZyZXNoQW5pbWF0aW9uRnJhbWUgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgZGltZW5zaW9ucyBhbmQgc3luY2hyb25pemVzIHRoZSBzY3JvbGwgYXJlYSBpZiBuZWNlc3NhcnkuXG4gICAqL1xuICBwdWJsaWMgc3luY1Njcm9sbEFyZWEoaW1tZWRpYXRlOiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcbiAgICAvLyBJZiBidWZmZXIgaGVpZ2h0IGNoYW5nZWRcbiAgICBpZiAodGhpcy5fbGFzdFJlY29yZGVkQnVmZmVyTGVuZ3RoICE9PSB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlci5saW5lcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2xhc3RSZWNvcmRlZEJ1ZmZlckxlbmd0aCA9IHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLmxpbmVzLmxlbmd0aDtcbiAgICAgIHRoaXMuX3JlZnJlc2goaW1tZWRpYXRlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiB2aWV3cG9ydCBoZWlnaHQgY2hhbmdlZFxuICAgIGlmICh0aGlzLl9sYXN0UmVjb3JkZWRWaWV3cG9ydEhlaWdodCAhPT0gdGhpcy5fcmVuZGVyU2VydmljZS5kaW1lbnNpb25zLmNhbnZhc0hlaWdodCkge1xuICAgICAgdGhpcy5fcmVmcmVzaChpbW1lZGlhdGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBidWZmZXIgcG9zaXRpb24gZG9lc24ndCBtYXRjaCBsYXN0IHNjcm9sbCB0b3BcbiAgICBpZiAodGhpcy5fbGFzdFNjcm9sbFRvcCAhPT0gdGhpcy5fYWN0aXZlQnVmZmVyLnlkaXNwICogdGhpcy5fY3VycmVudFJvd0hlaWdodCkge1xuICAgICAgdGhpcy5fcmVmcmVzaChpbW1lZGlhdGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIHJvdyBoZWlnaHQgY2hhbmdlZFxuICAgIGlmICh0aGlzLl9yZW5kZXJEaW1lbnNpb25zLnNjYWxlZENlbGxIZWlnaHQgIT09IHRoaXMuX2N1cnJlbnRTY2FsZWRDZWxsSGVpZ2h0KSB7XG4gICAgICB0aGlzLl9yZWZyZXNoKGltbWVkaWF0ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIHNjcm9sbCBiYXIgdmlzaWJpbGl0eSBjaGFuZ2VkXG4gICAgaWYgKHRoaXMuX2xhc3RIYWRTY3JvbGxCYXIgIT09ICh0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLnNjcm9sbGJhY2sgPiAwKSkge1xuICAgICAgdGhpcy5fcmVmcmVzaChpbW1lZGlhdGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHNjcm9sbCBldmVudHMgb24gdGhlIHZpZXdwb3J0LCBjYWxjdWxhdGluZyB0aGUgbmV3IHZpZXdwb3J0IGFuZCByZXF1ZXN0aW5nIHRoZVxuICAgKiB0ZXJtaW5hbCB0byBzY3JvbGwgdG8gaXQuXG4gICAqIEBwYXJhbSBldiBUaGUgc2Nyb2xsIGV2ZW50LlxuICAgKi9cbiAgcHJpdmF0ZSBfb25TY3JvbGwoZXY6IEV2ZW50KTogdm9pZCB7XG4gICAgLy8gUmVjb3JkIGN1cnJlbnQgc2Nyb2xsIHRvcCBwb3NpdGlvblxuICAgIHRoaXMuX2xhc3RTY3JvbGxUb3AgPSB0aGlzLl92aWV3cG9ydEVsZW1lbnQuc2Nyb2xsVG9wO1xuXG4gICAgLy8gRG9uJ3QgYXR0ZW1wdCB0byBzY3JvbGwgaWYgdGhlIGVsZW1lbnQgaXMgbm90IHZpc2libGUsIG90aGVyd2lzZSBzY3JvbGxUb3Agd2lsbCBiZSBjb3JydXB0XG4gICAgLy8gd2hpY2ggY2F1c2VzIHRoZSB0ZXJtaW5hbCB0byBzY3JvbGwgdGhlIGJ1ZmZlciB0byB0aGUgdG9wXG4gICAgaWYgKCF0aGlzLl92aWV3cG9ydEVsZW1lbnQub2Zmc2V0UGFyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWdub3JlIHRoZSBldmVudCBpZiBpdCB3YXMgZmxhZ2dlZCB0byBpZ25vcmUgKHdoZW4gdGhlIHNvdXJjZSBvZiB0aGUgZXZlbnQgaXMgZnJvbSBWaWV3cG9ydClcbiAgICBpZiAodGhpcy5faWdub3JlTmV4dFNjcm9sbEV2ZW50KSB7XG4gICAgICB0aGlzLl9pZ25vcmVOZXh0U2Nyb2xsRXZlbnQgPSBmYWxzZTtcbiAgICAgIC8vIFN0aWxsIHRyaWdnZXIgdGhlIHNjcm9sbCBzbyBsaW5lcyBnZXQgcmVmcmVzaGVkXG4gICAgICB0aGlzLl9zY3JvbGxMaW5lcygwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBuZXdSb3cgPSBNYXRoLnJvdW5kKHRoaXMuX2xhc3RTY3JvbGxUb3AgLyB0aGlzLl9jdXJyZW50Um93SGVpZ2h0KTtcbiAgICBjb25zdCBkaWZmID0gbmV3Um93IC0gdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXIueWRpc3A7XG4gICAgdGhpcy5fc2Nyb2xsTGluZXMoZGlmZik7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBidWJibGluZyBvZiBzY3JvbGwgZXZlbnQgaW4gY2FzZSB0aGUgdmlld3BvcnQgaGFzIHJlYWNoZWQgdG9wIG9yIGJvdHRvbVxuICAgKiBAcGFyYW0gZXYgVGhlIHNjcm9sbCBldmVudC5cbiAgICogQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IHNjcm9sbGVkXG4gICAqL1xuICBwcml2YXRlIF9idWJibGVTY3JvbGwoZXY6IEV2ZW50LCBhbW91bnQ6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHNjcm9sbFBvc0Zyb21Ub3AgPSB0aGlzLl92aWV3cG9ydEVsZW1lbnQuc2Nyb2xsVG9wICsgdGhpcy5fbGFzdFJlY29yZGVkVmlld3BvcnRIZWlnaHQ7XG4gICAgaWYgKChhbW91bnQgPCAwICYmIHRoaXMuX3ZpZXdwb3J0RWxlbWVudC5zY3JvbGxUb3AgIT09IDApIHx8XG4gICAgICAoYW1vdW50ID4gMCAmJiBzY3JvbGxQb3NGcm9tVG9wIDwgdGhpcy5fbGFzdFJlY29yZGVkQnVmZmVySGVpZ2h0KSkge1xuICAgICAgaWYgKGV2LmNhbmNlbGFibGUpIHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBtb3VzZSB3aGVlbCBldmVudHMgYnkgYWRqdXN0aW5nIHRoZSB2aWV3cG9ydCdzIHNjcm9sbFRvcCBhbmQgZGVsZWdhdGluZyB0aGUgYWN0dWFsXG4gICAqIHNjcm9sbGluZyB0byBgb25TY3JvbGxgLCB0aGlzIGV2ZW50IG5lZWRzIHRvIGJlIGF0dGFjaGVkIG1hbnVhbGx5IGJ5IHRoZSBjb25zdW1lciBvZlxuICAgKiBgVmlld3BvcnRgLlxuICAgKiBAcGFyYW0gZXYgVGhlIG1vdXNlIHdoZWVsIGV2ZW50LlxuICAgKi9cbiAgcHVibGljIG9uV2hlZWwoZXY6IFdoZWVsRXZlbnQpOiBib29sZWFuIHtcbiAgICBjb25zdCBhbW91bnQgPSB0aGlzLl9nZXRQaXhlbHNTY3JvbGxlZChldik7XG4gICAgaWYgKGFtb3VudCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLl92aWV3cG9ydEVsZW1lbnQuc2Nyb2xsVG9wICs9IGFtb3VudDtcbiAgICByZXR1cm4gdGhpcy5fYnViYmxlU2Nyb2xsKGV2LCBhbW91bnQpO1xuICB9XG5cbiAgcHJpdmF0ZSBfZ2V0UGl4ZWxzU2Nyb2xsZWQoZXY6IFdoZWVsRXZlbnQpOiBudW1iZXIge1xuICAgIC8vIERvIG5vdGhpbmcgaWYgaXQncyBub3QgYSB2ZXJ0aWNhbCBzY3JvbGwgZXZlbnRcbiAgICBpZiAoZXYuZGVsdGFZID09PSAwIHx8IGV2LnNoaWZ0S2V5KSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvLyBGYWxsYmFjayB0byBXaGVlbEV2ZW50LkRPTV9ERUxUQV9QSVhFTFxuICAgIGxldCBhbW91bnQgPSB0aGlzLl9hcHBseVNjcm9sbE1vZGlmaWVyKGV2LmRlbHRhWSwgZXYpO1xuICAgIGlmIChldi5kZWx0YU1vZGUgPT09IFdoZWVsRXZlbnQuRE9NX0RFTFRBX0xJTkUpIHtcbiAgICAgIGFtb3VudCAqPSB0aGlzLl9jdXJyZW50Um93SGVpZ2h0O1xuICAgIH0gZWxzZSBpZiAoZXYuZGVsdGFNb2RlID09PSBXaGVlbEV2ZW50LkRPTV9ERUxUQV9QQUdFKSB7XG4gICAgICBhbW91bnQgKj0gdGhpcy5fY3VycmVudFJvd0hlaWdodCAqIHRoaXMuX2J1ZmZlclNlcnZpY2Uucm93cztcbiAgICB9XG4gICAgcmV0dXJuIGFtb3VudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgcGl4ZWxzIHNjcm9sbGVkIGJ5IHRoZSBtb3VzZSBldmVudCB0YWtpbmcgaW50byBhY2NvdW50IHdoYXQgdHlwZSBvZiBkZWx0YVxuICAgKiBpcyBiZWluZyB1c2VkLlxuICAgKiBAcGFyYW0gZXYgVGhlIG1vdXNlIHdoZWVsIGV2ZW50LlxuICAgKi9cbiAgcHVibGljIGdldExpbmVzU2Nyb2xsZWQoZXY6IFdoZWVsRXZlbnQpOiBudW1iZXIge1xuICAgIC8vIERvIG5vdGhpbmcgaWYgaXQncyBub3QgYSB2ZXJ0aWNhbCBzY3JvbGwgZXZlbnRcbiAgICBpZiAoZXYuZGVsdGFZID09PSAwIHx8IGV2LnNoaWZ0S2V5KSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvLyBGYWxsYmFjayB0byBXaGVlbEV2ZW50LkRPTV9ERUxUQV9MSU5FXG4gICAgbGV0IGFtb3VudCA9IHRoaXMuX2FwcGx5U2Nyb2xsTW9kaWZpZXIoZXYuZGVsdGFZLCBldik7XG4gICAgaWYgKGV2LmRlbHRhTW9kZSA9PT0gV2hlZWxFdmVudC5ET01fREVMVEFfUElYRUwpIHtcbiAgICAgIGFtb3VudCAvPSB0aGlzLl9jdXJyZW50Um93SGVpZ2h0ICsgMC4wOyAvLyBQcmV2ZW50IGludGVnZXIgZGl2aXNpb25cbiAgICAgIHRoaXMuX3doZWVsUGFydGlhbFNjcm9sbCArPSBhbW91bnQ7XG4gICAgICBhbW91bnQgPSBNYXRoLmZsb29yKE1hdGguYWJzKHRoaXMuX3doZWVsUGFydGlhbFNjcm9sbCkpICogKHRoaXMuX3doZWVsUGFydGlhbFNjcm9sbCA+IDAgPyAxIDogLTEpO1xuICAgICAgdGhpcy5fd2hlZWxQYXJ0aWFsU2Nyb2xsICU9IDE7XG4gICAgfSBlbHNlIGlmIChldi5kZWx0YU1vZGUgPT09IFdoZWVsRXZlbnQuRE9NX0RFTFRBX1BBR0UpIHtcbiAgICAgIGFtb3VudCAqPSB0aGlzLl9idWZmZXJTZXJ2aWNlLnJvd3M7XG4gICAgfVxuICAgIHJldHVybiBhbW91bnQ7XG4gIH1cblxuICBwcml2YXRlIF9hcHBseVNjcm9sbE1vZGlmaWVyKGFtb3VudDogbnVtYmVyLCBldjogV2hlZWxFdmVudCk6IG51bWJlciB7XG4gICAgY29uc3QgbW9kaWZpZXIgPSB0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLmZhc3RTY3JvbGxNb2RpZmllcjtcbiAgICAvLyBNdWx0aXBseSB0aGUgc2Nyb2xsIHNwZWVkIHdoZW4gdGhlIG1vZGlmaWVyIGlzIGRvd25cbiAgICBpZiAoKG1vZGlmaWVyID09PSAnYWx0JyAmJiBldi5hbHRLZXkpIHx8XG4gICAgICAobW9kaWZpZXIgPT09ICdjdHJsJyAmJiBldi5jdHJsS2V5KSB8fFxuICAgICAgKG1vZGlmaWVyID09PSAnc2hpZnQnICYmIGV2LnNoaWZ0S2V5KSkge1xuICAgICAgcmV0dXJuIGFtb3VudCAqIHRoaXMuX29wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMuZmFzdFNjcm9sbFNlbnNpdGl2aXR5ICogdGhpcy5fb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy5zY3JvbGxTZW5zaXRpdml0eTtcbiAgICB9XG5cbiAgICByZXR1cm4gYW1vdW50ICogdGhpcy5fb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy5zY3JvbGxTZW5zaXRpdml0eTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSB0b3VjaHN0YXJ0IGV2ZW50LCByZWNvcmRpbmcgdGhlIHRvdWNoIG9jY3VycmVkLlxuICAgKiBAcGFyYW0gZXYgVGhlIHRvdWNoIGV2ZW50LlxuICAgKi9cbiAgcHVibGljIG9uVG91Y2hTdGFydChldjogVG91Y2hFdmVudCk6IHZvaWQge1xuICAgIHRoaXMuX2xhc3RUb3VjaFkgPSBldi50b3VjaGVzWzBdLnBhZ2VZO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgdGhlIHRvdWNobW92ZSBldmVudCwgc2Nyb2xsaW5nIHRoZSB2aWV3cG9ydCBpZiB0aGUgcG9zaXRpb24gc2hpZnRlZC5cbiAgICogQHBhcmFtIGV2IFRoZSB0b3VjaCBldmVudC5cbiAgICovXG4gIHB1YmxpYyBvblRvdWNoTW92ZShldjogVG91Y2hFdmVudCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGRlbHRhWSA9IHRoaXMuX2xhc3RUb3VjaFkgLSBldi50b3VjaGVzWzBdLnBhZ2VZO1xuICAgIHRoaXMuX2xhc3RUb3VjaFkgPSBldi50b3VjaGVzWzBdLnBhZ2VZO1xuICAgIGlmIChkZWx0YVkgPT09IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5fdmlld3BvcnRFbGVtZW50LnNjcm9sbFRvcCArPSBkZWx0YVk7XG4gICAgcmV0dXJuIHRoaXMuX2J1YmJsZVNjcm9sbChldiwgZGVsdGFZKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJUmVuZGVyU2VydmljZSB9IGZyb20gJ2Jyb3dzZXIvc2VydmljZXMvU2VydmljZXMnO1xuaW1wb3J0IHsgSUJ1ZmZlclNlcnZpY2UsIElDb3JlU2VydmljZSwgSU9wdGlvbnNTZXJ2aWNlIH0gZnJvbSAnY29tbW9uL3NlcnZpY2VzL1NlcnZpY2VzJztcblxuaW50ZXJmYWNlIElQb3NpdGlvbiB7XG4gIHN0YXJ0OiBudW1iZXI7XG4gIGVuZDogbnVtYmVyO1xufVxuXG4vKipcbiAqIEVuY2Fwc3VsYXRlcyB0aGUgbG9naWMgZm9yIGhhbmRsaW5nIGNvbXBvc2l0aW9uc3RhcnQsIGNvbXBvc2l0aW9udXBkYXRlIGFuZCBjb21wb3NpdGlvbmVuZFxuICogZXZlbnRzLCBkaXNwbGF5aW5nIHRoZSBpbi1wcm9ncmVzcyBjb21wb3NpdGlvbiB0byB0aGUgVUkgYW5kIGZvcndhcmRpbmcgdGhlIGZpbmFsIGNvbXBvc2l0aW9uXG4gKiB0byB0aGUgaGFuZGxlci5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbXBvc2l0aW9uSGVscGVyIHtcbiAgLyoqXG4gICAqIFdoZXRoZXIgaW5wdXQgY29tcG9zaXRpb24gaXMgY3VycmVudGx5IGhhcHBlbmluZywgZWcuIHZpYSBhIG1vYmlsZSBrZXlib2FyZCwgc3BlZWNoIGlucHV0IG9yXG4gICAqIElNRS4gVGhpcyB2YXJpYWJsZSBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGNvbXBvc2l0aW9uVGV4dCBzaG91bGQgYmUgZGlzcGxheWVkIG9uIHRoZSBVSS5cbiAgICovXG4gIHByaXZhdGUgX2lzQ29tcG9zaW5nOiBib29sZWFuO1xuICBwdWJsaWMgZ2V0IGlzQ29tcG9zaW5nKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5faXNDb21wb3Npbmc7IH1cblxuICAvKipcbiAgICogVGhlIHBvc2l0aW9uIHdpdGhpbiB0aGUgaW5wdXQgdGV4dGFyZWEncyB2YWx1ZSBvZiB0aGUgY3VycmVudCBjb21wb3NpdGlvbi5cbiAgICovXG4gIHByaXZhdGUgX2NvbXBvc2l0aW9uUG9zaXRpb246IElQb3NpdGlvbjtcblxuICAvKipcbiAgICogV2hldGhlciBhIGNvbXBvc2l0aW9uIGlzIGluIHRoZSBwcm9jZXNzIG9mIGJlaW5nIHNlbnQsIHNldHRpbmcgdGhpcyB0byBmYWxzZSB3aWxsIGNhbmNlbCBhbnlcbiAgICogaW4tcHJvZ3Jlc3MgY29tcG9zaXRpb24uXG4gICAqL1xuICBwcml2YXRlIF9pc1NlbmRpbmdDb21wb3NpdGlvbjogYm9vbGVhbjtcblxuICAvKipcbiAgICogRGF0YSBhbHJlYWR5IHNlbnQgZHVlIHRvIGtleWRvd24gZXZlbnQuXG4gICAqL1xuICBwcml2YXRlIF9kYXRhQWxyZWFkeVNlbnQ6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IF90ZXh0YXJlYTogSFRNTFRleHRBcmVhRWxlbWVudCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9jb21wb3NpdGlvblZpZXc6IEhUTUxFbGVtZW50LFxuICAgIEBJQnVmZmVyU2VydmljZSBwcml2YXRlIHJlYWRvbmx5IF9idWZmZXJTZXJ2aWNlOiBJQnVmZmVyU2VydmljZSxcbiAgICBASU9wdGlvbnNTZXJ2aWNlIHByaXZhdGUgcmVhZG9ubHkgX29wdGlvbnNTZXJ2aWNlOiBJT3B0aW9uc1NlcnZpY2UsXG4gICAgQElDb3JlU2VydmljZSBwcml2YXRlIHJlYWRvbmx5IF9jb3JlU2VydmljZTogSUNvcmVTZXJ2aWNlLFxuICAgIEBJUmVuZGVyU2VydmljZSBwcml2YXRlIHJlYWRvbmx5IF9yZW5kZXJTZXJ2aWNlOiBJUmVuZGVyU2VydmljZVxuICApIHtcbiAgICB0aGlzLl9pc0NvbXBvc2luZyA9IGZhbHNlO1xuICAgIHRoaXMuX2lzU2VuZGluZ0NvbXBvc2l0aW9uID0gZmFsc2U7XG4gICAgdGhpcy5fY29tcG9zaXRpb25Qb3NpdGlvbiA9IHsgc3RhcnQ6IDAsIGVuZDogMCB9O1xuICAgIHRoaXMuX2RhdGFBbHJlYWR5U2VudCA9ICcnO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgdGhlIGNvbXBvc2l0aW9uc3RhcnQgZXZlbnQsIGFjdGl2YXRpbmcgdGhlIGNvbXBvc2l0aW9uIHZpZXcuXG4gICAqL1xuICBwdWJsaWMgY29tcG9zaXRpb25zdGFydCgpOiB2b2lkIHtcbiAgICB0aGlzLl9pc0NvbXBvc2luZyA9IHRydWU7XG4gICAgdGhpcy5fY29tcG9zaXRpb25Qb3NpdGlvbi5zdGFydCA9IHRoaXMuX3RleHRhcmVhLnZhbHVlLmxlbmd0aDtcbiAgICB0aGlzLl9jb21wb3NpdGlvblZpZXcudGV4dENvbnRlbnQgPSAnJztcbiAgICB0aGlzLl9kYXRhQWxyZWFkeVNlbnQgPSAnJztcbiAgICB0aGlzLl9jb21wb3NpdGlvblZpZXcuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyB0aGUgY29tcG9zaXRpb251cGRhdGUgZXZlbnQsIHVwZGF0aW5nIHRoZSBjb21wb3NpdGlvbiB2aWV3LlxuICAgKiBAcGFyYW0gZXYgVGhlIGV2ZW50LlxuICAgKi9cbiAgcHVibGljIGNvbXBvc2l0aW9udXBkYXRlKGV2OiBQaWNrPENvbXBvc2l0aW9uRXZlbnQsICdkYXRhJz4pOiB2b2lkIHtcbiAgICB0aGlzLl9jb21wb3NpdGlvblZpZXcudGV4dENvbnRlbnQgPSBldi5kYXRhO1xuICAgIHRoaXMudXBkYXRlQ29tcG9zaXRpb25FbGVtZW50cygpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5fY29tcG9zaXRpb25Qb3NpdGlvbi5lbmQgPSB0aGlzLl90ZXh0YXJlYS52YWx1ZS5sZW5ndGg7XG4gICAgfSwgMCk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyB0aGUgY29tcG9zaXRpb25lbmQgZXZlbnQsIGhpZGluZyB0aGUgY29tcG9zaXRpb24gdmlldyBhbmQgc2VuZGluZyB0aGUgY29tcG9zaXRpb24gdG9cbiAgICogdGhlIGhhbmRsZXIuXG4gICAqL1xuICBwdWJsaWMgY29tcG9zaXRpb25lbmQoKTogdm9pZCB7XG4gICAgdGhpcy5fZmluYWxpemVDb21wb3NpdGlvbih0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSBrZXlkb3duIGV2ZW50LCByb3V0aW5nIGFueSBuZWNlc3NhcnkgZXZlbnRzIHRvIHRoZSBDb21wb3NpdGlvbkhlbHBlciBmdW5jdGlvbnMuXG4gICAqIEBwYXJhbSBldiBUaGUga2V5ZG93biBldmVudC5cbiAgICogQHJldHVybiBXaGV0aGVyIHRoZSBUZXJtaW5hbCBzaG91bGQgY29udGludWUgcHJvY2Vzc2luZyB0aGUga2V5ZG93biBldmVudC5cbiAgICovXG4gIHB1YmxpYyBrZXlkb3duKGV2OiBLZXlib2FyZEV2ZW50KTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuX2lzQ29tcG9zaW5nIHx8IHRoaXMuX2lzU2VuZGluZ0NvbXBvc2l0aW9uKSB7XG4gICAgICBpZiAoZXYua2V5Q29kZSA9PT0gMjI5KSB7XG4gICAgICAgIC8vIENvbnRpbnVlIGNvbXBvc2luZyBpZiB0aGUga2V5Q29kZSBpcyB0aGUgXCJjb21wb3NpdGlvbiBjaGFyYWN0ZXJcIlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZXYua2V5Q29kZSA9PT0gMTYgfHwgZXYua2V5Q29kZSA9PT0gMTcgfHwgZXYua2V5Q29kZSA9PT0gMTgpIHtcbiAgICAgICAgLy8gQ29udGludWUgY29tcG9zaW5nIGlmIHRoZSBrZXlDb2RlIGlzIGEgbW9kaWZpZXIga2V5XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEZpbmlzaCBjb21wb3NpdGlvbiBpbW1lZGlhdGVseS4gVGhpcyBpcyBtYWlubHkgaGVyZSBmb3IgdGhlIGNhc2Ugd2hlcmUgZW50ZXIgaXNcbiAgICAgIC8vIHByZXNzZWQgYW5kIHRoZSBoYW5kbGVyIG5lZWRzIHRvIGJlIHRyaWdnZXJlZCBiZWZvcmUgdGhlIGNvbW1hbmQgaXMgZXhlY3V0ZWQuXG4gICAgICB0aGlzLl9maW5hbGl6ZUNvbXBvc2l0aW9uKGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAoZXYua2V5Q29kZSA9PT0gMjI5KSB7XG4gICAgICAvLyBJZiB0aGUgXCJjb21wb3NpdGlvbiBjaGFyYWN0ZXJcIiBpcyB1c2VkIGJ1dCBnZXRzIHRvIHRoaXMgcG9pbnQgaXQgbWVhbnMgYSBub24tY29tcG9zaXRpb25cbiAgICAgIC8vIGNoYXJhY3RlciAoZWcuIG51bWJlcnMgYW5kIHB1bmN0dWF0aW9uKSB3YXMgcHJlc3NlZCB3aGVuIHRoZSBJTUUgd2FzIGFjdGl2ZS5cbiAgICAgIHRoaXMuX2hhbmRsZUFueVRleHRhcmVhQ2hhbmdlcygpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmFsaXplcyB0aGUgY29tcG9zaXRpb24sIHJlc3VtaW5nIHJlZ3VsYXIgaW5wdXQgYWN0aW9ucy4gVGhpcyBpcyBjYWxsZWQgd2hlbiBhIGNvbXBvc2l0aW9uXG4gICAqIGlzIGVuZGluZy5cbiAgICogQHBhcmFtIHdhaXRGb3JQcm9wYWdhdGlvbiBXaGV0aGVyIHRvIHdhaXQgZm9yIGV2ZW50cyB0byBwcm9wYWdhdGUgYmVmb3JlIHNlbmRpbmdcbiAgICogICB0aGUgaW5wdXQuIFRoaXMgc2hvdWxkIGJlIGZhbHNlIGlmIGEgbm9uLWNvbXBvc2l0aW9uIGtleXN0cm9rZSBpcyBlbnRlcmVkIGJlZm9yZSB0aGVcbiAgICogICBjb21wb3NpdGlvbmVuZCBldmVudCBpcyB0cmlnZ2VyZWQsIHN1Y2ggYXMgZW50ZXIsIHNvIHRoYXQgdGhlIGNvbXBvc2l0aW9uIGlzIHNlbnQgYmVmb3JlXG4gICAqICAgdGhlIGNvbW1hbmQgaXMgZXhlY3V0ZWQuXG4gICAqL1xuICBwcml2YXRlIF9maW5hbGl6ZUNvbXBvc2l0aW9uKHdhaXRGb3JQcm9wYWdhdGlvbjogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX2NvbXBvc2l0aW9uVmlldy5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICB0aGlzLl9pc0NvbXBvc2luZyA9IGZhbHNlO1xuXG4gICAgaWYgKCF3YWl0Rm9yUHJvcGFnYXRpb24pIHtcbiAgICAgIC8vIENhbmNlbCBhbnkgZGVsYXllZCBjb21wb3NpdGlvbiBzZW5kIHJlcXVlc3RzIGFuZCBzZW5kIHRoZSBpbnB1dCBpbW1lZGlhdGVseS5cbiAgICAgIHRoaXMuX2lzU2VuZGluZ0NvbXBvc2l0aW9uID0gZmFsc2U7XG4gICAgICBjb25zdCBpbnB1dCA9IHRoaXMuX3RleHRhcmVhLnZhbHVlLnN1YnN0cmluZyh0aGlzLl9jb21wb3NpdGlvblBvc2l0aW9uLnN0YXJ0LCB0aGlzLl9jb21wb3NpdGlvblBvc2l0aW9uLmVuZCk7XG4gICAgICB0aGlzLl9jb3JlU2VydmljZS50cmlnZ2VyRGF0YUV2ZW50KGlucHV0LCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTWFrZSBhIGRlZXAgY29weSBvZiB0aGUgY29tcG9zaXRpb24gcG9zaXRpb24gaGVyZSBhcyBhIG5ldyBjb21wb3NpdGlvbnN0YXJ0IGV2ZW50IG1heVxuICAgICAgLy8gZmlyZSBiZWZvcmUgdGhlIHNldFRpbWVvdXQgZXhlY3V0ZXMuXG4gICAgICBjb25zdCBjdXJyZW50Q29tcG9zaXRpb25Qb3NpdGlvbiA9IHtcbiAgICAgICAgc3RhcnQ6IHRoaXMuX2NvbXBvc2l0aW9uUG9zaXRpb24uc3RhcnQsXG4gICAgICAgIGVuZDogdGhpcy5fY29tcG9zaXRpb25Qb3NpdGlvbi5lbmRcbiAgICAgIH07XG5cbiAgICAgIC8vIFNpbmNlIGNvbXBvc2l0aW9uKiBldmVudHMgaGFwcGVuIGJlZm9yZSB0aGUgY2hhbmdlcyB0YWtlIHBsYWNlIGluIHRoZSB0ZXh0YXJlYSBvbiBtb3N0XG4gICAgICAvLyBicm93c2VycywgdXNlIGEgc2V0VGltZW91dCB3aXRoIDBtcyB0aW1lIHRvIGFsbG93IHRoZSBuYXRpdmUgY29tcG9zaXRpb25lbmQgZXZlbnQgdG9cbiAgICAgIC8vIGNvbXBsZXRlLiBUaGlzIGVuc3VyZXMgdGhlIGNvcnJlY3QgY2hhcmFjdGVyIGlzIHJldHJpZXZlZC5cbiAgICAgIC8vIFRoaXMgc29sdXRpb24gd2FzIHVzZWQgYmVjYXVzZTpcbiAgICAgIC8vIC0gVGhlIGNvbXBvc2l0aW9uZW5kIGV2ZW50J3MgZGF0YSBwcm9wZXJ0eSBpcyB1bnJlbGlhYmxlLCBhdCBsZWFzdCBvbiBDaHJvbWl1bVxuICAgICAgLy8gLSBUaGUgbGFzdCBjb21wb3NpdGlvbnVwZGF0ZSBldmVudCdzIGRhdGEgcHJvcGVydHkgZG9lcyBub3QgYWx3YXlzIGFjY3VyYXRlbHkgZGVzY3JpYmVcbiAgICAgIC8vICAgdGhlIGNoYXJhY3RlciwgYSBjb3VudGVyIGV4YW1wbGUgYmVpbmcgS29yZWFuIHdoZXJlIGFuIGVuZGluZyBjb25zb25zYW50IGNhbiBtb3ZlIHRvXG4gICAgICAvLyAgIHRoZSBmb2xsb3dpbmcgY2hhcmFjdGVyIGlmIHRoZSBmb2xsb3dpbmcgaW5wdXQgaXMgYSB2b3dlbC5cbiAgICAgIHRoaXMuX2lzU2VuZGluZ0NvbXBvc2l0aW9uID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAvLyBFbnN1cmUgdGhhdCB0aGUgaW5wdXQgaGFzIG5vdCBhbHJlYWR5IGJlZW4gc2VudFxuICAgICAgICBpZiAodGhpcy5faXNTZW5kaW5nQ29tcG9zaXRpb24pIHtcbiAgICAgICAgICB0aGlzLl9pc1NlbmRpbmdDb21wb3NpdGlvbiA9IGZhbHNlO1xuICAgICAgICAgIGxldCBpbnB1dDtcbiAgICAgICAgICAvLyBBZGQgbGVuZ3RoIG9mIGRhdGEgYWxyZWFkeSBzZW50IGR1ZSB0byBrZXlkb3duIGV2ZW50LFxuICAgICAgICAgIC8vIG90aGVyd2lzZSBpbnB1dCBjaGFyYWN0ZXJzIGNhbiBiZSBkdXBsaWNhdGVkLiAoSXNzdWUgIzMxOTEpXG4gICAgICAgICAgY3VycmVudENvbXBvc2l0aW9uUG9zaXRpb24uc3RhcnQgKz0gdGhpcy5fZGF0YUFscmVhZHlTZW50Lmxlbmd0aDtcbiAgICAgICAgICBpZiAodGhpcy5faXNDb21wb3NpbmcpIHtcbiAgICAgICAgICAgIC8vIFVzZSB0aGUgZW5kIHBvc2l0aW9uIHRvIGdldCB0aGUgc3RyaW5nIGlmIGEgbmV3IGNvbXBvc2l0aW9uIGhhcyBzdGFydGVkLlxuICAgICAgICAgICAgaW5wdXQgPSB0aGlzLl90ZXh0YXJlYS52YWx1ZS5zdWJzdHJpbmcoY3VycmVudENvbXBvc2l0aW9uUG9zaXRpb24uc3RhcnQsIGN1cnJlbnRDb21wb3NpdGlvblBvc2l0aW9uLmVuZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIERvbid0IHVzZSB0aGUgZW5kIHBvc2l0aW9uIGhlcmUgaW4gb3JkZXIgdG8gcGljayB1cCBhbnkgY2hhcmFjdGVycyBhZnRlciB0aGVcbiAgICAgICAgICAgIC8vIGNvbXBvc2l0aW9uIGhhcyBmaW5pc2hlZCwgZm9yIGV4YW1wbGUgd2hlbiB0eXBpbmcgYSBub24tY29tcG9zaXRpb24gY2hhcmFjdGVyXG4gICAgICAgICAgICAvLyAoZWcuIDIpIGFmdGVyIGEgY29tcG9zaXRpb24gY2hhcmFjdGVyLlxuICAgICAgICAgICAgaW5wdXQgPSB0aGlzLl90ZXh0YXJlYS52YWx1ZS5zdWJzdHJpbmcoY3VycmVudENvbXBvc2l0aW9uUG9zaXRpb24uc3RhcnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaW5wdXQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fY29yZVNlcnZpY2UudHJpZ2dlckRhdGFFdmVudChpbnB1dCwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCAwKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQXBwbHkgYW55IGNoYW5nZXMgbWFkZSB0byB0aGUgdGV4dGFyZWEgYWZ0ZXIgdGhlIGN1cnJlbnQgZXZlbnQgY2hhaW4gaXMgYWxsb3dlZCB0byBjb21wbGV0ZS5cbiAgICogVGhpcyBzaG91bGQgYmUgY2FsbGVkIHdoZW4gbm90IGN1cnJlbnRseSBjb21wb3NpbmcgYnV0IGEga2V5ZG93biBldmVudCB3aXRoIHRoZSBcImNvbXBvc2l0aW9uXG4gICAqIGNoYXJhY3RlclwiICgyMjkpIGlzIHRyaWdnZXJlZCwgaW4gb3JkZXIgdG8gYWxsb3cgbm9uLWNvbXBvc2l0aW9uIHRleHQgdG8gYmUgZW50ZXJlZCB3aGVuIGFuXG4gICAqIElNRSBpcyBhY3RpdmUuXG4gICAqL1xuICBwcml2YXRlIF9oYW5kbGVBbnlUZXh0YXJlYUNoYW5nZXMoKTogdm9pZCB7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLl90ZXh0YXJlYS52YWx1ZTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIC8vIElnbm9yZSBpZiBhIGNvbXBvc2l0aW9uIGhhcyBzdGFydGVkIHNpbmNlIHRoZSB0aW1lb3V0XG4gICAgICBpZiAoIXRoaXMuX2lzQ29tcG9zaW5nKSB7XG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdGhpcy5fdGV4dGFyZWEudmFsdWU7XG4gICAgICAgIGNvbnN0IGRpZmYgPSBuZXdWYWx1ZS5yZXBsYWNlKG9sZFZhbHVlLCAnJyk7XG4gICAgICAgIGlmIChkaWZmLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB0aGlzLl9kYXRhQWxyZWFkeVNlbnQgPSBkaWZmO1xuICAgICAgICAgIHRoaXMuX2NvcmVTZXJ2aWNlLnRyaWdnZXJEYXRhRXZlbnQoZGlmZiwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQb3NpdGlvbnMgdGhlIGNvbXBvc2l0aW9uIHZpZXcgb24gdG9wIG9mIHRoZSBjdXJzb3IgYW5kIHRoZSB0ZXh0YXJlYSBqdXN0IGJlbG93IGl0IChzbyB0aGVcbiAgICogSU1FIGhlbHBlciBkaWFsb2cgaXMgcG9zaXRpb25lZCBjb3JyZWN0bHkpLlxuICAgKiBAcGFyYW0gZG9udFJlY3Vyc2UgV2hldGhlciB0byB1c2Ugc2V0VGltZW91dCB0byByZWN1cnNpdmVseSB0cmlnZ2VyIGFub3RoZXIgdXBkYXRlLCB0aGlzIGlzXG4gICAqICAgbmVjZXNzYXJ5IGFzIHRoZSBJTUUgZXZlbnRzIGFjcm9zcyBicm93c2VycyBhcmUgbm90IGNvbnNpc3RlbnRseSB0cmlnZ2VyZWQuXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlQ29tcG9zaXRpb25FbGVtZW50cyhkb250UmVjdXJzZT86IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX2lzQ29tcG9zaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLmlzQ3Vyc29ySW5WaWV3cG9ydCkge1xuICAgICAgY29uc3QgY3Vyc29yWCA9IE1hdGgubWluKHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLngsIHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scyAtIDEpO1xuXG4gICAgICBjb25zdCBjZWxsSGVpZ2h0ID0gdGhpcy5fcmVuZGVyU2VydmljZS5kaW1lbnNpb25zLmFjdHVhbENlbGxIZWlnaHQ7XG4gICAgICBjb25zdCBjdXJzb3JUb3AgPSB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlci55ICogdGhpcy5fcmVuZGVyU2VydmljZS5kaW1lbnNpb25zLmFjdHVhbENlbGxIZWlnaHQ7XG4gICAgICBjb25zdCBjdXJzb3JMZWZ0ID0gY3Vyc29yWCAqIHRoaXMuX3JlbmRlclNlcnZpY2UuZGltZW5zaW9ucy5hY3R1YWxDZWxsV2lkdGg7XG5cbiAgICAgIHRoaXMuX2NvbXBvc2l0aW9uVmlldy5zdHlsZS5sZWZ0ID0gY3Vyc29yTGVmdCArICdweCc7XG4gICAgICB0aGlzLl9jb21wb3NpdGlvblZpZXcuc3R5bGUudG9wID0gY3Vyc29yVG9wICsgJ3B4JztcbiAgICAgIHRoaXMuX2NvbXBvc2l0aW9uVmlldy5zdHlsZS5oZWlnaHQgPSBjZWxsSGVpZ2h0ICsgJ3B4JztcbiAgICAgIHRoaXMuX2NvbXBvc2l0aW9uVmlldy5zdHlsZS5saW5lSGVpZ2h0ID0gY2VsbEhlaWdodCArICdweCc7XG4gICAgICB0aGlzLl9jb21wb3NpdGlvblZpZXcuc3R5bGUuZm9udEZhbWlseSA9IHRoaXMuX29wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMuZm9udEZhbWlseTtcbiAgICAgIHRoaXMuX2NvbXBvc2l0aW9uVmlldy5zdHlsZS5mb250U2l6ZSA9IHRoaXMuX29wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMuZm9udFNpemUgKyAncHgnO1xuICAgICAgLy8gU3luYyB0aGUgdGV4dGFyZWEgdG8gdGhlIGV4YWN0IHBvc2l0aW9uIG9mIHRoZSBjb21wb3NpdGlvbiB2aWV3IHNvIHRoZSBJTUUga25vd3Mgd2hlcmUgdGhlXG4gICAgICAvLyB0ZXh0IGlzLlxuICAgICAgY29uc3QgY29tcG9zaXRpb25WaWV3Qm91bmRzID0gdGhpcy5fY29tcG9zaXRpb25WaWV3LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdGhpcy5fdGV4dGFyZWEuc3R5bGUubGVmdCA9IGN1cnNvckxlZnQgKyAncHgnO1xuICAgICAgdGhpcy5fdGV4dGFyZWEuc3R5bGUudG9wID0gY3Vyc29yVG9wICsgJ3B4JztcbiAgICAgIC8vIEVuc3VyZSB0aGUgdGV4dCBhcmVhIGlzIGF0IGxlYXN0IDF4MSwgb3RoZXJ3aXNlIGNlcnRhaW4gSU1FcyBtYXkgYnJlYWtcbiAgICAgIHRoaXMuX3RleHRhcmVhLnN0eWxlLndpZHRoID0gTWF0aC5tYXgoY29tcG9zaXRpb25WaWV3Qm91bmRzLndpZHRoLCAxKSArICdweCc7XG4gICAgICB0aGlzLl90ZXh0YXJlYS5zdHlsZS5oZWlnaHQgPSBNYXRoLm1heChjb21wb3NpdGlvblZpZXdCb3VuZHMuaGVpZ2h0LCAxKSArICdweCc7XG4gICAgICB0aGlzLl90ZXh0YXJlYS5zdHlsZS5saW5lSGVpZ2h0ID0gY29tcG9zaXRpb25WaWV3Qm91bmRzLmhlaWdodCArICdweCc7XG4gICAgfVxuXG4gICAgaWYgKCFkb250UmVjdXJzZSkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnVwZGF0ZUNvbXBvc2l0aW9uRWxlbWVudHModHJ1ZSksIDApO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29vcmRzUmVsYXRpdmVUb0VsZW1lbnQoZXZlbnQ6IHtjbGllbnRYOiBudW1iZXIsIGNsaWVudFk6IG51bWJlcn0sIGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogW251bWJlciwgbnVtYmVyXSB7XG4gIGNvbnN0IHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4gW2V2ZW50LmNsaWVudFggLSByZWN0LmxlZnQsIGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcF07XG59XG5cbi8qKlxuICogR2V0cyBjb29yZGluYXRlcyB3aXRoaW4gdGhlIHRlcm1pbmFsIGZvciBhIHBhcnRpY3VsYXIgbW91c2UgZXZlbnQuIFRoZSByZXN1bHRcbiAqIGlzIHJldHVybmVkIGFzIGFuIGFycmF5IGluIHRoZSBmb3JtIFt4LCB5XSBpbnN0ZWFkIG9mIGFuIG9iamVjdCBhcyBpdCdzIGFcbiAqIGxpdHRsZSBmYXN0ZXIgYW5kIHRoaXMgZnVuY3Rpb24gaXMgdXNlZCBpbiBzb21lIGxvdyBsZXZlbCBjb2RlLlxuICogQHBhcmFtIGV2ZW50IFRoZSBtb3VzZSBldmVudC5cbiAqIEBwYXJhbSBlbGVtZW50IFRoZSB0ZXJtaW5hbCdzIGNvbnRhaW5lciBlbGVtZW50LlxuICogQHBhcmFtIGNvbENvdW50IFRoZSBudW1iZXIgb2YgY29sdW1ucyBpbiB0aGUgdGVybWluYWwuXG4gKiBAcGFyYW0gcm93Q291bnQgVGhlIG51bWJlciBvZiByb3dzIG4gdGhlIHRlcm1pbmFsLlxuICogQHBhcmFtIGlzU2VsZWN0aW9uIFdoZXRoZXIgdGhlIHJlcXVlc3QgaXMgZm9yIHRoZSBzZWxlY3Rpb24gb3Igbm90LiBUaGlzIHdpbGxcbiAqIGFwcGx5IGFuIG9mZnNldCB0byB0aGUgeCB2YWx1ZSBzdWNoIHRoYXQgdGhlIGxlZnQgaGFsZiBvZiB0aGUgY2VsbCB3aWxsXG4gKiBzZWxlY3QgdGhhdCBjZWxsIGFuZCB0aGUgcmlnaHQgaGFsZiB3aWxsIHNlbGVjdCB0aGUgbmV4dCBjZWxsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29vcmRzKGV2ZW50OiB7Y2xpZW50WDogbnVtYmVyLCBjbGllbnRZOiBudW1iZXJ9LCBlbGVtZW50OiBIVE1MRWxlbWVudCwgY29sQ291bnQ6IG51bWJlciwgcm93Q291bnQ6IG51bWJlciwgaGFzVmFsaWRDaGFyU2l6ZTogYm9vbGVhbiwgYWN0dWFsQ2VsbFdpZHRoOiBudW1iZXIsIGFjdHVhbENlbGxIZWlnaHQ6IG51bWJlciwgaXNTZWxlY3Rpb24/OiBib29sZWFuKTogW251bWJlciwgbnVtYmVyXSB8IHVuZGVmaW5lZCB7XG4gIC8vIENvb3JkaW5hdGVzIGNhbm5vdCBiZSBtZWFzdXJlZCBpZiB0aGVyZSBhcmUgbm8gdmFsaWRcbiAgaWYgKCFoYXNWYWxpZENoYXJTaXplKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnN0IGNvb3JkcyA9IGdldENvb3Jkc1JlbGF0aXZlVG9FbGVtZW50KGV2ZW50LCBlbGVtZW50KTtcbiAgaWYgKCFjb29yZHMpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgY29vcmRzWzBdID0gTWF0aC5jZWlsKChjb29yZHNbMF0gKyAoaXNTZWxlY3Rpb24gPyBhY3R1YWxDZWxsV2lkdGggLyAyIDogMCkpIC8gYWN0dWFsQ2VsbFdpZHRoKTtcbiAgY29vcmRzWzFdID0gTWF0aC5jZWlsKGNvb3Jkc1sxXSAvIGFjdHVhbENlbGxIZWlnaHQpO1xuXG4gIC8vIEVuc3VyZSBjb29yZGluYXRlcyBhcmUgd2l0aGluIHRoZSB0ZXJtaW5hbCB2aWV3cG9ydC4gTm90ZSB0aGF0IHNlbGVjdGlvbnNcbiAgLy8gbmVlZCBhbiBhZGRpdGlvbiBwb2ludCBvZiBwcmVjaXNpb24gdG8gY292ZXIgdGhlIGVuZCBwb2ludCAoYXMgY2hhcmFjdGVyc1xuICAvLyBjb3ZlciBoYWxmIG9mIG9uZSBjaGFyIGFuZCBoYWxmIG9mIHRoZSBuZXh0KS5cbiAgY29vcmRzWzBdID0gTWF0aC5taW4oTWF0aC5tYXgoY29vcmRzWzBdLCAxKSwgY29sQ291bnQgKyAoaXNTZWxlY3Rpb24gPyAxIDogMCkpO1xuICBjb29yZHNbMV0gPSBNYXRoLm1pbihNYXRoLm1heChjb29yZHNbMV0sIDEpLCByb3dDb3VudCk7XG5cbiAgcmV0dXJuIGNvb3Jkcztcbn1cblxuLyoqXG4gKiBHZXRzIGNvb3JkaW5hdGVzIHdpdGhpbiB0aGUgdGVybWluYWwgZm9yIGEgcGFydGljdWxhciBtb3VzZSBldmVudCwgd3JhcHBpbmdcbiAqIHRoZW0gdG8gdGhlIGJvdW5kcyBvZiB0aGUgdGVybWluYWwgYW5kIGFkZGluZyAzMiB0byBib3RoIHRoZSB4IGFuZCB5IHZhbHVlc1xuICogYXMgZXhwZWN0ZWQgYnkgeHRlcm0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRSYXdCeXRlQ29vcmRzKGNvb3JkczogW251bWJlciwgbnVtYmVyXSB8IHVuZGVmaW5lZCk6IHsgeDogbnVtYmVyLCB5OiBudW1iZXIgfSB8IHVuZGVmaW5lZCB7XG4gIGlmICghY29vcmRzKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIHh0ZXJtIHNlbmRzIHJhdyBieXRlcyBhbmQgc3RhcnRzIGF0IDMyIChTUCkgZm9yIGVhY2guXG4gIHJldHVybiB7IHg6IGNvb3Jkc1swXSArIDMyLCB5OiBjb29yZHNbMV0gKyAzMiB9O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBDMCB9IGZyb20gJ2NvbW1vbi9kYXRhL0VzY2FwZVNlcXVlbmNlcyc7XG5pbXBvcnQgeyBJQnVmZmVyU2VydmljZSB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5cbmNvbnN0IGVudW0gRGlyZWN0aW9uIHtcbiAgVVAgPSAnQScsXG4gIERPV04gPSAnQicsXG4gIFJJR0hUID0gJ0MnLFxuICBMRUZUID0gJ0QnXG59XG5cbi8qKlxuICogQ29uY2F0ZW5hdGVzIGFsbCB0aGUgYXJyb3cgc2VxdWVuY2VzIHRvZ2V0aGVyLlxuICogUmVzZXRzIHRoZSBzdGFydGluZyByb3cgdG8gYW4gdW53cmFwcGVkIHJvdywgbW92ZXMgdG8gdGhlIHJlcXVlc3RlZCByb3csXG4gKiB0aGVuIG1vdmVzIHRvIHJlcXVlc3RlZCBjb2wuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlVG9DZWxsU2VxdWVuY2UodGFyZ2V0WDogbnVtYmVyLCB0YXJnZXRZOiBudW1iZXIsIGJ1ZmZlclNlcnZpY2U6IElCdWZmZXJTZXJ2aWNlLCBhcHBsaWNhdGlvbkN1cnNvcjogYm9vbGVhbik6IHN0cmluZyB7XG4gIGNvbnN0IHN0YXJ0WCA9IGJ1ZmZlclNlcnZpY2UuYnVmZmVyLng7XG4gIGNvbnN0IHN0YXJ0WSA9IGJ1ZmZlclNlcnZpY2UuYnVmZmVyLnk7XG5cbiAgLy8gVGhlIGFsdCBidWZmZXIgc2hvdWxkIHRyeSB0byBuYXZpZ2F0ZSBiZXR3ZWVuIHJvd3NcbiAgaWYgKCFidWZmZXJTZXJ2aWNlLmJ1ZmZlci5oYXNTY3JvbGxiYWNrKSB7XG4gICAgcmV0dXJuIHJlc2V0U3RhcnRpbmdSb3coc3RhcnRYLCBzdGFydFksIHRhcmdldFgsIHRhcmdldFksIGJ1ZmZlclNlcnZpY2UsIGFwcGxpY2F0aW9uQ3Vyc29yKSArXG4gICAgICBtb3ZlVG9SZXF1ZXN0ZWRSb3coc3RhcnRZLCB0YXJnZXRZLCBidWZmZXJTZXJ2aWNlLCBhcHBsaWNhdGlvbkN1cnNvcikgK1xuICAgICAgbW92ZVRvUmVxdWVzdGVkQ29sKHN0YXJ0WCwgc3RhcnRZLCB0YXJnZXRYLCB0YXJnZXRZLCBidWZmZXJTZXJ2aWNlLCBhcHBsaWNhdGlvbkN1cnNvcik7XG4gIH1cblxuICAvLyBPbmx5IG1vdmUgaG9yaXpvbnRhbGx5IGZvciB0aGUgbm9ybWFsIGJ1ZmZlclxuICBsZXQgZGlyZWN0aW9uO1xuICBpZiAoc3RhcnRZID09PSB0YXJnZXRZKSB7XG4gICAgZGlyZWN0aW9uID0gc3RhcnRYID4gdGFyZ2V0WCA/IERpcmVjdGlvbi5MRUZUIDogRGlyZWN0aW9uLlJJR0hUO1xuICAgIHJldHVybiByZXBlYXQoTWF0aC5hYnMoc3RhcnRYIC0gdGFyZ2V0WCksIHNlcXVlbmNlKGRpcmVjdGlvbiwgYXBwbGljYXRpb25DdXJzb3IpKTtcbiAgfVxuICBkaXJlY3Rpb24gPSBzdGFydFkgPiB0YXJnZXRZID8gRGlyZWN0aW9uLkxFRlQgOiBEaXJlY3Rpb24uUklHSFQ7XG4gIGNvbnN0IHJvd0RpZmZlcmVuY2UgPSBNYXRoLmFicyhzdGFydFkgLSB0YXJnZXRZKTtcbiAgY29uc3QgY2VsbHNUb01vdmUgPSBjb2xzRnJvbVJvd0VuZChzdGFydFkgPiB0YXJnZXRZID8gdGFyZ2V0WCA6IHN0YXJ0WCwgYnVmZmVyU2VydmljZSkgK1xuICAgIChyb3dEaWZmZXJlbmNlIC0gMSkgKiBidWZmZXJTZXJ2aWNlLmNvbHMgKyAxIC8qIHdyYXAgYXJvdW5kIDEgcm93ICovICtcbiAgICBjb2xzRnJvbVJvd0JlZ2lubmluZyhzdGFydFkgPiB0YXJnZXRZID8gc3RhcnRYIDogdGFyZ2V0WCwgYnVmZmVyU2VydmljZSk7XG4gIHJldHVybiByZXBlYXQoY2VsbHNUb01vdmUsIHNlcXVlbmNlKGRpcmVjdGlvbiwgYXBwbGljYXRpb25DdXJzb3IpKTtcbn1cblxuLyoqXG4gKiBGaW5kIHRoZSBudW1iZXIgb2YgY29scyBmcm9tIGEgcm93IGJlZ2lubmluZyB0byBhIGNvbC5cbiAqL1xuZnVuY3Rpb24gY29sc0Zyb21Sb3dCZWdpbm5pbmcoY3Vyclg6IG51bWJlciwgYnVmZmVyU2VydmljZTogSUJ1ZmZlclNlcnZpY2UpOiBudW1iZXIge1xuICByZXR1cm4gY3VyclggLSAxO1xufVxuXG4vKipcbiAqIEZpbmQgdGhlIG51bWJlciBvZiBjb2xzIGZyb20gYSBjb2wgdG8gcm93IGVuZC5cbiAqL1xuZnVuY3Rpb24gY29sc0Zyb21Sb3dFbmQoY3Vyclg6IG51bWJlciwgYnVmZmVyU2VydmljZTogSUJ1ZmZlclNlcnZpY2UpOiBudW1iZXIge1xuICByZXR1cm4gYnVmZmVyU2VydmljZS5jb2xzIC0gY3Vyclg7XG59XG5cbi8qKlxuICogSWYgdGhlIGluaXRpYWwgcG9zaXRpb24gb2YgdGhlIGN1cnNvciBpcyBvbiBhIHJvdyB0aGF0IGlzIHdyYXBwZWQsIG1vdmUgdGhlXG4gKiBjdXJzb3IgdXAgdG8gdGhlIGZpcnN0IHJvdyB0aGF0IGlzIG5vdCB3cmFwcGVkIHRvIGhhdmUgYWNjdXJhdGUgdmVydGljYWxcbiAqIHBvc2l0aW9uaW5nLlxuICovXG5mdW5jdGlvbiByZXNldFN0YXJ0aW5nUm93KHN0YXJ0WDogbnVtYmVyLCBzdGFydFk6IG51bWJlciwgdGFyZ2V0WDogbnVtYmVyLCB0YXJnZXRZOiBudW1iZXIsIGJ1ZmZlclNlcnZpY2U6IElCdWZmZXJTZXJ2aWNlLCBhcHBsaWNhdGlvbkN1cnNvcjogYm9vbGVhbik6IHN0cmluZyB7XG4gIGlmIChtb3ZlVG9SZXF1ZXN0ZWRSb3coc3RhcnRZLCB0YXJnZXRZLCBidWZmZXJTZXJ2aWNlLCBhcHBsaWNhdGlvbkN1cnNvcikubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHJldHVybiByZXBlYXQoYnVmZmVyTGluZShcbiAgICBzdGFydFgsIHN0YXJ0WSwgc3RhcnRYLFxuICAgIHN0YXJ0WSAtIHdyYXBwZWRSb3dzRm9yUm93KGJ1ZmZlclNlcnZpY2UsIHN0YXJ0WSksIGZhbHNlLCBidWZmZXJTZXJ2aWNlXG4gICkubGVuZ3RoLCBzZXF1ZW5jZShEaXJlY3Rpb24uTEVGVCwgYXBwbGljYXRpb25DdXJzb3IpKTtcbn1cblxuLyoqXG4gKiBVc2luZyB0aGUgcmVzZXQgc3RhcnRpbmcgYW5kIGVuZGluZyByb3csIG1vdmUgdG8gdGhlIHJlcXVlc3RlZCByb3csXG4gKiBpZ25vcmluZyB3cmFwcGVkIHJvd3NcbiAqL1xuZnVuY3Rpb24gbW92ZVRvUmVxdWVzdGVkUm93KHN0YXJ0WTogbnVtYmVyLCB0YXJnZXRZOiBudW1iZXIsIGJ1ZmZlclNlcnZpY2U6IElCdWZmZXJTZXJ2aWNlLCBhcHBsaWNhdGlvbkN1cnNvcjogYm9vbGVhbik6IHN0cmluZyB7XG4gIGNvbnN0IHN0YXJ0Um93ID0gc3RhcnRZIC0gd3JhcHBlZFJvd3NGb3JSb3coYnVmZmVyU2VydmljZSwgc3RhcnRZKTtcbiAgY29uc3QgZW5kUm93ID0gdGFyZ2V0WSAtIHdyYXBwZWRSb3dzRm9yUm93KGJ1ZmZlclNlcnZpY2UsIHRhcmdldFkpO1xuXG4gIGNvbnN0IHJvd3NUb01vdmUgPSBNYXRoLmFicyhzdGFydFJvdyAtIGVuZFJvdykgLSB3cmFwcGVkUm93c0NvdW50KHN0YXJ0WSwgdGFyZ2V0WSwgYnVmZmVyU2VydmljZSk7XG5cbiAgcmV0dXJuIHJlcGVhdChyb3dzVG9Nb3ZlLCBzZXF1ZW5jZSh2ZXJ0aWNhbERpcmVjdGlvbihzdGFydFksIHRhcmdldFkpLCBhcHBsaWNhdGlvbkN1cnNvcikpO1xufVxuXG4vKipcbiAqIE1vdmUgdG8gdGhlIHJlcXVlc3RlZCBjb2wgb24gdGhlIGVuZGluZyByb3dcbiAqL1xuZnVuY3Rpb24gbW92ZVRvUmVxdWVzdGVkQ29sKHN0YXJ0WDogbnVtYmVyLCBzdGFydFk6IG51bWJlciwgdGFyZ2V0WDogbnVtYmVyLCB0YXJnZXRZOiBudW1iZXIsIGJ1ZmZlclNlcnZpY2U6IElCdWZmZXJTZXJ2aWNlLCBhcHBsaWNhdGlvbkN1cnNvcjogYm9vbGVhbik6IHN0cmluZyB7XG4gIGxldCBzdGFydFJvdztcbiAgaWYgKG1vdmVUb1JlcXVlc3RlZFJvdyhzdGFydFksIHRhcmdldFksIGJ1ZmZlclNlcnZpY2UsIGFwcGxpY2F0aW9uQ3Vyc29yKS5sZW5ndGggPiAwKSB7XG4gICAgc3RhcnRSb3cgPSB0YXJnZXRZIC0gd3JhcHBlZFJvd3NGb3JSb3coYnVmZmVyU2VydmljZSwgdGFyZ2V0WSk7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnRSb3cgPSBzdGFydFk7XG4gIH1cblxuICBjb25zdCBlbmRSb3cgPSB0YXJnZXRZO1xuICBjb25zdCBkaXJlY3Rpb24gPSBob3Jpem9udGFsRGlyZWN0aW9uKHN0YXJ0WCwgc3RhcnRZLCB0YXJnZXRYLCB0YXJnZXRZLCBidWZmZXJTZXJ2aWNlLCBhcHBsaWNhdGlvbkN1cnNvcik7XG5cbiAgcmV0dXJuIHJlcGVhdChidWZmZXJMaW5lKFxuICAgIHN0YXJ0WCwgc3RhcnRSb3csIHRhcmdldFgsIGVuZFJvdyxcbiAgICBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5SSUdIVCwgYnVmZmVyU2VydmljZVxuICApLmxlbmd0aCwgc2VxdWVuY2UoZGlyZWN0aW9uLCBhcHBsaWNhdGlvbkN1cnNvcikpO1xufVxuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb25zXG4gKi9cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBudW1iZXIgb2Ygd3JhcHBlZCByb3dzIGJldHdlZW4gdGhlIHVud3JhcHBlZCBzdGFydGluZyBhbmRcbiAqIGVuZGluZyByb3dzLiBUaGVzZSByb3dzIG5lZWQgdG8gaWdub3JlZCBzaW5jZSB0aGUgY3Vyc29yIHNraXBzIG92ZXIgdGhlbS5cbiAqL1xuZnVuY3Rpb24gd3JhcHBlZFJvd3NDb3VudChzdGFydFk6IG51bWJlciwgdGFyZ2V0WTogbnVtYmVyLCBidWZmZXJTZXJ2aWNlOiBJQnVmZmVyU2VydmljZSk6IG51bWJlciB7XG4gIGxldCB3cmFwcGVkUm93cyA9IDA7XG4gIGNvbnN0IHN0YXJ0Um93ID0gc3RhcnRZIC0gd3JhcHBlZFJvd3NGb3JSb3coYnVmZmVyU2VydmljZSwgc3RhcnRZKTtcbiAgY29uc3QgZW5kUm93ID0gdGFyZ2V0WSAtIHdyYXBwZWRSb3dzRm9yUm93KGJ1ZmZlclNlcnZpY2UsIHRhcmdldFkpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5hYnMoc3RhcnRSb3cgLSBlbmRSb3cpOyBpKyspIHtcbiAgICBjb25zdCBkaXJlY3Rpb24gPSB2ZXJ0aWNhbERpcmVjdGlvbihzdGFydFksIHRhcmdldFkpID09PSBEaXJlY3Rpb24uVVAgPyAtMSA6IDE7XG4gICAgY29uc3QgbGluZSA9IGJ1ZmZlclNlcnZpY2UuYnVmZmVyLmxpbmVzLmdldChzdGFydFJvdyArIChkaXJlY3Rpb24gKiBpKSk7XG4gICAgaWYgKGxpbmU/LmlzV3JhcHBlZCkge1xuICAgICAgd3JhcHBlZFJvd3MrKztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gd3JhcHBlZFJvd3M7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbnVtYmVyIG9mIHdyYXBwZWQgcm93cyB0aGF0IG1ha2UgdXAgYSBnaXZlbiByb3cuXG4gKiBAcGFyYW0gY3VycmVudFJvdyBUaGUgcm93IHRvIGRldGVybWluZSBob3cgbWFueSB3cmFwcGVkIHJvd3MgbWFrZSBpdCB1cFxuICovXG5mdW5jdGlvbiB3cmFwcGVkUm93c0ZvclJvdyhidWZmZXJTZXJ2aWNlOiBJQnVmZmVyU2VydmljZSwgY3VycmVudFJvdzogbnVtYmVyKTogbnVtYmVyIHtcbiAgbGV0IHJvd0NvdW50ID0gMDtcbiAgbGV0IGxpbmUgPSBidWZmZXJTZXJ2aWNlLmJ1ZmZlci5saW5lcy5nZXQoY3VycmVudFJvdyk7XG4gIGxldCBsaW5lV3JhcHMgPSBsaW5lPy5pc1dyYXBwZWQ7XG5cbiAgd2hpbGUgKGxpbmVXcmFwcyAmJiBjdXJyZW50Um93ID49IDAgJiYgY3VycmVudFJvdyA8IGJ1ZmZlclNlcnZpY2Uucm93cykge1xuICAgIHJvd0NvdW50Kys7XG4gICAgbGluZSA9IGJ1ZmZlclNlcnZpY2UuYnVmZmVyLmxpbmVzLmdldCgtLWN1cnJlbnRSb3cpO1xuICAgIGxpbmVXcmFwcyA9IGxpbmU/LmlzV3JhcHBlZDtcbiAgfVxuXG4gIHJldHVybiByb3dDb3VudDtcbn1cblxuLyoqXG4gKiBEaXJlY3Rpb24gZGV0ZXJtaW5lcnNcbiAqL1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIHJpZ2h0IG9yIGxlZnQgYXJyb3cgaXMgbmVlZGVkXG4gKi9cbmZ1bmN0aW9uIGhvcml6b250YWxEaXJlY3Rpb24oc3RhcnRYOiBudW1iZXIsIHN0YXJ0WTogbnVtYmVyLCB0YXJnZXRYOiBudW1iZXIsIHRhcmdldFk6IG51bWJlciwgYnVmZmVyU2VydmljZTogSUJ1ZmZlclNlcnZpY2UsIGFwcGxpY2F0aW9uQ3Vyc29yOiBib29sZWFuKTogRGlyZWN0aW9uIHtcbiAgbGV0IHN0YXJ0Um93O1xuICBpZiAobW92ZVRvUmVxdWVzdGVkUm93KHRhcmdldFgsIHRhcmdldFksIGJ1ZmZlclNlcnZpY2UsIGFwcGxpY2F0aW9uQ3Vyc29yKS5sZW5ndGggPiAwKSB7XG4gICAgc3RhcnRSb3cgPSB0YXJnZXRZIC0gd3JhcHBlZFJvd3NGb3JSb3coYnVmZmVyU2VydmljZSwgdGFyZ2V0WSk7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnRSb3cgPSBzdGFydFk7XG4gIH1cblxuICBpZiAoKHN0YXJ0WCA8IHRhcmdldFggJiZcbiAgICBzdGFydFJvdyA8PSB0YXJnZXRZKSB8fCAvLyBkb3duL3JpZ2h0IG9yIHNhbWUgeS9yaWdodFxuICAgIChzdGFydFggPj0gdGFyZ2V0WCAmJlxuICAgIHN0YXJ0Um93IDwgdGFyZ2V0WSkpIHsgIC8vIGRvd24vbGVmdCBvciBzYW1lIHkvbGVmdFxuICAgIHJldHVybiBEaXJlY3Rpb24uUklHSFQ7XG4gIH1cbiAgcmV0dXJuIERpcmVjdGlvbi5MRUZUO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIHVwIG9yIGRvd24gYXJyb3cgaXMgbmVlZGVkXG4gKi9cbmZ1bmN0aW9uIHZlcnRpY2FsRGlyZWN0aW9uKHN0YXJ0WTogbnVtYmVyLCB0YXJnZXRZOiBudW1iZXIpOiBEaXJlY3Rpb24ge1xuICByZXR1cm4gc3RhcnRZID4gdGFyZ2V0WSA/IERpcmVjdGlvbi5VUCA6IERpcmVjdGlvbi5ET1dOO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgdGhlIHN0cmluZyBvZiBjaGFycyBpbiB0aGUgYnVmZmVyIGZyb20gYSBzdGFydGluZyByb3cgYW5kIGNvbFxuICogdG8gYW4gZW5kaW5nIHJvdyBhbmQgY29sXG4gKiBAcGFyYW0gc3RhcnRDb2wgVGhlIHN0YXJ0aW5nIGNvbHVtbiBwb3NpdGlvblxuICogQHBhcmFtIHN0YXJ0Um93IFRoZSBzdGFydGluZyByb3cgcG9zaXRpb25cbiAqIEBwYXJhbSBlbmRDb2wgVGhlIGVuZGluZyBjb2x1bW4gcG9zaXRpb25cbiAqIEBwYXJhbSBlbmRSb3cgVGhlIGVuZGluZyByb3cgcG9zaXRpb25cbiAqIEBwYXJhbSBmb3J3YXJkIERpcmVjdGlvbiB0byBtb3ZlXG4gKi9cbmZ1bmN0aW9uIGJ1ZmZlckxpbmUoXG4gIHN0YXJ0Q29sOiBudW1iZXIsXG4gIHN0YXJ0Um93OiBudW1iZXIsXG4gIGVuZENvbDogbnVtYmVyLFxuICBlbmRSb3c6IG51bWJlcixcbiAgZm9yd2FyZDogYm9vbGVhbixcbiAgYnVmZmVyU2VydmljZTogSUJ1ZmZlclNlcnZpY2Vcbik6IHN0cmluZyB7XG4gIGxldCBjdXJyZW50Q29sID0gc3RhcnRDb2w7XG4gIGxldCBjdXJyZW50Um93ID0gc3RhcnRSb3c7XG4gIGxldCBidWZmZXJTdHIgPSAnJztcblxuICB3aGlsZSAoY3VycmVudENvbCAhPT0gZW5kQ29sIHx8IGN1cnJlbnRSb3cgIT09IGVuZFJvdykge1xuICAgIGN1cnJlbnRDb2wgKz0gZm9yd2FyZCA/IDEgOiAtMTtcblxuICAgIGlmIChmb3J3YXJkICYmIGN1cnJlbnRDb2wgPiBidWZmZXJTZXJ2aWNlLmNvbHMgLSAxKSB7XG4gICAgICBidWZmZXJTdHIgKz0gYnVmZmVyU2VydmljZS5idWZmZXIudHJhbnNsYXRlQnVmZmVyTGluZVRvU3RyaW5nKFxuICAgICAgICBjdXJyZW50Um93LCBmYWxzZSwgc3RhcnRDb2wsIGN1cnJlbnRDb2xcbiAgICAgICk7XG4gICAgICBjdXJyZW50Q29sID0gMDtcbiAgICAgIHN0YXJ0Q29sID0gMDtcbiAgICAgIGN1cnJlbnRSb3crKztcbiAgICB9IGVsc2UgaWYgKCFmb3J3YXJkICYmIGN1cnJlbnRDb2wgPCAwKSB7XG4gICAgICBidWZmZXJTdHIgKz0gYnVmZmVyU2VydmljZS5idWZmZXIudHJhbnNsYXRlQnVmZmVyTGluZVRvU3RyaW5nKFxuICAgICAgICBjdXJyZW50Um93LCBmYWxzZSwgMCwgc3RhcnRDb2wgKyAxXG4gICAgICApO1xuICAgICAgY3VycmVudENvbCA9IGJ1ZmZlclNlcnZpY2UuY29scyAtIDE7XG4gICAgICBzdGFydENvbCA9IGN1cnJlbnRDb2w7XG4gICAgICBjdXJyZW50Um93LS07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ1ZmZlclN0ciArIGJ1ZmZlclNlcnZpY2UuYnVmZmVyLnRyYW5zbGF0ZUJ1ZmZlckxpbmVUb1N0cmluZyhcbiAgICBjdXJyZW50Um93LCBmYWxzZSwgc3RhcnRDb2wsIGN1cnJlbnRDb2xcbiAgKTtcbn1cblxuLyoqXG4gKiBDb25zdHJ1Y3RzIHRoZSBlc2NhcGUgc2VxdWVuY2UgZm9yIGNsaWNraW5nIGFuIGFycm93XG4gKiBAcGFyYW0gZGlyZWN0aW9uIFRoZSBkaXJlY3Rpb24gdG8gbW92ZVxuICovXG5mdW5jdGlvbiBzZXF1ZW5jZShkaXJlY3Rpb246IERpcmVjdGlvbiwgYXBwbGljYXRpb25DdXJzb3I6IGJvb2xlYW4pOiBzdHJpbmcge1xuICBjb25zdCBtb2QgPSAgYXBwbGljYXRpb25DdXJzb3IgPyAnTycgOiAnWyc7XG4gIHJldHVybiBDMC5FU0MgKyBtb2QgKyBkaXJlY3Rpb247XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHN0cmluZyByZXBlYXRlZCBhIGdpdmVuIG51bWJlciBvZiB0aW1lc1xuICogUG9seWZpbGwgZnJvbSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvcmVwZWF0XG4gKiBAcGFyYW0gY291bnQgVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZ1xuICogQHBhcmFtIHN0cmluZyBUaGUgc3RyaW5nIHRoYXQgaXMgdG8gYmUgcmVwZWF0ZWRcbiAqL1xuZnVuY3Rpb24gcmVwZWF0KGNvdW50OiBudW1iZXIsIHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgY291bnQgPSBNYXRoLmZsb29yKGNvdW50KTtcbiAgbGV0IHJwdCA9ICcnO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICBycHQgKz0gc3RyO1xuICB9XG4gIHJldHVybiBycHQ7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOCBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IFRlcm1pbmFsIGFzIElUZXJtaW5hbEFwaSwgSU1hcmtlciwgSURpc3Bvc2FibGUsIElMaW5rTWF0Y2hlck9wdGlvbnMsIElUaGVtZSwgSUxvY2FsaXphYmxlU3RyaW5ncywgSVRlcm1pbmFsQWRkb24sIElTZWxlY3Rpb25Qb3NpdGlvbiwgSUJ1ZmZlck5hbWVzcGFjZSBhcyBJQnVmZmVyTmFtZXNwYWNlQXBpLCBJUGFyc2VyLCBJTGlua1Byb3ZpZGVyLCBJVW5pY29kZUhhbmRsaW5nLCBGb250V2VpZ2h0LCBJTW9kZXMsIElEZWNvcmF0aW9uT3B0aW9ucywgSURlY29yYXRpb24gfSBmcm9tICd4dGVybSc7XG5pbXBvcnQgeyBJVGVybWluYWwgfSBmcm9tICdicm93c2VyL1R5cGVzJztcbmltcG9ydCB7IFRlcm1pbmFsIGFzIFRlcm1pbmFsQ29yZSB9IGZyb20gJ2Jyb3dzZXIvVGVybWluYWwnO1xuaW1wb3J0ICogYXMgU3RyaW5ncyBmcm9tICdicm93c2VyL0xvY2FsaXphYmxlU3RyaW5ncyc7XG5pbXBvcnQgeyBJRXZlbnQgfSBmcm9tICdjb21tb24vRXZlbnRFbWl0dGVyJztcbmltcG9ydCB7IFBhcnNlckFwaSB9IGZyb20gJ2NvbW1vbi9wdWJsaWMvUGFyc2VyQXBpJztcbmltcG9ydCB7IFVuaWNvZGVBcGkgfSBmcm9tICdjb21tb24vcHVibGljL1VuaWNvZGVBcGknO1xuaW1wb3J0IHsgQWRkb25NYW5hZ2VyIH0gZnJvbSAnY29tbW9uL3B1YmxpYy9BZGRvbk1hbmFnZXInO1xuaW1wb3J0IHsgQnVmZmVyTmFtZXNwYWNlQXBpIH0gZnJvbSAnY29tbW9uL3B1YmxpYy9CdWZmZXJOYW1lc3BhY2VBcGknO1xuaW1wb3J0IHsgSVRlcm1pbmFsT3B0aW9ucyB9IGZyb20gJ2NvbW1vbi9UeXBlcyc7XG5cbi8qKlxuICogVGhlIHNldCBvZiBvcHRpb25zIHRoYXQgb25seSBoYXZlIGFuIGVmZmVjdCB3aGVuIHNldCBpbiB0aGUgVGVybWluYWwgY29uc3RydWN0b3IuXG4gKi9cbmNvbnN0IENPTlNUUlVDVE9SX09OTFlfT1BUSU9OUyA9IFsnY29scycsICdyb3dzJ107XG5cbmV4cG9ydCBjbGFzcyBUZXJtaW5hbCBpbXBsZW1lbnRzIElUZXJtaW5hbEFwaSB7XG4gIHByaXZhdGUgX2NvcmU6IElUZXJtaW5hbDtcbiAgcHJpdmF0ZSBfYWRkb25NYW5hZ2VyOiBBZGRvbk1hbmFnZXI7XG4gIHByaXZhdGUgX3BhcnNlcjogSVBhcnNlciB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBfYnVmZmVyOiBCdWZmZXJOYW1lc3BhY2VBcGkgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX3B1YmxpY09wdGlvbnM6IElUZXJtaW5hbE9wdGlvbnM7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9ucz86IElUZXJtaW5hbE9wdGlvbnMpIHtcbiAgICB0aGlzLl9jb3JlID0gbmV3IFRlcm1pbmFsQ29yZShvcHRpb25zKTtcbiAgICB0aGlzLl9hZGRvbk1hbmFnZXIgPSBuZXcgQWRkb25NYW5hZ2VyKCk7XG5cbiAgICB0aGlzLl9wdWJsaWNPcHRpb25zID0geyAuLi4gdGhpcy5fY29yZS5vcHRpb25zIH07XG4gICAgY29uc3QgZ2V0dGVyID0gKHByb3BOYW1lOiBzdHJpbmcpOiBhbnkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvcmUub3B0aW9uc1twcm9wTmFtZV07XG4gICAgfTtcbiAgICBjb25zdCBzZXR0ZXIgPSAocHJvcE5hbWU6IHN0cmluZywgdmFsdWU6IGFueSk6IHZvaWQgPT4ge1xuICAgICAgdGhpcy5fY2hlY2tSZWFkb25seU9wdGlvbnMocHJvcE5hbWUpO1xuICAgICAgdGhpcy5fY29yZS5vcHRpb25zW3Byb3BOYW1lXSA9IHZhbHVlO1xuICAgIH07XG5cbiAgICBmb3IgKGNvbnN0IHByb3BOYW1lIGluIHRoaXMuX2NvcmUub3B0aW9ucykge1xuICAgICAgY29uc3QgZGVzYyA9IHtcbiAgICAgICAgZ2V0OiBnZXR0ZXIuYmluZCh0aGlzLCBwcm9wTmFtZSksXG4gICAgICAgIHNldDogc2V0dGVyLmJpbmQodGhpcywgcHJvcE5hbWUpXG4gICAgICB9O1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuX3B1YmxpY09wdGlvbnMsIHByb3BOYW1lLCBkZXNjKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9jaGVja1JlYWRvbmx5T3B0aW9ucyhwcm9wTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgLy8gVGhyb3cgYW4gZXJyb3IgaWYgYW55IGNvbnN0cnVjdG9yIG9ubHkgb3B0aW9uIGlzIG1vZGlmaWVkXG4gICAgLy8gZnJvbSB0ZXJtaW5hbC5vcHRpb25zXG4gICAgLy8gTW9kaWZpY2F0aW9ucyBmcm9tIGFueXdoZXJlIGVsc2UgYXJlIGFsbG93ZWRcbiAgICBpZiAoQ09OU1RSVUNUT1JfT05MWV9PUFRJT05TLmluY2x1ZGVzKHByb3BOYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBPcHRpb24gXCIke3Byb3BOYW1lfVwiIGNhbiBvbmx5IGJlIHNldCBpbiB0aGUgY29uc3RydWN0b3JgKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9jaGVja1Byb3Bvc2VkQXBpKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5fY29yZS5vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLmFsbG93UHJvcG9zZWRBcGkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG11c3Qgc2V0IHRoZSBhbGxvd1Byb3Bvc2VkQXBpIG9wdGlvbiB0byB0cnVlIHRvIHVzZSBwcm9wb3NlZCBBUEknKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0IG9uQmVsbCgpOiBJRXZlbnQ8dm9pZD4geyByZXR1cm4gdGhpcy5fY29yZS5vbkJlbGw7IH1cbiAgcHVibGljIGdldCBvbkJpbmFyeSgpOiBJRXZlbnQ8c3RyaW5nPiB7IHJldHVybiB0aGlzLl9jb3JlLm9uQmluYXJ5OyB9XG4gIHB1YmxpYyBnZXQgb25DdXJzb3JNb3ZlKCk6IElFdmVudDx2b2lkPiB7IHJldHVybiB0aGlzLl9jb3JlLm9uQ3Vyc29yTW92ZTsgfVxuICBwdWJsaWMgZ2V0IG9uRGF0YSgpOiBJRXZlbnQ8c3RyaW5nPiB7IHJldHVybiB0aGlzLl9jb3JlLm9uRGF0YTsgfVxuICBwdWJsaWMgZ2V0IG9uS2V5KCk6IElFdmVudDx7IGtleTogc3RyaW5nLCBkb21FdmVudDogS2V5Ym9hcmRFdmVudCB9PiB7IHJldHVybiB0aGlzLl9jb3JlLm9uS2V5OyB9XG4gIHB1YmxpYyBnZXQgb25MaW5lRmVlZCgpOiBJRXZlbnQ8dm9pZD4geyByZXR1cm4gdGhpcy5fY29yZS5vbkxpbmVGZWVkOyB9XG4gIHB1YmxpYyBnZXQgb25SZW5kZXIoKTogSUV2ZW50PHsgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIgfT4geyByZXR1cm4gdGhpcy5fY29yZS5vblJlbmRlcjsgfVxuICBwdWJsaWMgZ2V0IG9uUmVzaXplKCk6IElFdmVudDx7IGNvbHM6IG51bWJlciwgcm93czogbnVtYmVyIH0+IHsgcmV0dXJuIHRoaXMuX2NvcmUub25SZXNpemU7IH1cbiAgcHVibGljIGdldCBvblNjcm9sbCgpOiBJRXZlbnQ8bnVtYmVyPiB7IHJldHVybiB0aGlzLl9jb3JlLm9uU2Nyb2xsOyB9XG4gIHB1YmxpYyBnZXQgb25TZWxlY3Rpb25DaGFuZ2UoKTogSUV2ZW50PHZvaWQ+IHsgcmV0dXJuIHRoaXMuX2NvcmUub25TZWxlY3Rpb25DaGFuZ2U7IH1cbiAgcHVibGljIGdldCBvblRpdGxlQ2hhbmdlKCk6IElFdmVudDxzdHJpbmc+IHsgcmV0dXJuIHRoaXMuX2NvcmUub25UaXRsZUNoYW5nZTsgfVxuXG4gIHB1YmxpYyBnZXQgZWxlbWVudCgpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7IHJldHVybiB0aGlzLl9jb3JlLmVsZW1lbnQ7IH1cbiAgcHVibGljIGdldCBwYXJzZXIoKTogSVBhcnNlciB7XG4gICAgdGhpcy5fY2hlY2tQcm9wb3NlZEFwaSgpO1xuICAgIGlmICghdGhpcy5fcGFyc2VyKSB7XG4gICAgICB0aGlzLl9wYXJzZXIgPSBuZXcgUGFyc2VyQXBpKHRoaXMuX2NvcmUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcGFyc2VyO1xuICB9XG4gIHB1YmxpYyBnZXQgdW5pY29kZSgpOiBJVW5pY29kZUhhbmRsaW5nIHtcbiAgICB0aGlzLl9jaGVja1Byb3Bvc2VkQXBpKCk7XG4gICAgcmV0dXJuIG5ldyBVbmljb2RlQXBpKHRoaXMuX2NvcmUpO1xuICB9XG4gIHB1YmxpYyBnZXQgdGV4dGFyZWEoKTogSFRNTFRleHRBcmVhRWxlbWVudCB8IHVuZGVmaW5lZCB7IHJldHVybiB0aGlzLl9jb3JlLnRleHRhcmVhOyB9XG4gIHB1YmxpYyBnZXQgcm93cygpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fY29yZS5yb3dzOyB9XG4gIHB1YmxpYyBnZXQgY29scygpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fY29yZS5jb2xzOyB9XG4gIHB1YmxpYyBnZXQgYnVmZmVyKCk6IElCdWZmZXJOYW1lc3BhY2VBcGkge1xuICAgIHRoaXMuX2NoZWNrUHJvcG9zZWRBcGkoKTtcbiAgICBpZiAoIXRoaXMuX2J1ZmZlcikge1xuICAgICAgdGhpcy5fYnVmZmVyID0gbmV3IEJ1ZmZlck5hbWVzcGFjZUFwaSh0aGlzLl9jb3JlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2J1ZmZlcjtcbiAgfVxuICBwdWJsaWMgZ2V0IG1hcmtlcnMoKTogUmVhZG9ubHlBcnJheTxJTWFya2VyPiB7XG4gICAgdGhpcy5fY2hlY2tQcm9wb3NlZEFwaSgpO1xuICAgIHJldHVybiB0aGlzLl9jb3JlLm1hcmtlcnM7XG4gIH1cbiAgcHVibGljIGdldCBtb2RlcygpOiBJTW9kZXMge1xuICAgIGNvbnN0IG0gPSB0aGlzLl9jb3JlLmNvcmVTZXJ2aWNlLmRlY1ByaXZhdGVNb2RlcztcbiAgICBsZXQgbW91c2VUcmFja2luZ01vZGU6ICdub25lJyB8ICd4MTAnIHwgJ3Z0MjAwJyB8ICdkcmFnJyB8ICdhbnknID0gJ25vbmUnO1xuICAgIHN3aXRjaCAodGhpcy5fY29yZS5jb3JlTW91c2VTZXJ2aWNlLmFjdGl2ZVByb3RvY29sKSB7XG4gICAgICBjYXNlICdYMTAnOiBtb3VzZVRyYWNraW5nTW9kZSA9ICd4MTAnOyBicmVhaztcbiAgICAgIGNhc2UgJ1ZUMjAwJzogbW91c2VUcmFja2luZ01vZGUgPSAndnQyMDAnOyBicmVhaztcbiAgICAgIGNhc2UgJ0RSQUcnOiBtb3VzZVRyYWNraW5nTW9kZSA9ICdkcmFnJzsgYnJlYWs7XG4gICAgICBjYXNlICdBTlknOiBtb3VzZVRyYWNraW5nTW9kZSA9ICdhbnknOyBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGFwcGxpY2F0aW9uQ3Vyc29yS2V5c01vZGU6IG0uYXBwbGljYXRpb25DdXJzb3JLZXlzLFxuICAgICAgYXBwbGljYXRpb25LZXlwYWRNb2RlOiBtLmFwcGxpY2F0aW9uS2V5cGFkLFxuICAgICAgYnJhY2tldGVkUGFzdGVNb2RlOiBtLmJyYWNrZXRlZFBhc3RlTW9kZSxcbiAgICAgIGluc2VydE1vZGU6IHRoaXMuX2NvcmUuY29yZVNlcnZpY2UubW9kZXMuaW5zZXJ0TW9kZSxcbiAgICAgIG1vdXNlVHJhY2tpbmdNb2RlOiBtb3VzZVRyYWNraW5nTW9kZSxcbiAgICAgIG9yaWdpbk1vZGU6IG0ub3JpZ2luLFxuICAgICAgcmV2ZXJzZVdyYXBhcm91bmRNb2RlOiBtLnJldmVyc2VXcmFwYXJvdW5kLFxuICAgICAgc2VuZEZvY3VzTW9kZTogbS5zZW5kRm9jdXMsXG4gICAgICB3cmFwYXJvdW5kTW9kZTogbS53cmFwYXJvdW5kXG4gICAgfTtcbiAgfVxuICBwdWJsaWMgZ2V0IG9wdGlvbnMoKTogSVRlcm1pbmFsT3B0aW9ucyB7XG4gICAgcmV0dXJuIHRoaXMuX3B1YmxpY09wdGlvbnM7XG4gIH1cbiAgcHVibGljIHNldCBvcHRpb25zKG9wdGlvbnM6IElUZXJtaW5hbE9wdGlvbnMpIHtcbiAgICBmb3IgKGNvbnN0IHByb3BOYW1lIGluIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuX3B1YmxpY09wdGlvbnNbcHJvcE5hbWVdID0gb3B0aW9uc1twcm9wTmFtZV07XG4gICAgfVxuICB9XG4gIHB1YmxpYyBibHVyKCk6IHZvaWQge1xuICAgIHRoaXMuX2NvcmUuYmx1cigpO1xuICB9XG4gIHB1YmxpYyBmb2N1cygpOiB2b2lkIHtcbiAgICB0aGlzLl9jb3JlLmZvY3VzKCk7XG4gIH1cbiAgcHVibGljIHJlc2l6ZShjb2x1bW5zOiBudW1iZXIsIHJvd3M6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3ZlcmlmeUludGVnZXJzKGNvbHVtbnMsIHJvd3MpO1xuICAgIHRoaXMuX2NvcmUucmVzaXplKGNvbHVtbnMsIHJvd3MpO1xuICB9XG4gIHB1YmxpYyBvcGVuKHBhcmVudDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICB0aGlzLl9jb3JlLm9wZW4ocGFyZW50KTtcbiAgfVxuICBwdWJsaWMgYXR0YWNoQ3VzdG9tS2V5RXZlbnRIYW5kbGVyKGN1c3RvbUtleUV2ZW50SGFuZGxlcjogKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5fY29yZS5hdHRhY2hDdXN0b21LZXlFdmVudEhhbmRsZXIoY3VzdG9tS2V5RXZlbnRIYW5kbGVyKTtcbiAgfVxuICBwdWJsaWMgcmVnaXN0ZXJMaW5rTWF0Y2hlcihyZWdleDogUmVnRXhwLCBoYW5kbGVyOiAoZXZlbnQ6IE1vdXNlRXZlbnQsIHVyaTogc3RyaW5nKSA9PiB2b2lkLCBvcHRpb25zPzogSUxpbmtNYXRjaGVyT3B0aW9ucyk6IG51bWJlciB7XG4gICAgdGhpcy5fY2hlY2tQcm9wb3NlZEFwaSgpO1xuICAgIHJldHVybiB0aGlzLl9jb3JlLnJlZ2lzdGVyTGlua01hdGNoZXIocmVnZXgsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICB9XG4gIHB1YmxpYyBkZXJlZ2lzdGVyTGlua01hdGNoZXIobWF0Y2hlcklkOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9jaGVja1Byb3Bvc2VkQXBpKCk7XG4gICAgdGhpcy5fY29yZS5kZXJlZ2lzdGVyTGlua01hdGNoZXIobWF0Y2hlcklkKTtcbiAgfVxuICBwdWJsaWMgcmVnaXN0ZXJMaW5rUHJvdmlkZXIobGlua1Byb3ZpZGVyOiBJTGlua1Byb3ZpZGVyKTogSURpc3Bvc2FibGUge1xuICAgIHRoaXMuX2NoZWNrUHJvcG9zZWRBcGkoKTtcbiAgICByZXR1cm4gdGhpcy5fY29yZS5yZWdpc3RlckxpbmtQcm92aWRlcihsaW5rUHJvdmlkZXIpO1xuICB9XG4gIHB1YmxpYyByZWdpc3RlckNoYXJhY3RlckpvaW5lcihoYW5kbGVyOiAodGV4dDogc3RyaW5nKSA9PiBbbnVtYmVyLCBudW1iZXJdW10pOiBudW1iZXIge1xuICAgIHRoaXMuX2NoZWNrUHJvcG9zZWRBcGkoKTtcbiAgICByZXR1cm4gdGhpcy5fY29yZS5yZWdpc3RlckNoYXJhY3RlckpvaW5lcihoYW5kbGVyKTtcbiAgfVxuICBwdWJsaWMgZGVyZWdpc3RlckNoYXJhY3RlckpvaW5lcihqb2luZXJJZDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fY2hlY2tQcm9wb3NlZEFwaSgpO1xuICAgIHRoaXMuX2NvcmUuZGVyZWdpc3RlckNoYXJhY3RlckpvaW5lcihqb2luZXJJZCk7XG4gIH1cbiAgcHVibGljIHJlZ2lzdGVyTWFya2VyKGN1cnNvcllPZmZzZXQ6IG51bWJlciA9IDApOiBJTWFya2VyIHwgdW5kZWZpbmVkIHtcbiAgICB0aGlzLl9jaGVja1Byb3Bvc2VkQXBpKCk7XG4gICAgdGhpcy5fdmVyaWZ5SW50ZWdlcnMoY3Vyc29yWU9mZnNldCk7XG4gICAgcmV0dXJuIHRoaXMuX2NvcmUuYWRkTWFya2VyKGN1cnNvcllPZmZzZXQpO1xuICB9XG4gIHB1YmxpYyByZWdpc3RlckRlY29yYXRpb24oZGVjb3JhdGlvbk9wdGlvbnM6IElEZWNvcmF0aW9uT3B0aW9ucyk6IElEZWNvcmF0aW9uIHwgdW5kZWZpbmVkIHtcbiAgICB0aGlzLl9jaGVja1Byb3Bvc2VkQXBpKCk7XG4gICAgdGhpcy5fdmVyaWZ5UG9zaXRpdmVJbnRlZ2VycyhkZWNvcmF0aW9uT3B0aW9ucy54ID8/IDAsIGRlY29yYXRpb25PcHRpb25zLndpZHRoID8/IDAsIGRlY29yYXRpb25PcHRpb25zLmhlaWdodCA/PyAwKTtcbiAgICByZXR1cm4gdGhpcy5fY29yZS5yZWdpc3RlckRlY29yYXRpb24oZGVjb3JhdGlvbk9wdGlvbnMpO1xuICB9XG4gIHB1YmxpYyBhZGRNYXJrZXIoY3Vyc29yWU9mZnNldDogbnVtYmVyKTogSU1hcmtlciB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJNYXJrZXIoY3Vyc29yWU9mZnNldCk7XG4gIH1cbiAgcHVibGljIGhhc1NlbGVjdGlvbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fY29yZS5oYXNTZWxlY3Rpb24oKTtcbiAgfVxuICBwdWJsaWMgc2VsZWN0KGNvbHVtbjogbnVtYmVyLCByb3c6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl92ZXJpZnlJbnRlZ2Vycyhjb2x1bW4sIHJvdywgbGVuZ3RoKTtcbiAgICB0aGlzLl9jb3JlLnNlbGVjdChjb2x1bW4sIHJvdywgbGVuZ3RoKTtcbiAgfVxuICBwdWJsaWMgZ2V0U2VsZWN0aW9uKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2NvcmUuZ2V0U2VsZWN0aW9uKCk7XG4gIH1cbiAgcHVibGljIGdldFNlbGVjdGlvblBvc2l0aW9uKCk6IElTZWxlY3Rpb25Qb3NpdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX2NvcmUuZ2V0U2VsZWN0aW9uUG9zaXRpb24oKTtcbiAgfVxuICBwdWJsaWMgY2xlYXJTZWxlY3Rpb24oKTogdm9pZCB7XG4gICAgdGhpcy5fY29yZS5jbGVhclNlbGVjdGlvbigpO1xuICB9XG4gIHB1YmxpYyBzZWxlY3RBbGwoKTogdm9pZCB7XG4gICAgdGhpcy5fY29yZS5zZWxlY3RBbGwoKTtcbiAgfVxuICBwdWJsaWMgc2VsZWN0TGluZXMoc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl92ZXJpZnlJbnRlZ2VycyhzdGFydCwgZW5kKTtcbiAgICB0aGlzLl9jb3JlLnNlbGVjdExpbmVzKHN0YXJ0LCBlbmQpO1xuICB9XG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xuICAgIHRoaXMuX2FkZG9uTWFuYWdlci5kaXNwb3NlKCk7XG4gICAgdGhpcy5fY29yZS5kaXNwb3NlKCk7XG4gIH1cbiAgcHVibGljIHNjcm9sbExpbmVzKGFtb3VudDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fdmVyaWZ5SW50ZWdlcnMoYW1vdW50KTtcbiAgICB0aGlzLl9jb3JlLnNjcm9sbExpbmVzKGFtb3VudCk7XG4gIH1cbiAgcHVibGljIHNjcm9sbFBhZ2VzKHBhZ2VDb3VudDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fdmVyaWZ5SW50ZWdlcnMocGFnZUNvdW50KTtcbiAgICB0aGlzLl9jb3JlLnNjcm9sbFBhZ2VzKHBhZ2VDb3VudCk7XG4gIH1cbiAgcHVibGljIHNjcm9sbFRvVG9wKCk6IHZvaWQge1xuICAgIHRoaXMuX2NvcmUuc2Nyb2xsVG9Ub3AoKTtcbiAgfVxuICBwdWJsaWMgc2Nyb2xsVG9Cb3R0b20oKTogdm9pZCB7XG4gICAgdGhpcy5fY29yZS5zY3JvbGxUb0JvdHRvbSgpO1xuICB9XG4gIHB1YmxpYyBzY3JvbGxUb0xpbmUobGluZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fdmVyaWZ5SW50ZWdlcnMobGluZSk7XG4gICAgdGhpcy5fY29yZS5zY3JvbGxUb0xpbmUobGluZSk7XG4gIH1cbiAgcHVibGljIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuX2NvcmUuY2xlYXIoKTtcbiAgfVxuICBwdWJsaWMgd3JpdGUoZGF0YTogc3RyaW5nIHwgVWludDhBcnJheSwgY2FsbGJhY2s/OiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5fY29yZS53cml0ZShkYXRhLCBjYWxsYmFjayk7XG4gIH1cbiAgcHVibGljIHdyaXRlVXRmOChkYXRhOiBVaW50OEFycmF5LCBjYWxsYmFjaz86ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLl9jb3JlLndyaXRlKGRhdGEsIGNhbGxiYWNrKTtcbiAgfVxuICBwdWJsaWMgd3JpdGVsbihkYXRhOiBzdHJpbmcgfCBVaW50OEFycmF5LCBjYWxsYmFjaz86ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLl9jb3JlLndyaXRlKGRhdGEpO1xuICAgIHRoaXMuX2NvcmUud3JpdGUoJ1xcclxcbicsIGNhbGxiYWNrKTtcbiAgfVxuICBwdWJsaWMgcGFzdGUoZGF0YTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5fY29yZS5wYXN0ZShkYXRhKTtcbiAgfVxuICBwdWJsaWMgZ2V0T3B0aW9uKGtleTogJ2JlbGxTb3VuZCcgfCAnYmVsbFN0eWxlJyB8ICdjdXJzb3JTdHlsZScgfCAnZm9udEZhbWlseScgfCAnbG9nTGV2ZWwnIHwgJ3JlbmRlcmVyVHlwZScgfCAndGVybU5hbWUnIHwgJ3dvcmRTZXBhcmF0b3InKTogc3RyaW5nO1xuICBwdWJsaWMgZ2V0T3B0aW9uKGtleTogJ2FsbG93VHJhbnNwYXJlbmN5JyB8ICdhbHRDbGlja01vdmVzQ3Vyc29yJyB8ICdjYW5jZWxFdmVudHMnIHwgJ2NvbnZlcnRFb2wnIHwgJ2N1cnNvckJsaW5rJyB8ICdkaXNhYmxlU3RkaW4nIHwgJ21hY09wdGlvbklzTWV0YScgfCAncmlnaHRDbGlja1NlbGVjdHNXb3JkJyB8ICdwb3BPbkJlbGwnIHwgJ3Zpc3VhbEJlbGwnKTogYm9vbGVhbjtcbiAgcHVibGljIGdldE9wdGlvbihrZXk6ICdjb2xzJyB8ICdmb250U2l6ZScgfCAnbGV0dGVyU3BhY2luZycgfCAnbGluZUhlaWdodCcgfCAncm93cycgfCAndGFiU3RvcFdpZHRoJyB8ICdzY3JvbGxiYWNrJyk6IG51bWJlcjtcbiAgcHVibGljIGdldE9wdGlvbihrZXk6ICdmb250V2VpZ2h0JyB8ICdmb250V2VpZ2h0Qm9sZCcpOiBGb250V2VpZ2h0O1xuICBwdWJsaWMgZ2V0T3B0aW9uKGtleTogc3RyaW5nKTogYW55O1xuICBwdWJsaWMgZ2V0T3B0aW9uKGtleTogYW55KTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5fY29yZS5vcHRpb25zU2VydmljZS5nZXRPcHRpb24oa2V5KTtcbiAgfVxuICBwdWJsaWMgc2V0T3B0aW9uKGtleTogJ2JlbGxTb3VuZCcgfCAnZm9udEZhbWlseScgfCAndGVybU5hbWUnIHwgJ3dvcmRTZXBhcmF0b3InLCB2YWx1ZTogc3RyaW5nKTogdm9pZDtcbiAgcHVibGljIHNldE9wdGlvbihrZXk6ICdmb250V2VpZ2h0JyB8ICdmb250V2VpZ2h0Qm9sZCcsIHZhbHVlOiAnbm9ybWFsJyB8ICdib2xkJyB8ICcxMDAnIHwgJzIwMCcgfCAnMzAwJyB8ICc0MDAnIHwgJzUwMCcgfCAnNjAwJyB8ICc3MDAnIHwgJzgwMCcgfCAnOTAwJyB8IG51bWJlcik6IHZvaWQ7XG4gIHB1YmxpYyBzZXRPcHRpb24oa2V5OiAnbG9nTGV2ZWwnLCB2YWx1ZTogJ2RlYnVnJyB8ICdpbmZvJyB8ICd3YXJuJyB8ICdlcnJvcicgfCAnb2ZmJyk6IHZvaWQ7XG4gIHB1YmxpYyBzZXRPcHRpb24oa2V5OiAnYmVsbFN0eWxlJywgdmFsdWU6ICdub25lJyB8ICd2aXN1YWwnIHwgJ3NvdW5kJyB8ICdib3RoJyk6IHZvaWQ7XG4gIHB1YmxpYyBzZXRPcHRpb24oa2V5OiAnY3Vyc29yU3R5bGUnLCB2YWx1ZTogJ2Jsb2NrJyB8ICd1bmRlcmxpbmUnIHwgJ2JhcicpOiB2b2lkO1xuICBwdWJsaWMgc2V0T3B0aW9uKGtleTogJ2FsbG93VHJhbnNwYXJlbmN5JyB8ICdhbHRDbGlja01vdmVzQ3Vyc29yJyB8ICdjYW5jZWxFdmVudHMnIHwgJ2NvbnZlcnRFb2wnIHwgJ2N1cnNvckJsaW5rJyB8ICdkaXNhYmxlU3RkaW4nIHwgJ21hY09wdGlvbklzTWV0YScgfCAncmlnaHRDbGlja1NlbGVjdHNXb3JkJyB8ICdwb3BPbkJlbGwnIHwgJ3Zpc3VhbEJlbGwnLCB2YWx1ZTogYm9vbGVhbik6IHZvaWQ7XG4gIHB1YmxpYyBzZXRPcHRpb24oa2V5OiAnZm9udFNpemUnIHwgJ2xldHRlclNwYWNpbmcnIHwgJ2xpbmVIZWlnaHQnIHwgJ3RhYlN0b3BXaWR0aCcgfCAnc2Nyb2xsYmFjaycsIHZhbHVlOiBudW1iZXIpOiB2b2lkO1xuICBwdWJsaWMgc2V0T3B0aW9uKGtleTogJ3RoZW1lJywgdmFsdWU6IElUaGVtZSk6IHZvaWQ7XG4gIHB1YmxpYyBzZXRPcHRpb24oa2V5OiAnY29scycgfCAncm93cycsIHZhbHVlOiBudW1iZXIpOiB2b2lkO1xuICBwdWJsaWMgc2V0T3B0aW9uKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZDtcbiAgcHVibGljIHNldE9wdGlvbihrZXk6IGFueSwgdmFsdWU6IGFueSk6IHZvaWQge1xuICAgIHRoaXMuX2NoZWNrUmVhZG9ubHlPcHRpb25zKGtleSk7XG4gICAgdGhpcy5fY29yZS5vcHRpb25zU2VydmljZS5zZXRPcHRpb24oa2V5LCB2YWx1ZSk7XG4gIH1cbiAgcHVibGljIHJlZnJlc2goc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl92ZXJpZnlJbnRlZ2VycyhzdGFydCwgZW5kKTtcbiAgICB0aGlzLl9jb3JlLnJlZnJlc2goc3RhcnQsIGVuZCk7XG4gIH1cbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xuICAgIHRoaXMuX2NvcmUucmVzZXQoKTtcbiAgfVxuICBwdWJsaWMgY2xlYXJUZXh0dXJlQXRsYXMoKTogdm9pZCB7XG4gICAgdGhpcy5fY29yZS5jbGVhclRleHR1cmVBdGxhcygpO1xuICB9XG4gIHB1YmxpYyBsb2FkQWRkb24oYWRkb246IElUZXJtaW5hbEFkZG9uKTogdm9pZCB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZG9uTWFuYWdlci5sb2FkQWRkb24odGhpcywgYWRkb24pO1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgZ2V0IHN0cmluZ3MoKTogSUxvY2FsaXphYmxlU3RyaW5ncyB7XG4gICAgcmV0dXJuIFN0cmluZ3M7XG4gIH1cblxuICBwcml2YXRlIF92ZXJpZnlJbnRlZ2VycyguLi52YWx1ZXM6IG51bWJlcltdKTogdm9pZCB7XG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gSW5maW5pdHkgfHwgaXNOYU4odmFsdWUpIHx8IHZhbHVlICUgMSAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgQVBJIG9ubHkgYWNjZXB0cyBpbnRlZ2VycycpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX3ZlcmlmeVBvc2l0aXZlSW50ZWdlcnMoLi4udmFsdWVzOiBudW1iZXJbXSk6IHZvaWQge1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAodmFsdWUgJiYgKHZhbHVlID09PSBJbmZpbml0eSB8fCBpc05hTih2YWx1ZSkgfHwgdmFsdWUgJSAxICE9PSAwIHx8IHZhbHVlIDwgMCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIEFQSSBvbmx5IGFjY2VwdHMgcG9zaXRpdmUgaW50ZWdlcnMnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSVJlbmRlckRpbWVuc2lvbnMsIElSZW5kZXJMYXllciB9IGZyb20gJ2Jyb3dzZXIvcmVuZGVyZXIvVHlwZXMnO1xuaW1wb3J0IHsgSUNlbGxEYXRhIH0gZnJvbSAnY29tbW9uL1R5cGVzJztcbmltcG9ydCB7IERFRkFVTFRfQ09MT1IsIFdISVRFU1BBQ0VfQ0VMTF9DSEFSLCBXSElURVNQQUNFX0NFTExfQ09ERSwgQXR0cmlidXRlcyB9IGZyb20gJ2NvbW1vbi9idWZmZXIvQ29uc3RhbnRzJztcbmltcG9ydCB7IElHbHlwaElkZW50aWZpZXIgfSBmcm9tICdicm93c2VyL3JlbmRlcmVyL2F0bGFzL1R5cGVzJztcbmltcG9ydCB7IERJTV9PUEFDSVRZLCBJTlZFUlRFRF9ERUZBVUxUX0NPTE9SLCBURVhUX0JBU0VMSU5FIH0gZnJvbSAnYnJvd3Nlci9yZW5kZXJlci9hdGxhcy9Db25zdGFudHMnO1xuaW1wb3J0IHsgQmFzZUNoYXJBdGxhcyB9IGZyb20gJ2Jyb3dzZXIvcmVuZGVyZXIvYXRsYXMvQmFzZUNoYXJBdGxhcyc7XG5pbXBvcnQgeyBhY3F1aXJlQ2hhckF0bGFzIH0gZnJvbSAnYnJvd3Nlci9yZW5kZXJlci9hdGxhcy9DaGFyQXRsYXNDYWNoZSc7XG5pbXBvcnQgeyBBdHRyaWJ1dGVEYXRhIH0gZnJvbSAnY29tbW9uL2J1ZmZlci9BdHRyaWJ1dGVEYXRhJztcbmltcG9ydCB7IElDb2xvclNldCwgSUNvbG9yIH0gZnJvbSAnYnJvd3Nlci9UeXBlcyc7XG5pbXBvcnQgeyBDZWxsRGF0YSB9IGZyb20gJ2NvbW1vbi9idWZmZXIvQ2VsbERhdGEnO1xuaW1wb3J0IHsgSUJ1ZmZlclNlcnZpY2UsIElPcHRpb25zU2VydmljZSB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5pbXBvcnQgeyB0aHJvd0lmRmFsc3kgfSBmcm9tICdicm93c2VyL3JlbmRlcmVyL1JlbmRlcmVyVXRpbHMnO1xuaW1wb3J0IHsgY2hhbm5lbHMsIGNvbG9yLCByZ2JhIH0gZnJvbSAnYnJvd3Nlci9Db2xvcic7XG5pbXBvcnQgeyByZW1vdmVFbGVtZW50RnJvbVBhcmVudCB9IGZyb20gJ2Jyb3dzZXIvRG9tJztcbmltcG9ydCB7IHRyeURyYXdDdXN0b21DaGFyIH0gZnJvbSAnYnJvd3Nlci9yZW5kZXJlci9DdXN0b21HbHlwaHMnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZVJlbmRlckxheWVyIGltcGxlbWVudHMgSVJlbmRlckxheWVyIHtcbiAgcHJpdmF0ZSBfY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcbiAgcHJvdGVjdGVkIF9jdHghOiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XG4gIHByaXZhdGUgX3NjYWxlZENoYXJXaWR0aDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfc2NhbGVkQ2hhckhlaWdodDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfc2NhbGVkQ2VsbFdpZHRoOiBudW1iZXIgPSAwO1xuICBwcml2YXRlIF9zY2FsZWRDZWxsSGVpZ2h0OiBudW1iZXIgPSAwO1xuICBwcml2YXRlIF9zY2FsZWRDaGFyTGVmdDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfc2NhbGVkQ2hhclRvcDogbnVtYmVyID0gMDtcblxuICBwcm90ZWN0ZWQgX2NoYXJBdGxhczogQmFzZUNoYXJBdGxhcyB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogQW4gb2JqZWN0IHRoYXQncyByZXVzZWQgd2hlbiBkcmF3aW5nIGdseXBocyBpbiBvcmRlciB0byByZWR1Y2UgR0MuXG4gICAqL1xuICBwcml2YXRlIF9jdXJyZW50R2x5cGhJZGVudGlmaWVyOiBJR2x5cGhJZGVudGlmaWVyID0ge1xuICAgIGNoYXJzOiAnJyxcbiAgICBjb2RlOiAwLFxuICAgIGJnOiAwLFxuICAgIGZnOiAwLFxuICAgIGJvbGQ6IGZhbHNlLFxuICAgIGRpbTogZmFsc2UsXG4gICAgaXRhbGljOiBmYWxzZVxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX2NvbnRhaW5lcjogSFRNTEVsZW1lbnQsXG4gICAgaWQ6IHN0cmluZyxcbiAgICB6SW5kZXg6IG51bWJlcixcbiAgICBwcml2YXRlIF9hbHBoYTogYm9vbGVhbixcbiAgICBwcm90ZWN0ZWQgX2NvbG9yczogSUNvbG9yU2V0LFxuICAgIHByaXZhdGUgX3JlbmRlcmVySWQ6IG51bWJlcixcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgX2J1ZmZlclNlcnZpY2U6IElCdWZmZXJTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCByZWFkb25seSBfb3B0aW9uc1NlcnZpY2U6IElPcHRpb25zU2VydmljZVxuICApIHtcbiAgICB0aGlzLl9jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICB0aGlzLl9jYW52YXMuY2xhc3NMaXN0LmFkZChgeHRlcm0tJHtpZH0tbGF5ZXJgKTtcbiAgICB0aGlzLl9jYW52YXMuc3R5bGUuekluZGV4ID0gekluZGV4LnRvU3RyaW5nKCk7XG4gICAgdGhpcy5faW5pdENhbnZhcygpO1xuICAgIHRoaXMuX2NvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLl9jYW52YXMpO1xuICB9XG5cbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgcmVtb3ZlRWxlbWVudEZyb21QYXJlbnQodGhpcy5fY2FudmFzKTtcbiAgICB0aGlzLl9jaGFyQXRsYXM/LmRpc3Bvc2UoKTtcbiAgfVxuXG4gIHByaXZhdGUgX2luaXRDYW52YXMoKTogdm9pZCB7XG4gICAgdGhpcy5fY3R4ID0gdGhyb3dJZkZhbHN5KHRoaXMuX2NhbnZhcy5nZXRDb250ZXh0KCcyZCcsIHsgYWxwaGE6IHRoaXMuX2FscGhhIH0pKTtcbiAgICAvLyBEcmF3IHRoZSBiYWNrZ3JvdW5kIGlmIHRoaXMgaXMgYW4gb3BhcXVlIGxheWVyXG4gICAgaWYgKCF0aGlzLl9hbHBoYSkge1xuICAgICAgdGhpcy5fY2xlYXJBbGwoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgb25PcHRpb25zQ2hhbmdlZCgpOiB2b2lkIHt9XG4gIHB1YmxpYyBvbkJsdXIoKTogdm9pZCB7fVxuICBwdWJsaWMgb25Gb2N1cygpOiB2b2lkIHt9XG4gIHB1YmxpYyBvbkN1cnNvck1vdmUoKTogdm9pZCB7fVxuICBwdWJsaWMgb25HcmlkQ2hhbmdlZChzdGFydFJvdzogbnVtYmVyLCBlbmRSb3c6IG51bWJlcik6IHZvaWQge31cbiAgcHVibGljIG9uU2VsZWN0aW9uQ2hhbmdlZChzdGFydDogW251bWJlciwgbnVtYmVyXSB8IHVuZGVmaW5lZCwgZW5kOiBbbnVtYmVyLCBudW1iZXJdIHwgdW5kZWZpbmVkLCBjb2x1bW5TZWxlY3RNb2RlOiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHt9XG5cbiAgcHVibGljIHNldENvbG9ycyhjb2xvclNldDogSUNvbG9yU2V0KTogdm9pZCB7XG4gICAgdGhpcy5fcmVmcmVzaENoYXJBdGxhcyhjb2xvclNldCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX3NldFRyYW5zcGFyZW5jeShhbHBoYTogYm9vbGVhbik6IHZvaWQge1xuICAgIC8vIERvIG5vdGhpbmcgd2hlbiBhbHBoYSBkb2Vzbid0IGNoYW5nZVxuICAgIGlmIChhbHBoYSA9PT0gdGhpcy5fYWxwaGEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgbmV3IGNhbnZhcyBhbmQgcmVwbGFjZSBvbGQgb25lXG4gICAgY29uc3Qgb2xkQ2FudmFzID0gdGhpcy5fY2FudmFzO1xuICAgIHRoaXMuX2FscGhhID0gYWxwaGE7XG4gICAgLy8gQ2xvbmluZyBwcmVzZXJ2ZXMgcHJvcGVydGllc1xuICAgIHRoaXMuX2NhbnZhcyA9IHRoaXMuX2NhbnZhcy5jbG9uZU5vZGUoKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcbiAgICB0aGlzLl9pbml0Q2FudmFzKCk7XG4gICAgdGhpcy5fY29udGFpbmVyLnJlcGxhY2VDaGlsZCh0aGlzLl9jYW52YXMsIG9sZENhbnZhcyk7XG5cbiAgICAvLyBSZWdlbmVyYXRlIGNoYXIgYXRsYXMgYW5kIGZvcmNlIGEgZnVsbCByZWRyYXdcbiAgICB0aGlzLl9yZWZyZXNoQ2hhckF0bGFzKHRoaXMuX2NvbG9ycyk7XG4gICAgdGhpcy5vbkdyaWRDaGFuZ2VkKDAsIHRoaXMuX2J1ZmZlclNlcnZpY2Uucm93cyAtIDEpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZnJlc2hlcyB0aGUgY2hhciBhdGxhcywgYXF1aXJpbmcgYSBuZXcgb25lIGlmIG5lY2Vzc2FyeS5cbiAgICogQHBhcmFtIGNvbG9yU2V0IFRoZSBjb2xvciBzZXQgdG8gdXNlIGZvciB0aGUgY2hhciBhdGxhcy5cbiAgICovXG4gIHByaXZhdGUgX3JlZnJlc2hDaGFyQXRsYXMoY29sb3JTZXQ6IElDb2xvclNldCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9zY2FsZWRDaGFyV2lkdGggPD0gMCAmJiB0aGlzLl9zY2FsZWRDaGFySGVpZ2h0IDw9IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fY2hhckF0bGFzID0gYWNxdWlyZUNoYXJBdGxhcyh0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLCB0aGlzLl9yZW5kZXJlcklkLCBjb2xvclNldCwgdGhpcy5fc2NhbGVkQ2hhcldpZHRoLCB0aGlzLl9zY2FsZWRDaGFySGVpZ2h0KTtcbiAgICB0aGlzLl9jaGFyQXRsYXMud2FybVVwKCk7XG4gIH1cblxuICBwdWJsaWMgcmVzaXplKGRpbTogSVJlbmRlckRpbWVuc2lvbnMpOiB2b2lkIHtcbiAgICB0aGlzLl9zY2FsZWRDZWxsV2lkdGggPSBkaW0uc2NhbGVkQ2VsbFdpZHRoO1xuICAgIHRoaXMuX3NjYWxlZENlbGxIZWlnaHQgPSBkaW0uc2NhbGVkQ2VsbEhlaWdodDtcbiAgICB0aGlzLl9zY2FsZWRDaGFyV2lkdGggPSBkaW0uc2NhbGVkQ2hhcldpZHRoO1xuICAgIHRoaXMuX3NjYWxlZENoYXJIZWlnaHQgPSBkaW0uc2NhbGVkQ2hhckhlaWdodDtcbiAgICB0aGlzLl9zY2FsZWRDaGFyTGVmdCA9IGRpbS5zY2FsZWRDaGFyTGVmdDtcbiAgICB0aGlzLl9zY2FsZWRDaGFyVG9wID0gZGltLnNjYWxlZENoYXJUb3A7XG4gICAgdGhpcy5fY2FudmFzLndpZHRoID0gZGltLnNjYWxlZENhbnZhc1dpZHRoO1xuICAgIHRoaXMuX2NhbnZhcy5oZWlnaHQgPSBkaW0uc2NhbGVkQ2FudmFzSGVpZ2h0O1xuICAgIHRoaXMuX2NhbnZhcy5zdHlsZS53aWR0aCA9IGAke2RpbS5jYW52YXNXaWR0aH1weGA7XG4gICAgdGhpcy5fY2FudmFzLnN0eWxlLmhlaWdodCA9IGAke2RpbS5jYW52YXNIZWlnaHR9cHhgO1xuXG4gICAgLy8gRHJhdyB0aGUgYmFja2dyb3VuZCBpZiB0aGlzIGlzIGFuIG9wYXF1ZSBsYXllclxuICAgIGlmICghdGhpcy5fYWxwaGEpIHtcbiAgICAgIHRoaXMuX2NsZWFyQWxsKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fcmVmcmVzaENoYXJBdGxhcyh0aGlzLl9jb2xvcnMpO1xuICB9XG5cbiAgcHVibGljIGFic3RyYWN0IHJlc2V0KCk6IHZvaWQ7XG5cbiAgcHVibGljIGNsZWFyVGV4dHVyZUF0bGFzKCk6IHZvaWQge1xuICAgIHRoaXMuX2NoYXJBdGxhcz8uY2xlYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaWxscyAxKyBjZWxscyBjb21wbGV0ZWx5LiBUaGlzIHVzZXMgdGhlIGV4aXN0aW5nIGZpbGxTdHlsZSBvbiB0aGUgY29udGV4dC5cbiAgICogQHBhcmFtIHggVGhlIGNvbHVtbiB0byBzdGFydCBhdC5cbiAgICogQHBhcmFtIHkgVGhlIHJvdyB0byBzdGFydCBhdFxuICAgKiBAcGFyYW0gd2lkdGggVGhlIG51bWJlciBvZiBjb2x1bW5zIHRvIGZpbGwuXG4gICAqIEBwYXJhbSBoZWlnaHQgVGhlIG51bWJlciBvZiByb3dzIHRvIGZpbGwuXG4gICAqL1xuICBwcm90ZWN0ZWQgX2ZpbGxDZWxscyh4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9jdHguZmlsbFJlY3QoXG4gICAgICB4ICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoLFxuICAgICAgeSAqIHRoaXMuX3NjYWxlZENlbGxIZWlnaHQsXG4gICAgICB3aWR0aCAqIHRoaXMuX3NjYWxlZENlbGxXaWR0aCxcbiAgICAgIGhlaWdodCAqIHRoaXMuX3NjYWxlZENlbGxIZWlnaHQpO1xuICB9XG5cbiAgLyoqXG4gICAgICogRmlsbHMgYSAxcHggbGluZSAoMnB4IG9uIEhEUEkpIGF0IHRoZSBtaWRkbGUgb2YgdGhlIGNlbGwuIFRoaXMgdXNlcyB0aGVcbiAgICAgKiBleGlzdGluZyBmaWxsU3R5bGUgb24gdGhlIGNvbnRleHQuXG4gICAgICogQHBhcmFtIHggVGhlIGNvbHVtbiB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB5IFRoZSByb3cgdG8gZmlsbC5cbiAgICAgKi9cbiAgcHJvdGVjdGVkIF9maWxsTWlkZGxlTGluZUF0Q2VsbHMoeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIgPSAxKTogdm9pZCB7XG4gICAgY29uc3QgY2VsbE9mZnNldCA9IE1hdGguY2VpbCh0aGlzLl9zY2FsZWRDZWxsSGVpZ2h0ICogMC41KTtcbiAgICB0aGlzLl9jdHguZmlsbFJlY3QoXG4gICAgICB4ICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoLFxuICAgICAgKHkgKyAxKSAqIHRoaXMuX3NjYWxlZENlbGxIZWlnaHQgLSBjZWxsT2Zmc2V0IC0gd2luZG93LmRldmljZVBpeGVsUmF0aW8sXG4gICAgICB3aWR0aCAqIHRoaXMuX3NjYWxlZENlbGxXaWR0aCxcbiAgICAgIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaWxscyBhIDFweCBsaW5lICgycHggb24gSERQSSkgYXQgdGhlIGJvdHRvbSBvZiB0aGUgY2VsbC4gVGhpcyB1c2VzIHRoZVxuICAgKiBleGlzdGluZyBmaWxsU3R5bGUgb24gdGhlIGNvbnRleHQuXG4gICAqIEBwYXJhbSB4IFRoZSBjb2x1bW4gdG8gZmlsbC5cbiAgICogQHBhcmFtIHkgVGhlIHJvdyB0byBmaWxsLlxuICAgKi9cbiAgcHJvdGVjdGVkIF9maWxsQm90dG9tTGluZUF0Q2VsbHMoeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIgPSAxKTogdm9pZCB7XG4gICAgdGhpcy5fY3R4LmZpbGxSZWN0KFxuICAgICAgeCAqIHRoaXMuX3NjYWxlZENlbGxXaWR0aCxcbiAgICAgICh5ICsgMSkgKiB0aGlzLl9zY2FsZWRDZWxsSGVpZ2h0IC0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gLSAxIC8qIEVuc3VyZSBpdCdzIGRyYXduIHdpdGhpbiB0aGUgY2VsbCAqLyxcbiAgICAgIHdpZHRoICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoLFxuICAgICAgd2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbGxzIGEgMXB4IGxpbmUgKDJweCBvbiBIRFBJKSBhdCB0aGUgbGVmdCBvZiB0aGUgY2VsbC4gVGhpcyB1c2VzIHRoZVxuICAgKiBleGlzdGluZyBmaWxsU3R5bGUgb24gdGhlIGNvbnRleHQuXG4gICAqIEBwYXJhbSB4IFRoZSBjb2x1bW4gdG8gZmlsbC5cbiAgICogQHBhcmFtIHkgVGhlIHJvdyB0byBmaWxsLlxuICAgKi9cbiAgcHJvdGVjdGVkIF9maWxsTGVmdExpbmVBdENlbGwoeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9jdHguZmlsbFJlY3QoXG4gICAgICB4ICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoLFxuICAgICAgeSAqIHRoaXMuX3NjYWxlZENlbGxIZWlnaHQsXG4gICAgICB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyAqIHdpZHRoLFxuICAgICAgdGhpcy5fc2NhbGVkQ2VsbEhlaWdodCk7XG4gIH1cblxuICAvKipcbiAgICogU3Ryb2tlcyBhIDFweCByZWN0YW5nbGUgKDJweCBvbiBIRFBJKSBhcm91bmQgYSBjZWxsLiBUaGlzIHVzZXMgdGhlIGV4aXN0aW5nXG4gICAqIHN0cm9rZVN0eWxlIG9uIHRoZSBjb250ZXh0LlxuICAgKiBAcGFyYW0geCBUaGUgY29sdW1uIHRvIGZpbGwuXG4gICAqIEBwYXJhbSB5IFRoZSByb3cgdG8gZmlsbC5cbiAgICovXG4gIHByb3RlY3RlZCBfc3Ryb2tlUmVjdEF0Q2VsbCh4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9jdHgubGluZVdpZHRoID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gICAgdGhpcy5fY3R4LnN0cm9rZVJlY3QoXG4gICAgICB4ICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoICsgd2luZG93LmRldmljZVBpeGVsUmF0aW8gLyAyLFxuICAgICAgeSAqIHRoaXMuX3NjYWxlZENlbGxIZWlnaHQgKyAod2luZG93LmRldmljZVBpeGVsUmF0aW8gLyAyKSxcbiAgICAgIHdpZHRoICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoIC0gd2luZG93LmRldmljZVBpeGVsUmF0aW8sXG4gICAgICAoaGVpZ2h0ICogdGhpcy5fc2NhbGVkQ2VsbEhlaWdodCkgLSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIHRoZSBlbnRpcmUgY2FudmFzLlxuICAgKi9cbiAgcHJvdGVjdGVkIF9jbGVhckFsbCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fYWxwaGEpIHtcbiAgICAgIHRoaXMuX2N0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5fY2FudmFzLndpZHRoLCB0aGlzLl9jYW52YXMuaGVpZ2h0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IHRoaXMuX2NvbG9ycy5iYWNrZ3JvdW5kLmNzcztcbiAgICAgIHRoaXMuX2N0eC5maWxsUmVjdCgwLCAwLCB0aGlzLl9jYW52YXMud2lkdGgsIHRoaXMuX2NhbnZhcy5oZWlnaHQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhcnMgMSsgY2VsbHMgY29tcGxldGVseS5cbiAgICogQHBhcmFtIHggVGhlIGNvbHVtbiB0byBzdGFydCBhdC5cbiAgICogQHBhcmFtIHkgVGhlIHJvdyB0byBzdGFydCBhdC5cbiAgICogQHBhcmFtIHdpZHRoIFRoZSBudW1iZXIgb2YgY29sdW1ucyB0byBjbGVhci5cbiAgICogQHBhcmFtIGhlaWdodCBUaGUgbnVtYmVyIG9mIHJvd3MgdG8gY2xlYXIuXG4gICAqL1xuICBwcm90ZWN0ZWQgX2NsZWFyQ2VsbHMoeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2FscGhhKSB7XG4gICAgICB0aGlzLl9jdHguY2xlYXJSZWN0KFxuICAgICAgICB4ICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoLFxuICAgICAgICB5ICogdGhpcy5fc2NhbGVkQ2VsbEhlaWdodCxcbiAgICAgICAgd2lkdGggKiB0aGlzLl9zY2FsZWRDZWxsV2lkdGgsXG4gICAgICAgIGhlaWdodCAqIHRoaXMuX3NjYWxlZENlbGxIZWlnaHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gdGhpcy5fY29sb3JzLmJhY2tncm91bmQuY3NzO1xuICAgICAgdGhpcy5fY3R4LmZpbGxSZWN0KFxuICAgICAgICB4ICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoLFxuICAgICAgICB5ICogdGhpcy5fc2NhbGVkQ2VsbEhlaWdodCxcbiAgICAgICAgd2lkdGggKiB0aGlzLl9zY2FsZWRDZWxsV2lkdGgsXG4gICAgICAgIGhlaWdodCAqIHRoaXMuX3NjYWxlZENlbGxIZWlnaHQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3cyBhIHRydWVjb2xvciBjaGFyYWN0ZXIgYXQgdGhlIGNlbGwuIFRoZSBjaGFyYWN0ZXIgd2lsbCBiZSBjbGlwcGVkIHRvXG4gICAqIGVuc3VyZSB0aGF0IGl0IGZpdHMgd2l0aCB0aGUgY2VsbCwgaW5jbHVkaW5nIHRoZSBjZWxsIHRvIHRoZSByaWdodCBpZiBpdCdzXG4gICAqIGEgd2lkZSBjaGFyYWN0ZXIuIFRoaXMgdXNlcyB0aGUgZXhpc3RpbmcgZmlsbFN0eWxlIG9uIHRoZSBjb250ZXh0LlxuICAgKiBAcGFyYW0gY2VsbCBUaGUgY2VsbCBkYXRhIGZvciB0aGUgY2hhcmFjdGVyIHRvIGRyYXcuXG4gICAqIEBwYXJhbSB4IFRoZSBjb2x1bW4gdG8gZHJhdyBhdC5cbiAgICogQHBhcmFtIHkgVGhlIHJvdyB0byBkcmF3IGF0LlxuICAgKiBAcGFyYW0gY29sb3IgVGhlIGNvbG9yIG9mIHRoZSBjaGFyYWN0ZXIuXG4gICAqL1xuICBwcm90ZWN0ZWQgX2ZpbGxDaGFyVHJ1ZUNvbG9yKGNlbGw6IENlbGxEYXRhLCB4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2N0eC5mb250ID0gdGhpcy5fZ2V0Rm9udChmYWxzZSwgZmFsc2UpO1xuICAgIHRoaXMuX2N0eC50ZXh0QmFzZWxpbmUgPSBURVhUX0JBU0VMSU5FO1xuICAgIHRoaXMuX2NsaXBSb3coeSk7XG5cbiAgICAvLyBEcmF3IGN1c3RvbSBjaGFyYWN0ZXJzIGlmIGFwcGxpY2FibGVcbiAgICBsZXQgZHJhd1N1Y2Nlc3MgPSBmYWxzZTtcbiAgICBpZiAodGhpcy5fb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy5jdXN0b21HbHlwaHMgIT09IGZhbHNlKSB7XG4gICAgICBkcmF3U3VjY2VzcyA9IHRyeURyYXdDdXN0b21DaGFyKHRoaXMuX2N0eCwgY2VsbC5nZXRDaGFycygpLCB4ICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoLCB5ICogdGhpcy5fc2NhbGVkQ2VsbEhlaWdodCwgdGhpcy5fc2NhbGVkQ2VsbFdpZHRoLCB0aGlzLl9zY2FsZWRDZWxsSGVpZ2h0KTtcbiAgICB9XG5cbiAgICAvLyBEcmF3IHRoZSBjaGFyYWN0ZXJcbiAgICBpZiAoIWRyYXdTdWNjZXNzKSB7XG4gICAgICB0aGlzLl9jdHguZmlsbFRleHQoXG4gICAgICAgIGNlbGwuZ2V0Q2hhcnMoKSxcbiAgICAgICAgeCAqIHRoaXMuX3NjYWxlZENlbGxXaWR0aCArIHRoaXMuX3NjYWxlZENoYXJMZWZ0LFxuICAgICAgICB5ICogdGhpcy5fc2NhbGVkQ2VsbEhlaWdodCArIHRoaXMuX3NjYWxlZENoYXJUb3AgKyB0aGlzLl9zY2FsZWRDaGFySGVpZ2h0KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRHJhd3Mgb25lIG9yIG1vcmUgY2hhcmFjdGVycyBhdCBhIGNlbGwuIElmIHBvc3NpYmxlIHRoaXMgd2lsbCBkcmF3IHVzaW5nXG4gICAqIHRoZSBjaGFyYWN0ZXIgYXRsYXMgdG8gcmVkdWNlIGRyYXcgdGltZS5cbiAgICogQHBhcmFtIGNoYXJzIFRoZSBjaGFyYWN0ZXIgb3IgY2hhcmFjdGVycy5cbiAgICogQHBhcmFtIGNvZGUgVGhlIGNoYXJhY3RlciBjb2RlLlxuICAgKiBAcGFyYW0gd2lkdGggVGhlIHdpZHRoIG9mIHRoZSBjaGFyYWN0ZXJzLlxuICAgKiBAcGFyYW0geCBUaGUgY29sdW1uIHRvIGRyYXcgYXQuXG4gICAqIEBwYXJhbSB5IFRoZSByb3cgdG8gZHJhdyBhdC5cbiAgICogQHBhcmFtIGZnIFRoZSBmb3JlZ3JvdW5kIGNvbG9yLCBpbiB0aGUgZm9ybWF0IHN0b3JlZCB3aXRoaW4gdGhlIGF0dHJpYnV0ZXMuXG4gICAqIEBwYXJhbSBiZyBUaGUgYmFja2dyb3VuZCBjb2xvciwgaW4gdGhlIGZvcm1hdCBzdG9yZWQgd2l0aGluIHRoZSBhdHRyaWJ1dGVzLlxuICAgKiBUaGlzIGlzIHVzZWQgdG8gdmFsaWRhdGUgd2hldGhlciBhIGNhY2hlZCBpbWFnZSBjYW4gYmUgdXNlZC5cbiAgICogQHBhcmFtIGJvbGQgV2hldGhlciB0aGUgdGV4dCBpcyBib2xkLlxuICAgKi9cbiAgcHJvdGVjdGVkIF9kcmF3Q2hhcnMoY2VsbDogSUNlbGxEYXRhLCB4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IGNvbnRyYXN0Q29sb3IgPSB0aGlzLl9nZXRDb250cmFzdENvbG9yKGNlbGwpO1xuXG4gICAgLy8gc2tpcCBjYWNoZSByaWdodCBhd2F5IGlmIHdlIGRyYXcgaW4gUkdCXG4gICAgLy8gTm90ZTogdG8gYXZvaWQgYmFkIHJ1bnRpbWUgSm9pbmVkQ2VsbERhdGEgd2lsbCBiZSBza2lwcGVkXG4gICAgLy8gICAgICAgaW4gdGhlIGNhY2hlIGhhbmRsZXIgaXRzZWxmIChhdGxhc0RpZERyYXcgPT0gZmFsc2UpIGFuZFxuICAgIC8vICAgICAgIGZhbGwgdGhyb3VnaCB0byB1bmNhY2hlZCBsYXRlciBkb3duIGJlbG93XG4gICAgaWYgKGNvbnRyYXN0Q29sb3IgfHwgY2VsbC5pc0ZnUkdCKCkgfHwgY2VsbC5pc0JnUkdCKCkpIHtcbiAgICAgIHRoaXMuX2RyYXdVbmNhY2hlZENoYXJzKGNlbGwsIHgsIHksIGNvbnRyYXN0Q29sb3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBmZztcbiAgICBsZXQgYmc7XG4gICAgaWYgKGNlbGwuaXNJbnZlcnNlKCkpIHtcbiAgICAgIGZnID0gKGNlbGwuaXNCZ0RlZmF1bHQoKSkgPyBJTlZFUlRFRF9ERUZBVUxUX0NPTE9SIDogY2VsbC5nZXRCZ0NvbG9yKCk7XG4gICAgICBiZyA9IChjZWxsLmlzRmdEZWZhdWx0KCkpID8gSU5WRVJURURfREVGQVVMVF9DT0xPUiA6IGNlbGwuZ2V0RmdDb2xvcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBiZyA9IChjZWxsLmlzQmdEZWZhdWx0KCkpID8gREVGQVVMVF9DT0xPUiA6IGNlbGwuZ2V0QmdDb2xvcigpO1xuICAgICAgZmcgPSAoY2VsbC5pc0ZnRGVmYXVsdCgpKSA/IERFRkFVTFRfQ09MT1IgOiBjZWxsLmdldEZnQ29sb3IoKTtcbiAgICB9XG5cbiAgICBjb25zdCBkcmF3SW5CcmlnaHRDb2xvciA9IHRoaXMuX29wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMuZHJhd0JvbGRUZXh0SW5CcmlnaHRDb2xvcnMgJiYgY2VsbC5pc0JvbGQoKSAmJiBmZyA8IDg7XG5cbiAgICBmZyArPSBkcmF3SW5CcmlnaHRDb2xvciA/IDggOiAwO1xuICAgIHRoaXMuX2N1cnJlbnRHbHlwaElkZW50aWZpZXIuY2hhcnMgPSBjZWxsLmdldENoYXJzKCkgfHwgV0hJVEVTUEFDRV9DRUxMX0NIQVI7XG4gICAgdGhpcy5fY3VycmVudEdseXBoSWRlbnRpZmllci5jb2RlID0gY2VsbC5nZXRDb2RlKCkgfHwgV0hJVEVTUEFDRV9DRUxMX0NPREU7XG4gICAgdGhpcy5fY3VycmVudEdseXBoSWRlbnRpZmllci5iZyA9IGJnO1xuICAgIHRoaXMuX2N1cnJlbnRHbHlwaElkZW50aWZpZXIuZmcgPSBmZztcbiAgICB0aGlzLl9jdXJyZW50R2x5cGhJZGVudGlmaWVyLmJvbGQgPSAhIWNlbGwuaXNCb2xkKCk7XG4gICAgdGhpcy5fY3VycmVudEdseXBoSWRlbnRpZmllci5kaW0gPSAhIWNlbGwuaXNEaW0oKTtcbiAgICB0aGlzLl9jdXJyZW50R2x5cGhJZGVudGlmaWVyLml0YWxpYyA9ICEhY2VsbC5pc0l0YWxpYygpO1xuICAgIGNvbnN0IGF0bGFzRGlkRHJhdyA9IHRoaXMuX2NoYXJBdGxhcz8uZHJhdyh0aGlzLl9jdHgsIHRoaXMuX2N1cnJlbnRHbHlwaElkZW50aWZpZXIsIHggKiB0aGlzLl9zY2FsZWRDZWxsV2lkdGggKyB0aGlzLl9zY2FsZWRDaGFyTGVmdCwgeSAqIHRoaXMuX3NjYWxlZENlbGxIZWlnaHQgKyB0aGlzLl9zY2FsZWRDaGFyVG9wKTtcblxuICAgIGlmICghYXRsYXNEaWREcmF3KSB7XG4gICAgICB0aGlzLl9kcmF3VW5jYWNoZWRDaGFycyhjZWxsLCB4LCB5KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRHJhd3Mgb25lIG9yIG1vcmUgY2hhcmFjdGVycyBhdCBvbmUgb3IgbW9yZSBjZWxscy4gVGhlIGNoYXJhY3RlcihzKSB3aWxsIGJlXG4gICAqIGNsaXBwZWQgdG8gZW5zdXJlIHRoYXQgdGhleSBmaXQgd2l0aCB0aGUgY2VsbChzKSwgaW5jbHVkaW5nIHRoZSBjZWxsIHRvIHRoZVxuICAgKiByaWdodCBpZiB0aGUgbGFzdCBjaGFyYWN0ZXIgaXMgYSB3aWRlIGNoYXJhY3Rlci5cbiAgICogQHBhcmFtIGNoYXJzIFRoZSBjaGFyYWN0ZXIuXG4gICAqIEBwYXJhbSB3aWR0aCBUaGUgd2lkdGggb2YgdGhlIGNoYXJhY3Rlci5cbiAgICogQHBhcmFtIGZnIFRoZSBmb3JlZ3JvdW5kIGNvbG9yLCBpbiB0aGUgZm9ybWF0IHN0b3JlZCB3aXRoaW4gdGhlIGF0dHJpYnV0ZXMuXG4gICAqIEBwYXJhbSB4IFRoZSBjb2x1bW4gdG8gZHJhdyBhdC5cbiAgICogQHBhcmFtIHkgVGhlIHJvdyB0byBkcmF3IGF0LlxuICAgKi9cbiAgcHJpdmF0ZSBfZHJhd1VuY2FjaGVkQ2hhcnMoY2VsbDogSUNlbGxEYXRhLCB4OiBudW1iZXIsIHk6IG51bWJlciwgZmdPdmVycmlkZT86IElDb2xvcik6IHZvaWQge1xuICAgIHRoaXMuX2N0eC5zYXZlKCk7XG4gICAgdGhpcy5fY3R4LmZvbnQgPSB0aGlzLl9nZXRGb250KCEhY2VsbC5pc0JvbGQoKSwgISFjZWxsLmlzSXRhbGljKCkpO1xuICAgIHRoaXMuX2N0eC50ZXh0QmFzZWxpbmUgPSBURVhUX0JBU0VMSU5FO1xuXG4gICAgaWYgKGNlbGwuaXNJbnZlcnNlKCkpIHtcbiAgICAgIGlmIChmZ092ZXJyaWRlKSB7XG4gICAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSBmZ092ZXJyaWRlLmNzcztcbiAgICAgIH0gZWxzZSBpZiAoY2VsbC5pc0JnRGVmYXVsdCgpKSB7XG4gICAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSBjb2xvci5vcGFxdWUodGhpcy5fY29sb3JzLmJhY2tncm91bmQpLmNzcztcbiAgICAgIH0gZWxzZSBpZiAoY2VsbC5pc0JnUkdCKCkpIHtcbiAgICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IGByZ2IoJHtBdHRyaWJ1dGVEYXRhLnRvQ29sb3JSR0IoY2VsbC5nZXRCZ0NvbG9yKCkpLmpvaW4oJywnKX0pYDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBiZyA9IGNlbGwuZ2V0QmdDb2xvcigpO1xuICAgICAgICBpZiAodGhpcy5fb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy5kcmF3Qm9sZFRleHRJbkJyaWdodENvbG9ycyAmJiBjZWxsLmlzQm9sZCgpICYmIGJnIDwgOCkge1xuICAgICAgICAgIGJnICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IHRoaXMuX2NvbG9ycy5hbnNpW2JnXS5jc3M7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChmZ092ZXJyaWRlKSB7XG4gICAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSBmZ092ZXJyaWRlLmNzcztcbiAgICAgIH0gZWxzZSBpZiAoY2VsbC5pc0ZnRGVmYXVsdCgpKSB7XG4gICAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLl9jb2xvcnMuZm9yZWdyb3VuZC5jc3M7XG4gICAgICB9IGVsc2UgaWYgKGNlbGwuaXNGZ1JHQigpKSB7XG4gICAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSBgcmdiKCR7QXR0cmlidXRlRGF0YS50b0NvbG9yUkdCKGNlbGwuZ2V0RmdDb2xvcigpKS5qb2luKCcsJyl9KWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgZmcgPSBjZWxsLmdldEZnQ29sb3IoKTtcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMuZHJhd0JvbGRUZXh0SW5CcmlnaHRDb2xvcnMgJiYgY2VsbC5pc0JvbGQoKSAmJiBmZyA8IDgpIHtcbiAgICAgICAgICBmZyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLl9jb2xvcnMuYW5zaVtmZ10uY3NzO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2NsaXBSb3coeSk7XG5cbiAgICAvLyBBcHBseSBhbHBoYSB0byBkaW0gdGhlIGNoYXJhY3RlclxuICAgIGlmIChjZWxsLmlzRGltKCkpIHtcbiAgICAgIHRoaXMuX2N0eC5nbG9iYWxBbHBoYSA9IERJTV9PUEFDSVRZO1xuICAgIH1cblxuICAgIC8vIERyYXcgY3VzdG9tIGNoYXJhY3RlcnMgaWYgYXBwbGljYWJsZVxuICAgIGxldCBkcmF3U3VjY2VzcyA9IGZhbHNlO1xuICAgIGlmICh0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLmN1c3RvbUdseXBocyAhPT0gZmFsc2UpIHtcbiAgICAgIGRyYXdTdWNjZXNzID0gdHJ5RHJhd0N1c3RvbUNoYXIodGhpcy5fY3R4LCBjZWxsLmdldENoYXJzKCksIHggKiB0aGlzLl9zY2FsZWRDZWxsV2lkdGgsIHkgKiB0aGlzLl9zY2FsZWRDZWxsSGVpZ2h0LCB0aGlzLl9zY2FsZWRDZWxsV2lkdGgsIHRoaXMuX3NjYWxlZENlbGxIZWlnaHQpO1xuICAgIH1cblxuICAgIC8vIERyYXcgdGhlIGNoYXJhY3RlclxuICAgIGlmICghZHJhd1N1Y2Nlc3MpIHtcbiAgICAgIHRoaXMuX2N0eC5maWxsVGV4dChcbiAgICAgICAgY2VsbC5nZXRDaGFycygpLFxuICAgICAgICB4ICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoICsgdGhpcy5fc2NhbGVkQ2hhckxlZnQsXG4gICAgICAgIHkgKiB0aGlzLl9zY2FsZWRDZWxsSGVpZ2h0ICsgdGhpcy5fc2NhbGVkQ2hhclRvcCArIHRoaXMuX3NjYWxlZENoYXJIZWlnaHQpO1xuICAgIH1cblxuICAgIHRoaXMuX2N0eC5yZXN0b3JlKCk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBDbGlwcyBhIHJvdyB0byBlbnN1cmUgbm8gcGl4ZWxzIHdpbGwgYmUgZHJhd24gb3V0c2lkZSB0aGUgY2VsbHMgaW4gdGhlIHJvdy5cbiAgICogQHBhcmFtIHkgVGhlIHJvdyB0byBjbGlwLlxuICAgKi9cbiAgcHJpdmF0ZSBfY2xpcFJvdyh5OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9jdHguYmVnaW5QYXRoKCk7XG4gICAgdGhpcy5fY3R4LnJlY3QoXG4gICAgICAwLFxuICAgICAgeSAqIHRoaXMuX3NjYWxlZENlbGxIZWlnaHQsXG4gICAgICB0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHMgKiB0aGlzLl9zY2FsZWRDZWxsV2lkdGgsXG4gICAgICB0aGlzLl9zY2FsZWRDZWxsSGVpZ2h0KTtcbiAgICB0aGlzLl9jdHguY2xpcCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGN1cnJlbnQgZm9udC5cbiAgICogQHBhcmFtIGlzQm9sZCBJZiB3ZSBzaG91bGQgdXNlIHRoZSBib2xkIGZvbnRXZWlnaHQuXG4gICAqL1xuICBwcm90ZWN0ZWQgX2dldEZvbnQoaXNCb2xkOiBib29sZWFuLCBpc0l0YWxpYzogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgY29uc3QgZm9udFdlaWdodCA9IGlzQm9sZCA/IHRoaXMuX29wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMuZm9udFdlaWdodEJvbGQgOiB0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLmZvbnRXZWlnaHQ7XG4gICAgY29uc3QgZm9udFN0eWxlID0gaXNJdGFsaWMgPyAnaXRhbGljJyA6ICcnO1xuXG4gICAgcmV0dXJuIGAke2ZvbnRTdHlsZX0gJHtmb250V2VpZ2h0fSAke3RoaXMuX29wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMuZm9udFNpemUgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb31weCAke3RoaXMuX29wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMuZm9udEZhbWlseX1gO1xuICB9XG5cbiAgcHJpdmF0ZSBfZ2V0Q29udHJhc3RDb2xvcihjZWxsOiBDZWxsRGF0YSk6IElDb2xvciB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMuX29wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMubWluaW11bUNvbnRyYXN0UmF0aW8gPT09IDEpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gVHJ5IGdldCBmcm9tIGNhY2hlIGZpcnN0XG4gICAgY29uc3QgYWRqdXN0ZWRDb2xvciA9IHRoaXMuX2NvbG9ycy5jb250cmFzdENhY2hlLmdldENvbG9yKGNlbGwuYmcsIGNlbGwuZmcpO1xuICAgIGlmIChhZGp1c3RlZENvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBhZGp1c3RlZENvbG9yIHx8IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBsZXQgZmdDb2xvciA9IGNlbGwuZ2V0RmdDb2xvcigpO1xuICAgIGxldCBmZ0NvbG9yTW9kZSA9IGNlbGwuZ2V0RmdDb2xvck1vZGUoKTtcbiAgICBsZXQgYmdDb2xvciA9IGNlbGwuZ2V0QmdDb2xvcigpO1xuICAgIGxldCBiZ0NvbG9yTW9kZSA9IGNlbGwuZ2V0QmdDb2xvck1vZGUoKTtcbiAgICBjb25zdCBpc0ludmVyc2UgPSAhIWNlbGwuaXNJbnZlcnNlKCk7XG4gICAgY29uc3QgaXNCb2xkID0gISFjZWxsLmlzSW52ZXJzZSgpO1xuICAgIGlmIChpc0ludmVyc2UpIHtcbiAgICAgIGNvbnN0IHRlbXAgPSBmZ0NvbG9yO1xuICAgICAgZmdDb2xvciA9IGJnQ29sb3I7XG4gICAgICBiZ0NvbG9yID0gdGVtcDtcbiAgICAgIGNvbnN0IHRlbXAyID0gZmdDb2xvck1vZGU7XG4gICAgICBmZ0NvbG9yTW9kZSA9IGJnQ29sb3JNb2RlO1xuICAgICAgYmdDb2xvck1vZGUgPSB0ZW1wMjtcbiAgICB9XG5cbiAgICBjb25zdCBiZ1JnYmEgPSB0aGlzLl9yZXNvbHZlQmFja2dyb3VuZFJnYmEoYmdDb2xvck1vZGUsIGJnQ29sb3IsIGlzSW52ZXJzZSk7XG4gICAgY29uc3QgZmdSZ2JhID0gdGhpcy5fcmVzb2x2ZUZvcmVncm91bmRSZ2JhKGZnQ29sb3JNb2RlLCBmZ0NvbG9yLCBpc0ludmVyc2UsIGlzQm9sZCk7XG4gICAgY29uc3QgcmVzdWx0ID0gcmdiYS5lbnN1cmVDb250cmFzdFJhdGlvKGJnUmdiYSwgZmdSZ2JhLCB0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLm1pbmltdW1Db250cmFzdFJhdGlvKTtcblxuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICB0aGlzLl9jb2xvcnMuY29udHJhc3RDYWNoZS5zZXRDb2xvcihjZWxsLmJnLCBjZWxsLmZnLCBudWxsKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY29uc3QgY29sb3I6IElDb2xvciA9IHtcbiAgICAgIGNzczogY2hhbm5lbHMudG9Dc3MoXG4gICAgICAgIChyZXN1bHQgPj4gMjQpICYgMHhGRixcbiAgICAgICAgKHJlc3VsdCA+PiAxNikgJiAweEZGLFxuICAgICAgICAocmVzdWx0ID4+IDgpICYgMHhGRlxuICAgICAgKSxcbiAgICAgIHJnYmE6IHJlc3VsdFxuICAgIH07XG4gICAgdGhpcy5fY29sb3JzLmNvbnRyYXN0Q2FjaGUuc2V0Q29sb3IoY2VsbC5iZywgY2VsbC5mZywgY29sb3IpO1xuXG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVzb2x2ZUJhY2tncm91bmRSZ2JhKGJnQ29sb3JNb2RlOiBudW1iZXIsIGJnQ29sb3I6IG51bWJlciwgaW52ZXJzZTogYm9vbGVhbik6IG51bWJlciB7XG4gICAgc3dpdGNoIChiZ0NvbG9yTW9kZSkge1xuICAgICAgY2FzZSBBdHRyaWJ1dGVzLkNNX1AxNjpcbiAgICAgIGNhc2UgQXR0cmlidXRlcy5DTV9QMjU2OlxuICAgICAgICByZXR1cm4gdGhpcy5fY29sb3JzLmFuc2lbYmdDb2xvcl0ucmdiYTtcbiAgICAgIGNhc2UgQXR0cmlidXRlcy5DTV9SR0I6XG4gICAgICAgIHJldHVybiBiZ0NvbG9yIDw8IDg7XG4gICAgICBjYXNlIEF0dHJpYnV0ZXMuQ01fREVGQVVMVDpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChpbnZlcnNlKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9ycy5mb3JlZ3JvdW5kLnJnYmE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9ycy5iYWNrZ3JvdW5kLnJnYmE7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfcmVzb2x2ZUZvcmVncm91bmRSZ2JhKGZnQ29sb3JNb2RlOiBudW1iZXIsIGZnQ29sb3I6IG51bWJlciwgaW52ZXJzZTogYm9vbGVhbiwgYm9sZDogYm9vbGVhbik6IG51bWJlciB7XG4gICAgc3dpdGNoIChmZ0NvbG9yTW9kZSkge1xuICAgICAgY2FzZSBBdHRyaWJ1dGVzLkNNX1AxNjpcbiAgICAgIGNhc2UgQXR0cmlidXRlcy5DTV9QMjU2OlxuICAgICAgICBpZiAodGhpcy5fb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy5kcmF3Qm9sZFRleHRJbkJyaWdodENvbG9ycyAmJiBib2xkICYmIGZnQ29sb3IgPCA4KSB7XG4gICAgICAgICAgZmdDb2xvciArPSA4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jb2xvcnMuYW5zaVtmZ0NvbG9yXS5yZ2JhO1xuICAgICAgY2FzZSBBdHRyaWJ1dGVzLkNNX1JHQjpcbiAgICAgICAgcmV0dXJuIGZnQ29sb3IgPDwgODtcbiAgICAgIGNhc2UgQXR0cmlidXRlcy5DTV9ERUZBVUxUOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGludmVyc2UpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fY29sb3JzLmJhY2tncm91bmQucmdiYTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY29sb3JzLmZvcmVncm91bmQucmdiYTtcbiAgICB9XG4gIH1cbn1cblxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJUmVuZGVyRGltZW5zaW9ucywgSVJlcXVlc3RSZWRyYXdFdmVudCB9IGZyb20gJ2Jyb3dzZXIvcmVuZGVyZXIvVHlwZXMnO1xuaW1wb3J0IHsgQmFzZVJlbmRlckxheWVyIH0gZnJvbSAnYnJvd3Nlci9yZW5kZXJlci9CYXNlUmVuZGVyTGF5ZXInO1xuaW1wb3J0IHsgSUNlbGxEYXRhIH0gZnJvbSAnY29tbW9uL1R5cGVzJztcbmltcG9ydCB7IENlbGxEYXRhIH0gZnJvbSAnY29tbW9uL2J1ZmZlci9DZWxsRGF0YSc7XG5pbXBvcnQgeyBJQ29sb3JTZXQgfSBmcm9tICdicm93c2VyL1R5cGVzJztcbmltcG9ydCB7IElCdWZmZXJTZXJ2aWNlLCBJT3B0aW9uc1NlcnZpY2UsIElDb3JlU2VydmljZSB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5pbXBvcnQgeyBJRXZlbnRFbWl0dGVyIH0gZnJvbSAnY29tbW9uL0V2ZW50RW1pdHRlcic7XG5pbXBvcnQgeyBJQ29yZUJyb3dzZXJTZXJ2aWNlIH0gZnJvbSAnYnJvd3Nlci9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5cbmludGVyZmFjZSBJQ3Vyc29yU3RhdGUge1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbiAgaXNGb2N1c2VkOiBib29sZWFuO1xuICBzdHlsZTogc3RyaW5nO1xuICB3aWR0aDogbnVtYmVyO1xufVxuXG4vKipcbiAqIFRoZSB0aW1lIGJldHdlZW4gY3Vyc29yIGJsaW5rcy5cbiAqL1xuY29uc3QgQkxJTktfSU5URVJWQUwgPSA2MDA7XG5cbmV4cG9ydCBjbGFzcyBDdXJzb3JSZW5kZXJMYXllciBleHRlbmRzIEJhc2VSZW5kZXJMYXllciB7XG4gIHByaXZhdGUgX3N0YXRlOiBJQ3Vyc29yU3RhdGU7XG4gIHByaXZhdGUgX2N1cnNvclJlbmRlcmVyczoge1trZXk6IHN0cmluZ106ICh4OiBudW1iZXIsIHk6IG51bWJlciwgY2VsbDogSUNlbGxEYXRhKSA9PiB2b2lkfTtcbiAgcHJpdmF0ZSBfY3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXI6IEN1cnNvckJsaW5rU3RhdGVNYW5hZ2VyIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIF9jZWxsOiBJQ2VsbERhdGEgPSBuZXcgQ2VsbERhdGEoKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBjb250YWluZXI6IEhUTUxFbGVtZW50LFxuICAgIHpJbmRleDogbnVtYmVyLFxuICAgIGNvbG9yczogSUNvbG9yU2V0LFxuICAgIHJlbmRlcmVySWQ6IG51bWJlcixcbiAgICBwcml2YXRlIF9vblJlcXVlc3RSZWRyYXc6IElFdmVudEVtaXR0ZXI8SVJlcXVlc3RSZWRyYXdFdmVudD4sXG4gICAgQElCdWZmZXJTZXJ2aWNlIGJ1ZmZlclNlcnZpY2U6IElCdWZmZXJTZXJ2aWNlLFxuICAgIEBJT3B0aW9uc1NlcnZpY2Ugb3B0aW9uc1NlcnZpY2U6IElPcHRpb25zU2VydmljZSxcbiAgICBASUNvcmVTZXJ2aWNlIHByaXZhdGUgcmVhZG9ubHkgX2NvcmVTZXJ2aWNlOiBJQ29yZVNlcnZpY2UsXG4gICAgQElDb3JlQnJvd3NlclNlcnZpY2UgcHJpdmF0ZSByZWFkb25seSBfY29yZUJyb3dzZXJTZXJ2aWNlOiBJQ29yZUJyb3dzZXJTZXJ2aWNlXG4gICkge1xuICAgIHN1cGVyKGNvbnRhaW5lciwgJ2N1cnNvcicsIHpJbmRleCwgdHJ1ZSwgY29sb3JzLCByZW5kZXJlcklkLCBidWZmZXJTZXJ2aWNlLCBvcHRpb25zU2VydmljZSk7XG4gICAgdGhpcy5fc3RhdGUgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICAgIGlzRm9jdXNlZDogZmFsc2UsXG4gICAgICBzdHlsZTogJycsXG4gICAgICB3aWR0aDogMFxuICAgIH07XG4gICAgdGhpcy5fY3Vyc29yUmVuZGVyZXJzID0ge1xuICAgICAgJ2Jhcic6IHRoaXMuX3JlbmRlckJhckN1cnNvci5iaW5kKHRoaXMpLFxuICAgICAgJ2Jsb2NrJzogdGhpcy5fcmVuZGVyQmxvY2tDdXJzb3IuYmluZCh0aGlzKSxcbiAgICAgICd1bmRlcmxpbmUnOiB0aGlzLl9yZW5kZXJVbmRlcmxpbmVDdXJzb3IuYmluZCh0aGlzKVxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fY3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIpIHtcbiAgICAgIHRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyLmRpc3Bvc2UoKTtcbiAgICAgIHRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBzdXBlci5kaXNwb3NlKCk7XG4gIH1cblxuICBwdWJsaWMgcmVzaXplKGRpbTogSVJlbmRlckRpbWVuc2lvbnMpOiB2b2lkIHtcbiAgICBzdXBlci5yZXNpemUoZGltKTtcbiAgICAvLyBSZXNpemluZyB0aGUgY2FudmFzIGRpc2NhcmRzIHRoZSBjb250ZW50cyBvZiB0aGUgY2FudmFzIHNvIGNsZWFyIHN0YXRlXG4gICAgdGhpcy5fc3RhdGUgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICAgIGlzRm9jdXNlZDogZmFsc2UsXG4gICAgICBzdHlsZTogJycsXG4gICAgICB3aWR0aDogMFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XG4gICAgdGhpcy5fY2xlYXJDdXJzb3IoKTtcbiAgICB0aGlzLl9jdXJzb3JCbGlua1N0YXRlTWFuYWdlcj8ucmVzdGFydEJsaW5rQW5pbWF0aW9uKCk7XG4gICAgdGhpcy5vbk9wdGlvbnNDaGFuZ2VkKCk7XG4gIH1cblxuICBwdWJsaWMgb25CbHVyKCk6IHZvaWQge1xuICAgIHRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyPy5wYXVzZSgpO1xuICAgIHRoaXMuX29uUmVxdWVzdFJlZHJhdy5maXJlKHsgc3RhcnQ6IHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLnksIGVuZDogdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXIueSB9KTtcbiAgfVxuXG4gIHB1YmxpYyBvbkZvY3VzKCk6IHZvaWQge1xuICAgIHRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyPy5yZXN1bWUoKTtcbiAgICB0aGlzLl9vblJlcXVlc3RSZWRyYXcuZmlyZSh7IHN0YXJ0OiB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlci55LCBlbmQ6IHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLnkgfSk7XG4gIH1cblxuICBwdWJsaWMgb25PcHRpb25zQ2hhbmdlZCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy5jdXJzb3JCbGluaykge1xuICAgICAgaWYgKCF0aGlzLl9jdXJzb3JCbGlua1N0YXRlTWFuYWdlcikge1xuICAgICAgICB0aGlzLl9jdXJzb3JCbGlua1N0YXRlTWFuYWdlciA9IG5ldyBDdXJzb3JCbGlua1N0YXRlTWFuYWdlcih0aGlzLl9jb3JlQnJvd3NlclNlcnZpY2UuaXNGb2N1c2VkLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5fcmVuZGVyKHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fY3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXI/LmRpc3Bvc2UoKTtcbiAgICAgIHRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBSZXF1ZXN0IGEgcmVmcmVzaCBmcm9tIHRoZSB0ZXJtaW5hbCBhcyBtYW5hZ2VtZW50IG9mIHJlbmRlcmluZyBpcyBiZWluZ1xuICAgIC8vIG1vdmVkIGJhY2sgdG8gdGhlIHRlcm1pbmFsXG4gICAgdGhpcy5fb25SZXF1ZXN0UmVkcmF3LmZpcmUoeyBzdGFydDogdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXIueSwgZW5kOiB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlci55IH0pO1xuICB9XG5cbiAgcHVibGljIG9uQ3Vyc29yTW92ZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9jdXJzb3JCbGlua1N0YXRlTWFuYWdlcj8ucmVzdGFydEJsaW5rQW5pbWF0aW9uKCk7XG4gIH1cblxuICBwdWJsaWMgb25HcmlkQ2hhbmdlZChzdGFydFJvdzogbnVtYmVyLCBlbmRSb3c6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICghdGhpcy5fY3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIgfHwgdGhpcy5fY3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIuaXNQYXVzZWQpIHtcbiAgICAgIHRoaXMuX3JlbmRlcihmYWxzZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyLnJlc3RhcnRCbGlua0FuaW1hdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX3JlbmRlcih0cmlnZ2VyZWRCeUFuaW1hdGlvbkZyYW1lOiBib29sZWFuKTogdm9pZCB7XG4gICAgLy8gRG9uJ3QgZHJhdyB0aGUgY3Vyc29yIGlmIGl0J3MgaGlkZGVuXG4gICAgaWYgKCF0aGlzLl9jb3JlU2VydmljZS5pc0N1cnNvckluaXRpYWxpemVkIHx8IHRoaXMuX2NvcmVTZXJ2aWNlLmlzQ3Vyc29ySGlkZGVuKSB7XG4gICAgICB0aGlzLl9jbGVhckN1cnNvcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGN1cnNvclkgPSB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlci55YmFzZSArIHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLnk7XG4gICAgY29uc3Qgdmlld3BvcnRSZWxhdGl2ZUN1cnNvclkgPSBjdXJzb3JZIC0gdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXIueWRpc3A7XG5cbiAgICAvLyBEb24ndCBkcmF3IHRoZSBjdXJzb3IgaWYgaXQncyBvZmYtc2NyZWVuXG4gICAgaWYgKHZpZXdwb3J0UmVsYXRpdmVDdXJzb3JZIDwgMCB8fCB2aWV3cG9ydFJlbGF0aXZlQ3Vyc29yWSA+PSB0aGlzLl9idWZmZXJTZXJ2aWNlLnJvd3MpIHtcbiAgICAgIHRoaXMuX2NsZWFyQ3Vyc29yKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gaW4gY2FzZSBjdXJzb3IueCA9PSBjb2xzIGFkanVzdCB2aXN1YWwgY3Vyc29yIHRvIGNvbHMgLSAxXG4gICAgY29uc3QgY3Vyc29yWCA9IE1hdGgubWluKHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLngsIHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scyAtIDEpO1xuICAgIHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLmxpbmVzLmdldChjdXJzb3JZKSEubG9hZENlbGwoY3Vyc29yWCwgdGhpcy5fY2VsbCk7XG4gICAgaWYgKHRoaXMuX2NlbGwuY29udGVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9jb3JlQnJvd3NlclNlcnZpY2UuaXNGb2N1c2VkKSB7XG4gICAgICB0aGlzLl9jbGVhckN1cnNvcigpO1xuICAgICAgdGhpcy5fY3R4LnNhdmUoKTtcbiAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLl9jb2xvcnMuY3Vyc29yLmNzcztcbiAgICAgIGNvbnN0IGN1cnNvclN0eWxlID0gdGhpcy5fb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy5jdXJzb3JTdHlsZTtcbiAgICAgIGlmIChjdXJzb3JTdHlsZSAmJiBjdXJzb3JTdHlsZSAhPT0gJ2Jsb2NrJykge1xuICAgICAgICB0aGlzLl9jdXJzb3JSZW5kZXJlcnNbY3Vyc29yU3R5bGVdKGN1cnNvclgsIHZpZXdwb3J0UmVsYXRpdmVDdXJzb3JZLCB0aGlzLl9jZWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3JlbmRlckJsdXJDdXJzb3IoY3Vyc29yWCwgdmlld3BvcnRSZWxhdGl2ZUN1cnNvclksIHRoaXMuX2NlbGwpO1xuICAgICAgfVxuICAgICAgdGhpcy5fY3R4LnJlc3RvcmUoKTtcbiAgICAgIHRoaXMuX3N0YXRlLnggPSBjdXJzb3JYO1xuICAgICAgdGhpcy5fc3RhdGUueSA9IHZpZXdwb3J0UmVsYXRpdmVDdXJzb3JZO1xuICAgICAgdGhpcy5fc3RhdGUuaXNGb2N1c2VkID0gZmFsc2U7XG4gICAgICB0aGlzLl9zdGF0ZS5zdHlsZSA9IGN1cnNvclN0eWxlO1xuICAgICAgdGhpcy5fc3RhdGUud2lkdGggPSB0aGlzLl9jZWxsLmdldFdpZHRoKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRG9uJ3QgZHJhdyB0aGUgY3Vyc29yIGlmIGl0J3MgYmxpbmtpbmdcbiAgICBpZiAodGhpcy5fY3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIgJiYgIXRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyLmlzQ3Vyc29yVmlzaWJsZSkge1xuICAgICAgdGhpcy5fY2xlYXJDdXJzb3IoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fc3RhdGUpIHtcbiAgICAgIC8vIFRoZSBjdXJzb3IgaXMgYWxyZWFkeSBpbiB0aGUgY29ycmVjdCBzcG90LCBkb24ndCByZWRyYXdcbiAgICAgIGlmICh0aGlzLl9zdGF0ZS54ID09PSBjdXJzb3JYICYmXG4gICAgICAgICAgdGhpcy5fc3RhdGUueSA9PT0gdmlld3BvcnRSZWxhdGl2ZUN1cnNvclkgJiZcbiAgICAgICAgICB0aGlzLl9zdGF0ZS5pc0ZvY3VzZWQgPT09IHRoaXMuX2NvcmVCcm93c2VyU2VydmljZS5pc0ZvY3VzZWQgJiZcbiAgICAgICAgICB0aGlzLl9zdGF0ZS5zdHlsZSA9PT0gdGhpcy5fb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy5jdXJzb3JTdHlsZSAmJlxuICAgICAgICAgIHRoaXMuX3N0YXRlLndpZHRoID09PSB0aGlzLl9jZWxsLmdldFdpZHRoKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fY2xlYXJDdXJzb3IoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9jdHguc2F2ZSgpO1xuICAgIHRoaXMuX2N1cnNvclJlbmRlcmVyc1t0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLmN1cnNvclN0eWxlIHx8ICdibG9jayddKGN1cnNvclgsIHZpZXdwb3J0UmVsYXRpdmVDdXJzb3JZLCB0aGlzLl9jZWxsKTtcbiAgICB0aGlzLl9jdHgucmVzdG9yZSgpO1xuXG4gICAgdGhpcy5fc3RhdGUueCA9IGN1cnNvclg7XG4gICAgdGhpcy5fc3RhdGUueSA9IHZpZXdwb3J0UmVsYXRpdmVDdXJzb3JZO1xuICAgIHRoaXMuX3N0YXRlLmlzRm9jdXNlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3N0YXRlLnN0eWxlID0gdGhpcy5fb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy5jdXJzb3JTdHlsZTtcbiAgICB0aGlzLl9zdGF0ZS53aWR0aCA9IHRoaXMuX2NlbGwuZ2V0V2lkdGgoKTtcbiAgfVxuXG4gIHByaXZhdGUgX2NsZWFyQ3Vyc29yKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9zdGF0ZSkge1xuICAgICAgLy8gQXZvaWQgcG90ZW50aWFsIHJvdW5kaW5nIGVycm9ycyB3aGVuIGRldmljZSBwaXhlbCByYXRpbyBpcyBsZXNzIHRoYW4gMVxuICAgICAgaWYgKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIDwgMSkge1xuICAgICAgICB0aGlzLl9jbGVhckFsbCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY2xlYXJDZWxscyh0aGlzLl9zdGF0ZS54LCB0aGlzLl9zdGF0ZS55LCB0aGlzLl9zdGF0ZS53aWR0aCwgMSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zdGF0ZSA9IHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMCxcbiAgICAgICAgaXNGb2N1c2VkOiBmYWxzZSxcbiAgICAgICAgc3R5bGU6ICcnLFxuICAgICAgICB3aWR0aDogMFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9yZW5kZXJCYXJDdXJzb3IoeDogbnVtYmVyLCB5OiBudW1iZXIsIGNlbGw6IElDZWxsRGF0YSk6IHZvaWQge1xuICAgIHRoaXMuX2N0eC5zYXZlKCk7XG4gICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IHRoaXMuX2NvbG9ycy5jdXJzb3IuY3NzO1xuICAgIHRoaXMuX2ZpbGxMZWZ0TGluZUF0Q2VsbCh4LCB5LCB0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLmN1cnNvcldpZHRoKTtcbiAgICB0aGlzLl9jdHgucmVzdG9yZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVuZGVyQmxvY2tDdXJzb3IoeDogbnVtYmVyLCB5OiBudW1iZXIsIGNlbGw6IElDZWxsRGF0YSk6IHZvaWQge1xuICAgIHRoaXMuX2N0eC5zYXZlKCk7XG4gICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IHRoaXMuX2NvbG9ycy5jdXJzb3IuY3NzO1xuICAgIHRoaXMuX2ZpbGxDZWxscyh4LCB5LCBjZWxsLmdldFdpZHRoKCksIDEpO1xuICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLl9jb2xvcnMuY3Vyc29yQWNjZW50LmNzcztcbiAgICB0aGlzLl9maWxsQ2hhclRydWVDb2xvcihjZWxsLCB4LCB5KTtcbiAgICB0aGlzLl9jdHgucmVzdG9yZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVuZGVyVW5kZXJsaW5lQ3Vyc29yKHg6IG51bWJlciwgeTogbnVtYmVyLCBjZWxsOiBJQ2VsbERhdGEpOiB2b2lkIHtcbiAgICB0aGlzLl9jdHguc2F2ZSgpO1xuICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLl9jb2xvcnMuY3Vyc29yLmNzcztcbiAgICB0aGlzLl9maWxsQm90dG9tTGluZUF0Q2VsbHMoeCwgeSk7XG4gICAgdGhpcy5fY3R4LnJlc3RvcmUoKTtcbiAgfVxuXG4gIHByaXZhdGUgX3JlbmRlckJsdXJDdXJzb3IoeDogbnVtYmVyLCB5OiBudW1iZXIsIGNlbGw6IElDZWxsRGF0YSk6IHZvaWQge1xuICAgIHRoaXMuX2N0eC5zYXZlKCk7XG4gICAgdGhpcy5fY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5fY29sb3JzLmN1cnNvci5jc3M7XG4gICAgdGhpcy5fc3Ryb2tlUmVjdEF0Q2VsbCh4LCB5LCBjZWxsLmdldFdpZHRoKCksIDEpO1xuICAgIHRoaXMuX2N0eC5yZXN0b3JlKCk7XG4gIH1cbn1cblxuY2xhc3MgQ3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIge1xuICBwdWJsaWMgaXNDdXJzb3JWaXNpYmxlOiBib29sZWFuO1xuXG4gIHByaXZhdGUgX2FuaW1hdGlvbkZyYW1lOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX2JsaW5rU3RhcnRUaW1lb3V0OiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX2JsaW5rSW50ZXJ2YWw6IG51bWJlciB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogVGhlIHRpbWUgYXQgd2hpY2ggdGhlIGFuaW1hdGlvbiBmcmFtZSB3YXMgcmVzdGFydGVkLCB0aGlzIGlzIHVzZWQgb24gdGhlXG4gICAqIG5leHQgcmVuZGVyIHRvIHJlc3RhcnQgdGhlIHRpbWVycyBzbyB0aGV5IGRvbid0IG5lZWQgdG8gcmVzdGFydCB0aGUgdGltZXJzXG4gICAqIG11bHRpcGxlIHRpbWVzIG92ZXIgYSBzaG9ydCBwZXJpb2QuXG4gICAqL1xuICBwcml2YXRlIF9hbmltYXRpb25UaW1lUmVzdGFydGVkOiBudW1iZXIgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgaXNGb2N1c2VkOiBib29sZWFuLFxuICAgIHByaXZhdGUgX3JlbmRlckNhbGxiYWNrOiAoKSA9PiB2b2lkXG4gICkge1xuICAgIHRoaXMuaXNDdXJzb3JWaXNpYmxlID0gdHJ1ZTtcbiAgICBpZiAoaXNGb2N1c2VkKSB7XG4gICAgICB0aGlzLl9yZXN0YXJ0SW50ZXJ2YWwoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0IGlzUGF1c2VkKCk6IGJvb2xlYW4geyByZXR1cm4gISh0aGlzLl9ibGlua1N0YXJ0VGltZW91dCB8fCB0aGlzLl9ibGlua0ludGVydmFsKTsgfVxuXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9ibGlua0ludGVydmFsKSB7XG4gICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLl9ibGlua0ludGVydmFsKTtcbiAgICAgIHRoaXMuX2JsaW5rSW50ZXJ2YWwgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICh0aGlzLl9ibGlua1N0YXJ0VGltZW91dCkge1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLl9ibGlua1N0YXJ0VGltZW91dCk7XG4gICAgICB0aGlzLl9ibGlua1N0YXJ0VGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2FuaW1hdGlvbkZyYW1lKSB7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5fYW5pbWF0aW9uRnJhbWUpO1xuICAgICAgdGhpcy5fYW5pbWF0aW9uRnJhbWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlc3RhcnRCbGlua0FuaW1hdGlvbigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc1BhdXNlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBTYXZlIGEgdGltZXN0YW1wIHNvIHRoYXQgdGhlIHJlc3RhcnQgY2FuIGJlIGRvbmUgb24gdGhlIG5leHQgaW50ZXJ2YWxcbiAgICB0aGlzLl9hbmltYXRpb25UaW1lUmVzdGFydGVkID0gRGF0ZS5ub3coKTtcbiAgICAvLyBGb3JjZSBhIGN1cnNvciByZW5kZXIgdG8gZW5zdXJlIGl0J3MgdmlzaWJsZSBhbmQgaW4gdGhlIGNvcnJlY3QgcG9zaXRpb25cbiAgICB0aGlzLmlzQ3Vyc29yVmlzaWJsZSA9IHRydWU7XG4gICAgaWYgKCF0aGlzLl9hbmltYXRpb25GcmFtZSkge1xuICAgICAgdGhpcy5fYW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgdGhpcy5fcmVuZGVyQ2FsbGJhY2soKTtcbiAgICAgICAgdGhpcy5fYW5pbWF0aW9uRnJhbWUgPSB1bmRlZmluZWQ7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9yZXN0YXJ0SW50ZXJ2YWwodGltZVRvU3RhcnQ6IG51bWJlciA9IEJMSU5LX0lOVEVSVkFMKTogdm9pZCB7XG4gICAgLy8gQ2xlYXIgYW55IGV4aXN0aW5nIGludGVydmFsXG4gICAgaWYgKHRoaXMuX2JsaW5rSW50ZXJ2YWwpIHtcbiAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuX2JsaW5rSW50ZXJ2YWwpO1xuICAgICAgdGhpcy5fYmxpbmtJbnRlcnZhbCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBTZXR1cCB0aGUgaW5pdGlhbCB0aW1lb3V0IHdoaWNoIHdpbGwgaGlkZSB0aGUgY3Vyc29yLCB0aGlzIGlzIGRvbmUgYmVmb3JlXG4gICAgLy8gdGhlIHJlZ3VsYXIgaW50ZXJ2YWwgaXMgc2V0dXAgaW4gb3JkZXIgdG8gc3VwcG9ydCByZXN0YXJ0aW5nIHRoZSBibGlua1xuICAgIC8vIGFuaW1hdGlvbiBpbiBhIGxpZ2h0d2VpZ2h0IHdheSAod2l0aG91dCB0aHJhc2hpbmcgY2xlYXJJbnRlcnZhbCBhbmRcbiAgICAvLyBzZXRJbnRlcnZhbCkuXG4gICAgdGhpcy5fYmxpbmtTdGFydFRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAvLyBDaGVjayBpZiBhbm90aGVyIGFuaW1hdGlvbiByZXN0YXJ0IHdhcyByZXF1ZXN0ZWQgd2hpbGUgdGhpcyB3YXMgYmVpbmdcbiAgICAgIC8vIHN0YXJ0ZWRcbiAgICAgIGlmICh0aGlzLl9hbmltYXRpb25UaW1lUmVzdGFydGVkKSB7XG4gICAgICAgIGNvbnN0IHRpbWUgPSBCTElOS19JTlRFUlZBTCAtIChEYXRlLm5vdygpIC0gdGhpcy5fYW5pbWF0aW9uVGltZVJlc3RhcnRlZCk7XG4gICAgICAgIHRoaXMuX2FuaW1hdGlvblRpbWVSZXN0YXJ0ZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICh0aW1lID4gMCkge1xuICAgICAgICAgIHRoaXMuX3Jlc3RhcnRJbnRlcnZhbCh0aW1lKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSGlkZSB0aGUgY3Vyc29yXG4gICAgICB0aGlzLmlzQ3Vyc29yVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgdGhpcy5fYW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgdGhpcy5fcmVuZGVyQ2FsbGJhY2soKTtcbiAgICAgICAgdGhpcy5fYW5pbWF0aW9uRnJhbWUgPSB1bmRlZmluZWQ7XG4gICAgICB9KTtcblxuICAgICAgLy8gU2V0dXAgdGhlIGJsaW5rIGludGVydmFsXG4gICAgICB0aGlzLl9ibGlua0ludGVydmFsID0gd2luZG93LnNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgLy8gQWRqdXN0IHRoZSBhbmltYXRpb24gdGltZSBpZiBpdCB3YXMgcmVzdGFydGVkXG4gICAgICAgIGlmICh0aGlzLl9hbmltYXRpb25UaW1lUmVzdGFydGVkKSB7XG4gICAgICAgICAgLy8gY2FsYyB0aW1lIGRpZmZcbiAgICAgICAgICAvLyBNYWtlIHJlc3RhcnQgaW50ZXJ2YWwgZG8gYSBzZXRUaW1lb3V0IGluaXRpYWxseT9cbiAgICAgICAgICBjb25zdCB0aW1lID0gQkxJTktfSU5URVJWQUwgLSAoRGF0ZS5ub3coKSAtIHRoaXMuX2FuaW1hdGlvblRpbWVSZXN0YXJ0ZWQpO1xuICAgICAgICAgIHRoaXMuX2FuaW1hdGlvblRpbWVSZXN0YXJ0ZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgdGhpcy5fcmVzdGFydEludGVydmFsKHRpbWUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEludmVydCB2aXNpYmlsaXR5IGFuZCByZW5kZXJcbiAgICAgICAgdGhpcy5pc0N1cnNvclZpc2libGUgPSAhdGhpcy5pc0N1cnNvclZpc2libGU7XG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5fcmVuZGVyQ2FsbGJhY2soKTtcbiAgICAgICAgICB0aGlzLl9hbmltYXRpb25GcmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSk7XG4gICAgICB9LCBCTElOS19JTlRFUlZBTCk7XG4gICAgfSwgdGltZVRvU3RhcnQpO1xuICB9XG5cbiAgcHVibGljIHBhdXNlKCk6IHZvaWQge1xuICAgIHRoaXMuaXNDdXJzb3JWaXNpYmxlID0gdHJ1ZTtcbiAgICBpZiAodGhpcy5fYmxpbmtJbnRlcnZhbCkge1xuICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5fYmxpbmtJbnRlcnZhbCk7XG4gICAgICB0aGlzLl9ibGlua0ludGVydmFsID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodGhpcy5fYmxpbmtTdGFydFRpbWVvdXQpIHtcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5fYmxpbmtTdGFydFRpbWVvdXQpO1xuICAgICAgdGhpcy5fYmxpbmtTdGFydFRpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICh0aGlzLl9hbmltYXRpb25GcmFtZSkge1xuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX2FuaW1hdGlvbkZyYW1lKTtcbiAgICAgIHRoaXMuX2FuaW1hdGlvbkZyYW1lID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZXN1bWUoKTogdm9pZCB7XG4gICAgLy8gQ2xlYXIgb3V0IGFueSBleGlzdGluZyB0aW1lcnMganVzdCBpbiBjYXNlXG4gICAgdGhpcy5wYXVzZSgpO1xuXG4gICAgdGhpcy5fYW5pbWF0aW9uVGltZVJlc3RhcnRlZCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9yZXN0YXJ0SW50ZXJ2YWwoKTtcbiAgICB0aGlzLnJlc3RhcnRCbGlua0FuaW1hdGlvbigpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAyMSBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IHRocm93SWZGYWxzeSB9IGZyb20gJ2Jyb3dzZXIvcmVuZGVyZXIvUmVuZGVyZXJVdGlscyc7XG5cbmludGVyZmFjZSBJQmxvY2tWZWN0b3Ige1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbiAgdzogbnVtYmVyO1xuICBoOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjb25zdCBibG9ja0VsZW1lbnREZWZpbml0aW9uczogeyBbaW5kZXg6IHN0cmluZ106IElCbG9ja1ZlY3RvcltdIHwgdW5kZWZpbmVkIH0gPSB7XG4gIC8vIEJsb2NrIGVsZW1lbnRzICgweDI1ODAtMHgyNTkwKVxuICAn4paAJzogW3sgeDogMCwgeTogMCwgdzogOCwgaDogNCB9XSwgLy8gVVBQRVIgSEFMRiBCTE9DS1xuICAn4paBJzogW3sgeDogMCwgeTogNywgdzogOCwgaDogMSB9XSwgLy8gTE9XRVIgT05FIEVJR0hUSCBCTE9DS1xuICAn4paCJzogW3sgeDogMCwgeTogNiwgdzogOCwgaDogMiB9XSwgLy8gTE9XRVIgT05FIFFVQVJURVIgQkxPQ0tcbiAgJ+KWgyc6IFt7IHg6IDAsIHk6IDUsIHc6IDgsIGg6IDMgfV0sIC8vIExPV0VSIFRIUkVFIEVJR0hUSFMgQkxPQ0tcbiAgJ+KWhCc6IFt7IHg6IDAsIHk6IDQsIHc6IDgsIGg6IDQgfV0sIC8vIExPV0VSIEhBTEYgQkxPQ0tcbiAgJ+KWhSc6IFt7IHg6IDAsIHk6IDMsIHc6IDgsIGg6IDUgfV0sIC8vIExPV0VSIEZJVkUgRUlHSFRIUyBCTE9DS1xuICAn4paGJzogW3sgeDogMCwgeTogMiwgdzogOCwgaDogNiB9XSwgLy8gTE9XRVIgVEhSRUUgUVVBUlRFUlMgQkxPQ0tcbiAgJ+KWhyc6IFt7IHg6IDAsIHk6IDEsIHc6IDgsIGg6IDcgfV0sIC8vIExPV0VSIFNFVkVOIEVJR0hUSFMgQkxPQ0tcbiAgJ+KWiCc6IFt7IHg6IDAsIHk6IDAsIHc6IDgsIGg6IDggfV0sIC8vIEZVTEwgQkxPQ0tcbiAgJ+KWiSc6IFt7IHg6IDAsIHk6IDAsIHc6IDcsIGg6IDggfV0sIC8vIExFRlQgU0VWRU4gRUlHSFRIUyBCTE9DS1xuICAn4paKJzogW3sgeDogMCwgeTogMCwgdzogNiwgaDogOCB9XSwgLy8gTEVGVCBUSFJFRSBRVUFSVEVSUyBCTE9DS1xuICAn4paLJzogW3sgeDogMCwgeTogMCwgdzogNSwgaDogOCB9XSwgLy8gTEVGVCBGSVZFIEVJR0hUSFMgQkxPQ0tcbiAgJ+KWjCc6IFt7IHg6IDAsIHk6IDAsIHc6IDQsIGg6IDggfV0sIC8vIExFRlQgSEFMRiBCTE9DS1xuICAn4paNJzogW3sgeDogMCwgeTogMCwgdzogMywgaDogOCB9XSwgLy8gTEVGVCBUSFJFRSBFSUdIVEhTIEJMT0NLXG4gICfilo4nOiBbeyB4OiAwLCB5OiAwLCB3OiAyLCBoOiA4IH1dLCAvLyBMRUZUIE9ORSBRVUFSVEVSIEJMT0NLXG4gICfilo8nOiBbeyB4OiAwLCB5OiAwLCB3OiAxLCBoOiA4IH1dLCAvLyBMRUZUIE9ORSBFSUdIVEggQkxPQ0tcbiAgJ+KWkCc6IFt7IHg6IDQsIHk6IDAsIHc6IDQsIGg6IDggfV0sIC8vIFJJR0hUIEhBTEYgQkxPQ0tcblxuICAvLyBCbG9jayBlbGVtZW50cyAoMHgyNTk0LTB4MjU5NSlcbiAgJ+KWlCc6IFt7IHg6IDAsIHk6IDAsIHc6IDksIGg6IDEgfV0sIC8vIFVQUEVSIE9ORSBFSUdIVEggQkxPQ0tcbiAgJ+KWlSc6IFt7IHg6IDcsIHk6IDAsIHc6IDEsIGg6IDggfV0sIC8vIFJJR0hUIE9ORSBFSUdIVEggQkxPQ0tcblxuICAvLyBUZXJtaW5hbCBncmFwaGljIGNoYXJhY3RlcnMgKDB4MjU5Ni0weDI1OUYpXG4gICfilpYnOiBbeyB4OiAwLCB5OiA0LCB3OiA0LCBoOiA0IH1dLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUVVBRFJBTlQgTE9XRVIgTEVGVFxuICAn4paXJzogW3sgeDogNCwgeTogNCwgdzogNCwgaDogNCB9XSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFFVQURSQU5UIExPV0VSIFJJR0hUXG4gICfilpgnOiBbeyB4OiAwLCB5OiAwLCB3OiA0LCBoOiA0IH1dLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUVVBRFJBTlQgVVBQRVIgTEVGVFxuICAn4paZJzogW3sgeDogMCwgeTogMCwgdzogNCwgaDogOCB9LCB7IHg6IDAsIHk6IDQsIHc6IDgsIGg6IDQgfV0sIC8vIFFVQURSQU5UIFVQUEVSIExFRlQgQU5EIExPV0VSIExFRlQgQU5EIExPV0VSIFJJR0hUXG4gICfilponOiBbeyB4OiAwLCB5OiAwLCB3OiA0LCBoOiA0IH0sIHsgeDogNCwgeTogNCwgdzogNCwgaDogNCB9XSwgLy8gUVVBRFJBTlQgVVBQRVIgTEVGVCBBTkQgTE9XRVIgUklHSFRcbiAgJ+KWmyc6IFt7IHg6IDAsIHk6IDAsIHc6IDQsIGg6IDggfSwgeyB4OiAwLCB5OiAwLCB3OiA0LCBoOiA4IH1dLCAvLyBRVUFEUkFOVCBVUFBFUiBMRUZUIEFORCBVUFBFUiBSSUdIVCBBTkQgTE9XRVIgTEVGVFxuICAn4pacJzogW3sgeDogMCwgeTogMCwgdzogOCwgaDogNCB9LCB7IHg6IDQsIHk6IDAsIHc6IDQsIGg6IDggfV0sIC8vIFFVQURSQU5UIFVQUEVSIExFRlQgQU5EIFVQUEVSIFJJR0hUIEFORCBMT1dFUiBSSUdIVFxuICAn4padJzogW3sgeDogNCwgeTogMCwgdzogNCwgaDogNCB9XSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFFVQURSQU5UIFVQUEVSIFJJR0hUXG4gICfilp4nOiBbeyB4OiA0LCB5OiAwLCB3OiA0LCBoOiA0IH0sIHsgeDogMCwgeTogNCwgdzogNCwgaDogNCB9XSwgLy8gUVVBRFJBTlQgVVBQRVIgUklHSFQgQU5EIExPV0VSIExFRlRcbiAgJ+KWnyc6IFt7IHg6IDQsIHk6IDAsIHc6IDQsIGg6IDggfSwgeyB4OiAwLCB5OiA0LCB3OiA4LCBoOiA0IH1dLCAvLyBRVUFEUkFOVCBVUFBFUiBSSUdIVCBBTkQgTE9XRVIgTEVGVCBBTkQgTE9XRVIgUklHSFRcblxuICAvLyBWRVJUSUNBTCBPTkUgRUlHSFRIIEJMT0NLLTIgdGhyb3VnaCBWRVJUSUNBTCBPTkUgRUlHSFRIIEJMT0NLLTdcbiAgJ1xcdXsxRkI3MH0nOiBbeyB4OiAxLCB5OiAwLCB3OiAxLCBoOiA4IH1dLFxuICAnXFx1ezFGQjcxfSc6IFt7IHg6IDIsIHk6IDAsIHc6IDEsIGg6IDggfV0sXG4gICdcXHV7MUZCNzJ9JzogW3sgeDogMywgeTogMCwgdzogMSwgaDogOCB9XSxcbiAgJ1xcdXsxRkI3M30nOiBbeyB4OiA0LCB5OiAwLCB3OiAxLCBoOiA4IH1dLFxuICAnXFx1ezFGQjc0fSc6IFt7IHg6IDUsIHk6IDAsIHc6IDEsIGg6IDggfV0sXG4gICdcXHV7MUZCNzV9JzogW3sgeDogNiwgeTogMCwgdzogMSwgaDogOCB9XSxcblxuICAvLyBIT1JJWk9OVEFMIE9ORSBFSUdIVEggQkxPQ0stMiB0aHJvdWdoIEhPUklaT05UQUwgT05FIEVJR0hUSCBCTE9DSy03XG4gICdcXHV7MUZCNzZ9JzogW3sgeDogMCwgeTogMSwgdzogOCwgaDogMSB9XSxcbiAgJ1xcdXsxRkI3N30nOiBbeyB4OiAwLCB5OiAyLCB3OiA4LCBoOiAxIH1dLFxuICAnXFx1ezFGQjc4fSc6IFt7IHg6IDAsIHk6IDMsIHc6IDgsIGg6IDEgfV0sXG4gICdcXHV7MUZCNzl9JzogW3sgeDogMCwgeTogNCwgdzogOCwgaDogMSB9XSxcbiAgJ1xcdXsxRkI3QX0nOiBbeyB4OiAwLCB5OiA1LCB3OiA4LCBoOiAxIH1dLFxuICAnXFx1ezFGQjdCfSc6IFt7IHg6IDAsIHk6IDYsIHc6IDgsIGg6IDEgfV0sXG5cbiAgLy8gTEVGVCBBTkQgTE9XRVIgT05FIEVJR0hUSCBCTE9DS1xuICAnXFx1ezFGQjdDfSc6IFt7IHg6IDAsIHk6IDAsIHc6IDEsIGg6IDggfSwgeyB4OiAwLCB5OiA3LCB3OiA4LCBoOiAxIH1dLFxuICAvLyBMRUZUIEFORCBVUFBFUiBPTkUgRUlHSFRIIEJMT0NLXG4gICdcXHV7MUZCN0R9JzogW3sgeDogMCwgeTogMCwgdzogMSwgaDogOCB9LCB7IHg6IDAsIHk6IDAsIHc6IDgsIGg6IDEgfV0sXG4gIC8vIFJJR0hUIEFORCBVUFBFUiBPTkUgRUlHSFRIIEJMT0NLXG4gICdcXHV7MUZCN0V9JzogW3sgeDogNywgeTogMCwgdzogMSwgaDogOCB9LCB7IHg6IDAsIHk6IDAsIHc6IDgsIGg6IDEgfV0sXG4gIC8vIFJJR0hUIEFORCBMT1dFUiBPTkUgRUlHSFRIIEJMT0NLXG4gICdcXHV7MUZCN0Z9JzogW3sgeDogNywgeTogMCwgdzogMSwgaDogOCB9LCB7IHg6IDAsIHk6IDcsIHc6IDgsIGg6IDEgfV0sXG4gIC8vIFVQUEVSIEFORCBMT1dFUiBPTkUgRUlHSFRIIEJMT0NLXG4gICdcXHV7MUZCODB9JzogW3sgeDogMCwgeTogMCwgdzogOCwgaDogMSB9LCB7IHg6IDAsIHk6IDcsIHc6IDgsIGg6IDEgfV0sXG4gIC8vIEhPUklaT05UQUwgT05FIEVJR0hUSCBCTE9DSy0xMzU4XG4gICdcXHV7MUZCODF9JzogW3sgeDogMCwgeTogMCwgdzogOCwgaDogMSB9LCB7IHg6IDAsIHk6IDIsIHc6IDgsIGg6IDEgfSwgeyB4OiAwLCB5OiA0LCB3OiA4LCBoOiAxIH0sIHsgeDogMCwgeTogNywgdzogOCwgaDogMSB9XSxcblxuICAvLyBVUFBFUiBPTkUgUVVBUlRFUiBCTE9DS1xuICAnXFx1ezFGQjgyfSc6IFt7IHg6IDAsIHk6IDAsIHc6IDgsIGg6IDIgfV0sXG4gIC8vIFVQUEVSIFRIUkVFIEVJR0hUSFMgQkxPQ0tcbiAgJ1xcdXsxRkI4M30nOiBbeyB4OiAwLCB5OiAwLCB3OiA4LCBoOiAzIH1dLFxuICAvLyBVUFBFUiBGSVZFIEVJR0hUSFMgQkxPQ0tcbiAgJ1xcdXsxRkI4NH0nOiBbeyB4OiAwLCB5OiAwLCB3OiA4LCBoOiA1IH1dLFxuICAvLyBVUFBFUiBUSFJFRSBRVUFSVEVSUyBCTE9DS1xuICAnXFx1ezFGQjg1fSc6IFt7IHg6IDAsIHk6IDAsIHc6IDgsIGg6IDYgfV0sXG4gIC8vIFVQUEVSIFNFVkVOIEVJR0hUSFMgQkxPQ0tcbiAgJ1xcdXsxRkI4Nn0nOiBbeyB4OiAwLCB5OiAwLCB3OiA4LCBoOiA3IH1dLFxuXG4gIC8vIFJJR0hUIE9ORSBRVUFSVEVSIEJMT0NLXG4gICdcXHV7MUZCODd9JzogW3sgeDogNiwgeTogMCwgdzogMiwgaDogOCB9XSxcbiAgLy8gUklHSFQgVEhSRUUgRUlHSFRIUyBCME9DS1xuICAnXFx1ezFGQjg4fSc6IFt7IHg6IDUsIHk6IDAsIHc6IDMsIGg6IDggfV0sXG4gIC8vIFJJR0hUIEZJVkUgRUlHSFRIUyBCTDBDS1xuICAnXFx1ezFGQjg5fSc6IFt7IHg6IDMsIHk6IDAsIHc6IDUsIGg6IDggfV0sXG4gIC8vIFJJR0hUIFRIUkVFIFFVQVJURVJTIDBMT0NLXG4gICdcXHV7MUZCOEF9JzogW3sgeDogMiwgeTogMCwgdzogNiwgaDogOCB9XSxcbiAgLy8gUklHSFQgU0VWRU4gRUlHSFRIUyBCME9DS1xuICAnXFx1ezFGQjhCfSc6IFt7IHg6IDEsIHk6IDAsIHc6IDcsIGg6IDggfV0sXG5cbiAgLy8gQ0hFQ0tFUiBCT0FSRCBGSUxMXG4gICdcXHV7MUZCOTV9JzogW1xuICAgIHsgeDogMCwgeTogMCwgdzogMiwgaDogMiB9LCB7IHg6IDQsIHk6IDAsIHc6IDIsIGg6IDIgfSxcbiAgICB7IHg6IDIsIHk6IDIsIHc6IDIsIGg6IDIgfSwgeyB4OiA2LCB5OiAyLCB3OiAyLCBoOiAyIH0sXG4gICAgeyB4OiAwLCB5OiA0LCB3OiAyLCBoOiAyIH0sIHsgeDogNCwgeTogNCwgdzogMiwgaDogMiB9LFxuICAgIHsgeDogMiwgeTogNiwgdzogMiwgaDogMiB9LCB7IHg6IDYsIHk6IDYsIHc6IDIsIGg6IDIgfVxuICBdLFxuICAvLyBJTlZFUlNFIENIRUNLRVIgQk9BUkQgRklMTFxuICAnXFx1ezFGQjk2fSc6IFtcbiAgICB7IHg6IDIsIHk6IDAsIHc6IDIsIGg6IDIgfSwgeyB4OiA2LCB5OiAwLCB3OiAyLCBoOiAyIH0sXG4gICAgeyB4OiAwLCB5OiAyLCB3OiAyLCBoOiAyIH0sIHsgeDogNCwgeTogMiwgdzogMiwgaDogMiB9LFxuICAgIHsgeDogMiwgeTogNCwgdzogMiwgaDogMiB9LCB7IHg6IDYsIHk6IDQsIHc6IDIsIGg6IDIgfSxcbiAgICB7IHg6IDAsIHk6IDYsIHc6IDIsIGg6IDIgfSwgeyB4OiA0LCB5OiA2LCB3OiAyLCBoOiAyIH1cbiAgXSxcbiAgLy8gSEVBVlkgSE9SSVpPTlRBTCBGSUxMICh1cHBlciBtaWRkbGUgYW5kIGxvd2VyIG9uZSBxdWFydGVyIGJsb2NrKVxuICAnXFx1ezFGQjk3fSc6IFt7IHg6IDAsIHk6IDIsIHc6IDgsIGg6IDIgfSwgeyB4OiAwLCB5OiA2LCB3OiA4LCBoOiAyIH1dXG59O1xuXG50eXBlIFBhdHRlcm5EZWZpbml0aW9uID0gbnVtYmVyW11bXTtcblxuLyoqXG4gKiBEZWZpbmVzIHRoZSByZXBlYXRpbmcgcGF0dGVybiB1c2VkIGJ5IHNwZWNpYWwgY2hhcmFjdGVycywgdGhlIHBhdHRlcm4gaXMgbWFkZSB1cCBvZiBhIDJkIGFycmF5IG9mXG4gKiBwaXhlbCB2YWx1ZXMgdG8gYmUgZmlsbGVkICgxKSBvciBub3QgZmlsbGVkICgwKS5cbiAqL1xuY29uc3QgcGF0dGVybkNoYXJhY3RlckRlZmluaXRpb25zOiB7IFtrZXk6IHN0cmluZ106IFBhdHRlcm5EZWZpbml0aW9uIHwgdW5kZWZpbmVkIH0gPSB7XG4gIC8vIFNoYWRlIGNoYXJhY3RlcnMgKDB4MjU5MS0weDI1OTMpXG4gICfilpEnOiBbIC8vIExJR0hUIFNIQURFICgyNSUpXG4gICAgWzEsIDAsIDAsIDBdLFxuICAgIFswLCAwLCAwLCAwXSxcbiAgICBbMCwgMCwgMSwgMF0sXG4gICAgWzAsIDAsIDAsIDBdXG4gIF0sXG4gICfilpInOiBbIC8vIE1FRElVTSBTSEFERSAoNTAlKVxuICAgIFsxLCAwXSxcbiAgICBbMCwgMF0sXG4gICAgWzAsIDFdLFxuICAgIFswLCAwXVxuICBdLFxuICAn4paTJzogWyAvLyBEQVJLIFNIQURFICg3NSUpXG4gICAgWzAsIDFdLFxuICAgIFsxLCAxXSxcbiAgICBbMSwgMF0sXG4gICAgWzEsIDFdXG4gIF1cbn07XG5cbmNvbnN0IGVudW0gU2hhcGVzIHtcbiAgLyoqIOKUgiAqLyBUT1BfVE9fQk9UVE9NID0gJ00uNSwwIEwuNSwxJyxcbiAgLyoqIOKUgCAqLyBMRUZUX1RPX1JJR0hUID0gJ00wLC41IEwxLC41JyxcblxuICAvKiog4pSUICovIFRPUF9UT19SSUdIVCA9ICdNLjUsMCBMLjUsLjUgTDEsLjUnLFxuICAvKiog4pSYICovIFRPUF9UT19MRUZUID0gJ00uNSwwIEwuNSwuNSBMMCwuNScsXG4gIC8qKiDilJAgKi8gTEVGVF9UT19CT1RUT00gPSAnTTAsLjUgTC41LC41IEwuNSwxJyxcbiAgLyoqIOKUjCAqLyBSSUdIVF9UT19CT1RUT00gPSAnTTAuNSwxIEwuNSwuNSBMMSwuNScsXG5cbiAgLyoqIOKVtSAqLyBNSURETEVfVE9fVE9QID0gJ00uNSwuNSBMLjUsMCcsXG4gIC8qKiDilbQgKi8gTUlERExFX1RPX0xFRlQgPSAnTS41LC41IEwwLC41JyxcbiAgLyoqIOKVtiAqLyBNSURETEVfVE9fUklHSFQgPSAnTS41LC41IEwxLC41JyxcbiAgLyoqIOKVtyAqLyBNSURETEVfVE9fQk9UVE9NID0gJ00uNSwuNSBMLjUsMScsXG5cbiAgLyoqIOKUtCAqLyBUX1RPUCA9ICdNMCwuNSBMMSwuNSBNLjUsLjUgTC41LDAnLFxuICAvKiog4pSkICovIFRfTEVGVCA9ICdNLjUsMCBMLjUsMSBNLjUsLjUgTDAsLjUnLFxuICAvKiog4pScICovIFRfUklHSFQgPSAnTS41LDAgTC41LDEgTS41LC41IEwxLC41JyxcbiAgLyoqIOKUrCAqLyBUX0JPVFRPTSA9ICdNMCwuNSBMMSwuNSBNLjUsLjUgTC41LDEnLFxuXG4gIC8qKiDilLwgKi8gQ1JPU1MgPSAnTTAsLjUgTDEsLjUgTS41LDAgTC41LDEnLFxuXG4gIC8qKiDilYwgKi8gVFdPX0RBU0hFU19IT1JJWk9OVEFMID0gJ00uMSwuNSBMLjQsLjUgTS42LC41IEwuOSwuNScsIC8vIC4yIGVtcHR5LCAuMyBmaWxsZWRcbiAgLyoqIOKUhCAqLyBUSFJFRV9EQVNIRVNfSE9SSVpPTlRBTCA9ICdNLjA2NjcsLjUgTC4yNjY3LC41IE0uNCwuNSBMLjYsLjUgTS43MzMzLC41IEwuOTMzMywuNScsIC8vIC4xMzMzIGVtcHR5LCAuMiBmaWxsZWRcbiAgLyoqIOKUiSAqLyBGT1VSX0RBU0hFU19IT1JJWk9OVEFMID0gJ00uMDUsLjUgTC4yLC41IE0uMywuNSBMLjQ1LC41IE0uNTUsLjUgTC43LC41IE0uOCwuNSBMLjk1LC41JywgLy8gLjEgZW1wdHksIC4xNSBmaWxsZWRcbiAgLyoqIOKVjiAqLyBUV09fREFTSEVTX1ZFUlRJQ0FMID0gJ00uNSwuMSBMLjUsLjQgTS41LC42IEwuNSwuOScsXG4gIC8qKiDilIYgKi8gVEhSRUVfREFTSEVTX1ZFUlRJQ0FMID0gJ00uNSwuMDY2NyBMLjUsLjI2NjcgTS41LC40IEwuNSwuNiBNLjUsLjczMzMgTC41LC45MzMzJyxcbiAgLyoqIOKUiiAqLyBGT1VSX0RBU0hFU19WRVJUSUNBTCA9ICdNLjUsLjA1IEwuNSwuMiBNLjUsLjMgTC41LC40NSBMLjUsLjU1IE0uNSwuNyBMLjUsLjk1Jyxcbn1cblxuY29uc3QgZW51bSBTdHlsZSB7XG4gIE5PUk1BTCA9IDEsXG4gIEJPTEQgPSAzXG59XG5cbi8qKlxuICogVGhpcyBjb250YWlucyB0aGUgZGVmaW5pdGlvbnMgb2YgYWxsIGJveCBkcmF3aW5nIGNoYXJhY3RlcnMgaW4gdGhlIGZvcm1hdCBvZiBTVkcgcGF0aHMgKGllLiB0aGVcbiAqIHN2ZyBkIGF0dHJpYnV0ZSkuXG4gKi9cbmV4cG9ydCBjb25zdCBib3hEcmF3aW5nRGVmaW5pdGlvbnM6IHsgW2NoYXJhY3Rlcjogc3RyaW5nXTogeyBbZm9udFdlaWdodDogbnVtYmVyXTogc3RyaW5nIHwgKCh4cDogbnVtYmVyLCB5cDogbnVtYmVyKSA9PiBzdHJpbmcpIH0gfCB1bmRlZmluZWQgfSA9IHtcbiAgLy8gVW5pZm9ybSBub3JtYWwgYW5kIGJvbGRcbiAgJ+KUgCc6IHsgW1N0eWxlLk5PUk1BTF06IFNoYXBlcy5MRUZUX1RPX1JJR0hUIH0sXG4gICfilIEnOiB7IFtTdHlsZS5CT0xEXTogICBTaGFwZXMuTEVGVF9UT19SSUdIVCB9LFxuICAn4pSCJzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLlRPUF9UT19CT1RUT00gfSxcbiAgJ+KUgyc6IHsgW1N0eWxlLkJPTERdOiAgIFNoYXBlcy5UT1BfVE9fQk9UVE9NIH0sXG4gICfilIwnOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuUklHSFRfVE9fQk9UVE9NIH0sXG4gICfilI8nOiB7IFtTdHlsZS5CT0xEXTogICBTaGFwZXMuUklHSFRfVE9fQk9UVE9NIH0sXG4gICfilJAnOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuTEVGVF9UT19CT1RUT00gfSxcbiAgJ+KUkyc6IHsgW1N0eWxlLkJPTERdOiAgIFNoYXBlcy5MRUZUX1RPX0JPVFRPTSB9LFxuICAn4pSUJzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLlRPUF9UT19SSUdIVCB9LFxuICAn4pSXJzogeyBbU3R5bGUuQk9MRF06ICAgU2hhcGVzLlRPUF9UT19SSUdIVCB9LFxuICAn4pSYJzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLlRPUF9UT19MRUZUIH0sXG4gICfilJsnOiB7IFtTdHlsZS5CT0xEXTogICBTaGFwZXMuVE9QX1RPX0xFRlQgfSxcbiAgJ+KUnCc6IHsgW1N0eWxlLk5PUk1BTF06IFNoYXBlcy5UX1JJR0hUIH0sXG4gICfilKMnOiB7IFtTdHlsZS5CT0xEXTogICBTaGFwZXMuVF9SSUdIVCB9LFxuICAn4pSkJzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLlRfTEVGVCB9LFxuICAn4pSrJzogeyBbU3R5bGUuQk9MRF06ICAgU2hhcGVzLlRfTEVGVCB9LFxuICAn4pSsJzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLlRfQk9UVE9NIH0sXG4gICfilLMnOiB7IFtTdHlsZS5CT0xEXTogICBTaGFwZXMuVF9CT1RUT00gfSxcbiAgJ+KUtCc6IHsgW1N0eWxlLk5PUk1BTF06IFNoYXBlcy5UX1RPUCB9LFxuICAn4pS7JzogeyBbU3R5bGUuQk9MRF06ICAgU2hhcGVzLlRfVE9QIH0sXG4gICfilLwnOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuQ1JPU1MgfSxcbiAgJ+KViyc6IHsgW1N0eWxlLkJPTERdOiAgIFNoYXBlcy5DUk9TUyB9LFxuICAn4pW0JzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLk1JRERMRV9UT19MRUZUIH0sXG4gICfilbgnOiB7IFtTdHlsZS5CT0xEXTogICBTaGFwZXMuTUlERExFX1RPX0xFRlQgfSxcbiAgJ+KVtSc6IHsgW1N0eWxlLk5PUk1BTF06IFNoYXBlcy5NSURETEVfVE9fVE9QIH0sXG4gICfilbknOiB7IFtTdHlsZS5CT0xEXTogICBTaGFwZXMuTUlERExFX1RPX1RPUCB9LFxuICAn4pW2JzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLk1JRERMRV9UT19SSUdIVCB9LFxuICAn4pW6JzogeyBbU3R5bGUuQk9MRF06ICAgU2hhcGVzLk1JRERMRV9UT19SSUdIVCB9LFxuICAn4pW3JzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLk1JRERMRV9UT19CT1RUT00gfSxcbiAgJ+KVuyc6IHsgW1N0eWxlLkJPTERdOiAgIFNoYXBlcy5NSURETEVfVE9fQk9UVE9NIH0sXG5cbiAgLy8gRG91YmxlIGJvcmRlclxuICAn4pWQJzogeyBbU3R5bGUuTk9STUFMXTogKHhwLCB5cCkgPT4gYE0wLCR7LjUgLSB5cH0gTDEsJHsuNSAtIHlwfSBNMCwkey41ICsgeXB9IEwxLCR7LjUgKyB5cH1gIH0sXG4gICfilZEnOiB7IFtTdHlsZS5OT1JNQUxdOiAoeHAsIHlwKSA9PiBgTSR7LjUgLSB4cH0sMCBMJHsuNSAtIHhwfSwxIE0key41ICsgeHB9LDAgTCR7LjUgKyB4cH0sMWAgfSxcbiAgJ+KVkic6IHsgW1N0eWxlLk5PUk1BTF06ICh4cCwgeXApID0+IGBNLjUsMSBMLjUsJHsuNSAtIHlwfSBMMSwkey41IC0geXB9IE0uNSwkey41ICsgeXB9IEwxLCR7LjUgKyB5cH1gIH0sXG4gICfilZMnOiB7IFtTdHlsZS5OT1JNQUxdOiAoeHAsIHlwKSA9PiBgTSR7LjUgLSB4cH0sMSBMJHsuNSAtIHhwfSwuNSBMMSwuNSBNJHsuNSArIHhwfSwuNSBMJHsuNSArIHhwfSwxYCB9LFxuICAn4pWUJzogeyBbU3R5bGUuTk9STUFMXTogKHhwLCB5cCkgPT4gYE0xLCR7LjUgLSB5cH0gTCR7LjUgLSB4cH0sJHsuNSAtIHlwfSBMJHsuNSAtIHhwfSwxIE0xLCR7LjUgKyB5cH0gTCR7LjUgKyB4cH0sJHsuNSArIHlwfSBMJHsuNSArIHhwfSwxYCB9LFxuICAn4pWVJzogeyBbU3R5bGUuTk9STUFMXTogKHhwLCB5cCkgPT4gYE0wLCR7LjUgLSB5cH0gTC41LCR7LjUgLSB5cH0gTC41LDEgTTAsJHsuNSArIHlwfSBMLjUsJHsuNSArIHlwfWAgfSxcbiAgJ+KVlic6IHsgW1N0eWxlLk5PUk1BTF06ICh4cCwgeXApID0+IGBNJHsuNSArIHhwfSwxIEwkey41ICsgeHB9LC41IEwwLC41IE0key41IC0geHB9LC41IEwkey41IC0geHB9LDFgIH0sXG4gICfilZcnOiB7IFtTdHlsZS5OT1JNQUxdOiAoeHAsIHlwKSA9PiBgTTAsJHsuNSArIHlwfSBMJHsuNSAtIHhwfSwkey41ICsgeXB9IEwkey41IC0geHB9LDEgTTAsJHsuNSAtIHlwfSBMJHsuNSArIHhwfSwkey41IC0geXB9IEwkey41ICsgeHB9LDFgIH0sXG4gICfilZgnOiB7IFtTdHlsZS5OT1JNQUxdOiAoeHAsIHlwKSA9PiBgTS41LDAgTC41LCR7LjUgKyB5cH0gTDEsJHsuNSArIHlwfSBNLjUsJHsuNSAtIHlwfSBMMSwkey41IC0geXB9YCB9LFxuICAn4pWZJzogeyBbU3R5bGUuTk9STUFMXTogKHhwLCB5cCkgPT4gYE0xLC41IEwkey41IC0geHB9LC41IEwkey41IC0geHB9LDAgTSR7LjUgKyB4cH0sLjUgTCR7LjUgKyB4cH0sMGAgfSxcbiAgJ+KVmic6IHsgW1N0eWxlLk5PUk1BTF06ICh4cCwgeXApID0+IGBNMSwkey41IC0geXB9IEwkey41ICsgeHB9LCR7LjUgLSB5cH0gTCR7LjUgKyB4cH0sMCBNMSwkey41ICsgeXB9IEwkey41IC0geHB9LCR7LjUgKyB5cH0gTCR7LjUgLSB4cH0sMGAgfSxcbiAgJ+KVmyc6IHsgW1N0eWxlLk5PUk1BTF06ICh4cCwgeXApID0+IGBNMCwkey41ICsgeXB9IEwuNSwkey41ICsgeXB9IEwuNSwwIE0wLCR7LjUgLSB5cH0gTC41LCR7LjUgLSB5cH1gIH0sXG4gICfilZwnOiB7IFtTdHlsZS5OT1JNQUxdOiAoeHAsIHlwKSA9PiBgTTAsLjUgTCR7LjUgKyB4cH0sLjUgTCR7LjUgKyB4cH0sMCBNJHsuNSAtIHhwfSwuNSBMJHsuNSAtIHhwfSwwYCB9LFxuICAn4pWdJzogeyBbU3R5bGUuTk9STUFMXTogKHhwLCB5cCkgPT4gYE0wLCR7LjUgLSB5cH0gTCR7LjUgLSB4cH0sJHsuNSAtIHlwfSBMJHsuNSAtIHhwfSwwIE0wLCR7LjUgKyB5cH0gTCR7LjUgKyB4cH0sJHsuNSArIHlwfSBMJHsuNSArIHhwfSwwYCB9LFxuICAn4pWeJzogeyBbU3R5bGUuTk9STUFMXTogKHhwLCB5cCkgPT4gYCR7U2hhcGVzLlRPUF9UT19CT1RUT019IE0uNSwkey41IC0geXB9IEwxLCR7LjUgLSB5cH0gTS41LCR7LjUgKyB5cH0gTDEsJHsuNSArIHlwfWAgfSxcbiAgJ+KVnyc6IHsgW1N0eWxlLk5PUk1BTF06ICh4cCwgeXApID0+IGBNJHsuNSAtIHhwfSwwIEwkey41IC0geHB9LDEgTSR7LjUgKyB4cH0sMCBMJHsuNSArIHhwfSwxIE0key41ICsgeHB9LC41IEwxLC41YCB9LFxuICAn4pWgJzogeyBbU3R5bGUuTk9STUFMXTogKHhwLCB5cCkgPT4gYE0key41IC0geHB9LDAgTCR7LjUgLSB4cH0sMSBNMSwkey41ICsgeXB9IEwkey41ICsgeHB9LCR7LjUgKyB5cH0gTCR7LjUgKyB4cH0sMSBNMSwkey41IC0geXB9IEwkey41ICsgeHB9LCR7LjUgLSB5cH0gTCR7LjUgKyB4cH0sMGAgfSxcbiAgJ+KVoSc6IHsgW1N0eWxlLk5PUk1BTF06ICh4cCwgeXApID0+IGAke1NoYXBlcy5UT1BfVE9fQk9UVE9NfSBNMCwkey41IC0geXB9IEwuNSwkey41IC0geXB9IE0wLCR7LjUgKyB5cH0gTC41LCR7LjUgKyB5cH1gIH0sXG4gICfilaInOiB7IFtTdHlsZS5OT1JNQUxdOiAoeHAsIHlwKSA9PiBgTTAsLjUgTCR7LjUgLSB4cH0sLjUgTSR7LjUgLSB4cH0sMCBMJHsuNSAtIHhwfSwxIE0key41ICsgeHB9LDAgTCR7LjUgKyB4cH0sMWAgfSxcbiAgJ+KVoyc6IHsgW1N0eWxlLk5PUk1BTF06ICh4cCwgeXApID0+IGBNJHsuNSArIHhwfSwwIEwkey41ICsgeHB9LDEgTTAsJHsuNSArIHlwfSBMJHsuNSAtIHhwfSwkey41ICsgeXB9IEwkey41IC0geHB9LDEgTTAsJHsuNSAtIHlwfSBMJHsuNSAtIHhwfSwkey41IC0geXB9IEwkey41IC0geHB9LDBgIH0sXG4gICfilaQnOiB7IFtTdHlsZS5OT1JNQUxdOiAoeHAsIHlwKSA9PiBgTTAsJHsuNSAtIHlwfSBMMSwkey41IC0geXB9IE0wLCR7LjUgKyB5cH0gTDEsJHsuNSArIHlwfSBNLjUsJHsuNSArIHlwfSBMLjUsMWAgfSxcbiAgJ+KVpSc6IHsgW1N0eWxlLk5PUk1BTF06ICh4cCwgeXApID0+IGAke1NoYXBlcy5MRUZUX1RPX1JJR0hUfSBNJHsuNSAtIHhwfSwuNSBMJHsuNSAtIHhwfSwxIE0key41ICsgeHB9LC41IEwkey41ICsgeHB9LDFgIH0sXG4gICfilaYnOiB7IFtTdHlsZS5OT1JNQUxdOiAoeHAsIHlwKSA9PiBgTTAsJHsuNSAtIHlwfSBMMSwkey41IC0geXB9IE0wLCR7LjUgKyB5cH0gTCR7LjUgLSB4cH0sJHsuNSArIHlwfSBMJHsuNSAtIHhwfSwxIE0xLCR7LjUgKyB5cH0gTCR7LjUgKyB4cH0sJHsuNSArIHlwfSBMJHsuNSArIHhwfSwxYCB9LFxuICAn4pWnJzogeyBbU3R5bGUuTk9STUFMXTogKHhwLCB5cCkgPT4gYE0uNSwwIEwuNSwkey41IC0geXB9IE0wLCR7LjUgLSB5cH0gTDEsJHsuNSAtIHlwfSBNMCwkey41ICsgeXB9IEwxLCR7LjUgKyB5cH1gIH0sXG4gICfilagnOiB7IFtTdHlsZS5OT1JNQUxdOiAoeHAsIHlwKSA9PiBgJHtTaGFwZXMuTEVGVF9UT19SSUdIVH0gTSR7LjUgLSB4cH0sLjUgTCR7LjUgLSB4cH0sMCBNJHsuNSArIHhwfSwuNSBMJHsuNSArIHhwfSwwYCB9LFxuICAn4pWpJzogeyBbU3R5bGUuTk9STUFMXTogKHhwLCB5cCkgPT4gYE0wLCR7LjUgKyB5cH0gTDEsJHsuNSArIHlwfSBNMCwkey41IC0geXB9IEwkey41IC0geHB9LCR7LjUgLSB5cH0gTCR7LjUgLSB4cH0sMCBNMSwkey41IC0geXB9IEwkey41ICsgeHB9LCR7LjUgLSB5cH0gTCR7LjUgKyB4cH0sMGAgfSxcbiAgJ+KVqic6IHsgW1N0eWxlLk5PUk1BTF06ICh4cCwgeXApID0+IGAke1NoYXBlcy5UT1BfVE9fQk9UVE9NfSBNMCwkey41IC0geXB9IEwxLCR7LjUgLSB5cH0gTTAsJHsuNSArIHlwfSBMMSwkey41ICsgeXB9YCB9LFxuICAn4pWrJzogeyBbU3R5bGUuTk9STUFMXTogKHhwLCB5cCkgPT4gYCR7U2hhcGVzLkxFRlRfVE9fUklHSFR9IE0key41IC0geHB9LDAgTCR7LjUgLSB4cH0sMSBNJHsuNSArIHhwfSwwIEwkey41ICsgeHB9LDFgIH0sXG4gICfilawnOiB7IFtTdHlsZS5OT1JNQUxdOiAoeHAsIHlwKSA9PiBgTTAsJHsuNSArIHlwfSBMJHsuNSAtIHhwfSwkey41ICsgeXB9IEwkey41IC0geHB9LDEgTTEsJHsuNSArIHlwfSBMJHsuNSArIHhwfSwkey41ICsgeXB9IEwkey41ICsgeHB9LDEgTTAsJHsuNSAtIHlwfSBMJHsuNSAtIHhwfSwkey41IC0geXB9IEwkey41IC0geHB9LDAgTTEsJHsuNSAtIHlwfSBMJHsuNSArIHhwfSwkey41IC0geXB9IEwkey41ICsgeHB9LDBgIH0sXG5cbiAgLy8gRGlhZ29uYWxcbiAgJ+KVsSc6IHsgW1N0eWxlLk5PUk1BTF06ICdNMSwwIEwwLDEnIH0sXG4gICfilbInOiB7IFtTdHlsZS5OT1JNQUxdOiAnTTAsMCBMMSwxJyB9LFxuICAn4pWzJzogeyBbU3R5bGUuTk9STUFMXTogJ00xLDAgTDAsMSBNMCwwIEwxLDEnIH0sXG5cbiAgLy8gTWl4ZWQgd2VpZ2h0XG4gICfilbwnOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuTUlERExFX1RPX0xFRlQsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3R5bGUuQk9MRF06IFNoYXBlcy5NSURETEVfVE9fUklHSFQgfSxcbiAgJ+KVvSc6IHsgW1N0eWxlLk5PUk1BTF06IFNoYXBlcy5NSURETEVfVE9fVE9QLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTdHlsZS5CT0xEXTogU2hhcGVzLk1JRERMRV9UT19CT1RUT00gfSxcbiAgJ+KVvic6IHsgW1N0eWxlLk5PUk1BTF06IFNoYXBlcy5NSURETEVfVE9fUklHSFQsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTdHlsZS5CT0xEXTogU2hhcGVzLk1JRERMRV9UT19MRUZUIH0sXG4gICfilb8nOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuTUlERExFX1RPX0JPVFRPTSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3R5bGUuQk9MRF06IFNoYXBlcy5NSURETEVfVE9fVE9QIH0sXG4gICfilI0nOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuTUlERExFX1RPX0JPVFRPTSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3R5bGUuQk9MRF06IFNoYXBlcy5NSURETEVfVE9fUklHSFQgfSxcbiAgJ+KUjic6IHsgW1N0eWxlLk5PUk1BTF06IFNoYXBlcy5NSURETEVfVE9fUklHSFQsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTdHlsZS5CT0xEXTogU2hhcGVzLk1JRERMRV9UT19CT1RUT00gfSxcbiAgJ+KUkSc6IHsgW1N0eWxlLk5PUk1BTF06IFNoYXBlcy5NSURETEVfVE9fQk9UVE9NLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTdHlsZS5CT0xEXTogU2hhcGVzLk1JRERMRV9UT19MRUZUIH0sXG4gICfilJInOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuTUlERExFX1RPX0xFRlQsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3R5bGUuQk9MRF06IFNoYXBlcy5NSURETEVfVE9fQk9UVE9NIH0sXG4gICfilJUnOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuTUlERExFX1RPX1RPUCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3R5bGUuQk9MRF06IFNoYXBlcy5NSURETEVfVE9fUklHSFQgfSxcbiAgJ+KUlic6IHsgW1N0eWxlLk5PUk1BTF06IFNoYXBlcy5NSURETEVfVE9fUklHSFQsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTdHlsZS5CT0xEXTogU2hhcGVzLk1JRERMRV9UT19UT1AgfSxcbiAgJ+KUmSc6IHsgW1N0eWxlLk5PUk1BTF06IFNoYXBlcy5NSURETEVfVE9fVE9QLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTdHlsZS5CT0xEXTogU2hhcGVzLk1JRERMRV9UT19MRUZUIH0sXG4gICfilJonOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuTUlERExFX1RPX0xFRlQsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3R5bGUuQk9MRF06IFNoYXBlcy5NSURETEVfVE9fVE9QIH0sXG4gICfilJ0nOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuVE9QX1RPX0JPVFRPTSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3R5bGUuQk9MRF06IFNoYXBlcy5NSURETEVfVE9fUklHSFQgfSxcbiAgJ+KUnic6IHsgW1N0eWxlLk5PUk1BTF06IFNoYXBlcy5SSUdIVF9UT19CT1RUT00sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTdHlsZS5CT0xEXTogU2hhcGVzLk1JRERMRV9UT19UT1AgfSxcbiAgJ+KUnyc6IHsgW1N0eWxlLk5PUk1BTF06IFNoYXBlcy5UT1BfVE9fUklHSFQsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTdHlsZS5CT0xEXTogU2hhcGVzLk1JRERMRV9UT19CT1RUT00gfSxcbiAgJ+KUoCc6IHsgW1N0eWxlLk5PUk1BTF06IFNoYXBlcy5NSURETEVfVE9fUklHSFQsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTdHlsZS5CT0xEXTogU2hhcGVzLlRPUF9UT19CT1RUT00gfSxcbiAgJ+KUoSc6IHsgW1N0eWxlLk5PUk1BTF06IFNoYXBlcy5NSURETEVfVE9fQk9UVE9NLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTdHlsZS5CT0xEXTogU2hhcGVzLlRPUF9UT19SSUdIVCB9LFxuICAn4pSiJzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLk1JRERMRV9UT19UT1AsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N0eWxlLkJPTERdOiBTaGFwZXMuUklHSFRfVE9fQk9UVE9NIH0sXG4gICfilKUnOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuVE9QX1RPX0JPVFRPTSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3R5bGUuQk9MRF06IFNoYXBlcy5NSURETEVfVE9fTEVGVCB9LFxuICAn4pSmJzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLkxFRlRfVE9fQk9UVE9NLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N0eWxlLkJPTERdOiBTaGFwZXMuTUlERExFX1RPX1RPUCB9LFxuICAn4pSnJzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLlRPUF9UT19MRUZULCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N0eWxlLkJPTERdOiBTaGFwZXMuTUlERExFX1RPX0JPVFRPTSB9LFxuICAn4pSoJzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLk1JRERMRV9UT19MRUZULCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N0eWxlLkJPTERdOiBTaGFwZXMuVE9QX1RPX0JPVFRPTSB9LFxuICAn4pSpJzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLk1JRERMRV9UT19CT1RUT00sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N0eWxlLkJPTERdOiBTaGFwZXMuVE9QX1RPX0xFRlQgfSxcbiAgJ+KUqic6IHsgW1N0eWxlLk5PUk1BTF06IFNoYXBlcy5NSURETEVfVE9fVE9QLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTdHlsZS5CT0xEXTogU2hhcGVzLkxFRlRfVE9fQk9UVE9NIH0sXG4gICfilK0nOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuUklHSFRfVE9fQk9UVE9NLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3R5bGUuQk9MRF06IFNoYXBlcy5NSURETEVfVE9fTEVGVCB9LFxuICAn4pSuJzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLkxFRlRfVE9fQk9UVE9NLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N0eWxlLkJPTERdOiBTaGFwZXMuTUlERExFX1RPX1JJR0hUIH0sXG4gICfilK8nOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuTUlERExFX1RPX0JPVFRPTSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3R5bGUuQk9MRF06IFNoYXBlcy5MRUZUX1RPX1JJR0hUIH0sXG4gICfilLAnOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuTEVGVF9UT19SSUdIVCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3R5bGUuQk9MRF06IFNoYXBlcy5NSURETEVfVE9fQk9UVE9NIH0sXG4gICfilLEnOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuTUlERExFX1RPX1JJR0hULCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3R5bGUuQk9MRF06IFNoYXBlcy5MRUZUX1RPX0JPVFRPTSB9LFxuICAn4pSyJzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLk1JRERMRV9UT19MRUZULCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N0eWxlLkJPTERdOiBTaGFwZXMuUklHSFRfVE9fQk9UVE9NIH0sXG4gICfilLUnOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuVE9QX1RPX1JJR0hULCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3R5bGUuQk9MRF06IFNoYXBlcy5NSURETEVfVE9fTEVGVCB9LFxuICAn4pS2JzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLlRPUF9UT19MRUZULCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N0eWxlLkJPTERdOiBTaGFwZXMuTUlERExFX1RPX1JJR0hUIH0sXG4gICfilLcnOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuTUlERExFX1RPX1RPUCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3R5bGUuQk9MRF06IFNoYXBlcy5MRUZUX1RPX1JJR0hUIH0sXG4gICfilLgnOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuTEVGVF9UT19SSUdIVCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3R5bGUuQk9MRF06IFNoYXBlcy5NSURETEVfVE9fVE9QIH0sXG4gICfilLknOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuTUlERExFX1RPX1JJR0hULCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3R5bGUuQk9MRF06IFNoYXBlcy5UT1BfVE9fTEVGVCB9LFxuICAn4pS6JzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLk1JRERMRV9UT19MRUZULCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N0eWxlLkJPTERdOiBTaGFwZXMuVE9QX1RPX1JJR0hUIH0sXG4gICfilL0nOiB7IFtTdHlsZS5OT1JNQUxdOiBgJHtTaGFwZXMuVE9QX1RPX0JPVFRPTX0gJHtTaGFwZXMuTUlERExFX1RPX1JJR0hUfWAsICBbU3R5bGUuQk9MRF06IFNoYXBlcy5NSURETEVfVE9fTEVGVCB9LFxuICAn4pS+JzogeyBbU3R5bGUuTk9STUFMXTogYCR7U2hhcGVzLlRPUF9UT19CT1RUT019ICR7U2hhcGVzLk1JRERMRV9UT19MRUZUfWAsICAgW1N0eWxlLkJPTERdOiBTaGFwZXMuTUlERExFX1RPX1JJR0hUIH0sXG4gICfilL8nOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuVE9QX1RPX0JPVFRPTSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3R5bGUuQk9MRF06IFNoYXBlcy5MRUZUX1RPX1JJR0hUIH0sXG4gICfilYAnOiB7IFtTdHlsZS5OT1JNQUxdOiBgJHtTaGFwZXMuTEVGVF9UT19SSUdIVH0gJHtTaGFwZXMuTUlERExFX1RPX0JPVFRPTX1gLCBbU3R5bGUuQk9MRF06IFNoYXBlcy5NSURETEVfVE9fVE9QIH0sXG4gICfilYEnOiB7IFtTdHlsZS5OT1JNQUxdOiBgJHtTaGFwZXMuTUlERExFX1RPX1RPUH0gJHtTaGFwZXMuTEVGVF9UT19SSUdIVH1gLCAgICBbU3R5bGUuQk9MRF06IFNoYXBlcy5NSURETEVfVE9fQk9UVE9NIH0sXG4gICfilYInOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuTEVGVF9UT19SSUdIVCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3R5bGUuQk9MRF06IFNoYXBlcy5UT1BfVE9fQk9UVE9NIH0sXG4gICfilYMnOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuUklHSFRfVE9fQk9UVE9NLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3R5bGUuQk9MRF06IFNoYXBlcy5UT1BfVE9fTEVGVCB9LFxuICAn4pWEJzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLkxFRlRfVE9fQk9UVE9NLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N0eWxlLkJPTERdOiBTaGFwZXMuVE9QX1RPX1JJR0hUIH0sXG4gICfilYUnOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuVE9QX1RPX1JJR0hULCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3R5bGUuQk9MRF06IFNoYXBlcy5MRUZUX1RPX0JPVFRPTSB9LFxuICAn4pWGJzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLlRPUF9UT19MRUZULCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N0eWxlLkJPTERdOiBTaGFwZXMuUklHSFRfVE9fQk9UVE9NIH0sXG4gICfilYcnOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuTUlERExFX1RPX0JPVFRPTSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3R5bGUuQk9MRF06IGAke1NoYXBlcy5NSURETEVfVE9fVE9QfSAke1NoYXBlcy5MRUZUX1RPX1JJR0hUfWAgfSxcbiAgJ+KViCc6IHsgW1N0eWxlLk5PUk1BTF06IFNoYXBlcy5NSURETEVfVE9fVE9QLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTdHlsZS5CT0xEXTogYCR7U2hhcGVzLkxFRlRfVE9fUklHSFR9ICR7U2hhcGVzLk1JRERMRV9UT19CT1RUT019YCB9LFxuICAn4pWJJzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLk1JRERMRV9UT19SSUdIVCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N0eWxlLkJPTERdOiBgJHtTaGFwZXMuVE9QX1RPX0JPVFRPTX0gJHtTaGFwZXMuTUlERExFX1RPX0xFRlR9YCB9LFxuICAn4pWKJzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLk1JRERMRV9UT19MRUZULCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N0eWxlLkJPTERdOiBgJHtTaGFwZXMuVE9QX1RPX0JPVFRPTX0gJHtTaGFwZXMuTUlERExFX1RPX1JJR0hUfWAgfSxcblxuICAvLyBEYXNoZWRcbiAgJ+KVjCc6IHsgW1N0eWxlLk5PUk1BTF06IFNoYXBlcy5UV09fREFTSEVTX0hPUklaT05UQUwgfSxcbiAgJ+KVjSc6IHsgW1N0eWxlLkJPTERdOiAgIFNoYXBlcy5UV09fREFTSEVTX0hPUklaT05UQUwgfSxcbiAgJ+KUhCc6IHsgW1N0eWxlLk5PUk1BTF06IFNoYXBlcy5USFJFRV9EQVNIRVNfSE9SSVpPTlRBTCB9LFxuICAn4pSFJzogeyBbU3R5bGUuQk9MRF06ICAgU2hhcGVzLlRIUkVFX0RBU0hFU19IT1JJWk9OVEFMIH0sXG4gICfilIgnOiB7IFtTdHlsZS5OT1JNQUxdOiBTaGFwZXMuRk9VUl9EQVNIRVNfSE9SSVpPTlRBTCB9LFxuICAn4pSJJzogeyBbU3R5bGUuQk9MRF06ICAgU2hhcGVzLkZPVVJfREFTSEVTX0hPUklaT05UQUwgfSxcbiAgJ+KVjic6IHsgW1N0eWxlLk5PUk1BTF06IFNoYXBlcy5UV09fREFTSEVTX1ZFUlRJQ0FMIH0sXG4gICfilY8nOiB7IFtTdHlsZS5CT0xEXTogICBTaGFwZXMuVFdPX0RBU0hFU19WRVJUSUNBTCB9LFxuICAn4pSGJzogeyBbU3R5bGUuTk9STUFMXTogU2hhcGVzLlRIUkVFX0RBU0hFU19WRVJUSUNBTCAgfSxcbiAgJ+KUhyc6IHsgW1N0eWxlLkJPTERdOiAgIFNoYXBlcy5USFJFRV9EQVNIRVNfVkVSVElDQUwgfSxcbiAgJ+KUiic6IHsgW1N0eWxlLk5PUk1BTF06IFNoYXBlcy5GT1VSX0RBU0hFU19WRVJUSUNBTCB9LFxuICAn4pSLJzogeyBbU3R5bGUuQk9MRF06ICAgU2hhcGVzLkZPVVJfREFTSEVTX1ZFUlRJQ0FMIH0sXG5cbiAgLy8gQ3VydmVkXG4gICfila0nOiB7IFtTdHlsZS5OT1JNQUxdOiAnQy41LDEsLjUsLjUsMSwuNScgfSxcbiAgJ+KVric6IHsgW1N0eWxlLk5PUk1BTF06ICdDLjUsMSwuNSwuNSwwLC41JyB9LFxuICAn4pWvJzogeyBbU3R5bGUuTk9STUFMXTogJ0MuNSwwLC41LC41LDAsLjUnIH0sXG4gICfilbAnOiB7IFtTdHlsZS5OT1JNQUxdOiAnQy41LDAsLjUsLjUsMSwuNScgfVxufTtcblxuLyoqXG4gKiBUcnkgZHJhd2luZyBhIGN1c3RvbSBibG9jayBlbGVtZW50IG9yIGJveCBkcmF3aW5nIGNoYXJhY3RlciwgcmV0dXJuaW5nIHdoZXRoZXIgaXQgd2FzXG4gKiBzdWNjZXNzZnVsbHkgZHJhd24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cnlEcmF3Q3VzdG9tQ2hhcihcbiAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gIGM6IHN0cmluZyxcbiAgeE9mZnNldDogbnVtYmVyLFxuICB5T2Zmc2V0OiBudW1iZXIsXG4gIHNjYWxlZENlbGxXaWR0aDogbnVtYmVyLFxuICBzY2FsZWRDZWxsSGVpZ2h0OiBudW1iZXJcbik6IGJvb2xlYW4ge1xuICBjb25zdCBibG9ja0VsZW1lbnREZWZpbml0aW9uID0gYmxvY2tFbGVtZW50RGVmaW5pdGlvbnNbY107XG4gIGlmIChibG9ja0VsZW1lbnREZWZpbml0aW9uKSB7XG4gICAgZHJhd0Jsb2NrRWxlbWVudENoYXIoY3R4LCBibG9ja0VsZW1lbnREZWZpbml0aW9uLCB4T2Zmc2V0LCB5T2Zmc2V0LCBzY2FsZWRDZWxsV2lkdGgsIHNjYWxlZENlbGxIZWlnaHQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY29uc3QgcGF0dGVybkRlZmluaXRpb24gPSBwYXR0ZXJuQ2hhcmFjdGVyRGVmaW5pdGlvbnNbY107XG4gIGlmIChwYXR0ZXJuRGVmaW5pdGlvbikge1xuICAgIGRyYXdQYXR0ZXJuQ2hhcihjdHgsIHBhdHRlcm5EZWZpbml0aW9uLCB4T2Zmc2V0LCB5T2Zmc2V0LCBzY2FsZWRDZWxsV2lkdGgsIHNjYWxlZENlbGxIZWlnaHQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY29uc3QgYm94RHJhd2luZ0RlZmluaXRpb24gPSBib3hEcmF3aW5nRGVmaW5pdGlvbnNbY107XG4gIGlmIChib3hEcmF3aW5nRGVmaW5pdGlvbikge1xuICAgIGRyYXdCb3hEcmF3aW5nQ2hhcihjdHgsIGJveERyYXdpbmdEZWZpbml0aW9uLCB4T2Zmc2V0LCB5T2Zmc2V0LCBzY2FsZWRDZWxsV2lkdGgsIHNjYWxlZENlbGxIZWlnaHQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBkcmF3QmxvY2tFbGVtZW50Q2hhcihcbiAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gIGNoYXJEZWZpbml0aW9uOiBJQmxvY2tWZWN0b3JbXSxcbiAgeE9mZnNldDogbnVtYmVyLFxuICB5T2Zmc2V0OiBudW1iZXIsXG4gIHNjYWxlZENlbGxXaWR0aDogbnVtYmVyLFxuICBzY2FsZWRDZWxsSGVpZ2h0OiBudW1iZXJcbik6IHZvaWQge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJEZWZpbml0aW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYm94ID0gY2hhckRlZmluaXRpb25baV07XG4gICAgY29uc3QgeEVpZ2h0aCA9IHNjYWxlZENlbGxXaWR0aCAvIDg7XG4gICAgY29uc3QgeUVpZ2h0aCA9IHNjYWxlZENlbGxIZWlnaHQgLyA4O1xuICAgIGN0eC5maWxsUmVjdChcbiAgICAgIHhPZmZzZXQgKyBib3gueCAqIHhFaWdodGgsXG4gICAgICB5T2Zmc2V0ICsgYm94LnkgKiB5RWlnaHRoLFxuICAgICAgYm94LncgKiB4RWlnaHRoLFxuICAgICAgYm94LmggKiB5RWlnaHRoXG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBjYWNoZWRQYXR0ZXJuczogTWFwPFBhdHRlcm5EZWZpbml0aW9uLCBNYXA8LyogZmlsbFN0eWxlICovc3RyaW5nLCBDYW52YXNQYXR0ZXJuPj4gPSBuZXcgTWFwKCk7XG5cbmZ1bmN0aW9uIGRyYXdQYXR0ZXJuQ2hhcihcbiAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gIGNoYXJEZWZpbml0aW9uOiBudW1iZXJbXVtdLFxuICB4T2Zmc2V0OiBudW1iZXIsXG4gIHlPZmZzZXQ6IG51bWJlcixcbiAgc2NhbGVkQ2VsbFdpZHRoOiBudW1iZXIsXG4gIHNjYWxlZENlbGxIZWlnaHQ6IG51bWJlclxuKTogdm9pZCB7XG4gIGxldCBwYXR0ZXJuU2V0ID0gY2FjaGVkUGF0dGVybnMuZ2V0KGNoYXJEZWZpbml0aW9uKTtcbiAgaWYgKCFwYXR0ZXJuU2V0KSB7XG4gICAgcGF0dGVyblNldCA9IG5ldyBNYXAoKTtcbiAgICBjYWNoZWRQYXR0ZXJucy5zZXQoY2hhckRlZmluaXRpb24sIHBhdHRlcm5TZXQpO1xuICB9XG4gIGNvbnN0IGZpbGxTdHlsZSA9IGN0eC5maWxsU3R5bGU7XG4gIGlmICh0eXBlb2YgZmlsbFN0eWxlICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBmaWxsU3R5bGUgdHlwZSBcIiR7ZmlsbFN0eWxlfVwiYCk7XG4gIH1cbiAgbGV0IHBhdHRlcm4gPSBwYXR0ZXJuU2V0LmdldChmaWxsU3R5bGUpO1xuICBpZiAoIXBhdHRlcm4pIHtcbiAgICBjb25zdCB3aWR0aCA9IGNoYXJEZWZpbml0aW9uWzBdLmxlbmd0aDtcbiAgICBjb25zdCBoZWlnaHQgPSBjaGFyRGVmaW5pdGlvbi5sZW5ndGg7XG4gICAgY29uc3QgdG1wQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgdG1wQ2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgdG1wQ2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICBjb25zdCB0bXBDdHggPSB0aHJvd0lmRmFsc3kodG1wQ2FudmFzLmdldENvbnRleHQoJzJkJykpO1xuICAgIGNvbnN0IGltYWdlRGF0YSA9IG5ldyBJbWFnZURhdGEod2lkdGgsIGhlaWdodCk7XG5cbiAgICAvLyBFeHRyYWN0IHJnYmEgZnJvbSBmaWxsU3R5bGVcbiAgICBsZXQgcjogbnVtYmVyO1xuICAgIGxldCBnOiBudW1iZXI7XG4gICAgbGV0IGI6IG51bWJlcjtcbiAgICBsZXQgYTogbnVtYmVyO1xuICAgIGlmIChmaWxsU3R5bGUuc3RhcnRzV2l0aCgnIycpKSB7XG4gICAgICByID0gcGFyc2VJbnQoZmlsbFN0eWxlLnN1YnN0cigxLCAyKSwgMTYpO1xuICAgICAgZyA9IHBhcnNlSW50KGZpbGxTdHlsZS5zdWJzdHIoMywgMiksIDE2KTtcbiAgICAgIGIgPSBwYXJzZUludChmaWxsU3R5bGUuc3Vic3RyKDUsIDIpLCAxNik7XG4gICAgICBhID0gZmlsbFN0eWxlLmxlbmd0aCA+IDcgJiYgcGFyc2VJbnQoZmlsbFN0eWxlLnN1YnN0cig3LCAyKSwgMTYpIHx8IDE7XG4gICAgfSBlbHNlIGlmIChmaWxsU3R5bGUuc3RhcnRzV2l0aCgncmdiYScpKSB7XG4gICAgICAoW3IsIGcsIGIsIGFdID0gZmlsbFN0eWxlLnN1YnN0cmluZyg1LCBmaWxsU3R5bGUubGVuZ3RoIC0gMSkuc3BsaXQoJywnKS5tYXAoZSA9PiBwYXJzZUZsb2F0KGUpKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBmaWxsU3R5bGUgY29sb3IgZm9ybWF0IFwiJHtmaWxsU3R5bGV9XCIgd2hlbiBkcmF3aW5nIHBhdHRlcm4gZ2x5cGhgKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgICAgaW1hZ2VEYXRhLmRhdGFbKHkgKiB3aWR0aCArIHgpICogNCAgICBdID0gcjtcbiAgICAgICAgaW1hZ2VEYXRhLmRhdGFbKHkgKiB3aWR0aCArIHgpICogNCArIDFdID0gZztcbiAgICAgICAgaW1hZ2VEYXRhLmRhdGFbKHkgKiB3aWR0aCArIHgpICogNCArIDJdID0gYjtcbiAgICAgICAgaW1hZ2VEYXRhLmRhdGFbKHkgKiB3aWR0aCArIHgpICogNCArIDNdID0gY2hhckRlZmluaXRpb25beV1beF0gKiAoYSAqIDI1NSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRtcEN0eC5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCAwLCAwKTtcbiAgICBwYXR0ZXJuID0gdGhyb3dJZkZhbHN5KGN0eC5jcmVhdGVQYXR0ZXJuKHRtcENhbnZhcywgbnVsbCkpO1xuICAgIHBhdHRlcm5TZXQuc2V0KGZpbGxTdHlsZSwgcGF0dGVybik7XG4gIH1cbiAgY3R4LmZpbGxTdHlsZSA9IHBhdHRlcm47XG4gIGN0eC5maWxsUmVjdCh4T2Zmc2V0LCB5T2Zmc2V0LCBzY2FsZWRDZWxsV2lkdGgsIHNjYWxlZENlbGxIZWlnaHQpO1xufVxuXG4vKipcbiAqIERyYXdzIHRoZSBmb2xsb3dpbmcgYm94IGRyYXdpbmcgY2hhcmFjdGVycyBieSBtYXBwaW5nIGEgc3Vic2V0IG9mIFNWRyBkIGF0dHJpYnV0ZSBpbnN0cnVjdGlvbnMgdG9cbiAqIGNhbnZhcyBkcmF3IGNhbGxzLlxuICpcbiAqIEJveCBzdHlsZXM6ICAgICAgIOKUjuKUsOKUkuKUjeKUr+KUkeKVk+KVpeKVluKVkuKVpOKVlSDilI/ilLPilJPilIzilLLilJPilIzilKzilJDilI/ilLHilJBcbiAqIOKUjOKUgOKUrOKUgOKUkCDilI/ilIHilLPilIHilJMg4pWU4pWQ4pWm4pWQ4pWXIOKUoOKVguKUqOKUneKUv+KUpeKVn+KVq+KVouKVnuKVquKVoSDilKHilYfilKnilJzilYrilKvilKLilYjilKrilKPilYnilKRcbiAqIOKUgiDilIIg4pSCIOKUgyDilIMg4pSDIOKVkSDilZEg4pWRIOKUluKUuOKUmuKUleKUt+KUmeKVmeKVqOKVnOKVmOKVp+KVmyDilJTilLTilJjilJTilLrilJvilJfilLvilJvilJfilLnilJhcbiAqIOKUnOKUgOKUvOKUgOKUpCDilKPilIHilYvilIHilKsg4pWg4pWQ4pWs4pWQ4pWjIOKUj+KUseKUkOKUjOKUsuKUk+KUjOKUrOKUkOKUjOKUrOKUkCDilI/ilLPilJPilIzilK7ilJPilIzilKzilJDilI/ilK3ilJBcbiAqIOKUgiDilIIg4pSCIOKUgyDilIMg4pSDIOKVkSDilZEg4pWRIOKUoeKVg+KUpOKUnOKVhOKUqeKUnOKVhuKUquKUouKVheKUpCDilJ7ilYDilKbilJzilL7ilKvilJ/ilYHilKfilKPilL3ilKRcbiAqIOKUlOKUgOKUtOKUgOKUmCDilJfilIHilLvilIHilJsg4pWa4pWQ4pWp4pWQ4pWdIOKUlOKUtOKUmOKUlOKUtOKUmOKUlOKUuuKUm+KUl+KUueKUmCDilJTilLTilJjilJTilLbilJvilJfilLvilJvilJfilLXilJhcbiAqXG4gKiBPdGhlcjpcbiAqIOKVreKUgOKVriDilbIg4pWxIOKVt+KVu+KVjuKVj+KUhuKUh+KUiuKUiyDilbrilb7ilbQg4pWM4pWM4pWMIOKUhOKUhOKUhCDilIjilIjilIhcbiAqIOKUgiDilIIgIOKVsyAg4pW94pW/4pWO4pWP4pSG4pSH4pSK4pSLIOKVtuKVvOKVuCDilY3ilY3ilY0g4pSF4pSF4pSFIOKUieKUieKUiVxuICog4pWw4pSA4pWvIOKVsSDilbIg4pW54pW14pWO4pWP4pSG4pSH4pSK4pSLXG4gKlxuICogQWxsIGJveCBkcmF3aW5nIGNoYXJhY3RlcnM6XG4gKiDilIAg4pSBIOKUgiDilIMg4pSEIOKUhSDilIYg4pSHIOKUiCDilIkg4pSKIOKUiyDilIwg4pSNIOKUjiDilI9cbiAqIOKUkCDilJEg4pSSIOKUkyDilJQg4pSVIOKUliDilJcg4pSYIOKUmSDilJog4pSbIOKUnCDilJ0g4pSeIOKUn1xuICog4pSgIOKUoSDilKIg4pSjIOKUpCDilKUg4pSmIOKUpyDilKgg4pSpIOKUqiDilKsg4pSsIOKUrSDilK4g4pSvXG4gKiDilLAg4pSxIOKUsiDilLMg4pS0IOKUtSDilLYg4pS3IOKUuCDilLkg4pS6IOKUuyDilLwg4pS9IOKUviDilL9cbiAqIOKVgCDilYEg4pWCIOKVgyDilYQg4pWFIOKVhiDilYcg4pWIIOKViSDilYog4pWLIOKVjCDilY0g4pWOIOKVj1xuICog4pWQIOKVkSDilZIg4pWTIOKVlCDilZUg4pWWIOKVlyDilZgg4pWZIOKVmiDilZsg4pWcIOKVnSDilZ4g4pWfXG4gKiDilaAg4pWhIOKVoiDilaMg4pWkIOKVpSDilaYg4pWnIOKVqCDilakg4pWqIOKVqyDilawg4pWtIOKVriDila9cbiAqIOKVsCDilbEg4pWyIOKVsyDilbQg4pW1IOKVtiDilbcg4pW4IOKVuSDilbog4pW7IOKVvCDilb0g4pW+IOKVv1xuICpcbiAqIC0tLVxuICpcbiAqIEJveCBkcmF3aW5nIGFsaWdubWVudCB0ZXN0czogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDilohcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDilolcbiAqICAg4pWU4pWQ4pWQ4pWm4pWQ4pWQ4pWXICDilIzilIDilIDilKzilIDilIDilJAgIOKVreKUgOKUgOKUrOKUgOKUgOKVriAg4pWt4pSA4pSA4pSs4pSA4pSA4pWuICDilI/ilIHilIHilLPilIHilIHilJMgIOKUjuKUkuKUj+KUkSAgIOKVtyAg4pW7IOKUj+KUr+KUkyDilIzilLDilJAgICAg4paKIOKVseKVsuKVseKVsuKVs+KVs+KVs1xuICogICDilZHilIzilIDilajilIDilJDilZEgIOKUguKVlOKVkOKVp+KVkOKVl+KUgiAg4pSC4pWS4pWQ4pWq4pWQ4pWV4pSCICDilILilZPilIDilYHilIDilZbilIIgIOKUg+KUjOKUgOKVguKUgOKUkOKUgyAg4pSX4pWD4pWE4pSZICDilbbilLzilbTilbrilYvilbjilKDilLzilKgg4pSd4pWL4pSlICAgIOKWiyDilbLilbHilbLilbHilbPilbPilbNcbiAqICAg4pWR4pSC4pWyIOKVseKUguKVkSAg4pSC4pWRICAg4pWR4pSCICDilILilIIg4pSCIOKUguKUgiAg4pSC4pWRIOKUgyDilZHilIIgIOKUg+KUgiDilb8g4pSC4pSDICDilI3ilYXilYbilJMgICDilbUgIOKVuSDilJfilLfilJsg4pSU4pS44pSYICAgIOKWjCDilbHilbLilbHilbLilbPilbPilbNcbiAqICAg4pWg4pWhIOKVsyDilZ7ilaMgIOKUnOKVoiAgIOKVn+KUpCAg4pSc4pS84pSA4pS84pSA4pS84pSkICDilJzilavilIDilYLilIDilavilKQgIOKUo+KUv+KVvuKUvOKVvOKUv+KUqyAg4pSV4pSb4pSW4pSaICAgICDilIzilITilITilJAg4pWOIOKUj+KUheKUheKUkyDilIsg4paNIOKVsuKVseKVsuKVseKVs+KVs+KVs1xuICogICDilZHilILilbEg4pWy4pSC4pWRICDilILilZEgICDilZHilIIgIOKUguKUgiDilIIg4pSC4pSCICDilILilZEg4pSDIOKVkeKUgiAg4pSD4pSCIOKVvSDilILilIMgIOKWkeKWkeKWkuKWkuKWk+KWk+KWiOKWiCDilIogIOKUhiDilY4g4pWPICDilIcg4pSLIOKWjlxuICogICDilZHilJTilIDilaXilIDilJjilZEgIOKUguKVmuKVkOKVpOKVkOKVneKUgiAg4pSC4pWY4pWQ4pWq4pWQ4pWb4pSCICDilILilZnilIDilYDilIDilZzilIIgIOKUg+KUlOKUgOKVguKUgOKUmOKUgyAg4paR4paR4paS4paS4paT4paT4paI4paIIOKUiiAg4pSGIOKVjiDilY8gIOKUhyDilIsg4paPXG4gKiAgIOKVmuKVkOKVkOKVqeKVkOKVkOKVnSAg4pSU4pSA4pSA4pS04pSA4pSA4pSYICDilbDilIDilIDilLTilIDilIDila8gIOKVsOKUgOKUgOKUtOKUgOKUgOKVryAg4pSX4pSB4pSB4pS74pSB4pSB4pSbICAgICAgICAgICDilJTilYzilYzilJgg4pWOIOKUl+KVjeKVjeKUmyDilIsgIOKWgeKWguKWg+KWhOKWheKWhuKWh+KWiFxuICpcbiAqIFNvdXJjZTogaHR0cHM6Ly93d3cudzMub3JnLzIwMDEvMDYvdXRmLTgtdGVzdC9VVEYtOC1kZW1vLmh0bWxcbiAqL1xuZnVuY3Rpb24gZHJhd0JveERyYXdpbmdDaGFyKFxuICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgY2hhckRlZmluaXRpb246IHsgW2ZvbnRXZWlnaHQ6IG51bWJlcl06IHN0cmluZyB8ICgoeHA6IG51bWJlciwgeXA6IG51bWJlcikgPT4gc3RyaW5nKSB9LFxuICB4T2Zmc2V0OiBudW1iZXIsXG4gIHlPZmZzZXQ6IG51bWJlcixcbiAgc2NhbGVkQ2VsbFdpZHRoOiBudW1iZXIsXG4gIHNjYWxlZENlbGxIZWlnaHQ6IG51bWJlclxuKTogdm9pZCB7XG4gIGN0eC5zdHJva2VTdHlsZSA9IGN0eC5maWxsU3R5bGU7XG4gIGZvciAoY29uc3QgW2ZvbnRXZWlnaHQsIGluc3RydWN0aW9uc10gb2YgT2JqZWN0LmVudHJpZXMoY2hhckRlZmluaXRpb24pKSB7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5saW5lV2lkdGggPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyAqIE51bWJlci5wYXJzZUludChmb250V2VpZ2h0KTtcbiAgICBsZXQgYWN0dWFsSW5zdHJ1Y3Rpb25zOiBzdHJpbmc7XG4gICAgaWYgKHR5cGVvZiBpbnN0cnVjdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnN0IHhwID0gLjE1O1xuICAgICAgY29uc3QgeXAgPSAuMTUgLyBzY2FsZWRDZWxsSGVpZ2h0ICogc2NhbGVkQ2VsbFdpZHRoO1xuICAgICAgYWN0dWFsSW5zdHJ1Y3Rpb25zID0gaW5zdHJ1Y3Rpb25zKHhwLCB5cCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdHVhbEluc3RydWN0aW9ucyA9IGluc3RydWN0aW9ucztcbiAgICB9XG4gICAgZm9yIChjb25zdCBpbnN0cnVjdGlvbiBvZiBhY3R1YWxJbnN0cnVjdGlvbnMuc3BsaXQoJyAnKSkge1xuICAgICAgY29uc3QgdHlwZSA9IGluc3RydWN0aW9uWzBdO1xuICAgICAgY29uc3QgZiA9IHN2Z1RvQ2FudmFzSW5zdHJ1Y3Rpb25NYXBbdHlwZV07XG4gICAgICBpZiAoIWYpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgQ291bGQgbm90IGZpbmQgZHJhd2luZyBpbnN0cnVjdGlvbnMgZm9yIFwiJHt0eXBlfVwiYCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgYXJnczogc3RyaW5nW10gPSBpbnN0cnVjdGlvbi5zdWJzdHJpbmcoMSkuc3BsaXQoJywnKTtcbiAgICAgIGlmICghYXJnc1swXSB8fCAhYXJnc1sxXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGYoY3R4LCB0cmFuc2xhdGVBcmdzKGFyZ3MsIHNjYWxlZENlbGxXaWR0aCwgc2NhbGVkQ2VsbEhlaWdodCwgeE9mZnNldCwgeU9mZnNldCkpO1xuICAgIH1cbiAgICBjdHguc3Ryb2tlKCk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsYW1wKHZhbHVlOiBudW1iZXIsIG1heDogbnVtYmVyLCBtaW46IG51bWJlciA9IDApOiBudW1iZXIge1xuICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4odmFsdWUsIG1heCksIG1pbik7XG59XG5cbmNvbnN0IHN2Z1RvQ2FudmFzSW5zdHJ1Y3Rpb25NYXA6IHsgW2luZGV4OiBzdHJpbmddOiBhbnkgfSA9IHtcbiAgJ0MnOiAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGFyZ3M6IG51bWJlcltdKSA9PiBjdHguYmV6aWVyQ3VydmVUbyhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKSxcbiAgJ0wnOiAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGFyZ3M6IG51bWJlcltdKSA9PiBjdHgubGluZVRvKGFyZ3NbMF0sIGFyZ3NbMV0pLFxuICAnTSc6IChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgYXJnczogbnVtYmVyW10pID0+IGN0eC5tb3ZlVG8oYXJnc1swXSwgYXJnc1sxXSlcbn07XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZUFyZ3MoYXJnczogc3RyaW5nW10sIGNlbGxXaWR0aDogbnVtYmVyLCBjZWxsSGVpZ2h0OiBudW1iZXIsIHhPZmZzZXQ6IG51bWJlciwgeU9mZnNldDogbnVtYmVyKTogbnVtYmVyW10ge1xuICBjb25zdCByZXN1bHQgPSBhcmdzLm1hcChlID0+IHBhcnNlRmxvYXQoZSkgfHwgcGFyc2VJbnQoZSkpO1xuXG4gIGlmIChyZXN1bHQubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFcnJvcignVG9vIGZldyBhcmd1bWVudHMgZm9yIGluc3RydWN0aW9uJyk7XG4gIH1cblxuICBmb3IgKGxldCB4ID0gMDsgeCA8IHJlc3VsdC5sZW5ndGg7IHggKz0gMikge1xuICAgIC8vIFRyYW5zbGF0ZSBmcm9tIDAtMSB0byAwLWNlbGxXaWR0aFxuICAgIHJlc3VsdFt4XSAqPSBjZWxsV2lkdGg7XG4gICAgLy8gRW5zdXJlIGNvb3JkaW5hdGUgZG9lc24ndCBlc2NhcGUgY2VsbCBib3VuZHMgYW5kIHJvdW5kIHRvIHRoZSBuZWFyZXN0IDAuNSB0byBlbnN1cmUgYSBjcmlzcFxuICAgIC8vIGxpbmUgYXQgMTAwJSBkZXZpY2VQaXhlbFJhdGlvXG4gICAgaWYgKHJlc3VsdFt4XSAhPT0gMCkge1xuICAgICAgcmVzdWx0W3hdID0gY2xhbXAoTWF0aC5yb3VuZChyZXN1bHRbeF0gKyAwLjUpIC0gMC41LCBjZWxsV2lkdGgsIDApO1xuICAgIH1cbiAgICAvLyBBcHBseSB0aGUgY2VsbCdzIG9mZnNldCAoaWUuIHgqY2VsbFdpZHRoKVxuICAgIHJlc3VsdFt4XSArPSB4T2Zmc2V0O1xuICB9XG5cbiAgZm9yIChsZXQgeSA9IDE7IHkgPCByZXN1bHQubGVuZ3RoOyB5ICs9IDIpIHtcbiAgICAvLyBUcmFuc2xhdGUgZnJvbSAwLTEgdG8gMC1jZWxsSGVpZ2h0XG4gICAgcmVzdWx0W3ldICo9IGNlbGxIZWlnaHQ7XG4gICAgLy8gRW5zdXJlIGNvb3JkaW5hdGUgZG9lc24ndCBlc2NhcGUgY2VsbCBib3VuZHMgYW5kIHJvdW5kIHRvIHRoZSBuZWFyZXN0IDAuNSB0byBlbnN1cmUgYSBjcmlzcFxuICAgIC8vIGxpbmUgYXQgMTAwJSBkZXZpY2VQaXhlbFJhdGlvXG4gICAgaWYgKHJlc3VsdFt5XSAhPT0gMCkge1xuICAgICAgcmVzdWx0W3ldID0gY2xhbXAoTWF0aC5yb3VuZChyZXN1bHRbeV0gKyAwLjUpIC0gMC41LCBjZWxsSGVpZ2h0LCAwKTtcbiAgICB9XG4gICAgLy8gQXBwbHkgdGhlIGNlbGwncyBvZmZzZXQgKGllLiB4KmNlbGxIZWlnaHQpXG4gICAgcmVzdWx0W3ldICs9IHlPZmZzZXQ7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5leHBvcnQgY2xhc3MgR3JpZENhY2hlPFQ+IHtcbiAgcHVibGljIGNhY2hlOiAoVCB8IHVuZGVmaW5lZClbXVtdO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNhY2hlID0gW107XG4gIH1cblxuICBwdWJsaWMgcmVzaXplKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogdm9pZCB7XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICBpZiAodGhpcy5jYWNoZS5sZW5ndGggPD0geCkge1xuICAgICAgICB0aGlzLmNhY2hlLnB1c2goW10pO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgeSA9IHRoaXMuY2FjaGVbeF0ubGVuZ3RoOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICAgICAgdGhpcy5jYWNoZVt4XS5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICB9XG4gICAgICB0aGlzLmNhY2hlW3hdLmxlbmd0aCA9IGhlaWdodDtcbiAgICB9XG4gICAgdGhpcy5jYWNoZS5sZW5ndGggPSB3aWR0aDtcbiAgfVxuXG4gIHB1YmxpYyBjbGVhcigpOiB2b2lkIHtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMuY2FjaGUubGVuZ3RoOyB4KyspIHtcbiAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5jYWNoZVt4XS5sZW5ndGg7IHkrKykge1xuICAgICAgICB0aGlzLmNhY2hlW3hdW3ldID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJUmVuZGVyRGltZW5zaW9ucyB9IGZyb20gJ2Jyb3dzZXIvcmVuZGVyZXIvVHlwZXMnO1xuaW1wb3J0IHsgQmFzZVJlbmRlckxheWVyIH0gZnJvbSAnLi9CYXNlUmVuZGVyTGF5ZXInO1xuaW1wb3J0IHsgSU5WRVJURURfREVGQVVMVF9DT0xPUiB9IGZyb20gJ2Jyb3dzZXIvcmVuZGVyZXIvYXRsYXMvQ29uc3RhbnRzJztcbmltcG9ydCB7IGlzMjU2Q29sb3IgfSBmcm9tICdicm93c2VyL3JlbmRlcmVyL2F0bGFzL0NoYXJBdGxhc1V0aWxzJztcbmltcG9ydCB7IElDb2xvclNldCwgSUxpbmtpZmllckV2ZW50LCBJTGlua2lmaWVyLCBJTGlua2lmaWVyMiB9IGZyb20gJ2Jyb3dzZXIvVHlwZXMnO1xuaW1wb3J0IHsgSUJ1ZmZlclNlcnZpY2UsIElPcHRpb25zU2VydmljZSB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5cbmV4cG9ydCBjbGFzcyBMaW5rUmVuZGVyTGF5ZXIgZXh0ZW5kcyBCYXNlUmVuZGVyTGF5ZXIge1xuICBwcml2YXRlIF9zdGF0ZTogSUxpbmtpZmllckV2ZW50IHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsXG4gICAgekluZGV4OiBudW1iZXIsXG4gICAgY29sb3JzOiBJQ29sb3JTZXQsXG4gICAgcmVuZGVyZXJJZDogbnVtYmVyLFxuICAgIGxpbmtpZmllcjogSUxpbmtpZmllcixcbiAgICBsaW5raWZpZXIyOiBJTGlua2lmaWVyMixcbiAgICBASUJ1ZmZlclNlcnZpY2UgYnVmZmVyU2VydmljZTogSUJ1ZmZlclNlcnZpY2UsXG4gICAgQElPcHRpb25zU2VydmljZSBvcHRpb25zU2VydmljZTogSU9wdGlvbnNTZXJ2aWNlXG4gICkge1xuICAgIHN1cGVyKGNvbnRhaW5lciwgJ2xpbmsnLCB6SW5kZXgsIHRydWUsIGNvbG9ycywgcmVuZGVyZXJJZCwgYnVmZmVyU2VydmljZSwgb3B0aW9uc1NlcnZpY2UpO1xuICAgIGxpbmtpZmllci5vblNob3dMaW5rVW5kZXJsaW5lKGUgPT4gdGhpcy5fb25TaG93TGlua1VuZGVybGluZShlKSk7XG4gICAgbGlua2lmaWVyLm9uSGlkZUxpbmtVbmRlcmxpbmUoZSA9PiB0aGlzLl9vbkhpZGVMaW5rVW5kZXJsaW5lKGUpKTtcblxuICAgIGxpbmtpZmllcjIub25TaG93TGlua1VuZGVybGluZShlID0+IHRoaXMuX29uU2hvd0xpbmtVbmRlcmxpbmUoZSkpO1xuICAgIGxpbmtpZmllcjIub25IaWRlTGlua1VuZGVybGluZShlID0+IHRoaXMuX29uSGlkZUxpbmtVbmRlcmxpbmUoZSkpO1xuICB9XG5cbiAgcHVibGljIHJlc2l6ZShkaW06IElSZW5kZXJEaW1lbnNpb25zKTogdm9pZCB7XG4gICAgc3VwZXIucmVzaXplKGRpbSk7XG4gICAgLy8gUmVzaXppbmcgdGhlIGNhbnZhcyBkaXNjYXJkcyB0aGUgY29udGVudHMgb2YgdGhlIGNhbnZhcyBzbyBjbGVhciBzdGF0ZVxuICAgIHRoaXMuX3N0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xuICAgIHRoaXMuX2NsZWFyQ3VycmVudExpbmsoKTtcbiAgfVxuXG4gIHByaXZhdGUgX2NsZWFyQ3VycmVudExpbmsoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX3N0YXRlKSB7XG4gICAgICB0aGlzLl9jbGVhckNlbGxzKHRoaXMuX3N0YXRlLngxLCB0aGlzLl9zdGF0ZS55MSwgdGhpcy5fc3RhdGUuY29scyAtIHRoaXMuX3N0YXRlLngxLCAxKTtcbiAgICAgIGNvbnN0IG1pZGRsZVJvd0NvdW50ID0gdGhpcy5fc3RhdGUueTIgLSB0aGlzLl9zdGF0ZS55MSAtIDE7XG4gICAgICBpZiAobWlkZGxlUm93Q291bnQgPiAwKSB7XG4gICAgICAgIHRoaXMuX2NsZWFyQ2VsbHMoMCwgdGhpcy5fc3RhdGUueTEgKyAxLCB0aGlzLl9zdGF0ZS5jb2xzLCBtaWRkbGVSb3dDb3VudCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9jbGVhckNlbGxzKDAsIHRoaXMuX3N0YXRlLnkyLCB0aGlzLl9zdGF0ZS54MiwgMSk7XG4gICAgICB0aGlzLl9zdGF0ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9vblNob3dMaW5rVW5kZXJsaW5lKGU6IElMaW5raWZpZXJFdmVudCk6IHZvaWQge1xuICAgIGlmIChlLmZnID09PSBJTlZFUlRFRF9ERUZBVUxUX0NPTE9SKSB7XG4gICAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gdGhpcy5fY29sb3JzLmJhY2tncm91bmQuY3NzO1xuICAgIH0gZWxzZSBpZiAoZS5mZyAmJiBpczI1NkNvbG9yKGUuZmcpKSB7XG4gICAgICAvLyAyNTYgY29sb3Igc3VwcG9ydFxuICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IHRoaXMuX2NvbG9ycy5hbnNpW2UuZmddLmNzcztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IHRoaXMuX2NvbG9ycy5mb3JlZ3JvdW5kLmNzcztcbiAgICB9XG5cbiAgICBpZiAoZS55MSA9PT0gZS55Mikge1xuICAgICAgLy8gU2luZ2xlIGxpbmUgbGlua1xuICAgICAgdGhpcy5fZmlsbEJvdHRvbUxpbmVBdENlbGxzKGUueDEsIGUueTEsIGUueDIgLSBlLngxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTXVsdGktbGluZSBsaW5rXG4gICAgICB0aGlzLl9maWxsQm90dG9tTGluZUF0Q2VsbHMoZS54MSwgZS55MSwgZS5jb2xzIC0gZS54MSk7XG4gICAgICBmb3IgKGxldCB5ID0gZS55MSArIDE7IHkgPCBlLnkyOyB5KyspIHtcbiAgICAgICAgdGhpcy5fZmlsbEJvdHRvbUxpbmVBdENlbGxzKDAsIHksIGUuY29scyk7XG4gICAgICB9XG4gICAgICB0aGlzLl9maWxsQm90dG9tTGluZUF0Q2VsbHMoMCwgZS55MiwgZS54Mik7XG4gICAgfVxuICAgIHRoaXMuX3N0YXRlID0gZTtcbiAgfVxuXG4gIHByaXZhdGUgX29uSGlkZUxpbmtVbmRlcmxpbmUoZTogSUxpbmtpZmllckV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5fY2xlYXJDdXJyZW50TGluaygpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IFRleHRSZW5kZXJMYXllciB9IGZyb20gJ2Jyb3dzZXIvcmVuZGVyZXIvVGV4dFJlbmRlckxheWVyJztcbmltcG9ydCB7IFNlbGVjdGlvblJlbmRlckxheWVyIH0gZnJvbSAnYnJvd3Nlci9yZW5kZXJlci9TZWxlY3Rpb25SZW5kZXJMYXllcic7XG5pbXBvcnQgeyBDdXJzb3JSZW5kZXJMYXllciB9IGZyb20gJ2Jyb3dzZXIvcmVuZGVyZXIvQ3Vyc29yUmVuZGVyTGF5ZXInO1xuaW1wb3J0IHsgSVJlbmRlckxheWVyLCBJUmVuZGVyZXIsIElSZW5kZXJEaW1lbnNpb25zLCBJUmVxdWVzdFJlZHJhd0V2ZW50IH0gZnJvbSAnYnJvd3Nlci9yZW5kZXJlci9UeXBlcyc7XG5pbXBvcnQgeyBMaW5rUmVuZGVyTGF5ZXIgfSBmcm9tICdicm93c2VyL3JlbmRlcmVyL0xpbmtSZW5kZXJMYXllcic7XG5pbXBvcnQgeyBEaXNwb3NhYmxlIH0gZnJvbSAnY29tbW9uL0xpZmVjeWNsZSc7XG5pbXBvcnQgeyBJQ29sb3JTZXQsIElMaW5raWZpZXIsIElMaW5raWZpZXIyIH0gZnJvbSAnYnJvd3Nlci9UeXBlcyc7XG5pbXBvcnQgeyBJQ2hhclNpemVTZXJ2aWNlIH0gZnJvbSAnYnJvd3Nlci9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5pbXBvcnQgeyBJQnVmZmVyU2VydmljZSwgSU9wdGlvbnNTZXJ2aWNlLCBJSW5zdGFudGlhdGlvblNlcnZpY2UgfSBmcm9tICdjb21tb24vc2VydmljZXMvU2VydmljZXMnO1xuaW1wb3J0IHsgcmVtb3ZlVGVybWluYWxGcm9tQ2FjaGUgfSBmcm9tICdicm93c2VyL3JlbmRlcmVyL2F0bGFzL0NoYXJBdGxhc0NhY2hlJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgSUV2ZW50IH0gZnJvbSAnY29tbW9uL0V2ZW50RW1pdHRlcic7XG5pbXBvcnQgeyBJRGVjb3JhdGlvbk9wdGlvbnMsIElEZWNvcmF0aW9uIH0gZnJvbSAneHRlcm0nO1xuXG5sZXQgbmV4dFJlbmRlcmVySWQgPSAxO1xuXG5leHBvcnQgY2xhc3MgUmVuZGVyZXIgZXh0ZW5kcyBEaXNwb3NhYmxlIGltcGxlbWVudHMgSVJlbmRlcmVyIHtcbiAgcHJpdmF0ZSBfaWQgPSBuZXh0UmVuZGVyZXJJZCsrO1xuXG4gIHByaXZhdGUgX3JlbmRlckxheWVyczogSVJlbmRlckxheWVyW107XG4gIHByaXZhdGUgX2RldmljZVBpeGVsUmF0aW86IG51bWJlcjtcblxuICBwdWJsaWMgZGltZW5zaW9uczogSVJlbmRlckRpbWVuc2lvbnM7XG5cbiAgcHJpdmF0ZSBfb25SZXF1ZXN0UmVkcmF3ID0gbmV3IEV2ZW50RW1pdHRlcjxJUmVxdWVzdFJlZHJhd0V2ZW50PigpO1xuICBwdWJsaWMgZ2V0IG9uUmVxdWVzdFJlZHJhdygpOiBJRXZlbnQ8SVJlcXVlc3RSZWRyYXdFdmVudD4geyByZXR1cm4gdGhpcy5fb25SZXF1ZXN0UmVkcmF3LmV2ZW50OyB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfY29sb3JzOiBJQ29sb3JTZXQsXG4gICAgcHJpdmF0ZSByZWFkb25seSBfc2NyZWVuRWxlbWVudDogSFRNTEVsZW1lbnQsXG4gICAgbGlua2lmaWVyOiBJTGlua2lmaWVyLFxuICAgIGxpbmtpZmllcjI6IElMaW5raWZpZXIyLFxuICAgIEBJSW5zdGFudGlhdGlvblNlcnZpY2UgaW5zdGFudGlhdGlvblNlcnZpY2U6IElJbnN0YW50aWF0aW9uU2VydmljZSxcbiAgICBASUJ1ZmZlclNlcnZpY2UgcHJpdmF0ZSByZWFkb25seSBfYnVmZmVyU2VydmljZTogSUJ1ZmZlclNlcnZpY2UsXG4gICAgQElDaGFyU2l6ZVNlcnZpY2UgcHJpdmF0ZSByZWFkb25seSBfY2hhclNpemVTZXJ2aWNlOiBJQ2hhclNpemVTZXJ2aWNlLFxuICAgIEBJT3B0aW9uc1NlcnZpY2UgcHJpdmF0ZSByZWFkb25seSBfb3B0aW9uc1NlcnZpY2U6IElPcHRpb25zU2VydmljZVxuICApIHtcbiAgICBzdXBlcigpO1xuICAgIGNvbnN0IGFsbG93VHJhbnNwYXJlbmN5ID0gdGhpcy5fb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy5hbGxvd1RyYW5zcGFyZW5jeTtcbiAgICB0aGlzLl9yZW5kZXJMYXllcnMgPSBbXG4gICAgICBpbnN0YW50aWF0aW9uU2VydmljZS5jcmVhdGVJbnN0YW5jZShUZXh0UmVuZGVyTGF5ZXIsIHRoaXMuX3NjcmVlbkVsZW1lbnQsIDAsIHRoaXMuX2NvbG9ycywgYWxsb3dUcmFuc3BhcmVuY3ksIHRoaXMuX2lkKSxcbiAgICAgIGluc3RhbnRpYXRpb25TZXJ2aWNlLmNyZWF0ZUluc3RhbmNlKFNlbGVjdGlvblJlbmRlckxheWVyLCB0aGlzLl9zY3JlZW5FbGVtZW50LCAxLCB0aGlzLl9jb2xvcnMsIHRoaXMuX2lkKSxcbiAgICAgIGluc3RhbnRpYXRpb25TZXJ2aWNlLmNyZWF0ZUluc3RhbmNlKExpbmtSZW5kZXJMYXllciwgdGhpcy5fc2NyZWVuRWxlbWVudCwgMiwgdGhpcy5fY29sb3JzLCB0aGlzLl9pZCwgbGlua2lmaWVyLCBsaW5raWZpZXIyKSxcbiAgICAgIGluc3RhbnRpYXRpb25TZXJ2aWNlLmNyZWF0ZUluc3RhbmNlKEN1cnNvclJlbmRlckxheWVyLCB0aGlzLl9zY3JlZW5FbGVtZW50LCAzLCB0aGlzLl9jb2xvcnMsIHRoaXMuX2lkLCB0aGlzLl9vblJlcXVlc3RSZWRyYXcpXG4gICAgXTtcbiAgICB0aGlzLmRpbWVuc2lvbnMgPSB7XG4gICAgICBzY2FsZWRDaGFyV2lkdGg6IDAsXG4gICAgICBzY2FsZWRDaGFySGVpZ2h0OiAwLFxuICAgICAgc2NhbGVkQ2VsbFdpZHRoOiAwLFxuICAgICAgc2NhbGVkQ2VsbEhlaWdodDogMCxcbiAgICAgIHNjYWxlZENoYXJMZWZ0OiAwLFxuICAgICAgc2NhbGVkQ2hhclRvcDogMCxcbiAgICAgIHNjYWxlZENhbnZhc1dpZHRoOiAwLFxuICAgICAgc2NhbGVkQ2FudmFzSGVpZ2h0OiAwLFxuICAgICAgY2FudmFzV2lkdGg6IDAsXG4gICAgICBjYW52YXNIZWlnaHQ6IDAsXG4gICAgICBhY3R1YWxDZWxsV2lkdGg6IDAsXG4gICAgICBhY3R1YWxDZWxsSGVpZ2h0OiAwXG4gICAgfTtcbiAgICB0aGlzLl9kZXZpY2VQaXhlbFJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gICAgdGhpcy5fdXBkYXRlRGltZW5zaW9ucygpO1xuICAgIHRoaXMub25PcHRpb25zQ2hhbmdlZCgpO1xuICB9XG5cbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgZm9yIChjb25zdCBsIG9mIHRoaXMuX3JlbmRlckxheWVycykge1xuICAgICAgbC5kaXNwb3NlKCk7XG4gICAgfVxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICByZW1vdmVUZXJtaW5hbEZyb21DYWNoZSh0aGlzLl9pZCk7XG4gIH1cblxuICBwdWJsaWMgb25EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlKCk6IHZvaWQge1xuICAgIC8vIElmIHRoZSBkZXZpY2UgcGl4ZWwgcmF0aW8gY2hhbmdlZCwgdGhlIGNoYXIgYXRsYXMgbmVlZHMgdG8gYmUgcmVnZW5lcmF0ZWRcbiAgICAvLyBhbmQgdGhlIHRlcm1pbmFsIG5lZWRzIHRvIHJlZnJlc2hlZFxuICAgIGlmICh0aGlzLl9kZXZpY2VQaXhlbFJhdGlvICE9PSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbykge1xuICAgICAgdGhpcy5fZGV2aWNlUGl4ZWxSYXRpbyA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgdGhpcy5vblJlc2l6ZSh0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHMsIHRoaXMuX2J1ZmZlclNlcnZpY2Uucm93cyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHNldENvbG9ycyhjb2xvcnM6IElDb2xvclNldCk6IHZvaWQge1xuICAgIHRoaXMuX2NvbG9ycyA9IGNvbG9ycztcbiAgICAvLyBDbGVhciBsYXllcnMgYW5kIGZvcmNlIGEgZnVsbCByZW5kZXJcbiAgICBmb3IgKGNvbnN0IGwgb2YgdGhpcy5fcmVuZGVyTGF5ZXJzKSB7XG4gICAgICBsLnNldENvbG9ycyh0aGlzLl9jb2xvcnMpO1xuICAgICAgbC5yZXNldCgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBvblJlc2l6ZShjb2xzOiBudW1iZXIsIHJvd3M6IG51bWJlcik6IHZvaWQge1xuICAgIC8vIFVwZGF0ZSBjaGFyYWN0ZXIgYW5kIGNhbnZhcyBkaW1lbnNpb25zXG4gICAgdGhpcy5fdXBkYXRlRGltZW5zaW9ucygpO1xuXG4gICAgLy8gUmVzaXplIGFsbCByZW5kZXIgbGF5ZXJzXG4gICAgZm9yIChjb25zdCBsIG9mIHRoaXMuX3JlbmRlckxheWVycykge1xuICAgICAgbC5yZXNpemUodGhpcy5kaW1lbnNpb25zKTtcbiAgICB9XG5cbiAgICAvLyBSZXNpemUgdGhlIHNjcmVlblxuICAgIHRoaXMuX3NjcmVlbkVsZW1lbnQuc3R5bGUud2lkdGggPSBgJHt0aGlzLmRpbWVuc2lvbnMuY2FudmFzV2lkdGh9cHhgO1xuICAgIHRoaXMuX3NjcmVlbkVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gYCR7dGhpcy5kaW1lbnNpb25zLmNhbnZhc0hlaWdodH1weGA7XG4gIH1cblxuICBwdWJsaWMgb25DaGFyU2l6ZUNoYW5nZWQoKTogdm9pZCB7XG4gICAgdGhpcy5vblJlc2l6ZSh0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHMsIHRoaXMuX2J1ZmZlclNlcnZpY2Uucm93cyk7XG4gIH1cblxuICBwdWJsaWMgb25CbHVyKCk6IHZvaWQge1xuICAgIHRoaXMuX3J1bk9wZXJhdGlvbihsID0+IGwub25CbHVyKCkpO1xuICB9XG5cbiAgcHVibGljIG9uRm9jdXMoKTogdm9pZCB7XG4gICAgdGhpcy5fcnVuT3BlcmF0aW9uKGwgPT4gbC5vbkZvY3VzKCkpO1xuICB9XG5cbiAgcHVibGljIG9uU2VsZWN0aW9uQ2hhbmdlZChzdGFydDogW251bWJlciwgbnVtYmVyXSB8IHVuZGVmaW5lZCwgZW5kOiBbbnVtYmVyLCBudW1iZXJdIHwgdW5kZWZpbmVkLCBjb2x1bW5TZWxlY3RNb2RlOiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcbiAgICB0aGlzLl9ydW5PcGVyYXRpb24obCA9PiBsLm9uU2VsZWN0aW9uQ2hhbmdlZChzdGFydCwgZW5kLCBjb2x1bW5TZWxlY3RNb2RlKSk7XG4gIH1cblxuICBwdWJsaWMgb25DdXJzb3JNb3ZlKCk6IHZvaWQge1xuICAgIHRoaXMuX3J1bk9wZXJhdGlvbihsID0+IGwub25DdXJzb3JNb3ZlKCkpO1xuICB9XG5cbiAgcHVibGljIG9uT3B0aW9uc0NoYW5nZWQoKTogdm9pZCB7XG4gICAgdGhpcy5fcnVuT3BlcmF0aW9uKGwgPT4gbC5vbk9wdGlvbnNDaGFuZ2VkKCkpO1xuICB9XG5cbiAgcHVibGljIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuX3J1bk9wZXJhdGlvbihsID0+IGwucmVzZXQoKSk7XG4gIH1cblxuICBwcml2YXRlIF9ydW5PcGVyYXRpb24ob3BlcmF0aW9uOiAobGF5ZXI6IElSZW5kZXJMYXllcikgPT4gdm9pZCk6IHZvaWQge1xuICAgIGZvciAoY29uc3QgbCBvZiB0aGlzLl9yZW5kZXJMYXllcnMpIHtcbiAgICAgIG9wZXJhdGlvbihsKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgdGhlIHJlZnJlc2ggbG9vcCBjYWxsYmFjaywgY2FsbGluZyByZWZyZXNoIG9ubHkgaWYgYSByZWZyZXNoIGlzXG4gICAqIG5lY2Vzc2FyeSBiZWZvcmUgcXVldWVpbmcgdXAgdGhlIG5leHQgb25lLlxuICAgKi9cbiAgcHVibGljIHJlbmRlclJvd3Moc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiB2b2lkIHtcbiAgICBmb3IgKGNvbnN0IGwgb2YgdGhpcy5fcmVuZGVyTGF5ZXJzKSB7XG4gICAgICBsLm9uR3JpZENoYW5nZWQoc3RhcnQsIGVuZCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGNsZWFyVGV4dHVyZUF0bGFzKCk6IHZvaWQge1xuICAgIGZvciAoY29uc3QgbGF5ZXIgb2YgdGhpcy5fcmVuZGVyTGF5ZXJzKSB7XG4gICAgICBsYXllci5jbGVhclRleHR1cmVBdGxhcygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWNhbGN1bGF0ZXMgdGhlIGNoYXJhY3RlciBhbmQgY2FudmFzIGRpbWVuc2lvbnMuXG4gICAqL1xuICBwcml2YXRlIF91cGRhdGVEaW1lbnNpb25zKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5fY2hhclNpemVTZXJ2aWNlLmhhc1ZhbGlkU2l6ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgc2NhbGVkIGNoYXJhY3RlciB3aWR0aC4gV2lkdGggaXMgZmxvb3JlZCBhcyBpdCBtdXN0IGJlXG4gICAgLy8gZHJhd24gdG8gYW4gaW50ZWdlciBncmlkIGluIG9yZGVyIGZvciB0aGUgQ2hhckF0bGFzIFwic3RhbXBzXCIgdG8gbm90IGJlXG4gICAgLy8gYmx1cnJ5LiBXaGVuIHRleHQgaXMgZHJhd24gdG8gdGhlIGdyaWQgbm90IHVzaW5nIHRoZSBDaGFyQXRsYXMsIGl0IGlzXG4gICAgLy8gY2xpcHBlZCB0byBlbnN1cmUgdGhlcmUgaXMgbm8gb3ZlcmxhcCB3aXRoIHRoZSBuZXh0IGNlbGwuXG4gICAgdGhpcy5kaW1lbnNpb25zLnNjYWxlZENoYXJXaWR0aCA9IE1hdGguZmxvb3IodGhpcy5fY2hhclNpemVTZXJ2aWNlLndpZHRoICogd2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBzY2FsZWQgY2hhcmFjdGVyIGhlaWdodC4gSGVpZ2h0IGlzIGNlaWxlZCBpbiBjYXNlXG4gICAgLy8gZGV2aWNlUGl4ZWxSYXRpbyBpcyBhIGZsb2F0aW5nIHBvaW50IG51bWJlciBpbiBvcmRlciB0byBlbnN1cmUgdGhlcmUgaXNcbiAgICAvLyBlbm91Z2ggc3BhY2UgdG8gZHJhdyB0aGUgY2hhcmFjdGVyIHRvIHRoZSBjZWxsLlxuICAgIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDaGFySGVpZ2h0ID0gTWF0aC5jZWlsKHRoaXMuX2NoYXJTaXplU2VydmljZS5oZWlnaHQgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIHNjYWxlZCBjZWxsIGhlaWdodCwgaWYgbGluZUhlaWdodCBpcyBub3QgMSB0aGVuIHRoZSB2YWx1ZVxuICAgIC8vIHdpbGwgYmUgZmxvb3JlZCBiZWNhdXNlIHNpbmNlIGxpbmVIZWlnaHQgY2FuIG5ldmVyIGJlIGxvd2VyIHRoZW4gMSwgdGhlcmVcbiAgICAvLyBpcyBhIGd1YXJlbnRlZSB0aGF0IHRoZSBzY2FsZWQgbGluZSBoZWlnaHQgd2lsbCBhbHdheXMgYmUgbGFyZ2VyIHRoYW5cbiAgICAvLyBzY2FsZWQgY2hhciBoZWlnaHQuXG4gICAgdGhpcy5kaW1lbnNpb25zLnNjYWxlZENlbGxIZWlnaHQgPSBNYXRoLmZsb29yKHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDaGFySGVpZ2h0ICogdGhpcy5fb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy5saW5lSGVpZ2h0KTtcblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgeSBjb29yZGluYXRlIHdpdGhpbiBhIGNlbGwgdGhhdCB0ZXh0IHNob3VsZCBkcmF3IGZyb20gaW5cbiAgICAvLyBvcmRlciB0byBkcmF3IGluIHRoZSBjZW50ZXIgb2YgYSBjZWxsLlxuICAgIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDaGFyVG9wID0gdGhpcy5fb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy5saW5lSGVpZ2h0ID09PSAxID8gMCA6IE1hdGgucm91bmQoKHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDZWxsSGVpZ2h0IC0gdGhpcy5kaW1lbnNpb25zLnNjYWxlZENoYXJIZWlnaHQpIC8gMik7XG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIHNjYWxlZCBjZWxsIHdpZHRoLCB0YWtpbmcgdGhlIGxldHRlclNwYWNpbmcgaW50byBhY2NvdW50LlxuICAgIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDZWxsV2lkdGggPSB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2hhcldpZHRoICsgTWF0aC5yb3VuZCh0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLmxldHRlclNwYWNpbmcpO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSB4IGNvb3JkaW5hdGUgd2l0aCBhIGNlbGwgdGhhdCB0ZXh0IHNob3VsZCBkcmF3IGZyb20gaW5cbiAgICAvLyBvcmRlciB0byBkcmF3IGluIHRoZSBjZW50ZXIgb2YgYSBjZWxsLlxuICAgIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDaGFyTGVmdCA9IE1hdGguZmxvb3IodGhpcy5fb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy5sZXR0ZXJTcGFjaW5nIC8gMik7XG5cbiAgICAvLyBSZWNhbGN1bGF0ZSB0aGUgY2FudmFzIGRpbWVuc2lvbnM7IHNjYWxlZCogZGVmaW5lIHRoZSBhY3R1YWwgbnVtYmVyIG9mXG4gICAgLy8gcGl4ZWwgaW4gdGhlIGNhbnZhc1xuICAgIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDYW52YXNIZWlnaHQgPSB0aGlzLl9idWZmZXJTZXJ2aWNlLnJvd3MgKiB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2VsbEhlaWdodDtcbiAgICB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2FudmFzV2lkdGggPSB0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHMgKiB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2VsbFdpZHRoO1xuXG4gICAgLy8gVGhlIHRoZSBzaXplIG9mIHRoZSBjYW52YXMgb24gdGhlIHBhZ2UuIEl0J3MgdmVyeSBpbXBvcnRhbnQgdGhhdCB0aGlzXG4gICAgLy8gcm91bmRzIHRvIG5lYXJlc3QgaW50ZWdlciBhbmQgbm90IGNlaWxzIGFzIGJyb3dzZXJzIG9mdGVuIHNldFxuICAgIC8vIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIGFzIHNvbWV0aGluZyBsaWtlIDEuMTAwMDAwMDIzODQxODU4LCB3aGVuIGl0J3NcbiAgICAvLyBhY3R1YWxseSAxLjEuIENlaWxpbmcgY2F1c2VzIGJsdXJyaW5lc3MgYXMgdGhlIGJhY2tpbmcgY2FudmFzIGltYWdlIGlzIDFcbiAgICAvLyBwaXhlbCB0b28gbGFyZ2UgZm9yIHRoZSBjYW52YXMgZWxlbWVudCBzaXplLlxuICAgIHRoaXMuZGltZW5zaW9ucy5jYW52YXNIZWlnaHQgPSBNYXRoLnJvdW5kKHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDYW52YXNIZWlnaHQgLyB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgdGhpcy5kaW1lbnNpb25zLmNhbnZhc1dpZHRoID0gTWF0aC5yb3VuZCh0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2FudmFzV2lkdGggLyB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG5cbiAgICAvLyBHZXQgdGhlIF9hY3R1YWxfIGRpbWVuc2lvbnMgb2YgYW4gaW5kaXZpZHVhbCBjZWxsLiBUaGlzIG5lZWRzIHRvIGJlXG4gICAgLy8gZGVyaXZlZCBmcm9tIHRoZSBjYW52YXNXaWR0aC9IZWlnaHQgY2FsY3VsYXRlZCBhYm92ZSB3aGljaCB0YWtlcyBpbnRvXG4gICAgLy8gYWNjb3VudCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpby4gSUNoYXJTaXplU2VydmljZS53aWR0aC9oZWlnaHQgYnkgaXRzZWxmXG4gICAgLy8gaXMgaW5zdWZmaWNpZW50IHdoZW4gdGhlIHBhZ2UgaXMgbm90IGF0IDEwMCUgem9vbSBsZXZlbCBhcyBpdCdzIG1lYXN1cmVkXG4gICAgLy8gaW4gQ1NTIHBpeGVscywgYnV0IHRoZSBhY3R1YWwgY2hhciBzaXplIG9uIHRoZSBjYW52YXMgY2FuIGRpZmZlci5cbiAgICB0aGlzLmRpbWVuc2lvbnMuYWN0dWFsQ2VsbEhlaWdodCA9IHRoaXMuZGltZW5zaW9ucy5jYW52YXNIZWlnaHQgLyB0aGlzLl9idWZmZXJTZXJ2aWNlLnJvd3M7XG4gICAgdGhpcy5kaW1lbnNpb25zLmFjdHVhbENlbGxXaWR0aCA9IHRoaXMuZGltZW5zaW9ucy5jYW52YXNXaWR0aCAvIHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scztcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdGhyb3dJZkZhbHN5PFQ+KHZhbHVlOiBUIHwgdW5kZWZpbmVkIHwgbnVsbCk6IFQge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd2YWx1ZSBtdXN0IG5vdCBiZSBmYWxzeScpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSVJlbmRlckRpbWVuc2lvbnMgfSBmcm9tICdicm93c2VyL3JlbmRlcmVyL1R5cGVzJztcbmltcG9ydCB7IEJhc2VSZW5kZXJMYXllciB9IGZyb20gJ2Jyb3dzZXIvcmVuZGVyZXIvQmFzZVJlbmRlckxheWVyJztcbmltcG9ydCB7IElDb2xvclNldCB9IGZyb20gJ2Jyb3dzZXIvVHlwZXMnO1xuaW1wb3J0IHsgSUJ1ZmZlclNlcnZpY2UsIElPcHRpb25zU2VydmljZSB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5cbmludGVyZmFjZSBJU2VsZWN0aW9uU3RhdGUge1xuICBzdGFydD86IFtudW1iZXIsIG51bWJlcl07XG4gIGVuZD86IFtudW1iZXIsIG51bWJlcl07XG4gIGNvbHVtblNlbGVjdE1vZGU/OiBib29sZWFuO1xuICB5ZGlzcD86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIFNlbGVjdGlvblJlbmRlckxheWVyIGV4dGVuZHMgQmFzZVJlbmRlckxheWVyIHtcbiAgcHJpdmF0ZSBfc3RhdGUhOiBJU2VsZWN0aW9uU3RhdGU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgY29udGFpbmVyOiBIVE1MRWxlbWVudCxcbiAgICB6SW5kZXg6IG51bWJlcixcbiAgICBjb2xvcnM6IElDb2xvclNldCxcbiAgICByZW5kZXJlcklkOiBudW1iZXIsXG4gICAgQElCdWZmZXJTZXJ2aWNlIGJ1ZmZlclNlcnZpY2U6IElCdWZmZXJTZXJ2aWNlLFxuICAgIEBJT3B0aW9uc1NlcnZpY2Ugb3B0aW9uc1NlcnZpY2U6IElPcHRpb25zU2VydmljZVxuICApIHtcbiAgICBzdXBlcihjb250YWluZXIsICdzZWxlY3Rpb24nLCB6SW5kZXgsIHRydWUsIGNvbG9ycywgcmVuZGVyZXJJZCwgYnVmZmVyU2VydmljZSwgb3B0aW9uc1NlcnZpY2UpO1xuICAgIHRoaXMuX2NsZWFyU3RhdGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgX2NsZWFyU3RhdGUoKTogdm9pZCB7XG4gICAgdGhpcy5fc3RhdGUgPSB7XG4gICAgICBzdGFydDogdW5kZWZpbmVkLFxuICAgICAgZW5kOiB1bmRlZmluZWQsXG4gICAgICBjb2x1bW5TZWxlY3RNb2RlOiB1bmRlZmluZWQsXG4gICAgICB5ZGlzcDogdW5kZWZpbmVkXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyByZXNpemUoZGltOiBJUmVuZGVyRGltZW5zaW9ucyk6IHZvaWQge1xuICAgIHN1cGVyLnJlc2l6ZShkaW0pO1xuICAgIC8vIFJlc2l6aW5nIHRoZSBjYW52YXMgZGlzY2FyZHMgdGhlIGNvbnRlbnRzIG9mIHRoZSBjYW52YXMgc28gY2xlYXIgc3RhdGVcbiAgICB0aGlzLl9jbGVhclN0YXRlKCk7XG4gIH1cblxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX3N0YXRlLnN0YXJ0ICYmIHRoaXMuX3N0YXRlLmVuZCkge1xuICAgICAgdGhpcy5fY2xlYXJTdGF0ZSgpO1xuICAgICAgdGhpcy5fY2xlYXJBbGwoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgb25TZWxlY3Rpb25DaGFuZ2VkKHN0YXJ0OiBbbnVtYmVyLCBudW1iZXJdIHwgdW5kZWZpbmVkLCBlbmQ6IFtudW1iZXIsIG51bWJlcl0gfCB1bmRlZmluZWQsIGNvbHVtblNlbGVjdE1vZGU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAvLyBTZWxlY3Rpb24gaGFzIG5vdCBjaGFuZ2VkXG4gICAgaWYgKCF0aGlzLl9kaWRTdGF0ZUNoYW5nZShzdGFydCwgZW5kLCBjb2x1bW5TZWxlY3RNb2RlLCB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlci55ZGlzcCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgYWxsIHNlbGVjdGlvbnNcbiAgICB0aGlzLl9jbGVhckFsbCgpO1xuXG4gICAgLy8gU2VsZWN0aW9uIGRvZXMgbm90IGV4aXN0XG4gICAgaWYgKCFzdGFydCB8fCAhZW5kKSB7XG4gICAgICB0aGlzLl9jbGVhclN0YXRlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVHJhbnNsYXRlIGZyb20gYnVmZmVyIHBvc2l0aW9uIHRvIHZpZXdwb3J0IHBvc2l0aW9uXG4gICAgY29uc3Qgdmlld3BvcnRTdGFydFJvdyA9IHN0YXJ0WzFdIC0gdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXIueWRpc3A7XG4gICAgY29uc3Qgdmlld3BvcnRFbmRSb3cgPSBlbmRbMV0gLSB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlci55ZGlzcDtcbiAgICBjb25zdCB2aWV3cG9ydENhcHBlZFN0YXJ0Um93ID0gTWF0aC5tYXgodmlld3BvcnRTdGFydFJvdywgMCk7XG4gICAgY29uc3Qgdmlld3BvcnRDYXBwZWRFbmRSb3cgPSBNYXRoLm1pbih2aWV3cG9ydEVuZFJvdywgdGhpcy5fYnVmZmVyU2VydmljZS5yb3dzIC0gMSk7XG5cbiAgICAvLyBObyBuZWVkIHRvIGRyYXcgdGhlIHNlbGVjdGlvblxuICAgIGlmICh2aWV3cG9ydENhcHBlZFN0YXJ0Um93ID49IHRoaXMuX2J1ZmZlclNlcnZpY2Uucm93cyB8fCB2aWV3cG9ydENhcHBlZEVuZFJvdyA8IDApIHtcbiAgICAgIHRoaXMuX3N0YXRlLnlkaXNwID0gdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXIueWRpc3A7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IHRoaXMuX2NvbG9ycy5zZWxlY3Rpb25UcmFuc3BhcmVudC5jc3M7XG5cbiAgICBpZiAoY29sdW1uU2VsZWN0TW9kZSkge1xuICAgICAgY29uc3Qgc3RhcnRDb2wgPSBzdGFydFswXTtcbiAgICAgIGNvbnN0IHdpZHRoID0gZW5kWzBdIC0gc3RhcnRDb2w7XG4gICAgICBjb25zdCBoZWlnaHQgPSB2aWV3cG9ydENhcHBlZEVuZFJvdyAtIHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3cgKyAxO1xuICAgICAgdGhpcy5fZmlsbENlbGxzKHN0YXJ0Q29sLCB2aWV3cG9ydENhcHBlZFN0YXJ0Um93LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRHJhdyBmaXJzdCByb3dcbiAgICAgIGNvbnN0IHN0YXJ0Q29sID0gdmlld3BvcnRTdGFydFJvdyA9PT0gdmlld3BvcnRDYXBwZWRTdGFydFJvdyA/IHN0YXJ0WzBdIDogMDtcbiAgICAgIGNvbnN0IHN0YXJ0Um93RW5kQ29sID0gdmlld3BvcnRDYXBwZWRTdGFydFJvdyA9PT0gdmlld3BvcnRFbmRSb3cgPyBlbmRbMF0gOiB0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHM7XG4gICAgICB0aGlzLl9maWxsQ2VsbHMoc3RhcnRDb2wsIHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3csIHN0YXJ0Um93RW5kQ29sIC0gc3RhcnRDb2wsIDEpO1xuXG4gICAgICAvLyBEcmF3IG1pZGRsZSByb3dzXG4gICAgICBjb25zdCBtaWRkbGVSb3dzQ291bnQgPSBNYXRoLm1heCh2aWV3cG9ydENhcHBlZEVuZFJvdyAtIHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3cgLSAxLCAwKTtcbiAgICAgIHRoaXMuX2ZpbGxDZWxscygwLCB2aWV3cG9ydENhcHBlZFN0YXJ0Um93ICsgMSwgdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzLCBtaWRkbGVSb3dzQ291bnQpO1xuXG4gICAgICAvLyBEcmF3IGZpbmFsIHJvd1xuICAgICAgaWYgKHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3cgIT09IHZpZXdwb3J0Q2FwcGVkRW5kUm93KSB7XG4gICAgICAgIC8vIE9ubHkgZHJhdyB2aWV3cG9ydEVuZFJvdyBpZiBpdCdzIG5vdCB0aGUgc2FtZSBhcyB2aWV3cG9ydFN0YXJ0Um93XG4gICAgICAgIGNvbnN0IGVuZENvbCA9IHZpZXdwb3J0RW5kUm93ID09PSB2aWV3cG9ydENhcHBlZEVuZFJvdyA/IGVuZFswXSA6IHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scztcbiAgICAgICAgdGhpcy5fZmlsbENlbGxzKDAsIHZpZXdwb3J0Q2FwcGVkRW5kUm93LCBlbmRDb2wsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNhdmUgc3RhdGUgZm9yIG5leHQgcmVuZGVyXG4gICAgdGhpcy5fc3RhdGUuc3RhcnQgPSBbc3RhcnRbMF0sIHN0YXJ0WzFdXTtcbiAgICB0aGlzLl9zdGF0ZS5lbmQgPSBbZW5kWzBdLCBlbmRbMV1dO1xuICAgIHRoaXMuX3N0YXRlLmNvbHVtblNlbGVjdE1vZGUgPSBjb2x1bW5TZWxlY3RNb2RlO1xuICAgIHRoaXMuX3N0YXRlLnlkaXNwID0gdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXIueWRpc3A7XG4gIH1cblxuICBwcml2YXRlIF9kaWRTdGF0ZUNoYW5nZShzdGFydDogW251bWJlciwgbnVtYmVyXSB8IHVuZGVmaW5lZCwgZW5kOiBbbnVtYmVyLCBudW1iZXJdIHwgdW5kZWZpbmVkLCBjb2x1bW5TZWxlY3RNb2RlOiBib29sZWFuLCB5ZGlzcDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLl9hcmVDb29yZGluYXRlc0VxdWFsKHN0YXJ0LCB0aGlzLl9zdGF0ZS5zdGFydCkgfHxcbiAgICAgICF0aGlzLl9hcmVDb29yZGluYXRlc0VxdWFsKGVuZCwgdGhpcy5fc3RhdGUuZW5kKSB8fFxuICAgICAgY29sdW1uU2VsZWN0TW9kZSAhPT0gdGhpcy5fc3RhdGUuY29sdW1uU2VsZWN0TW9kZSB8fFxuICAgICAgeWRpc3AgIT09IHRoaXMuX3N0YXRlLnlkaXNwO1xuICB9XG5cbiAgcHJpdmF0ZSBfYXJlQ29vcmRpbmF0ZXNFcXVhbChjb29yZDE6IFtudW1iZXIsIG51bWJlcl0gfCB1bmRlZmluZWQsIGNvb3JkMjogW251bWJlciwgbnVtYmVyXSB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIGlmICghY29vcmQxIHx8ICFjb29yZDIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29vcmQxWzBdID09PSBjb29yZDJbMF0gJiYgY29vcmQxWzFdID09PSBjb29yZDJbMV07XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSVJlbmRlckRpbWVuc2lvbnMgfSBmcm9tICdicm93c2VyL3JlbmRlcmVyL1R5cGVzJztcbmltcG9ydCB7IENoYXJEYXRhLCBJQ2VsbERhdGEgfSBmcm9tICdjb21tb24vVHlwZXMnO1xuaW1wb3J0IHsgR3JpZENhY2hlIH0gZnJvbSAnYnJvd3Nlci9yZW5kZXJlci9HcmlkQ2FjaGUnO1xuaW1wb3J0IHsgQmFzZVJlbmRlckxheWVyIH0gZnJvbSAnYnJvd3Nlci9yZW5kZXJlci9CYXNlUmVuZGVyTGF5ZXInO1xuaW1wb3J0IHsgQXR0cmlidXRlRGF0YSB9IGZyb20gJ2NvbW1vbi9idWZmZXIvQXR0cmlidXRlRGF0YSc7XG5pbXBvcnQgeyBOVUxMX0NFTExfQ09ERSwgQ29udGVudCB9IGZyb20gJ2NvbW1vbi9idWZmZXIvQ29uc3RhbnRzJztcbmltcG9ydCB7IElDb2xvclNldCB9IGZyb20gJ2Jyb3dzZXIvVHlwZXMnO1xuaW1wb3J0IHsgQ2VsbERhdGEgfSBmcm9tICdjb21tb24vYnVmZmVyL0NlbGxEYXRhJztcbmltcG9ydCB7IElPcHRpb25zU2VydmljZSwgSUJ1ZmZlclNlcnZpY2UgfSBmcm9tICdjb21tb24vc2VydmljZXMvU2VydmljZXMnO1xuaW1wb3J0IHsgSUNoYXJhY3RlckpvaW5lclNlcnZpY2UgfSBmcm9tICdicm93c2VyL3NlcnZpY2VzL1NlcnZpY2VzJztcbmltcG9ydCB7IEpvaW5lZENlbGxEYXRhIH0gZnJvbSAnYnJvd3Nlci9zZXJ2aWNlcy9DaGFyYWN0ZXJKb2luZXJTZXJ2aWNlJztcblxuLyoqXG4gKiBUaGlzIENoYXJEYXRhIGxvb2tzIGxpa2UgYSBudWxsIGNoYXJhY3Rlciwgd2hpY2ggd2lsbCBmb3JjIGEgY2xlYXIgYW5kIHJlbmRlclxuICogd2hlbiB0aGUgY2hhcmFjdGVyIGNoYW5nZXMgKGEgcmVndWxhciBzcGFjZSAnICcgY2hhcmFjdGVyIG1heSBub3QgYXMgaXQnc1xuICogZHJhd24gc3RhdGUgaXMgYSBjbGVhcmVkIGNlbGwpLlxuICovXG4vLyBjb25zdCBPVkVSTEFQX09XTkVEX0NIQVJfREFUQTogQ2hhckRhdGEgPSBbbnVsbCwgJycsIDAsIC0xXTtcblxuZXhwb3J0IGNsYXNzIFRleHRSZW5kZXJMYXllciBleHRlbmRzIEJhc2VSZW5kZXJMYXllciB7XG4gIHByaXZhdGUgX3N0YXRlOiBHcmlkQ2FjaGU8Q2hhckRhdGE+O1xuICBwcml2YXRlIF9jaGFyYWN0ZXJXaWR0aDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfY2hhcmFjdGVyRm9udDogc3RyaW5nID0gJyc7XG4gIHByaXZhdGUgX2NoYXJhY3Rlck92ZXJsYXBDYWNoZTogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0gPSB7fTtcbiAgcHJpdmF0ZSBfd29ya0NlbGwgPSBuZXcgQ2VsbERhdGEoKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBjb250YWluZXI6IEhUTUxFbGVtZW50LFxuICAgIHpJbmRleDogbnVtYmVyLFxuICAgIGNvbG9yczogSUNvbG9yU2V0LFxuICAgIGFscGhhOiBib29sZWFuLFxuICAgIHJlbmRlcmVySWQ6IG51bWJlcixcbiAgICBASUJ1ZmZlclNlcnZpY2UgYnVmZmVyU2VydmljZTogSUJ1ZmZlclNlcnZpY2UsXG4gICAgQElPcHRpb25zU2VydmljZSBvcHRpb25zU2VydmljZTogSU9wdGlvbnNTZXJ2aWNlLFxuICAgIEBJQ2hhcmFjdGVySm9pbmVyU2VydmljZSBwcml2YXRlIHJlYWRvbmx5IF9jaGFyYWN0ZXJKb2luZXJTZXJ2aWNlOiBJQ2hhcmFjdGVySm9pbmVyU2VydmljZVxuICApIHtcbiAgICBzdXBlcihjb250YWluZXIsICd0ZXh0JywgekluZGV4LCBhbHBoYSwgY29sb3JzLCByZW5kZXJlcklkLCBidWZmZXJTZXJ2aWNlLCBvcHRpb25zU2VydmljZSk7XG4gICAgdGhpcy5fc3RhdGUgPSBuZXcgR3JpZENhY2hlPENoYXJEYXRhPigpO1xuICB9XG5cbiAgcHVibGljIHJlc2l6ZShkaW06IElSZW5kZXJEaW1lbnNpb25zKTogdm9pZCB7XG4gICAgc3VwZXIucmVzaXplKGRpbSk7XG5cbiAgICAvLyBDbGVhciB0aGUgY2hhcmFjdGVyIHdpZHRoIGNhY2hlIGlmIHRoZSBmb250IG9yIHdpZHRoIGhhcyBjaGFuZ2VkXG4gICAgY29uc3QgdGVybWluYWxGb250ID0gdGhpcy5fZ2V0Rm9udChmYWxzZSwgZmFsc2UpO1xuICAgIGlmICh0aGlzLl9jaGFyYWN0ZXJXaWR0aCAhPT0gZGltLnNjYWxlZENoYXJXaWR0aCB8fCB0aGlzLl9jaGFyYWN0ZXJGb250ICE9PSB0ZXJtaW5hbEZvbnQpIHtcbiAgICAgIHRoaXMuX2NoYXJhY3RlcldpZHRoID0gZGltLnNjYWxlZENoYXJXaWR0aDtcbiAgICAgIHRoaXMuX2NoYXJhY3RlckZvbnQgPSB0ZXJtaW5hbEZvbnQ7XG4gICAgICB0aGlzLl9jaGFyYWN0ZXJPdmVybGFwQ2FjaGUgPSB7fTtcbiAgICB9XG4gICAgLy8gUmVzaXppbmcgdGhlIGNhbnZhcyBkaXNjYXJkcyB0aGUgY29udGVudHMgb2YgdGhlIGNhbnZhcyBzbyBjbGVhciBzdGF0ZVxuICAgIHRoaXMuX3N0YXRlLmNsZWFyKCk7XG4gICAgdGhpcy5fc3RhdGUucmVzaXplKHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scywgdGhpcy5fYnVmZmVyU2VydmljZS5yb3dzKTtcbiAgfVxuXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcbiAgICB0aGlzLl9zdGF0ZS5jbGVhcigpO1xuICAgIHRoaXMuX2NsZWFyQWxsKCk7XG4gIH1cblxuICBwcml2YXRlIF9mb3JFYWNoQ2VsbChcbiAgICBmaXJzdFJvdzogbnVtYmVyLFxuICAgIGxhc3RSb3c6IG51bWJlcixcbiAgICBjYWxsYmFjazogKFxuICAgICAgY2VsbDogSUNlbGxEYXRhLFxuICAgICAgeDogbnVtYmVyLFxuICAgICAgeTogbnVtYmVyXG4gICAgKSA9PiB2b2lkXG4gICk6IHZvaWQge1xuICAgIGZvciAobGV0IHkgPSBmaXJzdFJvdzsgeSA8PSBsYXN0Um93OyB5KyspIHtcbiAgICAgIGNvbnN0IHJvdyA9IHkgKyB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlci55ZGlzcDtcbiAgICAgIGNvbnN0IGxpbmUgPSB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlci5saW5lcy5nZXQocm93KTtcbiAgICAgIGNvbnN0IGpvaW5lZFJhbmdlcyA9IHRoaXMuX2NoYXJhY3RlckpvaW5lclNlcnZpY2UuZ2V0Sm9pbmVkQ2hhcmFjdGVycyhyb3cpO1xuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHM7IHgrKykge1xuICAgICAgICBsaW5lIS5sb2FkQ2VsbCh4LCB0aGlzLl93b3JrQ2VsbCk7XG4gICAgICAgIGxldCBjZWxsID0gdGhpcy5fd29ya0NlbGw7XG5cbiAgICAgICAgLy8gSWYgdHJ1ZSwgaW5kaWNhdGVzIHRoYXQgdGhlIGN1cnJlbnQgY2hhcmFjdGVyKHMpIHRvIGRyYXcgd2VyZSBqb2luZWQuXG4gICAgICAgIGxldCBpc0pvaW5lZCA9IGZhbHNlO1xuICAgICAgICBsZXQgbGFzdENoYXJYID0geDtcblxuICAgICAgICAvLyBUaGUgY2hhcmFjdGVyIHRvIHRoZSBsZWZ0IGlzIGEgd2lkZSBjaGFyYWN0ZXIsIGRyYXdpbmcgaXMgb3duZWQgYnlcbiAgICAgICAgLy8gdGhlIGNoYXIgYXQgeC0xXG4gICAgICAgIGlmIChjZWxsLmdldFdpZHRoKCkgPT09IDApIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFByb2Nlc3MgYW55IGpvaW5lZCBjaGFyYWN0ZXIgcmFuZ2VzIGFzIG5lZWRlZC4gQmVjYXVzZSBvZiBob3cgdGhlXG4gICAgICAgIC8vIHJhbmdlcyBhcmUgcHJvZHVjZWQsIHdlIGtub3cgdGhhdCB0aGV5IGFyZSB2YWxpZCBmb3IgdGhlIGNoYXJhY3RlcnNcbiAgICAgICAgLy8gYW5kIGF0dHJpYnV0ZXMgb2Ygb3VyIGlucHV0LlxuICAgICAgICBpZiAoam9pbmVkUmFuZ2VzLmxlbmd0aCA+IDAgJiYgeCA9PT0gam9pbmVkUmFuZ2VzWzBdWzBdKSB7XG4gICAgICAgICAgaXNKb2luZWQgPSB0cnVlO1xuICAgICAgICAgIGNvbnN0IHJhbmdlID0gam9pbmVkUmFuZ2VzLnNoaWZ0KCkhO1xuXG4gICAgICAgICAgLy8gV2UgYWxyZWFkeSBrbm93IHRoZSBleGFjdCBzdGFydCBhbmQgZW5kIGNvbHVtbiBvZiB0aGUgam9pbmVkIHJhbmdlLFxuICAgICAgICAgIC8vIHNvIHdlIGdldCB0aGUgc3RyaW5nIGFuZCB3aWR0aCByZXByZXNlbnRpbmcgaXQgZGlyZWN0bHlcbiAgICAgICAgICBjZWxsID0gbmV3IEpvaW5lZENlbGxEYXRhKFxuICAgICAgICAgICAgdGhpcy5fd29ya0NlbGwsXG4gICAgICAgICAgICBsaW5lIS50cmFuc2xhdGVUb1N0cmluZyh0cnVlLCByYW5nZVswXSwgcmFuZ2VbMV0pLFxuICAgICAgICAgICAgcmFuZ2VbMV0gLSByYW5nZVswXVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICAvLyBTa2lwIG92ZXIgdGhlIGNlbGxzIG9jY3VwaWVkIGJ5IHRoaXMgcmFuZ2UgaW4gdGhlIGxvb3BcbiAgICAgICAgICBsYXN0Q2hhclggPSByYW5nZVsxXSAtIDE7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGUgY2hhcmFjdGVyIGlzIGFuIG92ZXJsYXBwaW5nIGNoYXIgYW5kIHRoZSBjaGFyYWN0ZXIgdG8gdGhlXG4gICAgICAgIC8vIHJpZ2h0IGlzIGEgc3BhY2UsIHRha2Ugb3duZXJzaGlwIG9mIHRoZSBjZWxsIHRvIHRoZSByaWdodC4gV2Ugc2tpcFxuICAgICAgICAvLyB0aGlzIGNoZWNrIGZvciBqb2luZWQgY2hhcmFjdGVycyBiZWNhdXNlIHRoZWlyIHJlbmRlcmluZyBsaWtlbHkgd29uJ3RcbiAgICAgICAgLy8geWllbGQgdGhlIHNhbWUgcmVzdWx0IGFzIHJlbmRlcmluZyB0aGUgbGFzdCBjaGFyYWN0ZXIgaW5kaXZpZHVhbGx5LlxuICAgICAgICBpZiAoIWlzSm9pbmVkICYmIHRoaXMuX2lzT3ZlcmxhcHBpbmcoY2VsbCkpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgY2hhcmFjdGVyIGlzIG92ZXJsYXBwaW5nLCB3ZSB3YW50IHRvIGZvcmNlIGEgcmUtcmVuZGVyIG9uIGV2ZXJ5XG4gICAgICAgICAgLy8gZnJhbWUuIFRoaXMgaXMgc3BlY2lmaWNhbGx5IHRvIHdvcmsgYXJvdW5kIHRoZSBjYXNlIHdoZXJlIHR3b1xuICAgICAgICAgIC8vIG92ZXJsYXBpbmcgY2hhcnMgYGFgIGFuZCBgYmAgYXJlIGFkamFjZW50LCB0aGUgY3Vyc29yIGlzIG1vdmVkIHRvIGIgYW5kIGFcbiAgICAgICAgICAvLyBzcGFjZSBpcyBhZGRlZC4gV2l0aG91dCB0aGlzLCB0aGUgZmlyc3QgaGFsZiBvZiBgYmAgd291bGQgbmV2ZXJcbiAgICAgICAgICAvLyBnZXQgcmVtb3ZlZCwgYW5kIGBhYCB3b3VsZCBub3QgcmUtcmVuZGVyIGJlY2F1c2UgaXQgdGhpbmtzIGl0J3NcbiAgICAgICAgICAvLyBhbHJlYWR5IGluIHRoZSBjb3JyZWN0IHN0YXRlLlxuICAgICAgICAgIC8vIHRoaXMuX3N0YXRlLmNhY2hlW3hdW3ldID0gT1ZFUkxBUF9PV05FRF9DSEFSX0RBVEE7XG4gICAgICAgICAgaWYgKGxhc3RDaGFyWCA8IGxpbmUhLmxlbmd0aCAtIDEgJiYgbGluZSEuZ2V0Q29kZVBvaW50KGxhc3RDaGFyWCArIDEpID09PSBOVUxMX0NFTExfQ09ERSkge1xuICAgICAgICAgICAgLy8gcGF0Y2ggd2lkdGggdG8gMlxuICAgICAgICAgICAgY2VsbC5jb250ZW50ICY9IH5Db250ZW50LldJRFRIX01BU0s7XG4gICAgICAgICAgICBjZWxsLmNvbnRlbnQgfD0gMiA8PCBDb250ZW50LldJRFRIX1NISUZUO1xuICAgICAgICAgICAgLy8gdGhpcy5fY2xlYXJDaGFyKHggKyAxLCB5KTtcbiAgICAgICAgICAgIC8vIFRoZSBvdmVybGFwcGluZyBjaGFyJ3MgY2hhciBkYXRhIHdpbGwgZm9yY2UgYSBjbGVhciBhbmQgcmVuZGVyIHdoZW4gdGhlXG4gICAgICAgICAgICAvLyBvdmVybGFwcGluZyBjaGFyIGlzIG5vIGxvbmdlciB0byB0aGUgbGVmdCBvZiB0aGUgY2hhcmFjdGVyIGFuZCBhbHNvIHdoZW5cbiAgICAgICAgICAgIC8vIHRoZSBzcGFjZSBjaGFuZ2VzIHRvIGFub3RoZXIgY2hhcmFjdGVyLlxuICAgICAgICAgICAgLy8gdGhpcy5fc3RhdGUuY2FjaGVbeCArIDFdW3ldID0gT1ZFUkxBUF9PV05FRF9DSEFSX0RBVEE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY2FsbGJhY2soXG4gICAgICAgICAgY2VsbCxcbiAgICAgICAgICB4LFxuICAgICAgICAgIHlcbiAgICAgICAgKTtcblxuICAgICAgICB4ID0gbGFzdENoYXJYO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3cyB0aGUgYmFja2dyb3VuZCBmb3IgYSBzcGVjaWZpZWQgcmFuZ2Ugb2YgY29sdW1ucy4gVHJpZXMgdG8gYmF0Y2ggYWRqYWNlbnQgY2VsbHMgb2YgdGhlXG4gICAqIHNhbWUgY29sb3IgdG9nZXRoZXIgdG8gcmVkdWNlIGRyYXcgY2FsbHMuXG4gICAqL1xuICBwcml2YXRlIF9kcmF3QmFja2dyb3VuZChmaXJzdFJvdzogbnVtYmVyLCBsYXN0Um93OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBjdHggPSB0aGlzLl9jdHg7XG4gICAgY29uc3QgY29scyA9IHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scztcbiAgICBsZXQgc3RhcnRYOiBudW1iZXIgPSAwO1xuICAgIGxldCBzdGFydFk6IG51bWJlciA9IDA7XG4gICAgbGV0IHByZXZGaWxsU3R5bGU6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gICAgY3R4LnNhdmUoKTtcblxuICAgIHRoaXMuX2ZvckVhY2hDZWxsKGZpcnN0Um93LCBsYXN0Um93LCAoY2VsbCwgeCwgeSkgPT4ge1xuICAgICAgLy8gbGlidnRlIGFuZCB4dGVybSBib3RoIGRyYXcgdGhlIGJhY2tncm91bmQgKGJ1dCBub3QgZm9yZWdyb3VuZCkgb2YgaW52aXNpYmxlIGNoYXJhY3RlcnMsXG4gICAgICAvLyBzbyB3ZSBzaG91bGQgdG9vLlxuICAgICAgbGV0IG5leHRGaWxsU3R5bGUgPSBudWxsOyAvLyBudWxsIHJlcHJlc2VudHMgZGVmYXVsdCBiYWNrZ3JvdW5kIGNvbG9yXG5cbiAgICAgIGlmIChjZWxsLmlzSW52ZXJzZSgpKSB7XG4gICAgICAgIGlmIChjZWxsLmlzRmdEZWZhdWx0KCkpIHtcbiAgICAgICAgICBuZXh0RmlsbFN0eWxlID0gdGhpcy5fY29sb3JzLmZvcmVncm91bmQuY3NzO1xuICAgICAgICB9IGVsc2UgaWYgKGNlbGwuaXNGZ1JHQigpKSB7XG4gICAgICAgICAgbmV4dEZpbGxTdHlsZSA9IGByZ2IoJHtBdHRyaWJ1dGVEYXRhLnRvQ29sb3JSR0IoY2VsbC5nZXRGZ0NvbG9yKCkpLmpvaW4oJywnKX0pYDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXh0RmlsbFN0eWxlID0gdGhpcy5fY29sb3JzLmFuc2lbY2VsbC5nZXRGZ0NvbG9yKCldLmNzcztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjZWxsLmlzQmdSR0IoKSkge1xuICAgICAgICBuZXh0RmlsbFN0eWxlID0gYHJnYigke0F0dHJpYnV0ZURhdGEudG9Db2xvclJHQihjZWxsLmdldEJnQ29sb3IoKSkuam9pbignLCcpfSlgO1xuICAgICAgfSBlbHNlIGlmIChjZWxsLmlzQmdQYWxldHRlKCkpIHtcbiAgICAgICAgbmV4dEZpbGxTdHlsZSA9IHRoaXMuX2NvbG9ycy5hbnNpW2NlbGwuZ2V0QmdDb2xvcigpXS5jc3M7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmV2RmlsbFN0eWxlID09PSBudWxsKSB7XG4gICAgICAgIC8vIFRoaXMgaXMgZWl0aGVyIHRoZSBmaXJzdCBpdGVyYXRpb24sIG9yIHRoZSBkZWZhdWx0IGJhY2tncm91bmQgd2FzIHNldC4gRWl0aGVyIHdheSwgd2VcbiAgICAgICAgLy8gZG9uJ3QgbmVlZCB0byBkcmF3IGFueXRoaW5nLlxuICAgICAgICBzdGFydFggPSB4O1xuICAgICAgICBzdGFydFkgPSB5O1xuICAgICAgfVxuXG4gICAgICBpZiAoeSAhPT0gc3RhcnRZKSB7XG4gICAgICAgIC8vIG91ciByb3cgY2hhbmdlZCwgZHJhdyB0aGUgcHJldmlvdXMgcm93XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBwcmV2RmlsbFN0eWxlIHx8ICcnO1xuICAgICAgICB0aGlzLl9maWxsQ2VsbHMoc3RhcnRYLCBzdGFydFksIGNvbHMgLSBzdGFydFgsIDEpO1xuICAgICAgICBzdGFydFggPSB4O1xuICAgICAgICBzdGFydFkgPSB5O1xuICAgICAgfSBlbHNlIGlmIChwcmV2RmlsbFN0eWxlICE9PSBuZXh0RmlsbFN0eWxlKSB7XG4gICAgICAgIC8vIG91ciBjb2xvciBjaGFuZ2VkLCBkcmF3IHRoZSBwcmV2aW91cyBjaGFyYWN0ZXJzIGluIHRoaXMgcm93XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBwcmV2RmlsbFN0eWxlIHx8ICcnO1xuICAgICAgICB0aGlzLl9maWxsQ2VsbHMoc3RhcnRYLCBzdGFydFksIHggLSBzdGFydFgsIDEpO1xuICAgICAgICBzdGFydFggPSB4O1xuICAgICAgICBzdGFydFkgPSB5O1xuICAgICAgfVxuXG4gICAgICBwcmV2RmlsbFN0eWxlID0gbmV4dEZpbGxTdHlsZTtcbiAgICB9KTtcblxuICAgIC8vIGZsdXNoIHRoZSBsYXN0IGNvbG9yIHdlIGVuY291bnRlcmVkXG4gICAgaWYgKHByZXZGaWxsU3R5bGUgIT09IG51bGwpIHtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBwcmV2RmlsbFN0eWxlO1xuICAgICAgdGhpcy5fZmlsbENlbGxzKHN0YXJ0WCwgc3RhcnRZLCBjb2xzIC0gc3RhcnRYLCAxKTtcbiAgICB9XG5cbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBfZHJhd0ZvcmVncm91bmQoZmlyc3RSb3c6IG51bWJlciwgbGFzdFJvdzogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fZm9yRWFjaENlbGwoZmlyc3RSb3csIGxhc3RSb3csIChjZWxsLCB4LCB5KSA9PiB7XG4gICAgICBpZiAoY2VsbC5pc0ludmlzaWJsZSgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2RyYXdDaGFycyhjZWxsLCB4LCB5KTtcbiAgICAgIGlmIChjZWxsLmlzVW5kZXJsaW5lKCkgfHwgY2VsbC5pc1N0cmlrZXRocm91Z2goKSkge1xuICAgICAgICB0aGlzLl9jdHguc2F2ZSgpO1xuXG4gICAgICAgIGlmIChjZWxsLmlzSW52ZXJzZSgpKSB7XG4gICAgICAgICAgaWYgKGNlbGwuaXNCZ0RlZmF1bHQoKSkge1xuICAgICAgICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IHRoaXMuX2NvbG9ycy5iYWNrZ3JvdW5kLmNzcztcbiAgICAgICAgICB9IGVsc2UgaWYgKGNlbGwuaXNCZ1JHQigpKSB7XG4gICAgICAgICAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gYHJnYigke0F0dHJpYnV0ZURhdGEudG9Db2xvclJHQihjZWxsLmdldEJnQ29sb3IoKSkuam9pbignLCcpfSlgO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgYmcgPSBjZWxsLmdldEJnQ29sb3IoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLmRyYXdCb2xkVGV4dEluQnJpZ2h0Q29sb3JzICYmIGNlbGwuaXNCb2xkKCkgJiYgYmcgPCA4KSB7XG4gICAgICAgICAgICAgIGJnICs9IDg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gdGhpcy5fY29sb3JzLmFuc2lbYmddLmNzcztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGNlbGwuaXNGZ0RlZmF1bHQoKSkge1xuICAgICAgICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IHRoaXMuX2NvbG9ycy5mb3JlZ3JvdW5kLmNzcztcbiAgICAgICAgICB9IGVsc2UgaWYgKGNlbGwuaXNGZ1JHQigpKSB7XG4gICAgICAgICAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gYHJnYigke0F0dHJpYnV0ZURhdGEudG9Db2xvclJHQihjZWxsLmdldEZnQ29sb3IoKSkuam9pbignLCcpfSlgO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgZmcgPSBjZWxsLmdldEZnQ29sb3IoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLmRyYXdCb2xkVGV4dEluQnJpZ2h0Q29sb3JzICYmIGNlbGwuaXNCb2xkKCkgJiYgZmcgPCA4KSB7XG4gICAgICAgICAgICAgIGZnICs9IDg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gdGhpcy5fY29sb3JzLmFuc2lbZmddLmNzcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2VsbC5pc1N0cmlrZXRocm91Z2goKSkge1xuICAgICAgICAgIHRoaXMuX2ZpbGxNaWRkbGVMaW5lQXRDZWxscyh4LCB5LCBjZWxsLmdldFdpZHRoKCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjZWxsLmlzVW5kZXJsaW5lKCkpIHtcbiAgICAgICAgICB0aGlzLl9maWxsQm90dG9tTGluZUF0Q2VsbHMoeCwgeSwgY2VsbC5nZXRXaWR0aCgpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jdHgucmVzdG9yZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIG9uR3JpZENoYW5nZWQoZmlyc3RSb3c6IG51bWJlciwgbGFzdFJvdzogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8gUmVzaXplIGhhcyBub3QgYmVlbiBjYWxsZWQgeWV0XG4gICAgaWYgKHRoaXMuX3N0YXRlLmNhY2hlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9jaGFyQXRsYXMpIHtcbiAgICAgIHRoaXMuX2NoYXJBdGxhcy5iZWdpbkZyYW1lKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fY2xlYXJDZWxscygwLCBmaXJzdFJvdywgdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzLCBsYXN0Um93IC0gZmlyc3RSb3cgKyAxKTtcbiAgICB0aGlzLl9kcmF3QmFja2dyb3VuZChmaXJzdFJvdywgbGFzdFJvdyk7XG4gICAgdGhpcy5fZHJhd0ZvcmVncm91bmQoZmlyc3RSb3csIGxhc3RSb3cpO1xuICB9XG5cbiAgcHVibGljIG9uT3B0aW9uc0NoYW5nZWQoKTogdm9pZCB7XG4gICAgdGhpcy5fc2V0VHJhbnNwYXJlbmN5KHRoaXMuX29wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMuYWxsb3dUcmFuc3BhcmVuY3kpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgYSBjaGFyYWN0ZXIgaXMgb3ZlcmxhcHBpbmcgdG8gdGhlIG5leHQgY2VsbC5cbiAgICovXG4gIHByaXZhdGUgX2lzT3ZlcmxhcHBpbmcoY2VsbDogSUNlbGxEYXRhKTogYm9vbGVhbiB7XG4gICAgLy8gT25seSBzaW5nbGUgY2VsbCBjaGFyYWN0ZXJzIGNhbiBiZSBvdmVybGFwcGluZywgcmVuZGVyaW5nIGlzc3VlcyBjYW5cbiAgICAvLyBvY2N1ciB3aXRob3V0IHRoaXMgY2hlY2tcbiAgICBpZiAoY2VsbC5nZXRXaWR0aCgpICE9PSAxKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gV2UgYXNzdW1lIHRoYXQgYW55IGFzY2lpIGNoYXJhY3RlciB3aWxsIG5vdCBvdmVybGFwXG4gICAgaWYgKGNlbGwuZ2V0Q29kZSgpIDwgMjU2KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgY2hhcnMgPSBjZWxsLmdldENoYXJzKCk7XG5cbiAgICAvLyBEZWxpdmVyIGZyb20gY2FjaGUgaWYgYXZhaWxhYmxlXG4gICAgaWYgKHRoaXMuX2NoYXJhY3Rlck92ZXJsYXBDYWNoZS5oYXNPd25Qcm9wZXJ0eShjaGFycykpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jaGFyYWN0ZXJPdmVybGFwQ2FjaGVbY2hhcnNdO1xuICAgIH1cblxuICAgIC8vIFNldHVwIHRoZSBmb250XG4gICAgdGhpcy5fY3R4LnNhdmUoKTtcbiAgICB0aGlzLl9jdHguZm9udCA9IHRoaXMuX2NoYXJhY3RlckZvbnQ7XG5cbiAgICAvLyBNZWFzdXJlIHRoZSB3aWR0aCBvZiB0aGUgY2hhcmFjdGVyLCBidXQgTWF0aC5mbG9vciBpdFxuICAgIC8vIGJlY2F1c2UgdGhhdCBpcyB3aGF0IHRoZSByZW5kZXJlciBkb2VzIHdoZW4gaXQgY2FsY3VsYXRlc1xuICAgIC8vIHRoZSBjaGFyYWN0ZXIgZGltZW5zaW9ucyB3ZSBhcmUgY29tcGFyaW5nIGFnYWluc3RcbiAgICBjb25zdCBvdmVybGFwcyA9IE1hdGguZmxvb3IodGhpcy5fY3R4Lm1lYXN1cmVUZXh0KGNoYXJzKS53aWR0aCkgPiB0aGlzLl9jaGFyYWN0ZXJXaWR0aDtcblxuICAgIC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGNvbnRleHRcbiAgICB0aGlzLl9jdHgucmVzdG9yZSgpO1xuXG4gICAgLy8gQ2FjaGUgYW5kIHJldHVyblxuICAgIHRoaXMuX2NoYXJhY3Rlck92ZXJsYXBDYWNoZVtjaGFyc10gPSBvdmVybGFwcztcbiAgICByZXR1cm4gb3ZlcmxhcHM7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgdGhlIGNoYXJjYXRlciBhdCB0aGUgY2VsbCBzcGVjaWZpZWQuXG4gICAqIEBwYXJhbSB4IFRoZSBjb2x1bW4gb2YgdGhlIGNoYXIuXG4gICAqIEBwYXJhbSB5IFRoZSByb3cgb2YgdGhlIGNoYXIuXG4gICAqL1xuICAvLyBwcml2YXRlIF9jbGVhckNoYXIoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgLy8gICBsZXQgY29sc1RvQ2xlYXIgPSAxO1xuICAvLyAgIC8vIENsZWFyIHRoZSBhZGphY2VudCBjaGFyYWN0ZXIgaWYgaXQgd2FzIHdpZGVcbiAgLy8gICBjb25zdCBzdGF0ZSA9IHRoaXMuX3N0YXRlLmNhY2hlW3hdW3ldO1xuICAvLyAgIGlmIChzdGF0ZSAmJiBzdGF0ZVtDSEFSX0RBVEFfV0lEVEhfSU5ERVhdID09PSAyKSB7XG4gIC8vICAgICBjb2xzVG9DbGVhciA9IDI7XG4gIC8vICAgfVxuICAvLyAgIHRoaXMuY2xlYXJDZWxscyh4LCB5LCBjb2xzVG9DbGVhciwgMSk7XG4gIC8vIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSUdseXBoSWRlbnRpZmllciB9IGZyb20gJ2Jyb3dzZXIvcmVuZGVyZXIvYXRsYXMvVHlwZXMnO1xuaW1wb3J0IHsgSURpc3Bvc2FibGUgfSBmcm9tICdjb21tb24vVHlwZXMnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZUNoYXJBdGxhcyBpbXBsZW1lbnRzIElEaXNwb3NhYmxlIHtcbiAgcHJpdmF0ZSBfZGlkV2FybVVwOiBib29sZWFuID0gZmFsc2U7XG5cbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7IH1cblxuICAvKipcbiAgICogUGVyZm9ybSBhbnkgd29yayBuZWVkZWQgdG8gd2FybSB0aGUgY2FjaGUgYmVmb3JlIGl0IGNhbiBiZSB1c2VkLiBNYXkgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzLlxuICAgKiBJbXBsZW1lbnQgX2RvV2FybVVwIGluc3RlYWQgaWYgeW91IG9ubHkgd2FudCB0byBnZXQgY2FsbGVkIG9uY2UuXG4gICAqL1xuICBwdWJsaWMgd2FybVVwKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5fZGlkV2FybVVwKSB7XG4gICAgICB0aGlzLl9kb1dhcm1VcCgpO1xuICAgICAgdGhpcy5fZGlkV2FybVVwID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybSBhbnkgd29yayBuZWVkZWQgdG8gd2FybSB0aGUgY2FjaGUgYmVmb3JlIGl0IGNhbiBiZSB1c2VkLiBVc2VkIGJ5IHRoZSBkZWZhdWx0XG4gICAqIGltcGxlbWVudGF0aW9uIG9mIHdhcm1VcCgpLCBhbmQgd2lsbCBvbmx5IGJlIGNhbGxlZCBvbmNlLlxuICAgKi9cbiAgcHJpdmF0ZSBfZG9XYXJtVXAoKTogdm9pZCB7IH1cblxuICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7IH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gd2Ugc3RhcnQgZHJhd2luZyBhIG5ldyBmcmFtZS5cbiAgICpcbiAgICogVE9ETzogV2UgcmVseSBvbiB0aGlzIGdldHRpbmcgY2FsbGVkIGJ5IFRleHRSZW5kZXJMYXllci4gVGhpcyBzaG91bGQgcmVhbGx5IGJlIGNhbGxlZCBieVxuICAgKiBSZW5kZXJlciBpbnN0ZWFkLCBidXQgd2UgbmVlZCB0byBtYWtlIFJlbmRlcmVyIHRoZSBzb3VyY2Utb2YtdHJ1dGggZm9yIHRoZSBjaGFyIGF0bGFzLCBpbnN0ZWFkXG4gICAqIG9mIEJhc2VSZW5kZXJMYXllci5cbiAgICovXG4gIHB1YmxpYyBiZWdpbkZyYW1lKCk6IHZvaWQgeyB9XG5cbiAgLyoqXG4gICAqIE1heSBiZSBjYWxsZWQgYmVmb3JlIHdhcm1VcCBmaW5pc2hlcywgaG93ZXZlciBpdCBpcyBva2F5IGZvciB0aGUgaW1wbGVtZW50YXRpb24gdG9cbiAgICogZG8gbm90aGluZyBhbmQgcmV0dXJuIGZhbHNlIGluIHRoYXQgY2FzZS5cbiAgICpcbiAgICogQHBhcmFtIGN0eCBXaGVyZSB0byBkcmF3IHRoZSBjaGFyYWN0ZXIgb250by5cbiAgICogQHBhcmFtIGdseXBoIEluZm9ybWF0aW9uIGFib3V0IHdoYXQgdG8gZHJhd1xuICAgKiBAcGFyYW0geCBUaGUgcG9zaXRpb24gb24gdGhlIGNvbnRleHQgdG8gc3RhcnQgZHJhd2luZyBhdFxuICAgKiBAcGFyYW0geSBUaGUgcG9zaXRpb24gb24gdGhlIGNvbnRleHQgdG8gc3RhcnQgZHJhd2luZyBhdFxuICAgKiBAcmV0dXJucyBUaGUgc3VjY2VzcyBzdGF0ZS4gVHJ1ZSBpZiB3ZSBkcmV3IHRoZSBjaGFyYWN0ZXIuXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZHJhdyhcbiAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgICBnbHlwaDogSUdseXBoSWRlbnRpZmllcixcbiAgICB4OiBudW1iZXIsXG4gICAgeTogbnVtYmVyXG4gICk6IGJvb2xlYW47XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IGdlbmVyYXRlQ29uZmlnLCBjb25maWdFcXVhbHMgfSBmcm9tICdicm93c2VyL3JlbmRlcmVyL2F0bGFzL0NoYXJBdGxhc1V0aWxzJztcbmltcG9ydCB7IEJhc2VDaGFyQXRsYXMgfSBmcm9tICdicm93c2VyL3JlbmRlcmVyL2F0bGFzL0Jhc2VDaGFyQXRsYXMnO1xuaW1wb3J0IHsgRHluYW1pY0NoYXJBdGxhcyB9IGZyb20gJ2Jyb3dzZXIvcmVuZGVyZXIvYXRsYXMvRHluYW1pY0NoYXJBdGxhcyc7XG5pbXBvcnQgeyBJQ2hhckF0bGFzQ29uZmlnIH0gZnJvbSAnYnJvd3Nlci9yZW5kZXJlci9hdGxhcy9UeXBlcyc7XG5pbXBvcnQgeyBJQ29sb3JTZXQgfSBmcm9tICdicm93c2VyL1R5cGVzJztcbmltcG9ydCB7IElUZXJtaW5hbE9wdGlvbnMgfSBmcm9tICdjb21tb24vc2VydmljZXMvU2VydmljZXMnO1xuXG5pbnRlcmZhY2UgSUNoYXJBdGxhc0NhY2hlRW50cnkge1xuICBhdGxhczogQmFzZUNoYXJBdGxhcztcbiAgY29uZmlnOiBJQ2hhckF0bGFzQ29uZmlnO1xuICAvLyBOLkIuIFRoaXMgaW1wbGVtZW50YXRpb24gcG90ZW50aWFsbHkgaG9sZHMgb250byBjb3BpZXMgb2YgdGhlIHRlcm1pbmFsIGZvcmV2ZXIsIHNvXG4gIC8vIHRoaXMgbWF5IGNhdXNlIG1lbW9yeSBsZWFrcy5cbiAgb3duZWRCeTogbnVtYmVyW107XG59XG5cbmNvbnN0IGNoYXJBdGxhc0NhY2hlOiBJQ2hhckF0bGFzQ2FjaGVFbnRyeVtdID0gW107XG5cbi8qKlxuICogQWNxdWlyZXMgYSBjaGFyIGF0bGFzLCBlaXRoZXIgZ2VuZXJhdGluZyBhIG5ldyBvbmUgb3IgcmV0dXJuaW5nIGFuIGV4aXN0aW5nXG4gKiBvbmUgdGhhdCBpcyBpbiB1c2UgYnkgYW5vdGhlciB0ZXJtaW5hbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFjcXVpcmVDaGFyQXRsYXMoXG4gIG9wdGlvbnM6IElUZXJtaW5hbE9wdGlvbnMsXG4gIHJlbmRlcmVySWQ6IG51bWJlcixcbiAgY29sb3JzOiBJQ29sb3JTZXQsXG4gIHNjYWxlZENoYXJXaWR0aDogbnVtYmVyLFxuICBzY2FsZWRDaGFySGVpZ2h0OiBudW1iZXJcbik6IEJhc2VDaGFyQXRsYXMge1xuICBjb25zdCBuZXdDb25maWcgPSBnZW5lcmF0ZUNvbmZpZyhzY2FsZWRDaGFyV2lkdGgsIHNjYWxlZENoYXJIZWlnaHQsIG9wdGlvbnMsIGNvbG9ycyk7XG5cbiAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSByZW5kZXJlciBhbHJlYWR5IG93bnMgdGhpcyBjb25maWdcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFyQXRsYXNDYWNoZS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGVudHJ5ID0gY2hhckF0bGFzQ2FjaGVbaV07XG4gICAgY29uc3Qgb3duZWRCeUluZGV4ID0gZW50cnkub3duZWRCeS5pbmRleE9mKHJlbmRlcmVySWQpO1xuICAgIGlmIChvd25lZEJ5SW5kZXggPj0gMCkge1xuICAgICAgaWYgKGNvbmZpZ0VxdWFscyhlbnRyeS5jb25maWcsIG5ld0NvbmZpZykpIHtcbiAgICAgICAgcmV0dXJuIGVudHJ5LmF0bGFzO1xuICAgICAgfVxuICAgICAgLy8gVGhlIGNvbmZpZ3MgZGlmZmVyLCByZWxlYXNlIHRoZSByZW5kZXJlciBmcm9tIHRoZSBlbnRyeVxuICAgICAgaWYgKGVudHJ5Lm93bmVkQnkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGVudHJ5LmF0bGFzLmRpc3Bvc2UoKTtcbiAgICAgICAgY2hhckF0bGFzQ2FjaGUuc3BsaWNlKGksIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW50cnkub3duZWRCeS5zcGxpY2Uob3duZWRCeUluZGV4LCAxKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8vIFRyeSBtYXRjaCBhIGNoYXIgYXRsYXMgZnJvbSB0aGUgY2FjaGVcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFyQXRsYXNDYWNoZS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGVudHJ5ID0gY2hhckF0bGFzQ2FjaGVbaV07XG4gICAgaWYgKGNvbmZpZ0VxdWFscyhlbnRyeS5jb25maWcsIG5ld0NvbmZpZykpIHtcbiAgICAgIC8vIEFkZCB0aGUgcmVuZGVyZXIgdG8gdGhlIGNhY2hlIGVudHJ5IGFuZCByZXR1cm5cbiAgICAgIGVudHJ5Lm93bmVkQnkucHVzaChyZW5kZXJlcklkKTtcbiAgICAgIHJldHVybiBlbnRyeS5hdGxhcztcbiAgICB9XG4gIH1cblxuICBjb25zdCBuZXdFbnRyeTogSUNoYXJBdGxhc0NhY2hlRW50cnkgPSB7XG4gICAgYXRsYXM6IG5ldyBEeW5hbWljQ2hhckF0bGFzKFxuICAgICAgZG9jdW1lbnQsXG4gICAgICBuZXdDb25maWdcbiAgICApLFxuICAgIGNvbmZpZzogbmV3Q29uZmlnLFxuICAgIG93bmVkQnk6IFtyZW5kZXJlcklkXVxuICB9O1xuICBjaGFyQXRsYXNDYWNoZS5wdXNoKG5ld0VudHJ5KTtcbiAgcmV0dXJuIG5ld0VudHJ5LmF0bGFzO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYSB0ZXJtaW5hbCByZWZlcmVuY2UgZnJvbSB0aGUgY2FjaGUsIGFsbG93aW5nIGl0cyBtZW1vcnkgdG8gYmUgZnJlZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVUZXJtaW5hbEZyb21DYWNoZShyZW5kZXJlcklkOiBudW1iZXIpOiB2b2lkIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFyQXRsYXNDYWNoZS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGluZGV4ID0gY2hhckF0bGFzQ2FjaGVbaV0ub3duZWRCeS5pbmRleE9mKHJlbmRlcmVySWQpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIGlmIChjaGFyQXRsYXNDYWNoZVtpXS5vd25lZEJ5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIGNhY2hlIGVudHJ5IGlmIGl0J3MgdGhlIG9ubHkgcmVuZGVyZXJcbiAgICAgICAgY2hhckF0bGFzQ2FjaGVbaV0uYXRsYXMuZGlzcG9zZSgpO1xuICAgICAgICBjaGFyQXRsYXNDYWNoZS5zcGxpY2UoaSwgMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIHJlZmVyZW5jZSBmcm9tIHRoZSBjYWNoZSBlbnRyeVxuICAgICAgICBjaGFyQXRsYXNDYWNoZVtpXS5vd25lZEJ5LnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSUNoYXJBdGxhc0NvbmZpZyB9IGZyb20gJ2Jyb3dzZXIvcmVuZGVyZXIvYXRsYXMvVHlwZXMnO1xuaW1wb3J0IHsgREVGQVVMVF9DT0xPUiB9IGZyb20gJ2NvbW1vbi9idWZmZXIvQ29uc3RhbnRzJztcbmltcG9ydCB7IElDb2xvclNldCwgSVBhcnRpYWxDb2xvclNldCB9IGZyb20gJ2Jyb3dzZXIvVHlwZXMnO1xuaW1wb3J0IHsgSVRlcm1pbmFsT3B0aW9ucyB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUNvbmZpZyhzY2FsZWRDaGFyV2lkdGg6IG51bWJlciwgc2NhbGVkQ2hhckhlaWdodDogbnVtYmVyLCBvcHRpb25zOiBJVGVybWluYWxPcHRpb25zLCBjb2xvcnM6IElDb2xvclNldCk6IElDaGFyQXRsYXNDb25maWcge1xuICAvLyBudWxsIG91dCBzb21lIGZpZWxkcyB0aGF0IGRvbid0IG1hdHRlclxuICBjb25zdCBjbG9uZWRDb2xvcnM6IElQYXJ0aWFsQ29sb3JTZXQgPSB7XG4gICAgZm9yZWdyb3VuZDogY29sb3JzLmZvcmVncm91bmQsXG4gICAgYmFja2dyb3VuZDogY29sb3JzLmJhY2tncm91bmQsXG4gICAgY3Vyc29yOiB1bmRlZmluZWQsXG4gICAgY3Vyc29yQWNjZW50OiB1bmRlZmluZWQsXG4gICAgc2VsZWN0aW9uOiB1bmRlZmluZWQsXG4gICAgYW5zaTogWy4uLmNvbG9ycy5hbnNpXVxuICB9O1xuICByZXR1cm4ge1xuICAgIGRldmljZVBpeGVsUmF0aW86IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLFxuICAgIHNjYWxlZENoYXJXaWR0aCxcbiAgICBzY2FsZWRDaGFySGVpZ2h0LFxuICAgIGZvbnRGYW1pbHk6IG9wdGlvbnMuZm9udEZhbWlseSxcbiAgICBmb250U2l6ZTogb3B0aW9ucy5mb250U2l6ZSxcbiAgICBmb250V2VpZ2h0OiBvcHRpb25zLmZvbnRXZWlnaHQsXG4gICAgZm9udFdlaWdodEJvbGQ6IG9wdGlvbnMuZm9udFdlaWdodEJvbGQsXG4gICAgYWxsb3dUcmFuc3BhcmVuY3k6IG9wdGlvbnMuYWxsb3dUcmFuc3BhcmVuY3ksXG4gICAgY29sb3JzOiBjbG9uZWRDb2xvcnNcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ0VxdWFscyhhOiBJQ2hhckF0bGFzQ29uZmlnLCBiOiBJQ2hhckF0bGFzQ29uZmlnKTogYm9vbGVhbiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5jb2xvcnMuYW5zaS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhLmNvbG9ycy5hbnNpW2ldLnJnYmEgIT09IGIuY29sb3JzLmFuc2lbaV0ucmdiYSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYS5kZXZpY2VQaXhlbFJhdGlvID09PSBiLmRldmljZVBpeGVsUmF0aW8gJiZcbiAgICAgIGEuZm9udEZhbWlseSA9PT0gYi5mb250RmFtaWx5ICYmXG4gICAgICBhLmZvbnRTaXplID09PSBiLmZvbnRTaXplICYmXG4gICAgICBhLmZvbnRXZWlnaHQgPT09IGIuZm9udFdlaWdodCAmJlxuICAgICAgYS5mb250V2VpZ2h0Qm9sZCA9PT0gYi5mb250V2VpZ2h0Qm9sZCAmJlxuICAgICAgYS5hbGxvd1RyYW5zcGFyZW5jeSA9PT0gYi5hbGxvd1RyYW5zcGFyZW5jeSAmJlxuICAgICAgYS5zY2FsZWRDaGFyV2lkdGggPT09IGIuc2NhbGVkQ2hhcldpZHRoICYmXG4gICAgICBhLnNjYWxlZENoYXJIZWlnaHQgPT09IGIuc2NhbGVkQ2hhckhlaWdodCAmJlxuICAgICAgYS5jb2xvcnMuZm9yZWdyb3VuZCA9PT0gYi5jb2xvcnMuZm9yZWdyb3VuZCAmJlxuICAgICAgYS5jb2xvcnMuYmFja2dyb3VuZCA9PT0gYi5jb2xvcnMuYmFja2dyb3VuZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzMjU2Q29sb3IoY29sb3JDb2RlOiBudW1iZXIpOiBib29sZWFuIHtcbiAgcmV0dXJuIGNvbG9yQ29kZSA8IERFRkFVTFRfQ09MT1I7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IGlzRmlyZWZveCwgaXNMZWdhY3lFZGdlIH0gZnJvbSAnY29tbW9uL1BsYXRmb3JtJztcblxuZXhwb3J0IGNvbnN0IElOVkVSVEVEX0RFRkFVTFRfQ09MT1IgPSAyNTc7XG5leHBvcnQgY29uc3QgRElNX09QQUNJVFkgPSAwLjU7XG4vLyBUaGUgdGV4dCBiYXNlbGluZSBpcyBzZXQgY29uZGl0aW9uYWxseSBieSBicm93c2VyLiBVc2luZyAnaWRlb2dyYXBoaWMnIGZvciBGaXJlZm94IG9yIExlZ2FjeSBFZGdlIHdvdWxkXG4vLyByZXN1bHQgaW4gdHJ1bmNhdGVkIHRleHQgKElzc3VlIDMzNTMpLiBVc2luZyAnYm90dG9tJyBmb3IgQ2hyb21lIHdvdWxkIHJlc3VsdCBpbiBzbGlnaHRseVxuLy8gdW5hbGlnbmVkIFBvd2VybGluZSBmb250cyAoUFIgMzM1NiNpc3N1ZWNvbW1lbnQtODUwOTI4MTc5KS5cbmV4cG9ydCBjb25zdCBURVhUX0JBU0VMSU5FOiBDYW52YXNUZXh0QmFzZWxpbmUgPSBpc0ZpcmVmb3ggfHwgaXNMZWdhY3lFZGdlID8gJ2JvdHRvbScgOiAnaWRlb2dyYXBoaWMnO1xuXG5leHBvcnQgY29uc3QgQ0hBUl9BVExBU19DRUxMX1NQQUNJTkcgPSAxO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBESU1fT1BBQ0lUWSwgSU5WRVJURURfREVGQVVMVF9DT0xPUiwgVEVYVF9CQVNFTElORSB9IGZyb20gJ2Jyb3dzZXIvcmVuZGVyZXIvYXRsYXMvQ29uc3RhbnRzJztcbmltcG9ydCB7IElHbHlwaElkZW50aWZpZXIsIElDaGFyQXRsYXNDb25maWcgfSBmcm9tICdicm93c2VyL3JlbmRlcmVyL2F0bGFzL1R5cGVzJztcbmltcG9ydCB7IEJhc2VDaGFyQXRsYXMgfSBmcm9tICdicm93c2VyL3JlbmRlcmVyL2F0bGFzL0Jhc2VDaGFyQXRsYXMnO1xuaW1wb3J0IHsgREVGQVVMVF9BTlNJX0NPTE9SUyB9IGZyb20gJ2Jyb3dzZXIvQ29sb3JNYW5hZ2VyJztcbmltcG9ydCB7IExSVU1hcCB9IGZyb20gJ2Jyb3dzZXIvcmVuZGVyZXIvYXRsYXMvTFJVTWFwJztcbmltcG9ydCB7IGlzRmlyZWZveCwgaXNTYWZhcmkgfSBmcm9tICdjb21tb24vUGxhdGZvcm0nO1xuaW1wb3J0IHsgSUNvbG9yIH0gZnJvbSAnYnJvd3Nlci9UeXBlcyc7XG5pbXBvcnQgeyB0aHJvd0lmRmFsc3kgfSBmcm9tICdicm93c2VyL3JlbmRlcmVyL1JlbmRlcmVyVXRpbHMnO1xuaW1wb3J0IHsgY29sb3IgfSBmcm9tICdicm93c2VyL0NvbG9yJztcblxuLy8gSW4gcHJhY3RpY2Ugd2UncmUgcHJvYmFibHkgbmV2ZXIgZ29pbmcgdG8gZXhoYXVzdCBhIHRleHR1cmUgdGhpcyBsYXJnZS4gRm9yIGRlYnVnZ2luZyBwdXJwb3Nlcyxcbi8vIGhvd2V2ZXIsIGl0IGNhbiBiZSB1c2VmdWwgdG8gc2V0IHRoaXMgdG8gYSByZWFsbHkgdGlueSB2YWx1ZSwgdG8gdmVyaWZ5IHRoYXQgTFJVIGV2aWN0aW9uIHdvcmtzLlxuY29uc3QgVEVYVFVSRV9XSURUSCA9IDEwMjQ7XG5jb25zdCBURVhUVVJFX0hFSUdIVCA9IDEwMjQ7XG5cbmNvbnN0IFRSQU5TUEFSRU5UX0NPTE9SID0ge1xuICBjc3M6ICdyZ2JhKDAsIDAsIDAsIDApJyxcbiAgcmdiYTogMFxufTtcblxuLy8gRHJhd2luZyB0byB0aGUgY2FjaGUgaXMgZXhwZW5zaXZlOiBJZiB3ZSBoYXZlIHRvIGRyYXcgbW9yZSB0aGFuIHRoaXMgbnVtYmVyIG9mIGdseXBocyB0byB0aGVcbi8vIGNhY2hlIGluIGEgc2luZ2xlIGZyYW1lLCBnaXZlIHVwIG9uIHRyeWluZyB0byBjYWNoZSBhbnl0aGluZyBlbHNlLCBhbmQgdHJ5IHRvIGZpbmlzaCB0aGUgY3VycmVudFxuLy8gZnJhbWUgQVNBUC5cbi8vXG4vLyBUaGlzIGhlbHBzIHRvIGxpbWl0IHRoZSBhbW91bnQgb2YgZGFtYWdlIGEgcHJvZ3JhbSBjYW4gZG8gd2hlbiBpdCB3b3VsZCBvdGhlcndpc2UgdGhyYXNoIHRoZVxuLy8gY2FjaGUuXG5jb25zdCBGUkFNRV9DQUNIRV9EUkFXX0xJTUlUID0gMTAwO1xuXG4vKipcbiAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIGdlbmVyYXRpbmcgdGhlIEltYWdlQml0bWFwLCB0aGlzIGlzIHRvIGRlYm91bmNlL2JhdGNoXG4gKiB0aGUgb3BlcmF0aW9uIGFzIHdpbmRvdy5jcmVhdGVJbWFnZUJpdG1hcCBpcyBhc3luY2hyb25vdXMuXG4gKi9cbmNvbnN0IEdMWVBIX0JJVE1BUF9DT01NSVRfREVMQVkgPSAxMDA7XG5cbmludGVyZmFjZSBJR2x5cGhDYWNoZVZhbHVlIHtcbiAgaW5kZXg6IG51bWJlcjtcbiAgaXNFbXB0eTogYm9vbGVhbjtcbiAgaW5CaXRtYXA6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRHbHlwaENhY2hlS2V5KGdseXBoOiBJR2x5cGhJZGVudGlmaWVyKTogbnVtYmVyIHtcbiAgLy8gTm90ZSB0aGF0IHRoaXMgb25seSByZXR1cm5zIGEgdmFsaWQga2V5IHdoZW4gY29kZSA8IDI1NlxuICAvLyBMYXlvdXQ6XG4gIC8vIDBiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDE6IGl0YWxpYyAoMSlcbiAgLy8gMGIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDogZGltICgxKVxuICAvLyAwYjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTAwOiBib2xkICgxKVxuICAvLyAwYjAwMDAwMDAwMDAwMDAwMDAwMDAwMTExMTExMTExMDAwOiBmZyAoOSlcbiAgLy8gMGIwMDAwMDAwMDAwMDExMTExMTExMTAwMDAwMDAwMDAwMDogYmcgKDkpXG4gIC8vIDBiMDAwMTExMTExMTEwMDAwMDAwMDAwMDAwMDAwMDAwMDA6IGNvZGUgKDgpXG4gIC8vIDBiMTExMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA6IHVudXNlZCAoMylcbiAgcmV0dXJuIGdseXBoLmNvZGUgPDwgMjEgfCBnbHlwaC5iZyA8PCAxMiB8IGdseXBoLmZnIDw8IDMgfCAoZ2x5cGguYm9sZCA/IDAgOiA0KSArIChnbHlwaC5kaW0gPyAwIDogMikgKyAoZ2x5cGguaXRhbGljID8gMCA6IDEpO1xufVxuXG5leHBvcnQgY2xhc3MgRHluYW1pY0NoYXJBdGxhcyBleHRlbmRzIEJhc2VDaGFyQXRsYXMge1xuICAvLyBBbiBvcmRlcmVkIG1hcCB0aGF0IHdlJ3JlIHVzaW5nIHRvIGtlZXAgdHJhY2sgb2Ygd2hlcmUgZWFjaCBnbHlwaCBpcyBpbiB0aGUgYXRsYXMgdGV4dHVyZS5cbiAgLy8gSXQncyBvcmRlcmVkIHNvIHRoYXQgd2UgY2FuIGRldGVybWluZSB3aGVuIHRvIHJlbW92ZSB0aGUgb2xkIGVudHJpZXMuXG4gIHByaXZhdGUgX2NhY2hlTWFwOiBMUlVNYXA8SUdseXBoQ2FjaGVWYWx1ZT47XG5cbiAgLy8gVGhlIHRleHR1cmUgdGhhdCB0aGUgYXRsYXMgaXMgZHJhd24gdG9cbiAgcHJpdmF0ZSBfY2FjaGVDYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuICBwcml2YXRlIF9jYWNoZUN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xuXG4gIC8vIEEgdGVtcG9yYXJ5IGNvbnRleHQgdGhhdCBnbHlwaHMgYXJlIGRyYXduIHRvIGJlZm9yZSBiZWluZyB0cmFuc2ZlcmVkIHRvIHRoZSBhdGxhcy5cbiAgcHJpdmF0ZSBfdG1wQ3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XG5cbiAgLy8gVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIHN0b3JlZCBpbiB0aGUgYXRsYXMgYnkgd2lkdGgvaGVpZ2h0XG4gIHByaXZhdGUgX3dpZHRoOiBudW1iZXI7XG4gIHByaXZhdGUgX2hlaWdodDogbnVtYmVyO1xuXG4gIHByaXZhdGUgX2RyYXdUb0NhY2hlQ291bnQ6IG51bWJlciA9IDA7XG5cbiAgLy8gQW4gYXJyYXkgb2YgZ2x5cGgga2V5cyB0aGF0IGFyZSB3YWl0aW5nIG9uIHRoZSBiaXRtYXAgdG8gYmUgZ2VuZXJhdGVkLlxuICBwcml2YXRlIF9nbHlwaHNXYWl0aW5nT25CaXRtYXA6IElHbHlwaENhY2hlVmFsdWVbXSA9IFtdO1xuXG4gIC8vIFRoZSB0aW1lb3V0IHRoYXQgaXMgdXNlZCB0byBiYXRjaCBiaXRtYXAgZ2VuZXJhdGlvbiBzbyBpdCdzIG5vdCByZXF1ZXN0ZWQgZm9yIGV2ZXJ5IG5ldyBnbHlwaC5cbiAgcHJpdmF0ZSBfYml0bWFwQ29tbWl0VGltZW91dDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgLy8gVGhlIGJpdG1hcCB0byBkcmF3IGZyb20sIHRoaXMgaXMgbXVjaCBmYXN0ZXIgb24gb3RoZXIgYnJvd3NlcnMgdGhhbiBvdGhlcnMuXG4gIHByaXZhdGUgX2JpdG1hcDogSW1hZ2VCaXRtYXAgfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3Rvcihkb2N1bWVudDogRG9jdW1lbnQsIHByaXZhdGUgX2NvbmZpZzogSUNoYXJBdGxhc0NvbmZpZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fY2FjaGVDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICB0aGlzLl9jYWNoZUNhbnZhcy53aWR0aCA9IFRFWFRVUkVfV0lEVEg7XG4gICAgdGhpcy5fY2FjaGVDYW52YXMuaGVpZ2h0ID0gVEVYVFVSRV9IRUlHSFQ7XG4gICAgLy8gVGhlIGNhbnZhcyBuZWVkcyBhbHBoYSBiZWNhdXNlIHdlIHVzZSBjbGVhckNvbG9yIHRvIGNvbnZlcnQgdGhlIGJhY2tncm91bmQgY29sb3IgdG8gYWxwaGEuXG4gICAgLy8gSXQgbWlnaHQgYWxzbyBjb250YWluIHNvbWUgY2hhcmFjdGVycyB3aXRoIHRyYW5zcGFyZW50IGJhY2tncm91bmRzIGlmIGFsbG93VHJhbnNwYXJlbmN5IGlzXG4gICAgLy8gc2V0LlxuICAgIHRoaXMuX2NhY2hlQ3R4ID0gdGhyb3dJZkZhbHN5KHRoaXMuX2NhY2hlQ2FudmFzLmdldENvbnRleHQoJzJkJywgeyBhbHBoYTogdHJ1ZSB9KSk7XG5cbiAgICBjb25zdCB0bXBDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICB0bXBDYW52YXMud2lkdGggPSB0aGlzLl9jb25maWcuc2NhbGVkQ2hhcldpZHRoO1xuICAgIHRtcENhbnZhcy5oZWlnaHQgPSB0aGlzLl9jb25maWcuc2NhbGVkQ2hhckhlaWdodDtcbiAgICB0aGlzLl90bXBDdHggPSB0aHJvd0lmRmFsc3kodG1wQ2FudmFzLmdldENvbnRleHQoJzJkJywgeyBhbHBoYTogdGhpcy5fY29uZmlnLmFsbG93VHJhbnNwYXJlbmN5IH0pKTtcblxuICAgIHRoaXMuX3dpZHRoID0gTWF0aC5mbG9vcihURVhUVVJFX1dJRFRIIC8gdGhpcy5fY29uZmlnLnNjYWxlZENoYXJXaWR0aCk7XG4gICAgdGhpcy5faGVpZ2h0ID0gTWF0aC5mbG9vcihURVhUVVJFX0hFSUdIVCAvIHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFySGVpZ2h0KTtcbiAgICBjb25zdCBjYXBhY2l0eSA9IHRoaXMuX3dpZHRoICogdGhpcy5faGVpZ2h0O1xuICAgIHRoaXMuX2NhY2hlTWFwID0gbmV3IExSVU1hcChjYXBhY2l0eSk7XG4gICAgdGhpcy5fY2FjaGVNYXAucHJlYWxsb2MoY2FwYWNpdHkpO1xuXG4gICAgLy8gVGhpcyBpcyB1c2VmdWwgZm9yIGRlYnVnZ2luZ1xuICAgIC8vIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fY2FjaGVDYW52YXMpO1xuICB9XG5cbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2JpdG1hcENvbW1pdFRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5fYml0bWFwQ29tbWl0VGltZW91dCk7XG4gICAgICB0aGlzLl9iaXRtYXBDb21taXRUaW1lb3V0ID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYmVnaW5GcmFtZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9kcmF3VG9DYWNoZUNvdW50ID0gMDtcbiAgfVxuXG4gIHB1YmxpYyBjbGVhcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fY2FjaGVNYXAuc2l6ZSA+IDApIHtcbiAgICAgIGNvbnN0IGNhcGFjaXR5ID0gdGhpcy5fd2lkdGggKiB0aGlzLl9oZWlnaHQ7XG4gICAgICB0aGlzLl9jYWNoZU1hcCA9IG5ldyBMUlVNYXAoY2FwYWNpdHkpO1xuICAgICAgdGhpcy5fY2FjaGVNYXAucHJlYWxsb2MoY2FwYWNpdHkpO1xuICAgIH1cbiAgICB0aGlzLl9jYWNoZUN0eC5jbGVhclJlY3QoMCwgMCwgVEVYVFVSRV9XSURUSCwgVEVYVFVSRV9IRUlHSFQpO1xuICAgIHRoaXMuX3RtcEN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5fY29uZmlnLnNjYWxlZENoYXJXaWR0aCwgdGhpcy5fY29uZmlnLnNjYWxlZENoYXJIZWlnaHQpO1xuICB9XG5cbiAgcHVibGljIGRyYXcoXG4gICAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gICAgZ2x5cGg6IElHbHlwaElkZW50aWZpZXIsXG4gICAgeDogbnVtYmVyLFxuICAgIHk6IG51bWJlclxuICApOiBib29sZWFuIHtcbiAgICAvLyBTcGFjZSBpcyBhbHdheXMgYW4gZW1wdHkgY2VsbCwgc3BlY2lhbCBjYXNlIHRoaXMgYXMgaXQncyBzbyBjb21tb25cbiAgICBpZiAoZ2x5cGguY29kZSA9PT0gMzIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIEV4aXQgZWFybHkgZm9yIHVuY2FjaGFibGUgZ2x5cGhzXG4gICAgaWYgKCF0aGlzLl9jYW5DYWNoZShnbHlwaCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBnbHlwaEtleSA9IGdldEdseXBoQ2FjaGVLZXkoZ2x5cGgpO1xuICAgIGNvbnN0IGNhY2hlVmFsdWUgPSB0aGlzLl9jYWNoZU1hcC5nZXQoZ2x5cGhLZXkpO1xuICAgIGlmIChjYWNoZVZhbHVlICE9PSBudWxsICYmIGNhY2hlVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fZHJhd0Zyb21DYWNoZShjdHgsIGNhY2hlVmFsdWUsIHgsIHkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9kcmF3VG9DYWNoZUNvdW50IDwgRlJBTUVfQ0FDSEVfRFJBV19MSU1JVCkge1xuICAgICAgbGV0IGluZGV4O1xuICAgICAgaWYgKHRoaXMuX2NhY2hlTWFwLnNpemUgPCB0aGlzLl9jYWNoZU1hcC5jYXBhY2l0eSkge1xuICAgICAgICBpbmRleCA9IHRoaXMuX2NhY2hlTWFwLnNpemU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB3ZSdyZSBvdXQgb2Ygc3BhY2UsIHNvIG91ciBjYWxsIHRvIHNldCB3aWxsIGRlbGV0ZSB0aGlzIGl0ZW1cbiAgICAgICAgaW5kZXggPSB0aGlzLl9jYWNoZU1hcC5wZWVrKCkhLmluZGV4O1xuICAgICAgfVxuICAgICAgY29uc3QgY2FjaGVWYWx1ZSA9IHRoaXMuX2RyYXdUb0NhY2hlKGdseXBoLCBpbmRleCk7XG4gICAgICB0aGlzLl9jYWNoZU1hcC5zZXQoZ2x5cGhLZXksIGNhY2hlVmFsdWUpO1xuICAgICAgdGhpcy5fZHJhd0Zyb21DYWNoZShjdHgsIGNhY2hlVmFsdWUsIHgsIHkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgX2NhbkNhY2hlKGdseXBoOiBJR2x5cGhJZGVudGlmaWVyKTogYm9vbGVhbiB7XG4gICAgLy8gT25seSBjYWNoZSBhc2NpaSBhbmQgZXh0ZW5kZWQgY2hhcmFjdGVycyBmb3Igbm93LCB0byBiZSBzYWZlLiBJbiB0aGUgZnV0dXJlLCB3ZSBjb3VsZCBkb1xuICAgIC8vIHNvbWV0aGluZyBtb3JlIGNvbXBsaWNhdGVkIHRvIGRldGVybWluZSB0aGUgZXhwZWN0ZWQgd2lkdGggb2YgYSBjaGFyYWN0ZXIuXG4gICAgLy9cbiAgICAvLyBJZiB3ZSBzd2l0Y2ggdGhlIHJlbmRlcmVyIG92ZXIgdG8gd2ViZ2wgYXQgc29tZSBwb2ludCwgd2UgbWF5IGJlIGFibGUgdG8gdXNlIGJsZW5kaW5nIG1vZGVzXG4gICAgLy8gdG8gZHJhdyBvdmVybGFwcGluZyBnbHlwaHMgZnJvbSB0aGUgYXRsYXM6XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlcnZvL3dlYnJlbmRlci9pc3N1ZXMvNDY0I2lzc3VlY29tbWVudC0yNTU2MzI4NzVcbiAgICAvLyBodHRwczovL3dlYmdsZnVuZGFtZW50YWxzLm9yZy93ZWJnbC9sZXNzb25zL3dlYmdsLXRleHQtdGV4dHVyZS5odG1sXG4gICAgcmV0dXJuIGdseXBoLmNvZGUgPCAyNTY7XG4gIH1cblxuICBwcml2YXRlIF90b0Nvb3JkaW5hdGVYKGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiAoaW5kZXggJSB0aGlzLl93aWR0aCkgKiB0aGlzLl9jb25maWcuc2NhbGVkQ2hhcldpZHRoO1xuICB9XG5cbiAgcHJpdmF0ZSBfdG9Db29yZGluYXRlWShpbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihpbmRleCAvIHRoaXMuX3dpZHRoKSAqIHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFySGVpZ2h0O1xuICB9XG5cbiAgcHJpdmF0ZSBfZHJhd0Zyb21DYWNoZShcbiAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgICBjYWNoZVZhbHVlOiBJR2x5cGhDYWNoZVZhbHVlLFxuICAgIHg6IG51bWJlcixcbiAgICB5OiBudW1iZXJcbiAgKTogdm9pZCB7XG4gICAgLy8gV2UgZG9uJ3QgYWN0dWFsbHkgbmVlZCB0byBkbyBhbnl0aGluZyBpZiB0aGlzIGlzIHdoaXRlc3BhY2UuXG4gICAgaWYgKGNhY2hlVmFsdWUuaXNFbXB0eSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjYWNoZVggPSB0aGlzLl90b0Nvb3JkaW5hdGVYKGNhY2hlVmFsdWUuaW5kZXgpO1xuICAgIGNvbnN0IGNhY2hlWSA9IHRoaXMuX3RvQ29vcmRpbmF0ZVkoY2FjaGVWYWx1ZS5pbmRleCk7XG4gICAgY3R4LmRyYXdJbWFnZShcbiAgICAgIGNhY2hlVmFsdWUuaW5CaXRtYXAgPyB0aGlzLl9iaXRtYXAhIDogdGhpcy5fY2FjaGVDYW52YXMsXG4gICAgICBjYWNoZVgsXG4gICAgICBjYWNoZVksXG4gICAgICB0aGlzLl9jb25maWcuc2NhbGVkQ2hhcldpZHRoLFxuICAgICAgdGhpcy5fY29uZmlnLnNjYWxlZENoYXJIZWlnaHQsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFyV2lkdGgsXG4gICAgICB0aGlzLl9jb25maWcuc2NhbGVkQ2hhckhlaWdodFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIF9nZXRDb2xvckZyb21BbnNpSW5kZXgoaWR4OiBudW1iZXIpOiBJQ29sb3Ige1xuICAgIGlmIChpZHggPCB0aGlzLl9jb25maWcuY29sb3JzLmFuc2kubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY29uZmlnLmNvbG9ycy5hbnNpW2lkeF07XG4gICAgfVxuICAgIHJldHVybiBERUZBVUxUX0FOU0lfQ09MT1JTW2lkeF07XG4gIH1cblxuICBwcml2YXRlIF9nZXRCYWNrZ3JvdW5kQ29sb3IoZ2x5cGg6IElHbHlwaElkZW50aWZpZXIpOiBJQ29sb3Ige1xuICAgIGlmICh0aGlzLl9jb25maWcuYWxsb3dUcmFuc3BhcmVuY3kpIHtcbiAgICAgIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9yIG1pZ2h0IGhhdmUgc29tZSB0cmFuc3BhcmVuY3ksIHNvIHdlIG5lZWQgdG8gcmVuZGVyIGl0IGFzIGZ1bGx5XG4gICAgICAvLyB0cmFuc3BhcmVudCBpbiB0aGUgYXRsYXMuIE90aGVyd2lzZSB3ZSdkIGVuZCB1cCBkcmF3aW5nIHRoZSB0cmFuc3BhcmVudCBiYWNrZ3JvdW5kIHR3aWNlXG4gICAgICAvLyBhcm91bmQgdGhlIGFudGktYWxpYXNlZCBlZGdlcyBvZiB0aGUgZ2x5cGgsIGFuZCBpdCB3b3VsZCBsb29rIHRvbyBkYXJrLlxuICAgICAgcmV0dXJuIFRSQU5TUEFSRU5UX0NPTE9SO1xuICAgIH1cbiAgICBpZiAoZ2x5cGguYmcgPT09IElOVkVSVEVEX0RFRkFVTFRfQ09MT1IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jb25maWcuY29sb3JzLmZvcmVncm91bmQ7XG4gICAgfVxuICAgIGlmIChnbHlwaC5iZyA8IDI1Nikge1xuICAgICAgcmV0dXJuIHRoaXMuX2dldENvbG9yRnJvbUFuc2lJbmRleChnbHlwaC5iZyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jb25maWcuY29sb3JzLmJhY2tncm91bmQ7XG4gIH1cblxuICBwcml2YXRlIF9nZXRGb3JlZ3JvdW5kQ29sb3IoZ2x5cGg6IElHbHlwaElkZW50aWZpZXIpOiBJQ29sb3Ige1xuICAgIGlmIChnbHlwaC5mZyA9PT0gSU5WRVJURURfREVGQVVMVF9DT0xPUikge1xuICAgICAgcmV0dXJuIGNvbG9yLm9wYXF1ZSh0aGlzLl9jb25maWcuY29sb3JzLmJhY2tncm91bmQpO1xuICAgIH1cbiAgICBpZiAoZ2x5cGguZmcgPCAyNTYpIHtcbiAgICAgIC8vIDI1NiBjb2xvciBzdXBwb3J0XG4gICAgICByZXR1cm4gdGhpcy5fZ2V0Q29sb3JGcm9tQW5zaUluZGV4KGdseXBoLmZnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5jb2xvcnMuZm9yZWdyb3VuZDtcbiAgfVxuXG4gIC8vIFRPRE86IFdlIGRvIHRoaXMgKG9yIHNvbWV0aGluZyBzaW1pbGFyKSBpbiBtdWx0aXBsZSBwbGFjZXMuIFdlIHNob3VsZCBzcGxpdCB0aGlzIG9mZlxuICAvLyBpbnRvIGEgc2hhcmVkIGZ1bmN0aW9uLlxuICBwcml2YXRlIF9kcmF3VG9DYWNoZShnbHlwaDogSUdseXBoSWRlbnRpZmllciwgaW5kZXg6IG51bWJlcik6IElHbHlwaENhY2hlVmFsdWUge1xuICAgIHRoaXMuX2RyYXdUb0NhY2hlQ291bnQrKztcblxuICAgIHRoaXMuX3RtcEN0eC5zYXZlKCk7XG5cbiAgICAvLyBkcmF3IHRoZSBiYWNrZ3JvdW5kXG4gICAgY29uc3QgYmFja2dyb3VuZENvbG9yID0gdGhpcy5fZ2V0QmFja2dyb3VuZENvbG9yKGdseXBoKTtcbiAgICAvLyBVc2UgYSAnY29weScgY29tcG9zaXRlIG9wZXJhdGlvbiB0byBjbGVhciBhbnkgZXhpc3RpbmcgZ2x5cGggb3V0IG9mIF90bXBDdHhXaXRoQWxwaGEsIHJlZ2FyZGxlc3Mgb2ZcbiAgICAvLyB0cmFuc3BhcmVuY3kgaW4gYmFja2dyb3VuZENvbG9yXG4gICAgdGhpcy5fdG1wQ3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdjb3B5JztcbiAgICB0aGlzLl90bXBDdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yLmNzcztcbiAgICB0aGlzLl90bXBDdHguZmlsbFJlY3QoMCwgMCwgdGhpcy5fY29uZmlnLnNjYWxlZENoYXJXaWR0aCwgdGhpcy5fY29uZmlnLnNjYWxlZENoYXJIZWlnaHQpO1xuICAgIHRoaXMuX3RtcEN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnc291cmNlLW92ZXInO1xuXG4gICAgLy8gZHJhdyB0aGUgZm9yZWdyb3VuZC9nbHlwaFxuICAgIGNvbnN0IGZvbnRXZWlnaHQgPSBnbHlwaC5ib2xkID8gdGhpcy5fY29uZmlnLmZvbnRXZWlnaHRCb2xkIDogdGhpcy5fY29uZmlnLmZvbnRXZWlnaHQ7XG4gICAgY29uc3QgZm9udFN0eWxlID0gZ2x5cGguaXRhbGljID8gJ2l0YWxpYycgOiAnJztcbiAgICB0aGlzLl90bXBDdHguZm9udCA9XG4gICAgICBgJHtmb250U3R5bGV9ICR7Zm9udFdlaWdodH0gJHt0aGlzLl9jb25maWcuZm9udFNpemUgKiB0aGlzLl9jb25maWcuZGV2aWNlUGl4ZWxSYXRpb31weCAke3RoaXMuX2NvbmZpZy5mb250RmFtaWx5fWA7XG4gICAgdGhpcy5fdG1wQ3R4LnRleHRCYXNlbGluZSA9IFRFWFRfQkFTRUxJTkU7XG5cbiAgICB0aGlzLl90bXBDdHguZmlsbFN0eWxlID0gdGhpcy5fZ2V0Rm9yZWdyb3VuZENvbG9yKGdseXBoKS5jc3M7XG5cbiAgICAvLyBBcHBseSBhbHBoYSB0byBkaW0gdGhlIGNoYXJhY3RlclxuICAgIGlmIChnbHlwaC5kaW0pIHtcbiAgICAgIHRoaXMuX3RtcEN0eC5nbG9iYWxBbHBoYSA9IERJTV9PUEFDSVRZO1xuICAgIH1cbiAgICAvLyBEcmF3IHRoZSBjaGFyYWN0ZXJcbiAgICB0aGlzLl90bXBDdHguZmlsbFRleHQoZ2x5cGguY2hhcnMsIDAsIHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFySGVpZ2h0KTtcblxuICAgIC8vIGNsZWFyIHRoZSBiYWNrZ3JvdW5kIGZyb20gdGhlIGNoYXJhY3RlciB0byBhdm9pZCBpc3N1ZXMgd2l0aCBkcmF3aW5nIG92ZXIgdGhlIHByZXZpb3VzXG4gICAgLy8gY2hhcmFjdGVyIGlmIGl0IGV4dGVuZHMgcGFzdCBpdCdzIGJvdW5kc1xuICAgIGxldCBpbWFnZURhdGEgPSB0aGlzLl90bXBDdHguZ2V0SW1hZ2VEYXRhKFxuICAgICAgMCwgMCwgdGhpcy5fY29uZmlnLnNjYWxlZENoYXJXaWR0aCwgdGhpcy5fY29uZmlnLnNjYWxlZENoYXJIZWlnaHRcbiAgICApO1xuICAgIGxldCBpc0VtcHR5ID0gZmFsc2U7XG4gICAgaWYgKCF0aGlzLl9jb25maWcuYWxsb3dUcmFuc3BhcmVuY3kpIHtcbiAgICAgIGlzRW1wdHkgPSBjbGVhckNvbG9yKGltYWdlRGF0YSwgYmFja2dyb3VuZENvbG9yKTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGlzIGNoYXJjYXRlciBpcyB1bmRlcnNjb3JlIGFuZCBlbXB0eSwgc2hpZnQgaXQgdXAgdW50aWwgaXQgaXMgdmlzaWJsZSwgdHJ5IGZvciBhIG1heGltdW1cbiAgICAvLyBvZiA1IHBpeGVscy5cbiAgICBpZiAoaXNFbXB0eSAmJiBnbHlwaC5jaGFycyA9PT0gJ18nICYmICF0aGlzLl9jb25maWcuYWxsb3dUcmFuc3BhcmVuY3kpIHtcbiAgICAgIGZvciAobGV0IG9mZnNldCA9IDE7IG9mZnNldCA8PSA1OyBvZmZzZXQrKykge1xuICAgICAgICAvLyBEcmF3IHRoZSBjaGFyYWN0ZXJcbiAgICAgICAgdGhpcy5fdG1wQ3R4LmZpbGxUZXh0KGdseXBoLmNoYXJzLCAwLCB0aGlzLl9jb25maWcuc2NhbGVkQ2hhckhlaWdodCAtIG9mZnNldCk7XG5cbiAgICAgICAgLy8gY2xlYXIgdGhlIGJhY2tncm91bmQgZnJvbSB0aGUgY2hhcmFjdGVyIHRvIGF2b2lkIGlzc3VlcyB3aXRoIGRyYXdpbmcgb3ZlciB0aGUgcHJldmlvdXNcbiAgICAgICAgLy8gY2hhcmFjdGVyIGlmIGl0IGV4dGVuZHMgcGFzdCBpdCdzIGJvdW5kc1xuICAgICAgICBpbWFnZURhdGEgPSB0aGlzLl90bXBDdHguZ2V0SW1hZ2VEYXRhKFxuICAgICAgICAgIDAsIDAsIHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFyV2lkdGgsIHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFySGVpZ2h0XG4gICAgICAgICk7XG4gICAgICAgIGlzRW1wdHkgPSBjbGVhckNvbG9yKGltYWdlRGF0YSwgYmFja2dyb3VuZENvbG9yKTtcbiAgICAgICAgaWYgKCFpc0VtcHR5KSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl90bXBDdHgucmVzdG9yZSgpO1xuXG4gICAgLy8gY29weSB0aGUgZGF0YSBmcm9tIGltYWdlRGF0YSB0byBfY2FjaGVDYW52YXNcbiAgICBjb25zdCB4ID0gdGhpcy5fdG9Db29yZGluYXRlWChpbmRleCk7XG4gICAgY29uc3QgeSA9IHRoaXMuX3RvQ29vcmRpbmF0ZVkoaW5kZXgpO1xuICAgIC8vIHB1dEltYWdlRGF0YSBkb2Vzbid0IGRvIGFueSBibGVuZGluZywgc28gaXQgd2lsbCBvdmVyd3JpdGUgYW55IGV4aXN0aW5nIGNhY2hlIGVudHJ5IGZvciB1c1xuICAgIHRoaXMuX2NhY2hlQ3R4LnB1dEltYWdlRGF0YShpbWFnZURhdGEsIHgsIHkpO1xuXG4gICAgLy8gQWRkIHRoZSBnbHlwaCBhbmQgcXVldWUgaXQgdG8gdGhlIGJpdG1hcCAoaWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgaXQpXG4gICAgY29uc3QgY2FjaGVWYWx1ZSA9IHtcbiAgICAgIGluZGV4LFxuICAgICAgaXNFbXB0eSxcbiAgICAgIGluQml0bWFwOiBmYWxzZVxuICAgIH07XG4gICAgdGhpcy5fYWRkR2x5cGhUb0JpdG1hcChjYWNoZVZhbHVlKTtcblxuICAgIHJldHVybiBjYWNoZVZhbHVlO1xuICB9XG5cbiAgcHJpdmF0ZSBfYWRkR2x5cGhUb0JpdG1hcChjYWNoZVZhbHVlOiBJR2x5cGhDYWNoZVZhbHVlKTogdm9pZCB7XG4gICAgLy8gU3VwcG9ydCBpcyBwYXRjaHkgZm9yIGNyZWF0ZUltYWdlQml0bWFwIGF0IHRoZSBtb21lbnQsIHBhc3MgYSBjYW52YXMgYmFja1xuICAgIC8vIGlmIHN1cHBvcnQgaXMgbGFja2luZyBhcyBkcmF3SW1hZ2Ugd29ya3MgdGhlcmUgdG9vLiBGaXJlZm94IGlzIGFsc29cbiAgICAvLyBpbmNsdWRlZCBoZXJlIGFzIEltYWdlQml0bWFwIGFwcGVhcnMgYm90aCBidWdneSBhbmQgaGFzIGhvcnJpYmxlXG4gICAgLy8gcGVyZm9ybWFuY2UgKHRlc3RlZCBvbiB2NTUpLlxuICAgIGlmICghKCdjcmVhdGVJbWFnZUJpdG1hcCcgaW4gd2luZG93KSB8fCBpc0ZpcmVmb3ggfHwgaXNTYWZhcmkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBBZGQgdGhlIGdseXBoIHRvIHRoZSBxdWV1ZVxuICAgIHRoaXMuX2dseXBoc1dhaXRpbmdPbkJpdG1hcC5wdXNoKGNhY2hlVmFsdWUpO1xuXG4gICAgLy8gQ2hlY2sgaWYgYml0bWFwIGdlbmVyYXRpb24gdGltZW91dCBhbHJlYWR5IGV4aXN0c1xuICAgIGlmICh0aGlzLl9iaXRtYXBDb21taXRUaW1lb3V0ICE9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fYml0bWFwQ29tbWl0VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHRoaXMuX2dlbmVyYXRlQml0bWFwKCksIEdMWVBIX0JJVE1BUF9DT01NSVRfREVMQVkpO1xuICB9XG5cbiAgcHJpdmF0ZSBfZ2VuZXJhdGVCaXRtYXAoKTogdm9pZCB7XG4gICAgY29uc3QgZ2x5cGhzTW92aW5nVG9CaXRtYXAgPSB0aGlzLl9nbHlwaHNXYWl0aW5nT25CaXRtYXA7XG4gICAgdGhpcy5fZ2x5cGhzV2FpdGluZ09uQml0bWFwID0gW107XG4gICAgd2luZG93LmNyZWF0ZUltYWdlQml0bWFwKHRoaXMuX2NhY2hlQ2FudmFzKS50aGVuKGJpdG1hcCA9PiB7XG4gICAgICAvLyBTZXQgYml0bWFwXG4gICAgICB0aGlzLl9iaXRtYXAgPSBiaXRtYXA7XG5cbiAgICAgIC8vIE1hcmsgYWxsIG5ldyBnbHlwaHMgYXMgaW4gYml0bWFwLCBleGNsdWRpbmcgZ2x5cGhzIHRoYXQgY2FtZSBpbiBhZnRlclxuICAgICAgLy8gdGhlIGJpdG1hcCB3YXMgcmVxdWVzdGVkXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdseXBoc01vdmluZ1RvQml0bWFwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZ2x5cGhzTW92aW5nVG9CaXRtYXBbaV07XG4gICAgICAgIC8vIEl0IGRvZXNuJ3QgbWF0dGVyIGlmIHRoZSB2YWx1ZSB3YXMgYWxyZWFkeSBldmljdGVkLCBpdCB3aWxsIGJlXG4gICAgICAgIC8vIHJlbGVhc2VkIGZyb20gbWVtb3J5IGFmdGVyIHRoaXMgYmxvY2sgaWYgc28uXG4gICAgICAgIHZhbHVlLmluQml0bWFwID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLl9iaXRtYXBDb21taXRUaW1lb3V0ID0gbnVsbDtcbiAgfVxufVxuXG4vLyBUaGlzIGlzIHVzZWQgZm9yIGRlYnVnZ2luZyB0aGUgcmVuZGVyZXIsIGp1c3Qgc3dhcCBvdXQgYG5ldyBEeW5hbWljQ2hhckF0bGFzYCB3aXRoXG4vLyBgbmV3IE5vbmVDaGFyQXRsYXNgLlxuZXhwb3J0IGNsYXNzIE5vbmVDaGFyQXRsYXMgZXh0ZW5kcyBCYXNlQ2hhckF0bGFzIHtcbiAgY29uc3RydWN0b3IoZG9jdW1lbnQ6IERvY3VtZW50LCBjb25maWc6IElDaGFyQXRsYXNDb25maWcpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHVibGljIGRyYXcoXG4gICAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gICAgZ2x5cGg6IElHbHlwaElkZW50aWZpZXIsXG4gICAgeDogbnVtYmVyLFxuICAgIHk6IG51bWJlclxuICApOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBNYWtlcyBhIHBhcnRpaWN1bGFyIHJnYiBjb2xvciBpbiBhbiBJbWFnZURhdGEgY29tcGxldGVseSB0cmFuc3BhcmVudC5cbiAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHJlc3VsdCBpcyBcImVtcHR5XCIsIG1lYW5pbmcgYWxsIHBpeGVscyBhcmUgZnVsbHkgdHJhbnNwYXJlbnQuXG4gKi9cbmZ1bmN0aW9uIGNsZWFyQ29sb3IoaW1hZ2VEYXRhOiBJbWFnZURhdGEsIGNvbG9yOiBJQ29sb3IpOiBib29sZWFuIHtcbiAgbGV0IGlzRW1wdHkgPSB0cnVlO1xuICBjb25zdCByID0gY29sb3IucmdiYSA+Pj4gMjQ7XG4gIGNvbnN0IGcgPSBjb2xvci5yZ2JhID4+PiAxNiAmIDB4RkY7XG4gIGNvbnN0IGIgPSBjb2xvci5yZ2JhID4+PiA4ICYgMHhGRjtcbiAgZm9yIChsZXQgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgaW1hZ2VEYXRhLmRhdGEubGVuZ3RoOyBvZmZzZXQgKz0gNCkge1xuICAgIGlmIChpbWFnZURhdGEuZGF0YVtvZmZzZXRdID09PSByICYmXG4gICAgICAgIGltYWdlRGF0YS5kYXRhW29mZnNldCArIDFdID09PSBnICYmXG4gICAgICAgIGltYWdlRGF0YS5kYXRhW29mZnNldCArIDJdID09PSBiKSB7XG4gICAgICBpbWFnZURhdGEuZGF0YVtvZmZzZXQgKyAzXSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlzRW1wdHkgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGlzRW1wdHk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmludGVyZmFjZSBJTGlua2VkTGlzdE5vZGU8VD4ge1xuICBwcmV2OiBJTGlua2VkTGlzdE5vZGU8VD4gfCBudWxsO1xuICBuZXh0OiBJTGlua2VkTGlzdE5vZGU8VD4gfCBudWxsO1xuICBrZXk6IG51bWJlciB8IG51bGw7XG4gIHZhbHVlOiBUIHwgbnVsbDtcbn1cblxuZXhwb3J0IGNsYXNzIExSVU1hcDxUPiB7XG4gIHByaXZhdGUgX21hcDogeyBba2V5OiBudW1iZXJdOiBJTGlua2VkTGlzdE5vZGU8VD4gfSA9IHt9O1xuICBwcml2YXRlIF9oZWFkOiBJTGlua2VkTGlzdE5vZGU8VD4gfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBfdGFpbDogSUxpbmtlZExpc3ROb2RlPFQ+IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgX25vZGVQb29sOiBJTGlua2VkTGlzdE5vZGU8VD5bXSA9IFtdO1xuICBwdWJsaWMgc2l6ZTogbnVtYmVyID0gMDtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgY2FwYWNpdHk6IG51bWJlcikgeyB9XG5cbiAgcHJpdmF0ZSBfdW5saW5rTm9kZShub2RlOiBJTGlua2VkTGlzdE5vZGU8VD4pOiB2b2lkIHtcbiAgICBjb25zdCBwcmV2ID0gbm9kZS5wcmV2O1xuICAgIGNvbnN0IG5leHQgPSBub2RlLm5leHQ7XG4gICAgaWYgKG5vZGUgPT09IHRoaXMuX2hlYWQpIHtcbiAgICAgIHRoaXMuX2hlYWQgPSBuZXh0O1xuICAgIH1cbiAgICBpZiAobm9kZSA9PT0gdGhpcy5fdGFpbCkge1xuICAgICAgdGhpcy5fdGFpbCA9IHByZXY7XG4gICAgfVxuICAgIGlmIChwcmV2ICE9PSBudWxsKSB7XG4gICAgICBwcmV2Lm5leHQgPSBuZXh0O1xuICAgIH1cbiAgICBpZiAobmV4dCAhPT0gbnVsbCkge1xuICAgICAgbmV4dC5wcmV2ID0gcHJldjtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9hcHBlbmROb2RlKG5vZGU6IElMaW5rZWRMaXN0Tm9kZTxUPik6IHZvaWQge1xuICAgIGNvbnN0IHRhaWwgPSB0aGlzLl90YWlsO1xuICAgIGlmICh0YWlsICE9PSBudWxsKSB7XG4gICAgICB0YWlsLm5leHQgPSBub2RlO1xuICAgIH1cbiAgICBub2RlLnByZXYgPSB0YWlsO1xuICAgIG5vZGUubmV4dCA9IG51bGw7XG4gICAgdGhpcy5fdGFpbCA9IG5vZGU7XG4gICAgaWYgKHRoaXMuX2hlYWQgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuX2hlYWQgPSBub2RlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQcmVhbGxvY2F0ZSBhIGJ1bmNoIG9mIGxpbmtlZC1saXN0IG5vZGVzLiBBbGxvY2F0aW5nIHRoZXNlIG5vZGVzIGFoZWFkIG9mIHRpbWUgbWVhbnMgdGhhdFxuICAgKiB0aGV5J3JlIG1vcmUgbGlrZWx5IHRvIGxpdmUgbmV4dCB0byBlYWNoIG90aGVyIGluIG1lbW9yeSwgd2hpY2ggc2VlbXMgdG8gaW1wcm92ZSBwZXJmb3JtYW5jZS5cbiAgICpcbiAgICogRWFjaCBlbXB0eSBvYmplY3Qgb25seSBjb25zdW1lcyBhYm91dCA2MCBieXRlcyBvZiBtZW1vcnksIHNvIHRoaXMgaXMgcHJldHR5IGNoZWFwLCBldmVuIGZvclxuICAgKiBsYXJnZSBtYXBzLlxuICAgKi9cbiAgcHVibGljIHByZWFsbG9jKGNvdW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBub2RlUG9vbCA9IHRoaXMuX25vZGVQb29sO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgbm9kZVBvb2wucHVzaCh7XG4gICAgICAgIHByZXY6IG51bGwsXG4gICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgIGtleTogbnVsbCxcbiAgICAgICAgdmFsdWU6IG51bGxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXQoa2V5OiBudW1iZXIpOiBUIHwgbnVsbCB7XG4gICAgLy8gVGhpcyBpcyB1bnNhZmU6IFdlJ3JlIGFzc3VtaW5nIG91ciBrZXlzcGFjZSBkb2Vzbid0IG92ZXJsYXAgd2l0aCBPYmplY3QucHJvdG90eXBlLiBIb3dldmVyLFxuICAgIC8vIGl0J3MgZmFzdGVyIHRoYW4gY2FsbGluZyBoYXNPd25Qcm9wZXJ0eSwgYW5kIGluIG91ciBjYXNlLCBpdCB3b3VsZCBuZXZlciBvdmVybGFwLlxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLl9tYXBba2V5XTtcbiAgICBpZiAobm9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl91bmxpbmtOb2RlKG5vZGUpO1xuICAgICAgdGhpcy5fYXBwZW5kTm9kZShub2RlKTtcbiAgICAgIHJldHVybiBub2RlLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGEgdmFsdWUgZnJvbSBhIGtleSB3aXRob3V0IG1hcmtpbmcgaXQgYXMgdGhlIG1vc3QgcmVjZW50bHkgdXNlZCBpdGVtLlxuICAgKi9cbiAgcHVibGljIHBlZWtWYWx1ZShrZXk6IG51bWJlcik6IFQgfCBudWxsIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5fbWFwW2tleV07XG4gICAgaWYgKG5vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG5vZGUudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcHVibGljIHBlZWsoKTogVCB8IG51bGwge1xuICAgIGNvbnN0IGhlYWQgPSB0aGlzLl9oZWFkO1xuICAgIHJldHVybiBoZWFkID09PSBudWxsID8gbnVsbCA6IGhlYWQudmFsdWU7XG4gIH1cblxuICBwdWJsaWMgc2V0KGtleTogbnVtYmVyLCB2YWx1ZTogVCk6IHZvaWQge1xuICAgIC8vIFRoaXMgaXMgdW5zYWZlOiBTZWUgbm90ZSBhYm92ZS5cbiAgICBsZXQgbm9kZSA9IHRoaXMuX21hcFtrZXldO1xuICAgIGlmIChub2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGFscmVhZHkgZXhpc3RzLCB3ZSBqdXN0IG5lZWQgdG8gbXV0YXRlIGl0IGFuZCBtb3ZlIGl0IHRvIHRoZSBlbmQgb2YgdGhlIGxpc3RcbiAgICAgIG5vZGUgPSB0aGlzLl9tYXBba2V5XTtcbiAgICAgIHRoaXMuX3VubGlua05vZGUobm9kZSk7XG4gICAgICBub2RlLnZhbHVlID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNpemUgPj0gdGhpcy5jYXBhY2l0eSkge1xuICAgICAgLy8gd2UncmUgb3V0IG9mIHNwYWNlOiByZWN5Y2xlIHRoZSBoZWFkIG5vZGUsIG1vdmUgaXQgdG8gdGhlIHRhaWxcbiAgICAgIG5vZGUgPSB0aGlzLl9oZWFkITtcbiAgICAgIHRoaXMuX3VubGlua05vZGUobm9kZSk7XG4gICAgICBkZWxldGUgdGhpcy5fbWFwW25vZGUua2V5IV07XG4gICAgICBub2RlLmtleSA9IGtleTtcbiAgICAgIG5vZGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHRoaXMuX21hcFtrZXldID0gbm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbWFrZSBhIG5ldyBlbGVtZW50XG4gICAgICBjb25zdCBub2RlUG9vbCA9IHRoaXMuX25vZGVQb29sO1xuICAgICAgaWYgKG5vZGVQb29sLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gdXNlIGEgcHJlYWxsb2NhdGVkIG5vZGUgaWYgd2UgY2FuXG4gICAgICAgIG5vZGUgPSBub2RlUG9vbC5wb3AoKSE7XG4gICAgICAgIG5vZGUua2V5ID0ga2V5O1xuICAgICAgICBub2RlLnZhbHVlID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlID0ge1xuICAgICAgICAgIHByZXY6IG51bGwsXG4gICAgICAgICAgbmV4dDogbnVsbCxcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX21hcFtrZXldID0gbm9kZTtcbiAgICAgIHRoaXMuc2l6ZSsrO1xuICAgIH1cbiAgICB0aGlzLl9hcHBlbmROb2RlKG5vZGUpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOCBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElSZW5kZXJlciwgSVJlbmRlckRpbWVuc2lvbnMsIElSZXF1ZXN0UmVkcmF3RXZlbnQgfSBmcm9tICdicm93c2VyL3JlbmRlcmVyL1R5cGVzJztcbmltcG9ydCB7IEJPTERfQ0xBU1MsIElUQUxJQ19DTEFTUywgQ1VSU09SX0NMQVNTLCBDVVJTT1JfU1RZTEVfQkxPQ0tfQ0xBU1MsIENVUlNPUl9CTElOS19DTEFTUywgQ1VSU09SX1NUWUxFX0JBUl9DTEFTUywgQ1VSU09SX1NUWUxFX1VOREVSTElORV9DTEFTUywgRG9tUmVuZGVyZXJSb3dGYWN0b3J5IH0gZnJvbSAnYnJvd3Nlci9yZW5kZXJlci9kb20vRG9tUmVuZGVyZXJSb3dGYWN0b3J5JztcbmltcG9ydCB7IElOVkVSVEVEX0RFRkFVTFRfQ09MT1IgfSBmcm9tICdicm93c2VyL3JlbmRlcmVyL2F0bGFzL0NvbnN0YW50cyc7XG5pbXBvcnQgeyBEaXNwb3NhYmxlIH0gZnJvbSAnY29tbW9uL0xpZmVjeWNsZSc7XG5pbXBvcnQgeyBJQ29sb3JTZXQsIElMaW5raWZpZXJFdmVudCwgSUxpbmtpZmllciwgSUxpbmtpZmllcjIgfSBmcm9tICdicm93c2VyL1R5cGVzJztcbmltcG9ydCB7IElDaGFyU2l6ZVNlcnZpY2UgfSBmcm9tICdicm93c2VyL3NlcnZpY2VzL1NlcnZpY2VzJztcbmltcG9ydCB7IElPcHRpb25zU2VydmljZSwgSUJ1ZmZlclNlcnZpY2UsIElJbnN0YW50aWF0aW9uU2VydmljZSB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElFdmVudCB9IGZyb20gJ2NvbW1vbi9FdmVudEVtaXR0ZXInO1xuaW1wb3J0IHsgY29sb3IgfSBmcm9tICdicm93c2VyL0NvbG9yJztcbmltcG9ydCB7IHJlbW92ZUVsZW1lbnRGcm9tUGFyZW50IH0gZnJvbSAnYnJvd3Nlci9Eb20nO1xuXG5jb25zdCBURVJNSU5BTF9DTEFTU19QUkVGSVggPSAneHRlcm0tZG9tLXJlbmRlcmVyLW93bmVyLSc7XG5jb25zdCBST1dfQ09OVEFJTkVSX0NMQVNTID0gJ3h0ZXJtLXJvd3MnO1xuY29uc3QgRkdfQ0xBU1NfUFJFRklYID0gJ3h0ZXJtLWZnLSc7XG5jb25zdCBCR19DTEFTU19QUkVGSVggPSAneHRlcm0tYmctJztcbmNvbnN0IEZPQ1VTX0NMQVNTID0gJ3h0ZXJtLWZvY3VzJztcbmNvbnN0IFNFTEVDVElPTl9DTEFTUyA9ICd4dGVybS1zZWxlY3Rpb24nO1xuXG5sZXQgbmV4dFRlcm1pbmFsSWQgPSAxO1xuXG4vKipcbiAqIEEgZmFsbGJhY2sgcmVuZGVyZXIgZm9yIHdoZW4gY2FudmFzIGlzIHNsb3cuIFRoaXMgaXMgbm90IG1lYW50IHRvIGJlXG4gKiBwYXJ0aWN1bGFybHkgZmFzdCBvciBmZWF0dXJlIGNvbXBsZXRlLCBtb3JlIGp1c3Qgc3RhYmxlIGFuZCB1c2FibGUgZm9yIHdoZW5cbiAqIGNhbnZhcyBpcyBub3QgYW4gb3B0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgRG9tUmVuZGVyZXIgZXh0ZW5kcyBEaXNwb3NhYmxlIGltcGxlbWVudHMgSVJlbmRlcmVyIHtcbiAgcHJpdmF0ZSBfcm93RmFjdG9yeTogRG9tUmVuZGVyZXJSb3dGYWN0b3J5O1xuICBwcml2YXRlIF90ZXJtaW5hbENsYXNzOiBudW1iZXIgPSBuZXh0VGVybWluYWxJZCsrO1xuXG4gIHByaXZhdGUgX3RoZW1lU3R5bGVFbGVtZW50ITogSFRNTFN0eWxlRWxlbWVudDtcbiAgcHJpdmF0ZSBfZGltZW5zaW9uc1N0eWxlRWxlbWVudCE6IEhUTUxTdHlsZUVsZW1lbnQ7XG4gIHByaXZhdGUgX3Jvd0NvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgX3Jvd0VsZW1lbnRzOiBIVE1MRWxlbWVudFtdID0gW107XG4gIHByaXZhdGUgX3NlbGVjdGlvbkNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG5cbiAgcHVibGljIGRpbWVuc2lvbnM6IElSZW5kZXJEaW1lbnNpb25zO1xuXG4gIHB1YmxpYyBnZXQgb25SZXF1ZXN0UmVkcmF3KCk6IElFdmVudDxJUmVxdWVzdFJlZHJhd0V2ZW50PiB7IHJldHVybiBuZXcgRXZlbnRFbWl0dGVyPElSZXF1ZXN0UmVkcmF3RXZlbnQ+KCkuZXZlbnQ7IH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF9jb2xvcnM6IElDb2xvclNldCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9lbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9zY3JlZW5FbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IF92aWV3cG9ydEVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2xpbmtpZmllcjogSUxpbmtpZmllcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9saW5raWZpZXIyOiBJTGlua2lmaWVyMixcbiAgICBASUluc3RhbnRpYXRpb25TZXJ2aWNlIGluc3RhbnRpYXRpb25TZXJ2aWNlOiBJSW5zdGFudGlhdGlvblNlcnZpY2UsXG4gICAgQElDaGFyU2l6ZVNlcnZpY2UgcHJpdmF0ZSByZWFkb25seSBfY2hhclNpemVTZXJ2aWNlOiBJQ2hhclNpemVTZXJ2aWNlLFxuICAgIEBJT3B0aW9uc1NlcnZpY2UgcHJpdmF0ZSByZWFkb25seSBfb3B0aW9uc1NlcnZpY2U6IElPcHRpb25zU2VydmljZSxcbiAgICBASUJ1ZmZlclNlcnZpY2UgcHJpdmF0ZSByZWFkb25seSBfYnVmZmVyU2VydmljZTogSUJ1ZmZlclNlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9yb3dDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLl9yb3dDb250YWluZXIuY2xhc3NMaXN0LmFkZChST1dfQ09OVEFJTkVSX0NMQVNTKTtcbiAgICB0aGlzLl9yb3dDb250YWluZXIuc3R5bGUubGluZUhlaWdodCA9ICdub3JtYWwnO1xuICAgIHRoaXMuX3Jvd0NvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICB0aGlzLl9yZWZyZXNoUm93RWxlbWVudHModGhpcy5fYnVmZmVyU2VydmljZS5jb2xzLCB0aGlzLl9idWZmZXJTZXJ2aWNlLnJvd3MpO1xuICAgIHRoaXMuX3NlbGVjdGlvbkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuX3NlbGVjdGlvbkNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFNFTEVDVElPTl9DTEFTUyk7XG4gICAgdGhpcy5fc2VsZWN0aW9uQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgdGhpcy5kaW1lbnNpb25zID0ge1xuICAgICAgc2NhbGVkQ2hhcldpZHRoOiAwLFxuICAgICAgc2NhbGVkQ2hhckhlaWdodDogMCxcbiAgICAgIHNjYWxlZENlbGxXaWR0aDogMCxcbiAgICAgIHNjYWxlZENlbGxIZWlnaHQ6IDAsXG4gICAgICBzY2FsZWRDaGFyTGVmdDogMCxcbiAgICAgIHNjYWxlZENoYXJUb3A6IDAsXG4gICAgICBzY2FsZWRDYW52YXNXaWR0aDogMCxcbiAgICAgIHNjYWxlZENhbnZhc0hlaWdodDogMCxcbiAgICAgIGNhbnZhc1dpZHRoOiAwLFxuICAgICAgY2FudmFzSGVpZ2h0OiAwLFxuICAgICAgYWN0dWFsQ2VsbFdpZHRoOiAwLFxuICAgICAgYWN0dWFsQ2VsbEhlaWdodDogMFxuICAgIH07XG4gICAgdGhpcy5fdXBkYXRlRGltZW5zaW9ucygpO1xuICAgIHRoaXMuX2luamVjdENzcygpO1xuXG4gICAgdGhpcy5fcm93RmFjdG9yeSA9IGluc3RhbnRpYXRpb25TZXJ2aWNlLmNyZWF0ZUluc3RhbmNlKERvbVJlbmRlcmVyUm93RmFjdG9yeSwgZG9jdW1lbnQsIHRoaXMuX2NvbG9ycyk7XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoVEVSTUlOQUxfQ0xBU1NfUFJFRklYICsgdGhpcy5fdGVybWluYWxDbGFzcyk7XG4gICAgdGhpcy5fc2NyZWVuRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9yb3dDb250YWluZXIpO1xuICAgIHRoaXMuX3NjcmVlbkVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fc2VsZWN0aW9uQ29udGFpbmVyKTtcblxuICAgIHRoaXMuX2xpbmtpZmllci5vblNob3dMaW5rVW5kZXJsaW5lKGUgPT4gdGhpcy5fb25MaW5rSG92ZXIoZSkpO1xuICAgIHRoaXMuX2xpbmtpZmllci5vbkhpZGVMaW5rVW5kZXJsaW5lKGUgPT4gdGhpcy5fb25MaW5rTGVhdmUoZSkpO1xuXG4gICAgdGhpcy5fbGlua2lmaWVyMi5vblNob3dMaW5rVW5kZXJsaW5lKGUgPT4gdGhpcy5fb25MaW5rSG92ZXIoZSkpO1xuICAgIHRoaXMuX2xpbmtpZmllcjIub25IaWRlTGlua1VuZGVybGluZShlID0+IHRoaXMuX29uTGlua0xlYXZlKGUpKTtcbiAgfVxuXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShURVJNSU5BTF9DTEFTU19QUkVGSVggKyB0aGlzLl90ZXJtaW5hbENsYXNzKTtcblxuICAgIC8vIE91dHNpZGUgaW5mbHVlbmNlcyBzdWNoIGFzIFJlYWN0IHVubW91bnRzIG1heSBtYW5pcHVsYXRlIHRoZSBET00gYmVmb3JlIG91ciBkaXNwb3NhbC5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20veHRlcm1qcy94dGVybS5qcy9pc3N1ZXMvMjk2MFxuICAgIHJlbW92ZUVsZW1lbnRGcm9tUGFyZW50KHRoaXMuX3Jvd0NvbnRhaW5lciwgdGhpcy5fc2VsZWN0aW9uQ29udGFpbmVyLCB0aGlzLl90aGVtZVN0eWxlRWxlbWVudCwgdGhpcy5fZGltZW5zaW9uc1N0eWxlRWxlbWVudCk7XG5cbiAgICBzdXBlci5kaXNwb3NlKCk7XG4gIH1cblxuICBwcml2YXRlIF91cGRhdGVEaW1lbnNpb25zKCk6IHZvaWQge1xuICAgIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDaGFyV2lkdGggPSB0aGlzLl9jaGFyU2l6ZVNlcnZpY2Uud2lkdGggKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2hhckhlaWdodCA9IE1hdGguY2VpbCh0aGlzLl9jaGFyU2l6ZVNlcnZpY2UuaGVpZ2h0ICogd2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuICAgIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDZWxsV2lkdGggPSB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2hhcldpZHRoICsgTWF0aC5yb3VuZCh0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLmxldHRlclNwYWNpbmcpO1xuICAgIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDZWxsSGVpZ2h0ID0gTWF0aC5mbG9vcih0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2hhckhlaWdodCAqIHRoaXMuX29wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMubGluZUhlaWdodCk7XG4gICAgdGhpcy5kaW1lbnNpb25zLnNjYWxlZENoYXJMZWZ0ID0gMDtcbiAgICB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2hhclRvcCA9IDA7XG4gICAgdGhpcy5kaW1lbnNpb25zLnNjYWxlZENhbnZhc1dpZHRoID0gdGhpcy5kaW1lbnNpb25zLnNjYWxlZENlbGxXaWR0aCAqIHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scztcbiAgICB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2FudmFzSGVpZ2h0ID0gdGhpcy5kaW1lbnNpb25zLnNjYWxlZENlbGxIZWlnaHQgKiB0aGlzLl9idWZmZXJTZXJ2aWNlLnJvd3M7XG4gICAgdGhpcy5kaW1lbnNpb25zLmNhbnZhc1dpZHRoID0gTWF0aC5yb3VuZCh0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2FudmFzV2lkdGggLyB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgdGhpcy5kaW1lbnNpb25zLmNhbnZhc0hlaWdodCA9IE1hdGgucm91bmQodGhpcy5kaW1lbnNpb25zLnNjYWxlZENhbnZhc0hlaWdodCAvIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcbiAgICB0aGlzLmRpbWVuc2lvbnMuYWN0dWFsQ2VsbFdpZHRoID0gdGhpcy5kaW1lbnNpb25zLmNhbnZhc1dpZHRoIC8gdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzO1xuICAgIHRoaXMuZGltZW5zaW9ucy5hY3R1YWxDZWxsSGVpZ2h0ID0gdGhpcy5kaW1lbnNpb25zLmNhbnZhc0hlaWdodCAvIHRoaXMuX2J1ZmZlclNlcnZpY2Uucm93cztcblxuICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiB0aGlzLl9yb3dFbGVtZW50cykge1xuICAgICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IGAke3RoaXMuZGltZW5zaW9ucy5jYW52YXNXaWR0aH1weGA7XG4gICAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9IGAke3RoaXMuZGltZW5zaW9ucy5hY3R1YWxDZWxsSGVpZ2h0fXB4YDtcbiAgICAgIGVsZW1lbnQuc3R5bGUubGluZUhlaWdodCA9IGAke3RoaXMuZGltZW5zaW9ucy5hY3R1YWxDZWxsSGVpZ2h0fXB4YDtcbiAgICAgIC8vIE1ha2Ugc3VyZSByb3dzIGRvbid0IG92ZXJmbG93IG9udG8gZm9sbG93aW5nIHJvd1xuICAgICAgZWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5fZGltZW5zaW9uc1N0eWxlRWxlbWVudCkge1xuICAgICAgdGhpcy5fZGltZW5zaW9uc1N0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICB0aGlzLl9zY3JlZW5FbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX2RpbWVuc2lvbnNTdHlsZUVsZW1lbnQpO1xuICAgIH1cblxuICAgIGNvbnN0IHN0eWxlcyA9XG4gICAgICBgJHt0aGlzLl90ZXJtaW5hbFNlbGVjdG9yfSAuJHtST1dfQ09OVEFJTkVSX0NMQVNTfSBzcGFuIHtgICtcbiAgICAgIGAgZGlzcGxheTogaW5saW5lLWJsb2NrO2AgK1xuICAgICAgYCBoZWlnaHQ6IDEwMCU7YCArXG4gICAgICBgIHZlcnRpY2FsLWFsaWduOiB0b3A7YCArXG4gICAgICBgIHdpZHRoOiAke3RoaXMuZGltZW5zaW9ucy5hY3R1YWxDZWxsV2lkdGh9cHhgICtcbiAgICAgIGB9YDtcblxuICAgIHRoaXMuX2RpbWVuc2lvbnNTdHlsZUVsZW1lbnQudGV4dENvbnRlbnQgPSBzdHlsZXM7XG5cbiAgICB0aGlzLl9zZWxlY3Rpb25Db250YWluZXIuc3R5bGUuaGVpZ2h0ID0gdGhpcy5fdmlld3BvcnRFbGVtZW50LnN0eWxlLmhlaWdodDtcbiAgICB0aGlzLl9zY3JlZW5FbGVtZW50LnN0eWxlLndpZHRoID0gYCR7dGhpcy5kaW1lbnNpb25zLmNhbnZhc1dpZHRofXB4YDtcbiAgICB0aGlzLl9zY3JlZW5FbGVtZW50LnN0eWxlLmhlaWdodCA9IGAke3RoaXMuZGltZW5zaW9ucy5jYW52YXNIZWlnaHR9cHhgO1xuICB9XG5cbiAgcHVibGljIHNldENvbG9ycyhjb2xvcnM6IElDb2xvclNldCk6IHZvaWQge1xuICAgIHRoaXMuX2NvbG9ycyA9IGNvbG9ycztcbiAgICB0aGlzLl9pbmplY3RDc3MoKTtcbiAgfVxuXG4gIHByaXZhdGUgX2luamVjdENzcygpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX3RoZW1lU3R5bGVFbGVtZW50KSB7XG4gICAgICB0aGlzLl90aGVtZVN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICB0aGlzLl9zY3JlZW5FbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX3RoZW1lU3R5bGVFbGVtZW50KTtcbiAgICB9XG5cbiAgICAvLyBCYXNlIENTU1xuICAgIGxldCBzdHlsZXMgPVxuICAgICAgYCR7dGhpcy5fdGVybWluYWxTZWxlY3Rvcn0gLiR7Uk9XX0NPTlRBSU5FUl9DTEFTU30ge2AgK1xuICAgICAgYCBjb2xvcjogJHt0aGlzLl9jb2xvcnMuZm9yZWdyb3VuZC5jc3N9O2AgK1xuICAgICAgYCBmb250LWZhbWlseTogJHt0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLmZvbnRGYW1pbHl9O2AgK1xuICAgICAgYCBmb250LXNpemU6ICR7dGhpcy5fb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy5mb250U2l6ZX1weDtgICtcbiAgICAgIGB9YDtcbiAgICAvLyBUZXh0IHN0eWxlc1xuICAgIHN0eWxlcyArPVxuICAgICAgYCR7dGhpcy5fdGVybWluYWxTZWxlY3Rvcn0gc3Bhbjpub3QoLiR7Qk9MRF9DTEFTU30pIHtgICtcbiAgICAgIGAgZm9udC13ZWlnaHQ6ICR7dGhpcy5fb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy5mb250V2VpZ2h0fTtgICtcbiAgICAgIGB9YCArXG4gICAgICBgJHt0aGlzLl90ZXJtaW5hbFNlbGVjdG9yfSBzcGFuLiR7Qk9MRF9DTEFTU30ge2AgK1xuICAgICAgYCBmb250LXdlaWdodDogJHt0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLmZvbnRXZWlnaHRCb2xkfTtgICtcbiAgICAgIGB9YCArXG4gICAgICBgJHt0aGlzLl90ZXJtaW5hbFNlbGVjdG9yfSBzcGFuLiR7SVRBTElDX0NMQVNTfSB7YCArXG4gICAgICBgIGZvbnQtc3R5bGU6IGl0YWxpYztgICtcbiAgICAgIGB9YDtcbiAgICAvLyBCbGluayBhbmltYXRpb25cbiAgICBzdHlsZXMgKz1cbiAgICAgIGBAa2V5ZnJhbWVzIGJsaW5rX2JveF9zaGFkb3dgICsgYF9gICsgdGhpcy5fdGVybWluYWxDbGFzcyArIGAge2AgK1xuICAgICAgYCA1MCUge2AgK1xuICAgICAgYCAgYm94LXNoYWRvdzogbm9uZTtgICtcbiAgICAgIGAgfWAgK1xuICAgICAgYH1gO1xuICAgIHN0eWxlcyArPVxuICAgICAgYEBrZXlmcmFtZXMgYmxpbmtfYmxvY2tgICsgYF9gICsgdGhpcy5fdGVybWluYWxDbGFzcyArIGAge2AgK1xuICAgICAgYCAwJSB7YCArXG4gICAgICBgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3RoaXMuX2NvbG9ycy5jdXJzb3IuY3NzfTtgICtcbiAgICAgIGAgIGNvbG9yOiAke3RoaXMuX2NvbG9ycy5jdXJzb3JBY2NlbnQuY3NzfTtgICtcbiAgICAgIGAgfWAgK1xuICAgICAgYCA1MCUge2AgK1xuICAgICAgYCAgYmFja2dyb3VuZC1jb2xvcjogJHt0aGlzLl9jb2xvcnMuY3Vyc29yQWNjZW50LmNzc307YCArXG4gICAgICBgICBjb2xvcjogJHt0aGlzLl9jb2xvcnMuY3Vyc29yLmNzc307YCArXG4gICAgICBgIH1gICtcbiAgICAgIGB9YDtcbiAgICAvLyBDdXJzb3JcbiAgICBzdHlsZXMgKz1cbiAgICAgIGAke3RoaXMuX3Rlcm1pbmFsU2VsZWN0b3J9IC4ke1JPV19DT05UQUlORVJfQ0xBU1N9Om5vdCguJHtGT0NVU19DTEFTU30pIC4ke0NVUlNPUl9DTEFTU30uJHtDVVJTT1JfU1RZTEVfQkxPQ0tfQ0xBU1N9IHtgICtcbiAgICAgIGAgb3V0bGluZTogMXB4IHNvbGlkICR7dGhpcy5fY29sb3JzLmN1cnNvci5jc3N9O2AgK1xuICAgICAgYCBvdXRsaW5lLW9mZnNldDogLTFweDtgICtcbiAgICAgIGB9YCArXG4gICAgICBgJHt0aGlzLl90ZXJtaW5hbFNlbGVjdG9yfSAuJHtST1dfQ09OVEFJTkVSX0NMQVNTfS4ke0ZPQ1VTX0NMQVNTfSAuJHtDVVJTT1JfQ0xBU1N9LiR7Q1VSU09SX0JMSU5LX0NMQVNTfTpub3QoLiR7Q1VSU09SX1NUWUxFX0JMT0NLX0NMQVNTfSkge2AgK1xuICAgICAgYCBhbmltYXRpb246IGJsaW5rX2JveF9zaGFkb3dgICsgYF9gICsgdGhpcy5fdGVybWluYWxDbGFzcyArIGAgMXMgc3RlcC1lbmQgaW5maW5pdGU7YCArXG4gICAgICBgfWAgK1xuICAgICAgYCR7dGhpcy5fdGVybWluYWxTZWxlY3Rvcn0gLiR7Uk9XX0NPTlRBSU5FUl9DTEFTU30uJHtGT0NVU19DTEFTU30gLiR7Q1VSU09SX0NMQVNTfS4ke0NVUlNPUl9CTElOS19DTEFTU30uJHtDVVJTT1JfU1RZTEVfQkxPQ0tfQ0xBU1N9IHtgICtcbiAgICAgIGAgYW5pbWF0aW9uOiBibGlua19ibG9ja2AgKyBgX2AgKyB0aGlzLl90ZXJtaW5hbENsYXNzICsgYCAxcyBzdGVwLWVuZCBpbmZpbml0ZTtgICtcbiAgICAgIGB9YCArXG4gICAgICBgJHt0aGlzLl90ZXJtaW5hbFNlbGVjdG9yfSAuJHtST1dfQ09OVEFJTkVSX0NMQVNTfS4ke0ZPQ1VTX0NMQVNTfSAuJHtDVVJTT1JfQ0xBU1N9LiR7Q1VSU09SX1NUWUxFX0JMT0NLX0NMQVNTfSB7YCArXG4gICAgICBgIGJhY2tncm91bmQtY29sb3I6ICR7dGhpcy5fY29sb3JzLmN1cnNvci5jc3N9O2AgK1xuICAgICAgYCBjb2xvcjogJHt0aGlzLl9jb2xvcnMuY3Vyc29yQWNjZW50LmNzc307YCArXG4gICAgICBgfWAgK1xuICAgICAgYCR7dGhpcy5fdGVybWluYWxTZWxlY3Rvcn0gLiR7Uk9XX0NPTlRBSU5FUl9DTEFTU30gLiR7Q1VSU09SX0NMQVNTfS4ke0NVUlNPUl9TVFlMRV9CQVJfQ0xBU1N9IHtgICtcbiAgICAgIGAgYm94LXNoYWRvdzogJHt0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLmN1cnNvcldpZHRofXB4IDAgMCAke3RoaXMuX2NvbG9ycy5jdXJzb3IuY3NzfSBpbnNldDtgICtcbiAgICAgIGB9YCArXG4gICAgICBgJHt0aGlzLl90ZXJtaW5hbFNlbGVjdG9yfSAuJHtST1dfQ09OVEFJTkVSX0NMQVNTfSAuJHtDVVJTT1JfQ0xBU1N9LiR7Q1VSU09SX1NUWUxFX1VOREVSTElORV9DTEFTU30ge2AgK1xuICAgICAgYCBib3gtc2hhZG93OiAwIC0xcHggMCAke3RoaXMuX2NvbG9ycy5jdXJzb3IuY3NzfSBpbnNldDtgICtcbiAgICAgIGB9YDtcbiAgICAvLyBTZWxlY3Rpb25cbiAgICBzdHlsZXMgKz1cbiAgICAgIGAke3RoaXMuX3Rlcm1pbmFsU2VsZWN0b3J9IC4ke1NFTEVDVElPTl9DTEFTU30ge2AgK1xuICAgICAgYCBwb3NpdGlvbjogYWJzb2x1dGU7YCArXG4gICAgICBgIHRvcDogMDtgICtcbiAgICAgIGAgbGVmdDogMDtgICtcbiAgICAgIGAgei1pbmRleDogMTtgICtcbiAgICAgIGAgcG9pbnRlci1ldmVudHM6IG5vbmU7YCArXG4gICAgICBgfWAgK1xuICAgICAgYCR7dGhpcy5fdGVybWluYWxTZWxlY3Rvcn0gLiR7U0VMRUNUSU9OX0NMQVNTfSBkaXYge2AgK1xuICAgICAgYCBwb3NpdGlvbjogYWJzb2x1dGU7YCArXG4gICAgICBgIGJhY2tncm91bmQtY29sb3I6ICR7dGhpcy5fY29sb3JzLnNlbGVjdGlvblRyYW5zcGFyZW50LmNzc307YCArXG4gICAgICBgfWA7XG4gICAgLy8gQ29sb3JzXG4gICAgdGhpcy5fY29sb3JzLmFuc2kuZm9yRWFjaCgoYywgaSkgPT4ge1xuICAgICAgc3R5bGVzICs9XG4gICAgICAgIGAke3RoaXMuX3Rlcm1pbmFsU2VsZWN0b3J9IC4ke0ZHX0NMQVNTX1BSRUZJWH0ke2l9IHsgY29sb3I6ICR7Yy5jc3N9OyB9YCArXG4gICAgICAgIGAke3RoaXMuX3Rlcm1pbmFsU2VsZWN0b3J9IC4ke0JHX0NMQVNTX1BSRUZJWH0ke2l9IHsgYmFja2dyb3VuZC1jb2xvcjogJHtjLmNzc307IH1gO1xuICAgIH0pO1xuICAgIHN0eWxlcyArPVxuICAgICAgYCR7dGhpcy5fdGVybWluYWxTZWxlY3Rvcn0gLiR7RkdfQ0xBU1NfUFJFRklYfSR7SU5WRVJURURfREVGQVVMVF9DT0xPUn0geyBjb2xvcjogJHtjb2xvci5vcGFxdWUodGhpcy5fY29sb3JzLmJhY2tncm91bmQpLmNzc307IH1gICtcbiAgICAgIGAke3RoaXMuX3Rlcm1pbmFsU2VsZWN0b3J9IC4ke0JHX0NMQVNTX1BSRUZJWH0ke0lOVkVSVEVEX0RFRkFVTFRfQ09MT1J9IHsgYmFja2dyb3VuZC1jb2xvcjogJHt0aGlzLl9jb2xvcnMuZm9yZWdyb3VuZC5jc3N9OyB9YDtcblxuICAgIHRoaXMuX3RoZW1lU3R5bGVFbGVtZW50LnRleHRDb250ZW50ID0gc3R5bGVzO1xuICB9XG5cbiAgcHVibGljIG9uRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZSgpOiB2b2lkIHtcbiAgICB0aGlzLl91cGRhdGVEaW1lbnNpb25zKCk7XG4gIH1cblxuICBwcml2YXRlIF9yZWZyZXNoUm93RWxlbWVudHMoY29sczogbnVtYmVyLCByb3dzOiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyBBZGQgbWlzc2luZyBlbGVtZW50c1xuICAgIGZvciAobGV0IGkgPSB0aGlzLl9yb3dFbGVtZW50cy5sZW5ndGg7IGkgPD0gcm93czsgaSsrKSB7XG4gICAgICBjb25zdCByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRoaXMuX3Jvd0NvbnRhaW5lci5hcHBlbmRDaGlsZChyb3cpO1xuICAgICAgdGhpcy5fcm93RWxlbWVudHMucHVzaChyb3cpO1xuICAgIH1cbiAgICAvLyBSZW1vdmUgZXhjZXNzIGVsZW1lbnRzXG4gICAgd2hpbGUgKHRoaXMuX3Jvd0VsZW1lbnRzLmxlbmd0aCA+IHJvd3MpIHtcbiAgICAgIHRoaXMuX3Jvd0NvbnRhaW5lci5yZW1vdmVDaGlsZCh0aGlzLl9yb3dFbGVtZW50cy5wb3AoKSEpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBvblJlc2l6ZShjb2xzOiBudW1iZXIsIHJvd3M6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3JlZnJlc2hSb3dFbGVtZW50cyhjb2xzLCByb3dzKTtcbiAgICB0aGlzLl91cGRhdGVEaW1lbnNpb25zKCk7XG4gIH1cblxuICBwdWJsaWMgb25DaGFyU2l6ZUNoYW5nZWQoKTogdm9pZCB7XG4gICAgdGhpcy5fdXBkYXRlRGltZW5zaW9ucygpO1xuICB9XG5cbiAgcHVibGljIG9uQmx1cigpOiB2b2lkIHtcbiAgICB0aGlzLl9yb3dDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShGT0NVU19DTEFTUyk7XG4gIH1cblxuICBwdWJsaWMgb25Gb2N1cygpOiB2b2lkIHtcbiAgICB0aGlzLl9yb3dDb250YWluZXIuY2xhc3NMaXN0LmFkZChGT0NVU19DTEFTUyk7XG4gIH1cblxuICBwdWJsaWMgb25TZWxlY3Rpb25DaGFuZ2VkKHN0YXJ0OiBbbnVtYmVyLCBudW1iZXJdIHwgdW5kZWZpbmVkLCBlbmQ6IFtudW1iZXIsIG51bWJlcl0gfCB1bmRlZmluZWQsIGNvbHVtblNlbGVjdE1vZGU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAvLyBSZW1vdmUgYWxsIHNlbGVjdGlvbnNcbiAgICB3aGlsZSAodGhpcy5fc2VsZWN0aW9uQ29udGFpbmVyLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgdGhpcy5fc2VsZWN0aW9uQ29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMuX3NlbGVjdGlvbkNvbnRhaW5lci5jaGlsZHJlblswXSk7XG4gICAgfVxuXG4gICAgLy8gU2VsZWN0aW9uIGRvZXMgbm90IGV4aXN0XG4gICAgaWYgKCFzdGFydCB8fCAhZW5kKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVHJhbnNsYXRlIGZyb20gYnVmZmVyIHBvc2l0aW9uIHRvIHZpZXdwb3J0IHBvc2l0aW9uXG4gICAgY29uc3Qgdmlld3BvcnRTdGFydFJvdyA9IHN0YXJ0WzFdIC0gdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXIueWRpc3A7XG4gICAgY29uc3Qgdmlld3BvcnRFbmRSb3cgPSBlbmRbMV0gLSB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlci55ZGlzcDtcbiAgICBjb25zdCB2aWV3cG9ydENhcHBlZFN0YXJ0Um93ID0gTWF0aC5tYXgodmlld3BvcnRTdGFydFJvdywgMCk7XG4gICAgY29uc3Qgdmlld3BvcnRDYXBwZWRFbmRSb3cgPSBNYXRoLm1pbih2aWV3cG9ydEVuZFJvdywgdGhpcy5fYnVmZmVyU2VydmljZS5yb3dzIC0gMSk7XG5cbiAgICAvLyBObyBuZWVkIHRvIGRyYXcgdGhlIHNlbGVjdGlvblxuICAgIGlmICh2aWV3cG9ydENhcHBlZFN0YXJ0Um93ID49IHRoaXMuX2J1ZmZlclNlcnZpY2Uucm93cyB8fCB2aWV3cG9ydENhcHBlZEVuZFJvdyA8IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgdGhlIHNlbGVjdGlvbnNcbiAgICBjb25zdCBkb2N1bWVudEZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXG4gICAgaWYgKGNvbHVtblNlbGVjdE1vZGUpIHtcbiAgICAgIGRvY3VtZW50RnJhZ21lbnQuYXBwZW5kQ2hpbGQoXG4gICAgICAgIHRoaXMuX2NyZWF0ZVNlbGVjdGlvbkVsZW1lbnQodmlld3BvcnRDYXBwZWRTdGFydFJvdywgc3RhcnRbMF0sIGVuZFswXSwgdmlld3BvcnRDYXBwZWRFbmRSb3cgLSB2aWV3cG9ydENhcHBlZFN0YXJ0Um93ICsgMSlcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIERyYXcgZmlyc3Qgcm93XG4gICAgICBjb25zdCBzdGFydENvbCA9IHZpZXdwb3J0U3RhcnRSb3cgPT09IHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3cgPyBzdGFydFswXSA6IDA7XG4gICAgICBjb25zdCBlbmRDb2wgPSB2aWV3cG9ydENhcHBlZFN0YXJ0Um93ID09PSB2aWV3cG9ydEVuZFJvdyA/IGVuZFswXSA6IHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scztcbiAgICAgIGRvY3VtZW50RnJhZ21lbnQuYXBwZW5kQ2hpbGQodGhpcy5fY3JlYXRlU2VsZWN0aW9uRWxlbWVudCh2aWV3cG9ydENhcHBlZFN0YXJ0Um93LCBzdGFydENvbCwgZW5kQ29sKSk7XG4gICAgICAvLyBEcmF3IG1pZGRsZSByb3dzXG4gICAgICBjb25zdCBtaWRkbGVSb3dzQ291bnQgPSB2aWV3cG9ydENhcHBlZEVuZFJvdyAtIHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3cgLSAxO1xuICAgICAgZG9jdW1lbnRGcmFnbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9jcmVhdGVTZWxlY3Rpb25FbGVtZW50KHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3cgKyAxLCAwLCB0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHMsIG1pZGRsZVJvd3NDb3VudCkpO1xuICAgICAgLy8gRHJhdyBmaW5hbCByb3dcbiAgICAgIGlmICh2aWV3cG9ydENhcHBlZFN0YXJ0Um93ICE9PSB2aWV3cG9ydENhcHBlZEVuZFJvdykge1xuICAgICAgICAvLyBPbmx5IGRyYXcgdmlld3BvcnRFbmRSb3cgaWYgaXQncyBub3QgdGhlIHNhbWUgYXMgdmlld3BvcnR0YXJ0Um93XG4gICAgICAgIGNvbnN0IGVuZENvbCA9IHZpZXdwb3J0RW5kUm93ID09PSB2aWV3cG9ydENhcHBlZEVuZFJvdyA/IGVuZFswXSA6IHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scztcbiAgICAgICAgZG9jdW1lbnRGcmFnbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9jcmVhdGVTZWxlY3Rpb25FbGVtZW50KHZpZXdwb3J0Q2FwcGVkRW5kUm93LCAwLCBlbmRDb2wpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fc2VsZWN0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGRvY3VtZW50RnJhZ21lbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBzZWxlY3Rpb24gZWxlbWVudCBhdCB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uLlxuICAgKiBAcGFyYW0gcm93IFRoZSByb3cgb2YgdGhlIHNlbGVjdGlvbi5cbiAgICogQHBhcmFtIGNvbFN0YXJ0IFRoZSBzdGFydCBjb2x1bW4uXG4gICAqIEBwYXJhbSBjb2xFbmQgVGhlIGVuZCBjb2x1bW5zLlxuICAgKi9cbiAgcHJpdmF0ZSBfY3JlYXRlU2VsZWN0aW9uRWxlbWVudChyb3c6IG51bWJlciwgY29sU3RhcnQ6IG51bWJlciwgY29sRW5kOiBudW1iZXIsIHJvd0NvdW50OiBudW1iZXIgPSAxKTogSFRNTEVsZW1lbnQge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9IGAke3Jvd0NvdW50ICogdGhpcy5kaW1lbnNpb25zLmFjdHVhbENlbGxIZWlnaHR9cHhgO1xuICAgIGVsZW1lbnQuc3R5bGUudG9wID0gYCR7cm93ICogdGhpcy5kaW1lbnNpb25zLmFjdHVhbENlbGxIZWlnaHR9cHhgO1xuICAgIGVsZW1lbnQuc3R5bGUubGVmdCA9IGAke2NvbFN0YXJ0ICogdGhpcy5kaW1lbnNpb25zLmFjdHVhbENlbGxXaWR0aH1weGA7XG4gICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IGAke3RoaXMuZGltZW5zaW9ucy5hY3R1YWxDZWxsV2lkdGggKiAoY29sRW5kIC0gY29sU3RhcnQpfXB4YDtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHB1YmxpYyBvbkN1cnNvck1vdmUoKTogdm9pZCB7XG4gICAgLy8gTm8tb3AsIHRoZSBjdXJzb3IgaXMgZHJhd24gd2hlbiByb3dzIGFyZSBkcmF3blxuICB9XG5cbiAgcHVibGljIG9uT3B0aW9uc0NoYW5nZWQoKTogdm9pZCB7XG4gICAgLy8gRm9yY2UgYSByZWZyZXNoXG4gICAgdGhpcy5fdXBkYXRlRGltZW5zaW9ucygpO1xuICAgIHRoaXMuX2luamVjdENzcygpO1xuICB9XG5cbiAgcHVibGljIGNsZWFyKCk6IHZvaWQge1xuICAgIGZvciAoY29uc3QgZSBvZiB0aGlzLl9yb3dFbGVtZW50cykge1xuICAgICAgZS5pbm5lclRleHQgPSAnJztcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVuZGVyUm93cyhzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IGN1cnNvckFic29sdXRlWSA9IHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLnliYXNlICsgdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXIueTtcbiAgICBjb25zdCBjdXJzb3JYID0gTWF0aC5taW4odGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXIueCwgdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzIC0gMSk7XG4gICAgY29uc3QgY3Vyc29yQmxpbmsgPSB0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLmN1cnNvckJsaW5rO1xuXG4gICAgZm9yIChsZXQgeSA9IHN0YXJ0OyB5IDw9IGVuZDsgeSsrKSB7XG4gICAgICBjb25zdCByb3dFbGVtZW50ID0gdGhpcy5fcm93RWxlbWVudHNbeV07XG4gICAgICByb3dFbGVtZW50LmlubmVyVGV4dCA9ICcnO1xuXG4gICAgICBjb25zdCByb3cgPSB5ICsgdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXIueWRpc3A7XG4gICAgICBjb25zdCBsaW5lRGF0YSA9IHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLmxpbmVzLmdldChyb3cpO1xuICAgICAgY29uc3QgY3Vyc29yU3R5bGUgPSB0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLmN1cnNvclN0eWxlO1xuICAgICAgcm93RWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9yb3dGYWN0b3J5LmNyZWF0ZVJvdyhsaW5lRGF0YSEsIHJvdywgcm93ID09PSBjdXJzb3JBYnNvbHV0ZVksIGN1cnNvclN0eWxlLCBjdXJzb3JYLCBjdXJzb3JCbGluaywgdGhpcy5kaW1lbnNpb25zLmFjdHVhbENlbGxXaWR0aCwgdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzKSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXQgX3Rlcm1pbmFsU2VsZWN0b3IoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYC4ke1RFUk1JTkFMX0NMQVNTX1BSRUZJWH0ke3RoaXMuX3Rlcm1pbmFsQ2xhc3N9YDtcbiAgfVxuXG4gIHByaXZhdGUgX29uTGlua0hvdmVyKGU6IElMaW5raWZpZXJFdmVudCk6IHZvaWQge1xuICAgIHRoaXMuX3NldENlbGxVbmRlcmxpbmUoZS54MSwgZS54MiwgZS55MSwgZS55MiwgZS5jb2xzLCB0cnVlKTtcbiAgfVxuXG4gIHByaXZhdGUgX29uTGlua0xlYXZlKGU6IElMaW5raWZpZXJFdmVudCk6IHZvaWQge1xuICAgIHRoaXMuX3NldENlbGxVbmRlcmxpbmUoZS54MSwgZS54MiwgZS55MSwgZS55MiwgZS5jb2xzLCBmYWxzZSk7XG4gIH1cblxuICBwcml2YXRlIF9zZXRDZWxsVW5kZXJsaW5lKHg6IG51bWJlciwgeDI6IG51bWJlciwgeTogbnVtYmVyLCB5MjogbnVtYmVyLCBjb2xzOiBudW1iZXIsIGVuYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB3aGlsZSAoeCAhPT0geDIgfHwgeSAhPT0geTIpIHtcbiAgICAgIGNvbnN0IHJvdyA9IHRoaXMuX3Jvd0VsZW1lbnRzW3ldO1xuICAgICAgaWYgKCFyb3cpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3BhbiA9IHJvdy5jaGlsZHJlblt4XSBhcyBIVE1MRWxlbWVudDtcbiAgICAgIGlmIChzcGFuKSB7XG4gICAgICAgIHNwYW4uc3R5bGUudGV4dERlY29yYXRpb24gPSBlbmFibGVkID8gJ3VuZGVybGluZScgOiAnbm9uZSc7XG4gICAgICB9XG4gICAgICBpZiAoKyt4ID49IGNvbHMpIHtcbiAgICAgICAgeCA9IDA7XG4gICAgICAgIHkrKztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE4IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSUJ1ZmZlckxpbmUgfSBmcm9tICdjb21tb24vVHlwZXMnO1xuaW1wb3J0IHsgSU5WRVJURURfREVGQVVMVF9DT0xPUiB9IGZyb20gJ2Jyb3dzZXIvcmVuZGVyZXIvYXRsYXMvQ29uc3RhbnRzJztcbmltcG9ydCB7IE5VTExfQ0VMTF9DT0RFLCBXSElURVNQQUNFX0NFTExfQ0hBUiwgQXR0cmlidXRlcyB9IGZyb20gJ2NvbW1vbi9idWZmZXIvQ29uc3RhbnRzJztcbmltcG9ydCB7IENlbGxEYXRhIH0gZnJvbSAnY29tbW9uL2J1ZmZlci9DZWxsRGF0YSc7XG5pbXBvcnQgeyBJQ29yZVNlcnZpY2UsIElPcHRpb25zU2VydmljZSB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5pbXBvcnQgeyBjb2xvciwgcmdiYSB9IGZyb20gJ2Jyb3dzZXIvQ29sb3InO1xuaW1wb3J0IHsgSUNvbG9yU2V0LCBJQ29sb3IgfSBmcm9tICdicm93c2VyL1R5cGVzJztcbmltcG9ydCB7IElDaGFyYWN0ZXJKb2luZXJTZXJ2aWNlIH0gZnJvbSAnYnJvd3Nlci9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5pbXBvcnQgeyBKb2luZWRDZWxsRGF0YSB9IGZyb20gJ2Jyb3dzZXIvc2VydmljZXMvQ2hhcmFjdGVySm9pbmVyU2VydmljZSc7XG5cbmV4cG9ydCBjb25zdCBCT0xEX0NMQVNTID0gJ3h0ZXJtLWJvbGQnO1xuZXhwb3J0IGNvbnN0IERJTV9DTEFTUyA9ICd4dGVybS1kaW0nO1xuZXhwb3J0IGNvbnN0IElUQUxJQ19DTEFTUyA9ICd4dGVybS1pdGFsaWMnO1xuZXhwb3J0IGNvbnN0IFVOREVSTElORV9DTEFTUyA9ICd4dGVybS11bmRlcmxpbmUnO1xuZXhwb3J0IGNvbnN0IFNUUklLRVRIUk9VR0hfQ0xBU1MgPSAneHRlcm0tc3RyaWtldGhyb3VnaCc7XG5leHBvcnQgY29uc3QgQ1VSU09SX0NMQVNTID0gJ3h0ZXJtLWN1cnNvcic7XG5leHBvcnQgY29uc3QgQ1VSU09SX0JMSU5LX0NMQVNTID0gJ3h0ZXJtLWN1cnNvci1ibGluayc7XG5leHBvcnQgY29uc3QgQ1VSU09SX1NUWUxFX0JMT0NLX0NMQVNTID0gJ3h0ZXJtLWN1cnNvci1ibG9jayc7XG5leHBvcnQgY29uc3QgQ1VSU09SX1NUWUxFX0JBUl9DTEFTUyA9ICd4dGVybS1jdXJzb3ItYmFyJztcbmV4cG9ydCBjb25zdCBDVVJTT1JfU1RZTEVfVU5ERVJMSU5FX0NMQVNTID0gJ3h0ZXJtLWN1cnNvci11bmRlcmxpbmUnO1xuXG5leHBvcnQgY2xhc3MgRG9tUmVuZGVyZXJSb3dGYWN0b3J5IHtcbiAgcHJpdmF0ZSBfd29ya0NlbGw6IENlbGxEYXRhID0gbmV3IENlbGxEYXRhKCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBfZG9jdW1lbnQ6IERvY3VtZW50LFxuICAgIHByaXZhdGUgX2NvbG9yczogSUNvbG9yU2V0LFxuICAgIEBJQ2hhcmFjdGVySm9pbmVyU2VydmljZSBwcml2YXRlIHJlYWRvbmx5IF9jaGFyYWN0ZXJKb2luZXJTZXJ2aWNlOiBJQ2hhcmFjdGVySm9pbmVyU2VydmljZSxcbiAgICBASU9wdGlvbnNTZXJ2aWNlIHByaXZhdGUgcmVhZG9ubHkgX29wdGlvbnNTZXJ2aWNlOiBJT3B0aW9uc1NlcnZpY2UsXG4gICAgQElDb3JlU2VydmljZSBwcml2YXRlIHJlYWRvbmx5IF9jb3JlU2VydmljZTogSUNvcmVTZXJ2aWNlXG4gICkge1xuICB9XG5cbiAgcHVibGljIHNldENvbG9ycyhjb2xvcnM6IElDb2xvclNldCk6IHZvaWQge1xuICAgIHRoaXMuX2NvbG9ycyA9IGNvbG9ycztcbiAgfVxuXG4gIHB1YmxpYyBjcmVhdGVSb3cobGluZURhdGE6IElCdWZmZXJMaW5lLCByb3c6IG51bWJlciwgaXNDdXJzb3JSb3c6IGJvb2xlYW4sIGN1cnNvclN0eWxlOiBzdHJpbmcgfCB1bmRlZmluZWQsIGN1cnNvclg6IG51bWJlciwgY3Vyc29yQmxpbms6IGJvb2xlYW4sIGNlbGxXaWR0aDogbnVtYmVyLCBjb2xzOiBudW1iZXIpOiBEb2N1bWVudEZyYWdtZW50IHtcbiAgICBjb25zdCBmcmFnbWVudCA9IHRoaXMuX2RvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuICAgIGNvbnN0IGpvaW5lZFJhbmdlcyA9IHRoaXMuX2NoYXJhY3RlckpvaW5lclNlcnZpY2UuZ2V0Sm9pbmVkQ2hhcmFjdGVycyhyb3cpO1xuICAgIC8vIEZpbmQgdGhlIGxpbmUgbGVuZ3RoIGZpcnN0LCB0aGlzIHByZXZlbnRzIHRoZSBuZWVkIHRvIG91dHB1dCBhIGJ1bmNoIG9mXG4gICAgLy8gZW1wdHkgY2VsbHMgYXQgdGhlIGVuZC4gVGhpcyBjYW5ub3QgZWFzaWx5IGJlIGludGVncmF0ZWQgaW50byB0aGUgbWFpblxuICAgIC8vIGxvb3AgYmVsb3cgYmVjYXVzZSBvZiB0aGUgY29sQ291bnQgZmVhdHVyZSAod2hpY2ggY2FuIGJlIHJlbW92ZWQgYWZ0ZXIgd2VcbiAgICAvLyBwcm9wZXJseSBzdXBwb3J0IHJlZmxvdyBhbmQgZGlzYWxsb3cgZGF0YSB0byBnbyBiZXlvbmQgdGhlIHJpZ2h0LXNpZGUgb2ZcbiAgICAvLyB0aGUgdmlld3BvcnQpLlxuICAgIGxldCBsaW5lTGVuZ3RoID0gMDtcbiAgICBmb3IgKGxldCB4ID0gTWF0aC5taW4obGluZURhdGEubGVuZ3RoLCBjb2xzKSAtIDE7IHggPj0gMDsgeC0tKSB7XG4gICAgICBpZiAobGluZURhdGEubG9hZENlbGwoeCwgdGhpcy5fd29ya0NlbGwpLmdldENvZGUoKSAhPT0gTlVMTF9DRUxMX0NPREUgfHwgKGlzQ3Vyc29yUm93ICYmIHggPT09IGN1cnNvclgpKSB7XG4gICAgICAgIGxpbmVMZW5ndGggPSB4ICsgMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCBsaW5lTGVuZ3RoOyB4KyspIHtcbiAgICAgIGxpbmVEYXRhLmxvYWRDZWxsKHgsIHRoaXMuX3dvcmtDZWxsKTtcbiAgICAgIGxldCB3aWR0aCA9IHRoaXMuX3dvcmtDZWxsLmdldFdpZHRoKCk7XG5cbiAgICAgIC8vIFRoZSBjaGFyYWN0ZXIgdG8gdGhlIGxlZnQgaXMgYSB3aWRlIGNoYXJhY3RlciwgZHJhd2luZyBpcyBvd25lZCBieSB0aGUgY2hhciBhdCB4LTFcbiAgICAgIGlmICh3aWR0aCA9PT0gMCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdHJ1ZSwgaW5kaWNhdGVzIHRoYXQgdGhlIGN1cnJlbnQgY2hhcmFjdGVyKHMpIHRvIGRyYXcgd2VyZSBqb2luZWQuXG4gICAgICBsZXQgaXNKb2luZWQgPSBmYWxzZTtcbiAgICAgIGxldCBsYXN0Q2hhclggPSB4O1xuXG4gICAgICAvLyBQcm9jZXNzIGFueSBqb2luZWQgY2hhcmFjdGVyIHJhbmdlcyBhcyBuZWVkZWQuIEJlY2F1c2Ugb2YgaG93IHRoZVxuICAgICAgLy8gcmFuZ2VzIGFyZSBwcm9kdWNlZCwgd2Uga25vdyB0aGF0IHRoZXkgYXJlIHZhbGlkIGZvciB0aGUgY2hhcmFjdGVyc1xuICAgICAgLy8gYW5kIGF0dHJpYnV0ZXMgb2Ygb3VyIGlucHV0LlxuICAgICAgbGV0IGNlbGwgPSB0aGlzLl93b3JrQ2VsbDtcbiAgICAgIGlmIChqb2luZWRSYW5nZXMubGVuZ3RoID4gMCAmJiB4ID09PSBqb2luZWRSYW5nZXNbMF1bMF0pIHtcbiAgICAgICAgaXNKb2luZWQgPSB0cnVlO1xuICAgICAgICBjb25zdCByYW5nZSA9IGpvaW5lZFJhbmdlcy5zaGlmdCgpITtcblxuICAgICAgICAvLyBXZSBhbHJlYWR5IGtub3cgdGhlIGV4YWN0IHN0YXJ0IGFuZCBlbmQgY29sdW1uIG9mIHRoZSBqb2luZWQgcmFuZ2UsXG4gICAgICAgIC8vIHNvIHdlIGdldCB0aGUgc3RyaW5nIGFuZCB3aWR0aCByZXByZXNlbnRpbmcgaXQgZGlyZWN0bHlcbiAgICAgICAgY2VsbCA9IG5ldyBKb2luZWRDZWxsRGF0YShcbiAgICAgICAgICB0aGlzLl93b3JrQ2VsbCxcbiAgICAgICAgICBsaW5lRGF0YS50cmFuc2xhdGVUb1N0cmluZyh0cnVlLCByYW5nZVswXSwgcmFuZ2VbMV0pLFxuICAgICAgICAgIHJhbmdlWzFdIC0gcmFuZ2VbMF1cbiAgICAgICAgKTtcblxuICAgICAgICAvLyBTa2lwIG92ZXIgdGhlIGNlbGxzIG9jY3VwaWVkIGJ5IHRoaXMgcmFuZ2UgaW4gdGhlIGxvb3BcbiAgICAgICAgbGFzdENoYXJYID0gcmFuZ2VbMV0gLSAxO1xuXG4gICAgICAgIC8vIFJlY2FsY3VsYXRlIHdpZHRoXG4gICAgICAgIHdpZHRoID0gY2VsbC5nZXRXaWR0aCgpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjaGFyRWxlbWVudCA9IHRoaXMuX2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgIGlmICh3aWR0aCA+IDEpIHtcbiAgICAgICAgY2hhckVsZW1lbnQuc3R5bGUud2lkdGggPSBgJHtjZWxsV2lkdGggKiB3aWR0aH1weGA7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0pvaW5lZCkge1xuICAgICAgICAvLyBMaWdhdHVyZXMgaW4gdGhlIERPTSByZW5kZXJlciBtdXN0IHVzZSBkaXNwbGF5IGlubGluZSwgYXMgdGhleSBtYXkgbm90IHNob3cgd2l0aFxuICAgICAgICAvLyBpbmxpbmUtYmxvY2sgaWYgdGhleSBhcmUgb3V0c2lkZSB0aGUgYm91bmRzIG9mIHRoZSBlbGVtZW50XG4gICAgICAgIGNoYXJFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lJztcblxuICAgICAgICAvLyBUaGUgRE9NIHJlbmRlcmVyIGNvbG9ycyB0aGUgYmFja2dyb3VuZCBvZiB0aGUgY3Vyc29yIGJ1dCBmb3IgbGlnYXR1cmVzIGFsbCBjZWxscyBhcmVcbiAgICAgICAgLy8gam9pbmVkLiBUaGUgd29ya2Fyb3VuZCBoZXJlIGlzIHRvIHNob3cgYSBjdXJzb3IgYXJvdW5kIHRoZSB3aG9sZSBsaWdhdHVyZSBzbyBpdCBzaG93cyB1cCxcbiAgICAgICAgLy8gdGhlIGN1cnNvciBsb29rcyB0aGUgc2FtZSB3aGVuIG9uIGFueSBjaGFyYWN0ZXIgb2YgdGhlIGxpZ2F0dXJlIHRob3VnaFxuICAgICAgICBpZiAoY3Vyc29yWCA+PSB4ICYmIGN1cnNvclggPD0gbGFzdENoYXJYKSB7XG4gICAgICAgICAgY3Vyc29yWCA9IHg7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLl9jb3JlU2VydmljZS5pc0N1cnNvckhpZGRlbiAmJiBpc0N1cnNvclJvdyAmJiB4ID09PSBjdXJzb3JYKSB7XG4gICAgICAgIGNoYXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoQ1VSU09SX0NMQVNTKTtcblxuICAgICAgICBpZiAoY3Vyc29yQmxpbmspIHtcbiAgICAgICAgICBjaGFyRWxlbWVudC5jbGFzc0xpc3QuYWRkKENVUlNPUl9CTElOS19DTEFTUyk7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGN1cnNvclN0eWxlKSB7XG4gICAgICAgICAgY2FzZSAnYmFyJzpcbiAgICAgICAgICAgIGNoYXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoQ1VSU09SX1NUWUxFX0JBUl9DTEFTUyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICd1bmRlcmxpbmUnOlxuICAgICAgICAgICAgY2hhckVsZW1lbnQuY2xhc3NMaXN0LmFkZChDVVJTT1JfU1RZTEVfVU5ERVJMSU5FX0NMQVNTKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjaGFyRWxlbWVudC5jbGFzc0xpc3QuYWRkKENVUlNPUl9TVFlMRV9CTE9DS19DTEFTUyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY2VsbC5pc0JvbGQoKSkge1xuICAgICAgICBjaGFyRWxlbWVudC5jbGFzc0xpc3QuYWRkKEJPTERfQ0xBU1MpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2VsbC5pc0l0YWxpYygpKSB7XG4gICAgICAgIGNoYXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoSVRBTElDX0NMQVNTKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNlbGwuaXNEaW0oKSkge1xuICAgICAgICBjaGFyRWxlbWVudC5jbGFzc0xpc3QuYWRkKERJTV9DTEFTUyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjZWxsLmlzVW5kZXJsaW5lKCkpIHtcbiAgICAgICAgY2hhckVsZW1lbnQuY2xhc3NMaXN0LmFkZChVTkRFUkxJTkVfQ0xBU1MpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2VsbC5pc0ludmlzaWJsZSgpKSB7XG4gICAgICAgIGNoYXJFbGVtZW50LnRleHRDb250ZW50ID0gV0hJVEVTUEFDRV9DRUxMX0NIQVI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGFyRWxlbWVudC50ZXh0Q29udGVudCA9IGNlbGwuZ2V0Q2hhcnMoKSB8fCBXSElURVNQQUNFX0NFTExfQ0hBUjtcbiAgICAgIH1cblxuICAgICAgaWYgKGNlbGwuaXNTdHJpa2V0aHJvdWdoKCkpIHtcbiAgICAgICAgY2hhckVsZW1lbnQuY2xhc3NMaXN0LmFkZChTVFJJS0VUSFJPVUdIX0NMQVNTKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGZnID0gY2VsbC5nZXRGZ0NvbG9yKCk7XG4gICAgICBsZXQgZmdDb2xvck1vZGUgPSBjZWxsLmdldEZnQ29sb3JNb2RlKCk7XG4gICAgICBsZXQgYmcgPSBjZWxsLmdldEJnQ29sb3IoKTtcbiAgICAgIGxldCBiZ0NvbG9yTW9kZSA9IGNlbGwuZ2V0QmdDb2xvck1vZGUoKTtcbiAgICAgIGNvbnN0IGlzSW52ZXJzZSA9ICEhY2VsbC5pc0ludmVyc2UoKTtcbiAgICAgIGlmIChpc0ludmVyc2UpIHtcbiAgICAgICAgY29uc3QgdGVtcCA9IGZnO1xuICAgICAgICBmZyA9IGJnO1xuICAgICAgICBiZyA9IHRlbXA7XG4gICAgICAgIGNvbnN0IHRlbXAyID0gZmdDb2xvck1vZGU7XG4gICAgICAgIGZnQ29sb3JNb2RlID0gYmdDb2xvck1vZGU7XG4gICAgICAgIGJnQ29sb3JNb2RlID0gdGVtcDI7XG4gICAgICB9XG5cbiAgICAgIC8vIEZvcmVncm91bmRcbiAgICAgIHN3aXRjaCAoZmdDb2xvck1vZGUpIHtcbiAgICAgICAgY2FzZSBBdHRyaWJ1dGVzLkNNX1AxNjpcbiAgICAgICAgY2FzZSBBdHRyaWJ1dGVzLkNNX1AyNTY6XG4gICAgICAgICAgaWYgKGNlbGwuaXNCb2xkKCkgJiYgZmcgPCA4ICYmIHRoaXMuX29wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMuZHJhd0JvbGRUZXh0SW5CcmlnaHRDb2xvcnMpIHtcbiAgICAgICAgICAgIGZnICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghdGhpcy5fYXBwbHlNaW5pbXVtQ29udHJhc3QoY2hhckVsZW1lbnQsIHRoaXMuX2NvbG9ycy5iYWNrZ3JvdW5kLCB0aGlzLl9jb2xvcnMuYW5zaVtmZ10pKSB7XG4gICAgICAgICAgICBjaGFyRWxlbWVudC5jbGFzc0xpc3QuYWRkKGB4dGVybS1mZy0ke2ZnfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBdHRyaWJ1dGVzLkNNX1JHQjpcbiAgICAgICAgICBjb25zdCBjb2xvciA9IHJnYmEudG9Db2xvcihcbiAgICAgICAgICAgIChmZyA+PiAxNikgJiAweEZGLFxuICAgICAgICAgICAgKGZnID4+ICA4KSAmIDB4RkYsXG4gICAgICAgICAgICAoZmcgICAgICApICYgMHhGRlxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKCF0aGlzLl9hcHBseU1pbmltdW1Db250cmFzdChjaGFyRWxlbWVudCwgdGhpcy5fY29sb3JzLmJhY2tncm91bmQsIGNvbG9yKSkge1xuICAgICAgICAgICAgdGhpcy5fYWRkU3R5bGUoY2hhckVsZW1lbnQsIGBjb2xvcjojJHtwYWRTdGFydChmZy50b1N0cmluZygxNiksICcwJywgNil9YCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEF0dHJpYnV0ZXMuQ01fREVGQVVMVDpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoIXRoaXMuX2FwcGx5TWluaW11bUNvbnRyYXN0KGNoYXJFbGVtZW50LCB0aGlzLl9jb2xvcnMuYmFja2dyb3VuZCwgdGhpcy5fY29sb3JzLmZvcmVncm91bmQpKSB7XG4gICAgICAgICAgICBpZiAoaXNJbnZlcnNlKSB7XG4gICAgICAgICAgICAgIGNoYXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoYHh0ZXJtLWZnLSR7SU5WRVJURURfREVGQVVMVF9DT0xPUn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEJhY2tncm91bmRcbiAgICAgIHN3aXRjaCAoYmdDb2xvck1vZGUpIHtcbiAgICAgICAgY2FzZSBBdHRyaWJ1dGVzLkNNX1AxNjpcbiAgICAgICAgY2FzZSBBdHRyaWJ1dGVzLkNNX1AyNTY6XG4gICAgICAgICAgY2hhckVsZW1lbnQuY2xhc3NMaXN0LmFkZChgeHRlcm0tYmctJHtiZ31gKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBdHRyaWJ1dGVzLkNNX1JHQjpcbiAgICAgICAgICB0aGlzLl9hZGRTdHlsZShjaGFyRWxlbWVudCwgYGJhY2tncm91bmQtY29sb3I6IyR7cGFkU3RhcnQoYmcudG9TdHJpbmcoMTYpLCAnMCcsIDYpfWApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEF0dHJpYnV0ZXMuQ01fREVGQVVMVDpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoaXNJbnZlcnNlKSB7XG4gICAgICAgICAgICBjaGFyRWxlbWVudC5jbGFzc0xpc3QuYWRkKGB4dGVybS1iZy0ke0lOVkVSVEVEX0RFRkFVTFRfQ09MT1J9YCk7XG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChjaGFyRWxlbWVudCk7XG5cbiAgICAgIHggPSBsYXN0Q2hhclg7XG4gICAgfVxuICAgIHJldHVybiBmcmFnbWVudDtcbiAgfVxuXG4gIHByaXZhdGUgX2FwcGx5TWluaW11bUNvbnRyYXN0KGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBiZzogSUNvbG9yLCBmZzogSUNvbG9yKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuX29wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMubWluaW11bUNvbnRyYXN0UmF0aW8gPT09IDEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBUcnkgZ2V0IGZyb20gY2FjaGUgZmlyc3RcbiAgICBsZXQgYWRqdXN0ZWRDb2xvciA9IHRoaXMuX2NvbG9ycy5jb250cmFzdENhY2hlLmdldENvbG9yKHRoaXMuX3dvcmtDZWxsLmJnLCB0aGlzLl93b3JrQ2VsbC5mZyk7XG5cbiAgICAvLyBDYWxjdWxhdGUgYW5kIHN0b3JlIGluIGNhY2hlXG4gICAgaWYgKGFkanVzdGVkQ29sb3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgYWRqdXN0ZWRDb2xvciA9IGNvbG9yLmVuc3VyZUNvbnRyYXN0UmF0aW8oYmcsIGZnLCB0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLm1pbmltdW1Db250cmFzdFJhdGlvKTtcbiAgICAgIHRoaXMuX2NvbG9ycy5jb250cmFzdENhY2hlLnNldENvbG9yKHRoaXMuX3dvcmtDZWxsLmJnLCB0aGlzLl93b3JrQ2VsbC5mZywgYWRqdXN0ZWRDb2xvciA/PyBudWxsKTtcbiAgICB9XG5cbiAgICBpZiAoYWRqdXN0ZWRDb2xvcikge1xuICAgICAgdGhpcy5fYWRkU3R5bGUoZWxlbWVudCwgYGNvbG9yOiR7YWRqdXN0ZWRDb2xvci5jc3N9YCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIF9hZGRTdHlsZShlbGVtZW50OiBIVE1MRWxlbWVudCwgc3R5bGU6IHN0cmluZyk6IHZvaWQge1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdzdHlsZScsIGAke2VsZW1lbnQuZ2V0QXR0cmlidXRlKCdzdHlsZScpIHx8ICcnfSR7c3R5bGV9O2ApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhZFN0YXJ0KHRleHQ6IHN0cmluZywgcGFkQ2hhcjogc3RyaW5nLCBsZW5ndGg6IG51bWJlcik6IHN0cmluZyB7XG4gIHdoaWxlICh0ZXh0Lmxlbmd0aCA8IGxlbmd0aCkge1xuICAgIHRleHQgPSBwYWRDaGFyICsgdGV4dDtcbiAgfVxuICByZXR1cm4gdGV4dDtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSUJ1ZmZlclNlcnZpY2UgfSBmcm9tICdjb21tb24vc2VydmljZXMvU2VydmljZXMnO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBzZWxlY3Rpb24gd2l0aGluIHRoZSBidWZmZXIuIFRoaXMgbW9kZWwgb25seSBjYXJlcyBhYm91dCBjb2x1bW5cbiAqIGFuZCByb3cgY29vcmRpbmF0ZXMsIG5vdCB3aWRlIGNoYXJhY3RlcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBTZWxlY3Rpb25Nb2RlbCB7XG4gIC8qKlxuICAgKiBXaGV0aGVyIHNlbGVjdCBhbGwgaXMgY3VycmVudGx5IGFjdGl2ZS5cbiAgICovXG4gIHB1YmxpYyBpc1NlbGVjdEFsbEFjdGl2ZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBUaGUgbWluaW1hbCBsZW5ndGggb2YgdGhlIHNlbGVjdGlvbiBmcm9tIHRoZSBzdGFydCBwb3NpdGlvbi4gV2hlbiBkb3VibGVcbiAgICogY2xpY2tpbmcgb24gYSB3b3JkLCB0aGUgd29yZCB3aWxsIGJlIHNlbGVjdGVkIHdoaWNoIG1ha2VzIHRoZSBzZWxlY3Rpb25cbiAgICogc3RhcnQgYXQgdGhlIHN0YXJ0IG9mIHRoZSB3b3JkIGFuZCBtYWtlcyB0aGlzIHZhcmlhYmxlIHRoZSBsZW5ndGguXG4gICAqL1xuICBwdWJsaWMgc2VsZWN0aW9uU3RhcnRMZW5ndGg6IG51bWJlciA9IDA7XG5cbiAgLyoqXG4gICAqIFRoZSBbeCwgeV0gcG9zaXRpb24gdGhlIHNlbGVjdGlvbiBzdGFydHMgYXQuXG4gICAqL1xuICBwdWJsaWMgc2VsZWN0aW9uU3RhcnQ6IFtudW1iZXIsIG51bWJlcl0gfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFRoZSBbeCwgeV0gcG9zaXRpb24gdGhlIHNlbGVjdGlvbiBlbmRzIGF0LlxuICAgKi9cbiAgcHVibGljIHNlbGVjdGlvbkVuZDogW251bWJlciwgbnVtYmVyXSB8IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF9idWZmZXJTZXJ2aWNlOiBJQnVmZmVyU2VydmljZVxuICApIHtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhcnMgdGhlIGN1cnJlbnQgc2VsZWN0aW9uLlxuICAgKi9cbiAgcHVibGljIGNsZWFyU2VsZWN0aW9uKCk6IHZvaWQge1xuICAgIHRoaXMuc2VsZWN0aW9uU3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zZWxlY3Rpb25FbmQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5pc1NlbGVjdEFsbEFjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMuc2VsZWN0aW9uU3RhcnRMZW5ndGggPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBmaW5hbCBzZWxlY3Rpb24gc3RhcnQsIHRha2luZyBpbnRvIGNvbnNpZGVyYXRpb24gc2VsZWN0IGFsbC5cbiAgICovXG4gIHB1YmxpYyBnZXQgZmluYWxTZWxlY3Rpb25TdGFydCgpOiBbbnVtYmVyLCBudW1iZXJdIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAodGhpcy5pc1NlbGVjdEFsbEFjdGl2ZSkge1xuICAgICAgcmV0dXJuIFswLCAwXTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc2VsZWN0aW9uRW5kIHx8ICF0aGlzLnNlbGVjdGlvblN0YXJ0KSB7XG4gICAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb25TdGFydDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5hcmVTZWxlY3Rpb25WYWx1ZXNSZXZlcnNlZCgpID8gdGhpcy5zZWxlY3Rpb25FbmQgOiB0aGlzLnNlbGVjdGlvblN0YXJ0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBmaW5hbCBzZWxlY3Rpb24gZW5kLCB0YWtpbmcgaW50byBjb25zaWRlcmF0aW9uIHNlbGVjdCBhbGwsIGRvdWJsZSBjbGlja1xuICAgKiB3b3JkIHNlbGVjdGlvbiBhbmQgdHJpcGxlIGNsaWNrIGxpbmUgc2VsZWN0aW9uLlxuICAgKi9cbiAgcHVibGljIGdldCBmaW5hbFNlbGVjdGlvbkVuZCgpOiBbbnVtYmVyLCBudW1iZXJdIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAodGhpcy5pc1NlbGVjdEFsbEFjdGl2ZSkge1xuICAgICAgcmV0dXJuIFt0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHMsIHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLnliYXNlICsgdGhpcy5fYnVmZmVyU2VydmljZS5yb3dzIC0gMV07XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnNlbGVjdGlvblN0YXJ0KSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIFVzZSB0aGUgc2VsZWN0aW9uIHN0YXJ0ICsgbGVuZ3RoIGlmIHRoZSBlbmQgZG9lc24ndCBleGlzdCBvciB0aGV5J3JlIHJldmVyc2VkXG4gICAgaWYgKCF0aGlzLnNlbGVjdGlvbkVuZCB8fCB0aGlzLmFyZVNlbGVjdGlvblZhbHVlc1JldmVyc2VkKCkpIHtcbiAgICAgIGNvbnN0IHN0YXJ0UGx1c0xlbmd0aCA9IHRoaXMuc2VsZWN0aW9uU3RhcnRbMF0gKyB0aGlzLnNlbGVjdGlvblN0YXJ0TGVuZ3RoO1xuICAgICAgaWYgKHN0YXJ0UGx1c0xlbmd0aCA+IHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scykge1xuICAgICAgICAvLyBFbnN1cmUgdGhlIHRyYWlsaW5nIEVPTCBpc24ndCBpbmNsdWRlZCB3aGVuIHRoZSBzZWxlY3Rpb24gZW5kcyBvbiB0aGUgcmlnaHQgZWRnZVxuICAgICAgICBpZiAoc3RhcnRQbHVzTGVuZ3RoICUgdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIFt0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHMsIHRoaXMuc2VsZWN0aW9uU3RhcnRbMV0gKyBNYXRoLmZsb29yKHN0YXJ0UGx1c0xlbmd0aCAvIHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scykgLSAxXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3N0YXJ0UGx1c0xlbmd0aCAlIHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scywgdGhpcy5zZWxlY3Rpb25TdGFydFsxXSArIE1hdGguZmxvb3Ioc3RhcnRQbHVzTGVuZ3RoIC8gdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gW3N0YXJ0UGx1c0xlbmd0aCwgdGhpcy5zZWxlY3Rpb25TdGFydFsxXV07XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIHRoZSB0aGUgd29yZC9saW5lIGlzIHNlbGVjdGVkIGFmdGVyIGEgZG91YmxlL3RyaXBsZSBjbGlja1xuICAgIGlmICh0aGlzLnNlbGVjdGlvblN0YXJ0TGVuZ3RoKSB7XG4gICAgICAvLyBTZWxlY3QgdGhlIGxhcmdlciBvZiB0aGUgdHdvIHdoZW4gc3RhcnQgYW5kIGVuZCBhcmUgb24gdGhlIHNhbWUgbGluZVxuICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uRW5kWzFdID09PSB0aGlzLnNlbGVjdGlvblN0YXJ0WzFdKSB7XG4gICAgICAgIHJldHVybiBbTWF0aC5tYXgodGhpcy5zZWxlY3Rpb25TdGFydFswXSArIHRoaXMuc2VsZWN0aW9uU3RhcnRMZW5ndGgsIHRoaXMuc2VsZWN0aW9uRW5kWzBdKSwgdGhpcy5zZWxlY3Rpb25FbmRbMV1dO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb25FbmQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBzZWxlY3Rpb24gc3RhcnQgYW5kIGVuZCBhcmUgcmV2ZXJzZWQuXG4gICAqL1xuICBwdWJsaWMgYXJlU2VsZWN0aW9uVmFsdWVzUmV2ZXJzZWQoKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLnNlbGVjdGlvblN0YXJ0O1xuICAgIGNvbnN0IGVuZCA9IHRoaXMuc2VsZWN0aW9uRW5kO1xuICAgIGlmICghc3RhcnQgfHwgIWVuZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gc3RhcnRbMV0gPiBlbmRbMV0gfHwgKHN0YXJ0WzFdID09PSBlbmRbMV0gJiYgc3RhcnRbMF0gPiBlbmRbMF0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSB0aGUgYnVmZmVyIGJlaW5nIHRyaW1tZWQsIGFkanVzdCB0aGUgc2VsZWN0aW9uIHBvc2l0aW9uLlxuICAgKiBAcGFyYW0gYW1vdW50IFRoZSBhbW91bnQgdGhlIGJ1ZmZlciBpcyBiZWluZyB0cmltbWVkLlxuICAgKiBAcmV0dXJuIFdoZXRoZXIgYSByZWZyZXNoIGlzIG5lY2Vzc2FyeS5cbiAgICovXG4gIHB1YmxpYyBvblRyaW0oYW1vdW50OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAvLyBBZGp1c3QgdGhlIHNlbGVjdGlvbiBwb3NpdGlvbiBiYXNlZCBvbiB0aGUgdHJpbW1lZCBhbW91bnQuXG4gICAgaWYgKHRoaXMuc2VsZWN0aW9uU3RhcnQpIHtcbiAgICAgIHRoaXMuc2VsZWN0aW9uU3RhcnRbMV0gLT0gYW1vdW50O1xuICAgIH1cbiAgICBpZiAodGhpcy5zZWxlY3Rpb25FbmQpIHtcbiAgICAgIHRoaXMuc2VsZWN0aW9uRW5kWzFdIC09IGFtb3VudDtcbiAgICB9XG5cbiAgICAvLyBUaGUgc2VsZWN0aW9uIGhhcyBtb3ZlZCBvZmYgdGhlIGJ1ZmZlciwgY2xlYXIgaXQuXG4gICAgaWYgKHRoaXMuc2VsZWN0aW9uRW5kICYmIHRoaXMuc2VsZWN0aW9uRW5kWzFdIDwgMCkge1xuICAgICAgdGhpcy5jbGVhclNlbGVjdGlvbigpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIHNlbGVjdGlvbiBzdGFydCBpcyB0cmltbWVkLCBlbnN1cmUgdGhlIHN0YXJ0IGNvbHVtbiBpcyAwLlxuICAgIGlmICh0aGlzLnNlbGVjdGlvblN0YXJ0ICYmIHRoaXMuc2VsZWN0aW9uU3RhcnRbMV0gPCAwKSB7XG4gICAgICB0aGlzLnNlbGVjdGlvblN0YXJ0WzFdID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNiBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElPcHRpb25zU2VydmljZSB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5pbXBvcnQgeyBJRXZlbnQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ2NvbW1vbi9FdmVudEVtaXR0ZXInO1xuaW1wb3J0IHsgSUNoYXJTaXplU2VydmljZSB9IGZyb20gJ2Jyb3dzZXIvc2VydmljZXMvU2VydmljZXMnO1xuXG5leHBvcnQgY2xhc3MgQ2hhclNpemVTZXJ2aWNlIGltcGxlbWVudHMgSUNoYXJTaXplU2VydmljZSB7XG4gIHB1YmxpYyBzZXJ2aWNlQnJhbmQ6IHVuZGVmaW5lZDtcblxuICBwdWJsaWMgd2lkdGg6IG51bWJlciA9IDA7XG4gIHB1YmxpYyBoZWlnaHQ6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgX21lYXN1cmVTdHJhdGVneTogSU1lYXN1cmVTdHJhdGVneTtcblxuICBwdWJsaWMgZ2V0IGhhc1ZhbGlkU2l6ZSgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMud2lkdGggPiAwICYmIHRoaXMuaGVpZ2h0ID4gMDsgfVxuXG4gIHByaXZhdGUgX29uQ2hhclNpemVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIHB1YmxpYyBnZXQgb25DaGFyU2l6ZUNoYW5nZSgpOiBJRXZlbnQ8dm9pZD4geyByZXR1cm4gdGhpcy5fb25DaGFyU2l6ZUNoYW5nZS5ldmVudDsgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGRvY3VtZW50OiBEb2N1bWVudCxcbiAgICBwYXJlbnRFbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICBASU9wdGlvbnNTZXJ2aWNlIHByaXZhdGUgcmVhZG9ubHkgX29wdGlvbnNTZXJ2aWNlOiBJT3B0aW9uc1NlcnZpY2VcbiAgKSB7XG4gICAgdGhpcy5fbWVhc3VyZVN0cmF0ZWd5ID0gbmV3IERvbU1lYXN1cmVTdHJhdGVneShkb2N1bWVudCwgcGFyZW50RWxlbWVudCwgdGhpcy5fb3B0aW9uc1NlcnZpY2UpO1xuICB9XG5cbiAgcHVibGljIG1lYXN1cmUoKTogdm9pZCB7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fbWVhc3VyZVN0cmF0ZWd5Lm1lYXN1cmUoKTtcbiAgICBpZiAocmVzdWx0LndpZHRoICE9PSB0aGlzLndpZHRoIHx8IHJlc3VsdC5oZWlnaHQgIT09IHRoaXMuaGVpZ2h0KSB7XG4gICAgICB0aGlzLndpZHRoID0gcmVzdWx0LndpZHRoO1xuICAgICAgdGhpcy5oZWlnaHQgPSByZXN1bHQuaGVpZ2h0O1xuICAgICAgdGhpcy5fb25DaGFyU2l6ZUNoYW5nZS5maXJlKCk7XG4gICAgfVxuICB9XG59XG5cbmludGVyZmFjZSBJTWVhc3VyZVN0cmF0ZWd5IHtcbiAgbWVhc3VyZSgpOiBJUmVhZG9ubHlNZWFzdXJlUmVzdWx0O1xufVxuXG5pbnRlcmZhY2UgSVJlYWRvbmx5TWVhc3VyZVJlc3VsdCB7XG4gIHJlYWRvbmx5IHdpZHRoOiBudW1iZXI7XG4gIHJlYWRvbmx5IGhlaWdodDogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgSU1lYXN1cmVSZXN1bHQge1xuICB3aWR0aDogbnVtYmVyO1xuICBoZWlnaHQ6IG51bWJlcjtcbn1cblxuLy8gVE9ETzogRm9yIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2Ugc2hvdWxkIGFsc28gcHJvdmlkZSBhIENhbnZhc0NoYXJEaW1lbnNpb25zUHJvdmlkZXIgdGhhdCB1c2VzIGN0eC5tZWFzdXJlVGV4dFxuY2xhc3MgRG9tTWVhc3VyZVN0cmF0ZWd5IGltcGxlbWVudHMgSU1lYXN1cmVTdHJhdGVneSB7XG4gIHByaXZhdGUgX3Jlc3VsdDogSU1lYXN1cmVSZXN1bHQgPSB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAgfTtcbiAgcHJpdmF0ZSBfbWVhc3VyZUVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX2RvY3VtZW50OiBEb2N1bWVudCxcbiAgICBwcml2YXRlIF9wYXJlbnRFbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICBwcml2YXRlIF9vcHRpb25zU2VydmljZTogSU9wdGlvbnNTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuX21lYXN1cmVFbGVtZW50ID0gdGhpcy5fZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIHRoaXMuX21lYXN1cmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3h0ZXJtLWNoYXItbWVhc3VyZS1lbGVtZW50Jyk7XG4gICAgdGhpcy5fbWVhc3VyZUVsZW1lbnQudGV4dENvbnRlbnQgPSAnVyc7XG4gICAgdGhpcy5fbWVhc3VyZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgdGhpcy5fcGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9tZWFzdXJlRWxlbWVudCk7XG4gIH1cblxuICBwdWJsaWMgbWVhc3VyZSgpOiBJUmVhZG9ubHlNZWFzdXJlUmVzdWx0IHtcbiAgICB0aGlzLl9tZWFzdXJlRWxlbWVudC5zdHlsZS5mb250RmFtaWx5ID0gdGhpcy5fb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy5mb250RmFtaWx5O1xuICAgIHRoaXMuX21lYXN1cmVFbGVtZW50LnN0eWxlLmZvbnRTaXplID0gYCR7dGhpcy5fb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy5mb250U2l6ZX1weGA7XG5cbiAgICAvLyBOb3RlIHRoYXQgdGhpcyB0cmlnZ2VycyBhIHN5bmNocm9ub3VzIGxheW91dFxuICAgIGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5fbWVhc3VyZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAvLyBJZiB2YWx1ZXMgYXJlIDAgdGhlbiB0aGUgZWxlbWVudCBpcyBsaWtlbHkgY3VycmVudGx5IGRpc3BsYXk6bm9uZSwgaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGRcbiAgICAvLyByZXRhaW4gdGhlIHByZXZpb3VzIHZhbHVlLlxuICAgIGlmIChnZW9tZXRyeS53aWR0aCAhPT0gMCAmJiBnZW9tZXRyeS5oZWlnaHQgIT09IDApIHtcbiAgICAgIHRoaXMuX3Jlc3VsdC53aWR0aCA9IGdlb21ldHJ5LndpZHRoO1xuICAgICAgdGhpcy5fcmVzdWx0LmhlaWdodCA9IE1hdGguY2VpbChnZW9tZXRyeS5oZWlnaHQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yZXN1bHQ7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE4IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSUJ1ZmZlckxpbmUsIElDZWxsRGF0YSwgQ2hhckRhdGEgfSBmcm9tICdjb21tb24vVHlwZXMnO1xuaW1wb3J0IHsgSUNoYXJhY3RlckpvaW5lciB9IGZyb20gJ2Jyb3dzZXIvVHlwZXMnO1xuaW1wb3J0IHsgQXR0cmlidXRlRGF0YSB9IGZyb20gJ2NvbW1vbi9idWZmZXIvQXR0cmlidXRlRGF0YSc7XG5pbXBvcnQgeyBXSElURVNQQUNFX0NFTExfQ0hBUiwgQ29udGVudCB9IGZyb20gJ2NvbW1vbi9idWZmZXIvQ29uc3RhbnRzJztcbmltcG9ydCB7IENlbGxEYXRhIH0gZnJvbSAnY29tbW9uL2J1ZmZlci9DZWxsRGF0YSc7XG5pbXBvcnQgeyBJQnVmZmVyU2VydmljZSB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5pbXBvcnQgeyBJQ2hhcmFjdGVySm9pbmVyU2VydmljZSB9IGZyb20gJ2Jyb3dzZXIvc2VydmljZXMvU2VydmljZXMnO1xuXG5leHBvcnQgY2xhc3MgSm9pbmVkQ2VsbERhdGEgZXh0ZW5kcyBBdHRyaWJ1dGVEYXRhIGltcGxlbWVudHMgSUNlbGxEYXRhIHtcbiAgcHJpdmF0ZSBfd2lkdGg6IG51bWJlcjtcbiAgLy8gLmNvbnRlbnQgY2FycmllcyBubyBtZWFuaW5nIGZvciBqb2luZWQgQ2VsbERhdGEsIHNpbXBseSBudWxsaWZ5IGl0XG4gIC8vIHRodXMgd2UgaGF2ZSB0byBvdmVybG9hZCBhbGwgb3RoZXIgLmNvbnRlbnQgYWNjZXNzb3JzXG4gIHB1YmxpYyBjb250ZW50OiBudW1iZXIgPSAwO1xuICBwdWJsaWMgZmc6IG51bWJlcjtcbiAgcHVibGljIGJnOiBudW1iZXI7XG4gIHB1YmxpYyBjb21iaW5lZERhdGE6IHN0cmluZyA9ICcnO1xuXG4gIGNvbnN0cnVjdG9yKGZpcnN0Q2VsbDogSUNlbGxEYXRhLCBjaGFyczogc3RyaW5nLCB3aWR0aDogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmZnID0gZmlyc3RDZWxsLmZnO1xuICAgIHRoaXMuYmcgPSBmaXJzdENlbGwuYmc7XG4gICAgdGhpcy5jb21iaW5lZERhdGEgPSBjaGFycztcbiAgICB0aGlzLl93aWR0aCA9IHdpZHRoO1xuICB9XG5cbiAgcHVibGljIGlzQ29tYmluZWQoKTogbnVtYmVyIHtcbiAgICAvLyBhbHdheXMgbWFyayBqb2luZWQgY2VsbCBkYXRhIGFzIGNvbWJpbmVkXG4gICAgcmV0dXJuIENvbnRlbnQuSVNfQ09NQklORURfTUFTSztcbiAgfVxuXG4gIHB1YmxpYyBnZXRXaWR0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl93aWR0aDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDaGFycygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNvbWJpbmVkRGF0YTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDb2RlKCk6IG51bWJlciB7XG4gICAgLy8gY29kZSBhbHdheXMgZ2V0cyB0aGUgaGlnaGVzdCBwb3NzaWJsZSBmYWtlIGNvZGVwb2ludCAocmVhZCBhcyAtMSlcbiAgICAvLyB0aGlzIGlzIG5lZWRlZCBhcyBjb2RlIGlzIHVzZWQgYnkgY2FjaGVzIGFzIGlkZW50aWZpZXJcbiAgICByZXR1cm4gMHgxRkZGRkY7XG4gIH1cblxuICBwdWJsaWMgc2V0RnJvbUNoYXJEYXRhKHZhbHVlOiBDaGFyRGF0YSk6IHZvaWQge1xuICAgIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkJyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0QXNDaGFyRGF0YSgpOiBDaGFyRGF0YSB7XG4gICAgcmV0dXJuIFt0aGlzLmZnLCB0aGlzLmdldENoYXJzKCksIHRoaXMuZ2V0V2lkdGgoKSwgdGhpcy5nZXRDb2RlKCldO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDaGFyYWN0ZXJKb2luZXJTZXJ2aWNlIGltcGxlbWVudHMgSUNoYXJhY3RlckpvaW5lclNlcnZpY2Uge1xuICBwdWJsaWMgc2VydmljZUJyYW5kOiB1bmRlZmluZWQ7XG5cbiAgcHJpdmF0ZSBfY2hhcmFjdGVySm9pbmVyczogSUNoYXJhY3RlckpvaW5lcltdID0gW107XG4gIHByaXZhdGUgX25leHRDaGFyYWN0ZXJKb2luZXJJZDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfd29ya0NlbGw6IENlbGxEYXRhID0gbmV3IENlbGxEYXRhKCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQElCdWZmZXJTZXJ2aWNlIHByaXZhdGUgX2J1ZmZlclNlcnZpY2U6IElCdWZmZXJTZXJ2aWNlXG4gICkgeyB9XG5cbiAgcHVibGljIHJlZ2lzdGVyKGhhbmRsZXI6ICh0ZXh0OiBzdHJpbmcpID0+IFtudW1iZXIsIG51bWJlcl1bXSk6IG51bWJlciB7XG4gICAgY29uc3Qgam9pbmVyOiBJQ2hhcmFjdGVySm9pbmVyID0ge1xuICAgICAgaWQ6IHRoaXMuX25leHRDaGFyYWN0ZXJKb2luZXJJZCsrLFxuICAgICAgaGFuZGxlclxuICAgIH07XG5cbiAgICB0aGlzLl9jaGFyYWN0ZXJKb2luZXJzLnB1c2goam9pbmVyKTtcbiAgICByZXR1cm4gam9pbmVyLmlkO1xuICB9XG5cbiAgcHVibGljIGRlcmVnaXN0ZXIoam9pbmVySWQ6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY2hhcmFjdGVySm9pbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRoaXMuX2NoYXJhY3RlckpvaW5lcnNbaV0uaWQgPT09IGpvaW5lcklkKSB7XG4gICAgICAgIHRoaXMuX2NoYXJhY3RlckpvaW5lcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgZ2V0Sm9pbmVkQ2hhcmFjdGVycyhyb3c6IG51bWJlcik6IFtudW1iZXIsIG51bWJlcl1bXSB7XG4gICAgaWYgKHRoaXMuX2NoYXJhY3RlckpvaW5lcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgY29uc3QgbGluZSA9IHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLmxpbmVzLmdldChyb3cpO1xuICAgIGlmICghbGluZSB8fCBsaW5lLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGNvbnN0IHJhbmdlczogW251bWJlciwgbnVtYmVyXVtdID0gW107XG4gICAgY29uc3QgbGluZVN0ciA9IGxpbmUudHJhbnNsYXRlVG9TdHJpbmcodHJ1ZSk7XG5cbiAgICAvLyBCZWNhdXNlIHNvbWUgY2VsbHMgY2FuIGJlIHJlcHJlc2VudGVkIGJ5IG11bHRpcGxlIGphdmFzY3JpcHQgY2hhcmFjdGVycyxcbiAgICAvLyB3ZSB0cmFjayB0aGUgY2VsbCBhbmQgdGhlIHN0cmluZyBpbmRleGVzIHNlcGFyYXRlbHkuIFRoaXMgYWxsb3dzIHVzIHRvXG4gICAgLy8gdHJhbnNsYXRlIHRoZSBzdHJpbmcgcmFuZ2VzIHdlIGdldCBmcm9tIHRoZSBqb2luZXJzIGJhY2sgaW50byBjZWxsIHJhbmdlc1xuICAgIC8vIGZvciB1c2Ugd2hlbiByZW5kZXJpbmdcbiAgICBsZXQgcmFuZ2VTdGFydENvbHVtbiA9IDA7XG4gICAgbGV0IGN1cnJlbnRTdHJpbmdJbmRleCA9IDA7XG4gICAgbGV0IHJhbmdlU3RhcnRTdHJpbmdJbmRleCA9IDA7XG4gICAgbGV0IHJhbmdlQXR0ckZHID0gbGluZS5nZXRGZygwKTtcbiAgICBsZXQgcmFuZ2VBdHRyQkcgPSBsaW5lLmdldEJnKDApO1xuXG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCBsaW5lLmdldFRyaW1tZWRMZW5ndGgoKTsgeCsrKSB7XG4gICAgICBsaW5lLmxvYWRDZWxsKHgsIHRoaXMuX3dvcmtDZWxsKTtcblxuICAgICAgaWYgKHRoaXMuX3dvcmtDZWxsLmdldFdpZHRoKCkgPT09IDApIHtcbiAgICAgICAgLy8gSWYgdGhpcyBjaGFyYWN0ZXIgaXMgb2Ygd2lkdGggMCwgc2tpcCBpdC5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIEVuZCBvZiByYW5nZVxuICAgICAgaWYgKHRoaXMuX3dvcmtDZWxsLmZnICE9PSByYW5nZUF0dHJGRyB8fCB0aGlzLl93b3JrQ2VsbC5iZyAhPT0gcmFuZ2VBdHRyQkcpIHtcbiAgICAgICAgLy8gSWYgd2UgZW5kZWQgdXAgd2l0aCBhIHNlcXVlbmNlIG9mIG1vcmUgdGhhbiBvbmUgY2hhcmFjdGVyLFxuICAgICAgICAvLyBsb29rIGZvciByYW5nZXMgdG8gam9pbi5cbiAgICAgICAgaWYgKHggLSByYW5nZVN0YXJ0Q29sdW1uID4gMSkge1xuICAgICAgICAgIGNvbnN0IGpvaW5lZFJhbmdlcyA9IHRoaXMuX2dldEpvaW5lZFJhbmdlcyhcbiAgICAgICAgICAgIGxpbmVTdHIsXG4gICAgICAgICAgICByYW5nZVN0YXJ0U3RyaW5nSW5kZXgsXG4gICAgICAgICAgICBjdXJyZW50U3RyaW5nSW5kZXgsXG4gICAgICAgICAgICBsaW5lLFxuICAgICAgICAgICAgcmFuZ2VTdGFydENvbHVtblxuICAgICAgICAgICk7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBqb2luZWRSYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJhbmdlcy5wdXNoKGpvaW5lZFJhbmdlc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVzZXQgb3VyIG1hcmtlcnMgZm9yIGEgbmV3IHJhbmdlLlxuICAgICAgICByYW5nZVN0YXJ0Q29sdW1uID0geDtcbiAgICAgICAgcmFuZ2VTdGFydFN0cmluZ0luZGV4ID0gY3VycmVudFN0cmluZ0luZGV4O1xuICAgICAgICByYW5nZUF0dHJGRyA9IHRoaXMuX3dvcmtDZWxsLmZnO1xuICAgICAgICByYW5nZUF0dHJCRyA9IHRoaXMuX3dvcmtDZWxsLmJnO1xuICAgICAgfVxuXG4gICAgICBjdXJyZW50U3RyaW5nSW5kZXggKz0gdGhpcy5fd29ya0NlbGwuZ2V0Q2hhcnMoKS5sZW5ndGggfHwgV0hJVEVTUEFDRV9DRUxMX0NIQVIubGVuZ3RoO1xuICAgIH1cblxuICAgIC8vIFByb2Nlc3MgYW55IHRyYWlsaW5nIHJhbmdlcy5cbiAgICBpZiAodGhpcy5fYnVmZmVyU2VydmljZS5jb2xzIC0gcmFuZ2VTdGFydENvbHVtbiA+IDEpIHtcbiAgICAgIGNvbnN0IGpvaW5lZFJhbmdlcyA9IHRoaXMuX2dldEpvaW5lZFJhbmdlcyhcbiAgICAgICAgbGluZVN0cixcbiAgICAgICAgcmFuZ2VTdGFydFN0cmluZ0luZGV4LFxuICAgICAgICBjdXJyZW50U3RyaW5nSW5kZXgsXG4gICAgICAgIGxpbmUsXG4gICAgICAgIHJhbmdlU3RhcnRDb2x1bW5cbiAgICAgICk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGpvaW5lZFJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICByYW5nZXMucHVzaChqb2luZWRSYW5nZXNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByYW5nZXM7XG4gIH1cblxuICAvKipcbiAgICogR2l2ZW4gYSBzZWdtZW50IG9mIGEgbGluZSBvZiB0ZXh0LCBmaW5kIGFsbCByYW5nZXMgb2YgdGV4dCB0aGF0IHNob3VsZCBiZVxuICAgKiBqb2luZWQgaW4gYSBzaW5nbGUgcmVuZGVyaW5nIHVuaXQuIFJhbmdlcyBhcmUgaW50ZXJuYWxseSBjb252ZXJ0ZWQgdG9cbiAgICogY29sdW1uIHJhbmdlcywgcmF0aGVyIHRoYW4gc3RyaW5nIHJhbmdlcy5cbiAgICogQHBhcmFtIGxpbmUgU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBmdWxsIGxpbmUgb2YgdGV4dFxuICAgKiBAcGFyYW0gc3RhcnRJbmRleCBTdGFydCBwb3NpdGlvbiBvZiB0aGUgcmFuZ2UgdG8gc2VhcmNoIGluIHRoZSBzdHJpbmcgKGluY2x1c2l2ZSlcbiAgICogQHBhcmFtIGVuZEluZGV4IEVuZCBwb3NpdGlvbiBvZiB0aGUgcmFuZ2UgdG8gc2VhcmNoIGluIHRoZSBzdHJpbmcgKGV4Y2x1c2l2ZSlcbiAgICovXG4gIHByaXZhdGUgX2dldEpvaW5lZFJhbmdlcyhsaW5lOiBzdHJpbmcsIHN0YXJ0SW5kZXg6IG51bWJlciwgZW5kSW5kZXg6IG51bWJlciwgbGluZURhdGE6IElCdWZmZXJMaW5lLCBzdGFydENvbDogbnVtYmVyKTogW251bWJlciwgbnVtYmVyXVtdIHtcbiAgICBjb25zdCB0ZXh0ID0gbGluZS5zdWJzdHJpbmcoc3RhcnRJbmRleCwgZW5kSW5kZXgpO1xuICAgIC8vIEF0IHRoaXMgcG9pbnQgd2UgYWxyZWFkeSBrbm93IHRoYXQgdGhlcmUgaXMgYXQgbGVhc3Qgb25lIGpvaW5lciBzb1xuICAgIC8vIHdlIGNhbiBqdXN0IHB1bGwgaXRzIHZhbHVlIGFuZCBhc3NpZ24gaXQgZGlyZWN0bHkgcmF0aGVyIHRoYW5cbiAgICAvLyBtZXJnaW5nIGl0IGludG8gYW4gZW1wdHkgYXJyYXksIHdoaWNoIGluY3VycyB1bm5lY2Vzc2FyeSB3cml0ZXMuXG4gICAgbGV0IGFsbEpvaW5lZFJhbmdlczogW251bWJlciwgbnVtYmVyXVtdID0gW107XG4gICAgdHJ5IHtcbiAgICAgIGFsbEpvaW5lZFJhbmdlcyA9IHRoaXMuX2NoYXJhY3RlckpvaW5lcnNbMF0uaGFuZGxlcih0ZXh0KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5fY2hhcmFjdGVySm9pbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gV2UgbWVyZ2UgYW55IG92ZXJsYXBwaW5nIHJhbmdlcyBhY3Jvc3MgdGhlIGRpZmZlcmVudCBqb2luZXJzXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBqb2luZXJSYW5nZXMgPSB0aGlzLl9jaGFyYWN0ZXJKb2luZXJzW2ldLmhhbmRsZXIodGV4dCk7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgam9pbmVyUmFuZ2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgQ2hhcmFjdGVySm9pbmVyU2VydmljZS5fbWVyZ2VSYW5nZXMoYWxsSm9pbmVkUmFuZ2VzLCBqb2luZXJSYW5nZXNbal0pO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fc3RyaW5nUmFuZ2VzVG9DZWxsUmFuZ2VzKGFsbEpvaW5lZFJhbmdlcywgbGluZURhdGEsIHN0YXJ0Q29sKTtcbiAgICByZXR1cm4gYWxsSm9pbmVkUmFuZ2VzO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vZGlmaWVzIHRoZSBwcm92aWRlZCByYW5nZXMgaW4tcGxhY2UgdG8gYWRqdXN0IGZvciB2YXJpYXRpb25zIGJldHdlZW5cbiAgICogc3RyaW5nIGxlbmd0aCBhbmQgY2VsbCB3aWR0aCBzbyB0aGF0IHRoZSByYW5nZSByZXByZXNlbnRzIGEgY2VsbCByYW5nZSxcbiAgICogcmF0aGVyIHRoYW4gdGhlIHN0cmluZyByYW5nZSB0aGUgam9pbmVyIHByb3ZpZGVzLlxuICAgKiBAcGFyYW0gcmFuZ2VzIFN0cmluZyByYW5nZXMgY29udGFpbmluZyBzdGFydCAoaW5jbHVzaXZlKSBhbmQgZW5kIChleGNsdXNpdmUpIGluZGV4XG4gICAqIEBwYXJhbSBsaW5lIENlbGwgZGF0YSBmb3IgdGhlIHJlbGV2YW50IGxpbmUgaW4gdGhlIHRlcm1pbmFsXG4gICAqIEBwYXJhbSBzdGFydENvbCBPZmZzZXQgd2l0aGluIHRoZSBsaW5lIHRvIHN0YXJ0IGZyb21cbiAgICovXG4gIHByaXZhdGUgX3N0cmluZ1Jhbmdlc1RvQ2VsbFJhbmdlcyhyYW5nZXM6IFtudW1iZXIsIG51bWJlcl1bXSwgbGluZTogSUJ1ZmZlckxpbmUsIHN0YXJ0Q29sOiBudW1iZXIpOiB2b2lkIHtcbiAgICBsZXQgY3VycmVudFJhbmdlSW5kZXggPSAwO1xuICAgIGxldCBjdXJyZW50UmFuZ2VTdGFydGVkID0gZmFsc2U7XG4gICAgbGV0IGN1cnJlbnRTdHJpbmdJbmRleCA9IDA7XG4gICAgbGV0IGN1cnJlbnRSYW5nZSA9IHJhbmdlc1tjdXJyZW50UmFuZ2VJbmRleF07XG5cbiAgICAvLyBJZiB3ZSBnb3QgdGhyb3VnaCBhbGwgb2YgdGhlIHJhbmdlcywgc3RvcCBzZWFyY2hpbmdcbiAgICBpZiAoIWN1cnJlbnRSYW5nZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAobGV0IHggPSBzdGFydENvbDsgeCA8IHRoaXMuX2J1ZmZlclNlcnZpY2UuY29sczsgeCsrKSB7XG4gICAgICBjb25zdCB3aWR0aCA9IGxpbmUuZ2V0V2lkdGgoeCk7XG4gICAgICBjb25zdCBsZW5ndGggPSBsaW5lLmdldFN0cmluZyh4KS5sZW5ndGggfHwgV0hJVEVTUEFDRV9DRUxMX0NIQVIubGVuZ3RoO1xuXG4gICAgICAvLyBXZSBza2lwIHplcm8td2lkdGggY2hhcmFjdGVycyB3aGVuIGNyZWF0aW5nIHRoZSBzdHJpbmcgdG8gam9pbiB0aGUgdGV4dFxuICAgICAgLy8gc28gd2UgZG8gdGhlIHNhbWUgaGVyZVxuICAgICAgaWYgKHdpZHRoID09PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBBZGp1c3QgdGhlIHN0YXJ0IG9mIHRoZSByYW5nZVxuICAgICAgaWYgKCFjdXJyZW50UmFuZ2VTdGFydGVkICYmIGN1cnJlbnRSYW5nZVswXSA8PSBjdXJyZW50U3RyaW5nSW5kZXgpIHtcbiAgICAgICAgY3VycmVudFJhbmdlWzBdID0geDtcbiAgICAgICAgY3VycmVudFJhbmdlU3RhcnRlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkanVzdCB0aGUgZW5kIG9mIHRoZSByYW5nZVxuICAgICAgaWYgKGN1cnJlbnRSYW5nZVsxXSA8PSBjdXJyZW50U3RyaW5nSW5kZXgpIHtcbiAgICAgICAgY3VycmVudFJhbmdlWzFdID0geDtcblxuICAgICAgICAvLyBXZSdyZSBmaW5pc2hlZCB3aXRoIHRoaXMgcmFuZ2UsIHNvIHdlIG1vdmUgdG8gdGhlIG5leHQgb25lXG4gICAgICAgIGN1cnJlbnRSYW5nZSA9IHJhbmdlc1srK2N1cnJlbnRSYW5nZUluZGV4XTtcblxuICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbm8gbW9yZSByYW5nZXMgbGVmdCwgc3RvcCBzZWFyY2hpbmdcbiAgICAgICAgaWYgKCFjdXJyZW50UmFuZ2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJhbmdlcyBjYW4gYmUgb24gYWRqYWNlbnQgY2hhcmFjdGVycy4gQmVjYXVzZSB0aGUgZW5kIGluZGV4IG9mIHRoZVxuICAgICAgICAvLyByYW5nZXMgYXJlIGV4Y2x1c2l2ZSwgdGhpcyBtZWFucyB0aGF0IHRoZSBpbmRleCBmb3IgdGhlIHN0YXJ0IG9mIGFcbiAgICAgICAgLy8gcmFuZ2UgY2FuIGJlIHRoZSBzYW1lIGFzIHRoZSBlbmQgaW5kZXggb2YgdGhlIHByZXZpb3VzIHJhbmdlLiBUb1xuICAgICAgICAvLyBhY2NvdW50IGZvciB0aGUgc3RhcnQgb2YgdGhlIG5leHQgcmFuZ2UsIHdlIGNoZWNrIGhlcmUganVzdCBpbiBjYXNlLlxuICAgICAgICBpZiAoY3VycmVudFJhbmdlWzBdIDw9IGN1cnJlbnRTdHJpbmdJbmRleCkge1xuICAgICAgICAgIGN1cnJlbnRSYW5nZVswXSA9IHg7XG4gICAgICAgICAgY3VycmVudFJhbmdlU3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VycmVudFJhbmdlU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEFkanVzdCB0aGUgc3RyaW5nIGluZGV4IGJhc2VkIG9uIHRoZSBjaGFyYWN0ZXIgbGVuZ3RoIHRvIGxpbmUgdXAgd2l0aFxuICAgICAgLy8gdGhlIGNvbHVtbiBhZGp1c3RtZW50XG4gICAgICBjdXJyZW50U3RyaW5nSW5kZXggKz0gbGVuZ3RoO1xuICAgIH1cblxuICAgIC8vIElmIHRoZXJlIGlzIHN0aWxsIGEgcmFuZ2UgbGVmdCBhdCB0aGUgZW5kLCBpdCBtdXN0IGV4dGVuZCBhbGwgdGhlIHdheSB0b1xuICAgIC8vIHRoZSBlbmQgb2YgdGhlIGxpbmUuXG4gICAgaWYgKGN1cnJlbnRSYW5nZSkge1xuICAgICAgY3VycmVudFJhbmdlWzFdID0gdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNZXJnZXMgdGhlIHJhbmdlIGRlZmluZWQgYnkgdGhlIHByb3ZpZGVkIHN0YXJ0IGFuZCBlbmQgaW50byB0aGUgbGlzdCBvZlxuICAgKiBleGlzdGluZyByYW5nZXMuIFRoZSBtZXJnZSBpcyBkb25lIGluIHBsYWNlIG9uIHRoZSBleGlzdGluZyByYW5nZSBmb3JcbiAgICogcGVyZm9ybWFuY2UgYW5kIGlzIGFsc28gcmV0dXJuZWQuXG4gICAqIEBwYXJhbSByYW5nZXMgRXhpc3RpbmcgcmFuZ2UgbGlzdFxuICAgKiBAcGFyYW0gbmV3UmFuZ2UgVHVwbGUgb2YgdHdvIG51bWJlcnMgcmVwcmVzZW50aW5nIHRoZSBuZXcgcmFuZ2UgdG8gbWVyZ2UgaW4uXG4gICAqIEByZXR1cm5zIFRoZSByYW5nZXMgaW5wdXQgd2l0aCB0aGUgbmV3IHJhbmdlIG1lcmdlZCBpbiBwbGFjZVxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgX21lcmdlUmFuZ2VzKHJhbmdlczogW251bWJlciwgbnVtYmVyXVtdLCBuZXdSYW5nZTogW251bWJlciwgbnVtYmVyXSk6IFtudW1iZXIsIG51bWJlcl1bXSB7XG4gICAgbGV0IGluUmFuZ2UgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcmFuZ2UgPSByYW5nZXNbaV07XG4gICAgICBpZiAoIWluUmFuZ2UpIHtcbiAgICAgICAgaWYgKG5ld1JhbmdlWzFdIDw9IHJhbmdlWzBdKSB7XG4gICAgICAgICAgLy8gQ2FzZSAxOiBOZXcgcmFuZ2UgaXMgYmVmb3JlIHRoZSBzZWFyY2ggcmFuZ2VcbiAgICAgICAgICByYW5nZXMuc3BsaWNlKGksIDAsIG5ld1JhbmdlKTtcbiAgICAgICAgICByZXR1cm4gcmFuZ2VzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5ld1JhbmdlWzFdIDw9IHJhbmdlWzFdKSB7XG4gICAgICAgICAgLy8gQ2FzZSAyOiBOZXcgcmFuZ2UgaXMgZWl0aGVyIHdob2xseSBjb250YWluZWQgd2l0aGluIHRoZVxuICAgICAgICAgIC8vIHNlYXJjaCByYW5nZSBvciBvdmVybGFwcyB3aXRoIHRoZSBmcm9udCBvZiBpdFxuICAgICAgICAgIHJhbmdlWzBdID0gTWF0aC5taW4obmV3UmFuZ2VbMF0sIHJhbmdlWzBdKTtcbiAgICAgICAgICByZXR1cm4gcmFuZ2VzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5ld1JhbmdlWzBdIDwgcmFuZ2VbMV0pIHtcbiAgICAgICAgICAvLyBDYXNlIDM6IE5ldyByYW5nZSBlaXRoZXIgd2hvbGx5IGNvbnRhaW5zIHRoZSBzZWFyY2ggcmFuZ2VcbiAgICAgICAgICAvLyBvciBvdmVybGFwcyB3aXRoIHRoZSBlbmQgb2YgaXRcbiAgICAgICAgICByYW5nZVswXSA9IE1hdGgubWluKG5ld1JhbmdlWzBdLCByYW5nZVswXSk7XG4gICAgICAgICAgaW5SYW5nZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYXNlIDQ6IE5ldyByYW5nZSBzdGFydHMgYWZ0ZXIgdGhlIHNlYXJjaCByYW5nZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChuZXdSYW5nZVsxXSA8PSByYW5nZVswXSkge1xuICAgICAgICAgIC8vIENhc2UgNTogTmV3IHJhbmdlIGV4dGVuZHMgZnJvbSBwcmV2aW91cyByYW5nZSBidXQgZG9lc24ndFxuICAgICAgICAgIC8vIHJlYWNoIHRoZSBjdXJyZW50IG9uZVxuICAgICAgICAgIHJhbmdlc1tpIC0gMV1bMV0gPSBuZXdSYW5nZVsxXTtcbiAgICAgICAgICByZXR1cm4gcmFuZ2VzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5ld1JhbmdlWzFdIDw9IHJhbmdlWzFdKSB7XG4gICAgICAgICAgLy8gQ2FzZSA2OiBOZXcgcmFuZ2UgZXh0ZW5kcyBmcm9tIHBydmlvdXMgcmFuZ2UgaW50byB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IHJhbmdlXG4gICAgICAgICAgcmFuZ2VzW2kgLSAxXVsxXSA9IE1hdGgubWF4KG5ld1JhbmdlWzFdLCByYW5nZVsxXSk7XG4gICAgICAgICAgcmFuZ2VzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICByZXR1cm4gcmFuZ2VzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FzZSA3OiBOZXcgcmFuZ2UgZXh0ZW5kcyBmcm9tIHByZXZpb3VzIHJhbmdlIHBhc3QgdGhlXG4gICAgICAgIC8vIGVuZCBvZiB0aGUgY3VycmVudCByYW5nZVxuICAgICAgICByYW5nZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICBpLS07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGluUmFuZ2UpIHtcbiAgICAgIC8vIENhc2UgODogTmV3IHJhbmdlIGV4dGVuZHMgcGFzdCB0aGUgbGFzdCBleGlzdGluZyByYW5nZVxuICAgICAgcmFuZ2VzW3Jhbmdlcy5sZW5ndGggLSAxXVsxXSA9IG5ld1JhbmdlWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYXNlIDk6IE5ldyByYW5nZSBzdGFydHMgYWZ0ZXIgdGhlIGxhc3QgZXhpc3RpbmcgcmFuZ2VcbiAgICAgIHJhbmdlcy5wdXNoKG5ld1JhbmdlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmFuZ2VzO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElDb3JlQnJvd3NlclNlcnZpY2UgfSBmcm9tICcuL1NlcnZpY2VzJztcblxuZXhwb3J0IGNsYXNzIENvcmVCcm93c2VyU2VydmljZSBpbXBsZW1lbnRzIElDb3JlQnJvd3NlclNlcnZpY2Uge1xuICBwdWJsaWMgc2VydmljZUJyYW5kOiB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfdGV4dGFyZWE6IEhUTUxUZXh0QXJlYUVsZW1lbnRcbiAgKSB7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGlzRm9jdXNlZCgpOiBib29sZWFuIHtcbiAgICBjb25zdCBkb2NPclNoYWRvd1Jvb3QgPSB0aGlzLl90ZXh0YXJlYS5nZXRSb290Tm9kZSA/IHRoaXMuX3RleHRhcmVhLmdldFJvb3ROb2RlKCkgYXMgRG9jdW1lbnQgfCBTaGFkb3dSb290IDogZG9jdW1lbnQ7XG4gICAgcmV0dXJuIGRvY09yU2hhZG93Um9vdC5hY3RpdmVFbGVtZW50ID09PSB0aGlzLl90ZXh0YXJlYSAmJiBkb2N1bWVudC5oYXNGb2N1cygpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAyMiBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElEZWNvcmF0aW9uU2VydmljZSwgSVJlbmRlclNlcnZpY2UgfSBmcm9tICdicm93c2VyL3NlcnZpY2VzL1NlcnZpY2VzJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgSUV2ZW50IH0gZnJvbSAnY29tbW9uL0V2ZW50RW1pdHRlcic7XG5pbXBvcnQgeyBEaXNwb3NhYmxlIH0gZnJvbSAnY29tbW9uL0xpZmVjeWNsZSc7XG5pbXBvcnQgeyBJQnVmZmVyU2VydmljZSwgSUluc3RhbnRpYXRpb25TZXJ2aWNlIH0gZnJvbSAnY29tbW9uL3NlcnZpY2VzL1NlcnZpY2VzJztcbmltcG9ydCB7IElEZWNvcmF0aW9uT3B0aW9ucywgSURlY29yYXRpb24sIElNYXJrZXIgfSBmcm9tICd4dGVybSc7XG5cbmV4cG9ydCBjbGFzcyBEZWNvcmF0aW9uU2VydmljZSBleHRlbmRzIERpc3Bvc2FibGUgaW1wbGVtZW50cyBJRGVjb3JhdGlvblNlcnZpY2Uge1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgX2RlY29yYXRpb25zOiBEZWNvcmF0aW9uW10gPSBbXTtcbiAgcHJpdmF0ZSBfY29udGFpbmVyOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBfc2NyZWVuRWxlbWVudDogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX3JlbmRlclNlcnZpY2U6IElSZW5kZXJTZXJ2aWNlIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIF9hbmltYXRpb25GcmFtZTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKEBJSW5zdGFudGlhdGlvblNlcnZpY2UgcHJpdmF0ZSByZWFkb25seSBfaW5zdGFudGlhdGlvblNlcnZpY2U6IElJbnN0YW50aWF0aW9uU2VydmljZSkgeyBzdXBlcigpOyB9XG5cbiAgcHVibGljIGF0dGFjaFRvRG9tKHNjcmVlbkVsZW1lbnQ6IEhUTUxFbGVtZW50LCByZW5kZXJTZXJ2aWNlOiBJUmVuZGVyU2VydmljZSk6IHZvaWQge1xuICAgIHRoaXMuX3JlbmRlclNlcnZpY2UgPSByZW5kZXJTZXJ2aWNlO1xuICAgIHRoaXMuX3NjcmVlbkVsZW1lbnQgPSBzY3JlZW5FbGVtZW50O1xuICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCd4dGVybS1kZWNvcmF0aW9uLWNvbnRhaW5lcicpO1xuICAgIHNjcmVlbkVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fY29udGFpbmVyKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuX3JlbmRlclNlcnZpY2Uub25SZW5kZXJlZEJ1ZmZlckNoYW5nZSgoKSA9PiB0aGlzLnJlZnJlc2goKSkpO1xuICAgIHRoaXMucmVnaXN0ZXIodGhpcy5fcmVuZGVyU2VydmljZS5vbkRpbWVuc2lvbnNDaGFuZ2UoKCkgPT4gdGhpcy5yZWZyZXNoKHRydWUpKSk7XG4gIH1cblxuICBwdWJsaWMgcmVnaXN0ZXJEZWNvcmF0aW9uKGRlY29yYXRpb25PcHRpb25zOiBJRGVjb3JhdGlvbk9wdGlvbnMpOiBJRGVjb3JhdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKGRlY29yYXRpb25PcHRpb25zLm1hcmtlci5pc0Rpc3Bvc2VkIHx8ICF0aGlzLl9jb250YWluZXIpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGRlY29yYXRpb24gPSB0aGlzLl9pbnN0YW50aWF0aW9uU2VydmljZS5jcmVhdGVJbnN0YW5jZShEZWNvcmF0aW9uLCBkZWNvcmF0aW9uT3B0aW9ucywgdGhpcy5fY29udGFpbmVyKTtcbiAgICB0aGlzLl9kZWNvcmF0aW9ucy5wdXNoKGRlY29yYXRpb24pO1xuICAgIGRlY29yYXRpb24ub25EaXNwb3NlKCgpID0+IHRoaXMuX2RlY29yYXRpb25zLnNwbGljZSh0aGlzLl9kZWNvcmF0aW9ucy5pbmRleE9mKGRlY29yYXRpb24pLCAxKSk7XG4gICAgdGhpcy5fcXVldWVSZWZyZXNoKCk7XG4gICAgcmV0dXJuIGRlY29yYXRpb247XG4gIH1cblxuICBwcml2YXRlIF9xdWV1ZVJlZnJlc2goKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2FuaW1hdGlvbkZyYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fYW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgdGhpcy5fYW5pbWF0aW9uRnJhbWUgPSB1bmRlZmluZWQ7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgcmVmcmVzaChzaG91bGRSZWNyZWF0ZT86IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX3JlbmRlclNlcnZpY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChjb25zdCBkZWNvcmF0aW9uIG9mIHRoaXMuX2RlY29yYXRpb25zKSB7XG4gICAgICBkZWNvcmF0aW9uLnJlbmRlcih0aGlzLl9yZW5kZXJTZXJ2aWNlLCBzaG91bGRSZWNyZWF0ZSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgZm9yIChjb25zdCBkZWNvcmF0aW9uIG9mIHRoaXMuX2RlY29yYXRpb25zKSB7XG4gICAgICBkZWNvcmF0aW9uLmRpc3Bvc2UoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3NjcmVlbkVsZW1lbnQgJiYgdGhpcy5fY29udGFpbmVyICYmIHRoaXMuX3NjcmVlbkVsZW1lbnQuY29udGFpbnModGhpcy5fY29udGFpbmVyKSkge1xuICAgICAgdGhpcy5fc2NyZWVuRWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLl9jb250YWluZXIpO1xuICAgIH1cbiAgfVxufVxuZXhwb3J0IGNsYXNzIERlY29yYXRpb24gZXh0ZW5kcyBEaXNwb3NhYmxlIGltcGxlbWVudHMgSURlY29yYXRpb24ge1xuICBwcml2YXRlIHJlYWRvbmx5IF9tYXJrZXI6IElNYXJrZXI7XG4gIHByaXZhdGUgX2VsZW1lbnQ6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkO1xuXG4gIHB1YmxpYyBpc0Rpc3Bvc2VkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgcHVibGljIGdldCBlbGVtZW50KCk6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkIHsgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7IH1cbiAgcHVibGljIGdldCBtYXJrZXIoKTogSU1hcmtlciB7IHJldHVybiB0aGlzLl9tYXJrZXI7IH1cblxuICBwcml2YXRlIF9vbkRpc3Bvc2UgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIHB1YmxpYyBnZXQgb25EaXNwb3NlKCk6IElFdmVudDx2b2lkPiB7IHJldHVybiB0aGlzLl9vbkRpc3Bvc2UuZXZlbnQ7IH1cblxuICBwcml2YXRlIF9vblJlbmRlciA9IG5ldyBFdmVudEVtaXR0ZXI8SFRNTEVsZW1lbnQ+KCk7XG4gIHB1YmxpYyBnZXQgb25SZW5kZXIoKTogSUV2ZW50PEhUTUxFbGVtZW50PiB7IHJldHVybiB0aGlzLl9vblJlbmRlci5ldmVudDsgfVxuXG4gIHB1YmxpYyB4OiBudW1iZXI7XG4gIHB1YmxpYyBhbmNob3I6ICdsZWZ0JyB8ICdyaWdodCc7XG4gIHB1YmxpYyB3aWR0aDogbnVtYmVyO1xuICBwdWJsaWMgaGVpZ2h0OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgb3B0aW9uczogSURlY29yYXRpb25PcHRpb25zLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2NvbnRhaW5lcjogSFRNTEVsZW1lbnQsXG4gICAgQElCdWZmZXJTZXJ2aWNlIHByaXZhdGUgcmVhZG9ubHkgX2J1ZmZlclNlcnZpY2U6IElCdWZmZXJTZXJ2aWNlXG4gICkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy54ID0gb3B0aW9ucy54ID8/IDA7XG4gICAgdGhpcy5fbWFya2VyID0gb3B0aW9ucy5tYXJrZXI7XG4gICAgdGhpcy5fbWFya2VyLm9uRGlzcG9zZSgoKSA9PiB0aGlzLmRpc3Bvc2UoKSk7XG4gICAgdGhpcy5hbmNob3IgPSBvcHRpb25zLmFuY2hvciB8fCAnbGVmdCc7XG4gICAgdGhpcy53aWR0aCA9IG9wdGlvbnMud2lkdGggfHwgMTtcbiAgICB0aGlzLmhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0IHx8IDE7XG4gIH1cblxuICBwdWJsaWMgcmVuZGVyKHJlbmRlclNlcnZpY2U6IElSZW5kZXJTZXJ2aWNlLCBzaG91bGRSZWNyZWF0ZT86IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX2VsZW1lbnQgfHwgc2hvdWxkUmVjcmVhdGUpIHtcbiAgICAgIHRoaXMuX2NyZWF0ZUVsZW1lbnQocmVuZGVyU2VydmljZSwgc2hvdWxkUmVjcmVhdGUpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fY29udGFpbmVyICYmIHRoaXMuX2VsZW1lbnQgJiYgIXRoaXMuX2NvbnRhaW5lci5jb250YWlucyh0aGlzLl9lbGVtZW50KSkge1xuICAgICAgdGhpcy5fY29udGFpbmVyLmFwcGVuZCh0aGlzLl9lbGVtZW50KTtcbiAgICB9XG4gICAgdGhpcy5fcmVmcmVzaFN0eWxlKHJlbmRlclNlcnZpY2UpO1xuICAgIGlmICh0aGlzLl9lbGVtZW50KSB7XG4gICAgICB0aGlzLl9vblJlbmRlci5maXJlKHRoaXMuX2VsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2NyZWF0ZUVsZW1lbnQocmVuZGVyU2VydmljZTogSVJlbmRlclNlcnZpY2UsIHNob3VsZFJlY3JlYXRlPzogYm9vbGVhbik6IHZvaWQge1xuICAgIGlmIChzaG91bGRSZWNyZWF0ZSAmJiB0aGlzLl9lbGVtZW50ICYmIHRoaXMuX2NvbnRhaW5lci5jb250YWlucyh0aGlzLl9lbGVtZW50KSkge1xuICAgICAgdGhpcy5fY29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMuX2VsZW1lbnQpO1xuICAgIH1cbiAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKCd4dGVybS1kZWNvcmF0aW9uJyk7XG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS53aWR0aCA9IGAke3RoaXMud2lkdGggKiByZW5kZXJTZXJ2aWNlLmRpbWVuc2lvbnMuYWN0dWFsQ2VsbFdpZHRofXB4YDtcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmhlaWdodCA9IGAke3RoaXMuaGVpZ2h0ICogcmVuZGVyU2VydmljZS5kaW1lbnNpb25zLmFjdHVhbENlbGxIZWlnaHR9cHhgO1xuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUudG9wID0gYCR7KHRoaXMubWFya2VyLmxpbmUgLSB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlcnMuYWN0aXZlLnlkaXNwKSAqIHJlbmRlclNlcnZpY2UuZGltZW5zaW9ucy5hY3R1YWxDZWxsSGVpZ2h0fXB4YDtcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmxpbmVIZWlnaHQgPSBgJHtyZW5kZXJTZXJ2aWNlLmRpbWVuc2lvbnMuYWN0dWFsQ2VsbEhlaWdodH1weGA7XG5cbiAgICBpZiAodGhpcy54ICYmIHRoaXMueCA+IHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scykge1xuICAgICAgLy8gZXhjZWVkZWQgdGhlIGNvbnRhaW5lciB3aWR0aCwgc28gaGlkZVxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cbiAgICBpZiAodGhpcy5hbmNob3IgPT09ICdyaWdodCcpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucmlnaHQgPSB0aGlzLnggPyBgJHt0aGlzLnggKiByZW5kZXJTZXJ2aWNlLmRpbWVuc2lvbnMuYWN0dWFsQ2VsbFdpZHRofXB4YCA6ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmxlZnQgPSB0aGlzLnggPyBgJHt0aGlzLnggKiByZW5kZXJTZXJ2aWNlLmRpbWVuc2lvbnMuYWN0dWFsQ2VsbFdpZHRofXB4YCA6ICcnO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX3JlZnJlc2hTdHlsZShyZW5kZXJTZXJ2aWNlOiBJUmVuZGVyU2VydmljZSk6IHZvaWQge1xuICAgIGlmICghdGhpcy5fZWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBsaW5lID0gdGhpcy5tYXJrZXIubGluZSAtIHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVycy5hY3RpdmUueWRpc3A7XG4gICAgaWYgKGxpbmUgPCAwIHx8IGxpbmUgPiB0aGlzLl9idWZmZXJTZXJ2aWNlLnJvd3MpIHtcbiAgICAgIC8vIG91dHNpZGUgb2Ygdmlld3BvcnRcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS50b3AgPSBgJHtsaW5lICogcmVuZGVyU2VydmljZS5kaW1lbnNpb25zLmFjdHVhbENlbGxIZWlnaHR9cHhgO1xuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXIgPT09IHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVycy5hbHQgPyAnbm9uZScgOiAnYmxvY2snO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzRGlzcG9zZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2VsZW1lbnQgJiYgdGhpcy5fY29udGFpbmVyLmNvbnRhaW5zKHRoaXMuX2VsZW1lbnQpKSB7XG4gICAgICB0aGlzLl9jb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5fZWxlbWVudCk7XG4gICAgfVxuICAgIHRoaXMuaXNEaXNwb3NlZCA9IHRydWU7XG4gICAgdGhpcy5fb25EaXNwb3NlLmZpcmUoKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJQ2hhclNpemVTZXJ2aWNlLCBJUmVuZGVyU2VydmljZSwgSU1vdXNlU2VydmljZSB9IGZyb20gJy4vU2VydmljZXMnO1xuaW1wb3J0IHsgZ2V0Q29vcmRzLCBnZXRSYXdCeXRlQ29vcmRzIH0gZnJvbSAnYnJvd3Nlci9pbnB1dC9Nb3VzZSc7XG5cbmV4cG9ydCBjbGFzcyBNb3VzZVNlcnZpY2UgaW1wbGVtZW50cyBJTW91c2VTZXJ2aWNlIHtcbiAgcHVibGljIHNlcnZpY2VCcmFuZDogdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJUmVuZGVyU2VydmljZSBwcml2YXRlIHJlYWRvbmx5IF9yZW5kZXJTZXJ2aWNlOiBJUmVuZGVyU2VydmljZSxcbiAgICBASUNoYXJTaXplU2VydmljZSBwcml2YXRlIHJlYWRvbmx5IF9jaGFyU2l6ZVNlcnZpY2U6IElDaGFyU2l6ZVNlcnZpY2VcbiAgKSB7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q29vcmRzKGV2ZW50OiB7Y2xpZW50WDogbnVtYmVyLCBjbGllbnRZOiBudW1iZXJ9LCBlbGVtZW50OiBIVE1MRWxlbWVudCwgY29sQ291bnQ6IG51bWJlciwgcm93Q291bnQ6IG51bWJlciwgaXNTZWxlY3Rpb24/OiBib29sZWFuKTogW251bWJlciwgbnVtYmVyXSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIGdldENvb3JkcyhcbiAgICAgIGV2ZW50LFxuICAgICAgZWxlbWVudCxcbiAgICAgIGNvbENvdW50LFxuICAgICAgcm93Q291bnQsXG4gICAgICB0aGlzLl9jaGFyU2l6ZVNlcnZpY2UuaGFzVmFsaWRTaXplLFxuICAgICAgdGhpcy5fcmVuZGVyU2VydmljZS5kaW1lbnNpb25zLmFjdHVhbENlbGxXaWR0aCxcbiAgICAgIHRoaXMuX3JlbmRlclNlcnZpY2UuZGltZW5zaW9ucy5hY3R1YWxDZWxsSGVpZ2h0LFxuICAgICAgaXNTZWxlY3Rpb25cbiAgICApO1xuICB9XG5cbiAgcHVibGljIGdldFJhd0J5dGVDb29yZHMoZXZlbnQ6IE1vdXNlRXZlbnQsIGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBjb2xDb3VudDogbnVtYmVyLCByb3dDb3VudDogbnVtYmVyKTogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9IHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBjb29yZHMgPSB0aGlzLmdldENvb3JkcyhldmVudCwgZWxlbWVudCwgY29sQ291bnQsIHJvd0NvdW50KTtcbiAgICByZXR1cm4gZ2V0UmF3Qnl0ZUNvb3Jkcyhjb29yZHMpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElSZW5kZXJlciwgSVJlbmRlckRpbWVuc2lvbnMgfSBmcm9tICdicm93c2VyL3JlbmRlcmVyL1R5cGVzJztcbmltcG9ydCB7IFJlbmRlckRlYm91bmNlciB9IGZyb20gJ2Jyb3dzZXIvUmVuZGVyRGVib3VuY2VyJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgSUV2ZW50IH0gZnJvbSAnY29tbW9uL0V2ZW50RW1pdHRlcic7XG5pbXBvcnQgeyBEaXNwb3NhYmxlIH0gZnJvbSAnY29tbW9uL0xpZmVjeWNsZSc7XG5pbXBvcnQgeyBTY3JlZW5EcHJNb25pdG9yIH0gZnJvbSAnYnJvd3Nlci9TY3JlZW5EcHJNb25pdG9yJztcbmltcG9ydCB7IGFkZERpc3Bvc2FibGVEb21MaXN0ZW5lciB9IGZyb20gJ2Jyb3dzZXIvTGlmZWN5Y2xlJztcbmltcG9ydCB7IElDb2xvclNldCwgSVJlbmRlckRlYm91bmNlciB9IGZyb20gJ2Jyb3dzZXIvVHlwZXMnO1xuaW1wb3J0IHsgSU9wdGlvbnNTZXJ2aWNlLCBJQnVmZmVyU2VydmljZSB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5pbXBvcnQgeyBJQ2hhclNpemVTZXJ2aWNlLCBJUmVuZGVyU2VydmljZSB9IGZyb20gJ2Jyb3dzZXIvc2VydmljZXMvU2VydmljZXMnO1xuXG5pbnRlcmZhY2UgSVNlbGVjdGlvblN0YXRlIHtcbiAgc3RhcnQ6IFtudW1iZXIsIG51bWJlcl0gfCB1bmRlZmluZWQ7XG4gIGVuZDogW251bWJlciwgbnVtYmVyXSB8IHVuZGVmaW5lZDtcbiAgY29sdW1uU2VsZWN0TW9kZTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIFJlbmRlclNlcnZpY2UgZXh0ZW5kcyBEaXNwb3NhYmxlIGltcGxlbWVudHMgSVJlbmRlclNlcnZpY2Uge1xuICBwdWJsaWMgc2VydmljZUJyYW5kOiB1bmRlZmluZWQ7XG5cbiAgcHJpdmF0ZSBfcmVuZGVyRGVib3VuY2VyOiBJUmVuZGVyRGVib3VuY2VyO1xuICBwcml2YXRlIF9zY3JlZW5EcHJNb25pdG9yOiBTY3JlZW5EcHJNb25pdG9yO1xuXG4gIHByaXZhdGUgX2lzUGF1c2VkOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX25lZWRzRnVsbFJlZnJlc2g6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfaXNOZXh0UmVuZGVyUmVkcmF3T25seTogYm9vbGVhbiA9IHRydWU7XG4gIHByaXZhdGUgX25lZWRzU2VsZWN0aW9uUmVmcmVzaDogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF9jYW52YXNXaWR0aDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfY2FudmFzSGVpZ2h0OiBudW1iZXIgPSAwO1xuICBwcml2YXRlIF9zZWxlY3Rpb25TdGF0ZTogSVNlbGVjdGlvblN0YXRlID0ge1xuICAgIHN0YXJ0OiB1bmRlZmluZWQsXG4gICAgZW5kOiB1bmRlZmluZWQsXG4gICAgY29sdW1uU2VsZWN0TW9kZTogZmFsc2VcbiAgfTtcblxuICBwcml2YXRlIF9vbkRpbWVuc2lvbnNDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPElSZW5kZXJEaW1lbnNpb25zPigpO1xuICBwdWJsaWMgZ2V0IG9uRGltZW5zaW9uc0NoYW5nZSgpOiBJRXZlbnQ8SVJlbmRlckRpbWVuc2lvbnM+IHsgcmV0dXJuIHRoaXMuX29uRGltZW5zaW9uc0NoYW5nZS5ldmVudDsgfVxuICBwcml2YXRlIF9vblJlbmRlciA9IG5ldyBFdmVudEVtaXR0ZXI8eyBzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlciB9PigpO1xuICBwdWJsaWMgZ2V0IG9uUmVuZGVyZWRCdWZmZXJDaGFuZ2UoKTogSUV2ZW50PHsgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIgfT4geyByZXR1cm4gdGhpcy5fb25SZW5kZXIuZXZlbnQ7IH1cbiAgcHJpdmF0ZSBfb25SZWZyZXNoUmVxdWVzdCA9IG5ldyBFdmVudEVtaXR0ZXI8eyBzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlciB9PigpO1xuICBwdWJsaWMgZ2V0IG9uUmVmcmVzaFJlcXVlc3QoKTogSUV2ZW50PHsgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIgfT4geyByZXR1cm4gdGhpcy5fb25SZWZyZXNoUmVxdWVzdC5ldmVudDsgfVxuXG4gIHB1YmxpYyBnZXQgZGltZW5zaW9ucygpOiBJUmVuZGVyRGltZW5zaW9ucyB7IHJldHVybiB0aGlzLl9yZW5kZXJlci5kaW1lbnNpb25zOyB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfcmVuZGVyZXI6IElSZW5kZXJlcixcbiAgICBwcml2YXRlIF9yb3dDb3VudDogbnVtYmVyLFxuICAgIHNjcmVlbkVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgIEBJT3B0aW9uc1NlcnZpY2Ugb3B0aW9uc1NlcnZpY2U6IElPcHRpb25zU2VydmljZSxcbiAgICBASUNoYXJTaXplU2VydmljZSBwcml2YXRlIHJlYWRvbmx5IF9jaGFyU2l6ZVNlcnZpY2U6IElDaGFyU2l6ZVNlcnZpY2UsXG4gICAgQElCdWZmZXJTZXJ2aWNlIGJ1ZmZlclNlcnZpY2U6IElCdWZmZXJTZXJ2aWNlXG4gICkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLnJlZ2lzdGVyKHsgZGlzcG9zZTogKCkgPT4gdGhpcy5fcmVuZGVyZXIuZGlzcG9zZSgpIH0pO1xuXG4gICAgdGhpcy5fcmVuZGVyRGVib3VuY2VyID0gbmV3IFJlbmRlckRlYm91bmNlcigoc3RhcnQsIGVuZCkgPT4gdGhpcy5fcmVuZGVyUm93cyhzdGFydCwgZW5kKSk7XG4gICAgdGhpcy5yZWdpc3Rlcih0aGlzLl9yZW5kZXJEZWJvdW5jZXIpO1xuXG4gICAgdGhpcy5fc2NyZWVuRHByTW9uaXRvciA9IG5ldyBTY3JlZW5EcHJNb25pdG9yKCk7XG4gICAgdGhpcy5fc2NyZWVuRHByTW9uaXRvci5zZXRMaXN0ZW5lcigoKSA9PiB0aGlzLm9uRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZSgpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuX3NjcmVlbkRwck1vbml0b3IpO1xuXG4gICAgdGhpcy5yZWdpc3RlcihidWZmZXJTZXJ2aWNlLm9uUmVzaXplKCgpID0+IHRoaXMuX2Z1bGxSZWZyZXNoKCkpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKGJ1ZmZlclNlcnZpY2UuYnVmZmVycy5vbkJ1ZmZlckFjdGl2YXRlKCgpID0+IHRoaXMuX3JlbmRlcmVyPy5jbGVhcigpKSk7XG4gICAgdGhpcy5yZWdpc3RlcihvcHRpb25zU2VydmljZS5vbk9wdGlvbkNoYW5nZSgoKSA9PiB0aGlzLl9yZW5kZXJlci5vbk9wdGlvbnNDaGFuZ2VkKCkpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuX2NoYXJTaXplU2VydmljZS5vbkNoYXJTaXplQ2hhbmdlKCgpID0+IHRoaXMub25DaGFyU2l6ZUNoYW5nZWQoKSkpO1xuXG4gICAgLy8gTm8gbmVlZCB0byByZWdpc3RlciB0aGlzIGFzIHJlbmRlcmVyIGlzIGV4cGxpY2l0bHkgZGlzcG9zZWQgaW4gUmVuZGVyU2VydmljZS5kaXNwb3NlXG4gICAgdGhpcy5fcmVuZGVyZXIub25SZXF1ZXN0UmVkcmF3KGUgPT4gdGhpcy5yZWZyZXNoUm93cyhlLnN0YXJ0LCBlLmVuZCwgdHJ1ZSkpO1xuXG4gICAgLy8gZHByY2hhbmdlIHNob3VsZCBoYW5kbGUgdGhpcyBjYXNlLCB3ZSBuZWVkIHRoaXMgYXMgd2VsbCBmb3IgYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IHRoZVxuICAgIC8vIG1hdGNoTWVkaWEgcXVlcnkuXG4gICAgdGhpcy5yZWdpc3RlcihhZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIod2luZG93LCAncmVzaXplJywgKCkgPT4gdGhpcy5vbkRldmljZVBpeGVsUmF0aW9DaGFuZ2UoKSkpO1xuXG4gICAgLy8gRGV0ZWN0IHdoZXRoZXIgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgaXMgZGV0ZWN0ZWQgYW5kIGVuYWJsZSByZW5kZXJlciBwYXVzZVxuICAgIC8vIGFuZCByZXN1bWUgYmFzZWQgb24gdGVybWluYWwgdmlzaWJpbGl0eSBpZiBzb1xuICAgIGlmICgnSW50ZXJzZWN0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdykge1xuICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZSA9PiB0aGlzLl9vbkludGVyc2VjdGlvbkNoYW5nZShlW2UubGVuZ3RoIC0gMV0pLCB7IHRocmVzaG9sZDogMCB9KTtcbiAgICAgIG9ic2VydmVyLm9ic2VydmUoc2NyZWVuRWxlbWVudCk7XG4gICAgICB0aGlzLnJlZ2lzdGVyKHsgZGlzcG9zZTogKCkgPT4gb2JzZXJ2ZXIuZGlzY29ubmVjdCgpIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX29uSW50ZXJzZWN0aW9uQ2hhbmdlKGVudHJ5OiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5KTogdm9pZCB7XG4gICAgdGhpcy5faXNQYXVzZWQgPSBlbnRyeS5pc0ludGVyc2VjdGluZyA9PT0gdW5kZWZpbmVkID8gKGVudHJ5LmludGVyc2VjdGlvblJhdGlvID09PSAwKSA6ICFlbnRyeS5pc0ludGVyc2VjdGluZztcblxuICAgIC8vIFRlcm1pbmFsIHdhcyBoaWRkZW4gb24gb3BlblxuICAgIGlmICghdGhpcy5faXNQYXVzZWQgJiYgIXRoaXMuX2NoYXJTaXplU2VydmljZS5oYXNWYWxpZFNpemUpIHtcbiAgICAgIHRoaXMuX2NoYXJTaXplU2VydmljZS5tZWFzdXJlKCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9pc1BhdXNlZCAmJiB0aGlzLl9uZWVkc0Z1bGxSZWZyZXNoKSB7XG4gICAgICB0aGlzLnJlZnJlc2hSb3dzKDAsIHRoaXMuX3Jvd0NvdW50IC0gMSk7XG4gICAgICB0aGlzLl9uZWVkc0Z1bGxSZWZyZXNoID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlZnJlc2hSb3dzKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyLCBpc1JlZHJhd09ubHk6IGJvb2xlYW4gPSBmYWxzZSk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgdGhpcy5fbmVlZHNGdWxsUmVmcmVzaCA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghaXNSZWRyYXdPbmx5KSB7XG4gICAgICB0aGlzLl9pc05leHRSZW5kZXJSZWRyYXdPbmx5ID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuX3JlbmRlckRlYm91bmNlci5yZWZyZXNoKHN0YXJ0LCBlbmQsIHRoaXMuX3Jvd0NvdW50KTtcbiAgfVxuXG4gIHByaXZhdGUgX3JlbmRlclJvd3Moc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9yZW5kZXJlci5yZW5kZXJSb3dzKHN0YXJ0LCBlbmQpO1xuXG4gICAgLy8gVXBkYXRlIHNlbGVjdGlvbiBpZiBuZWVkZWRcbiAgICBpZiAodGhpcy5fbmVlZHNTZWxlY3Rpb25SZWZyZXNoKSB7XG4gICAgICB0aGlzLl9yZW5kZXJlci5vblNlbGVjdGlvbkNoYW5nZWQodGhpcy5fc2VsZWN0aW9uU3RhdGUuc3RhcnQsIHRoaXMuX3NlbGVjdGlvblN0YXRlLmVuZCwgdGhpcy5fc2VsZWN0aW9uU3RhdGUuY29sdW1uU2VsZWN0TW9kZSk7XG4gICAgICB0aGlzLl9uZWVkc1NlbGVjdGlvblJlZnJlc2ggPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBGaXJlIHJlbmRlciBldmVudCBvbmx5IGlmIGl0IHdhcyBub3QgYSByZWRyYXdcbiAgICBpZiAoIXRoaXMuX2lzTmV4dFJlbmRlclJlZHJhd09ubHkpIHtcbiAgICAgIHRoaXMuX29uUmVuZGVyLmZpcmUoeyBzdGFydCwgZW5kIH0pO1xuICAgIH1cbiAgICB0aGlzLl9pc05leHRSZW5kZXJSZWRyYXdPbmx5ID0gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyByZXNpemUoY29sczogbnVtYmVyLCByb3dzOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9yb3dDb3VudCA9IHJvd3M7XG4gICAgdGhpcy5fZmlyZU9uQ2FudmFzUmVzaXplKCk7XG4gIH1cblxuICBwdWJsaWMgY2hhbmdlT3B0aW9ucygpOiB2b2lkIHtcbiAgICB0aGlzLl9yZW5kZXJlci5vbk9wdGlvbnNDaGFuZ2VkKCk7XG4gICAgdGhpcy5yZWZyZXNoUm93cygwLCB0aGlzLl9yb3dDb3VudCAtIDEpO1xuICAgIHRoaXMuX2ZpcmVPbkNhbnZhc1Jlc2l6ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBfZmlyZU9uQ2FudmFzUmVzaXplKCk6IHZvaWQge1xuICAgIC8vIERvbid0IGZpcmUgdGhlIGV2ZW50IGlmIHRoZSBkaW1lbnNpb25zIGhhdmVuJ3QgY2hhbmdlZFxuICAgIGlmICh0aGlzLl9yZW5kZXJlci5kaW1lbnNpb25zLmNhbnZhc1dpZHRoID09PSB0aGlzLl9jYW52YXNXaWR0aCAmJiB0aGlzLl9yZW5kZXJlci5kaW1lbnNpb25zLmNhbnZhc0hlaWdodCA9PT0gdGhpcy5fY2FudmFzSGVpZ2h0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX29uRGltZW5zaW9uc0NoYW5nZS5maXJlKHRoaXMuX3JlbmRlcmVyLmRpbWVuc2lvbnMpO1xuICB9XG5cbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICB9XG5cbiAgcHVibGljIHNldFJlbmRlcmVyKHJlbmRlcmVyOiBJUmVuZGVyZXIpOiB2b2lkIHtcbiAgICAvLyBUT0RPOiBSZW5kZXJTZXJ2aWNlIHNob3VsZCBiZSB0aGUgb25seSBvbmUgdG8gZGlzcG9zZSB0aGUgcmVuZGVyZXJcbiAgICB0aGlzLl9yZW5kZXJlci5kaXNwb3NlKCk7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLl9yZW5kZXJlci5vblJlcXVlc3RSZWRyYXcoZSA9PiB0aGlzLnJlZnJlc2hSb3dzKGUuc3RhcnQsIGUuZW5kLCB0cnVlKSk7XG5cbiAgICAvLyBGb3JjZSBhIHJlZnJlc2hcbiAgICB0aGlzLl9uZWVkc1NlbGVjdGlvblJlZnJlc2ggPSB0cnVlO1xuICAgIHRoaXMuX2Z1bGxSZWZyZXNoKCk7XG4gIH1cblxuICBwcml2YXRlIF9mdWxsUmVmcmVzaCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5faXNQYXVzZWQpIHtcbiAgICAgIHRoaXMuX25lZWRzRnVsbFJlZnJlc2ggPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlZnJlc2hSb3dzKDAsIHRoaXMuX3Jvd0NvdW50IC0gMSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGNsZWFyVGV4dHVyZUF0bGFzKCk6IHZvaWQge1xuICAgIHRoaXMuX3JlbmRlcmVyPy5jbGVhclRleHR1cmVBdGxhcz8uKCk7XG4gICAgdGhpcy5fZnVsbFJlZnJlc2goKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRDb2xvcnMoY29sb3JzOiBJQ29sb3JTZXQpOiB2b2lkIHtcbiAgICB0aGlzLl9yZW5kZXJlci5zZXRDb2xvcnMoY29sb3JzKTtcbiAgICB0aGlzLl9mdWxsUmVmcmVzaCgpO1xuICB9XG5cbiAgcHVibGljIG9uRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZSgpOiB2b2lkIHtcbiAgICAvLyBGb3JjZSBjaGFyIHNpemUgbWVhc3VyZW1lbnQgYXMgRG9tTWVhc3VyZVN0cmF0ZWd5KGdldEJvdW5kaW5nQ2xpZW50UmVjdCkgaXMgbm90IHN0YWJsZVxuICAgIC8vIHdoZW4gZGV2aWNlUGl4ZWxSYXRpbyBjaGFuZ2VzXG4gICAgdGhpcy5fY2hhclNpemVTZXJ2aWNlLm1lYXN1cmUoKTtcblxuICAgIHRoaXMuX3JlbmRlcmVyLm9uRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZSgpO1xuICAgIHRoaXMucmVmcmVzaFJvd3MoMCwgdGhpcy5fcm93Q291bnQgLSAxKTtcbiAgfVxuXG4gIHB1YmxpYyBvblJlc2l6ZShjb2xzOiBudW1iZXIsIHJvd3M6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3JlbmRlcmVyLm9uUmVzaXplKGNvbHMsIHJvd3MpO1xuICAgIHRoaXMuX2Z1bGxSZWZyZXNoKCk7XG4gIH1cblxuICAvLyBUT0RPOiBJcyB0aGlzIHVzZWZ1bCB3aGVuIHdlIGhhdmUgb25SZXNpemU/XG4gIHB1YmxpYyBvbkNoYXJTaXplQ2hhbmdlZCgpOiB2b2lkIHtcbiAgICB0aGlzLl9yZW5kZXJlci5vbkNoYXJTaXplQ2hhbmdlZCgpO1xuICB9XG5cbiAgcHVibGljIG9uQmx1cigpOiB2b2lkIHtcbiAgICB0aGlzLl9yZW5kZXJlci5vbkJsdXIoKTtcbiAgfVxuXG4gIHB1YmxpYyBvbkZvY3VzKCk6IHZvaWQge1xuICAgIHRoaXMuX3JlbmRlcmVyLm9uRm9jdXMoKTtcbiAgfVxuXG4gIHB1YmxpYyBvblNlbGVjdGlvbkNoYW5nZWQoc3RhcnQ6IFtudW1iZXIsIG51bWJlcl0gfCB1bmRlZmluZWQsIGVuZDogW251bWJlciwgbnVtYmVyXSB8IHVuZGVmaW5lZCwgY29sdW1uU2VsZWN0TW9kZTogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX3NlbGVjdGlvblN0YXRlLnN0YXJ0ID0gc3RhcnQ7XG4gICAgdGhpcy5fc2VsZWN0aW9uU3RhdGUuZW5kID0gZW5kO1xuICAgIHRoaXMuX3NlbGVjdGlvblN0YXRlLmNvbHVtblNlbGVjdE1vZGUgPSBjb2x1bW5TZWxlY3RNb2RlO1xuICAgIHRoaXMuX3JlbmRlcmVyLm9uU2VsZWN0aW9uQ2hhbmdlZChzdGFydCwgZW5kLCBjb2x1bW5TZWxlY3RNb2RlKTtcbiAgfVxuXG4gIHB1YmxpYyBvbkN1cnNvck1vdmUoKTogdm9pZCB7XG4gICAgdGhpcy5fcmVuZGVyZXIub25DdXJzb3JNb3ZlKCk7XG4gIH1cblxuICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5fcmVuZGVyZXIuY2xlYXIoKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJU2VsZWN0aW9uUmVkcmF3UmVxdWVzdEV2ZW50LCBJU2VsZWN0aW9uUmVxdWVzdFNjcm9sbExpbmVzRXZlbnQgfSBmcm9tICdicm93c2VyL3NlbGVjdGlvbi9UeXBlcyc7XG5pbXBvcnQgeyBJQnVmZmVyIH0gZnJvbSAnY29tbW9uL2J1ZmZlci9UeXBlcyc7XG5pbXBvcnQgeyBJQnVmZmVyTGluZSwgSURpc3Bvc2FibGUgfSBmcm9tICdjb21tb24vVHlwZXMnO1xuaW1wb3J0ICogYXMgQnJvd3NlciBmcm9tICdjb21tb24vUGxhdGZvcm0nO1xuaW1wb3J0IHsgU2VsZWN0aW9uTW9kZWwgfSBmcm9tICdicm93c2VyL3NlbGVjdGlvbi9TZWxlY3Rpb25Nb2RlbCc7XG5pbXBvcnQgeyBDZWxsRGF0YSB9IGZyb20gJ2NvbW1vbi9idWZmZXIvQ2VsbERhdGEnO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJRXZlbnQgfSBmcm9tICdjb21tb24vRXZlbnRFbWl0dGVyJztcbmltcG9ydCB7IElNb3VzZVNlcnZpY2UsIElTZWxlY3Rpb25TZXJ2aWNlLCBJUmVuZGVyU2VydmljZSB9IGZyb20gJ2Jyb3dzZXIvc2VydmljZXMvU2VydmljZXMnO1xuaW1wb3J0IHsgSUxpbmtpZmllcjIgfSBmcm9tICdicm93c2VyL1R5cGVzJztcbmltcG9ydCB7IElCdWZmZXJTZXJ2aWNlLCBJT3B0aW9uc1NlcnZpY2UsIElDb3JlU2VydmljZSB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5pbXBvcnQgeyBnZXRDb29yZHNSZWxhdGl2ZVRvRWxlbWVudCB9IGZyb20gJ2Jyb3dzZXIvaW5wdXQvTW91c2UnO1xuaW1wb3J0IHsgbW92ZVRvQ2VsbFNlcXVlbmNlIH0gZnJvbSAnYnJvd3Nlci9pbnB1dC9Nb3ZlVG9DZWxsJztcbmltcG9ydCB7IERpc3Bvc2FibGUgfSBmcm9tICdjb21tb24vTGlmZWN5Y2xlJztcbmltcG9ydCB7IGdldFJhbmdlTGVuZ3RoIH0gZnJvbSAnY29tbW9uL2J1ZmZlci9CdWZmZXJSYW5nZSc7XG5cbi8qKlxuICogVGhlIG51bWJlciBvZiBwaXhlbHMgdGhlIG1vdXNlIG5lZWRzIHRvIGJlIGFib3ZlIG9yIGJlbG93IHRoZSB2aWV3cG9ydCBpblxuICogb3JkZXIgdG8gc2Nyb2xsIGF0IHRoZSBtYXhpbXVtIHNwZWVkLlxuICovXG5jb25zdCBEUkFHX1NDUk9MTF9NQVhfVEhSRVNIT0xEID0gNTA7XG5cbi8qKlxuICogVGhlIG1heGltdW0gc2Nyb2xsaW5nIHNwZWVkXG4gKi9cbmNvbnN0IERSQUdfU0NST0xMX01BWF9TUEVFRCA9IDE1O1xuXG4vKipcbiAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGJldHdlZW4gZHJhZyBzY3JvbGwgdXBkYXRlcy5cbiAqL1xuY29uc3QgRFJBR19TQ1JPTExfSU5URVJWQUwgPSA1MDtcblxuLyoqXG4gKiBUaGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSB0aGF0IGNhbiBoYXZlIGVsYXBzZWQgZm9yIGFuIGFsdCBjbGljayB0byBtb3ZlIHRoZVxuICogY3Vyc29yLlxuICovXG5jb25zdCBBTFRfQ0xJQ0tfTU9WRV9DVVJTT1JfVElNRSA9IDUwMDtcblxuY29uc3QgTk9OX0JSRUFLSU5HX1NQQUNFX0NIQVIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDE2MCk7XG5jb25zdCBBTExfTk9OX0JSRUFLSU5HX1NQQUNFX1JFR0VYID0gbmV3IFJlZ0V4cChOT05fQlJFQUtJTkdfU1BBQ0VfQ0hBUiwgJ2cnKTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgcG9zaXRpb24gb2YgYSB3b3JkIG9uIGEgbGluZS5cbiAqL1xuaW50ZXJmYWNlIElXb3JkUG9zaXRpb24ge1xuICBzdGFydDogbnVtYmVyO1xuICBsZW5ndGg6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBBIHNlbGVjdGlvbiBtb2RlLCB0aGlzIGRyaXZlcyBob3cgdGhlIHNlbGVjdGlvbiBiZWhhdmVzIG9uIG1vdXNlIG1vdmUuXG4gKi9cbmV4cG9ydCBjb25zdCBlbnVtIFNlbGVjdGlvbk1vZGUge1xuICBOT1JNQUwsXG4gIFdPUkQsXG4gIExJTkUsXG4gIENPTFVNTlxufVxuXG4vKipcbiAqIEEgY2xhc3MgdGhhdCBtYW5hZ2VzIHRoZSBzZWxlY3Rpb24gb2YgdGhlIHRlcm1pbmFsLiBXaXRoIGhlbHAgZnJvbVxuICogU2VsZWN0aW9uTW9kZWwsIFNlbGVjdGlvblNlcnZpY2UgaGFuZGxlcyB3aXRoIGFsbCBsb2dpYyBhc3NvY2lhdGVkIHdpdGhcbiAqIGRlYWxpbmcgd2l0aCB0aGUgc2VsZWN0aW9uLCBpbmNsdWRpbmcgaGFuZGxpbmcgbW91c2UgaW50ZXJhY3Rpb24sIHdpZGVcbiAqIGNoYXJhY3RlcnMgYW5kIGZldGNoaW5nIHRoZSBhY3R1YWwgdGV4dCB3aXRoaW4gdGhlIHNlbGVjdGlvbi4gUmVuZGVyaW5nIGlzXG4gKiBub3QgaGFuZGxlZCBieSB0aGUgU2VsZWN0aW9uU2VydmljZSBidXQgdGhlIG9uUmVkcmF3UmVxdWVzdCBldmVudCBpcyBmaXJlZFxuICogd2hlbiB0aGUgc2VsZWN0aW9uIGlzIHJlYWR5IHRvIGJlIHJlZHJhd24gKG9uIGFuIGFuaW1hdGlvbiBmcmFtZSkuXG4gKi9cbmV4cG9ydCBjbGFzcyBTZWxlY3Rpb25TZXJ2aWNlIGV4dGVuZHMgRGlzcG9zYWJsZSBpbXBsZW1lbnRzIElTZWxlY3Rpb25TZXJ2aWNlIHtcbiAgcHVibGljIHNlcnZpY2VCcmFuZDogdW5kZWZpbmVkO1xuXG4gIHByb3RlY3RlZCBfbW9kZWw6IFNlbGVjdGlvbk1vZGVsO1xuXG4gIC8qKlxuICAgKiBUaGUgYW1vdW50IHRvIHNjcm9sbCBldmVyeSBkcmFnIHNjcm9sbCB1cGRhdGUgKGRlcGVuZHMgb24gaG93IGZhciB0aGUgbW91c2VcbiAgICogZHJhZyBpcyBhYm92ZSBvciBiZWxvdyB0aGUgdGVybWluYWwpLlxuICAgKi9cbiAgcHJpdmF0ZSBfZHJhZ1Njcm9sbEFtb3VudDogbnVtYmVyID0gMDtcblxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgc2VsZWN0aW9uIG1vZGUuXG4gICAqL1xuICBwcm90ZWN0ZWQgX2FjdGl2ZVNlbGVjdGlvbk1vZGU6IFNlbGVjdGlvbk1vZGU7XG5cbiAgLyoqXG4gICAqIEEgc2V0SW50ZXJ2YWwgdGltZXIgdGhhdCBpcyBhY3RpdmUgd2hpbGUgdGhlIG1vdXNlIGlzIGRvd24gd2hvc2UgY2FsbGJhY2tcbiAgICogc2Nyb2xscyB0aGUgdmlld3BvcnQgd2hlbiBuZWNlc3NhcnkuXG4gICAqL1xuICBwcml2YXRlIF9kcmFnU2Nyb2xsSW50ZXJ2YWxUaW1lcjogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBUaGUgYW5pbWF0aW9uIGZyYW1lIElEIHVzZWQgZm9yIHJlZnJlc2hpbmcgdGhlIHNlbGVjdGlvbi5cbiAgICovXG4gIHByaXZhdGUgX3JlZnJlc2hBbmltYXRpb25GcmFtZTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHNlbGVjdGlvbiBpcyBlbmFibGVkLlxuICAgKi9cbiAgcHJpdmF0ZSBfZW5hYmxlZCA9IHRydWU7XG5cbiAgcHJpdmF0ZSBfbW91c2VNb3ZlTGlzdGVuZXI6IEV2ZW50TGlzdGVuZXI7XG4gIHByaXZhdGUgX21vdXNlVXBMaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcjtcbiAgcHJpdmF0ZSBfdHJpbUxpc3RlbmVyOiBJRGlzcG9zYWJsZTtcbiAgcHJpdmF0ZSBfd29ya0NlbGw6IENlbGxEYXRhID0gbmV3IENlbGxEYXRhKCk7XG5cbiAgcHJpdmF0ZSBfbW91c2VEb3duVGltZVN0YW1wOiBudW1iZXIgPSAwO1xuICBwcml2YXRlIF9vbGRIYXNTZWxlY3Rpb246IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfb2xkU2VsZWN0aW9uU3RhcnQ6IFtudW1iZXIsIG51bWJlcl0gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX29sZFNlbGVjdGlvbkVuZDogW251bWJlciwgbnVtYmVyXSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICBwcml2YXRlIF9vbkxpbnV4TW91c2VTZWxlY3Rpb24gPSB0aGlzLnJlZ2lzdGVyKG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpKTtcbiAgcHVibGljIGdldCBvbkxpbnV4TW91c2VTZWxlY3Rpb24oKTogSUV2ZW50PHN0cmluZz4geyByZXR1cm4gdGhpcy5fb25MaW51eE1vdXNlU2VsZWN0aW9uLmV2ZW50OyB9XG4gIHByaXZhdGUgX29uUmVkcmF3UmVxdWVzdCA9IHRoaXMucmVnaXN0ZXIobmV3IEV2ZW50RW1pdHRlcjxJU2VsZWN0aW9uUmVkcmF3UmVxdWVzdEV2ZW50PigpKTtcbiAgcHVibGljIGdldCBvblJlcXVlc3RSZWRyYXcoKTogSUV2ZW50PElTZWxlY3Rpb25SZWRyYXdSZXF1ZXN0RXZlbnQ+IHsgcmV0dXJuIHRoaXMuX29uUmVkcmF3UmVxdWVzdC5ldmVudDsgfVxuICBwcml2YXRlIF9vblNlbGVjdGlvbkNoYW5nZSA9IHRoaXMucmVnaXN0ZXIobmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpKTtcbiAgcHVibGljIGdldCBvblNlbGVjdGlvbkNoYW5nZSgpOiBJRXZlbnQ8dm9pZD4geyByZXR1cm4gdGhpcy5fb25TZWxlY3Rpb25DaGFuZ2UuZXZlbnQ7IH1cbiAgcHJpdmF0ZSBfb25SZXF1ZXN0U2Nyb2xsTGluZXMgPSB0aGlzLnJlZ2lzdGVyKG5ldyBFdmVudEVtaXR0ZXI8SVNlbGVjdGlvblJlcXVlc3RTY3JvbGxMaW5lc0V2ZW50PigpKTtcbiAgcHVibGljIGdldCBvblJlcXVlc3RTY3JvbGxMaW5lcygpOiBJRXZlbnQ8SVNlbGVjdGlvblJlcXVlc3RTY3JvbGxMaW5lc0V2ZW50PiB7IHJldHVybiB0aGlzLl9vblJlcXVlc3RTY3JvbGxMaW5lcy5ldmVudDsgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2VsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3NjcmVlbkVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2xpbmtpZmllcjogSUxpbmtpZmllcjIsXG4gICAgQElCdWZmZXJTZXJ2aWNlIHByaXZhdGUgcmVhZG9ubHkgX2J1ZmZlclNlcnZpY2U6IElCdWZmZXJTZXJ2aWNlLFxuICAgIEBJQ29yZVNlcnZpY2UgcHJpdmF0ZSByZWFkb25seSBfY29yZVNlcnZpY2U6IElDb3JlU2VydmljZSxcbiAgICBASU1vdXNlU2VydmljZSBwcml2YXRlIHJlYWRvbmx5IF9tb3VzZVNlcnZpY2U6IElNb3VzZVNlcnZpY2UsXG4gICAgQElPcHRpb25zU2VydmljZSBwcml2YXRlIHJlYWRvbmx5IF9vcHRpb25zU2VydmljZTogSU9wdGlvbnNTZXJ2aWNlLFxuICAgIEBJUmVuZGVyU2VydmljZSBwcml2YXRlIHJlYWRvbmx5IF9yZW5kZXJTZXJ2aWNlOiBJUmVuZGVyU2VydmljZVxuICApIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLy8gSW5pdCBsaXN0ZW5lcnNcbiAgICB0aGlzLl9tb3VzZU1vdmVMaXN0ZW5lciA9IGV2ZW50ID0+IHRoaXMuX29uTW91c2VNb3ZlKGV2ZW50IGFzIE1vdXNlRXZlbnQpO1xuICAgIHRoaXMuX21vdXNlVXBMaXN0ZW5lciA9IGV2ZW50ID0+IHRoaXMuX29uTW91c2VVcChldmVudCBhcyBNb3VzZUV2ZW50KTtcbiAgICB0aGlzLl9jb3JlU2VydmljZS5vblVzZXJJbnB1dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5oYXNTZWxlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5jbGVhclNlbGVjdGlvbigpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuX3RyaW1MaXN0ZW5lciA9IHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLmxpbmVzLm9uVHJpbShhbW91bnQgPT4gdGhpcy5fb25UcmltKGFtb3VudCkpO1xuICAgIHRoaXMucmVnaXN0ZXIodGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXJzLm9uQnVmZmVyQWN0aXZhdGUoZSA9PiB0aGlzLl9vbkJ1ZmZlckFjdGl2YXRlKGUpKSk7XG5cbiAgICB0aGlzLmVuYWJsZSgpO1xuXG4gICAgdGhpcy5fbW9kZWwgPSBuZXcgU2VsZWN0aW9uTW9kZWwodGhpcy5fYnVmZmVyU2VydmljZSk7XG4gICAgdGhpcy5fYWN0aXZlU2VsZWN0aW9uTW9kZSA9IFNlbGVjdGlvbk1vZGUuTk9STUFMO1xuICB9XG5cbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5fcmVtb3ZlTW91c2VEb3duTGlzdGVuZXJzKCk7XG4gIH1cblxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XG4gICAgdGhpcy5jbGVhclNlbGVjdGlvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc2FibGVzIHRoZSBzZWxlY3Rpb24gbWFuYWdlci4gVGhpcyBpcyB1c2VmdWwgZm9yIHdoZW4gdGVybWluYWwgbW91c2VcbiAgICogYXJlIGVuYWJsZWQuXG4gICAqL1xuICBwdWJsaWMgZGlzYWJsZSgpOiB2b2lkIHtcbiAgICB0aGlzLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgdGhpcy5fZW5hYmxlZCA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuYWJsZSB0aGUgc2VsZWN0aW9uIG1hbmFnZXIuXG4gICAqL1xuICBwdWJsaWMgZW5hYmxlKCk6IHZvaWQge1xuICAgIHRoaXMuX2VuYWJsZWQgPSB0cnVlO1xuICB9XG5cbiAgcHVibGljIGdldCBzZWxlY3Rpb25TdGFydCgpOiBbbnVtYmVyLCBudW1iZXJdIHwgdW5kZWZpbmVkIHsgcmV0dXJuIHRoaXMuX21vZGVsLmZpbmFsU2VsZWN0aW9uU3RhcnQ7IH1cbiAgcHVibGljIGdldCBzZWxlY3Rpb25FbmQoKTogW251bWJlciwgbnVtYmVyXSB8IHVuZGVmaW5lZCB7IHJldHVybiB0aGlzLl9tb2RlbC5maW5hbFNlbGVjdGlvbkVuZDsgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHdoZXRoZXIgdGhlcmUgaXMgYW4gYWN0aXZlIHRleHQgc2VsZWN0aW9uLlxuICAgKi9cbiAgcHVibGljIGdldCBoYXNTZWxlY3Rpb24oKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLl9tb2RlbC5maW5hbFNlbGVjdGlvblN0YXJ0O1xuICAgIGNvbnN0IGVuZCA9IHRoaXMuX21vZGVsLmZpbmFsU2VsZWN0aW9uRW5kO1xuICAgIGlmICghc3RhcnQgfHwgIWVuZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gc3RhcnRbMF0gIT09IGVuZFswXSB8fCBzdGFydFsxXSAhPT0gZW5kWzFdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHRleHQgY3VycmVudGx5IHNlbGVjdGVkLlxuICAgKi9cbiAgcHVibGljIGdldCBzZWxlY3Rpb25UZXh0KCk6IHN0cmluZyB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLl9tb2RlbC5maW5hbFNlbGVjdGlvblN0YXJ0O1xuICAgIGNvbnN0IGVuZCA9IHRoaXMuX21vZGVsLmZpbmFsU2VsZWN0aW9uRW5kO1xuICAgIGlmICghc3RhcnQgfHwgIWVuZCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyO1xuICAgIGNvbnN0IHJlc3VsdDogc3RyaW5nW10gPSBbXTtcblxuICAgIGlmICh0aGlzLl9hY3RpdmVTZWxlY3Rpb25Nb2RlID09PSBTZWxlY3Rpb25Nb2RlLkNPTFVNTikge1xuICAgICAgLy8gSWdub3JlIHplcm8gd2lkdGggc2VsZWN0aW9uc1xuICAgICAgaWYgKHN0YXJ0WzBdID09PSBlbmRbMF0pIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gc3RhcnRbMV07IGkgPD0gZW5kWzFdOyBpKyspIHtcbiAgICAgICAgY29uc3QgbGluZVRleHQgPSBidWZmZXIudHJhbnNsYXRlQnVmZmVyTGluZVRvU3RyaW5nKGksIHRydWUsIHN0YXJ0WzBdLCBlbmRbMF0pO1xuICAgICAgICByZXN1bHQucHVzaChsaW5lVGV4dCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEdldCBmaXJzdCByb3dcbiAgICAgIGNvbnN0IHN0YXJ0Um93RW5kQ29sID0gc3RhcnRbMV0gPT09IGVuZFsxXSA/IGVuZFswXSA6IHVuZGVmaW5lZDtcbiAgICAgIHJlc3VsdC5wdXNoKGJ1ZmZlci50cmFuc2xhdGVCdWZmZXJMaW5lVG9TdHJpbmcoc3RhcnRbMV0sIHRydWUsIHN0YXJ0WzBdLCBzdGFydFJvd0VuZENvbCkpO1xuXG4gICAgICAvLyBHZXQgbWlkZGxlIHJvd3NcbiAgICAgIGZvciAobGV0IGkgPSBzdGFydFsxXSArIDE7IGkgPD0gZW5kWzFdIC0gMTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlckxpbmUgPSBidWZmZXIubGluZXMuZ2V0KGkpO1xuICAgICAgICBjb25zdCBsaW5lVGV4dCA9IGJ1ZmZlci50cmFuc2xhdGVCdWZmZXJMaW5lVG9TdHJpbmcoaSwgdHJ1ZSk7XG4gICAgICAgIGlmIChidWZmZXJMaW5lPy5pc1dyYXBwZWQpIHtcbiAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdICs9IGxpbmVUZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGxpbmVUZXh0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBHZXQgZmluYWwgcm93XG4gICAgICBpZiAoc3RhcnRbMV0gIT09IGVuZFsxXSkge1xuICAgICAgICBjb25zdCBidWZmZXJMaW5lID0gYnVmZmVyLmxpbmVzLmdldChlbmRbMV0pO1xuICAgICAgICBjb25zdCBsaW5lVGV4dCA9IGJ1ZmZlci50cmFuc2xhdGVCdWZmZXJMaW5lVG9TdHJpbmcoZW5kWzFdLCB0cnVlLCAwLCBlbmRbMF0pO1xuICAgICAgICBpZiAoYnVmZmVyTGluZSAmJiBidWZmZXJMaW5lIS5pc1dyYXBwZWQpIHtcbiAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdICs9IGxpbmVUZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGxpbmVUZXh0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZvcm1hdCBzdHJpbmcgYnkgcmVwbGFjaW5nIG5vbi1icmVha2luZyBzcGFjZSBjaGFycyB3aXRoIHJlZ3VsYXIgc3BhY2VzXG4gICAgLy8gYW5kIGpvaW5pbmcgdGhlIGFycmF5IGludG8gYSBtdWx0aS1saW5lIHN0cmluZy5cbiAgICBjb25zdCBmb3JtYXR0ZWRSZXN1bHQgPSByZXN1bHQubWFwKGxpbmUgPT4ge1xuICAgICAgcmV0dXJuIGxpbmUucmVwbGFjZShBTExfTk9OX0JSRUFLSU5HX1NQQUNFX1JFR0VYLCAnICcpO1xuICAgIH0pLmpvaW4oQnJvd3Nlci5pc1dpbmRvd3MgPyAnXFxyXFxuJyA6ICdcXG4nKTtcblxuICAgIHJldHVybiBmb3JtYXR0ZWRSZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIHRoZSBjdXJyZW50IHRlcm1pbmFsIHNlbGVjdGlvbi5cbiAgICovXG4gIHB1YmxpYyBjbGVhclNlbGVjdGlvbigpOiB2b2lkIHtcbiAgICB0aGlzLl9tb2RlbC5jbGVhclNlbGVjdGlvbigpO1xuICAgIHRoaXMuX3JlbW92ZU1vdXNlRG93bkxpc3RlbmVycygpO1xuICAgIHRoaXMucmVmcmVzaCgpO1xuICAgIHRoaXMuX29uU2VsZWN0aW9uQ2hhbmdlLmZpcmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBRdWV1ZXMgYSByZWZyZXNoLCByZWRyYXdpbmcgdGhlIHNlbGVjdGlvbiBvbiB0aGUgbmV4dCBvcHBvcnR1bml0eS5cbiAgICogQHBhcmFtIGlzTGludXhNb3VzZVNlbGVjdGlvbiBXaGV0aGVyIHRoZSBzZWxlY3Rpb24gc2hvdWxkIGJlIHJlZ2lzdGVyZWQgYXMgYSBuZXdcbiAgICogc2VsZWN0aW9uIG9uIExpbnV4LlxuICAgKi9cbiAgcHVibGljIHJlZnJlc2goaXNMaW51eE1vdXNlU2VsZWN0aW9uPzogYm9vbGVhbik6IHZvaWQge1xuICAgIC8vIFF1ZXVlIHRoZSByZWZyZXNoIGZvciB0aGUgcmVuZGVyZXJcbiAgICBpZiAoIXRoaXMuX3JlZnJlc2hBbmltYXRpb25GcmFtZSkge1xuICAgICAgdGhpcy5fcmVmcmVzaEFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLl9yZWZyZXNoKCkpO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBwbGF0Zm9ybSBpcyBMaW51eCBhbmQgdGhlIHJlZnJlc2ggY2FsbCBjb21lcyBmcm9tIGEgbW91c2UgZXZlbnQsXG4gICAgLy8gd2UgbmVlZCB0byB1cGRhdGUgdGhlIHNlbGVjdGlvbiBmb3IgbWlkZGxlIGNsaWNrIHRvIHBhc3RlIHNlbGVjdGlvbi5cbiAgICBpZiAoQnJvd3Nlci5pc0xpbnV4ICYmIGlzTGludXhNb3VzZVNlbGVjdGlvbikge1xuICAgICAgY29uc3Qgc2VsZWN0aW9uVGV4dCA9IHRoaXMuc2VsZWN0aW9uVGV4dDtcbiAgICAgIGlmIChzZWxlY3Rpb25UZXh0Lmxlbmd0aCkge1xuICAgICAgICB0aGlzLl9vbkxpbnV4TW91c2VTZWxlY3Rpb24uZmlyZSh0aGlzLnNlbGVjdGlvblRleHQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB0aGUgcmVmcmVzaCBldmVudCwgY2F1c2luZyBjb25zdW1lcnMgdG8gcGljayBpdCB1cCBhbmQgcmVkcmF3IHRoZVxuICAgKiBzZWxlY3Rpb24gc3RhdGUuXG4gICAqL1xuICBwcml2YXRlIF9yZWZyZXNoKCk6IHZvaWQge1xuICAgIHRoaXMuX3JlZnJlc2hBbmltYXRpb25GcmFtZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9vblJlZHJhd1JlcXVlc3QuZmlyZSh7XG4gICAgICBzdGFydDogdGhpcy5fbW9kZWwuZmluYWxTZWxlY3Rpb25TdGFydCxcbiAgICAgIGVuZDogdGhpcy5fbW9kZWwuZmluYWxTZWxlY3Rpb25FbmQsXG4gICAgICBjb2x1bW5TZWxlY3RNb2RlOiB0aGlzLl9hY3RpdmVTZWxlY3Rpb25Nb2RlID09PSBTZWxlY3Rpb25Nb2RlLkNPTFVNTlxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgY3VycmVudCBjbGljayB3YXMgaW5zaWRlIHRoZSBjdXJyZW50IHNlbGVjdGlvblxuICAgKiBAcGFyYW0gZXZlbnQgVGhlIG1vdXNlIGV2ZW50XG4gICAqL1xuICBwcml2YXRlIF9pc0NsaWNrSW5TZWxlY3Rpb24oZXZlbnQ6IE1vdXNlRXZlbnQpOiBib29sZWFuIHtcbiAgICBjb25zdCBjb29yZHMgPSB0aGlzLl9nZXRNb3VzZUJ1ZmZlckNvb3JkcyhldmVudCk7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLl9tb2RlbC5maW5hbFNlbGVjdGlvblN0YXJ0O1xuICAgIGNvbnN0IGVuZCA9IHRoaXMuX21vZGVsLmZpbmFsU2VsZWN0aW9uRW5kO1xuXG4gICAgaWYgKCFzdGFydCB8fCAhZW5kIHx8ICFjb29yZHMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fYXJlQ29vcmRzSW5TZWxlY3Rpb24oY29vcmRzLCBzdGFydCwgZW5kKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfYXJlQ29vcmRzSW5TZWxlY3Rpb24oY29vcmRzOiBbbnVtYmVyLCBudW1iZXJdLCBzdGFydDogW251bWJlciwgbnVtYmVyXSwgZW5kOiBbbnVtYmVyLCBudW1iZXJdKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChjb29yZHNbMV0gPiBzdGFydFsxXSAmJiBjb29yZHNbMV0gPCBlbmRbMV0pIHx8XG4gICAgICAgIChzdGFydFsxXSA9PT0gZW5kWzFdICYmIGNvb3Jkc1sxXSA9PT0gc3RhcnRbMV0gJiYgY29vcmRzWzBdID49IHN0YXJ0WzBdICYmIGNvb3Jkc1swXSA8IGVuZFswXSkgfHxcbiAgICAgICAgKHN0YXJ0WzFdIDwgZW5kWzFdICYmIGNvb3Jkc1sxXSA9PT0gZW5kWzFdICYmIGNvb3Jkc1swXSA8IGVuZFswXSkgfHxcbiAgICAgICAgKHN0YXJ0WzFdIDwgZW5kWzFdICYmIGNvb3Jkc1sxXSA9PT0gc3RhcnRbMV0gJiYgY29vcmRzWzBdID49IHN0YXJ0WzBdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWxlY3RzIHdvcmQgYXQgdGhlIGN1cnJlbnQgbW91c2UgZXZlbnQgY29vcmRpbmF0ZXMuXG4gICAqIEBwYXJhbSBldmVudCBUaGUgbW91c2UgZXZlbnQuXG4gICAqL1xuICBwcml2YXRlIF9zZWxlY3RXb3JkQXRDdXJzb3IoZXZlbnQ6IE1vdXNlRXZlbnQsIGFsbG93V2hpdGVzcGFjZU9ubHlTZWxlY3Rpb246IGJvb2xlYW4pOiBib29sZWFuIHtcbiAgICAvLyBDaGVjayBpZiB0aGVyZSBpcyBhIGxpbmsgdW5kZXIgdGhlIGN1cnNvciBmaXJzdCBhbmQgc2VsZWN0IHRoYXQgaWYgc29cbiAgICBjb25zdCByYW5nZSA9IHRoaXMuX2xpbmtpZmllci5jdXJyZW50TGluaz8ubGluaz8ucmFuZ2U7XG4gICAgaWYgKHJhbmdlKSB7XG4gICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydCA9IFtyYW5nZS5zdGFydC54IC0gMSwgcmFuZ2Uuc3RhcnQueSAtIDFdO1xuICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uU3RhcnRMZW5ndGggPSBnZXRSYW5nZUxlbmd0aChyYW5nZSwgdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzKTtcbiAgICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZCA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGNvb3JkcyA9IHRoaXMuX2dldE1vdXNlQnVmZmVyQ29vcmRzKGV2ZW50KTtcbiAgICBpZiAoY29vcmRzKSB7XG4gICAgICB0aGlzLl9zZWxlY3RXb3JkQXQoY29vcmRzLCBhbGxvd1doaXRlc3BhY2VPbmx5U2VsZWN0aW9uKTtcbiAgICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZCA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogU2VsZWN0cyBhbGwgdGV4dCB3aXRoaW4gdGhlIHRlcm1pbmFsLlxuICAgKi9cbiAgcHVibGljIHNlbGVjdEFsbCgpOiB2b2lkIHtcbiAgICB0aGlzLl9tb2RlbC5pc1NlbGVjdEFsbEFjdGl2ZSA9IHRydWU7XG4gICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgdGhpcy5fb25TZWxlY3Rpb25DaGFuZ2UuZmlyZSgpO1xuICB9XG5cbiAgcHVibGljIHNlbGVjdExpbmVzKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fbW9kZWwuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICBzdGFydCA9IE1hdGgubWF4KHN0YXJ0LCAwKTtcbiAgICBlbmQgPSBNYXRoLm1pbihlbmQsIHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLmxpbmVzLmxlbmd0aCAtIDEpO1xuICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvblN0YXJ0ID0gWzAsIHN0YXJ0XTtcbiAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmQgPSBbdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzLCBlbmRdO1xuICAgIHRoaXMucmVmcmVzaCgpO1xuICAgIHRoaXMuX29uU2VsZWN0aW9uQ2hhbmdlLmZpcmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgdGhlIGJ1ZmZlciBiZWluZyB0cmltbWVkLCBhZGp1c3QgdGhlIHNlbGVjdGlvbiBwb3NpdGlvbi5cbiAgICogQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IHRoZSBidWZmZXIgaXMgYmVpbmcgdHJpbW1lZC5cbiAgICovXG4gIHByaXZhdGUgX29uVHJpbShhbW91bnQ6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IG5lZWRzUmVmcmVzaCA9IHRoaXMuX21vZGVsLm9uVHJpbShhbW91bnQpO1xuICAgIGlmIChuZWVkc1JlZnJlc2gpIHtcbiAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSAwLWJhc2VkIFt4LCB5XSBidWZmZXIgY29vcmRpbmF0ZXMgb2YgdGhlIGN1cnJlbnQgbW91c2UgZXZlbnQuXG4gICAqIEBwYXJhbSBldmVudCBUaGUgbW91c2UgZXZlbnQuXG4gICAqL1xuICBwcml2YXRlIF9nZXRNb3VzZUJ1ZmZlckNvb3JkcyhldmVudDogTW91c2VFdmVudCk6IFtudW1iZXIsIG51bWJlcl0gfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IGNvb3JkcyA9IHRoaXMuX21vdXNlU2VydmljZS5nZXRDb29yZHMoZXZlbnQsIHRoaXMuX3NjcmVlbkVsZW1lbnQsIHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scywgdGhpcy5fYnVmZmVyU2VydmljZS5yb3dzLCB0cnVlKTtcbiAgICBpZiAoIWNvb3Jkcykge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0IHRvIDAtYmFzZWRcbiAgICBjb29yZHNbMF0tLTtcbiAgICBjb29yZHNbMV0tLTtcblxuICAgIC8vIENvbnZlcnQgdmlld3BvcnQgY29vcmRzIHRvIGJ1ZmZlciBjb29yZHNcbiAgICBjb29yZHNbMV0gKz0gdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXIueWRpc3A7XG4gICAgcmV0dXJuIGNvb3JkcztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBhbW91bnQgdGhlIHZpZXdwb3J0IHNob3VsZCBiZSBzY3JvbGxlZCBiYXNlZCBvbiBob3cgZmFyIG91dCBvZiB0aGVcbiAgICogdGVybWluYWwgdGhlIG1vdXNlIGlzLlxuICAgKiBAcGFyYW0gZXZlbnQgVGhlIG1vdXNlIGV2ZW50LlxuICAgKi9cbiAgcHJpdmF0ZSBfZ2V0TW91c2VFdmVudFNjcm9sbEFtb3VudChldmVudDogTW91c2VFdmVudCk6IG51bWJlciB7XG4gICAgbGV0IG9mZnNldCA9IGdldENvb3Jkc1JlbGF0aXZlVG9FbGVtZW50KGV2ZW50LCB0aGlzLl9zY3JlZW5FbGVtZW50KVsxXTtcbiAgICBjb25zdCB0ZXJtaW5hbEhlaWdodCA9IHRoaXMuX3JlbmRlclNlcnZpY2UuZGltZW5zaW9ucy5jYW52YXNIZWlnaHQ7XG4gICAgaWYgKG9mZnNldCA+PSAwICYmIG9mZnNldCA8PSB0ZXJtaW5hbEhlaWdodCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChvZmZzZXQgPiB0ZXJtaW5hbEhlaWdodCkge1xuICAgICAgb2Zmc2V0IC09IHRlcm1pbmFsSGVpZ2h0O1xuICAgIH1cblxuICAgIG9mZnNldCA9IE1hdGgubWluKE1hdGgubWF4KG9mZnNldCwgLURSQUdfU0NST0xMX01BWF9USFJFU0hPTEQpLCBEUkFHX1NDUk9MTF9NQVhfVEhSRVNIT0xEKTtcbiAgICBvZmZzZXQgLz0gRFJBR19TQ1JPTExfTUFYX1RIUkVTSE9MRDtcbiAgICByZXR1cm4gKG9mZnNldCAvIE1hdGguYWJzKG9mZnNldCkpICsgTWF0aC5yb3VuZChvZmZzZXQgKiAoRFJBR19TQ1JPTExfTUFYX1NQRUVEIC0gMSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgc2VsZWN0aW9uIG1hbmFnZXIgc2hvdWxkIGZvcmNlIHNlbGVjdGlvbiwgcmVnYXJkbGVzcyBvZlxuICAgKiB3aGV0aGVyIHRoZSB0ZXJtaW5hbCBpcyBpbiBtb3VzZSBldmVudHMgbW9kZS5cbiAgICogQHBhcmFtIGV2ZW50IFRoZSBtb3VzZSBldmVudC5cbiAgICovXG4gIHB1YmxpYyBzaG91bGRGb3JjZVNlbGVjdGlvbihldmVudDogTW91c2VFdmVudCk6IGJvb2xlYW4ge1xuICAgIGlmIChCcm93c2VyLmlzTWFjKSB7XG4gICAgICByZXR1cm4gZXZlbnQuYWx0S2V5ICYmIHRoaXMuX29wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMubWFjT3B0aW9uQ2xpY2tGb3JjZXNTZWxlY3Rpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIGV2ZW50LnNoaWZ0S2V5O1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgdGUgbW91c2Vkb3duIGV2ZW50LCBzZXR0aW5nIHVwIGZvciBhIG5ldyBzZWxlY3Rpb24uXG4gICAqIEBwYXJhbSBldmVudCBUaGUgbW91c2Vkb3duIGV2ZW50LlxuICAgKi9cbiAgcHVibGljIG9uTW91c2VEb3duKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5fbW91c2VEb3duVGltZVN0YW1wID0gZXZlbnQudGltZVN0YW1wO1xuICAgIC8vIElmIHdlIGhhdmUgc2VsZWN0aW9uLCB3ZSB3YW50IHRoZSBjb250ZXh0IG1lbnUgb24gcmlnaHQgY2xpY2sgZXZlbiBpZiB0aGVcbiAgICAvLyB0ZXJtaW5hbCBpcyBpbiBtb3VzZSBtb2RlLlxuICAgIGlmIChldmVudC5idXR0b24gPT09IDIgJiYgdGhpcy5oYXNTZWxlY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBPbmx5IGFjdGlvbiB0aGUgcHJpbWFyeSBidXR0b25cbiAgICBpZiAoZXZlbnQuYnV0dG9uICE9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQWxsb3cgc2VsZWN0aW9uIHdoZW4gdXNpbmcgYSBzcGVjaWZpYyBtb2RpZmllciBrZXksIGV2ZW4gd2hlbiBkaXNhYmxlZFxuICAgIGlmICghdGhpcy5fZW5hYmxlZCkge1xuICAgICAgaWYgKCF0aGlzLnNob3VsZEZvcmNlU2VsZWN0aW9uKGV2ZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIERvbid0IHNlbmQgdGhlIG1vdXNlIGRvd24gZXZlbnQgdG8gdGhlIGN1cnJlbnQgcHJvY2Vzcywgd2Ugd2FudCB0byBzZWxlY3RcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICAgIC8vIFRlbGwgdGhlIGJyb3dzZXIgbm90IHRvIHN0YXJ0IGEgcmVndWxhciBzZWxlY3Rpb25cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgLy8gUmVzZXQgZHJhZyBzY3JvbGwgc3RhdGVcbiAgICB0aGlzLl9kcmFnU2Nyb2xsQW1vdW50ID0gMDtcblxuICAgIGlmICh0aGlzLl9lbmFibGVkICYmIGV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICB0aGlzLl9vbkluY3JlbWVudGFsQ2xpY2soZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZXZlbnQuZGV0YWlsID09PSAxKSB7XG4gICAgICAgIHRoaXMuX29uU2luZ2xlQ2xpY2soZXZlbnQpO1xuICAgICAgfSBlbHNlIGlmIChldmVudC5kZXRhaWwgPT09IDIpIHtcbiAgICAgICAgdGhpcy5fb25Eb3VibGVDbGljayhldmVudCk7XG4gICAgICB9IGVsc2UgaWYgKGV2ZW50LmRldGFpbCA9PT0gMykge1xuICAgICAgICB0aGlzLl9vblRyaXBsZUNsaWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9hZGRNb3VzZURvd25MaXN0ZW5lcnMoKTtcbiAgICB0aGlzLnJlZnJlc2godHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBsaXN0ZW5lcnMgd2hlbiBtb3VzZWRvd24gaXMgdHJpZ2dlcmVkLlxuICAgKi9cbiAgcHJpdmF0ZSBfYWRkTW91c2VEb3duTGlzdGVuZXJzKCk6IHZvaWQge1xuICAgIC8vIExpc3RlbiBvbiB0aGUgZG9jdW1lbnQgc28gdGhhdCBkcmFnZ2luZyBvdXRzaWRlIG9mIHZpZXdwb3J0IHdvcmtzXG4gICAgaWYgKHRoaXMuX3NjcmVlbkVsZW1lbnQub3duZXJEb2N1bWVudCkge1xuICAgICAgdGhpcy5fc2NyZWVuRWxlbWVudC5vd25lckRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuX21vdXNlTW92ZUxpc3RlbmVyKTtcbiAgICAgIHRoaXMuX3NjcmVlbkVsZW1lbnQub3duZXJEb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5fbW91c2VVcExpc3RlbmVyKTtcbiAgICB9XG4gICAgdGhpcy5fZHJhZ1Njcm9sbEludGVydmFsVGltZXIgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4gdGhpcy5fZHJhZ1Njcm9sbCgpLCBEUkFHX1NDUk9MTF9JTlRFUlZBTCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgbGlzdGVuZXJzIHRoYXQgYXJlIHJlZ2lzdGVyZWQgd2hlbiBtb3VzZWRvd24gaXMgdHJpZ2dlcmVkLlxuICAgKi9cbiAgcHJpdmF0ZSBfcmVtb3ZlTW91c2VEb3duTGlzdGVuZXJzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9zY3JlZW5FbGVtZW50Lm93bmVyRG9jdW1lbnQpIHtcbiAgICAgIHRoaXMuX3NjcmVlbkVsZW1lbnQub3duZXJEb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLl9tb3VzZU1vdmVMaXN0ZW5lcik7XG4gICAgICB0aGlzLl9zY3JlZW5FbGVtZW50Lm93bmVyRG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuX21vdXNlVXBMaXN0ZW5lcik7XG4gICAgfVxuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5fZHJhZ1Njcm9sbEludGVydmFsVGltZXIpO1xuICAgIHRoaXMuX2RyYWdTY3JvbGxJbnRlcnZhbFRpbWVyID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm1zIGFuIGluY3JlbWVudGFsIGNsaWNrLCBzZXR0aW5nIHRoZSBzZWxlY3Rpb24gZW5kIHBvc2l0aW9uIHRvIHRoZSBtb3VzZVxuICAgKiBwb3NpdGlvbi5cbiAgICogQHBhcmFtIGV2ZW50IFRoZSBtb3VzZSBldmVudC5cbiAgICovXG4gIHByaXZhdGUgX29uSW5jcmVtZW50YWxDbGljayhldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydCkge1xuICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kID0gdGhpcy5fZ2V0TW91c2VCdWZmZXJDb29yZHMoZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIHNpbmdsZSBjbGljaywgcmVzZXR0aW5nIHJlbGV2YW50IHN0YXRlIGFuZCBzZXR0aW5nIHRoZSBzZWxlY3Rpb25cbiAgICogc3RhcnQgcG9zaXRpb24uXG4gICAqIEBwYXJhbSBldmVudCBUaGUgbW91c2UgZXZlbnQuXG4gICAqL1xuICBwcml2YXRlIF9vblNpbmdsZUNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uU3RhcnRMZW5ndGggPSAwO1xuICAgIHRoaXMuX21vZGVsLmlzU2VsZWN0QWxsQWN0aXZlID0gZmFsc2U7XG4gICAgdGhpcy5fYWN0aXZlU2VsZWN0aW9uTW9kZSA9IHRoaXMuc2hvdWxkQ29sdW1uU2VsZWN0KGV2ZW50KSA/IFNlbGVjdGlvbk1vZGUuQ09MVU1OIDogU2VsZWN0aW9uTW9kZS5OT1JNQUw7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBuZXcgc2VsZWN0aW9uXG4gICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uU3RhcnQgPSB0aGlzLl9nZXRNb3VzZUJ1ZmZlckNvb3JkcyhldmVudCk7XG4gICAgaWYgKCF0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBFbnN1cmUgdGhlIGxpbmUgZXhpc3RzXG4gICAgY29uc3QgbGluZSA9IHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLmxpbmVzLmdldCh0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydFsxXSk7XG4gICAgaWYgKCFsaW5lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGVhcmx5IGlmIHRoZSBjbGljayBldmVudCBpcyBub3QgaW4gdGhlIGJ1ZmZlciAoZWcuIGluIHNjcm9sbCBiYXIpXG4gICAgaWYgKGxpbmUubGVuZ3RoID09PSB0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydFswXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBtb3VzZSBpcyBvdmVyIHRoZSBzZWNvbmQgaGFsZiBvZiBhIHdpZGUgY2hhcmFjdGVyLCBhZGp1c3QgdGhlXG4gICAgLy8gc2VsZWN0aW9uIHRvIGNvdmVyIHRoZSB3aG9sZSBjaGFyYWN0ZXJcbiAgICBpZiAobGluZS5oYXNXaWR0aCh0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydFswXSkgPT09IDApIHtcbiAgICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvblN0YXJ0WzBdKys7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm1zIGEgZG91YmxlIGNsaWNrLCBzZWxlY3RpbmcgdGhlIGN1cnJlbnQgd29yZC5cbiAgICogQHBhcmFtIGV2ZW50IFRoZSBtb3VzZSBldmVudC5cbiAgICovXG4gIHByaXZhdGUgX29uRG91YmxlQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fc2VsZWN0V29yZEF0Q3Vyc29yKGV2ZW50LCB0cnVlKSkge1xuICAgICAgdGhpcy5fYWN0aXZlU2VsZWN0aW9uTW9kZSA9IFNlbGVjdGlvbk1vZGUuV09SRDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgYSB0cmlwbGUgY2xpY2ssIHNlbGVjdGluZyB0aGUgY3VycmVudCBsaW5lIGFuZCBhY3RpdmF0aW5nIGxpbmVcbiAgICogc2VsZWN0IG1vZGUuXG4gICAqIEBwYXJhbSBldmVudCBUaGUgbW91c2UgZXZlbnQuXG4gICAqL1xuICBwcml2YXRlIF9vblRyaXBsZUNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgY29uc3QgY29vcmRzID0gdGhpcy5fZ2V0TW91c2VCdWZmZXJDb29yZHMoZXZlbnQpO1xuICAgIGlmIChjb29yZHMpIHtcbiAgICAgIHRoaXMuX2FjdGl2ZVNlbGVjdGlvbk1vZGUgPSBTZWxlY3Rpb25Nb2RlLkxJTkU7XG4gICAgICB0aGlzLl9zZWxlY3RMaW5lQXQoY29vcmRzWzFdKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBzZWxlY3Rpb24gbWFuYWdlciBzaG91bGQgb3BlcmF0ZSBpbiBjb2x1bW4gc2VsZWN0IG1vZGVcbiAgICogQHBhcmFtIGV2ZW50IHRoZSBtb3VzZSBvciBrZXlib2FyZCBldmVudFxuICAgKi9cbiAgcHVibGljIHNob3VsZENvbHVtblNlbGVjdChldmVudDogS2V5Ym9hcmRFdmVudCB8IE1vdXNlRXZlbnQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZXZlbnQuYWx0S2V5ICYmICEoQnJvd3Nlci5pc01hYyAmJiB0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLm1hY09wdGlvbkNsaWNrRm9yY2VzU2VsZWN0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSBtb3VzZW1vdmUgZXZlbnQgd2hlbiB0aGUgbW91c2UgYnV0dG9uIGlzIGRvd24sIHJlY29yZGluZyB0aGVcbiAgICogZW5kIG9mIHRoZSBzZWxlY3Rpb24gYW5kIHJlZnJlc2hpbmcgdGhlIHNlbGVjdGlvbi5cbiAgICogQHBhcmFtIGV2ZW50IFRoZSBtb3VzZW1vdmUgZXZlbnQuXG4gICAqL1xuICBwcml2YXRlIF9vbk1vdXNlTW92ZShldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIC8vIElmIHRoZSBtb3VzZW1vdmUgbGlzdGVuZXIgaXMgYWN0aXZlIGl0IG1lYW5zIHRoYXQgYSBzZWxlY3Rpb24gaXNcbiAgICAvLyBjdXJyZW50bHkgYmVpbmcgbWFkZSwgd2Ugc2hvdWxkIHN0b3AgcHJvcGFnYXRpb24gdG8gcHJldmVudCBtb3VzZSBldmVudHNcbiAgICAvLyB0byBiZSBzZW50IHRvIHRoZSBwdHkuXG4gICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cbiAgICAvLyBEbyBub3RoaW5nIGlmIHRoZXJlIGlzIG5vIHNlbGVjdGlvbiBzdGFydCwgdGhpcyBjYW4gaGFwcGVuIGlmIHRoZSBmaXJzdFxuICAgIC8vIGNsaWNrIGluIHRoZSB0ZXJtaW5hbCBpcyBhbiBpbmNyZW1lbnRhbCBjbGlja1xuICAgIGlmICghdGhpcy5fbW9kZWwuc2VsZWN0aW9uU3RhcnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBSZWNvcmQgdGhlIHByZXZpb3VzIHBvc2l0aW9uIHNvIHdlIGtub3cgd2hldGhlciB0byByZWRyYXcgdGhlIHNlbGVjdGlvblxuICAgIC8vIGF0IHRoZSBlbmQuXG4gICAgY29uc3QgcHJldmlvdXNTZWxlY3Rpb25FbmQgPSB0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmQgPyBbdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kWzBdLCB0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmRbMV1dIDogbnVsbDtcblxuICAgIC8vIFNldCB0aGUgaW5pdGlhbCBzZWxlY3Rpb24gZW5kIGJhc2VkIG9uIHRoZSBtb3VzZSBjb29yZGluYXRlc1xuICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZCA9IHRoaXMuX2dldE1vdXNlQnVmZmVyQ29vcmRzKGV2ZW50KTtcbiAgICBpZiAoIXRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZCkge1xuICAgICAgdGhpcy5yZWZyZXNoKHRydWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNlbGVjdCB0aGUgZW50aXJlIGxpbmUgaWYgbGluZSBzZWxlY3QgbW9kZSBpcyBhY3RpdmUuXG4gICAgaWYgKHRoaXMuX2FjdGl2ZVNlbGVjdGlvbk1vZGUgPT09IFNlbGVjdGlvbk1vZGUuTElORSkge1xuICAgICAgaWYgKHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZFsxXSA8IHRoaXMuX21vZGVsLnNlbGVjdGlvblN0YXJ0WzFdKSB7XG4gICAgICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZFswXSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmRbMF0gPSB0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHM7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLl9hY3RpdmVTZWxlY3Rpb25Nb2RlID09PSBTZWxlY3Rpb25Nb2RlLldPUkQpIHtcbiAgICAgIHRoaXMuX3NlbGVjdFRvV29yZEF0KHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZCk7XG4gICAgfVxuXG4gICAgLy8gRGV0ZXJtaW5lIHRoZSBhbW91bnQgb2Ygc2Nyb2xsaW5nIHRoYXQgd2lsbCBoYXBwZW4uXG4gICAgdGhpcy5fZHJhZ1Njcm9sbEFtb3VudCA9IHRoaXMuX2dldE1vdXNlRXZlbnRTY3JvbGxBbW91bnQoZXZlbnQpO1xuXG4gICAgLy8gSWYgdGhlIGN1cnNvciB3YXMgYWJvdmUgb3IgYmVsb3cgdGhlIHZpZXdwb3J0LCBtYWtlIHN1cmUgaXQncyBhdCB0aGVcbiAgICAvLyBzdGFydCBvciBlbmQgb2YgdGhlIHZpZXdwb3J0IHJlc3BlY3RpdmVseS4gVGhpcyBzaG91bGQgb25seSBoYXBwZW4gd2hlblxuICAgIC8vIE5PVCBpbiBjb2x1bW4gc2VsZWN0IG1vZGUuXG4gICAgaWYgKHRoaXMuX2FjdGl2ZVNlbGVjdGlvbk1vZGUgIT09IFNlbGVjdGlvbk1vZGUuQ09MVU1OKSB7XG4gICAgICBpZiAodGhpcy5fZHJhZ1Njcm9sbEFtb3VudCA+IDApIHtcbiAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kWzBdID0gdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl9kcmFnU2Nyb2xsQW1vdW50IDwgMCkge1xuICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmRbMF0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIHRoZSBjaGFyYWN0ZXIgaXMgYSB3aWRlIGNoYXJhY3RlciBpbmNsdWRlIHRoZSBjZWxsIHRvIHRoZSByaWdodCBpbiB0aGVcbiAgICAvLyBzZWxlY3Rpb24uIE5vdGUgdGhhdCBzZWxlY3Rpb25zIGF0IHRoZSB2ZXJ5IGVuZCBvZiB0aGUgbGluZSB3aWxsIG5ldmVyXG4gICAgLy8gaGF2ZSBhIGNoYXJhY3Rlci5cbiAgICBjb25zdCBidWZmZXIgPSB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlcjtcbiAgICBpZiAodGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kWzFdIDwgYnVmZmVyLmxpbmVzLmxlbmd0aCkge1xuICAgICAgY29uc3QgbGluZSA9IGJ1ZmZlci5saW5lcy5nZXQodGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kWzFdKTtcbiAgICAgIGlmIChsaW5lICYmIGxpbmUuaGFzV2lkdGgodGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kWzBdKSA9PT0gMCkge1xuICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmRbMF0rKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBPbmx5IGRyYXcgaGVyZSBpZiB0aGUgc2VsZWN0aW9uIGNoYW5nZXMuXG4gICAgaWYgKCFwcmV2aW91c1NlbGVjdGlvbkVuZCB8fFxuICAgICAgcHJldmlvdXNTZWxlY3Rpb25FbmRbMF0gIT09IHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZFswXSB8fFxuICAgICAgcHJldmlvdXNTZWxlY3Rpb25FbmRbMV0gIT09IHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZFsxXSkge1xuICAgICAgdGhpcy5yZWZyZXNoKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgY2FsbGJhY2sgdGhhdCBvY2N1cnMgZXZlcnkgRFJBR19TQ1JPTExfSU5URVJWQUwgbXMgdGhhdCBkb2VzIHRoZVxuICAgKiBzY3JvbGxpbmcgb2YgdGhlIHZpZXdwb3J0LlxuICAgKi9cbiAgcHJpdmF0ZSBfZHJhZ1Njcm9sbCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZCB8fCAhdGhpcy5fbW9kZWwuc2VsZWN0aW9uU3RhcnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2RyYWdTY3JvbGxBbW91bnQpIHtcbiAgICAgIHRoaXMuX29uUmVxdWVzdFNjcm9sbExpbmVzLmZpcmUoeyBhbW91bnQ6IHRoaXMuX2RyYWdTY3JvbGxBbW91bnQsIHN1cHByZXNzU2Nyb2xsRXZlbnQ6IGZhbHNlIH0pO1xuICAgICAgLy8gUmUtZXZhbHVhdGUgc2VsZWN0aW9uXG4gICAgICAvLyBJZiB0aGUgY3Vyc29yIHdhcyBhYm92ZSBvciBiZWxvdyB0aGUgdmlld3BvcnQsIG1ha2Ugc3VyZSBpdCdzIGF0IHRoZVxuICAgICAgLy8gc3RhcnQgb3IgZW5kIG9mIHRoZSB2aWV3cG9ydCByZXNwZWN0aXZlbHkuIFRoaXMgc2hvdWxkIG9ubHkgaGFwcGVuIHdoZW5cbiAgICAgIC8vIE5PVCBpbiBjb2x1bW4gc2VsZWN0IG1vZGUuXG4gICAgICBjb25zdCBidWZmZXIgPSB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlcjtcbiAgICAgIGlmICh0aGlzLl9kcmFnU2Nyb2xsQW1vdW50ID4gMCkge1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlU2VsZWN0aW9uTW9kZSAhPT0gU2VsZWN0aW9uTW9kZS5DT0xVTU4pIHtcbiAgICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmRbMF0gPSB0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kWzFdID0gTWF0aC5taW4oYnVmZmVyLnlkaXNwICsgdGhpcy5fYnVmZmVyU2VydmljZS5yb3dzLCBidWZmZXIubGluZXMubGVuZ3RoIC0gMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlU2VsZWN0aW9uTW9kZSAhPT0gU2VsZWN0aW9uTW9kZS5DT0xVTU4pIHtcbiAgICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmRbMF0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZFsxXSA9IGJ1ZmZlci55ZGlzcDtcbiAgICAgIH1cbiAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSBtb3VzZXVwIGV2ZW50LCByZW1vdmluZyB0aGUgbW91c2Vkb3duIGxpc3RlbmVycy5cbiAgICogQHBhcmFtIGV2ZW50IFRoZSBtb3VzZXVwIGV2ZW50LlxuICAgKi9cbiAgcHJpdmF0ZSBfb25Nb3VzZVVwKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgY29uc3QgdGltZUVsYXBzZWQgPSBldmVudC50aW1lU3RhbXAgLSB0aGlzLl9tb3VzZURvd25UaW1lU3RhbXA7XG5cbiAgICB0aGlzLl9yZW1vdmVNb3VzZURvd25MaXN0ZW5lcnMoKTtcblxuICAgIGlmICh0aGlzLnNlbGVjdGlvblRleHQubGVuZ3RoIDw9IDEgJiYgdGltZUVsYXBzZWQgPCBBTFRfQ0xJQ0tfTU9WRV9DVVJTT1JfVElNRSAmJiBldmVudC5hbHRLZXkgJiYgdGhpcy5fb3B0aW9uc1NlcnZpY2UuZ2V0T3B0aW9uKCdhbHRDbGlja01vdmVzQ3Vyc29yJykpIHtcbiAgICAgIGlmICh0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlci55YmFzZSA9PT0gdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXIueWRpc3ApIHtcbiAgICAgICAgY29uc3QgY29vcmRpbmF0ZXMgPSB0aGlzLl9tb3VzZVNlcnZpY2UuZ2V0Q29vcmRzKFxuICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgIHRoaXMuX2VsZW1lbnQsXG4gICAgICAgICAgdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzLFxuICAgICAgICAgIHRoaXMuX2J1ZmZlclNlcnZpY2Uucm93cyxcbiAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuICAgICAgICBpZiAoY29vcmRpbmF0ZXMgJiYgY29vcmRpbmF0ZXNbMF0gIT09IHVuZGVmaW5lZCAmJiBjb29yZGluYXRlc1sxXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29uc3Qgc2VxdWVuY2UgPSBtb3ZlVG9DZWxsU2VxdWVuY2UoY29vcmRpbmF0ZXNbMF0gLSAxLCBjb29yZGluYXRlc1sxXSAtIDEsIHRoaXMuX2J1ZmZlclNlcnZpY2UsIHRoaXMuX2NvcmVTZXJ2aWNlLmRlY1ByaXZhdGVNb2Rlcy5hcHBsaWNhdGlvbkN1cnNvcktleXMpO1xuICAgICAgICAgIHRoaXMuX2NvcmVTZXJ2aWNlLnRyaWdnZXJEYXRhRXZlbnQoc2VxdWVuY2UsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2ZpcmVFdmVudElmU2VsZWN0aW9uQ2hhbmdlZCgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2ZpcmVFdmVudElmU2VsZWN0aW9uQ2hhbmdlZCgpOiB2b2lkIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuX21vZGVsLmZpbmFsU2VsZWN0aW9uU3RhcnQ7XG4gICAgY29uc3QgZW5kID0gdGhpcy5fbW9kZWwuZmluYWxTZWxlY3Rpb25FbmQ7XG4gICAgY29uc3QgaGFzU2VsZWN0aW9uID0gISFzdGFydCAmJiAhIWVuZCAmJiAoc3RhcnRbMF0gIT09IGVuZFswXSB8fCBzdGFydFsxXSAhPT0gZW5kWzFdKTtcblxuICAgIGlmICghaGFzU2VsZWN0aW9uKSB7XG4gICAgICBpZiAodGhpcy5fb2xkSGFzU2VsZWN0aW9uKSB7XG4gICAgICAgIHRoaXMuX2ZpcmVPblNlbGVjdGlvbkNoYW5nZShzdGFydCwgZW5kLCBoYXNTZWxlY3Rpb24pO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNhbml0eSBjaGVjaywgdGhlc2Ugc2hvdWxkIG5vdCBiZSB1bmRlZmluZWQgYXMgdGhlcmUgaXMgYSBzZWxlY3Rpb25cbiAgICBpZiAoIXN0YXJ0IHx8ICFlbmQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX29sZFNlbGVjdGlvblN0YXJ0IHx8ICF0aGlzLl9vbGRTZWxlY3Rpb25FbmQgfHwgKFxuICAgICAgc3RhcnRbMF0gIT09IHRoaXMuX29sZFNlbGVjdGlvblN0YXJ0WzBdIHx8IHN0YXJ0WzFdICE9PSB0aGlzLl9vbGRTZWxlY3Rpb25TdGFydFsxXSB8fFxuICAgICAgZW5kWzBdICE9PSB0aGlzLl9vbGRTZWxlY3Rpb25FbmRbMF0gfHwgZW5kWzFdICE9PSB0aGlzLl9vbGRTZWxlY3Rpb25FbmRbMV0pKSB7XG5cbiAgICAgIHRoaXMuX2ZpcmVPblNlbGVjdGlvbkNoYW5nZShzdGFydCwgZW5kLCBoYXNTZWxlY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2ZpcmVPblNlbGVjdGlvbkNoYW5nZShzdGFydDogW251bWJlciwgbnVtYmVyXSB8IHVuZGVmaW5lZCwgZW5kOiBbbnVtYmVyLCBudW1iZXJdIHwgdW5kZWZpbmVkLCBoYXNTZWxlY3Rpb246IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLl9vbGRTZWxlY3Rpb25TdGFydCA9IHN0YXJ0O1xuICAgIHRoaXMuX29sZFNlbGVjdGlvbkVuZCA9IGVuZDtcbiAgICB0aGlzLl9vbGRIYXNTZWxlY3Rpb24gPSBoYXNTZWxlY3Rpb247XG4gICAgdGhpcy5fb25TZWxlY3Rpb25DaGFuZ2UuZmlyZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBfb25CdWZmZXJBY3RpdmF0ZShlOiB7YWN0aXZlQnVmZmVyOiBJQnVmZmVyLCBpbmFjdGl2ZUJ1ZmZlcjogSUJ1ZmZlcn0pOiB2b2lkIHtcbiAgICB0aGlzLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgLy8gT25seSBhZGp1c3QgdGhlIHNlbGVjdGlvbiBvbiB0cmltLCBzaGlmdEVsZW1lbnRzIGlzIHJhcmVseSB1c2VkIChvbmx5IGluXG4gICAgLy8gcmV2ZXJzZUluZGV4KSBhbmQgZGVsZXRlIGluIGEgc3BsaWNlIGlzIG9ubHkgZXZlciB1c2VkIHdoZW4gdGhlIHNhbWVcbiAgICAvLyBudW1iZXIgb2YgZWxlbWVudHMgd2FzIGp1c3QgYWRkZWQuIEdpdmVuIHRoaXMgaXMgY291bGQgYWN0dWFsbHkgYmVcbiAgICAvLyBiZW5lZmljaWFsIHRvIGxlYXZlIHRoZSBzZWxlY3Rpb24gYXMgaXMgZm9yIHRoZXNlIGNhc2VzLlxuICAgIHRoaXMuX3RyaW1MaXN0ZW5lci5kaXNwb3NlKCk7XG4gICAgdGhpcy5fdHJpbUxpc3RlbmVyID0gZS5hY3RpdmVCdWZmZXIubGluZXMub25UcmltKGFtb3VudCA9PiB0aGlzLl9vblRyaW0oYW1vdW50KSk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYSB2aWV3cG9ydCBjb2x1bW4gdG8gdGhlIGNoYXJhY3RlciBpbmRleCBvbiB0aGUgYnVmZmVyIGxpbmUsIHRoZVxuICAgKiBsYXR0ZXIgdGFrZXMgaW50byBhY2NvdW50IHdpZGUgY2hhcmFjdGVycy5cbiAgICogQHBhcmFtIGNvb3JkcyBUaGUgY29vcmRpbmF0ZXMgdG8gZmluZCB0aGUgMiBpbmRleCBmb3IuXG4gICAqL1xuICBwcml2YXRlIF9jb252ZXJ0Vmlld3BvcnRDb2xUb0NoYXJhY3RlckluZGV4KGJ1ZmZlckxpbmU6IElCdWZmZXJMaW5lLCBjb29yZHM6IFtudW1iZXIsIG51bWJlcl0pOiBudW1iZXIge1xuICAgIGxldCBjaGFySW5kZXggPSBjb29yZHNbMF07XG4gICAgZm9yIChsZXQgaSA9IDA7IGNvb3Jkc1swXSA+PSBpOyBpKyspIHtcbiAgICAgIGNvbnN0IGxlbmd0aCA9IGJ1ZmZlckxpbmUubG9hZENlbGwoaSwgdGhpcy5fd29ya0NlbGwpLmdldENoYXJzKCkubGVuZ3RoO1xuICAgICAgaWYgKHRoaXMuX3dvcmtDZWxsLmdldFdpZHRoKCkgPT09IDApIHtcbiAgICAgICAgLy8gV2lkZSBjaGFyYWN0ZXJzIGFyZW4ndCBpbmNsdWRlZCBpbiB0aGUgbGluZSBzdHJpbmcgc28gZGVjcmVtZW50IHRoZVxuICAgICAgICAvLyBpbmRleCBzbyB0aGUgaW5kZXggaXMgYmFjayBvbiB0aGUgd2lkZSBjaGFyYWN0ZXIuXG4gICAgICAgIGNoYXJJbmRleC0tO1xuICAgICAgfSBlbHNlIGlmIChsZW5ndGggPiAxICYmIGNvb3Jkc1swXSAhPT0gaSkge1xuICAgICAgICAvLyBFbW9qaXMgdGFrZSB1cCBtdWx0aXBsZSBjaGFyYWN0ZXJzLCBzbyBhZGp1c3QgYWNjb3JkaW5nbHkuIEZvciB0aGVzZVxuICAgICAgICAvLyB3ZSBkb24ndCB3YW50IG90IGluY2x1ZGUgdGhlIGNoYXJhY3RlciBhdCB0aGUgY29sdW1uIGFzIHdlJ3JlXG4gICAgICAgIC8vIHJldHVybmluZyB0aGUgc3RhcnQgaW5kZXggaW4gdGhlIHN0cmluZywgbm90IHRoZSBlbmQgaW5kZXguXG4gICAgICAgIGNoYXJJbmRleCArPSBsZW5ndGggLSAxO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hhckluZGV4O1xuICB9XG5cbiAgcHVibGljIHNldFNlbGVjdGlvbihjb2w6IG51bWJlciwgcm93OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fbW9kZWwuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICB0aGlzLl9yZW1vdmVNb3VzZURvd25MaXN0ZW5lcnMoKTtcbiAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydCA9IFtjb2wsIHJvd107XG4gICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uU3RhcnRMZW5ndGggPSBsZW5ndGg7XG4gICAgdGhpcy5yZWZyZXNoKCk7XG4gIH1cblxuICBwdWJsaWMgcmlnaHRDbGlja1NlbGVjdChldjogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5faXNDbGlja0luU2VsZWN0aW9uKGV2KSkge1xuICAgICAgaWYgKHRoaXMuX3NlbGVjdFdvcmRBdEN1cnNvcihldiwgZmFsc2UpKSB7XG4gICAgICAgIHRoaXMucmVmcmVzaCh0cnVlKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2ZpcmVFdmVudElmU2VsZWN0aW9uQ2hhbmdlZCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHBvc2l0aW9uYWwgaW5mb3JtYXRpb24gZm9yIHRoZSB3b3JkIGF0IHRoZSBjb29yZGluYXRlZCBzcGVjaWZpZWQuXG4gICAqIEBwYXJhbSBjb29yZHMgVGhlIGNvb3JkaW5hdGVzIHRvIGdldCB0aGUgd29yZCBhdC5cbiAgICovXG4gIHByaXZhdGUgX2dldFdvcmRBdChjb29yZHM6IFtudW1iZXIsIG51bWJlcl0sIGFsbG93V2hpdGVzcGFjZU9ubHlTZWxlY3Rpb246IGJvb2xlYW4sIGZvbGxvd1dyYXBwZWRMaW5lc0Fib3ZlOiBib29sZWFuID0gdHJ1ZSwgZm9sbG93V3JhcHBlZExpbmVzQmVsb3c6IGJvb2xlYW4gPSB0cnVlKTogSVdvcmRQb3NpdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgLy8gRW5zdXJlIGNvb3JkcyBhcmUgd2l0aGluIHZpZXdwb3J0IChlZy4gbm90IHdpdGhpbiBzY3JvbGwgYmFyKVxuICAgIGlmIChjb29yZHNbMF0gPj0gdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyO1xuICAgIGNvbnN0IGJ1ZmZlckxpbmUgPSBidWZmZXIubGluZXMuZ2V0KGNvb3Jkc1sxXSk7XG4gICAgaWYgKCFidWZmZXJMaW5lKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGNvbnN0IGxpbmUgPSBidWZmZXIudHJhbnNsYXRlQnVmZmVyTGluZVRvU3RyaW5nKGNvb3Jkc1sxXSwgZmFsc2UpO1xuXG4gICAgLy8gR2V0IGFjdHVhbCBpbmRleCwgdGFraW5nIGludG8gY29uc2lkZXJhdGlvbiB3aWRlIGNoYXJhY3RlcnNcbiAgICBsZXQgc3RhcnRJbmRleCA9IHRoaXMuX2NvbnZlcnRWaWV3cG9ydENvbFRvQ2hhcmFjdGVySW5kZXgoYnVmZmVyTGluZSwgY29vcmRzKTtcbiAgICBsZXQgZW5kSW5kZXggPSBzdGFydEluZGV4O1xuXG4gICAgLy8gUmVjb3JkIG9mZnNldCB0byBiZSB1c2VkIGxhdGVyXG4gICAgY29uc3QgY2hhck9mZnNldCA9IGNvb3Jkc1swXSAtIHN0YXJ0SW5kZXg7XG4gICAgbGV0IGxlZnRXaWRlQ2hhckNvdW50ID0gMDtcbiAgICBsZXQgcmlnaHRXaWRlQ2hhckNvdW50ID0gMDtcbiAgICBsZXQgbGVmdExvbmdDaGFyT2Zmc2V0ID0gMDtcbiAgICBsZXQgcmlnaHRMb25nQ2hhck9mZnNldCA9IDA7XG5cbiAgICBpZiAobGluZS5jaGFyQXQoc3RhcnRJbmRleCkgPT09ICcgJykge1xuICAgICAgLy8gRXhwYW5kIHVudGlsIG5vbi13aGl0ZXNwYWNlIGlzIGhpdFxuICAgICAgd2hpbGUgKHN0YXJ0SW5kZXggPiAwICYmIGxpbmUuY2hhckF0KHN0YXJ0SW5kZXggLSAxKSA9PT0gJyAnKSB7XG4gICAgICAgIHN0YXJ0SW5kZXgtLTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChlbmRJbmRleCA8IGxpbmUubGVuZ3RoICYmIGxpbmUuY2hhckF0KGVuZEluZGV4ICsgMSkgPT09ICcgJykge1xuICAgICAgICBlbmRJbmRleCsrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBFeHBhbmQgdW50aWwgd2hpdGVzcGFjZSBpcyBoaXQuIFRoaXMgYWxnb3JpdGhtIHdvcmtzIGJ5IHNjYW5uaW5nIGxlZnRcbiAgICAgIC8vIGFuZCByaWdodCBmcm9tIHRoZSBzdGFydGluZyBwb3NpdGlvbiwga2VlcGluZyBib3RoIHRoZSBpbmRleCBmb3JtYXRcbiAgICAgIC8vIChsaW5lKSBhbmQgdGhlIGNvbHVtbiBmb3JtYXQgKGJ1ZmZlckxpbmUpIGluIHN5bmMuIFdoZW4gYSB3aWRlXG4gICAgICAvLyBjaGFyYWN0ZXIgaXMgaGl0LCBpdCBpcyByZWNvcmRlZCBhbmQgdGhlIGNvbHVtbiBpbmRleCBpcyBhZGp1c3RlZC5cbiAgICAgIGxldCBzdGFydENvbCA9IGNvb3Jkc1swXTtcbiAgICAgIGxldCBlbmRDb2wgPSBjb29yZHNbMF07XG5cbiAgICAgIC8vIENvbnNpZGVyIHRoZSBpbml0aWFsIHBvc2l0aW9uLCBza2lwIGl0IGFuZCBpbmNyZW1lbnQgdGhlIHdpZGUgY2hhclxuICAgICAgLy8gdmFyaWFibGVcbiAgICAgIGlmIChidWZmZXJMaW5lLmdldFdpZHRoKHN0YXJ0Q29sKSA9PT0gMCkge1xuICAgICAgICBsZWZ0V2lkZUNoYXJDb3VudCsrO1xuICAgICAgICBzdGFydENvbC0tO1xuICAgICAgfVxuICAgICAgaWYgKGJ1ZmZlckxpbmUuZ2V0V2lkdGgoZW5kQ29sKSA9PT0gMikge1xuICAgICAgICByaWdodFdpZGVDaGFyQ291bnQrKztcbiAgICAgICAgZW5kQ29sKys7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkanVzdCB0aGUgZW5kIGluZGV4IGZvciBjaGFyYWN0ZXJzIHdob3NlIGxlbmd0aCBhcmUgPiAxIChlbW9qaXMpXG4gICAgICBjb25zdCBsZW5ndGggPSBidWZmZXJMaW5lLmdldFN0cmluZyhlbmRDb2wpLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggPiAxKSB7XG4gICAgICAgIHJpZ2h0TG9uZ0NoYXJPZmZzZXQgKz0gbGVuZ3RoIC0gMTtcbiAgICAgICAgZW5kSW5kZXggKz0gbGVuZ3RoIC0gMTtcbiAgICAgIH1cblxuICAgICAgLy8gRXhwYW5kIHRoZSBzdHJpbmcgaW4gYm90aCBkaXJlY3Rpb25zIHVudGlsIGEgc3BhY2UgaXMgaGl0XG4gICAgICB3aGlsZSAoc3RhcnRDb2wgPiAwICYmIHN0YXJ0SW5kZXggPiAwICYmICF0aGlzLl9pc0NoYXJXb3JkU2VwYXJhdG9yKGJ1ZmZlckxpbmUubG9hZENlbGwoc3RhcnRDb2wgLSAxLCB0aGlzLl93b3JrQ2VsbCkpKSB7XG4gICAgICAgIGJ1ZmZlckxpbmUubG9hZENlbGwoc3RhcnRDb2wgLSAxLCB0aGlzLl93b3JrQ2VsbCk7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMuX3dvcmtDZWxsLmdldENoYXJzKCkubGVuZ3RoO1xuICAgICAgICBpZiAodGhpcy5fd29ya0NlbGwuZ2V0V2lkdGgoKSA9PT0gMCkge1xuICAgICAgICAgIC8vIElmIHRoZSBuZXh0IGNoYXJhY3RlciBpcyBhIHdpZGUgY2hhciwgcmVjb3JkIGl0IGFuZCBza2lwIHRoZSBjb2x1bW5cbiAgICAgICAgICBsZWZ0V2lkZUNoYXJDb3VudCsrO1xuICAgICAgICAgIHN0YXJ0Q29sLS07XG4gICAgICAgIH0gZWxzZSBpZiAobGVuZ3RoID4gMSkge1xuICAgICAgICAgIC8vIElmIHRoZSBuZXh0IGNoYXJhY3RlcidzIHN0cmluZyBpcyBsb25nZXIgdGhhbiAxIGNoYXIgKGVnLiBlbW9qaSksXG4gICAgICAgICAgLy8gYWRqdXN0IHRoZSBpbmRleFxuICAgICAgICAgIGxlZnRMb25nQ2hhck9mZnNldCArPSBsZW5ndGggLSAxO1xuICAgICAgICAgIHN0YXJ0SW5kZXggLT0gbGVuZ3RoIC0gMTtcbiAgICAgICAgfVxuICAgICAgICBzdGFydEluZGV4LS07XG4gICAgICAgIHN0YXJ0Q29sLS07XG4gICAgICB9XG4gICAgICB3aGlsZSAoZW5kQ29sIDwgYnVmZmVyTGluZS5sZW5ndGggJiYgZW5kSW5kZXggKyAxIDwgbGluZS5sZW5ndGggJiYgIXRoaXMuX2lzQ2hhcldvcmRTZXBhcmF0b3IoYnVmZmVyTGluZS5sb2FkQ2VsbChlbmRDb2wgKyAxLCB0aGlzLl93b3JrQ2VsbCkpKSB7XG4gICAgICAgIGJ1ZmZlckxpbmUubG9hZENlbGwoZW5kQ29sICsgMSwgdGhpcy5fd29ya0NlbGwpO1xuICAgICAgICBjb25zdCBsZW5ndGggPSB0aGlzLl93b3JrQ2VsbC5nZXRDaGFycygpLmxlbmd0aDtcbiAgICAgICAgaWYgKHRoaXMuX3dvcmtDZWxsLmdldFdpZHRoKCkgPT09IDIpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgbmV4dCBjaGFyYWN0ZXIgaXMgYSB3aWRlIGNoYXIsIHJlY29yZCBpdCBhbmQgc2tpcCB0aGUgY29sdW1uXG4gICAgICAgICAgcmlnaHRXaWRlQ2hhckNvdW50Kys7XG4gICAgICAgICAgZW5kQ29sKys7XG4gICAgICAgIH0gZWxzZSBpZiAobGVuZ3RoID4gMSkge1xuICAgICAgICAgIC8vIElmIHRoZSBuZXh0IGNoYXJhY3RlcidzIHN0cmluZyBpcyBsb25nZXIgdGhhbiAxIGNoYXIgKGVnLiBlbW9qaSksXG4gICAgICAgICAgLy8gYWRqdXN0IHRoZSBpbmRleFxuICAgICAgICAgIHJpZ2h0TG9uZ0NoYXJPZmZzZXQgKz0gbGVuZ3RoIC0gMTtcbiAgICAgICAgICBlbmRJbmRleCArPSBsZW5ndGggLSAxO1xuICAgICAgICB9XG4gICAgICAgIGVuZEluZGV4Kys7XG4gICAgICAgIGVuZENvbCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEluY3JlbWVuZXQgdGhlIGVuZCBpbmRleCBzbyBpdCBpcyBhdCB0aGUgc3RhcnQgb2YgdGhlIG5leHQgY2hhcmFjdGVyXG4gICAgZW5kSW5kZXgrKztcblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgc3RhcnQgX2NvbHVtbl8sIGNvbnZlcnRpbmcgdGhlIHRoZSBzdHJpbmcgaW5kZXhlcyBiYWNrIHRvXG4gICAgLy8gY29sdW1uIGNvb3JkaW5hdGVzLlxuICAgIGxldCBzdGFydCA9XG4gICAgICAgIHN0YXJ0SW5kZXggLy8gVGhlIGluZGV4IG9mIHRoZSBzZWxlY3Rpb24ncyBzdGFydCBjaGFyIGluIHRoZSBsaW5lIHN0cmluZ1xuICAgICAgICArIGNoYXJPZmZzZXQgLy8gVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgaW5pdGlhbCBjaGFyJ3MgY29sdW1uIGFuZCBpbmRleFxuICAgICAgICAtIGxlZnRXaWRlQ2hhckNvdW50IC8vIFRoZSBudW1iZXIgb2Ygd2lkZSBjaGFycyBsZWZ0IG9mIHRoZSBpbml0aWFsIGNoYXJcbiAgICAgICAgKyBsZWZ0TG9uZ0NoYXJPZmZzZXQ7IC8vIFRoZSBudW1iZXIgb2YgYWRkaXRpb25hbCBjaGFycyBsZWZ0IG9mIHRoZSBpbml0aWFsIGNoYXIgYWRkZWQgYnkgY29sdW1ucyB3aXRoIHN0cmluZ3MgbG9uZ2VyIHRoYW4gMSAoZW1vamlzKVxuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBsZW5ndGggaW4gX2NvbHVtbnNfLCBjb252ZXJ0aW5nIHRoZSB0aGUgc3RyaW5nIGluZGV4ZXMgYmFja1xuICAgIC8vIHRvIGNvbHVtbiBjb29yZGluYXRlcy5cbiAgICBsZXQgbGVuZ3RoID0gTWF0aC5taW4odGhpcy5fYnVmZmVyU2VydmljZS5jb2xzLCAvLyBEaXNhbGxvdyBsZW5ndGhzIGxhcmdlciB0aGFuIHRoZSB0ZXJtaW5hbCBjb2xzXG4gICAgICBlbmRJbmRleCAvLyBUaGUgaW5kZXggb2YgdGhlIHNlbGVjdGlvbidzIGVuZCBjaGFyIGluIHRoZSBsaW5lIHN0cmluZ1xuICAgICAgLSBzdGFydEluZGV4IC8vIFRoZSBpbmRleCBvZiB0aGUgc2VsZWN0aW9uJ3Mgc3RhcnQgY2hhciBpbiB0aGUgbGluZSBzdHJpbmdcbiAgICAgICsgbGVmdFdpZGVDaGFyQ291bnQgLy8gVGhlIG51bWJlciBvZiB3aWRlIGNoYXJzIGxlZnQgb2YgdGhlIGluaXRpYWwgY2hhclxuICAgICAgKyByaWdodFdpZGVDaGFyQ291bnQgLy8gVGhlIG51bWJlciBvZiB3aWRlIGNoYXJzIHJpZ2h0IG9mIHRoZSBpbml0aWFsIGNoYXIgKGluY2x1c2l2ZSlcbiAgICAgIC0gbGVmdExvbmdDaGFyT2Zmc2V0IC8vIFRoZSBudW1iZXIgb2YgYWRkaXRpb25hbCBjaGFycyBsZWZ0IG9mIHRoZSBpbml0aWFsIGNoYXIgYWRkZWQgYnkgY29sdW1ucyB3aXRoIHN0cmluZ3MgbG9uZ2VyIHRoYW4gMSAoZW1vamlzKVxuICAgICAgLSByaWdodExvbmdDaGFyT2Zmc2V0KTsgLy8gVGhlIG51bWJlciBvZiBhZGRpdGlvbmFsIGNoYXJzIHJpZ2h0IG9mIHRoZSBpbml0aWFsIGNoYXIgKGluY2x1c2l2ZSkgYWRkZWQgYnkgY29sdW1ucyB3aXRoIHN0cmluZ3MgbG9uZ2VyIHRoYW4gMSAoZW1vamlzKVxuXG4gICAgaWYgKCFhbGxvd1doaXRlc3BhY2VPbmx5U2VsZWN0aW9uICYmIGxpbmUuc2xpY2Uoc3RhcnRJbmRleCwgZW5kSW5kZXgpLnRyaW0oKSA9PT0gJycpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gUmVjdXJzZSB1cHdhcmRzIGlmIHRoZSBsaW5lIGlzIHdyYXBwZWQgYW5kIHRoZSB3b3JkIHdyYXBzIHRvIHRoZSBhYm92ZSBsaW5lXG4gICAgaWYgKGZvbGxvd1dyYXBwZWRMaW5lc0Fib3ZlKSB7XG4gICAgICBpZiAoc3RhcnQgPT09IDAgJiYgYnVmZmVyTGluZS5nZXRDb2RlUG9pbnQoMCkgIT09IDMyIC8qICcgJyAqLykge1xuICAgICAgICBjb25zdCBwcmV2aW91c0J1ZmZlckxpbmUgPSBidWZmZXIubGluZXMuZ2V0KGNvb3Jkc1sxXSAtIDEpO1xuICAgICAgICBpZiAocHJldmlvdXNCdWZmZXJMaW5lICYmIGJ1ZmZlckxpbmUuaXNXcmFwcGVkICYmIHByZXZpb3VzQnVmZmVyTGluZS5nZXRDb2RlUG9pbnQodGhpcy5fYnVmZmVyU2VydmljZS5jb2xzIC0gMSkgIT09IDMyIC8qICcgJyAqLykge1xuICAgICAgICAgIGNvbnN0IHByZXZpb3VzTGluZVdvcmRQb3NpdGlvbiA9IHRoaXMuX2dldFdvcmRBdChbdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzIC0gMSwgY29vcmRzWzFdIC0gMV0sIGZhbHNlLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgICAgaWYgKHByZXZpb3VzTGluZVdvcmRQb3NpdGlvbikge1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzIC0gcHJldmlvdXNMaW5lV29yZFBvc2l0aW9uLnN0YXJ0O1xuICAgICAgICAgICAgc3RhcnQgLT0gb2Zmc2V0O1xuICAgICAgICAgICAgbGVuZ3RoICs9IG9mZnNldDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZWN1cnNlIGRvd253YXJkcyBpZiB0aGUgbGluZSBpcyB3cmFwcGVkIGFuZCB0aGUgd29yZCB3cmFwcyB0byB0aGUgbmV4dCBsaW5lXG4gICAgaWYgKGZvbGxvd1dyYXBwZWRMaW5lc0JlbG93KSB7XG4gICAgICBpZiAoc3RhcnQgKyBsZW5ndGggPT09IHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scyAmJiBidWZmZXJMaW5lLmdldENvZGVQb2ludCh0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHMgLSAxKSAhPT0gMzIgLyogJyAnICovKSB7XG4gICAgICAgIGNvbnN0IG5leHRCdWZmZXJMaW5lID0gYnVmZmVyLmxpbmVzLmdldChjb29yZHNbMV0gKyAxKTtcbiAgICAgICAgaWYgKG5leHRCdWZmZXJMaW5lPy5pc1dyYXBwZWQgJiYgbmV4dEJ1ZmZlckxpbmUuZ2V0Q29kZVBvaW50KDApICE9PSAzMiAvKiAnICcgKi8pIHtcbiAgICAgICAgICBjb25zdCBuZXh0TGluZVdvcmRQb3NpdGlvbiA9IHRoaXMuX2dldFdvcmRBdChbMCwgY29vcmRzWzFdICsgMV0sIGZhbHNlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgaWYgKG5leHRMaW5lV29yZFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBsZW5ndGggKz0gbmV4dExpbmVXb3JkUG9zaXRpb24ubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7IHN0YXJ0LCBsZW5ndGggfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWxlY3RzIHRoZSB3b3JkIGF0IHRoZSBjb29yZGluYXRlcyBzcGVjaWZpZWQuXG4gICAqIEBwYXJhbSBjb29yZHMgVGhlIGNvb3JkaW5hdGVzIHRvIGdldCB0aGUgd29yZCBhdC5cbiAgICogQHBhcmFtIGFsbG93V2hpdGVzcGFjZU9ubHlTZWxlY3Rpb24gSWYgd2hpdGVzcGFjZSBzaG91bGQgYmUgc2VsZWN0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBfc2VsZWN0V29yZEF0KGNvb3JkczogW251bWJlciwgbnVtYmVyXSwgYWxsb3dXaGl0ZXNwYWNlT25seVNlbGVjdGlvbjogYm9vbGVhbik6IHZvaWQge1xuICAgIGNvbnN0IHdvcmRQb3NpdGlvbiA9IHRoaXMuX2dldFdvcmRBdChjb29yZHMsIGFsbG93V2hpdGVzcGFjZU9ubHlTZWxlY3Rpb24pO1xuICAgIGlmICh3b3JkUG9zaXRpb24pIHtcbiAgICAgIC8vIEFkanVzdCBuZWdhdGl2ZSBzdGFydCB2YWx1ZVxuICAgICAgd2hpbGUgKHdvcmRQb3NpdGlvbi5zdGFydCA8IDApIHtcbiAgICAgICAgd29yZFBvc2l0aW9uLnN0YXJ0ICs9IHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scztcbiAgICAgICAgY29vcmRzWzFdLS07XG4gICAgICB9XG4gICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydCA9IFt3b3JkUG9zaXRpb24uc3RhcnQsIGNvb3Jkc1sxXV07XG4gICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydExlbmd0aCA9IHdvcmRQb3NpdGlvbi5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHNlbGVjdGlvbiBlbmQgdG8gdGhlIHdvcmQgYXQgdGhlIGNvb3JkaW5hdGVkIHNwZWNpZmllZC5cbiAgICogQHBhcmFtIGNvb3JkcyBUaGUgY29vcmRpbmF0ZXMgdG8gZ2V0IHRoZSB3b3JkIGF0LlxuICAgKi9cbiAgcHJpdmF0ZSBfc2VsZWN0VG9Xb3JkQXQoY29vcmRzOiBbbnVtYmVyLCBudW1iZXJdKTogdm9pZCB7XG4gICAgY29uc3Qgd29yZFBvc2l0aW9uID0gdGhpcy5fZ2V0V29yZEF0KGNvb3JkcywgdHJ1ZSk7XG4gICAgaWYgKHdvcmRQb3NpdGlvbikge1xuICAgICAgbGV0IGVuZFJvdyA9IGNvb3Jkc1sxXTtcblxuICAgICAgLy8gQWRqdXN0IG5lZ2F0aXZlIHN0YXJ0IHZhbHVlXG4gICAgICB3aGlsZSAod29yZFBvc2l0aW9uLnN0YXJ0IDwgMCkge1xuICAgICAgICB3b3JkUG9zaXRpb24uc3RhcnQgKz0gdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzO1xuICAgICAgICBlbmRSb3ctLTtcbiAgICAgIH1cblxuICAgICAgLy8gQWRqdXN0IHdyYXBwZWQgbGVuZ3RoIHZhbHVlLCB0aGlzIG9ubHkgbmVlZHMgdG8gaGFwcGVuIHdoZW4gdmFsdWVzIGFyZSByZXZlcnNlZCBhcyBpbiB0aGF0XG4gICAgICAvLyBjYXNlIHdlJ3JlIGludGVyZXN0ZWQgaW4gdGhlIHN0YXJ0IG9mIHRoZSB3b3JkLCBub3QgdGhlIGVuZFxuICAgICAgaWYgKCF0aGlzLl9tb2RlbC5hcmVTZWxlY3Rpb25WYWx1ZXNSZXZlcnNlZCgpKSB7XG4gICAgICAgIHdoaWxlICh3b3JkUG9zaXRpb24uc3RhcnQgKyB3b3JkUG9zaXRpb24ubGVuZ3RoID4gdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzKSB7XG4gICAgICAgICAgd29yZFBvc2l0aW9uLmxlbmd0aCAtPSB0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHM7XG4gICAgICAgICAgZW5kUm93Kys7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kID0gW3RoaXMuX21vZGVsLmFyZVNlbGVjdGlvblZhbHVlc1JldmVyc2VkKCkgPyB3b3JkUG9zaXRpb24uc3RhcnQgOiB3b3JkUG9zaXRpb24uc3RhcnQgKyB3b3JkUG9zaXRpb24ubGVuZ3RoLCBlbmRSb3ddO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHdoZXRoZXIgdGhlIGNoYXJhY3RlciBpcyBjb25zaWRlcmVkIGEgd29yZCBzZXBhcmF0b3IgYnkgdGhlIHNlbGVjdFxuICAgKiB3b3JkIGxvZ2ljLlxuICAgKiBAcGFyYW0gY2hhciBUaGUgY2hhcmFjdGVyIHRvIGNoZWNrLlxuICAgKi9cbiAgcHJpdmF0ZSBfaXNDaGFyV29yZFNlcGFyYXRvcihjZWxsOiBDZWxsRGF0YSk6IGJvb2xlYW4ge1xuICAgIC8vIFplcm8gd2lkdGggY2hhcmFjdGVycyBhcmUgbmV2ZXIgc2VwYXJhdG9ycyBhcyB0aGV5IGFyZSBhbHdheXMgdG8gdGhlXG4gICAgLy8gcmlnaHQgb2Ygd2lkZSBjaGFyYWN0ZXJzXG4gICAgaWYgKGNlbGwuZ2V0V2lkdGgoKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy53b3JkU2VwYXJhdG9yLmluZGV4T2YoY2VsbC5nZXRDaGFycygpKSA+PSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbGVjdHMgdGhlIGxpbmUgc3BlY2lmaWVkLlxuICAgKiBAcGFyYW0gbGluZSBUaGUgbGluZSBpbmRleC5cbiAgICovXG4gIHByb3RlY3RlZCBfc2VsZWN0TGluZUF0KGxpbmU6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHdyYXBwZWRSYW5nZSA9IHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLmdldFdyYXBwZWRSYW5nZUZvckxpbmUobGluZSk7XG4gICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uU3RhcnQgPSBbMCwgd3JhcHBlZFJhbmdlLmZpcnN0XTtcbiAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmQgPSBbdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzLCB3cmFwcGVkUmFuZ2UubGFzdF07XG4gICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uU3RhcnRMZW5ndGggPSAwO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElFdmVudCB9IGZyb20gJ2NvbW1vbi9FdmVudEVtaXR0ZXInO1xuaW1wb3J0IHsgSVJlbmRlckRpbWVuc2lvbnMsIElSZW5kZXJlciB9IGZyb20gJ2Jyb3dzZXIvcmVuZGVyZXIvVHlwZXMnO1xuaW1wb3J0IHsgSUNvbG9yU2V0IH0gZnJvbSAnYnJvd3Nlci9UeXBlcyc7XG5pbXBvcnQgeyBJU2VsZWN0aW9uUmVkcmF3UmVxdWVzdEV2ZW50IGFzIElTZWxlY3Rpb25SZXF1ZXN0UmVkcmF3RXZlbnQsIElTZWxlY3Rpb25SZXF1ZXN0U2Nyb2xsTGluZXNFdmVudCB9IGZyb20gJ2Jyb3dzZXIvc2VsZWN0aW9uL1R5cGVzJztcbmltcG9ydCB7IGNyZWF0ZURlY29yYXRvciB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlUmVnaXN0cnknO1xuaW1wb3J0IHsgSURpc3Bvc2FibGUgfSBmcm9tICdjb21tb24vVHlwZXMnO1xuaW1wb3J0IHsgSURlY29yYXRpb25PcHRpb25zLCBJRGVjb3JhdGlvbiB9IGZyb20gJ3h0ZXJtJztcbmltcG9ydCB7IElCdWZmZXJTZXJ2aWNlIH0gZnJvbSAnY29tbW9uL3NlcnZpY2VzL1NlcnZpY2VzJztcblxuZXhwb3J0IGNvbnN0IElDaGFyU2l6ZVNlcnZpY2UgPSBjcmVhdGVEZWNvcmF0b3I8SUNoYXJTaXplU2VydmljZT4oJ0NoYXJTaXplU2VydmljZScpO1xuZXhwb3J0IGludGVyZmFjZSBJQ2hhclNpemVTZXJ2aWNlIHtcbiAgc2VydmljZUJyYW5kOiB1bmRlZmluZWQ7XG5cbiAgcmVhZG9ubHkgd2lkdGg6IG51bWJlcjtcbiAgcmVhZG9ubHkgaGVpZ2h0OiBudW1iZXI7XG4gIHJlYWRvbmx5IGhhc1ZhbGlkU2l6ZTogYm9vbGVhbjtcblxuICByZWFkb25seSBvbkNoYXJTaXplQ2hhbmdlOiBJRXZlbnQ8dm9pZD47XG5cbiAgbWVhc3VyZSgpOiB2b2lkO1xufVxuXG5leHBvcnQgY29uc3QgSUNvcmVCcm93c2VyU2VydmljZSA9IGNyZWF0ZURlY29yYXRvcjxJQ29yZUJyb3dzZXJTZXJ2aWNlPignQ29yZUJyb3dzZXJTZXJ2aWNlJyk7XG5leHBvcnQgaW50ZXJmYWNlIElDb3JlQnJvd3NlclNlcnZpY2Uge1xuICBzZXJ2aWNlQnJhbmQ6IHVuZGVmaW5lZDtcblxuICByZWFkb25seSBpc0ZvY3VzZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjb25zdCBJTW91c2VTZXJ2aWNlID0gY3JlYXRlRGVjb3JhdG9yPElNb3VzZVNlcnZpY2U+KCdNb3VzZVNlcnZpY2UnKTtcbmV4cG9ydCBpbnRlcmZhY2UgSU1vdXNlU2VydmljZSB7XG4gIHNlcnZpY2VCcmFuZDogdW5kZWZpbmVkO1xuXG4gIGdldENvb3JkcyhldmVudDoge2NsaWVudFg6IG51bWJlciwgY2xpZW50WTogbnVtYmVyfSwgZWxlbWVudDogSFRNTEVsZW1lbnQsIGNvbENvdW50OiBudW1iZXIsIHJvd0NvdW50OiBudW1iZXIsIGlzU2VsZWN0aW9uPzogYm9vbGVhbik6IFtudW1iZXIsIG51bWJlcl0gfCB1bmRlZmluZWQ7XG4gIGdldFJhd0J5dGVDb29yZHMoZXZlbnQ6IE1vdXNlRXZlbnQsIGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBjb2xDb3VudDogbnVtYmVyLCByb3dDb3VudDogbnVtYmVyKTogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9IHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgY29uc3QgSVJlbmRlclNlcnZpY2UgPSBjcmVhdGVEZWNvcmF0b3I8SVJlbmRlclNlcnZpY2U+KCdSZW5kZXJTZXJ2aWNlJyk7XG5leHBvcnQgaW50ZXJmYWNlIElSZW5kZXJTZXJ2aWNlIGV4dGVuZHMgSURpc3Bvc2FibGUge1xuICBzZXJ2aWNlQnJhbmQ6IHVuZGVmaW5lZDtcblxuICBvbkRpbWVuc2lvbnNDaGFuZ2U6IElFdmVudDxJUmVuZGVyRGltZW5zaW9ucz47XG4gIC8qKlxuICAgKiBGaXJlcyB3aGVuIGJ1ZmZlciBjaGFuZ2VzIGFyZSByZW5kZXJlZC4gVGhpcyBkb2VzIG5vdCBmaXJlIHdoZW4gb25seSBjdXJzb3JcbiAgICogb3Igc2VsZWN0aW9ucyBhcmUgcmVuZGVyZWQuXG4gICAqL1xuICBvblJlbmRlcmVkQnVmZmVyQ2hhbmdlOiBJRXZlbnQ8eyBzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlciB9PjtcbiAgb25SZWZyZXNoUmVxdWVzdDogSUV2ZW50PHsgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIgfT47XG5cbiAgZGltZW5zaW9uczogSVJlbmRlckRpbWVuc2lvbnM7XG5cbiAgcmVmcmVzaFJvd3Moc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiB2b2lkO1xuICBjbGVhclRleHR1cmVBdGxhcygpOiB2b2lkO1xuICByZXNpemUoY29sczogbnVtYmVyLCByb3dzOiBudW1iZXIpOiB2b2lkO1xuICBjaGFuZ2VPcHRpb25zKCk6IHZvaWQ7XG4gIHNldFJlbmRlcmVyKHJlbmRlcmVyOiBJUmVuZGVyZXIpOiB2b2lkO1xuICBzZXRDb2xvcnMoY29sb3JzOiBJQ29sb3JTZXQpOiB2b2lkO1xuICBvbkRldmljZVBpeGVsUmF0aW9DaGFuZ2UoKTogdm9pZDtcbiAgb25SZXNpemUoY29sczogbnVtYmVyLCByb3dzOiBudW1iZXIpOiB2b2lkO1xuICAvLyBUT0RPOiBJcyB0aGlzIHVzZWZ1bCB3aGVuIHdlIGhhdmUgb25SZXNpemU/XG4gIG9uQ2hhclNpemVDaGFuZ2VkKCk6IHZvaWQ7XG4gIG9uQmx1cigpOiB2b2lkO1xuICBvbkZvY3VzKCk6IHZvaWQ7XG4gIG9uU2VsZWN0aW9uQ2hhbmdlZChzdGFydDogW251bWJlciwgbnVtYmVyXSB8IHVuZGVmaW5lZCwgZW5kOiBbbnVtYmVyLCBudW1iZXJdIHwgdW5kZWZpbmVkLCBjb2x1bW5TZWxlY3RNb2RlOiBib29sZWFuKTogdm9pZDtcbiAgb25DdXJzb3JNb3ZlKCk6IHZvaWQ7XG4gIGNsZWFyKCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCBJU2VsZWN0aW9uU2VydmljZSA9IGNyZWF0ZURlY29yYXRvcjxJU2VsZWN0aW9uU2VydmljZT4oJ1NlbGVjdGlvblNlcnZpY2UnKTtcbmV4cG9ydCBpbnRlcmZhY2UgSVNlbGVjdGlvblNlcnZpY2Uge1xuICBzZXJ2aWNlQnJhbmQ6IHVuZGVmaW5lZDtcblxuICByZWFkb25seSBzZWxlY3Rpb25UZXh0OiBzdHJpbmc7XG4gIHJlYWRvbmx5IGhhc1NlbGVjdGlvbjogYm9vbGVhbjtcbiAgcmVhZG9ubHkgc2VsZWN0aW9uU3RhcnQ6IFtudW1iZXIsIG51bWJlcl0gfCB1bmRlZmluZWQ7XG4gIHJlYWRvbmx5IHNlbGVjdGlvbkVuZDogW251bWJlciwgbnVtYmVyXSB8IHVuZGVmaW5lZDtcblxuICByZWFkb25seSBvbkxpbnV4TW91c2VTZWxlY3Rpb246IElFdmVudDxzdHJpbmc+O1xuICByZWFkb25seSBvblJlcXVlc3RSZWRyYXc6IElFdmVudDxJU2VsZWN0aW9uUmVxdWVzdFJlZHJhd0V2ZW50PjtcbiAgcmVhZG9ubHkgb25SZXF1ZXN0U2Nyb2xsTGluZXM6IElFdmVudDxJU2VsZWN0aW9uUmVxdWVzdFNjcm9sbExpbmVzRXZlbnQ+O1xuICByZWFkb25seSBvblNlbGVjdGlvbkNoYW5nZTogSUV2ZW50PHZvaWQ+O1xuXG4gIGRpc2FibGUoKTogdm9pZDtcbiAgZW5hYmxlKCk6IHZvaWQ7XG4gIHJlc2V0KCk6IHZvaWQ7XG4gIHNldFNlbGVjdGlvbihyb3c6IG51bWJlciwgY29sOiBudW1iZXIsIGxlbmd0aDogbnVtYmVyKTogdm9pZDtcbiAgc2VsZWN0QWxsKCk6IHZvaWQ7XG4gIHNlbGVjdExpbmVzKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKTogdm9pZDtcbiAgY2xlYXJTZWxlY3Rpb24oKTogdm9pZDtcbiAgcmlnaHRDbGlja1NlbGVjdChldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XG4gIHNob3VsZENvbHVtblNlbGVjdChldmVudDogS2V5Ym9hcmRFdmVudCB8IE1vdXNlRXZlbnQpOiBib29sZWFuO1xuICBzaG91bGRGb3JjZVNlbGVjdGlvbihldmVudDogTW91c2VFdmVudCk6IGJvb2xlYW47XG4gIHJlZnJlc2goaXNMaW51eE1vdXNlU2VsZWN0aW9uPzogYm9vbGVhbik6IHZvaWQ7XG4gIG9uTW91c2VEb3duKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IElTb3VuZFNlcnZpY2UgPSBjcmVhdGVEZWNvcmF0b3I8SVNvdW5kU2VydmljZT4oJ1NvdW5kU2VydmljZScpO1xuZXhwb3J0IGludGVyZmFjZSBJU291bmRTZXJ2aWNlIHtcbiAgc2VydmljZUJyYW5kOiB1bmRlZmluZWQ7XG5cbiAgcGxheUJlbGxTb3VuZCgpOiB2b2lkO1xufVxuXG5cbmV4cG9ydCBjb25zdCBJQ2hhcmFjdGVySm9pbmVyU2VydmljZSA9IGNyZWF0ZURlY29yYXRvcjxJQ2hhcmFjdGVySm9pbmVyU2VydmljZT4oJ0NoYXJhY3RlckpvaW5lclNlcnZpY2UnKTtcbmV4cG9ydCBpbnRlcmZhY2UgSUNoYXJhY3RlckpvaW5lclNlcnZpY2Uge1xuICBzZXJ2aWNlQnJhbmQ6IHVuZGVmaW5lZDtcblxuICByZWdpc3RlcihoYW5kbGVyOiAodGV4dDogc3RyaW5nKSA9PiBbbnVtYmVyLCBudW1iZXJdW10pOiBudW1iZXI7XG4gIGRlcmVnaXN0ZXIoam9pbmVySWQ6IG51bWJlcik6IGJvb2xlYW47XG4gIGdldEpvaW5lZENoYXJhY3RlcnMocm93OiBudW1iZXIpOiBbbnVtYmVyLCBudW1iZXJdW107XG59XG5cblxuZXhwb3J0IGNvbnN0IElEZWNvcmF0aW9uU2VydmljZSA9IGNyZWF0ZURlY29yYXRvcjxJRGVjb3JhdGlvblNlcnZpY2U+KCdEZWNvcmF0aW9uU2VydmljZScpO1xuZXhwb3J0IGludGVyZmFjZSBJRGVjb3JhdGlvblNlcnZpY2UgZXh0ZW5kcyBJRGlzcG9zYWJsZSB7XG4gIHJlZ2lzdGVyRGVjb3JhdGlvbihkZWNvcmF0aW9uT3B0aW9uczogSURlY29yYXRpb25PcHRpb25zKTogSURlY29yYXRpb24gfCB1bmRlZmluZWQ7XG4gIHJlZnJlc2goKTogdm9pZDtcbiAgYXR0YWNoVG9Eb20oc2NyZWVuRWxlbWVudDogSFRNTEVsZW1lbnQsIHJlbmRlclNlcnZpY2U6IElSZW5kZXJTZXJ2aWNlLCBidWZmZXJTZXJ2aWNlOiBJQnVmZmVyU2VydmljZSk6IHZvaWQ7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOCBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElPcHRpb25zU2VydmljZSB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5pbXBvcnQgeyBJU291bmRTZXJ2aWNlIH0gZnJvbSAnYnJvd3Nlci9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5cbmV4cG9ydCBjbGFzcyBTb3VuZFNlcnZpY2UgaW1wbGVtZW50cyBJU291bmRTZXJ2aWNlIHtcbiAgcHVibGljIHNlcnZpY2VCcmFuZDogdW5kZWZpbmVkO1xuXG4gIHByaXZhdGUgc3RhdGljIF9hdWRpb0NvbnRleHQ6IEF1ZGlvQ29udGV4dDtcblxuICBwdWJsaWMgc3RhdGljIGdldCBhdWRpb0NvbnRleHQoKTogQXVkaW9Db250ZXh0IHwgbnVsbCB7XG4gICAgaWYgKCFTb3VuZFNlcnZpY2UuX2F1ZGlvQ29udGV4dCkge1xuICAgICAgY29uc3QgYXVkaW9Db250ZXh0Q3RvcjogdHlwZW9mIEF1ZGlvQ29udGV4dCA9ICh3aW5kb3cgYXMgYW55KS5BdWRpb0NvbnRleHQgfHwgKHdpbmRvdyBhcyBhbnkpLndlYmtpdEF1ZGlvQ29udGV4dDtcbiAgICAgIGlmICghYXVkaW9Db250ZXh0Q3Rvcikge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1dlYiBBdWRpbyBBUEkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXIuIENvbnNpZGVyIHVwZ3JhZGluZyB0byB0aGUgbGF0ZXN0IHZlcnNpb24nKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBTb3VuZFNlcnZpY2UuX2F1ZGlvQ29udGV4dCA9IG5ldyBhdWRpb0NvbnRleHRDdG9yKCk7XG4gICAgfVxuICAgIHJldHVybiBTb3VuZFNlcnZpY2UuX2F1ZGlvQ29udGV4dDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJT3B0aW9uc1NlcnZpY2UgcHJpdmF0ZSBfb3B0aW9uc1NlcnZpY2U6IElPcHRpb25zU2VydmljZVxuICApIHtcbiAgfVxuXG4gIHB1YmxpYyBwbGF5QmVsbFNvdW5kKCk6IHZvaWQge1xuICAgIGNvbnN0IGN0eCA9IFNvdW5kU2VydmljZS5hdWRpb0NvbnRleHQ7XG4gICAgaWYgKCFjdHgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgYmVsbEF1ZGlvU291cmNlID0gY3R4LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuICAgIGN0eC5kZWNvZGVBdWRpb0RhdGEodGhpcy5fYmFzZTY0VG9BcnJheUJ1ZmZlcih0aGlzLl9yZW1vdmVNaW1lVHlwZSh0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLmJlbGxTb3VuZCkpLCAoYnVmZmVyKSA9PiB7XG4gICAgICBiZWxsQXVkaW9Tb3VyY2UuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgYmVsbEF1ZGlvU291cmNlLmNvbm5lY3QoY3R4LmRlc3RpbmF0aW9uKTtcbiAgICAgIGJlbGxBdWRpb1NvdXJjZS5zdGFydCgwKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgX2Jhc2U2NFRvQXJyYXlCdWZmZXIoYmFzZTY0OiBzdHJpbmcpOiBBcnJheUJ1ZmZlciB7XG4gICAgY29uc3QgYmluYXJ5U3RyaW5nID0gd2luZG93LmF0b2IoYmFzZTY0KTtcbiAgICBjb25zdCBsZW4gPSBiaW5hcnlTdHJpbmcubGVuZ3RoO1xuICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkobGVuKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGJ5dGVzW2ldID0gYmluYXJ5U3RyaW5nLmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ5dGVzLmJ1ZmZlcjtcbiAgfVxuXG4gIHByaXZhdGUgX3JlbW92ZU1pbWVUeXBlKGRhdGFVUkk6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgLy8gU3BsaXQgdGhlIGlucHV0IHRvIGdldCB0aGUgbWltZS10eXBlIGFuZCB0aGUgZGF0YSBpdHNlbGZcbiAgICBjb25zdCBzcGxpdFVyaSA9IGRhdGFVUkkuc3BsaXQoJywnKTtcblxuICAgIC8vIFJldHVybiBvbmx5IHRoZSBkYXRhXG4gICAgcmV0dXJuIHNwbGl0VXJpWzFdO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNiBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElDaXJjdWxhckxpc3QgfSBmcm9tICdjb21tb24vVHlwZXMnO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJRXZlbnQgfSBmcm9tICdjb21tb24vRXZlbnRFbWl0dGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBJSW5zZXJ0RXZlbnQge1xuICBpbmRleDogbnVtYmVyO1xuICBhbW91bnQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRGVsZXRlRXZlbnQge1xuICBpbmRleDogbnVtYmVyO1xuICBhbW91bnQ6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY2lyY3VsYXIgbGlzdDsgYSBsaXN0IHdpdGggYSBtYXhpbXVtIHNpemUgdGhhdCB3cmFwcyBhcm91bmQgd2hlbiBwdXNoIGlzIGNhbGxlZCxcbiAqIG92ZXJyaWRpbmcgdmFsdWVzIGF0IHRoZSBzdGFydCBvZiB0aGUgbGlzdC5cbiAqL1xuZXhwb3J0IGNsYXNzIENpcmN1bGFyTGlzdDxUPiBpbXBsZW1lbnRzIElDaXJjdWxhckxpc3Q8VD4ge1xuICBwcm90ZWN0ZWQgX2FycmF5OiAoVCB8IHVuZGVmaW5lZClbXTtcbiAgcHJpdmF0ZSBfc3RhcnRJbmRleDogbnVtYmVyO1xuICBwcml2YXRlIF9sZW5ndGg6IG51bWJlcjtcblxuICBwdWJsaWMgb25EZWxldGVFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcjxJRGVsZXRlRXZlbnQ+KCk7XG4gIHB1YmxpYyBnZXQgb25EZWxldGUoKTogSUV2ZW50PElEZWxldGVFdmVudD4geyByZXR1cm4gdGhpcy5vbkRlbGV0ZUVtaXR0ZXIuZXZlbnQ7IH1cbiAgcHVibGljIG9uSW5zZXJ0RW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXI8SUluc2VydEV2ZW50PigpO1xuICBwdWJsaWMgZ2V0IG9uSW5zZXJ0KCk6IElFdmVudDxJSW5zZXJ0RXZlbnQ+IHsgcmV0dXJuIHRoaXMub25JbnNlcnRFbWl0dGVyLmV2ZW50OyB9XG4gIHB1YmxpYyBvblRyaW1FbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XG4gIHB1YmxpYyBnZXQgb25UcmltKCk6IElFdmVudDxudW1iZXI+IHsgcmV0dXJuIHRoaXMub25UcmltRW1pdHRlci5ldmVudDsgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX21heExlbmd0aDogbnVtYmVyXG4gICkge1xuICAgIHRoaXMuX2FycmF5ID0gbmV3IEFycmF5PFQ+KHRoaXMuX21heExlbmd0aCk7XG4gICAgdGhpcy5fc3RhcnRJbmRleCA9IDA7XG4gICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgbWF4TGVuZ3RoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21heExlbmd0aDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgbWF4TGVuZ3RoKG5ld01heExlbmd0aDogbnVtYmVyKSB7XG4gICAgLy8gVGhlcmUgd2FzIG5vIGNoYW5nZSBpbiBtYXhMZW5ndGgsIHJldHVybiBlYXJseS5cbiAgICBpZiAodGhpcy5fbWF4TGVuZ3RoID09PSBuZXdNYXhMZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBSZWNvbnN0cnVjdCBhcnJheSwgc3RhcnRpbmcgYXQgaW5kZXggMC4gT25seSB0cmFuc2ZlciB2YWx1ZXMgZnJvbSB0aGVcbiAgICAvLyBpbmRleGVzIDAgdG8gbGVuZ3RoLlxuICAgIGNvbnN0IG5ld0FycmF5ID0gbmV3IEFycmF5PFQgfCB1bmRlZmluZWQ+KG5ld01heExlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNYXRoLm1pbihuZXdNYXhMZW5ndGgsIHRoaXMubGVuZ3RoKTsgaSsrKSB7XG4gICAgICBuZXdBcnJheVtpXSA9IHRoaXMuX2FycmF5W3RoaXMuX2dldEN5Y2xpY0luZGV4KGkpXTtcbiAgICB9XG4gICAgdGhpcy5fYXJyYXkgPSBuZXdBcnJheTtcbiAgICB0aGlzLl9tYXhMZW5ndGggPSBuZXdNYXhMZW5ndGg7XG4gICAgdGhpcy5fc3RhcnRJbmRleCA9IDA7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGxlbmd0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sZW5ndGg7XG4gIH1cblxuICBwdWJsaWMgc2V0IGxlbmd0aChuZXdMZW5ndGg6IG51bWJlcikge1xuICAgIGlmIChuZXdMZW5ndGggPiB0aGlzLl9sZW5ndGgpIHtcbiAgICAgIGZvciAobGV0IGkgPSB0aGlzLl9sZW5ndGg7IGkgPCBuZXdMZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLl9hcnJheVtpXSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fbGVuZ3RoID0gbmV3TGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHZhbHVlIGF0IGFuIGluZGV4LlxuICAgKlxuICAgKiBOb3RlIHRoYXQgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgdGhlcmUgaXMgbm8gYm91bmRzIGNoZWNraW5nIGhlcmUsIHRoZSBpbmRleCByZWZlcmVuY2UgaXNcbiAgICogY2lyY3VsYXIgc28gdGhpcyBzaG91bGQgYWx3YXlzIHJldHVybiBhIHZhbHVlIGFuZCBuZXZlciB0aHJvdy5cbiAgICogQHBhcmFtIGluZGV4IFRoZSBpbmRleCBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgKiBAcmV0dXJuIFRoZSB2YWx1ZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBpbmRleC5cbiAgICovXG4gIHB1YmxpYyBnZXQoaW5kZXg6IG51bWJlcik6IFQgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9hcnJheVt0aGlzLl9nZXRDeWNsaWNJbmRleChpbmRleCldO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHZhbHVlIGF0IGFuIGluZGV4LlxuICAgKlxuICAgKiBOb3RlIHRoYXQgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgdGhlcmUgaXMgbm8gYm91bmRzIGNoZWNraW5nIGhlcmUsIHRoZSBpbmRleCByZWZlcmVuY2UgaXNcbiAgICogY2lyY3VsYXIgc28gdGhpcyBzaG91bGQgYWx3YXlzIHJldHVybiBhIHZhbHVlIGFuZCBuZXZlciB0aHJvdy5cbiAgICogQHBhcmFtIGluZGV4IFRoZSBpbmRleCB0byBzZXQuXG4gICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgKi9cbiAgcHVibGljIHNldChpbmRleDogbnVtYmVyLCB2YWx1ZTogVCB8IHVuZGVmaW5lZCk6IHZvaWQge1xuICAgIHRoaXMuX2FycmF5W3RoaXMuX2dldEN5Y2xpY0luZGV4KGluZGV4KV0gPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdXNoZXMgYSBuZXcgdmFsdWUgb250byB0aGUgbGlzdCwgd3JhcHBpbmcgYXJvdW5kIHRvIHRoZSBzdGFydCBvZiB0aGUgYXJyYXksIG92ZXJyaWRpbmcgaW5kZXggMFxuICAgKiBpZiB0aGUgbWF4aW11bSBsZW5ndGggaXMgcmVhY2hlZC5cbiAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBwdXNoIG9udG8gdGhlIGxpc3QuXG4gICAqL1xuICBwdWJsaWMgcHVzaCh2YWx1ZTogVCk6IHZvaWQge1xuICAgIHRoaXMuX2FycmF5W3RoaXMuX2dldEN5Y2xpY0luZGV4KHRoaXMuX2xlbmd0aCldID0gdmFsdWU7XG4gICAgaWYgKHRoaXMuX2xlbmd0aCA9PT0gdGhpcy5fbWF4TGVuZ3RoKSB7XG4gICAgICB0aGlzLl9zdGFydEluZGV4ID0gKyt0aGlzLl9zdGFydEluZGV4ICUgdGhpcy5fbWF4TGVuZ3RoO1xuICAgICAgdGhpcy5vblRyaW1FbWl0dGVyLmZpcmUoMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2xlbmd0aCsrO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZHZhbmNlIHJpbmdidWZmZXIgaW5kZXggYW5kIHJldHVybiBjdXJyZW50IGVsZW1lbnQgZm9yIHJlY3ljbGluZy5cbiAgICogTm90ZTogVGhlIGJ1ZmZlciBtdXN0IGJlIGZ1bGwgZm9yIHRoaXMgbWV0aG9kIHRvIHdvcmsuXG4gICAqIEB0aHJvd3MgV2hlbiB0aGUgYnVmZmVyIGlzIG5vdCBmdWxsLlxuICAgKi9cbiAgcHVibGljIHJlY3ljbGUoKTogVCB7XG4gICAgaWYgKHRoaXMuX2xlbmd0aCAhPT0gdGhpcy5fbWF4TGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBvbmx5IHJlY3ljbGUgd2hlbiB0aGUgYnVmZmVyIGlzIGZ1bGwnKTtcbiAgICB9XG4gICAgdGhpcy5fc3RhcnRJbmRleCA9ICsrdGhpcy5fc3RhcnRJbmRleCAlIHRoaXMuX21heExlbmd0aDtcbiAgICB0aGlzLm9uVHJpbUVtaXR0ZXIuZmlyZSgxKTtcbiAgICByZXR1cm4gdGhpcy5fYXJyYXlbdGhpcy5fZ2V0Q3ljbGljSW5kZXgodGhpcy5fbGVuZ3RoIC0gMSldITtcbiAgfVxuXG4gIC8qKlxuICAgKiBSaW5nYnVmZmVyIGlzIGF0IG1heCBsZW5ndGguXG4gICAqL1xuICBwdWJsaWMgZ2V0IGlzRnVsbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fbGVuZ3RoID09PSB0aGlzLl9tYXhMZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbmQgcmV0dXJucyB0aGUgbGFzdCB2YWx1ZSBvbiB0aGUgbGlzdC5cbiAgICogQHJldHVybiBUaGUgcG9wcGVkIHZhbHVlLlxuICAgKi9cbiAgcHVibGljIHBvcCgpOiBUIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fYXJyYXlbdGhpcy5fZ2V0Q3ljbGljSW5kZXgodGhpcy5fbGVuZ3RoLS0gLSAxKV07XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbmQvb3IgaW5zZXJ0cyBpdGVtcyBhdCBhIHBhcnRpY3VsYXIgaW5kZXggKGluIHRoYXQgb3JkZXIpLiBVbmxpa2VcbiAgICogQXJyYXkucHJvdG90eXBlLnNwbGljZSwgdGhpcyBvcGVyYXRpb24gZG9lcyBub3QgcmV0dXJuIHRoZSBkZWxldGVkIGl0ZW1zIGFzIGEgbmV3IGFycmF5IGluXG4gICAqIG9yZGVyIHRvIHNhdmUgY3JlYXRpbmcgYSBuZXcgYXJyYXkuIE5vdGUgdGhhdCB0aGlzIG9wZXJhdGlvbiBtYXkgc2hpZnQgYWxsIHZhbHVlcyBpbiB0aGUgbGlzdFxuICAgKiBpbiB0aGUgd29yc3QgY2FzZS5cbiAgICogQHBhcmFtIHN0YXJ0IFRoZSBpbmRleCB0byBkZWxldGUgYW5kL29yIGluc2VydC5cbiAgICogQHBhcmFtIGRlbGV0ZUNvdW50IFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZGVsZXRlLlxuICAgKiBAcGFyYW0gaXRlbXMgVGhlIGl0ZW1zIHRvIGluc2VydC5cbiAgICovXG4gIHB1YmxpYyBzcGxpY2Uoc3RhcnQ6IG51bWJlciwgZGVsZXRlQ291bnQ6IG51bWJlciwgLi4uaXRlbXM6IFRbXSk6IHZvaWQge1xuICAgIC8vIERlbGV0ZSBpdGVtc1xuICAgIGlmIChkZWxldGVDb3VudCkge1xuICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgdGhpcy5fbGVuZ3RoIC0gZGVsZXRlQ291bnQ7IGkrKykge1xuICAgICAgICB0aGlzLl9hcnJheVt0aGlzLl9nZXRDeWNsaWNJbmRleChpKV0gPSB0aGlzLl9hcnJheVt0aGlzLl9nZXRDeWNsaWNJbmRleChpICsgZGVsZXRlQ291bnQpXTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2xlbmd0aCAtPSBkZWxldGVDb3VudDtcbiAgICAgIHRoaXMub25EZWxldGVFbWl0dGVyLmZpcmUoeyBpbmRleDogc3RhcnQsIGFtb3VudDogZGVsZXRlQ291bnQgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIGl0ZW1zXG4gICAgZm9yIChsZXQgaSA9IHRoaXMuX2xlbmd0aCAtIDE7IGkgPj0gc3RhcnQ7IGktLSkge1xuICAgICAgdGhpcy5fYXJyYXlbdGhpcy5fZ2V0Q3ljbGljSW5kZXgoaSArIGl0ZW1zLmxlbmd0aCldID0gdGhpcy5fYXJyYXlbdGhpcy5fZ2V0Q3ljbGljSW5kZXgoaSldO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLl9hcnJheVt0aGlzLl9nZXRDeWNsaWNJbmRleChzdGFydCArIGkpXSA9IGl0ZW1zW2ldO1xuICAgIH1cbiAgICBpZiAoaXRlbXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm9uSW5zZXJ0RW1pdHRlci5maXJlKHsgaW5kZXg6IHN0YXJ0LCBhbW91bnQ6IGl0ZW1zLmxlbmd0aCB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGp1c3QgbGVuZ3RoIGFzIG5lZWRlZFxuICAgIGlmICh0aGlzLl9sZW5ndGggKyBpdGVtcy5sZW5ndGggPiB0aGlzLl9tYXhMZW5ndGgpIHtcbiAgICAgIGNvbnN0IGNvdW50VG9UcmltID0gKHRoaXMuX2xlbmd0aCArIGl0ZW1zLmxlbmd0aCkgLSB0aGlzLl9tYXhMZW5ndGg7XG4gICAgICB0aGlzLl9zdGFydEluZGV4ICs9IGNvdW50VG9UcmltO1xuICAgICAgdGhpcy5fbGVuZ3RoID0gdGhpcy5fbWF4TGVuZ3RoO1xuICAgICAgdGhpcy5vblRyaW1FbWl0dGVyLmZpcmUoY291bnRUb1RyaW0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9sZW5ndGggKz0gaXRlbXMubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUcmltcyBhIG51bWJlciBvZiBpdGVtcyBmcm9tIHRoZSBzdGFydCBvZiB0aGUgbGlzdC5cbiAgICogQHBhcmFtIGNvdW50IFRoZSBudW1iZXIgb2YgaXRlbXMgdG8gcmVtb3ZlLlxuICAgKi9cbiAgcHVibGljIHRyaW1TdGFydChjb3VudDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKGNvdW50ID4gdGhpcy5fbGVuZ3RoKSB7XG4gICAgICBjb3VudCA9IHRoaXMuX2xlbmd0aDtcbiAgICB9XG4gICAgdGhpcy5fc3RhcnRJbmRleCArPSBjb3VudDtcbiAgICB0aGlzLl9sZW5ndGggLT0gY291bnQ7XG4gICAgdGhpcy5vblRyaW1FbWl0dGVyLmZpcmUoY291bnQpO1xuICB9XG5cbiAgcHVibGljIHNoaWZ0RWxlbWVudHMoc3RhcnQ6IG51bWJlciwgY291bnQ6IG51bWJlciwgb2Zmc2V0OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoY291bnQgPD0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMuX2xlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdGFydCBhcmd1bWVudCBvdXQgb2YgcmFuZ2UnKTtcbiAgICB9XG4gICAgaWYgKHN0YXJ0ICsgb2Zmc2V0IDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc2hpZnQgZWxlbWVudHMgaW4gbGlzdCBiZXlvbmQgaW5kZXggMCcpO1xuICAgIH1cblxuICAgIGlmIChvZmZzZXQgPiAwKSB7XG4gICAgICBmb3IgKGxldCBpID0gY291bnQgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB0aGlzLnNldChzdGFydCArIGkgKyBvZmZzZXQsIHRoaXMuZ2V0KHN0YXJ0ICsgaSkpO1xuICAgICAgfVxuICAgICAgY29uc3QgZXhwYW5kTGlzdEJ5ID0gKHN0YXJ0ICsgY291bnQgKyBvZmZzZXQpIC0gdGhpcy5fbGVuZ3RoO1xuICAgICAgaWYgKGV4cGFuZExpc3RCeSA+IDApIHtcbiAgICAgICAgdGhpcy5fbGVuZ3RoICs9IGV4cGFuZExpc3RCeTtcbiAgICAgICAgd2hpbGUgKHRoaXMuX2xlbmd0aCA+IHRoaXMuX21heExlbmd0aCkge1xuICAgICAgICAgIHRoaXMuX2xlbmd0aC0tO1xuICAgICAgICAgIHRoaXMuX3N0YXJ0SW5kZXgrKztcbiAgICAgICAgICB0aGlzLm9uVHJpbUVtaXR0ZXIuZmlyZSgxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgdGhpcy5zZXQoc3RhcnQgKyBpICsgb2Zmc2V0LCB0aGlzLmdldChzdGFydCArIGkpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgY3ljbGljIGluZGV4IGZvciB0aGUgc3BlY2lmaWVkIHJlZ3VsYXIgaW5kZXguIFRoZSBjeWNsaWMgaW5kZXggY2FuIHRoZW4gYmUgdXNlZCBvbiB0aGVcbiAgICogYmFja2luZyBhcnJheSB0byBnZXQgdGhlIGVsZW1lbnQgYXNzb2NpYXRlZCB3aXRoIHRoZSByZWd1bGFyIGluZGV4LlxuICAgKiBAcGFyYW0gaW5kZXggVGhlIHJlZ3VsYXIgaW5kZXguXG4gICAqIEByZXR1cm5zIFRoZSBjeWNsaWMgaW5kZXguXG4gICAqL1xuICBwcml2YXRlIF9nZXRDeWNsaWNJbmRleChpbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gKHRoaXMuX3N0YXJ0SW5kZXggKyBpbmRleCkgJSB0aGlzLl9tYXhMZW5ndGg7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE2IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuLypcbiAqIEEgc2ltcGxlIHV0aWxpdHkgZm9yIGNsb25pbmcgdmFsdWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZTxUPih2YWw6IFQsIGRlcHRoOiBudW1iZXIgPSA1KTogVCB7XG4gIGlmICh0eXBlb2YgdmFsICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICAvLyBJZiB3ZSdyZSBjbG9uaW5nIGFuIGFycmF5LCB1c2UgYW4gYXJyYXkgYXMgdGhlIGJhc2UsIG90aGVyd2lzZSB1c2UgYW4gb2JqZWN0XG4gIGNvbnN0IGNsb25lZE9iamVjdDogYW55ID0gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fTtcblxuICBmb3IgKGNvbnN0IGtleSBpbiB2YWwpIHtcbiAgICAvLyBSZWN1cnNpdmVseSBjbG9uZSBlYWNrIGl0ZW0gdW5sZXNzIHdlJ3JlIGF0IHRoZSBtYXhpbXVtIGRlcHRoXG4gICAgY2xvbmVkT2JqZWN0W2tleV0gPSBkZXB0aCA8PSAxID8gdmFsW2tleV0gOiAodmFsW2tleV0gJiYgY2xvbmUodmFsW2tleV0sIGRlcHRoIC0gMSkpO1xuICB9XG5cbiAgcmV0dXJuIGNsb25lZE9iamVjdCBhcyBUO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAyMCBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIENvcHlyaWdodCAoYykgMjAxMi0yMDEzLCBDaHJpc3RvcGhlciBKZWZmcmV5IChNSVQgTGljZW5zZSlcbiAqIEBsaWNlbnNlIE1JVFxuICpcbiAqIE9yaWdpbmFsbHkgZm9ya2VkIGZyb20gKHdpdGggdGhlIGF1dGhvcidzIHBlcm1pc3Npb24pOlxuICogICBGYWJyaWNlIEJlbGxhcmQncyBqYXZhc2NyaXB0IHZ0MTAwIGZvciBqc2xpbnV4OlxuICogICBodHRwOi8vYmVsbGFyZC5vcmcvanNsaW51eC9cbiAqICAgQ29weXJpZ2h0IChjKSAyMDExIEZhYnJpY2UgQmVsbGFyZFxuICogICBUaGUgb3JpZ2luYWwgZGVzaWduIHJlbWFpbnMuIFRoZSB0ZXJtaW5hbCBpdHNlbGZcbiAqICAgaGFzIGJlZW4gZXh0ZW5kZWQgdG8gaW5jbHVkZSB4dGVybSBDU0kgY29kZXMsIGFtb25nXG4gKiAgIG90aGVyIGZlYXR1cmVzLlxuICpcbiAqIFRlcm1pbmFsIEVtdWxhdGlvbiBSZWZlcmVuY2VzOlxuICogICBodHRwOi8vdnQxMDAubmV0L1xuICogICBodHRwOi8vaW52aXNpYmxlLWlzbGFuZC5uZXQveHRlcm0vY3Rsc2Vxcy9jdGxzZXFzLnR4dFxuICogICBodHRwOi8vaW52aXNpYmxlLWlzbGFuZC5uZXQveHRlcm0vY3Rsc2Vxcy9jdGxzZXFzLmh0bWxcbiAqICAgaHR0cDovL2ludmlzaWJsZS1pc2xhbmQubmV0L3Z0dGVzdC9cbiAqICAgaHR0cDovL3d3dy5pbndhcC5jb20vcGRwMTAvYW5zaWNvZGUudHh0XG4gKiAgIGh0dHA6Ly9saW51eC5kaWUubmV0L21hbi80L2NvbnNvbGVfY29kZXNcbiAqICAgaHR0cDovL2xpbnV4LmRpZS5uZXQvbWFuLzcvdXJ4dnRcbiAqL1xuXG5pbXBvcnQgeyBEaXNwb3NhYmxlIH0gZnJvbSAnY29tbW9uL0xpZmVjeWNsZSc7XG5pbXBvcnQgeyBJSW5zdGFudGlhdGlvblNlcnZpY2UsIElPcHRpb25zU2VydmljZSwgSUJ1ZmZlclNlcnZpY2UsIElMb2dTZXJ2aWNlLCBJQ2hhcnNldFNlcnZpY2UsIElDb3JlU2VydmljZSwgSUNvcmVNb3VzZVNlcnZpY2UsIElVbmljb2RlU2VydmljZSwgSURpcnR5Um93U2VydmljZSwgTG9nTGV2ZWxFbnVtLCBJVGVybWluYWxPcHRpb25zIH0gZnJvbSAnY29tbW9uL3NlcnZpY2VzL1NlcnZpY2VzJztcbmltcG9ydCB7IEluc3RhbnRpYXRpb25TZXJ2aWNlIH0gZnJvbSAnY29tbW9uL3NlcnZpY2VzL0luc3RhbnRpYXRpb25TZXJ2aWNlJztcbmltcG9ydCB7IExvZ1NlcnZpY2UgfSBmcm9tICdjb21tb24vc2VydmljZXMvTG9nU2VydmljZSc7XG5pbXBvcnQgeyBCdWZmZXJTZXJ2aWNlLCBNSU5JTVVNX0NPTFMsIE1JTklNVU1fUk9XUyB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9CdWZmZXJTZXJ2aWNlJztcbmltcG9ydCB7IE9wdGlvbnNTZXJ2aWNlIH0gZnJvbSAnY29tbW9uL3NlcnZpY2VzL09wdGlvbnNTZXJ2aWNlJztcbmltcG9ydCB7IElEaXNwb3NhYmxlLCBJQnVmZmVyTGluZSwgSUF0dHJpYnV0ZURhdGEsIElDb3JlVGVybWluYWwsIElLZXlib2FyZEV2ZW50LCBJU2Nyb2xsRXZlbnQsIFNjcm9sbFNvdXJjZSwgSVRlcm1pbmFsT3B0aW9ucyBhcyBJUHVibGljVGVybWluYWxPcHRpb25zIH0gZnJvbSAnY29tbW9uL1R5cGVzJztcbmltcG9ydCB7IENvcmVTZXJ2aWNlIH0gZnJvbSAnY29tbW9uL3NlcnZpY2VzL0NvcmVTZXJ2aWNlJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgSUV2ZW50LCBmb3J3YXJkRXZlbnQgfSBmcm9tICdjb21tb24vRXZlbnRFbWl0dGVyJztcbmltcG9ydCB7IENvcmVNb3VzZVNlcnZpY2UgfSBmcm9tICdjb21tb24vc2VydmljZXMvQ29yZU1vdXNlU2VydmljZSc7XG5pbXBvcnQgeyBEaXJ0eVJvd1NlcnZpY2UgfSBmcm9tICdjb21tb24vc2VydmljZXMvRGlydHlSb3dTZXJ2aWNlJztcbmltcG9ydCB7IFVuaWNvZGVTZXJ2aWNlIH0gZnJvbSAnY29tbW9uL3NlcnZpY2VzL1VuaWNvZGVTZXJ2aWNlJztcbmltcG9ydCB7IENoYXJzZXRTZXJ2aWNlIH0gZnJvbSAnY29tbW9uL3NlcnZpY2VzL0NoYXJzZXRTZXJ2aWNlJztcbmltcG9ydCB7IHVwZGF0ZVdpbmRvd3NNb2RlV3JhcHBlZFN0YXRlIH0gZnJvbSAnY29tbW9uL1dpbmRvd3NNb2RlJztcbmltcG9ydCB7IElGdW5jdGlvbklkZW50aWZpZXIsIElQYXJhbXMgfSBmcm9tICdjb21tb24vcGFyc2VyL1R5cGVzJztcbmltcG9ydCB7IElCdWZmZXJTZXQgfSBmcm9tICdjb21tb24vYnVmZmVyL1R5cGVzJztcbmltcG9ydCB7IElucHV0SGFuZGxlciB9IGZyb20gJ2NvbW1vbi9JbnB1dEhhbmRsZXInO1xuaW1wb3J0IHsgV3JpdGVCdWZmZXIgfSBmcm9tICdjb21tb24vaW5wdXQvV3JpdGVCdWZmZXInO1xuXG4vLyBPbmx5IHRyaWdnZXIgdGhpcyB3YXJuaW5nIGEgc2luZ2xlIHRpbWUgcGVyIHNlc3Npb25cbmxldCBoYXNXcml0ZVN5bmNXYXJuSGFwcGVuZWQgPSBmYWxzZTtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvcmVUZXJtaW5hbCBleHRlbmRzIERpc3Bvc2FibGUgaW1wbGVtZW50cyBJQ29yZVRlcm1pbmFsIHtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9pbnN0YW50aWF0aW9uU2VydmljZTogSUluc3RhbnRpYXRpb25TZXJ2aWNlO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX2J1ZmZlclNlcnZpY2U6IElCdWZmZXJTZXJ2aWNlO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX2xvZ1NlcnZpY2U6IElMb2dTZXJ2aWNlO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX2NoYXJzZXRTZXJ2aWNlOiBJQ2hhcnNldFNlcnZpY2U7XG4gIHByb3RlY3RlZCByZWFkb25seSBfZGlydHlSb3dTZXJ2aWNlOiBJRGlydHlSb3dTZXJ2aWNlO1xuXG4gIHB1YmxpYyByZWFkb25seSBjb3JlTW91c2VTZXJ2aWNlOiBJQ29yZU1vdXNlU2VydmljZTtcbiAgcHVibGljIHJlYWRvbmx5IGNvcmVTZXJ2aWNlOiBJQ29yZVNlcnZpY2U7XG4gIHB1YmxpYyByZWFkb25seSB1bmljb2RlU2VydmljZTogSVVuaWNvZGVTZXJ2aWNlO1xuICBwdWJsaWMgcmVhZG9ubHkgb3B0aW9uc1NlcnZpY2U6IElPcHRpb25zU2VydmljZTtcblxuICBwcm90ZWN0ZWQgX2lucHV0SGFuZGxlcjogSW5wdXRIYW5kbGVyO1xuICBwcml2YXRlIF93cml0ZUJ1ZmZlcjogV3JpdGVCdWZmZXI7XG4gIHByaXZhdGUgX3dpbmRvd3NNb2RlOiBJRGlzcG9zYWJsZSB8IHVuZGVmaW5lZDtcblxuICBwcml2YXRlIF9vbkJpbmFyeSA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuICBwdWJsaWMgZ2V0IG9uQmluYXJ5KCk6IElFdmVudDxzdHJpbmc+IHsgcmV0dXJuIHRoaXMuX29uQmluYXJ5LmV2ZW50OyB9XG4gIHByaXZhdGUgX29uRGF0YSA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuICBwdWJsaWMgZ2V0IG9uRGF0YSgpOiBJRXZlbnQ8c3RyaW5nPiB7IHJldHVybiB0aGlzLl9vbkRhdGEuZXZlbnQ7IH1cbiAgcHJvdGVjdGVkIF9vbkxpbmVGZWVkID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBwdWJsaWMgZ2V0IG9uTGluZUZlZWQoKTogSUV2ZW50PHZvaWQ+IHsgcmV0dXJuIHRoaXMuX29uTGluZUZlZWQuZXZlbnQ7IH1cbiAgcHJpdmF0ZSBfb25SZXNpemUgPSBuZXcgRXZlbnRFbWl0dGVyPHsgY29sczogbnVtYmVyLCByb3dzOiBudW1iZXIgfT4oKTtcbiAgcHVibGljIGdldCBvblJlc2l6ZSgpOiBJRXZlbnQ8eyBjb2xzOiBudW1iZXIsIHJvd3M6IG51bWJlciB9PiB7IHJldHVybiB0aGlzLl9vblJlc2l6ZS5ldmVudDsgfVxuICBwcm90ZWN0ZWQgX29uU2Nyb2xsID0gbmV3IEV2ZW50RW1pdHRlcjxJU2Nyb2xsRXZlbnQsIHZvaWQ+KCk7XG4gIC8qKlxuICAgKiBJbnRlcm5hbGx5IHdlIHRyYWNrIHRoZSBzb3VyY2Ugb2YgdGhlIHNjcm9sbCBidXQgdGhpcyBpcyBtZWFuaW5nbGVzcyBvdXRzaWRlIHRoZSBsaWJyYXJ5IHNvXG4gICAqIGl0J3MgZmlsdGVyZWQgb3V0LlxuICAgKi9cbiAgcHJvdGVjdGVkIF9vblNjcm9sbEFwaT86IEV2ZW50RW1pdHRlcjxudW1iZXIsIHZvaWQ+O1xuICBwdWJsaWMgZ2V0IG9uU2Nyb2xsKCk6IElFdmVudDxudW1iZXIsIHZvaWQ+IHtcbiAgICBpZiAoIXRoaXMuX29uU2Nyb2xsQXBpKSB7XG4gICAgICB0aGlzLl9vblNjcm9sbEFwaSA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyLCB2b2lkPigpO1xuICAgICAgdGhpcy5yZWdpc3Rlcih0aGlzLl9vblNjcm9sbC5ldmVudChldiA9PiB7XG4gICAgICAgIHRoaXMuX29uU2Nyb2xsQXBpPy5maXJlKGV2LnBvc2l0aW9uKTtcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX29uU2Nyb2xsQXBpLmV2ZW50O1xuICB9XG5cbiAgcHVibGljIGdldCBjb2xzKCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHM7IH1cbiAgcHVibGljIGdldCByb3dzKCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9idWZmZXJTZXJ2aWNlLnJvd3M7IH1cbiAgcHVibGljIGdldCBidWZmZXJzKCk6IElCdWZmZXJTZXQgeyByZXR1cm4gdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXJzOyB9XG4gIHB1YmxpYyBnZXQgb3B0aW9ucygpOiBJVGVybWluYWxPcHRpb25zIHsgcmV0dXJuIHRoaXMub3B0aW9uc1NlcnZpY2Uub3B0aW9uczsgfVxuICBwdWJsaWMgc2V0IG9wdGlvbnMob3B0aW9uczogSVRlcm1pbmFsT3B0aW9ucykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMub3B0aW9uc1NlcnZpY2Uub3B0aW9uc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIG9wdGlvbnM6IFBhcnRpYWw8SVRlcm1pbmFsT3B0aW9ucz5cbiAgKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8vIFNldHVwIGFuZCBpbml0aWFsaXplIHNlcnZpY2VzXG4gICAgdGhpcy5faW5zdGFudGlhdGlvblNlcnZpY2UgPSBuZXcgSW5zdGFudGlhdGlvblNlcnZpY2UoKTtcbiAgICB0aGlzLm9wdGlvbnNTZXJ2aWNlID0gbmV3IE9wdGlvbnNTZXJ2aWNlKG9wdGlvbnMpO1xuICAgIHRoaXMuX2luc3RhbnRpYXRpb25TZXJ2aWNlLnNldFNlcnZpY2UoSU9wdGlvbnNTZXJ2aWNlLCB0aGlzLm9wdGlvbnNTZXJ2aWNlKTtcbiAgICB0aGlzLl9idWZmZXJTZXJ2aWNlID0gdGhpcy5yZWdpc3Rlcih0aGlzLl9pbnN0YW50aWF0aW9uU2VydmljZS5jcmVhdGVJbnN0YW5jZShCdWZmZXJTZXJ2aWNlKSk7XG4gICAgdGhpcy5faW5zdGFudGlhdGlvblNlcnZpY2Uuc2V0U2VydmljZShJQnVmZmVyU2VydmljZSwgdGhpcy5fYnVmZmVyU2VydmljZSk7XG4gICAgdGhpcy5fbG9nU2VydmljZSA9IHRoaXMuX2luc3RhbnRpYXRpb25TZXJ2aWNlLmNyZWF0ZUluc3RhbmNlKExvZ1NlcnZpY2UpO1xuICAgIHRoaXMuX2luc3RhbnRpYXRpb25TZXJ2aWNlLnNldFNlcnZpY2UoSUxvZ1NlcnZpY2UsIHRoaXMuX2xvZ1NlcnZpY2UpO1xuICAgIHRoaXMuY29yZVNlcnZpY2UgPSB0aGlzLnJlZ2lzdGVyKHRoaXMuX2luc3RhbnRpYXRpb25TZXJ2aWNlLmNyZWF0ZUluc3RhbmNlKENvcmVTZXJ2aWNlLCAoKSA9PiB0aGlzLnNjcm9sbFRvQm90dG9tKCkpKTtcbiAgICB0aGlzLl9pbnN0YW50aWF0aW9uU2VydmljZS5zZXRTZXJ2aWNlKElDb3JlU2VydmljZSwgdGhpcy5jb3JlU2VydmljZSk7XG4gICAgdGhpcy5jb3JlTW91c2VTZXJ2aWNlID0gdGhpcy5faW5zdGFudGlhdGlvblNlcnZpY2UuY3JlYXRlSW5zdGFuY2UoQ29yZU1vdXNlU2VydmljZSk7XG4gICAgdGhpcy5faW5zdGFudGlhdGlvblNlcnZpY2Uuc2V0U2VydmljZShJQ29yZU1vdXNlU2VydmljZSwgdGhpcy5jb3JlTW91c2VTZXJ2aWNlKTtcbiAgICB0aGlzLl9kaXJ0eVJvd1NlcnZpY2UgPSB0aGlzLl9pbnN0YW50aWF0aW9uU2VydmljZS5jcmVhdGVJbnN0YW5jZShEaXJ0eVJvd1NlcnZpY2UpO1xuICAgIHRoaXMuX2luc3RhbnRpYXRpb25TZXJ2aWNlLnNldFNlcnZpY2UoSURpcnR5Um93U2VydmljZSwgdGhpcy5fZGlydHlSb3dTZXJ2aWNlKTtcbiAgICB0aGlzLnVuaWNvZGVTZXJ2aWNlID0gdGhpcy5faW5zdGFudGlhdGlvblNlcnZpY2UuY3JlYXRlSW5zdGFuY2UoVW5pY29kZVNlcnZpY2UpO1xuICAgIHRoaXMuX2luc3RhbnRpYXRpb25TZXJ2aWNlLnNldFNlcnZpY2UoSVVuaWNvZGVTZXJ2aWNlLCB0aGlzLnVuaWNvZGVTZXJ2aWNlKTtcbiAgICB0aGlzLl9jaGFyc2V0U2VydmljZSA9IHRoaXMuX2luc3RhbnRpYXRpb25TZXJ2aWNlLmNyZWF0ZUluc3RhbmNlKENoYXJzZXRTZXJ2aWNlKTtcbiAgICB0aGlzLl9pbnN0YW50aWF0aW9uU2VydmljZS5zZXRTZXJ2aWNlKElDaGFyc2V0U2VydmljZSwgdGhpcy5fY2hhcnNldFNlcnZpY2UpO1xuXG4gICAgLy8gUmVnaXN0ZXIgaW5wdXQgaGFuZGxlciBhbmQgaGFuZGxlL2ZvcndhcmQgZXZlbnRzXG4gICAgdGhpcy5faW5wdXRIYW5kbGVyID0gbmV3IElucHV0SGFuZGxlcih0aGlzLl9idWZmZXJTZXJ2aWNlLCB0aGlzLl9jaGFyc2V0U2VydmljZSwgdGhpcy5jb3JlU2VydmljZSwgdGhpcy5fZGlydHlSb3dTZXJ2aWNlLCB0aGlzLl9sb2dTZXJ2aWNlLCB0aGlzLm9wdGlvbnNTZXJ2aWNlLCB0aGlzLmNvcmVNb3VzZVNlcnZpY2UsIHRoaXMudW5pY29kZVNlcnZpY2UpO1xuICAgIHRoaXMucmVnaXN0ZXIoZm9yd2FyZEV2ZW50KHRoaXMuX2lucHV0SGFuZGxlci5vbkxpbmVGZWVkLCB0aGlzLl9vbkxpbmVGZWVkKSk7XG4gICAgdGhpcy5yZWdpc3Rlcih0aGlzLl9pbnB1dEhhbmRsZXIpO1xuXG4gICAgLy8gU2V0dXAgbGlzdGVuZXJzXG4gICAgdGhpcy5yZWdpc3Rlcihmb3J3YXJkRXZlbnQodGhpcy5fYnVmZmVyU2VydmljZS5vblJlc2l6ZSwgdGhpcy5fb25SZXNpemUpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKGZvcndhcmRFdmVudCh0aGlzLmNvcmVTZXJ2aWNlLm9uRGF0YSwgdGhpcy5fb25EYXRhKSk7XG4gICAgdGhpcy5yZWdpc3Rlcihmb3J3YXJkRXZlbnQodGhpcy5jb3JlU2VydmljZS5vbkJpbmFyeSwgdGhpcy5fb25CaW5hcnkpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMub3B0aW9uc1NlcnZpY2Uub25PcHRpb25DaGFuZ2Uoa2V5ID0+IHRoaXMuX3VwZGF0ZU9wdGlvbnMoa2V5KSkpO1xuICAgIHRoaXMucmVnaXN0ZXIodGhpcy5fYnVmZmVyU2VydmljZS5vblNjcm9sbChldmVudCA9PiB7XG4gICAgICB0aGlzLl9vblNjcm9sbC5maXJlKHsgcG9zaXRpb246IHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLnlkaXNwLCBzb3VyY2U6IFNjcm9sbFNvdXJjZS5URVJNSU5BTCB9KTtcbiAgICAgIHRoaXMuX2RpcnR5Um93U2VydmljZS5tYXJrUmFuZ2VEaXJ0eSh0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlci5zY3JvbGxUb3AsIHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLnNjcm9sbEJvdHRvbSk7XG4gICAgfSkpO1xuICAgIHRoaXMucmVnaXN0ZXIodGhpcy5faW5wdXRIYW5kbGVyLm9uU2Nyb2xsKGV2ZW50ID0+IHtcbiAgICAgIHRoaXMuX29uU2Nyb2xsLmZpcmUoeyBwb3NpdGlvbjogdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXIueWRpc3AsIHNvdXJjZTogU2Nyb2xsU291cmNlLlRFUk1JTkFMIH0pO1xuICAgICAgdGhpcy5fZGlydHlSb3dTZXJ2aWNlLm1hcmtSYW5nZURpcnR5KHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLnNjcm9sbFRvcCwgdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXIuc2Nyb2xsQm90dG9tKTtcbiAgICB9KSk7XG5cbiAgICAvLyBTZXR1cCBXcml0ZUJ1ZmZlclxuICAgIHRoaXMuX3dyaXRlQnVmZmVyID0gbmV3IFdyaXRlQnVmZmVyKChkYXRhLCBwcm9taXNlUmVzdWx0KSA9PiB0aGlzLl9pbnB1dEhhbmRsZXIucGFyc2UoZGF0YSwgcHJvbWlzZVJlc3VsdCkpO1xuICB9XG5cbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2lzRGlzcG9zZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICAgIHRoaXMuX3dpbmRvd3NNb2RlPy5kaXNwb3NlKCk7XG4gICAgdGhpcy5fd2luZG93c01vZGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgd3JpdGUoZGF0YTogc3RyaW5nIHwgVWludDhBcnJheSwgY2FsbGJhY2s/OiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5fd3JpdGVCdWZmZXIud3JpdGUoZGF0YSwgY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlIGRhdGEgdG8gdGVybWluYWwgc3luY2hvbm91c2x5LlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyB1bnJlbGlhYmxlIHdpdGggYXN5bmMgcGFyc2VyIGhhbmRsZXJzLCB0aHVzIHNob3VsZCBub3RcbiAgICogYmUgdXNlZCBhbnltb3JlLiBJZiB5b3UgbmVlZCBibG9ja2luZyBzZW1hbnRpY3Mgb24gZGF0YSBpbnB1dCBjb25zaWRlclxuICAgKiBgd3JpdGVgIHdpdGggYSBjYWxsYmFjayBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBVbnJlbGlhYmxlLCB3aWxsIGJlIHJlbW92ZWQgc29vbi5cbiAgICovXG4gIHB1YmxpYyB3cml0ZVN5bmMoZGF0YTogc3RyaW5nIHwgVWludDhBcnJheSwgbWF4U3Vic2VxdWVudENhbGxzPzogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2xvZ1NlcnZpY2UubG9nTGV2ZWwgPD0gTG9nTGV2ZWxFbnVtLldBUk4gJiYgIWhhc1dyaXRlU3luY1dhcm5IYXBwZW5lZCkge1xuICAgICAgdGhpcy5fbG9nU2VydmljZS53YXJuKCd3cml0ZVN5bmMgaXMgdW5yZWxpYWJsZSBhbmQgd2lsbCBiZSByZW1vdmVkIHNvb24uJyk7XG4gICAgICBoYXNXcml0ZVN5bmNXYXJuSGFwcGVuZWQgPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLl93cml0ZUJ1ZmZlci53cml0ZVN5bmMoZGF0YSwgbWF4U3Vic2VxdWVudENhbGxzKTtcbiAgfVxuXG4gIHB1YmxpYyByZXNpemUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoaXNOYU4oeCkgfHwgaXNOYU4oeSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB4ID0gTWF0aC5tYXgoeCwgTUlOSU1VTV9DT0xTKTtcbiAgICB5ID0gTWF0aC5tYXgoeSwgTUlOSU1VTV9ST1dTKTtcblxuICAgIHRoaXMuX2J1ZmZlclNlcnZpY2UucmVzaXplKHgsIHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNjcm9sbCB0aGUgdGVybWluYWwgZG93biAxIHJvdywgY3JlYXRpbmcgYSBibGFuayBsaW5lLlxuICAgKiBAcGFyYW0gaXNXcmFwcGVkIFdoZXRoZXIgdGhlIG5ldyBsaW5lIGlzIHdyYXBwZWQgZnJvbSB0aGUgcHJldmlvdXMgbGluZS5cbiAgICovXG4gIHB1YmxpYyBzY3JvbGwoZXJhc2VBdHRyOiBJQXR0cmlidXRlRGF0YSwgaXNXcmFwcGVkOiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcbiAgICB0aGlzLl9idWZmZXJTZXJ2aWNlLnNjcm9sbChlcmFzZUF0dHIsIGlzV3JhcHBlZCk7XG4gIH1cblxuICAvKipcbiAgICogU2Nyb2xsIHRoZSBkaXNwbGF5IG9mIHRoZSB0ZXJtaW5hbFxuICAgKiBAcGFyYW0gZGlzcCBUaGUgbnVtYmVyIG9mIGxpbmVzIHRvIHNjcm9sbCBkb3duIChuZWdhdGl2ZSBzY3JvbGwgdXApLlxuICAgKiBAcGFyYW0gc3VwcHJlc3NTY3JvbGxFdmVudCBEb24ndCBlbWl0IHRoZSBzY3JvbGwgZXZlbnQgYXMgc2Nyb2xsTGluZXMuIFRoaXMgaXMgdXNlZFxuICAgKiB0byBhdm9pZCB1bndhbnRlZCBldmVudHMgYmVpbmcgaGFuZGxlZCBieSB0aGUgdmlld3BvcnQgd2hlbiB0aGUgZXZlbnQgd2FzIHRyaWdnZXJlZCBmcm9tIHRoZVxuICAgKiB2aWV3cG9ydCBvcmlnaW5hbGx5LlxuICAgKi9cbiAgcHVibGljIHNjcm9sbExpbmVzKGRpc3A6IG51bWJlciwgc3VwcHJlc3NTY3JvbGxFdmVudD86IGJvb2xlYW4sIHNvdXJjZT86IFNjcm9sbFNvdXJjZSk6IHZvaWQge1xuICAgIHRoaXMuX2J1ZmZlclNlcnZpY2Uuc2Nyb2xsTGluZXMoZGlzcCwgc3VwcHJlc3NTY3JvbGxFdmVudCwgc291cmNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY3JvbGwgdGhlIGRpc3BsYXkgb2YgdGhlIHRlcm1pbmFsIGJ5IGEgbnVtYmVyIG9mIHBhZ2VzLlxuICAgKiBAcGFyYW0gcGFnZUNvdW50IFRoZSBudW1iZXIgb2YgcGFnZXMgdG8gc2Nyb2xsIChuZWdhdGl2ZSBzY3JvbGxzIHVwKS5cbiAgICovXG4gIHB1YmxpYyBzY3JvbGxQYWdlcyhwYWdlQ291bnQ6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2J1ZmZlclNlcnZpY2Uuc2Nyb2xsUGFnZXMocGFnZUNvdW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY3JvbGxzIHRoZSBkaXNwbGF5IG9mIHRoZSB0ZXJtaW5hbCB0byB0aGUgdG9wLlxuICAgKi9cbiAgcHVibGljIHNjcm9sbFRvVG9wKCk6IHZvaWQge1xuICAgIHRoaXMuX2J1ZmZlclNlcnZpY2Uuc2Nyb2xsVG9Ub3AoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY3JvbGxzIHRoZSBkaXNwbGF5IG9mIHRoZSB0ZXJtaW5hbCB0byB0aGUgYm90dG9tLlxuICAgKi9cbiAgcHVibGljIHNjcm9sbFRvQm90dG9tKCk6IHZvaWQge1xuICAgIHRoaXMuX2J1ZmZlclNlcnZpY2Uuc2Nyb2xsVG9Cb3R0b20oKTtcbiAgfVxuXG4gIHB1YmxpYyBzY3JvbGxUb0xpbmUobGluZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fYnVmZmVyU2VydmljZS5zY3JvbGxUb0xpbmUobGluZSk7XG4gIH1cblxuICAvKiogQWRkIGhhbmRsZXIgZm9yIEVTQyBlc2NhcGUgc2VxdWVuY2UuIFNlZSB4dGVybS5kLnRzIGZvciBkZXRhaWxzLiAqL1xuICBwdWJsaWMgcmVnaXN0ZXJFc2NIYW5kbGVyKGlkOiBJRnVuY3Rpb25JZGVudGlmaWVyLCBjYWxsYmFjazogKCkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4pOiBJRGlzcG9zYWJsZSB7XG4gICAgcmV0dXJuIHRoaXMuX2lucHV0SGFuZGxlci5yZWdpc3RlckVzY0hhbmRsZXIoaWQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKiBBZGQgaGFuZGxlciBmb3IgRENTIGVzY2FwZSBzZXF1ZW5jZS4gU2VlIHh0ZXJtLmQudHMgZm9yIGRldGFpbHMuICovXG4gIHB1YmxpYyByZWdpc3RlckRjc0hhbmRsZXIoaWQ6IElGdW5jdGlvbklkZW50aWZpZXIsIGNhbGxiYWNrOiAoZGF0YTogc3RyaW5nLCBwYXJhbTogSVBhcmFtcykgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4pOiBJRGlzcG9zYWJsZSB7XG4gICAgcmV0dXJuIHRoaXMuX2lucHV0SGFuZGxlci5yZWdpc3RlckRjc0hhbmRsZXIoaWQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKiBBZGQgaGFuZGxlciBmb3IgQ1NJIGVzY2FwZSBzZXF1ZW5jZS4gU2VlIHh0ZXJtLmQudHMgZm9yIGRldGFpbHMuICovXG4gIHB1YmxpYyByZWdpc3RlckNzaUhhbmRsZXIoaWQ6IElGdW5jdGlvbklkZW50aWZpZXIsIGNhbGxiYWNrOiAocGFyYW1zOiBJUGFyYW1zKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPik6IElEaXNwb3NhYmxlIHtcbiAgICByZXR1cm4gdGhpcy5faW5wdXRIYW5kbGVyLnJlZ2lzdGVyQ3NpSGFuZGxlcihpZCwgY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqIEFkZCBoYW5kbGVyIGZvciBPU0MgZXNjYXBlIHNlcXVlbmNlLiBTZWUgeHRlcm0uZC50cyBmb3IgZGV0YWlscy4gKi9cbiAgcHVibGljIHJlZ2lzdGVyT3NjSGFuZGxlcihpZGVudDogbnVtYmVyLCBjYWxsYmFjazogKGRhdGE6IHN0cmluZykgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4pOiBJRGlzcG9zYWJsZSB7XG4gICAgcmV0dXJuIHRoaXMuX2lucHV0SGFuZGxlci5yZWdpc3Rlck9zY0hhbmRsZXIoaWRlbnQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfc2V0dXAoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMub3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy53aW5kb3dzTW9kZSkge1xuICAgICAgdGhpcy5fZW5hYmxlV2luZG93c01vZGUoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XG4gICAgdGhpcy5faW5wdXRIYW5kbGVyLnJlc2V0KCk7XG4gICAgdGhpcy5fYnVmZmVyU2VydmljZS5yZXNldCgpO1xuICAgIHRoaXMuX2NoYXJzZXRTZXJ2aWNlLnJlc2V0KCk7XG4gICAgdGhpcy5jb3JlU2VydmljZS5yZXNldCgpO1xuICAgIHRoaXMuY29yZU1vdXNlU2VydmljZS5yZXNldCgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIF91cGRhdGVPcHRpb25zKGtleTogc3RyaW5nKTogdm9pZCB7XG4gICAgLy8gVE9ETzogVGhlc2UgbGlzdGVuZXJzIHNob3VsZCBiZSBvd25lZCBieSBpbmRpdmlkdWFsIGNvbXBvbmVudHNcbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgY2FzZSAnc2Nyb2xsYmFjayc6XG4gICAgICAgIHRoaXMuYnVmZmVycy5yZXNpemUodGhpcy5jb2xzLCB0aGlzLnJvd3MpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3dpbmRvd3NNb2RlJzpcbiAgICAgICAgaWYgKHRoaXMub3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy53aW5kb3dzTW9kZSkge1xuICAgICAgICAgIHRoaXMuX2VuYWJsZVdpbmRvd3NNb2RlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fd2luZG93c01vZGU/LmRpc3Bvc2UoKTtcbiAgICAgICAgICB0aGlzLl93aW5kb3dzTW9kZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgX2VuYWJsZVdpbmRvd3NNb2RlKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5fd2luZG93c01vZGUpIHtcbiAgICAgIGNvbnN0IGRpc3Bvc2FibGVzOiBJRGlzcG9zYWJsZVtdID0gW107XG4gICAgICBkaXNwb3NhYmxlcy5wdXNoKHRoaXMub25MaW5lRmVlZCh1cGRhdGVXaW5kb3dzTW9kZVdyYXBwZWRTdGF0ZS5iaW5kKG51bGwsIHRoaXMuX2J1ZmZlclNlcnZpY2UpKSk7XG4gICAgICBkaXNwb3NhYmxlcy5wdXNoKHRoaXMucmVnaXN0ZXJDc2lIYW5kbGVyKHsgZmluYWw6ICdIJyB9LCAoKSA9PiB7XG4gICAgICAgIHVwZGF0ZVdpbmRvd3NNb2RlV3JhcHBlZFN0YXRlKHRoaXMuX2J1ZmZlclNlcnZpY2UpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KSk7XG4gICAgICB0aGlzLl93aW5kb3dzTW9kZSA9IHtcbiAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgIGZvciAoY29uc3QgZCBvZiBkaXNwb3NhYmxlcykge1xuICAgICAgICAgICAgZC5kaXNwb3NlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJRGlzcG9zYWJsZSB9IGZyb20gJ2NvbW1vbi9UeXBlcyc7XG5cbmludGVyZmFjZSBJTGlzdGVuZXI8VCwgVSA9IHZvaWQ+IHtcbiAgKGFyZzE6IFQsIGFyZzI6IFUpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElFdmVudDxULCBVID0gdm9pZD4ge1xuICAobGlzdGVuZXI6IChhcmcxOiBULCBhcmcyOiBVKSA9PiBhbnkpOiBJRGlzcG9zYWJsZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRXZlbnRFbWl0dGVyPFQsIFUgPSB2b2lkPiB7XG4gIGV2ZW50OiBJRXZlbnQ8VCwgVT47XG4gIGZpcmUoYXJnMTogVCwgYXJnMjogVSk6IHZvaWQ7XG4gIGRpc3Bvc2UoKTogdm9pZDtcbn1cblxuZXhwb3J0IGNsYXNzIEV2ZW50RW1pdHRlcjxULCBVID0gdm9pZD4gaW1wbGVtZW50cyBJRXZlbnRFbWl0dGVyPFQsIFU+IHtcbiAgcHJpdmF0ZSBfbGlzdGVuZXJzOiBJTGlzdGVuZXI8VCwgVT5bXSA9IFtdO1xuICBwcml2YXRlIF9ldmVudD86IElFdmVudDxULCBVPjtcbiAgcHJpdmF0ZSBfZGlzcG9zZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwdWJsaWMgZ2V0IGV2ZW50KCk6IElFdmVudDxULCBVPiB7XG4gICAgaWYgKCF0aGlzLl9ldmVudCkge1xuICAgICAgdGhpcy5fZXZlbnQgPSAobGlzdGVuZXI6IChhcmcxOiBULCBhcmcyOiBVKSA9PiBhbnkpID0+IHtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICBjb25zdCBkaXNwb3NhYmxlID0ge1xuICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fZGlzcG9zZWQpIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9saXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJzW2ldID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBkaXNwb3NhYmxlO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2V2ZW50O1xuICB9XG5cbiAgcHVibGljIGZpcmUoYXJnMTogVCwgYXJnMjogVSk6IHZvaWQge1xuICAgIGNvbnN0IHF1ZXVlOiBJTGlzdGVuZXI8VCwgVT5bXSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBxdWV1ZS5wdXNoKHRoaXMuX2xpc3RlbmVyc1tpXSk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHF1ZXVlW2ldLmNhbGwodW5kZWZpbmVkLCBhcmcxLCBhcmcyKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMubGVuZ3RoID0gMDtcbiAgICB9XG4gICAgdGhpcy5fZGlzcG9zZWQgPSB0cnVlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkRXZlbnQ8VD4oZnJvbTogSUV2ZW50PFQ+LCB0bzogSUV2ZW50RW1pdHRlcjxUPik6IElEaXNwb3NhYmxlIHtcbiAgcmV0dXJuIGZyb20oZSA9PiB0by5maXJlKGUpKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTMsIENocmlzdG9waGVyIEplZmZyZXkgKE1JVCBMaWNlbnNlKVxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSUlucHV0SGFuZGxlciwgSUF0dHJpYnV0ZURhdGEsIElEaXNwb3NhYmxlLCBJV2luZG93T3B0aW9ucywgSUNvbG9yRXZlbnQsIElQYXJzZVN0YWNrLCBDb2xvckluZGV4LCBDb2xvclJlcXVlc3RUeXBlIH0gZnJvbSAnY29tbW9uL1R5cGVzJztcbmltcG9ydCB7IEMwLCBDMSB9IGZyb20gJ2NvbW1vbi9kYXRhL0VzY2FwZVNlcXVlbmNlcyc7XG5pbXBvcnQgeyBDSEFSU0VUUywgREVGQVVMVF9DSEFSU0VUIH0gZnJvbSAnY29tbW9uL2RhdGEvQ2hhcnNldHMnO1xuaW1wb3J0IHsgRXNjYXBlU2VxdWVuY2VQYXJzZXIgfSBmcm9tICdjb21tb24vcGFyc2VyL0VzY2FwZVNlcXVlbmNlUGFyc2VyJztcbmltcG9ydCB7IERpc3Bvc2FibGUgfSBmcm9tICdjb21tb24vTGlmZWN5Y2xlJztcbmltcG9ydCB7IGNvbmNhdCB9IGZyb20gJ2NvbW1vbi9UeXBlZEFycmF5VXRpbHMnO1xuaW1wb3J0IHsgU3RyaW5nVG9VdGYzMiwgc3RyaW5nRnJvbUNvZGVQb2ludCwgdXRmMzJUb1N0cmluZywgVXRmOFRvVXRmMzIgfSBmcm9tICdjb21tb24vaW5wdXQvVGV4dERlY29kZXInO1xuaW1wb3J0IHsgREVGQVVMVF9BVFRSX0RBVEEgfSBmcm9tICdjb21tb24vYnVmZmVyL0J1ZmZlckxpbmUnO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJRXZlbnQgfSBmcm9tICdjb21tb24vRXZlbnRFbWl0dGVyJztcbmltcG9ydCB7IElQYXJzaW5nU3RhdGUsIElEY3NIYW5kbGVyLCBJRXNjYXBlU2VxdWVuY2VQYXJzZXIsIElQYXJhbXMsIElGdW5jdGlvbklkZW50aWZpZXIgfSBmcm9tICdjb21tb24vcGFyc2VyL1R5cGVzJztcbmltcG9ydCB7IE5VTExfQ0VMTF9DT0RFLCBOVUxMX0NFTExfV0lEVEgsIEF0dHJpYnV0ZXMsIEZnRmxhZ3MsIEJnRmxhZ3MsIENvbnRlbnQsIFVuZGVybGluZVN0eWxlIH0gZnJvbSAnY29tbW9uL2J1ZmZlci9Db25zdGFudHMnO1xuaW1wb3J0IHsgQ2VsbERhdGEgfSBmcm9tICdjb21tb24vYnVmZmVyL0NlbGxEYXRhJztcbmltcG9ydCB7IEF0dHJpYnV0ZURhdGEgfSBmcm9tICdjb21tb24vYnVmZmVyL0F0dHJpYnV0ZURhdGEnO1xuaW1wb3J0IHsgSUNvcmVTZXJ2aWNlLCBJQnVmZmVyU2VydmljZSwgSU9wdGlvbnNTZXJ2aWNlLCBJTG9nU2VydmljZSwgSURpcnR5Um93U2VydmljZSwgSUNvcmVNb3VzZVNlcnZpY2UsIElDaGFyc2V0U2VydmljZSwgSVVuaWNvZGVTZXJ2aWNlLCBMb2dMZXZlbEVudW0gfSBmcm9tICdjb21tb24vc2VydmljZXMvU2VydmljZXMnO1xuaW1wb3J0IHsgT3NjSGFuZGxlciB9IGZyb20gJ2NvbW1vbi9wYXJzZXIvT3NjUGFyc2VyJztcbmltcG9ydCB7IERjc0hhbmRsZXIgfSBmcm9tICdjb21tb24vcGFyc2VyL0Rjc1BhcnNlcic7XG5pbXBvcnQgeyBJQnVmZmVyIH0gZnJvbSAnY29tbW9uL2J1ZmZlci9UeXBlcyc7XG5pbXBvcnQgeyBwYXJzZUNvbG9yIH0gZnJvbSAnY29tbW9uL2lucHV0L1hQYXJzZUNvbG9yJztcblxuLyoqXG4gKiBNYXAgY29sbGVjdCB0byBnbGV2ZWwuIFVzZWQgaW4gYHNlbGVjdENoYXJzZXRgLlxuICovXG5jb25zdCBHTEVWRUw6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0gPSB7ICcoJzogMCwgJyknOiAxLCAnKic6IDIsICcrJzogMywgJy0nOiAxLCAnLic6IDIgfTtcblxuLyoqXG4gKiBWVCBjb21tYW5kcyBkb25lIGJ5IHRoZSBwYXJzZXIgLSBGSVhNRTogbW92ZSB0aGlzIHRvIHRoZSBwYXJzZXI/XG4gKi9cbi8vIEB2dDogI1kgICBFU0MgICBDU0kgICBcIkNvbnRyb2wgU2VxdWVuY2UgSW50cm9kdWNlclwiICAgXCJFU0MgW1wiICAgXCJTdGFydCBvZiBhIENTSSBzZXF1ZW5jZS5cIlxuLy8gQHZ0OiAjWSAgIEVTQyAgIE9TQyAgIFwiT3BlcmF0aW5nIFN5c3RlbSBDb21tYW5kXCIgICAgICBcIkVTQyBdXCIgICBcIlN0YXJ0IG9mIGFuIE9TQyBzZXF1ZW5jZS5cIlxuLy8gQHZ0OiAjWSAgIEVTQyAgIERDUyAgIFwiRGV2aWNlIENvbnRyb2wgU3RyaW5nXCIgICAgICAgICBcIkVTQyBQXCIgICBcIlN0YXJ0IG9mIGEgRENTIHNlcXVlbmNlLlwiXG4vLyBAdnQ6ICNZICAgRVNDICAgU1QgICAgXCJTdHJpbmcgVGVybWluYXRvclwiICAgICAgICAgICAgIFwiRVNDIFxcXCIgICBcIlRlcm1pbmF0b3IgdXNlZCBmb3Igc3RyaW5nIHR5cGUgc2VxdWVuY2VzLlwiXG4vLyBAdnQ6ICNZICAgRVNDICAgUE0gICAgXCJQcml2YWN5IE1lc3NhZ2VcIiAgICAgICAgICAgICAgIFwiRVNDIF5cIiAgIFwiU3RhcnQgb2YgYSBwcml2YWN5IG1lc3NhZ2UuXCJcbi8vIEB2dDogI1kgICBFU0MgICBBUEMgICBcIkFwcGxpY2F0aW9uIFByb2dyYW0gQ29tbWFuZFwiICAgXCJFU0MgX1wiICAgXCJTdGFydCBvZiBhbiBBUEMgc2VxdWVuY2UuXCJcbi8vIEB2dDogI1kgICBDMSAgICBDU0kgICBcIkNvbnRyb2wgU2VxdWVuY2UgSW50cm9kdWNlclwiICAgXCJcXHg5QlwiICAgIFwiU3RhcnQgb2YgYSBDU0kgc2VxdWVuY2UuXCJcbi8vIEB2dDogI1kgICBDMSAgICBPU0MgICBcIk9wZXJhdGluZyBTeXN0ZW0gQ29tbWFuZFwiICAgICAgXCJcXHg5RFwiICAgIFwiU3RhcnQgb2YgYW4gT1NDIHNlcXVlbmNlLlwiXG4vLyBAdnQ6ICNZICAgQzEgICAgRENTICAgXCJEZXZpY2UgQ29udHJvbCBTdHJpbmdcIiAgICAgICAgIFwiXFx4OTBcIiAgICBcIlN0YXJ0IG9mIGEgRENTIHNlcXVlbmNlLlwiXG4vLyBAdnQ6ICNZICAgQzEgICAgU1QgICAgXCJTdHJpbmcgVGVybWluYXRvclwiICAgICAgICAgICAgIFwiXFx4OUNcIiAgICBcIlRlcm1pbmF0b3IgdXNlZCBmb3Igc3RyaW5nIHR5cGUgc2VxdWVuY2VzLlwiXG4vLyBAdnQ6ICNZICAgQzEgICAgUE0gICAgXCJQcml2YWN5IE1lc3NhZ2VcIiAgICAgICAgICAgICAgIFwiXFx4OUVcIiAgICBcIlN0YXJ0IG9mIGEgcHJpdmFjeSBtZXNzYWdlLlwiXG4vLyBAdnQ6ICNZICAgQzEgICAgQVBDICAgXCJBcHBsaWNhdGlvbiBQcm9ncmFtIENvbW1hbmRcIiAgIFwiXFx4OUZcIiAgICBcIlN0YXJ0IG9mIGFuIEFQQyBzZXF1ZW5jZS5cIlxuLy8gQHZ0OiAjWSAgIEMwICAgIE5VTCAgIFwiTnVsbFwiICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcMCwgXFx4MDBcIiAgXCJOVUwgaXMgaWdub3JlZC5cIlxuLy8gQHZ0OiAjWSAgIEMwICAgIEVTQyAgIFwiRXNjYXBlXCIgICAgICAgICAgICAgICAgICAgICAgICBcIlxcZSwgXFx4MUJcIiAgXCJTdGFydCBvZiBhIHNlcXVlbmNlLiBDYW5jZWxzIGFueSBvdGhlciBzZXF1ZW5jZS5cIlxuXG4vKipcbiAqIERvY3VtZW50IGNvbW1vbiBWVCBmZWF0dXJlcyBoZXJlIHRoYXQgYXJlIGN1cnJlbnRseSB1bnN1cHBvcnRlZFxuICovXG4vLyBAdnQ6ICNOICAgRENTICAgU0lYRUwgICBcIlNJWEVMIEdyYXBoaWNzXCIgIFwiRENTIFBzIDsgUHMgOyBQcyA7IHEgXHRQdCBTVFwiICAgXCJEcmF3IFNJWEVMIGltYWdlIHN0YXJ0aW5nIGF0IGN1cnNvciBwb3NpdGlvbi5cIlxuLy8gQHZ0OiAjTiAgIE9TQyAgICAxICAgXCJTZXQgSWNvbiBOYW1lXCIgIFwiT1NDIDEgOyBQdCBCRUxcIiAgXCJTZXQgaWNvbiBuYW1lLlwiXG5cbi8qKlxuICogTWF4IGxlbmd0aCBvZiB0aGUgVVRGMzIgaW5wdXQgYnVmZmVyLiBSZWFsIG1lbW9yeSBjb25zdW1wdGlvbiBpcyA0IHRpbWVzIGhpZ2hlci5cbiAqL1xuY29uc3QgTUFYX1BBUlNFQlVGRkVSX0xFTkdUSCA9IDEzMTA3MjtcblxuLyoqXG4gKiBMaW1pdCBsZW5ndGggb2YgdGl0bGUgYW5kIGljb24gbmFtZSBzdGFja3MuXG4gKi9cbmNvbnN0IFNUQUNLX0xJTUlUID0gMTA7XG5cbi8vIG1hcCBwYXJhbXMgdG8gd2luZG93IG9wdGlvblxuZnVuY3Rpb24gcGFyYW1Ub1dpbmRvd09wdGlvbihuOiBudW1iZXIsIG9wdHM6IElXaW5kb3dPcHRpb25zKTogYm9vbGVhbiB7XG4gIGlmIChuID4gMjQpIHtcbiAgICByZXR1cm4gb3B0cy5zZXRXaW5MaW5lcyB8fCBmYWxzZTtcbiAgfVxuICBzd2l0Y2ggKG4pIHtcbiAgICBjYXNlIDE6IHJldHVybiAhIW9wdHMucmVzdG9yZVdpbjtcbiAgICBjYXNlIDI6IHJldHVybiAhIW9wdHMubWluaW1pemVXaW47XG4gICAgY2FzZSAzOiByZXR1cm4gISFvcHRzLnNldFdpblBvc2l0aW9uO1xuICAgIGNhc2UgNDogcmV0dXJuICEhb3B0cy5zZXRXaW5TaXplUGl4ZWxzO1xuICAgIGNhc2UgNTogcmV0dXJuICEhb3B0cy5yYWlzZVdpbjtcbiAgICBjYXNlIDY6IHJldHVybiAhIW9wdHMubG93ZXJXaW47XG4gICAgY2FzZSA3OiByZXR1cm4gISFvcHRzLnJlZnJlc2hXaW47XG4gICAgY2FzZSA4OiByZXR1cm4gISFvcHRzLnNldFdpblNpemVDaGFycztcbiAgICBjYXNlIDk6IHJldHVybiAhIW9wdHMubWF4aW1pemVXaW47XG4gICAgY2FzZSAxMDogcmV0dXJuICEhb3B0cy5mdWxsc2NyZWVuV2luO1xuICAgIGNhc2UgMTE6IHJldHVybiAhIW9wdHMuZ2V0V2luU3RhdGU7XG4gICAgY2FzZSAxMzogcmV0dXJuICEhb3B0cy5nZXRXaW5Qb3NpdGlvbjtcbiAgICBjYXNlIDE0OiByZXR1cm4gISFvcHRzLmdldFdpblNpemVQaXhlbHM7XG4gICAgY2FzZSAxNTogcmV0dXJuICEhb3B0cy5nZXRTY3JlZW5TaXplUGl4ZWxzO1xuICAgIGNhc2UgMTY6IHJldHVybiAhIW9wdHMuZ2V0Q2VsbFNpemVQaXhlbHM7XG4gICAgY2FzZSAxODogcmV0dXJuICEhb3B0cy5nZXRXaW5TaXplQ2hhcnM7XG4gICAgY2FzZSAxOTogcmV0dXJuICEhb3B0cy5nZXRTY3JlZW5TaXplQ2hhcnM7XG4gICAgY2FzZSAyMDogcmV0dXJuICEhb3B0cy5nZXRJY29uVGl0bGU7XG4gICAgY2FzZSAyMTogcmV0dXJuICEhb3B0cy5nZXRXaW5UaXRsZTtcbiAgICBjYXNlIDIyOiByZXR1cm4gISFvcHRzLnB1c2hUaXRsZTtcbiAgICBjYXNlIDIzOiByZXR1cm4gISFvcHRzLnBvcFRpdGxlO1xuICAgIGNhc2UgMjQ6IHJldHVybiAhIW9wdHMuc2V0V2luTGluZXM7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZW51bSBXaW5kb3dzT3B0aW9uc1JlcG9ydFR5cGUge1xuICBHRVRfV0lOX1NJWkVfUElYRUxTID0gMCxcbiAgR0VUX0NFTExfU0laRV9QSVhFTFMgPSAxXG59XG5cbi8vIGNyZWF0ZSBhIHdhcm5pbmcgbG9nIGlmIGFuIGFzeW5jIGhhbmRsZXIgdGFrZXMgbG9uZ2VyIHRoYW4gdGhlIGxpbWl0IChpbiBtcylcbmNvbnN0IFNMT1dfQVNZTkNfTElNSVQgPSA1MDAwO1xuXG4vKipcbiAqIERDUyBzdWJwYXJzZXIgaW1wbGVtZW50YXRpb25zXG4gKi9cblxuLyoqXG4gKiBEQ1MgJCBxIFB0IFNUXG4gKiAgIERFQ1JRU1MgKGh0dHBzOi8vdnQxMDAubmV0L2RvY3MvdnQ1MTAtcm0vREVDUlFTUy5odG1sKVxuICogICBSZXF1ZXN0IFN0YXR1cyBTdHJpbmcgKERFQ1JRU1MpLCBWVDQyMCBhbmQgdXAuXG4gKiAgIFJlc3BvbnNlOiBERUNSUFNTIChodHRwczovL3Z0MTAwLm5ldC9kb2NzL3Z0NTEwLXJtL0RFQ1JQU1MuaHRtbClcbiAqXG4gKiBAdnQ6ICNQW1NlZSBsaW1pdGVkIHN1cHBvcnQgYmVsb3cuXSAgRENTICAgREVDUlFTUyAgIFwiUmVxdWVzdCBTZWxlY3Rpb24gb3IgU2V0dGluZ1wiICBcIkRDUyAkIHEgUHQgU1RcIiAgIFwiUmVxdWVzdCBzZXZlcmFsIHRlcm1pbmFsIHNldHRpbmdzLlwiXG4gKiBSZXNwb25zZSBpcyBpbiB0aGUgZm9ybSBgRVNDIFAgMSAkIHIgUHQgU1RgIGZvciB2YWxpZCByZXF1ZXN0cywgd2hlcmUgYFB0YCBjb250YWlucyB0aGUgY29ycmVzcG9uZGluZyBDU0kgc3RyaW5nLFxuICogYEVTQyBQIDAgU1RgIGZvciBpbnZhbGlkIHJlcXVlc3RzLlxuICpcbiAqIFN1cHBvcnRlZCByZXF1ZXN0cyBhbmQgcmVzcG9uc2VzOlxuICpcbiAqIHwgVHlwZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSZXF1ZXN0ICAgICAgICAgICB8IFJlc3BvbnNlIChgUHRgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbiAqIHwgR3JhcGhpYyBSZW5kaXRpb24gKFNHUikgICAgICAgICAgfCBgRENTICQgcSBtIFNUYCAgICB8IGFsd2F5cyByZXBvcnRpbmcgYDBtYCAoY3VycmVudGx5IGJyb2tlbikgICAgICAgICAgICAgIHxcbiAqIHwgVG9wIGFuZCBCb3R0b20gTWFyZ2lucyAoREVDU1RCTSkgfCBgRENTICQgcSByIFNUYCAgICB8IGBQcyA7IFBzIHJgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgQ3Vyc29yIFN0eWxlIChERUNTQ1VTUikgICAgICAgICAgfCBgRENTICQgcSBTUCBxIFNUYCB8IGBQcyBTUCBxYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgUHJvdGVjdGlvbiBBdHRyaWJ1dGUgKERFQ1NDQSkgICAgfCBgRENTICQgcSBcIiBxIFNUYCAgfCBhbHdheXMgcmVwb3J0aW5nIGAwIFwiIHFgIChERUNTQ0EgaXMgdW5zdXBwb3J0ZWQpICAgICAgfFxuICogfCBDb25mb3JtYW5jZSBMZXZlbCAoREVDU0NMKSAgICAgICB8IGBEQ1MgJCBxIFwiIHAgU1RgICB8IGFsd2F5cyByZXBvcnRpbmcgYDYxIDsgMSBcIiBwYCAoREVDU0NMIGlzIHVuc3VwcG9ydGVkKSB8XG4gKlxuICpcbiAqIFRPRE86XG4gKiAtIGZpeCBTR1IgcmVwb3J0XG4gKiAtIGVpdGhlciBpbXBsZW1lbnQgREVDU0NBIG9yIHJlbW92ZSB0aGUgcmVwb3J0XG4gKiAtIGVpdGhlciBjaGVjayB3aGljaCBjb25mb3JtYW5jZSBpcyBiZXR0ZXIgc3VpdGVkIG9yIHJlbW92ZSB0aGUgcmVwb3J0IGNvbXBsZXRlbHlcbiAqICAgLS0+IHdlIGFyZSBjdXJyZW50bHkgYSBtaXh0dXJlIG9mIGFsbCB1cCB0byBWVDQwMCBidXQgZG9udCBmb2xsb3cgYW55b25lIHN0cmljdGx5XG4gKi9cbmNsYXNzIERFQ1JRU1MgaW1wbGVtZW50cyBJRGNzSGFuZGxlciB7XG4gIHByaXZhdGUgX2RhdGE6IFVpbnQzMkFycmF5ID0gbmV3IFVpbnQzMkFycmF5KDApO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX2J1ZmZlclNlcnZpY2U6IElCdWZmZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgX2NvcmVTZXJ2aWNlOiBJQ29yZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBfbG9nU2VydmljZTogSUxvZ1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBfb3B0aW9uc1NlcnZpY2U6IElPcHRpb25zU2VydmljZVxuICApIHsgfVxuXG4gIHB1YmxpYyBob29rKHBhcmFtczogSVBhcmFtcyk6IHZvaWQge1xuICAgIHRoaXMuX2RhdGEgPSBuZXcgVWludDMyQXJyYXkoMCk7XG4gIH1cblxuICBwdWJsaWMgcHV0KGRhdGE6IFVpbnQzMkFycmF5LCBzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2RhdGEgPSBjb25jYXQodGhpcy5fZGF0YSwgZGF0YS5zdWJhcnJheShzdGFydCwgZW5kKSk7XG4gIH1cblxuICBwdWJsaWMgdW5ob29rKHN1Y2Nlc3M6IGJvb2xlYW4pOiBib29sZWFuIHtcbiAgICBpZiAoIXN1Y2Nlc3MpIHtcbiAgICAgIHRoaXMuX2RhdGEgPSBuZXcgVWludDMyQXJyYXkoMCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IHV0ZjMyVG9TdHJpbmcodGhpcy5fZGF0YSk7XG4gICAgdGhpcy5fZGF0YSA9IG5ldyBVaW50MzJBcnJheSgwKTtcbiAgICBzd2l0Y2ggKGRhdGEpIHtcbiAgICAgIC8vIHZhbGlkOiBEQ1MgMSAkIHIgUHQgU1QgKHh0ZXJtKVxuICAgICAgY2FzZSAnXCJxJzogLy8gREVDU0NBXG4gICAgICAgIHRoaXMuX2NvcmVTZXJ2aWNlLnRyaWdnZXJEYXRhRXZlbnQoYCR7QzAuRVNDfVAxJHIwXCJxJHtDMC5FU0N9XFxcXGApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ1wicCc6IC8vIERFQ1NDTFxuICAgICAgICB0aGlzLl9jb3JlU2VydmljZS50cmlnZ2VyRGF0YUV2ZW50KGAke0MwLkVTQ31QMSRyNjE7MVwicCR7QzAuRVNDfVxcXFxgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyJzogLy8gREVDU1RCTVxuICAgICAgICBjb25zdCBwdCA9ICcnICsgKHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVyLnNjcm9sbFRvcCArIDEpICtcbiAgICAgICAgICAnOycgKyAodGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXIuc2Nyb2xsQm90dG9tICsgMSkgKyAncic7XG4gICAgICAgIHRoaXMuX2NvcmVTZXJ2aWNlLnRyaWdnZXJEYXRhRXZlbnQoYCR7QzAuRVNDfVAxJHIke3B0fSR7QzAuRVNDfVxcXFxgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtJzogLy8gU0dSXG4gICAgICAgIC8vIFRPRE86IHJlcG9ydCByZWFsIHNldHRpbmdzIGluc3RlYWQgb2YgMG1cbiAgICAgICAgdGhpcy5fY29yZVNlcnZpY2UudHJpZ2dlckRhdGFFdmVudChgJHtDMC5FU0N9UDEkcjBtJHtDMC5FU0N9XFxcXGApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJyBxJzogLy8gREVDU0NVU1JcbiAgICAgICAgY29uc3QgU1RZTEVTOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9ID0geyAnYmxvY2snOiAyLCAndW5kZXJsaW5lJzogNCwgJ2Jhcic6IDYgfTtcbiAgICAgICAgbGV0IHN0eWxlID0gU1RZTEVTW3RoaXMuX29wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMuY3Vyc29yU3R5bGVdO1xuICAgICAgICBzdHlsZSAtPSB0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLmN1cnNvckJsaW5rID8gMSA6IDA7XG4gICAgICAgIHRoaXMuX2NvcmVTZXJ2aWNlLnRyaWdnZXJEYXRhRXZlbnQoYCR7QzAuRVNDfVAxJHIke3N0eWxlfSBxJHtDMC5FU0N9XFxcXGApO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIGludmFsaWQ6IERDUyAwICQgciBQdCBTVCAoeHRlcm0pXG4gICAgICAgIHRoaXMuX2xvZ1NlcnZpY2UuZGVidWcoJ1Vua25vd24gRENTICRxICVzJywgZGF0YSk7XG4gICAgICAgIHRoaXMuX2NvcmVTZXJ2aWNlLnRyaWdnZXJEYXRhRXZlbnQoYCR7QzAuRVNDfVAwJHIke0MwLkVTQ31cXFxcYCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogRENTIFBzOyBQc3wgUHQgU1RcbiAqICAgREVDVURLIChodHRwczovL3Z0MTAwLm5ldC9kb2NzL3Z0NTEwLXJtL0RFQ1VESy5odG1sKVxuICogICBub3Qgc3VwcG9ydGVkXG4gKlxuICogQHZ0OiAjTiAgRENTICAgREVDVURLICAgXCJVc2VyIERlZmluZWQgS2V5c1wiICBcIkRDUyBQcyA7IFBzIHwgUHQgU1RcIiAgIFwiRGVmaW5pdGlvbnMgZm9yIHVzZXItZGVmaW5lZCBrZXlzLlwiXG4gKi9cblxuLyoqXG4gKiBEQ1MgKyBxIFB0IFNUICh4dGVybSlcbiAqICAgUmVxdWVzdCBUZXJtaW5mbyBTdHJpbmdcbiAqICAgbm90IGltcGxlbWVudGVkXG4gKlxuICogQHZ0OiAjTiAgRENTICAgWFRHRVRUQ0FQICAgXCJSZXF1ZXN0IFRlcm1pbmZvIFN0cmluZ1wiICBcIkRDUyArIHEgUHQgU1RcIiAgIFwiUmVxdWVzdCBUZXJtaW5mbyBTdHJpbmcuXCJcbiAqL1xuXG4vKipcbiAqIERDUyArIHAgUHQgU1QgKHh0ZXJtKVxuICogICBTZXQgVGVybWluZm8gRGF0YVxuICogICBub3Qgc3VwcG9ydGVkXG4gKlxuICogQHZ0OiAjTiAgRENTICAgWFRTRVRUQ0FQICAgXCJTZXQgVGVybWluZm8gRGF0YVwiICBcIkRDUyArIHAgUHQgU1RcIiAgIFwiU2V0IFRlcm1pbmZvIERhdGEuXCJcbiAqL1xuXG5cblxuLyoqXG4gKiBUaGUgdGVybWluYWwncyBzdGFuZGFyZCBpbXBsZW1lbnRhdGlvbiBvZiBJSW5wdXRIYW5kbGVyLCB0aGlzIGhhbmRsZXMgYWxsXG4gKiBpbnB1dCBmcm9tIHRoZSBQYXJzZXIuXG4gKlxuICogUmVmZXIgdG8gaHR0cDovL2ludmlzaWJsZS1pc2xhbmQubmV0L3h0ZXJtL2N0bHNlcXMvY3Rsc2Vxcy5odG1sIHRvIHVuZGVyc3RhbmRcbiAqIGVhY2ggZnVuY3Rpb24ncyBoZWFkZXIgY29tbWVudC5cbiAqL1xuZXhwb3J0IGNsYXNzIElucHV0SGFuZGxlciBleHRlbmRzIERpc3Bvc2FibGUgaW1wbGVtZW50cyBJSW5wdXRIYW5kbGVyIHtcbiAgcHJpdmF0ZSBfcGFyc2VCdWZmZXI6IFVpbnQzMkFycmF5ID0gbmV3IFVpbnQzMkFycmF5KDQwOTYpO1xuICBwcml2YXRlIF9zdHJpbmdEZWNvZGVyOiBTdHJpbmdUb1V0ZjMyID0gbmV3IFN0cmluZ1RvVXRmMzIoKTtcbiAgcHJpdmF0ZSBfdXRmOERlY29kZXI6IFV0ZjhUb1V0ZjMyID0gbmV3IFV0ZjhUb1V0ZjMyKCk7XG4gIHByaXZhdGUgX3dvcmtDZWxsOiBDZWxsRGF0YSA9IG5ldyBDZWxsRGF0YSgpO1xuICBwcml2YXRlIF93aW5kb3dUaXRsZSA9ICcnO1xuICBwcml2YXRlIF9pY29uTmFtZSA9ICcnO1xuICBwcm90ZWN0ZWQgX3dpbmRvd1RpdGxlU3RhY2s6IHN0cmluZ1tdID0gW107XG4gIHByb3RlY3RlZCBfaWNvbk5hbWVTdGFjazogc3RyaW5nW10gPSBbXTtcblxuICBwcml2YXRlIF9jdXJBdHRyRGF0YTogSUF0dHJpYnV0ZURhdGEgPSBERUZBVUxUX0FUVFJfREFUQS5jbG9uZSgpO1xuICBwcml2YXRlIF9lcmFzZUF0dHJEYXRhSW50ZXJuYWw6IElBdHRyaWJ1dGVEYXRhID0gREVGQVVMVF9BVFRSX0RBVEEuY2xvbmUoKTtcblxuICBwcml2YXRlIF9hY3RpdmVCdWZmZXI6IElCdWZmZXI7XG5cbiAgcHJpdmF0ZSBfb25SZXF1ZXN0QmVsbCA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgcHVibGljIGdldCBvblJlcXVlc3RCZWxsKCk6IElFdmVudDx2b2lkPiB7IHJldHVybiB0aGlzLl9vblJlcXVlc3RCZWxsLmV2ZW50OyB9XG4gIHByaXZhdGUgX29uUmVxdWVzdFJlZnJlc2hSb3dzID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXIsIG51bWJlcj4oKTtcbiAgcHVibGljIGdldCBvblJlcXVlc3RSZWZyZXNoUm93cygpOiBJRXZlbnQ8bnVtYmVyLCBudW1iZXI+IHsgcmV0dXJuIHRoaXMuX29uUmVxdWVzdFJlZnJlc2hSb3dzLmV2ZW50OyB9XG4gIHByaXZhdGUgX29uUmVxdWVzdFJlc2V0ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBwdWJsaWMgZ2V0IG9uUmVxdWVzdFJlc2V0KCk6IElFdmVudDx2b2lkPiB7IHJldHVybiB0aGlzLl9vblJlcXVlc3RSZXNldC5ldmVudDsgfVxuICBwcml2YXRlIF9vblJlcXVlc3RTZW5kRm9jdXMgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIHB1YmxpYyBnZXQgb25SZXF1ZXN0U2VuZEZvY3VzKCk6IElFdmVudDx2b2lkPiB7IHJldHVybiB0aGlzLl9vblJlcXVlc3RTZW5kRm9jdXMuZXZlbnQ7IH1cbiAgcHJpdmF0ZSBfb25SZXF1ZXN0U3luY1Njcm9sbEJhciA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgcHVibGljIGdldCBvblJlcXVlc3RTeW5jU2Nyb2xsQmFyKCk6IElFdmVudDx2b2lkPiB7IHJldHVybiB0aGlzLl9vblJlcXVlc3RTeW5jU2Nyb2xsQmFyLmV2ZW50OyB9XG4gIHByaXZhdGUgX29uUmVxdWVzdFdpbmRvd3NPcHRpb25zUmVwb3J0ID0gbmV3IEV2ZW50RW1pdHRlcjxXaW5kb3dzT3B0aW9uc1JlcG9ydFR5cGU+KCk7XG4gIHB1YmxpYyBnZXQgb25SZXF1ZXN0V2luZG93c09wdGlvbnNSZXBvcnQoKTogSUV2ZW50PFdpbmRvd3NPcHRpb25zUmVwb3J0VHlwZT4geyByZXR1cm4gdGhpcy5fb25SZXF1ZXN0V2luZG93c09wdGlvbnNSZXBvcnQuZXZlbnQ7IH1cblxuICBwcml2YXRlIF9vbkExMXlDaGFyID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG4gIHB1YmxpYyBnZXQgb25BMTF5Q2hhcigpOiBJRXZlbnQ8c3RyaW5nPiB7IHJldHVybiB0aGlzLl9vbkExMXlDaGFyLmV2ZW50OyB9XG4gIHByaXZhdGUgX29uQTExeVRhYiA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xuICBwdWJsaWMgZ2V0IG9uQTExeVRhYigpOiBJRXZlbnQ8bnVtYmVyPiB7IHJldHVybiB0aGlzLl9vbkExMXlUYWIuZXZlbnQ7IH1cbiAgcHJpdmF0ZSBfb25DdXJzb3JNb3ZlID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBwdWJsaWMgZ2V0IG9uQ3Vyc29yTW92ZSgpOiBJRXZlbnQ8dm9pZD4geyByZXR1cm4gdGhpcy5fb25DdXJzb3JNb3ZlLmV2ZW50OyB9XG4gIHByaXZhdGUgX29uTGluZUZlZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIHB1YmxpYyBnZXQgb25MaW5lRmVlZCgpOiBJRXZlbnQ8dm9pZD4geyByZXR1cm4gdGhpcy5fb25MaW5lRmVlZC5ldmVudDsgfVxuICBwcml2YXRlIF9vblNjcm9sbCA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xuICBwdWJsaWMgZ2V0IG9uU2Nyb2xsKCk6IElFdmVudDxudW1iZXI+IHsgcmV0dXJuIHRoaXMuX29uU2Nyb2xsLmV2ZW50OyB9XG4gIHByaXZhdGUgX29uVGl0bGVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgcHVibGljIGdldCBvblRpdGxlQ2hhbmdlKCk6IElFdmVudDxzdHJpbmc+IHsgcmV0dXJuIHRoaXMuX29uVGl0bGVDaGFuZ2UuZXZlbnQ7IH1cbiAgcHJpdmF0ZSBfb25Db2xvciA9IG5ldyBFdmVudEVtaXR0ZXI8SUNvbG9yRXZlbnQ+KCk7XG4gIHB1YmxpYyBnZXQgb25Db2xvcigpOiBJRXZlbnQ8SUNvbG9yRXZlbnQ+IHsgcmV0dXJuIHRoaXMuX29uQ29sb3IuZXZlbnQ7IH1cblxuICBwcml2YXRlIF9wYXJzZVN0YWNrOiBJUGFyc2VTdGFjayA9IHtcbiAgICBwYXVzZWQ6IGZhbHNlLFxuICAgIGN1cnNvclN0YXJ0WDogMCxcbiAgICBjdXJzb3JTdGFydFk6IDAsXG4gICAgZGVjb2RlZExlbmd0aDogMCxcbiAgICBwb3NpdGlvbjogMFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2J1ZmZlclNlcnZpY2U6IElCdWZmZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2NoYXJzZXRTZXJ2aWNlOiBJQ2hhcnNldFNlcnZpY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY29yZVNlcnZpY2U6IElDb3JlU2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9kaXJ0eVJvd1NlcnZpY2U6IElEaXJ0eVJvd1NlcnZpY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSBfbG9nU2VydmljZTogSUxvZ1NlcnZpY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSBfb3B0aW9uc1NlcnZpY2U6IElPcHRpb25zU2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9jb3JlTW91c2VTZXJ2aWNlOiBJQ29yZU1vdXNlU2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IF91bmljb2RlU2VydmljZTogSVVuaWNvZGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3BhcnNlcjogSUVzY2FwZVNlcXVlbmNlUGFyc2VyID0gbmV3IEVzY2FwZVNlcXVlbmNlUGFyc2VyKClcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuX3BhcnNlcik7XG5cbiAgICAvLyBUcmFjayBwcm9wZXJ0aWVzIHVzZWQgaW4gcGVyZm9ybWFuY2UgY3JpdGljYWwgY29kZSBtYW51YWxseSB0byBhdm9pZCB1c2luZyBzbG93IGdldHRlcnNcbiAgICB0aGlzLl9hY3RpdmVCdWZmZXIgPSB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlcjtcbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVycy5vbkJ1ZmZlckFjdGl2YXRlKGUgPT4gdGhpcy5fYWN0aXZlQnVmZmVyID0gZS5hY3RpdmVCdWZmZXIpKTtcblxuICAgIC8qKlxuICAgICAqIGN1c3RvbSBmYWxsYmFjayBoYW5kbGVyc1xuICAgICAqL1xuICAgIHRoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyRmFsbGJhY2soKGlkZW50LCBwYXJhbXMpID0+IHtcbiAgICAgIHRoaXMuX2xvZ1NlcnZpY2UuZGVidWcoJ1Vua25vd24gQ1NJIGNvZGU6ICcsIHsgaWRlbnRpZmllcjogdGhpcy5fcGFyc2VyLmlkZW50VG9TdHJpbmcoaWRlbnQpLCBwYXJhbXM6IHBhcmFtcy50b0FycmF5KCkgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5fcGFyc2VyLnNldEVzY0hhbmRsZXJGYWxsYmFjayhpZGVudCA9PiB7XG4gICAgICB0aGlzLl9sb2dTZXJ2aWNlLmRlYnVnKCdVbmtub3duIEVTQyBjb2RlOiAnLCB7IGlkZW50aWZpZXI6IHRoaXMuX3BhcnNlci5pZGVudFRvU3RyaW5nKGlkZW50KSB9KTtcbiAgICB9KTtcbiAgICB0aGlzLl9wYXJzZXIuc2V0RXhlY3V0ZUhhbmRsZXJGYWxsYmFjayhjb2RlID0+IHtcbiAgICAgIHRoaXMuX2xvZ1NlcnZpY2UuZGVidWcoJ1Vua25vd24gRVhFQ1VURSBjb2RlOiAnLCB7IGNvZGUgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5fcGFyc2VyLnNldE9zY0hhbmRsZXJGYWxsYmFjaygoaWRlbnRpZmllciwgYWN0aW9uLCBkYXRhKSA9PiB7XG4gICAgICB0aGlzLl9sb2dTZXJ2aWNlLmRlYnVnKCdVbmtub3duIE9TQyBjb2RlOiAnLCB7IGlkZW50aWZpZXIsIGFjdGlvbiwgZGF0YSB9KTtcbiAgICB9KTtcbiAgICB0aGlzLl9wYXJzZXIuc2V0RGNzSGFuZGxlckZhbGxiYWNrKChpZGVudCwgYWN0aW9uLCBwYXlsb2FkKSA9PiB7XG4gICAgICBpZiAoYWN0aW9uID09PSAnSE9PSycpIHtcbiAgICAgICAgcGF5bG9hZCA9IHBheWxvYWQudG9BcnJheSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5fbG9nU2VydmljZS5kZWJ1ZygnVW5rbm93biBEQ1MgY29kZTogJywgeyBpZGVudGlmaWVyOiB0aGlzLl9wYXJzZXIuaWRlbnRUb1N0cmluZyhpZGVudCksIGFjdGlvbiwgcGF5bG9hZCB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIHByaW50IGhhbmRsZXJcbiAgICAgKi9cbiAgICB0aGlzLl9wYXJzZXIuc2V0UHJpbnRIYW5kbGVyKChkYXRhLCBzdGFydCwgZW5kKSA9PiB0aGlzLnByaW50KGRhdGEsIHN0YXJ0LCBlbmQpKTtcblxuICAgIC8qKlxuICAgICAqIENTSSBoYW5kbGVyXG4gICAgICovXG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyQ3NpSGFuZGxlcih7IGZpbmFsOiAnQCcgfSwgcGFyYW1zID0+IHRoaXMuaW5zZXJ0Q2hhcnMocGFyYW1zKSk7XG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyQ3NpSGFuZGxlcih7IGludGVybWVkaWF0ZXM6ICcgJywgZmluYWw6ICdAJyB9LCBwYXJhbXMgPT4gdGhpcy5zY3JvbGxMZWZ0KHBhcmFtcykpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckNzaUhhbmRsZXIoeyBmaW5hbDogJ0EnIH0sIHBhcmFtcyA9PiB0aGlzLmN1cnNvclVwKHBhcmFtcykpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckNzaUhhbmRsZXIoeyBpbnRlcm1lZGlhdGVzOiAnICcsIGZpbmFsOiAnQScgfSwgcGFyYW1zID0+IHRoaXMuc2Nyb2xsUmlnaHQocGFyYW1zKSk7XG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyQ3NpSGFuZGxlcih7IGZpbmFsOiAnQicgfSwgcGFyYW1zID0+IHRoaXMuY3Vyc29yRG93bihwYXJhbXMpKTtcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJDc2lIYW5kbGVyKHsgZmluYWw6ICdDJyB9LCBwYXJhbXMgPT4gdGhpcy5jdXJzb3JGb3J3YXJkKHBhcmFtcykpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckNzaUhhbmRsZXIoeyBmaW5hbDogJ0QnIH0sIHBhcmFtcyA9PiB0aGlzLmN1cnNvckJhY2t3YXJkKHBhcmFtcykpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckNzaUhhbmRsZXIoeyBmaW5hbDogJ0UnIH0sIHBhcmFtcyA9PiB0aGlzLmN1cnNvck5leHRMaW5lKHBhcmFtcykpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckNzaUhhbmRsZXIoeyBmaW5hbDogJ0YnIH0sIHBhcmFtcyA9PiB0aGlzLmN1cnNvclByZWNlZGluZ0xpbmUocGFyYW1zKSk7XG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyQ3NpSGFuZGxlcih7IGZpbmFsOiAnRycgfSwgcGFyYW1zID0+IHRoaXMuY3Vyc29yQ2hhckFic29sdXRlKHBhcmFtcykpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckNzaUhhbmRsZXIoeyBmaW5hbDogJ0gnIH0sIHBhcmFtcyA9PiB0aGlzLmN1cnNvclBvc2l0aW9uKHBhcmFtcykpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckNzaUhhbmRsZXIoeyBmaW5hbDogJ0knIH0sIHBhcmFtcyA9PiB0aGlzLmN1cnNvckZvcndhcmRUYWIocGFyYW1zKSk7XG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyQ3NpSGFuZGxlcih7IGZpbmFsOiAnSicgfSwgcGFyYW1zID0+IHRoaXMuZXJhc2VJbkRpc3BsYXkocGFyYW1zKSk7XG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyQ3NpSGFuZGxlcih7IHByZWZpeDogJz8nLCBmaW5hbDogJ0onIH0sIHBhcmFtcyA9PiB0aGlzLmVyYXNlSW5EaXNwbGF5KHBhcmFtcykpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckNzaUhhbmRsZXIoeyBmaW5hbDogJ0snIH0sIHBhcmFtcyA9PiB0aGlzLmVyYXNlSW5MaW5lKHBhcmFtcykpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckNzaUhhbmRsZXIoeyBwcmVmaXg6ICc/JywgZmluYWw6ICdLJyB9LCBwYXJhbXMgPT4gdGhpcy5lcmFzZUluTGluZShwYXJhbXMpKTtcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJDc2lIYW5kbGVyKHsgZmluYWw6ICdMJyB9LCBwYXJhbXMgPT4gdGhpcy5pbnNlcnRMaW5lcyhwYXJhbXMpKTtcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJDc2lIYW5kbGVyKHsgZmluYWw6ICdNJyB9LCBwYXJhbXMgPT4gdGhpcy5kZWxldGVMaW5lcyhwYXJhbXMpKTtcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJDc2lIYW5kbGVyKHsgZmluYWw6ICdQJyB9LCBwYXJhbXMgPT4gdGhpcy5kZWxldGVDaGFycyhwYXJhbXMpKTtcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJDc2lIYW5kbGVyKHsgZmluYWw6ICdTJyB9LCBwYXJhbXMgPT4gdGhpcy5zY3JvbGxVcChwYXJhbXMpKTtcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJDc2lIYW5kbGVyKHsgZmluYWw6ICdUJyB9LCBwYXJhbXMgPT4gdGhpcy5zY3JvbGxEb3duKHBhcmFtcykpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckNzaUhhbmRsZXIoeyBmaW5hbDogJ1gnIH0sIHBhcmFtcyA9PiB0aGlzLmVyYXNlQ2hhcnMocGFyYW1zKSk7XG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyQ3NpSGFuZGxlcih7IGZpbmFsOiAnWicgfSwgcGFyYW1zID0+IHRoaXMuY3Vyc29yQmFja3dhcmRUYWIocGFyYW1zKSk7XG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyQ3NpSGFuZGxlcih7IGZpbmFsOiAnYCcgfSwgcGFyYW1zID0+IHRoaXMuY2hhclBvc0Fic29sdXRlKHBhcmFtcykpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckNzaUhhbmRsZXIoeyBmaW5hbDogJ2EnIH0sIHBhcmFtcyA9PiB0aGlzLmhQb3NpdGlvblJlbGF0aXZlKHBhcmFtcykpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckNzaUhhbmRsZXIoeyBmaW5hbDogJ2InIH0sIHBhcmFtcyA9PiB0aGlzLnJlcGVhdFByZWNlZGluZ0NoYXJhY3RlcihwYXJhbXMpKTtcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJDc2lIYW5kbGVyKHsgZmluYWw6ICdjJyB9LCBwYXJhbXMgPT4gdGhpcy5zZW5kRGV2aWNlQXR0cmlidXRlc1ByaW1hcnkocGFyYW1zKSk7XG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyQ3NpSGFuZGxlcih7IHByZWZpeDogJz4nLCBmaW5hbDogJ2MnIH0sIHBhcmFtcyA9PiB0aGlzLnNlbmREZXZpY2VBdHRyaWJ1dGVzU2Vjb25kYXJ5KHBhcmFtcykpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckNzaUhhbmRsZXIoeyBmaW5hbDogJ2QnIH0sIHBhcmFtcyA9PiB0aGlzLmxpbmVQb3NBYnNvbHV0ZShwYXJhbXMpKTtcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJDc2lIYW5kbGVyKHsgZmluYWw6ICdlJyB9LCBwYXJhbXMgPT4gdGhpcy52UG9zaXRpb25SZWxhdGl2ZShwYXJhbXMpKTtcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJDc2lIYW5kbGVyKHsgZmluYWw6ICdmJyB9LCBwYXJhbXMgPT4gdGhpcy5oVlBvc2l0aW9uKHBhcmFtcykpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckNzaUhhbmRsZXIoeyBmaW5hbDogJ2cnIH0sIHBhcmFtcyA9PiB0aGlzLnRhYkNsZWFyKHBhcmFtcykpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckNzaUhhbmRsZXIoeyBmaW5hbDogJ2gnIH0sIHBhcmFtcyA9PiB0aGlzLnNldE1vZGUocGFyYW1zKSk7XG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyQ3NpSGFuZGxlcih7IHByZWZpeDogJz8nLCBmaW5hbDogJ2gnIH0sIHBhcmFtcyA9PiB0aGlzLnNldE1vZGVQcml2YXRlKHBhcmFtcykpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckNzaUhhbmRsZXIoeyBmaW5hbDogJ2wnIH0sIHBhcmFtcyA9PiB0aGlzLnJlc2V0TW9kZShwYXJhbXMpKTtcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJDc2lIYW5kbGVyKHsgcHJlZml4OiAnPycsIGZpbmFsOiAnbCcgfSwgcGFyYW1zID0+IHRoaXMucmVzZXRNb2RlUHJpdmF0ZShwYXJhbXMpKTtcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJDc2lIYW5kbGVyKHsgZmluYWw6ICdtJyB9LCBwYXJhbXMgPT4gdGhpcy5jaGFyQXR0cmlidXRlcyhwYXJhbXMpKTtcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJDc2lIYW5kbGVyKHsgZmluYWw6ICduJyB9LCBwYXJhbXMgPT4gdGhpcy5kZXZpY2VTdGF0dXMocGFyYW1zKSk7XG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyQ3NpSGFuZGxlcih7IHByZWZpeDogJz8nLCBmaW5hbDogJ24nIH0sIHBhcmFtcyA9PiB0aGlzLmRldmljZVN0YXR1c1ByaXZhdGUocGFyYW1zKSk7XG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyQ3NpSGFuZGxlcih7IGludGVybWVkaWF0ZXM6ICchJywgZmluYWw6ICdwJyB9LCBwYXJhbXMgPT4gdGhpcy5zb2Z0UmVzZXQocGFyYW1zKSk7XG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyQ3NpSGFuZGxlcih7IGludGVybWVkaWF0ZXM6ICcgJywgZmluYWw6ICdxJyB9LCBwYXJhbXMgPT4gdGhpcy5zZXRDdXJzb3JTdHlsZShwYXJhbXMpKTtcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJDc2lIYW5kbGVyKHsgZmluYWw6ICdyJyB9LCBwYXJhbXMgPT4gdGhpcy5zZXRTY3JvbGxSZWdpb24ocGFyYW1zKSk7XG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyQ3NpSGFuZGxlcih7IGZpbmFsOiAncycgfSwgcGFyYW1zID0+IHRoaXMuc2F2ZUN1cnNvcihwYXJhbXMpKTtcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJDc2lIYW5kbGVyKHsgZmluYWw6ICd0JyB9LCBwYXJhbXMgPT4gdGhpcy53aW5kb3dPcHRpb25zKHBhcmFtcykpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckNzaUhhbmRsZXIoeyBmaW5hbDogJ3UnIH0sIHBhcmFtcyA9PiB0aGlzLnJlc3RvcmVDdXJzb3IocGFyYW1zKSk7XG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyQ3NpSGFuZGxlcih7IGludGVybWVkaWF0ZXM6ICdcXCcnLCBmaW5hbDogJ30nIH0sIHBhcmFtcyA9PiB0aGlzLmluc2VydENvbHVtbnMocGFyYW1zKSk7XG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyQ3NpSGFuZGxlcih7IGludGVybWVkaWF0ZXM6ICdcXCcnLCBmaW5hbDogJ34nIH0sIHBhcmFtcyA9PiB0aGlzLmRlbGV0ZUNvbHVtbnMocGFyYW1zKSk7XG5cbiAgICAvKipcbiAgICAgKiBleGVjdXRlIGhhbmRsZXJcbiAgICAgKi9cbiAgICB0aGlzLl9wYXJzZXIuc2V0RXhlY3V0ZUhhbmRsZXIoQzAuQkVMLCAoKSA9PiB0aGlzLmJlbGwoKSk7XG4gICAgdGhpcy5fcGFyc2VyLnNldEV4ZWN1dGVIYW5kbGVyKEMwLkxGLCAoKSA9PiB0aGlzLmxpbmVGZWVkKCkpO1xuICAgIHRoaXMuX3BhcnNlci5zZXRFeGVjdXRlSGFuZGxlcihDMC5WVCwgKCkgPT4gdGhpcy5saW5lRmVlZCgpKTtcbiAgICB0aGlzLl9wYXJzZXIuc2V0RXhlY3V0ZUhhbmRsZXIoQzAuRkYsICgpID0+IHRoaXMubGluZUZlZWQoKSk7XG4gICAgdGhpcy5fcGFyc2VyLnNldEV4ZWN1dGVIYW5kbGVyKEMwLkNSLCAoKSA9PiB0aGlzLmNhcnJpYWdlUmV0dXJuKCkpO1xuICAgIHRoaXMuX3BhcnNlci5zZXRFeGVjdXRlSGFuZGxlcihDMC5CUywgKCkgPT4gdGhpcy5iYWNrc3BhY2UoKSk7XG4gICAgdGhpcy5fcGFyc2VyLnNldEV4ZWN1dGVIYW5kbGVyKEMwLkhULCAoKSA9PiB0aGlzLnRhYigpKTtcbiAgICB0aGlzLl9wYXJzZXIuc2V0RXhlY3V0ZUhhbmRsZXIoQzAuU08sICgpID0+IHRoaXMuc2hpZnRPdXQoKSk7XG4gICAgdGhpcy5fcGFyc2VyLnNldEV4ZWN1dGVIYW5kbGVyKEMwLlNJLCAoKSA9PiB0aGlzLnNoaWZ0SW4oKSk7XG4gICAgLy8gRklYTUU6ICAgV2hhdCBkbyB0byB3aXRoIG1pc3Npbmc/IE9sZCBjb2RlIGp1c3QgYWRkZWQgdGhvc2UgdG8gcHJpbnQuXG5cbiAgICB0aGlzLl9wYXJzZXIuc2V0RXhlY3V0ZUhhbmRsZXIoQzEuSU5ELCAoKSA9PiB0aGlzLmluZGV4KCkpO1xuICAgIHRoaXMuX3BhcnNlci5zZXRFeGVjdXRlSGFuZGxlcihDMS5ORUwsICgpID0+IHRoaXMubmV4dExpbmUoKSk7XG4gICAgdGhpcy5fcGFyc2VyLnNldEV4ZWN1dGVIYW5kbGVyKEMxLkhUUywgKCkgPT4gdGhpcy50YWJTZXQoKSk7XG5cbiAgICAvKipcbiAgICAgKiBPU0MgaGFuZGxlclxuICAgICAqL1xuICAgIC8vICAgMCAtIGljb24gbmFtZSArIHRpdGxlXG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyT3NjSGFuZGxlcigwLCBuZXcgT3NjSGFuZGxlcihkYXRhID0+IHsgdGhpcy5zZXRUaXRsZShkYXRhKTsgdGhpcy5zZXRJY29uTmFtZShkYXRhKTsgcmV0dXJuIHRydWU7IH0pKTtcbiAgICAvLyAgIDEgLSBpY29uIG5hbWVcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJPc2NIYW5kbGVyKDEsIG5ldyBPc2NIYW5kbGVyKGRhdGEgPT4gdGhpcy5zZXRJY29uTmFtZShkYXRhKSkpO1xuICAgIC8vICAgMiAtIHRpdGxlXG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyT3NjSGFuZGxlcigyLCBuZXcgT3NjSGFuZGxlcihkYXRhID0+IHRoaXMuc2V0VGl0bGUoZGF0YSkpKTtcbiAgICAvLyAgIDMgLSBzZXQgcHJvcGVydHkgWCBpbiB0aGUgZm9ybSBcInByb3A9dmFsdWVcIlxuICAgIC8vICAgNCAtIENoYW5nZSBDb2xvciBOdW1iZXJcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJPc2NIYW5kbGVyKDQsIG5ldyBPc2NIYW5kbGVyKGRhdGEgPT4gdGhpcy5zZXRPclJlcG9ydEluZGV4ZWRDb2xvcihkYXRhKSkpO1xuICAgIC8vICAgNSAtIENoYW5nZSBTcGVjaWFsIENvbG9yIE51bWJlclxuICAgIC8vICAgNiAtIEVuYWJsZS9kaXNhYmxlIFNwZWNpYWwgQ29sb3IgTnVtYmVyIGNcbiAgICAvLyAgIDcgLSBjdXJyZW50IGRpcmVjdG9yeT8gKG5vdCBpbiB4dGVybSBzcGVjLCBzZWUgaHR0cHM6Ly9naXRsYWIuY29tL2duYWNobWFuL2l0ZXJtMi9pc3N1ZXMvMzkzOSlcbiAgICAvLyAgMTAgLSBDaGFuZ2UgVlQxMDAgdGV4dCBmb3JlZ3JvdW5kIGNvbG9yIHRvIFB0LlxuICAgIHRoaXMuX3BhcnNlci5yZWdpc3Rlck9zY0hhbmRsZXIoMTAsIG5ldyBPc2NIYW5kbGVyKGRhdGEgPT4gdGhpcy5zZXRPclJlcG9ydEZnQ29sb3IoZGF0YSkpKTtcbiAgICAvLyAgMTEgLSBDaGFuZ2UgVlQxMDAgdGV4dCBiYWNrZ3JvdW5kIGNvbG9yIHRvIFB0LlxuICAgIHRoaXMuX3BhcnNlci5yZWdpc3Rlck9zY0hhbmRsZXIoMTEsIG5ldyBPc2NIYW5kbGVyKGRhdGEgPT4gdGhpcy5zZXRPclJlcG9ydEJnQ29sb3IoZGF0YSkpKTtcbiAgICAvLyAgMTIgLSBDaGFuZ2UgdGV4dCBjdXJzb3IgY29sb3IgdG8gUHQuXG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyT3NjSGFuZGxlcigxMiwgbmV3IE9zY0hhbmRsZXIoZGF0YSA9PiB0aGlzLnNldE9yUmVwb3J0Q3Vyc29yQ29sb3IoZGF0YSkpKTtcbiAgICAvLyAgMTMgLSBDaGFuZ2UgbW91c2UgZm9yZWdyb3VuZCBjb2xvciB0byBQdC5cbiAgICAvLyAgMTQgLSBDaGFuZ2UgbW91c2UgYmFja2dyb3VuZCBjb2xvciB0byBQdC5cbiAgICAvLyAgMTUgLSBDaGFuZ2UgVGVrdHJvbml4IGZvcmVncm91bmQgY29sb3IgdG8gUHQuXG4gICAgLy8gIDE2IC0gQ2hhbmdlIFRla3Ryb25peCBiYWNrZ3JvdW5kIGNvbG9yIHRvIFB0LlxuICAgIC8vICAxNyAtIENoYW5nZSBoaWdobGlnaHQgYmFja2dyb3VuZCBjb2xvciB0byBQdC5cbiAgICAvLyAgMTggLSBDaGFuZ2UgVGVrdHJvbml4IGN1cnNvciBjb2xvciB0byBQdC5cbiAgICAvLyAgMTkgLSBDaGFuZ2UgaGlnaGxpZ2h0IGZvcmVncm91bmQgY29sb3IgdG8gUHQuXG4gICAgLy8gIDQ2IC0gQ2hhbmdlIExvZyBGaWxlIHRvIFB0LlxuICAgIC8vICA1MCAtIFNldCBGb250IHRvIFB0LlxuICAgIC8vICA1MSAtIHJlc2VydmVkIGZvciBFbWFjcyBzaGVsbC5cbiAgICAvLyAgNTIgLSBNYW5pcHVsYXRlIFNlbGVjdGlvbiBEYXRhLlxuICAgIC8vIDEwNCA7IGMgLSBSZXNldCBDb2xvciBOdW1iZXIgYy5cbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJPc2NIYW5kbGVyKDEwNCwgbmV3IE9zY0hhbmRsZXIoZGF0YSA9PiB0aGlzLnJlc3RvcmVJbmRleGVkQ29sb3IoZGF0YSkpKTtcbiAgICAvLyAxMDUgOyBjIC0gUmVzZXQgU3BlY2lhbCBDb2xvciBOdW1iZXIgYy5cbiAgICAvLyAxMDYgOyBjOyBmIC0gRW5hYmxlL2Rpc2FibGUgU3BlY2lhbCBDb2xvciBOdW1iZXIgYy5cbiAgICAvLyAxMTAgLSBSZXNldCBWVDEwMCB0ZXh0IGZvcmVncm91bmQgY29sb3IuXG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyT3NjSGFuZGxlcigxMTAsIG5ldyBPc2NIYW5kbGVyKGRhdGEgPT4gdGhpcy5yZXN0b3JlRmdDb2xvcihkYXRhKSkpO1xuICAgIC8vIDExMSAtIFJlc2V0IFZUMTAwIHRleHQgYmFja2dyb3VuZCBjb2xvci5cbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJPc2NIYW5kbGVyKDExMSwgbmV3IE9zY0hhbmRsZXIoZGF0YSA9PiB0aGlzLnJlc3RvcmVCZ0NvbG9yKGRhdGEpKSk7XG4gICAgLy8gMTEyIC0gUmVzZXQgdGV4dCBjdXJzb3IgY29sb3IuXG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyT3NjSGFuZGxlcigxMTIsIG5ldyBPc2NIYW5kbGVyKGRhdGEgPT4gdGhpcy5yZXN0b3JlQ3Vyc29yQ29sb3IoZGF0YSkpKTtcbiAgICAvLyAxMTMgLSBSZXNldCBtb3VzZSBmb3JlZ3JvdW5kIGNvbG9yLlxuICAgIC8vIDExNCAtIFJlc2V0IG1vdXNlIGJhY2tncm91bmQgY29sb3IuXG4gICAgLy8gMTE1IC0gUmVzZXQgVGVrdHJvbml4IGZvcmVncm91bmQgY29sb3IuXG4gICAgLy8gMTE2IC0gUmVzZXQgVGVrdHJvbml4IGJhY2tncm91bmQgY29sb3IuXG4gICAgLy8gMTE3IC0gUmVzZXQgaGlnaGxpZ2h0IGNvbG9yLlxuICAgIC8vIDExOCAtIFJlc2V0IFRla3Ryb25peCBjdXJzb3IgY29sb3IuXG4gICAgLy8gMTE5IC0gUmVzZXQgaGlnaGxpZ2h0IGZvcmVncm91bmQgY29sb3IuXG5cbiAgICAvKipcbiAgICAgKiBFU0MgaGFuZGxlcnNcbiAgICAgKi9cbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJFc2NIYW5kbGVyKHsgZmluYWw6ICc3JyB9LCAoKSA9PiB0aGlzLnNhdmVDdXJzb3IoKSk7XG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyRXNjSGFuZGxlcih7IGZpbmFsOiAnOCcgfSwgKCkgPT4gdGhpcy5yZXN0b3JlQ3Vyc29yKCkpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckVzY0hhbmRsZXIoeyBmaW5hbDogJ0QnIH0sICgpID0+IHRoaXMuaW5kZXgoKSk7XG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyRXNjSGFuZGxlcih7IGZpbmFsOiAnRScgfSwgKCkgPT4gdGhpcy5uZXh0TGluZSgpKTtcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJFc2NIYW5kbGVyKHsgZmluYWw6ICdIJyB9LCAoKSA9PiB0aGlzLnRhYlNldCgpKTtcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJFc2NIYW5kbGVyKHsgZmluYWw6ICdNJyB9LCAoKSA9PiB0aGlzLnJldmVyc2VJbmRleCgpKTtcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJFc2NIYW5kbGVyKHsgZmluYWw6ICc9JyB9LCAoKSA9PiB0aGlzLmtleXBhZEFwcGxpY2F0aW9uTW9kZSgpKTtcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJFc2NIYW5kbGVyKHsgZmluYWw6ICc+JyB9LCAoKSA9PiB0aGlzLmtleXBhZE51bWVyaWNNb2RlKCkpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckVzY0hhbmRsZXIoeyBmaW5hbDogJ2MnIH0sICgpID0+IHRoaXMuZnVsbFJlc2V0KCkpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckVzY0hhbmRsZXIoeyBmaW5hbDogJ24nIH0sICgpID0+IHRoaXMuc2V0Z0xldmVsKDIpKTtcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJFc2NIYW5kbGVyKHsgZmluYWw6ICdvJyB9LCAoKSA9PiB0aGlzLnNldGdMZXZlbCgzKSk7XG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyRXNjSGFuZGxlcih7IGZpbmFsOiAnfCcgfSwgKCkgPT4gdGhpcy5zZXRnTGV2ZWwoMykpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckVzY0hhbmRsZXIoeyBmaW5hbDogJ30nIH0sICgpID0+IHRoaXMuc2V0Z0xldmVsKDIpKTtcbiAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJFc2NIYW5kbGVyKHsgZmluYWw6ICd+JyB9LCAoKSA9PiB0aGlzLnNldGdMZXZlbCgxKSk7XG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyRXNjSGFuZGxlcih7IGludGVybWVkaWF0ZXM6ICclJywgZmluYWw6ICdAJyB9LCAoKSA9PiB0aGlzLnNlbGVjdERlZmF1bHRDaGFyc2V0KCkpO1xuICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckVzY0hhbmRsZXIoeyBpbnRlcm1lZGlhdGVzOiAnJScsIGZpbmFsOiAnRycgfSwgKCkgPT4gdGhpcy5zZWxlY3REZWZhdWx0Q2hhcnNldCgpKTtcbiAgICBmb3IgKGNvbnN0IGZsYWcgaW4gQ0hBUlNFVFMpIHtcbiAgICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckVzY0hhbmRsZXIoeyBpbnRlcm1lZGlhdGVzOiAnKCcsIGZpbmFsOiBmbGFnIH0sICgpID0+IHRoaXMuc2VsZWN0Q2hhcnNldCgnKCcgKyBmbGFnKSk7XG4gICAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJFc2NIYW5kbGVyKHsgaW50ZXJtZWRpYXRlczogJyknLCBmaW5hbDogZmxhZyB9LCAoKSA9PiB0aGlzLnNlbGVjdENoYXJzZXQoJyknICsgZmxhZykpO1xuICAgICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyRXNjSGFuZGxlcih7IGludGVybWVkaWF0ZXM6ICcqJywgZmluYWw6IGZsYWcgfSwgKCkgPT4gdGhpcy5zZWxlY3RDaGFyc2V0KCcqJyArIGZsYWcpKTtcbiAgICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckVzY0hhbmRsZXIoeyBpbnRlcm1lZGlhdGVzOiAnKycsIGZpbmFsOiBmbGFnIH0sICgpID0+IHRoaXMuc2VsZWN0Q2hhcnNldCgnKycgKyBmbGFnKSk7XG4gICAgICB0aGlzLl9wYXJzZXIucmVnaXN0ZXJFc2NIYW5kbGVyKHsgaW50ZXJtZWRpYXRlczogJy0nLCBmaW5hbDogZmxhZyB9LCAoKSA9PiB0aGlzLnNlbGVjdENoYXJzZXQoJy0nICsgZmxhZykpO1xuICAgICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyRXNjSGFuZGxlcih7IGludGVybWVkaWF0ZXM6ICcuJywgZmluYWw6IGZsYWcgfSwgKCkgPT4gdGhpcy5zZWxlY3RDaGFyc2V0KCcuJyArIGZsYWcpKTtcbiAgICAgIHRoaXMuX3BhcnNlci5yZWdpc3RlckVzY0hhbmRsZXIoeyBpbnRlcm1lZGlhdGVzOiAnLycsIGZpbmFsOiBmbGFnIH0sICgpID0+IHRoaXMuc2VsZWN0Q2hhcnNldCgnLycgKyBmbGFnKSk7IC8vIFRPRE86IHN1cHBvcnRlZD9cbiAgICB9XG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyRXNjSGFuZGxlcih7IGludGVybWVkaWF0ZXM6ICcjJywgZmluYWw6ICc4JyB9LCAoKSA9PiB0aGlzLnNjcmVlbkFsaWdubWVudFBhdHRlcm4oKSk7XG5cbiAgICAvKipcbiAgICAgKiBlcnJvciBoYW5kbGVyXG4gICAgICovXG4gICAgdGhpcy5fcGFyc2VyLnNldEVycm9ySGFuZGxlcigoc3RhdGU6IElQYXJzaW5nU3RhdGUpID0+IHtcbiAgICAgIHRoaXMuX2xvZ1NlcnZpY2UuZXJyb3IoJ1BhcnNpbmcgZXJyb3I6ICcsIHN0YXRlKTtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIERDUyBoYW5kbGVyXG4gICAgICovXG4gICAgdGhpcy5fcGFyc2VyLnJlZ2lzdGVyRGNzSGFuZGxlcih7IGludGVybWVkaWF0ZXM6ICckJywgZmluYWw6ICdxJyB9LCBuZXcgREVDUlFTUyh0aGlzLl9idWZmZXJTZXJ2aWNlLCB0aGlzLl9jb3JlU2VydmljZSwgdGhpcy5fbG9nU2VydmljZSwgdGhpcy5fb3B0aW9uc1NlcnZpY2UpKTtcbiAgfVxuXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xuICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBc3luYyBwYXJzZSBzdXBwb3J0LlxuICAgKi9cbiAgcHJpdmF0ZSBfcHJlc2VydmVTdGFjayhjdXJzb3JTdGFydFg6IG51bWJlciwgY3Vyc29yU3RhcnRZOiBudW1iZXIsIGRlY29kZWRMZW5ndGg6IG51bWJlciwgcG9zaXRpb246IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3BhcnNlU3RhY2sucGF1c2VkID0gdHJ1ZTtcbiAgICB0aGlzLl9wYXJzZVN0YWNrLmN1cnNvclN0YXJ0WCA9IGN1cnNvclN0YXJ0WDtcbiAgICB0aGlzLl9wYXJzZVN0YWNrLmN1cnNvclN0YXJ0WSA9IGN1cnNvclN0YXJ0WTtcbiAgICB0aGlzLl9wYXJzZVN0YWNrLmRlY29kZWRMZW5ndGggPSBkZWNvZGVkTGVuZ3RoO1xuICAgIHRoaXMuX3BhcnNlU3RhY2sucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgfVxuXG4gIHByaXZhdGUgX2xvZ1Nsb3dSZXNvbHZpbmdBc3luYyhwOiBQcm9taXNlPGJvb2xlYW4+KTogdm9pZCB7XG4gICAgLy8gbG9nIGEgbGltaXRlZCB3YXJuaW5nIGFib3V0IGFuIGFzeW5jIGhhbmRsZXIgdGFraW5nIHRvbyBsb25nXG4gICAgaWYgKHRoaXMuX2xvZ1NlcnZpY2UubG9nTGV2ZWwgPD0gTG9nTGV2ZWxFbnVtLldBUk4pIHtcbiAgICAgIFByb21pc2UucmFjZShbcCwgbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiBzZXRUaW1lb3V0KCgpID0+IHJlaignI1NMT1dfVElNRU9VVCcpLCBTTE9XX0FTWU5DX0xJTUlUKSldKVxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICBpZiAoZXJyICE9PSAnI1NMT1dfVElNRU9VVCcpIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc29sZS53YXJuKGBhc3luYyBwYXJzZXIgaGFuZGxlciB0YWtpbmcgbG9uZ2VyIHRoYW4gJHtTTE9XX0FTWU5DX0xJTUlUfSBtc2ApO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgY2FsbCB3aXRoIGFzeW5jIGhhbmRsZXIgc3VwcG9ydC5cbiAgICpcbiAgICogV2hldGhlciB0aGUgc3RhY2sgc3RhdGUgZ290IHByZXNlcnZlZCBmb3IgdGhlIG5leHQgY2FsbCwgaXMgaW5kaWNhdGVkIGJ5IHRoZSByZXR1cm4gdmFsdWU6XG4gICAqIC0gdW5kZWZpbmVkICh2b2lkKTpcbiAgICogICBhbGwgaGFuZGxlcnMgd2VyZSBzeW5jLCBubyBzdGFjayBzYXZlLCBjb250aW51ZSBub3JtYWxseSB3aXRoIG5leHQgY2h1bmtcbiAgICogLSBQcm9taXNlXFw8Ym9vbGVhblxcPjpcbiAgICogICBleGVjdXRpb24gc3RvcHBlZCBhdCBhc3luYyBoYW5kbGVyLCBzdGFjayBzYXZlZCwgY29udGludWUgd2l0aFxuICAgKiAgIHNhbWUgY2h1bmsgYW5kIHRoZSBwcm9taXNlIHJlc29sdmUgdmFsdWUgYXMgYHByb21pc2VSZXN1bHRgIHVudGlsIHRoZSBtZXRob2QgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgKlxuICAgKiBOb3RlOiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgYnkgYFRlcm1pbmFsLndyaXRlYCB0byBlbnN1cmUgY29ycmVjdCBleGVjdXRpb24gb3JkZXIgYW5kXG4gICAqIHByb3BlciBjb250aW51YXRpb24gb2YgYXN5bmMgcGFyc2VyIGhhbmRsZXJzLlxuICAgKi9cbiAgcHVibGljIHBhcnNlKGRhdGE6IHN0cmluZyB8IFVpbnQ4QXJyYXksIHByb21pc2VSZXN1bHQ/OiBib29sZWFuKTogdm9pZCB8IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGxldCByZXN1bHQ6IHZvaWQgfCBQcm9taXNlPGJvb2xlYW4+O1xuICAgIGxldCBjdXJzb3JTdGFydFggPSB0aGlzLl9hY3RpdmVCdWZmZXIueDtcbiAgICBsZXQgY3Vyc29yU3RhcnRZID0gdGhpcy5fYWN0aXZlQnVmZmVyLnk7XG4gICAgbGV0IHN0YXJ0ID0gMDtcbiAgICBjb25zdCB3YXNQYXVzZWQgPSB0aGlzLl9wYXJzZVN0YWNrLnBhdXNlZDtcblxuICAgIGlmICh3YXNQYXVzZWQpIHtcbiAgICAgIC8vIGFzc3VtcHRpb246IF9wYXJzZUJ1ZmZlciBuZXZlciBtdXRhdGVzIGJldHdlZW4gYXN5bmMgY2FsbHNcbiAgICAgIGlmIChyZXN1bHQgPSB0aGlzLl9wYXJzZXIucGFyc2UodGhpcy5fcGFyc2VCdWZmZXIsIHRoaXMuX3BhcnNlU3RhY2suZGVjb2RlZExlbmd0aCwgcHJvbWlzZVJlc3VsdCkpIHtcbiAgICAgICAgdGhpcy5fbG9nU2xvd1Jlc29sdmluZ0FzeW5jKHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBjdXJzb3JTdGFydFggPSB0aGlzLl9wYXJzZVN0YWNrLmN1cnNvclN0YXJ0WDtcbiAgICAgIGN1cnNvclN0YXJ0WSA9IHRoaXMuX3BhcnNlU3RhY2suY3Vyc29yU3RhcnRZO1xuICAgICAgdGhpcy5fcGFyc2VTdGFjay5wYXVzZWQgPSBmYWxzZTtcbiAgICAgIGlmIChkYXRhLmxlbmd0aCA+IE1BWF9QQVJTRUJVRkZFUl9MRU5HVEgpIHtcbiAgICAgICAgc3RhcnQgPSB0aGlzLl9wYXJzZVN0YWNrLnBvc2l0aW9uICsgTUFYX1BBUlNFQlVGRkVSX0xFTkdUSDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBMb2cgZGVidWcgZGF0YSwgdGhlIGxvZyBsZXZlbCBnYXRlIGlzIHRvIHByZXZlbnQgZXh0cmEgd29yayBpbiB0aGlzIGhvdCBwYXRoXG4gICAgaWYgKHRoaXMuX2xvZ1NlcnZpY2UubG9nTGV2ZWwgPD0gTG9nTGV2ZWxFbnVtLkRFQlVHKSB7XG4gICAgICB0aGlzLl9sb2dTZXJ2aWNlLmRlYnVnKGBwYXJzaW5nIGRhdGEke3R5cGVvZiBkYXRhID09PSAnc3RyaW5nJyA/IGAgXCIke2RhdGF9XCJgIDogYCBcIiR7QXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGRhdGEsIGUgPT4gU3RyaW5nLmZyb21DaGFyQ29kZShlKSkuam9pbignJyl9XCJgfWAsIHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJ1xuICAgICAgICA/IGRhdGEuc3BsaXQoJycpLm1hcChlID0+IGUuY2hhckNvZGVBdCgwKSlcbiAgICAgICAgOiBkYXRhXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIHJlc2l6ZSBpbnB1dCBidWZmZXIgaWYgbmVlZGVkXG4gICAgaWYgKHRoaXMuX3BhcnNlQnVmZmVyLmxlbmd0aCA8IGRhdGEubGVuZ3RoKSB7XG4gICAgICBpZiAodGhpcy5fcGFyc2VCdWZmZXIubGVuZ3RoIDwgTUFYX1BBUlNFQlVGRkVSX0xFTkdUSCkge1xuICAgICAgICB0aGlzLl9wYXJzZUJ1ZmZlciA9IG5ldyBVaW50MzJBcnJheShNYXRoLm1pbihkYXRhLmxlbmd0aCwgTUFYX1BBUlNFQlVGRkVSX0xFTkdUSCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENsZWFyIHRoZSBkaXJ0eSByb3cgc2VydmljZSBzbyB3ZSBrbm93IHdoaWNoIGxpbmVzIGNoYW5nZWQgYXMgYSByZXN1bHQgb2YgcGFyc2luZ1xuICAgIC8vIEltcG9ydGFudDogZG8gbm90IGNsZWFyIGJldHdlZW4gYXN5bmMgY2FsbHMsIG90aGVyd2lzZSB3ZSBsb3N0IHBlbmRpbmcgdXBkYXRlIGluZm9ybWF0aW9uLlxuICAgIGlmICghd2FzUGF1c2VkKSB7XG4gICAgICB0aGlzLl9kaXJ0eVJvd1NlcnZpY2UuY2xlYXJSYW5nZSgpO1xuICAgIH1cblxuICAgIC8vIHByb2Nlc3MgYmlnIGRhdGEgaW4gc21hbGxlciBjaHVua3NcbiAgICBpZiAoZGF0YS5sZW5ndGggPiBNQVhfUEFSU0VCVUZGRVJfTEVOR1RIKSB7XG4gICAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBkYXRhLmxlbmd0aDsgaSArPSBNQVhfUEFSU0VCVUZGRVJfTEVOR1RIKSB7XG4gICAgICAgIGNvbnN0IGVuZCA9IGkgKyBNQVhfUEFSU0VCVUZGRVJfTEVOR1RIIDwgZGF0YS5sZW5ndGggPyBpICsgTUFYX1BBUlNFQlVGRkVSX0xFTkdUSCA6IGRhdGEubGVuZ3RoO1xuICAgICAgICBjb25zdCBsZW4gPSAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKVxuICAgICAgICAgID8gdGhpcy5fc3RyaW5nRGVjb2Rlci5kZWNvZGUoZGF0YS5zdWJzdHJpbmcoaSwgZW5kKSwgdGhpcy5fcGFyc2VCdWZmZXIpXG4gICAgICAgICAgOiB0aGlzLl91dGY4RGVjb2Rlci5kZWNvZGUoZGF0YS5zdWJhcnJheShpLCBlbmQpLCB0aGlzLl9wYXJzZUJ1ZmZlcik7XG4gICAgICAgIGlmIChyZXN1bHQgPSB0aGlzLl9wYXJzZXIucGFyc2UodGhpcy5fcGFyc2VCdWZmZXIsIGxlbikpIHtcbiAgICAgICAgICB0aGlzLl9wcmVzZXJ2ZVN0YWNrKGN1cnNvclN0YXJ0WCwgY3Vyc29yU3RhcnRZLCBsZW4sIGkpO1xuICAgICAgICAgIHRoaXMuX2xvZ1Nsb3dSZXNvbHZpbmdBc3luYyhyZXN1bHQpO1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCF3YXNQYXVzZWQpIHtcbiAgICAgICAgY29uc3QgbGVuID0gKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJylcbiAgICAgICAgICA/IHRoaXMuX3N0cmluZ0RlY29kZXIuZGVjb2RlKGRhdGEsIHRoaXMuX3BhcnNlQnVmZmVyKVxuICAgICAgICAgIDogdGhpcy5fdXRmOERlY29kZXIuZGVjb2RlKGRhdGEsIHRoaXMuX3BhcnNlQnVmZmVyKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9IHRoaXMuX3BhcnNlci5wYXJzZSh0aGlzLl9wYXJzZUJ1ZmZlciwgbGVuKSkge1xuICAgICAgICAgIHRoaXMuX3ByZXNlcnZlU3RhY2soY3Vyc29yU3RhcnRYLCBjdXJzb3JTdGFydFksIGxlbiwgMCk7XG4gICAgICAgICAgdGhpcy5fbG9nU2xvd1Jlc29sdmluZ0FzeW5jKHJlc3VsdCk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9hY3RpdmVCdWZmZXIueCAhPT0gY3Vyc29yU3RhcnRYIHx8IHRoaXMuX2FjdGl2ZUJ1ZmZlci55ICE9PSBjdXJzb3JTdGFydFkpIHtcbiAgICAgIHRoaXMuX29uQ3Vyc29yTW92ZS5maXJlKCk7XG4gICAgfVxuXG4gICAgLy8gUmVmcmVzaCBhbnkgZGlydHkgcm93cyBhY2N1bXVsYXRlZCBhcyBwYXJ0IG9mIHBhcnNpbmdcbiAgICB0aGlzLl9vblJlcXVlc3RSZWZyZXNoUm93cy5maXJlKHRoaXMuX2RpcnR5Um93U2VydmljZS5zdGFydCwgdGhpcy5fZGlydHlSb3dTZXJ2aWNlLmVuZCk7XG4gIH1cblxuICBwdWJsaWMgcHJpbnQoZGF0YTogVWludDMyQXJyYXksIHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKTogdm9pZCB7XG4gICAgbGV0IGNvZGU6IG51bWJlcjtcbiAgICBsZXQgY2hXaWR0aDogbnVtYmVyO1xuICAgIGNvbnN0IGNoYXJzZXQgPSB0aGlzLl9jaGFyc2V0U2VydmljZS5jaGFyc2V0O1xuICAgIGNvbnN0IHNjcmVlblJlYWRlck1vZGUgPSB0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLnNjcmVlblJlYWRlck1vZGU7XG4gICAgY29uc3QgY29scyA9IHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scztcbiAgICBjb25zdCB3cmFwYXJvdW5kTW9kZSA9IHRoaXMuX2NvcmVTZXJ2aWNlLmRlY1ByaXZhdGVNb2Rlcy53cmFwYXJvdW5kO1xuICAgIGNvbnN0IGluc2VydE1vZGUgPSB0aGlzLl9jb3JlU2VydmljZS5tb2Rlcy5pbnNlcnRNb2RlO1xuICAgIGNvbnN0IGN1ckF0dHIgPSB0aGlzLl9jdXJBdHRyRGF0YTtcbiAgICBsZXQgYnVmZmVyUm93ID0gdGhpcy5fYWN0aXZlQnVmZmVyLmxpbmVzLmdldCh0aGlzLl9hY3RpdmVCdWZmZXIueWJhc2UgKyB0aGlzLl9hY3RpdmVCdWZmZXIueSkhO1xuXG4gICAgdGhpcy5fZGlydHlSb3dTZXJ2aWNlLm1hcmtEaXJ0eSh0aGlzLl9hY3RpdmVCdWZmZXIueSk7XG5cbiAgICAvLyBoYW5kbGUgd2lkZSBjaGFyczogcmVzZXQgc3RhcnRfY2VsbC0xIGlmIHdlIHdvdWxkIG92ZXJ3cml0ZSB0aGUgc2Vjb25kIGNlbGwgb2YgYSB3aWRlIGNoYXJcbiAgICBpZiAodGhpcy5fYWN0aXZlQnVmZmVyLnggJiYgZW5kIC0gc3RhcnQgPiAwICYmIGJ1ZmZlclJvdy5nZXRXaWR0aCh0aGlzLl9hY3RpdmVCdWZmZXIueCAtIDEpID09PSAyKSB7XG4gICAgICBidWZmZXJSb3cuc2V0Q2VsbEZyb21Db2RlUG9pbnQodGhpcy5fYWN0aXZlQnVmZmVyLnggLSAxLCAwLCAxLCBjdXJBdHRyLmZnLCBjdXJBdHRyLmJnLCBjdXJBdHRyLmV4dGVuZGVkKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBwb3MgPSBzdGFydDsgcG9zIDwgZW5kOyArK3Bvcykge1xuICAgICAgY29kZSA9IGRhdGFbcG9zXTtcblxuICAgICAgLy8gY2FsY3VsYXRlIHByaW50IHNwYWNlXG4gICAgICAvLyBleHBlbnNpdmUgY2FsbCwgdGhlcmVmb3JlIHdlIHNhdmUgd2lkdGggaW4gbGluZSBidWZmZXJcbiAgICAgIGNoV2lkdGggPSB0aGlzLl91bmljb2RlU2VydmljZS53Y3dpZHRoKGNvZGUpO1xuXG4gICAgICAvLyBnZXQgY2hhcnNldCByZXBsYWNlbWVudCBjaGFyYWN0ZXJcbiAgICAgIC8vIGNoYXJzZXQgaXMgb25seSBkZWZpbmVkIGZvciBBU0NJSSwgdGhlcmVmb3JlIHdlIG9ubHlcbiAgICAgIC8vIHNlYXJjaCBmb3IgYW4gcmVwbGFjZW1lbnQgY2hhciBpZiBjb2RlIDwgMTI3XG4gICAgICBpZiAoY29kZSA8IDEyNyAmJiBjaGFyc2V0KSB7XG4gICAgICAgIGNvbnN0IGNoID0gY2hhcnNldFtTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpXTtcbiAgICAgICAgaWYgKGNoKSB7XG4gICAgICAgICAgY29kZSA9IGNoLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHNjcmVlblJlYWRlck1vZGUpIHtcbiAgICAgICAgdGhpcy5fb25BMTF5Q2hhci5maXJlKHN0cmluZ0Zyb21Db2RlUG9pbnQoY29kZSkpO1xuICAgICAgfVxuXG4gICAgICAvLyBpbnNlcnQgY29tYmluaW5nIGNoYXIgYXQgbGFzdCBjdXJzb3IgcG9zaXRpb25cbiAgICAgIC8vIHRoaXMuX2FjdGl2ZUJ1ZmZlci54IHNob3VsZCBuZXZlciBiZSAwIGZvciBhIGNvbWJpbmluZyBjaGFyXG4gICAgICAvLyBzaW5jZSB0aGV5IGFsd2F5cyBmb2xsb3cgYSBjZWxsIGNvbnN1bWluZyBjaGFyXG4gICAgICAvLyB0aGVyZWZvcmUgd2UgY2FuIHRlc3QgZm9yIHRoaXMuX2FjdGl2ZUJ1ZmZlci54IHRvIGF2b2lkIG92ZXJmbG93IGxlZnRcbiAgICAgIGlmICghY2hXaWR0aCAmJiB0aGlzLl9hY3RpdmVCdWZmZXIueCkge1xuICAgICAgICBpZiAoIWJ1ZmZlclJvdy5nZXRXaWR0aCh0aGlzLl9hY3RpdmVCdWZmZXIueCAtIDEpKSB7XG4gICAgICAgICAgLy8gZm91bmQgZW1wdHkgY2VsbCBhZnRlciBmdWxsd2lkdGgsIG5lZWQgdG8gZ28gMiBjZWxscyBiYWNrXG4gICAgICAgICAgLy8gaXQgaXMgc2F2ZSB0byBzdGVwIDIgY2VsbHMgYmFjayBoZXJlXG4gICAgICAgICAgLy8gc2luY2UgYW4gZW1wdHkgY2VsbCBpcyBvbmx5IHNldCBieSBmdWxsd2lkdGggY2hhcnNcbiAgICAgICAgICBidWZmZXJSb3cuYWRkQ29kZXBvaW50VG9DZWxsKHRoaXMuX2FjdGl2ZUJ1ZmZlci54IC0gMiwgY29kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnVmZmVyUm93LmFkZENvZGVwb2ludFRvQ2VsbCh0aGlzLl9hY3RpdmVCdWZmZXIueCAtIDEsIGNvZGUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBnb3RvIG5leHQgbGluZSBpZiBjaCB3b3VsZCBvdmVyZmxvd1xuICAgICAgLy8gTk9URTogVG8gYXZvaWQgY29zdGx5IHdpZHRoIGNoZWNrcyBoZXJlLFxuICAgICAgLy8gdGhlIHRlcm1pbmFsIGRvZXMgbm90IGFsbG93IGEgY29scyA8IDIuXG4gICAgICBpZiAodGhpcy5fYWN0aXZlQnVmZmVyLnggKyBjaFdpZHRoIC0gMSA+PSBjb2xzKSB7XG4gICAgICAgIC8vIGF1dG93cmFwIC0gREVDQVdNXG4gICAgICAgIC8vIGF1dG9tYXRpY2FsbHkgd3JhcHMgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgbmV4dCBsaW5lXG4gICAgICAgIGlmICh3cmFwYXJvdW5kTW9kZSkge1xuICAgICAgICAgIC8vIGNsZWFyIGxlZnQgb3ZlciBjZWxscyB0byB0aGUgcmlnaHRcbiAgICAgICAgICB3aGlsZSAodGhpcy5fYWN0aXZlQnVmZmVyLnggPCBjb2xzKSB7XG4gICAgICAgICAgICBidWZmZXJSb3cuc2V0Q2VsbEZyb21Db2RlUG9pbnQodGhpcy5fYWN0aXZlQnVmZmVyLngrKywgMCwgMSwgY3VyQXR0ci5mZywgY3VyQXR0ci5iZywgY3VyQXR0ci5leHRlbmRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci54ID0gMDtcbiAgICAgICAgICB0aGlzLl9hY3RpdmVCdWZmZXIueSsrO1xuICAgICAgICAgIGlmICh0aGlzLl9hY3RpdmVCdWZmZXIueSA9PT0gdGhpcy5fYWN0aXZlQnVmZmVyLnNjcm9sbEJvdHRvbSArIDEpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci55LS07XG4gICAgICAgICAgICB0aGlzLl9idWZmZXJTZXJ2aWNlLnNjcm9sbCh0aGlzLl9lcmFzZUF0dHJEYXRhKCksIHRydWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fYWN0aXZlQnVmZmVyLnkgPj0gdGhpcy5fYnVmZmVyU2VydmljZS5yb3dzKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci55ID0gdGhpcy5fYnVmZmVyU2VydmljZS5yb3dzIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRoZSBsaW5lIGFscmVhZHkgZXhpc3RzIChlZy4gdGhlIGluaXRpYWwgdmlld3BvcnQpLCBtYXJrIGl0IGFzIGFcbiAgICAgICAgICAgIC8vIHdyYXBwZWQgbGluZVxuICAgICAgICAgICAgdGhpcy5fYWN0aXZlQnVmZmVyLmxpbmVzLmdldCh0aGlzLl9hY3RpdmVCdWZmZXIueWJhc2UgKyB0aGlzLl9hY3RpdmVCdWZmZXIueSkhLmlzV3JhcHBlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHJvdyBjaGFuZ2VkLCBnZXQgaXQgYWdhaW5cbiAgICAgICAgICBidWZmZXJSb3cgPSB0aGlzLl9hY3RpdmVCdWZmZXIubGluZXMuZ2V0KHRoaXMuX2FjdGl2ZUJ1ZmZlci55YmFzZSArIHRoaXMuX2FjdGl2ZUJ1ZmZlci55KSE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fYWN0aXZlQnVmZmVyLnggPSBjb2xzIC0gMTtcbiAgICAgICAgICBpZiAoY2hXaWR0aCA9PT0gMikge1xuICAgICAgICAgICAgLy8gRklYTUU6IGNoZWNrIGZvciB4dGVybSBiZWhhdmlvclxuICAgICAgICAgICAgLy8gV2hhdCB0byBkbyBoZXJlPyBXZSBnb3QgYSB3aWRlIGNoYXIgdGhhdCBkb2VzIG5vdCBmaXQgaW50byBsYXN0IGNlbGxcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBpbnNlcnQgbW9kZTogbW92ZSBjaGFyYWN0ZXJzIHRvIHJpZ2h0XG4gICAgICBpZiAoaW5zZXJ0TW9kZSkge1xuICAgICAgICAvLyByaWdodCBzaGlmdCBjZWxscyBhY2NvcmRpbmcgdG8gdGhlIHdpZHRoXG4gICAgICAgIGJ1ZmZlclJvdy5pbnNlcnRDZWxscyh0aGlzLl9hY3RpdmVCdWZmZXIueCwgY2hXaWR0aCwgdGhpcy5fYWN0aXZlQnVmZmVyLmdldE51bGxDZWxsKGN1ckF0dHIpLCBjdXJBdHRyKTtcbiAgICAgICAgLy8gdGVzdCBsYXN0IGNlbGwgLSBzaW5jZSB0aGUgbGFzdCBjZWxsIGhhcyBvbmx5IHJvb20gZm9yXG4gICAgICAgIC8vIGEgaGFsZndpZHRoIGNoYXIgYW55IGZ1bGx3aWR0aCBzaGlmdGVkIHRoZXJlIGlzIGxvc3RcbiAgICAgICAgLy8gYW5kIHdpbGwgYmUgc2V0IHRvIGVtcHR5IGNlbGxcbiAgICAgICAgaWYgKGJ1ZmZlclJvdy5nZXRXaWR0aChjb2xzIC0gMSkgPT09IDIpIHtcbiAgICAgICAgICBidWZmZXJSb3cuc2V0Q2VsbEZyb21Db2RlUG9pbnQoY29scyAtIDEsIE5VTExfQ0VMTF9DT0RFLCBOVUxMX0NFTExfV0lEVEgsIGN1ckF0dHIuZmcsIGN1ckF0dHIuYmcsIGN1ckF0dHIuZXh0ZW5kZWQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHdyaXRlIGN1cnJlbnQgY2hhciB0byBidWZmZXIgYW5kIGFkdmFuY2UgY3Vyc29yXG4gICAgICBidWZmZXJSb3cuc2V0Q2VsbEZyb21Db2RlUG9pbnQodGhpcy5fYWN0aXZlQnVmZmVyLngrKywgY29kZSwgY2hXaWR0aCwgY3VyQXR0ci5mZywgY3VyQXR0ci5iZywgY3VyQXR0ci5leHRlbmRlZCk7XG5cbiAgICAgIC8vIGZ1bGx3aWR0aCBjaGFyIC0gYWxzbyBzZXQgbmV4dCBjZWxsIHRvIHBsYWNlaG9sZGVyIHN0dWIgYW5kIGFkdmFuY2UgY3Vyc29yXG4gICAgICAvLyBmb3IgZ3JhcGhlbWVzIGJpZ2dlciB0aGFuIGZ1bGx3aWR0aCB3ZSBjYW4gc2ltcGx5IGxvb3AgdG8gemVyb1xuICAgICAgLy8gd2UgYWxyZWFkeSBtYWRlIHN1cmUgYWJvdmUsIHRoYXQgdGhpcy5fYWN0aXZlQnVmZmVyLnggKyBjaFdpZHRoIHdpbGwgbm90IG92ZXJmbG93IHJpZ2h0XG4gICAgICBpZiAoY2hXaWR0aCA+IDApIHtcbiAgICAgICAgd2hpbGUgKC0tY2hXaWR0aCkge1xuICAgICAgICAgIC8vIG90aGVyIHRoYW4gYSByZWd1bGFyIGVtcHR5IGNlbGwgYSBjZWxsIGZvbGxvd2luZyBhIHdpZGUgY2hhciBoYXMgbm8gd2lkdGhcbiAgICAgICAgICBidWZmZXJSb3cuc2V0Q2VsbEZyb21Db2RlUG9pbnQodGhpcy5fYWN0aXZlQnVmZmVyLngrKywgMCwgMCwgY3VyQXR0ci5mZywgY3VyQXR0ci5iZywgY3VyQXR0ci5leHRlbmRlZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gc3RvcmUgbGFzdCBjaGFyIGluIFBhcnNlci5wcmVjZWRpbmdDb2RlcG9pbnQgZm9yIFJFUCB0byB3b3JrIGNvcnJlY3RseVxuICAgIC8vIFRoaXMgbmVlZHMgdG8gY2hlY2sgd2hldGhlcjpcbiAgICAvLyAgLSBmdWxsd2lkdGggKyBzdXJyb2dhdGVzOiByZXNldFxuICAgIC8vICAtIGNvbWJpbmluZzogb25seSBiYXNlIGNoYXIgZ2V0cyBjYXJyaWVkIG9uIChidWcgaW4geHRlcm0/KVxuICAgIGlmIChlbmQgLSBzdGFydCA+IDApIHtcbiAgICAgIGJ1ZmZlclJvdy5sb2FkQ2VsbCh0aGlzLl9hY3RpdmVCdWZmZXIueCAtIDEsIHRoaXMuX3dvcmtDZWxsKTtcbiAgICAgIGlmICh0aGlzLl93b3JrQ2VsbC5nZXRXaWR0aCgpID09PSAyIHx8IHRoaXMuX3dvcmtDZWxsLmdldENvZGUoKSA+IDB4RkZGRikge1xuICAgICAgICB0aGlzLl9wYXJzZXIucHJlY2VkaW5nQ29kZXBvaW50ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fd29ya0NlbGwuaXNDb21iaW5lZCgpKSB7XG4gICAgICAgIHRoaXMuX3BhcnNlci5wcmVjZWRpbmdDb2RlcG9pbnQgPSB0aGlzLl93b3JrQ2VsbC5nZXRDaGFycygpLmNoYXJDb2RlQXQoMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9wYXJzZXIucHJlY2VkaW5nQ29kZXBvaW50ID0gdGhpcy5fd29ya0NlbGwuY29udGVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBoYW5kbGUgd2lkZSBjaGFyczogcmVzZXQgY2VsbCB0byB0aGUgcmlnaHQgaWYgaXQgaXMgc2Vjb25kIGNlbGwgb2YgYSB3aWRlIGNoYXJcbiAgICBpZiAodGhpcy5fYWN0aXZlQnVmZmVyLnggPCBjb2xzICYmIGVuZCAtIHN0YXJ0ID4gMCAmJiBidWZmZXJSb3cuZ2V0V2lkdGgodGhpcy5fYWN0aXZlQnVmZmVyLngpID09PSAwICYmICFidWZmZXJSb3cuaGFzQ29udGVudCh0aGlzLl9hY3RpdmVCdWZmZXIueCkpIHtcbiAgICAgIGJ1ZmZlclJvdy5zZXRDZWxsRnJvbUNvZGVQb2ludCh0aGlzLl9hY3RpdmVCdWZmZXIueCwgMCwgMSwgY3VyQXR0ci5mZywgY3VyQXR0ci5iZywgY3VyQXR0ci5leHRlbmRlZCk7XG4gICAgfVxuXG4gICAgdGhpcy5fZGlydHlSb3dTZXJ2aWNlLm1hcmtEaXJ0eSh0aGlzLl9hY3RpdmVCdWZmZXIueSk7XG4gIH1cblxuICAvKipcbiAgICogRm9yd2FyZCByZWdpc3RlckNzaUhhbmRsZXIgZnJvbSBwYXJzZXIuXG4gICAqL1xuICBwdWJsaWMgcmVnaXN0ZXJDc2lIYW5kbGVyKGlkOiBJRnVuY3Rpb25JZGVudGlmaWVyLCBjYWxsYmFjazogKHBhcmFtczogSVBhcmFtcykgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4pOiBJRGlzcG9zYWJsZSB7XG4gICAgaWYgKGlkLmZpbmFsID09PSAndCcgJiYgIWlkLnByZWZpeCAmJiAhaWQuaW50ZXJtZWRpYXRlcykge1xuICAgICAgLy8gc2VjdXJpdHk6IGFsd2F5cyBjaGVjayB3aGV0aGVyIHdpbmRvdyBvcHRpb24gaXMgYWxsb3dlZFxuICAgICAgcmV0dXJuIHRoaXMuX3BhcnNlci5yZWdpc3RlckNzaUhhbmRsZXIoaWQsIHBhcmFtcyA9PiB7XG4gICAgICAgIGlmICghcGFyYW1Ub1dpbmRvd09wdGlvbihwYXJhbXMucGFyYW1zWzBdLCB0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLndpbmRvd09wdGlvbnMpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHBhcmFtcyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3BhcnNlci5yZWdpc3RlckNzaUhhbmRsZXIoaWQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3J3YXJkIHJlZ2lzdGVyRGNzSGFuZGxlciBmcm9tIHBhcnNlci5cbiAgICovXG4gIHB1YmxpYyByZWdpc3RlckRjc0hhbmRsZXIoaWQ6IElGdW5jdGlvbklkZW50aWZpZXIsIGNhbGxiYWNrOiAoZGF0YTogc3RyaW5nLCBwYXJhbTogSVBhcmFtcykgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4pOiBJRGlzcG9zYWJsZSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcnNlci5yZWdpc3RlckRjc0hhbmRsZXIoaWQsIG5ldyBEY3NIYW5kbGVyKGNhbGxiYWNrKSk7XG4gIH1cblxuICAvKipcbiAgICogRm9yd2FyZCByZWdpc3RlckVzY0hhbmRsZXIgZnJvbSBwYXJzZXIuXG4gICAqL1xuICBwdWJsaWMgcmVnaXN0ZXJFc2NIYW5kbGVyKGlkOiBJRnVuY3Rpb25JZGVudGlmaWVyLCBjYWxsYmFjazogKCkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4pOiBJRGlzcG9zYWJsZSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcnNlci5yZWdpc3RlckVzY0hhbmRsZXIoaWQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3J3YXJkIHJlZ2lzdGVyT3NjSGFuZGxlciBmcm9tIHBhcnNlci5cbiAgICovXG4gIHB1YmxpYyByZWdpc3Rlck9zY0hhbmRsZXIoaWRlbnQ6IG51bWJlciwgY2FsbGJhY2s6IChkYXRhOiBzdHJpbmcpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+KTogSURpc3Bvc2FibGUge1xuICAgIHJldHVybiB0aGlzLl9wYXJzZXIucmVnaXN0ZXJPc2NIYW5kbGVyKGlkZW50LCBuZXcgT3NjSGFuZGxlcihjYWxsYmFjaykpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJFTFxuICAgKiBCZWxsIChDdHJsLUcpLlxuICAgKlxuICAgKiBAdnQ6ICNZICAgQzAgICAgQkVMICAgXCJCZWxsXCIgIFwiXFxhLCBcXHgwN1wiICBcIlJpbmcgdGhlIGJlbGwuXCJcbiAgICogVGhlIGJlaGF2aW9yIG9mIHRoZSBiZWxsIGlzIGZ1cnRoZXIgY3VzdG9taXphYmxlIHdpdGggYElUZXJtaW5hbE9wdGlvbnMuYmVsbFN0eWxlYFxuICAgKiBhbmQgYElUZXJtaW5hbE9wdGlvbnMuYmVsbFNvdW5kYC5cbiAgICovXG4gIHB1YmxpYyBiZWxsKCk6IGJvb2xlYW4ge1xuICAgIHRoaXMuX29uUmVxdWVzdEJlbGwuZmlyZSgpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIExGXG4gICAqIExpbmUgRmVlZCBvciBOZXcgTGluZSAoTkwpLiAgKExGICBpcyBDdHJsLUopLlxuICAgKlxuICAgKiBAdnQ6ICNZICAgQzAgICAgTEYgICBcIkxpbmUgRmVlZFwiICAgICAgICAgICAgXCJcXG4sIFxceDBBXCIgIFwiTW92ZSB0aGUgY3Vyc29yIG9uZSByb3cgZG93biwgc2Nyb2xsaW5nIGlmIG5lZWRlZC5cIlxuICAgKiBTY3JvbGxpbmcgaXMgcmVzdHJpY3RlZCB0byBzY3JvbGwgbWFyZ2lucyBhbmQgd2lsbCBvbmx5IGhhcHBlbiBvbiB0aGUgYm90dG9tIGxpbmUuXG4gICAqXG4gICAqIEB2dDogI1kgICBDMCAgICBWVCAgIFwiVmVydGljYWwgVGFidWxhdGlvblwiICBcIlxcdiwgXFx4MEJcIiAgXCJUcmVhdGVkIGFzIExGLlwiXG4gICAqIEB2dDogI1kgICBDMCAgICBGRiAgIFwiRm9ybSBGZWVkXCIgICAgICAgICAgICBcIlxcZiwgXFx4MENcIiAgXCJUcmVhdGVkIGFzIExGLlwiXG4gICAqL1xuICBwdWJsaWMgbGluZUZlZWQoKTogYm9vbGVhbiB7XG4gICAgdGhpcy5fZGlydHlSb3dTZXJ2aWNlLm1hcmtEaXJ0eSh0aGlzLl9hY3RpdmVCdWZmZXIueSk7XG4gICAgaWYgKHRoaXMuX29wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMuY29udmVydEVvbCkge1xuICAgICAgdGhpcy5fYWN0aXZlQnVmZmVyLnggPSAwO1xuICAgIH1cbiAgICB0aGlzLl9hY3RpdmVCdWZmZXIueSsrO1xuICAgIGlmICh0aGlzLl9hY3RpdmVCdWZmZXIueSA9PT0gdGhpcy5fYWN0aXZlQnVmZmVyLnNjcm9sbEJvdHRvbSArIDEpIHtcbiAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci55LS07XG4gICAgICB0aGlzLl9idWZmZXJTZXJ2aWNlLnNjcm9sbCh0aGlzLl9lcmFzZUF0dHJEYXRhKCkpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fYWN0aXZlQnVmZmVyLnkgPj0gdGhpcy5fYnVmZmVyU2VydmljZS5yb3dzKSB7XG4gICAgICB0aGlzLl9hY3RpdmVCdWZmZXIueSA9IHRoaXMuX2J1ZmZlclNlcnZpY2Uucm93cyAtIDE7XG4gICAgfVxuICAgIC8vIElmIHRoZSBlbmQgb2YgdGhlIGxpbmUgaXMgaGl0LCBwcmV2ZW50IHRoaXMgYWN0aW9uIGZyb20gd3JhcHBpbmcgYXJvdW5kIHRvIHRoZSBuZXh0IGxpbmUuXG4gICAgaWYgKHRoaXMuX2FjdGl2ZUJ1ZmZlci54ID49IHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scykge1xuICAgICAgdGhpcy5fYWN0aXZlQnVmZmVyLngtLTtcbiAgICB9XG4gICAgdGhpcy5fZGlydHlSb3dTZXJ2aWNlLm1hcmtEaXJ0eSh0aGlzLl9hY3RpdmVCdWZmZXIueSk7XG5cbiAgICB0aGlzLl9vbkxpbmVGZWVkLmZpcmUoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDUlxuICAgKiBDYXJyaWFnZSBSZXR1cm4gKEN0cmwtTSkuXG4gICAqXG4gICAqIEB2dDogI1kgICBDMCAgICBDUiAgIFwiQ2FycmlhZ2UgUmV0dXJuXCIgIFwiXFxyLCBcXHgwRFwiICBcIk1vdmUgdGhlIGN1cnNvciB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSByb3cuXCJcbiAgICovXG4gIHB1YmxpYyBjYXJyaWFnZVJldHVybigpOiBib29sZWFuIHtcbiAgICB0aGlzLl9hY3RpdmVCdWZmZXIueCA9IDA7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQlNcbiAgICogQmFja3NwYWNlIChDdHJsLUgpLlxuICAgKlxuICAgKiBAdnQ6ICNZICAgQzAgICAgQlMgICBcIkJhY2tzcGFjZVwiICBcIlxcYiwgXFx4MDhcIiAgXCJNb3ZlIHRoZSBjdXJzb3Igb25lIHBvc2l0aW9uIHRvIHRoZSBsZWZ0LlwiXG4gICAqIEJ5IGRlZmF1bHQgaXQgaXMgbm90IHBvc3NpYmxlIHRvIG1vdmUgdGhlIGN1cnNvciBwYXN0IHRoZSBsZWZ0bW9zdCBwb3NpdGlvbi5cbiAgICogSWYgYHJldmVyc2Ugd3JhcC1hcm91bmRgIChgQ1NJID8gNDUgaGApIGlzIHNldCwgYSBwcmV2aW91cyBzb2Z0IGxpbmUgd3JhcCAoREVDQVdNKVxuICAgKiBjYW4gYmUgdW5kb25lIHdpdGggQlMgd2l0aGluIHRoZSBzY3JvbGwgbWFyZ2lucy4gSW4gdGhhdCBjYXNlIHRoZSBjdXJzb3Igd2lsbCB3cmFwIGJhY2tcbiAgICogdG8gdGhlIGVuZCBvZiB0aGUgcHJldmlvdXMgcm93LiBOb3RlIHRoYXQgaXQgaXMgbm90IHBvc3NpYmxlIHRvIHBlZWsgYmFjayBpbnRvIHRoZSBzY3JvbGxidWZmZXJcbiAgICogd2l0aCB0aGUgY3Vyc29yLCB0aHVzIGF0IHRoZSBob21lIHBvc2l0aW9uICh0b3AtbGVmdG1vc3QgY2VsbCkgdGhpcyBoYXMgbm8gZWZmZWN0LlxuICAgKi9cbiAgcHVibGljIGJhY2tzcGFjZSgpOiBib29sZWFuIHtcbiAgICAvLyByZXZlcnNlIHdyYXAtYXJvdW5kIGlzIGRpc2FibGVkXG4gICAgaWYgKCF0aGlzLl9jb3JlU2VydmljZS5kZWNQcml2YXRlTW9kZXMucmV2ZXJzZVdyYXBhcm91bmQpIHtcbiAgICAgIHRoaXMuX3Jlc3RyaWN0Q3Vyc29yKCk7XG4gICAgICBpZiAodGhpcy5fYWN0aXZlQnVmZmVyLnggPiAwKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci54LS07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyByZXZlcnNlIHdyYXAtYXJvdW5kIGlzIGVuYWJsZWRcbiAgICAvLyBvdGhlciB0aGFuIGZvciBub3JtYWwgb3BlcmF0aW9uIG1vZGUsIHJldmVyc2Ugd3JhcC1hcm91bmQgYWxsb3dzIHRoZSBjdXJzb3JcbiAgICAvLyB0byBiZSBhdCB4PWNvbHMgdG8gYmUgYWJsZSB0byBhZGRyZXNzIHRoZSBsYXN0IGNlbGwgb2YgYSByb3cgYnkgQlNcbiAgICB0aGlzLl9yZXN0cmljdEN1cnNvcih0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHMpO1xuXG4gICAgaWYgKHRoaXMuX2FjdGl2ZUJ1ZmZlci54ID4gMCkge1xuICAgICAgdGhpcy5fYWN0aXZlQnVmZmVyLngtLTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqXG4gICAgICAgKiByZXZlcnNlIHdyYXAtYXJvdW5kIGhhbmRsaW5nOlxuICAgICAgICogT3VyIGltcGxlbWVudGF0aW9uIGRldmlhdGVzIGZyb20geHRlcm0gb24gcHVycG9zZS4gRGV0YWlsczpcbiAgICAgICAqIC0gb25seSBwcmV2aW91cyBzb2Z0IE5McyBjYW4gYmUgcmV2ZXJzZWQgKGlzV3JhcHBlZD10cnVlKVxuICAgICAgICogLSBvbmx5IHdvcmtzIHdpdGhpbiBzY3JvbGxib3JkZXJzICh0b3AvYm90dG9tLCBsZWZ0L3JpZ2h0IG5vdCB5ZXQgc3VwcG9ydGVkKVxuICAgICAgICogLSBjYW5ub3QgcGVlayBpbnRvIHNjcm9sbGJ1ZmZlclxuICAgICAgICogLSBhbnkgY3Vyc29yIG1vdmVtZW50IHNlcXVlbmNlIGtlZXBzIHdvcmtpbmcgYXMgZXhwZWN0ZWRcbiAgICAgICAqL1xuICAgICAgaWYgKHRoaXMuX2FjdGl2ZUJ1ZmZlci54ID09PSAwXG4gICAgICAgICYmIHRoaXMuX2FjdGl2ZUJ1ZmZlci55ID4gdGhpcy5fYWN0aXZlQnVmZmVyLnNjcm9sbFRvcFxuICAgICAgICAmJiB0aGlzLl9hY3RpdmVCdWZmZXIueSA8PSB0aGlzLl9hY3RpdmVCdWZmZXIuc2Nyb2xsQm90dG9tXG4gICAgICAgICYmIHRoaXMuX2FjdGl2ZUJ1ZmZlci5saW5lcy5nZXQodGhpcy5fYWN0aXZlQnVmZmVyLnliYXNlICsgdGhpcy5fYWN0aXZlQnVmZmVyLnkpPy5pc1dyYXBwZWQpIHtcbiAgICAgICAgdGhpcy5fYWN0aXZlQnVmZmVyLmxpbmVzLmdldCh0aGlzLl9hY3RpdmVCdWZmZXIueWJhc2UgKyB0aGlzLl9hY3RpdmVCdWZmZXIueSkhLmlzV3JhcHBlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9hY3RpdmVCdWZmZXIueS0tO1xuICAgICAgICB0aGlzLl9hY3RpdmVCdWZmZXIueCA9IHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scyAtIDE7XG4gICAgICAgIC8vIGZpbmQgbGFzdCB0YWtlbiBjZWxsIC0gbGFzdCBjZWxsIGNhbiBoYXZlIDMgZGlmZmVyZW50IHN0YXRlczpcbiAgICAgICAgLy8gLSBoYXNDb250ZW50KHRydWUpICsgaGFzV2lkdGgoMSk6IG5hcnJvdyBjaGFyIC0gd2UgYXJlIGRvbmVcbiAgICAgICAgLy8gLSBoYXNXaWR0aCgwKTogc2Vjb25kIHBhcnQgb2Ygd2lkZSBjaGFyIC0gd2UgYXJlIGRvbmVcbiAgICAgICAgLy8gLSBoYXNDb250ZW50KGZhbHNlKSArIGhhc1dpZHRoKDEpOiBlbXB0eSBjZWxsIGR1ZSB0byBlYXJseSB3cmFwcGluZyB3aWRlIGNoYXIsIGdvIG9uZSBjZWxsIGZ1cnRoZXIgYmFja1xuICAgICAgICBjb25zdCBsaW5lID0gdGhpcy5fYWN0aXZlQnVmZmVyLmxpbmVzLmdldCh0aGlzLl9hY3RpdmVCdWZmZXIueWJhc2UgKyB0aGlzLl9hY3RpdmVCdWZmZXIueSkhO1xuICAgICAgICBpZiAobGluZS5oYXNXaWR0aCh0aGlzLl9hY3RpdmVCdWZmZXIueCkgJiYgIWxpbmUuaGFzQ29udGVudCh0aGlzLl9hY3RpdmVCdWZmZXIueCkpIHtcbiAgICAgICAgICB0aGlzLl9hY3RpdmVCdWZmZXIueC0tO1xuICAgICAgICAgIC8vIFdlIGRvIHRoaXMgb25seSBvbmNlLCBzaW5jZSB3aWR0aD0xICsgaGFzQ29udGVudD1mYWxzZSBjdXJyZW50bHkgaGFwcGVucyBvbmx5IG9uY2UgYmVmb3JlXG4gICAgICAgICAgLy8gZWFybHkgd3JhcHBpbmcgb2YgYSB3aWRlIGNoYXIuXG4gICAgICAgICAgLy8gVGhpcyBuZWVkcyB0byBiZSBmaXhlZCBvbmNlIHdlIHN1cHBvcnQgZ3JhcGhlbWVzIHRha2luZyBtb3JlIHRoYW4gMiBjZWxscy5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9yZXN0cmljdEN1cnNvcigpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRBQlxuICAgKiBIb3Jpem9udGFsIFRhYiAoSFQpIChDdHJsLUkpLlxuICAgKlxuICAgKiBAdnQ6ICNZICAgQzAgICAgSFQgICBcIkhvcml6b250YWwgVGFidWxhdGlvblwiICBcIlxcdCwgXFx4MDlcIiAgXCJNb3ZlIHRoZSBjdXJzb3IgdG8gdGhlIG5leHQgY2hhcmFjdGVyIHRhYiBzdG9wLlwiXG4gICAqL1xuICBwdWJsaWMgdGFiKCk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLl9hY3RpdmVCdWZmZXIueCA+PSB0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBvcmlnaW5hbFggPSB0aGlzLl9hY3RpdmVCdWZmZXIueDtcbiAgICB0aGlzLl9hY3RpdmVCdWZmZXIueCA9IHRoaXMuX2FjdGl2ZUJ1ZmZlci5uZXh0U3RvcCgpO1xuICAgIGlmICh0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLnNjcmVlblJlYWRlck1vZGUpIHtcbiAgICAgIHRoaXMuX29uQTExeVRhYi5maXJlKHRoaXMuX2FjdGl2ZUJ1ZmZlci54IC0gb3JpZ2luYWxYKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogU09cbiAgICogU2hpZnQgT3V0IChDdHJsLU4pIC0+IFN3aXRjaCB0byBBbHRlcm5hdGUgQ2hhcmFjdGVyIFNldC4gIFRoaXMgaW52b2tlcyB0aGVcbiAgICogRzEgY2hhcmFjdGVyIHNldC5cbiAgICpcbiAgICogQHZ0OiAjUFtPbmx5IGxpbWl0ZWQgSVNPLTIwMjIgY2hhcnNldCBzdXBwb3J0Ll0gIEMwICAgIFNPICAgXCJTaGlmdCBPdXRcIiAgXCJcXHgwRVwiICBcIlN3aXRjaCB0byBhbiBhbHRlcm5hdGl2ZSBjaGFyYWN0ZXIgc2V0LlwiXG4gICAqL1xuICBwdWJsaWMgc2hpZnRPdXQoKTogYm9vbGVhbiB7XG4gICAgdGhpcy5fY2hhcnNldFNlcnZpY2Uuc2V0Z0xldmVsKDEpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNJXG4gICAqIFNoaWZ0IEluIChDdHJsLU8pIC0+IFN3aXRjaCB0byBTdGFuZGFyZCBDaGFyYWN0ZXIgU2V0LiAgVGhpcyBpbnZva2VzIHRoZSBHMFxuICAgKiBjaGFyYWN0ZXIgc2V0ICh0aGUgZGVmYXVsdCkuXG4gICAqXG4gICAqIEB2dDogI1kgICBDMCAgICBTSSAgIFwiU2hpZnQgSW5cIiAgIFwiXFx4MEZcIiAgXCJSZXR1cm4gdG8gcmVndWxhciBjaGFyYWN0ZXIgc2V0IGFmdGVyIFNoaWZ0IE91dC5cIlxuICAgKi9cbiAgcHVibGljIHNoaWZ0SW4oKTogYm9vbGVhbiB7XG4gICAgdGhpcy5fY2hhcnNldFNlcnZpY2Uuc2V0Z0xldmVsKDApO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc3RyaWN0IGN1cnNvciB0byB2aWV3cG9ydCBzaXplIC8gc2Nyb2xsIG1hcmdpbiAob3JpZ2luIG1vZGUpLlxuICAgKi9cbiAgcHJpdmF0ZSBfcmVzdHJpY3RDdXJzb3IobWF4Q29sOiBudW1iZXIgPSB0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHMgLSAxKTogdm9pZCB7XG4gICAgdGhpcy5fYWN0aXZlQnVmZmVyLnggPSBNYXRoLm1pbihtYXhDb2wsIE1hdGgubWF4KDAsIHRoaXMuX2FjdGl2ZUJ1ZmZlci54KSk7XG4gICAgdGhpcy5fYWN0aXZlQnVmZmVyLnkgPSB0aGlzLl9jb3JlU2VydmljZS5kZWNQcml2YXRlTW9kZXMub3JpZ2luXG4gICAgICA/IE1hdGgubWluKHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxCb3R0b20sIE1hdGgubWF4KHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxUb3AsIHRoaXMuX2FjdGl2ZUJ1ZmZlci55KSlcbiAgICAgIDogTWF0aC5taW4odGhpcy5fYnVmZmVyU2VydmljZS5yb3dzIC0gMSwgTWF0aC5tYXgoMCwgdGhpcy5fYWN0aXZlQnVmZmVyLnkpKTtcbiAgICB0aGlzLl9kaXJ0eVJvd1NlcnZpY2UubWFya0RpcnR5KHRoaXMuX2FjdGl2ZUJ1ZmZlci55KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYWJzb2x1dGUgY3Vyc29yIHBvc2l0aW9uLlxuICAgKi9cbiAgcHJpdmF0ZSBfc2V0Q3Vyc29yKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fZGlydHlSb3dTZXJ2aWNlLm1hcmtEaXJ0eSh0aGlzLl9hY3RpdmVCdWZmZXIueSk7XG4gICAgaWYgKHRoaXMuX2NvcmVTZXJ2aWNlLmRlY1ByaXZhdGVNb2Rlcy5vcmlnaW4pIHtcbiAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci54ID0geDtcbiAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci55ID0gdGhpcy5fYWN0aXZlQnVmZmVyLnNjcm9sbFRvcCArIHk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci54ID0geDtcbiAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci55ID0geTtcbiAgICB9XG4gICAgdGhpcy5fcmVzdHJpY3RDdXJzb3IoKTtcbiAgICB0aGlzLl9kaXJ0eVJvd1NlcnZpY2UubWFya0RpcnR5KHRoaXMuX2FjdGl2ZUJ1ZmZlci55KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgcmVsYXRpdmUgY3Vyc29yIHBvc2l0aW9uLlxuICAgKi9cbiAgcHJpdmF0ZSBfbW92ZUN1cnNvcih4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgIC8vIGZvciByZWxhdGl2ZSBjaGFuZ2VzIHdlIGhhdmUgdG8gbWFrZSBzdXJlIHdlIGFyZSB3aXRoaW4gMCAuLiBjb2xzL3Jvd3MgLSAxXG4gICAgLy8gYmVmb3JlIGNhbGN1bGF0aW5nIHRoZSBuZXcgcG9zaXRpb25cbiAgICB0aGlzLl9yZXN0cmljdEN1cnNvcigpO1xuICAgIHRoaXMuX3NldEN1cnNvcih0aGlzLl9hY3RpdmVCdWZmZXIueCArIHgsIHRoaXMuX2FjdGl2ZUJ1ZmZlci55ICsgeSk7XG4gIH1cblxuICAvKipcbiAgICogQ1NJIFBzIEFcbiAgICogQ3Vyc29yIFVwIFBzIFRpbWVzIChkZWZhdWx0ID0gMSkgKENVVSkuXG4gICAqXG4gICAqIEB2dDogI1kgQ1NJIENVVSAgIFwiQ3Vyc29yIFVwXCIgICBcIkNTSSBQcyBBXCIgIFwiTW92ZSBjdXJzb3IgYFBzYCB0aW1lcyB1cCAoZGVmYXVsdD0xKS5cIlxuICAgKiBJZiB0aGUgY3Vyc29yIHdvdWxkIHBhc3MgdGhlIHRvcCBzY3JvbGwgbWFyZ2luLCBpdCB3aWxsIHN0b3AgdGhlcmUuXG4gICAqL1xuICBwdWJsaWMgY3Vyc29yVXAocGFyYW1zOiBJUGFyYW1zKTogYm9vbGVhbiB7XG4gICAgLy8gc3RvcCBhdCBzY3JvbGxUb3BcbiAgICBjb25zdCBkaWZmVG9Ub3AgPSB0aGlzLl9hY3RpdmVCdWZmZXIueSAtIHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxUb3A7XG4gICAgaWYgKGRpZmZUb1RvcCA+PSAwKSB7XG4gICAgICB0aGlzLl9tb3ZlQ3Vyc29yKDAsIC1NYXRoLm1pbihkaWZmVG9Ub3AsIHBhcmFtcy5wYXJhbXNbMF0gfHwgMSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9tb3ZlQ3Vyc29yKDAsIC0ocGFyYW1zLnBhcmFtc1swXSB8fCAxKSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENTSSBQcyBCXG4gICAqIEN1cnNvciBEb3duIFBzIFRpbWVzIChkZWZhdWx0ID0gMSkgKENVRCkuXG4gICAqXG4gICAqIEB2dDogI1kgQ1NJIENVRCAgIFwiQ3Vyc29yIERvd25cIiAgIFwiQ1NJIFBzIEJcIiAgXCJNb3ZlIGN1cnNvciBgUHNgIHRpbWVzIGRvd24gKGRlZmF1bHQ9MSkuXCJcbiAgICogSWYgdGhlIGN1cnNvciB3b3VsZCBwYXNzIHRoZSBib3R0b20gc2Nyb2xsIG1hcmdpbiwgaXQgd2lsbCBzdG9wIHRoZXJlLlxuICAgKi9cbiAgcHVibGljIGN1cnNvckRvd24ocGFyYW1zOiBJUGFyYW1zKTogYm9vbGVhbiB7XG4gICAgLy8gc3RvcCBhdCBzY3JvbGxCb3R0b21cbiAgICBjb25zdCBkaWZmVG9Cb3R0b20gPSB0aGlzLl9hY3RpdmVCdWZmZXIuc2Nyb2xsQm90dG9tIC0gdGhpcy5fYWN0aXZlQnVmZmVyLnk7XG4gICAgaWYgKGRpZmZUb0JvdHRvbSA+PSAwKSB7XG4gICAgICB0aGlzLl9tb3ZlQ3Vyc29yKDAsIE1hdGgubWluKGRpZmZUb0JvdHRvbSwgcGFyYW1zLnBhcmFtc1swXSB8fCAxKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX21vdmVDdXJzb3IoMCwgcGFyYW1zLnBhcmFtc1swXSB8fCAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQ1NJIFBzIENcbiAgICogQ3Vyc29yIEZvcndhcmQgUHMgVGltZXMgKGRlZmF1bHQgPSAxKSAoQ1VGKS5cbiAgICpcbiAgICogQHZ0OiAjWSBDU0kgQ1VGICAgXCJDdXJzb3IgRm9yd2FyZFwiICAgIFwiQ1NJIFBzIENcIiAgXCJNb3ZlIGN1cnNvciBgUHNgIHRpbWVzIGZvcndhcmQgKGRlZmF1bHQ9MSkuXCJcbiAgICovXG4gIHB1YmxpYyBjdXJzb3JGb3J3YXJkKHBhcmFtczogSVBhcmFtcyk6IGJvb2xlYW4ge1xuICAgIHRoaXMuX21vdmVDdXJzb3IocGFyYW1zLnBhcmFtc1swXSB8fCAxLCAwKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDU0kgUHMgRFxuICAgKiBDdXJzb3IgQmFja3dhcmQgUHMgVGltZXMgKGRlZmF1bHQgPSAxKSAoQ1VCKS5cbiAgICpcbiAgICogQHZ0OiAjWSBDU0kgQ1VCICAgXCJDdXJzb3IgQmFja3dhcmRcIiAgIFwiQ1NJIFBzIERcIiAgXCJNb3ZlIGN1cnNvciBgUHNgIHRpbWVzIGJhY2t3YXJkIChkZWZhdWx0PTEpLlwiXG4gICAqL1xuICBwdWJsaWMgY3Vyc29yQmFja3dhcmQocGFyYW1zOiBJUGFyYW1zKTogYm9vbGVhbiB7XG4gICAgdGhpcy5fbW92ZUN1cnNvcigtKHBhcmFtcy5wYXJhbXNbMF0gfHwgMSksIDApO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENTSSBQcyBFXG4gICAqIEN1cnNvciBOZXh0IExpbmUgUHMgVGltZXMgKGRlZmF1bHQgPSAxKSAoQ05MKS5cbiAgICogT3RoZXIgdGhhbiBjdXJzb3JEb3duIChDVUQpIGFsc28gc2V0IHRoZSBjdXJzb3IgdG8gZmlyc3QgY29sdW1uLlxuICAgKlxuICAgKiBAdnQ6ICNZIENTSSBDTkwgICBcIkN1cnNvciBOZXh0IExpbmVcIiAgXCJDU0kgUHMgRVwiICBcIk1vdmUgY3Vyc29yIGBQc2AgdGltZXMgZG93biAoZGVmYXVsdD0xKSBhbmQgdG8gdGhlIGZpcnN0IGNvbHVtbi5cIlxuICAgKiBTYW1lIGFzIENVRCwgYWRkaXRpb25hbGx5IHBsYWNlcyB0aGUgY3Vyc29yIGF0IHRoZSBmaXJzdCBjb2x1bW4uXG4gICAqL1xuICBwdWJsaWMgY3Vyc29yTmV4dExpbmUocGFyYW1zOiBJUGFyYW1zKTogYm9vbGVhbiB7XG4gICAgdGhpcy5jdXJzb3JEb3duKHBhcmFtcyk7XG4gICAgdGhpcy5fYWN0aXZlQnVmZmVyLnggPSAwO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENTSSBQcyBGXG4gICAqIEN1cnNvciBQcmV2aW91cyBMaW5lIFBzIFRpbWVzIChkZWZhdWx0ID0gMSkgKENQTCkuXG4gICAqIE90aGVyIHRoYW4gY3Vyc29yVXAgKENVVSkgYWxzbyBzZXQgdGhlIGN1cnNvciB0byBmaXJzdCBjb2x1bW4uXG4gICAqXG4gICAqIEB2dDogI1kgQ1NJIENQTCAgIFwiQ3Vyc29yIEJhY2t3YXJkXCIgICBcIkNTSSBQcyBGXCIgIFwiTW92ZSBjdXJzb3IgYFBzYCB0aW1lcyB1cCAoZGVmYXVsdD0xKSBhbmQgdG8gdGhlIGZpcnN0IGNvbHVtbi5cIlxuICAgKiBTYW1lIGFzIENVVSwgYWRkaXRpb25hbGx5IHBsYWNlcyB0aGUgY3Vyc29yIGF0IHRoZSBmaXJzdCBjb2x1bW4uXG4gICAqL1xuICBwdWJsaWMgY3Vyc29yUHJlY2VkaW5nTGluZShwYXJhbXM6IElQYXJhbXMpOiBib29sZWFuIHtcbiAgICB0aGlzLmN1cnNvclVwKHBhcmFtcyk7XG4gICAgdGhpcy5fYWN0aXZlQnVmZmVyLnggPSAwO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENTSSBQcyBHXG4gICAqIEN1cnNvciBDaGFyYWN0ZXIgQWJzb2x1dGUgIFtjb2x1bW5dIChkZWZhdWx0ID0gW3JvdywxXSkgKENIQSkuXG4gICAqXG4gICAqIEB2dDogI1kgQ1NJIENIQSAgIFwiQ3Vyc29yIEhvcml6b250YWwgQWJzb2x1dGVcIiBcIkNTSSBQcyBHXCIgXCJNb3ZlIGN1cnNvciB0byBgUHNgLXRoIGNvbHVtbiBvZiB0aGUgYWN0aXZlIHJvdyAoZGVmYXVsdD0xKS5cIlxuICAgKi9cbiAgcHVibGljIGN1cnNvckNoYXJBYnNvbHV0ZShwYXJhbXM6IElQYXJhbXMpOiBib29sZWFuIHtcbiAgICB0aGlzLl9zZXRDdXJzb3IoKHBhcmFtcy5wYXJhbXNbMF0gfHwgMSkgLSAxLCB0aGlzLl9hY3RpdmVCdWZmZXIueSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQ1NJIFBzIDsgUHMgSFxuICAgKiBDdXJzb3IgUG9zaXRpb24gW3Jvdztjb2x1bW5dIChkZWZhdWx0ID0gWzEsMV0pIChDVVApLlxuICAgKlxuICAgKiBAdnQ6ICNZIENTSSBDVVAgICBcIkN1cnNvciBQb3NpdGlvblwiICAgXCJDU0kgUHMgOyBQcyBIXCIgIFwiU2V0IGN1cnNvciB0byBwb3NpdGlvbiBbYFBzYCwgYFBzYF0gKGRlZmF1bHQgPSBbMSwgMV0pLlwiXG4gICAqIElmIE9SSUdJTiBtb2RlIGlzIHNldCwgcGxhY2VzIHRoZSBjdXJzb3IgdG8gdGhlIGFic29sdXRlIHBvc2l0aW9uIHdpdGhpbiB0aGUgc2Nyb2xsIG1hcmdpbnMuXG4gICAqIElmIE9SSUdJTiBtb2RlIGlzIG5vdCBzZXQsIHBsYWNlcyB0aGUgY3Vyc29yIHRvIHRoZSBhYnNvbHV0ZSBwb3NpdGlvbiB3aXRoaW4gdGhlIHZpZXdwb3J0LlxuICAgKiBOb3RlIHRoYXQgdGhlIGNvb3JkaW5hdGVzIGFyZSAxLWJhc2VkLCB0aHVzIHRoZSB0b3AgbGVmdCBwb3NpdGlvbiBzdGFydHMgYXQgYDEgOyAxYC5cbiAgICovXG4gIHB1YmxpYyBjdXJzb3JQb3NpdGlvbihwYXJhbXM6IElQYXJhbXMpOiBib29sZWFuIHtcbiAgICB0aGlzLl9zZXRDdXJzb3IoXG4gICAgICAvLyBjb2xcbiAgICAgIChwYXJhbXMubGVuZ3RoID49IDIpID8gKHBhcmFtcy5wYXJhbXNbMV0gfHwgMSkgLSAxIDogMCxcbiAgICAgIC8vIHJvd1xuICAgICAgKHBhcmFtcy5wYXJhbXNbMF0gfHwgMSkgLSAxXG4gICAgKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDU0kgUG0gYCAgQ2hhcmFjdGVyIFBvc2l0aW9uIEFic29sdXRlXG4gICAqICAgW2NvbHVtbl0gKGRlZmF1bHQgPSBbcm93LDFdKSAoSFBBKS5cbiAgICogQ3VycmVudGx5IHNhbWUgZnVuY3Rpb25hbGl0eSBhcyBDSEEuXG4gICAqXG4gICAqIEB2dDogI1kgQ1NJIEhQQSAgIFwiSG9yaXpvbnRhbCBQb3NpdGlvbiBBYnNvbHV0ZVwiICBcIkNTSSBQcyBgIFwiIFwiU2FtZSBhcyBDSEEuXCJcbiAgICovXG4gIHB1YmxpYyBjaGFyUG9zQWJzb2x1dGUocGFyYW1zOiBJUGFyYW1zKTogYm9vbGVhbiB7XG4gICAgdGhpcy5fc2V0Q3Vyc29yKChwYXJhbXMucGFyYW1zWzBdIHx8IDEpIC0gMSwgdGhpcy5fYWN0aXZlQnVmZmVyLnkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENTSSBQbSBhICBDaGFyYWN0ZXIgUG9zaXRpb24gUmVsYXRpdmVcbiAgICogICBbY29sdW1uc10gKGRlZmF1bHQgPSBbcm93LGNvbCsxXSkgKEhQUilcbiAgICpcbiAgICogQHZ0OiAjWSBDU0kgSFBSICAgXCJIb3Jpem9udGFsIFBvc2l0aW9uIFJlbGF0aXZlXCIgIFwiQ1NJIFBzIGFcIiAgXCJTYW1lIGFzIENVRi5cIlxuICAgKi9cbiAgcHVibGljIGhQb3NpdGlvblJlbGF0aXZlKHBhcmFtczogSVBhcmFtcyk6IGJvb2xlYW4ge1xuICAgIHRoaXMuX21vdmVDdXJzb3IocGFyYW1zLnBhcmFtc1swXSB8fCAxLCAwKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDU0kgUG0gZCAgVmVydGljYWwgUG9zaXRpb24gQWJzb2x1dGUgKFZQQSlcbiAgICogICBbcm93XSAoZGVmYXVsdCA9IFsxLGNvbHVtbl0pXG4gICAqXG4gICAqIEB2dDogI1kgQ1NJIFZQQSAgIFwiVmVydGljYWwgUG9zaXRpb24gQWJzb2x1dGVcIiAgICBcIkNTSSBQcyBkXCIgIFwiTW92ZSBjdXJzb3IgdG8gYFBzYC10aCByb3cgKGRlZmF1bHQ9MSkuXCJcbiAgICovXG4gIHB1YmxpYyBsaW5lUG9zQWJzb2x1dGUocGFyYW1zOiBJUGFyYW1zKTogYm9vbGVhbiB7XG4gICAgdGhpcy5fc2V0Q3Vyc29yKHRoaXMuX2FjdGl2ZUJ1ZmZlci54LCAocGFyYW1zLnBhcmFtc1swXSB8fCAxKSAtIDEpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENTSSBQbSBlICBWZXJ0aWNhbCBQb3NpdGlvbiBSZWxhdGl2ZSAoVlBSKVxuICAgKiAgIFtyb3dzXSAoZGVmYXVsdCA9IFtyb3crMSxjb2x1bW5dKVxuICAgKiByZXVzZSBDU0kgUHMgQiA/XG4gICAqXG4gICAqIEB2dDogI1kgQ1NJIFZQUiAgIFwiVmVydGljYWwgUG9zaXRpb24gUmVsYXRpdmVcIiAgICBcIkNTSSBQcyBlXCIgIFwiTW92ZSBjdXJzb3IgYFBzYCB0aW1lcyBkb3duIChkZWZhdWx0PTEpLlwiXG4gICAqL1xuICBwdWJsaWMgdlBvc2l0aW9uUmVsYXRpdmUocGFyYW1zOiBJUGFyYW1zKTogYm9vbGVhbiB7XG4gICAgdGhpcy5fbW92ZUN1cnNvcigwLCBwYXJhbXMucGFyYW1zWzBdIHx8IDEpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENTSSBQcyA7IFBzIGZcbiAgICogICBIb3Jpem9udGFsIGFuZCBWZXJ0aWNhbCBQb3NpdGlvbiBbcm93O2NvbHVtbl0gKGRlZmF1bHQgPVxuICAgKiAgIFsxLDFdKSAoSFZQKS5cbiAgICogICBTYW1lIGFzIENVUC5cbiAgICpcbiAgICogQHZ0OiAjWSBDU0kgSFZQICAgXCJIb3Jpem9udGFsIGFuZCBWZXJ0aWNhbCBQb3NpdGlvblwiIFwiQ1NJIFBzIDsgUHMgZlwiICBcIlNhbWUgYXMgQ1VQLlwiXG4gICAqL1xuICBwdWJsaWMgaFZQb3NpdGlvbihwYXJhbXM6IElQYXJhbXMpOiBib29sZWFuIHtcbiAgICB0aGlzLmN1cnNvclBvc2l0aW9uKHBhcmFtcyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQ1NJIFBzIGcgIFRhYiBDbGVhciAoVEJDKS5cbiAgICogICAgIFBzID0gMCAgLT4gQ2xlYXIgQ3VycmVudCBDb2x1bW4gKGRlZmF1bHQpLlxuICAgKiAgICAgUHMgPSAzICAtPiBDbGVhciBBbGwuXG4gICAqIFBvdGVudGlhbGx5OlxuICAgKiAgIFBzID0gMiAgLT4gQ2xlYXIgU3RvcHMgb24gTGluZS5cbiAgICogICBodHRwOi8vdnQxMDAubmV0L2FubmFyYm9yL2FhYS11Zy9zZWN0aW9uNi5odG1sXG4gICAqXG4gICAqIEB2dDogI1kgQ1NJIFRCQyAgIFwiVGFiIENsZWFyXCIgXCJDU0kgUHMgZ1wiICBcIkNsZWFyIHRhYiBzdG9wcyBhdCBjdXJyZW50IHBvc2l0aW9uICgwKSBvciBhbGwgKDMpIChkZWZhdWx0PTApLlwiXG4gICAqIENsZWFyaW5nIHRhYnN0b3BzIG9mZiB0aGUgYWN0aXZlIHJvdyAoUHMgPSAyLCBWVDEwMCkgaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQuXG4gICAqL1xuICBwdWJsaWMgdGFiQ2xlYXIocGFyYW1zOiBJUGFyYW1zKTogYm9vbGVhbiB7XG4gICAgY29uc3QgcGFyYW0gPSBwYXJhbXMucGFyYW1zWzBdO1xuICAgIGlmIChwYXJhbSA9PT0gMCkge1xuICAgICAgZGVsZXRlIHRoaXMuX2FjdGl2ZUJ1ZmZlci50YWJzW3RoaXMuX2FjdGl2ZUJ1ZmZlci54XTtcbiAgICB9IGVsc2UgaWYgKHBhcmFtID09PSAzKSB7XG4gICAgICB0aGlzLl9hY3RpdmVCdWZmZXIudGFicyA9IHt9O1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDU0kgUHMgSVxuICAgKiAgIEN1cnNvciBGb3J3YXJkIFRhYnVsYXRpb24gUHMgdGFiIHN0b3BzIChkZWZhdWx0ID0gMSkgKENIVCkuXG4gICAqXG4gICAqIEB2dDogI1kgQ1NJIENIVCAgIFwiQ3Vyc29yIEhvcml6b250YWwgVGFidWxhdGlvblwiIFwiQ1NJIFBzIElcIiBcIk1vdmUgY3Vyc29yIGBQc2AgdGltZXMgdGFicyBmb3J3YXJkIChkZWZhdWx0PTEpLlwiXG4gICAqL1xuICBwdWJsaWMgY3Vyc29yRm9yd2FyZFRhYihwYXJhbXM6IElQYXJhbXMpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5fYWN0aXZlQnVmZmVyLnggPj0gdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbGV0IHBhcmFtID0gcGFyYW1zLnBhcmFtc1swXSB8fCAxO1xuICAgIHdoaWxlIChwYXJhbS0tKSB7XG4gICAgICB0aGlzLl9hY3RpdmVCdWZmZXIueCA9IHRoaXMuX2FjdGl2ZUJ1ZmZlci5uZXh0U3RvcCgpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDU0kgUHMgWiAgQ3Vyc29yIEJhY2t3YXJkIFRhYnVsYXRpb24gUHMgdGFiIHN0b3BzIChkZWZhdWx0ID0gMSkgKENCVCkuXG4gICAqXG4gICAqIEB2dDogI1kgQ1NJIENCVCAgIFwiQ3Vyc29yIEJhY2t3YXJkIFRhYnVsYXRpb25cIiAgXCJDU0kgUHMgWlwiICBcIk1vdmUgY3Vyc29yIGBQc2AgdGFicyBiYWNrd2FyZCAoZGVmYXVsdD0xKS5cIlxuICAgKi9cbiAgcHVibGljIGN1cnNvckJhY2t3YXJkVGFiKHBhcmFtczogSVBhcmFtcyk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLl9hY3RpdmVCdWZmZXIueCA+PSB0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBsZXQgcGFyYW0gPSBwYXJhbXMucGFyYW1zWzBdIHx8IDE7XG5cbiAgICB3aGlsZSAocGFyYW0tLSkge1xuICAgICAgdGhpcy5fYWN0aXZlQnVmZmVyLnggPSB0aGlzLl9hY3RpdmVCdWZmZXIucHJldlN0b3AoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBIZWxwZXIgbWV0aG9kIHRvIGVyYXNlIGNlbGxzIGluIGEgdGVybWluYWwgcm93LlxuICAgKiBUaGUgY2VsbCBnZXRzIHJlcGxhY2VkIHdpdGggdGhlIGVyYXNlQ2hhciBvZiB0aGUgdGVybWluYWwuXG4gICAqIEBwYXJhbSB5IHJvdyBpbmRleFxuICAgKiBAcGFyYW0gc3RhcnQgZmlyc3QgY2VsbCBpbmRleCB0byBiZSBlcmFzZWRcbiAgICogQHBhcmFtIGVuZCAgIGVuZCAtIDEgaXMgbGFzdCBlcmFzZWQgY2VsbFxuICAgKiBAcGFyYW0gY2xlYW5XcmFwIGNsZWFyIHRoZSBpc1dyYXBwZWQgZmxhZ1xuICAgKi9cbiAgcHJpdmF0ZSBfZXJhc2VJbkJ1ZmZlckxpbmUoeTogbnVtYmVyLCBzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlciwgY2xlYXJXcmFwOiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcbiAgICBjb25zdCBsaW5lID0gdGhpcy5fYWN0aXZlQnVmZmVyLmxpbmVzLmdldCh0aGlzLl9hY3RpdmVCdWZmZXIueWJhc2UgKyB5KSE7XG4gICAgbGluZS5yZXBsYWNlQ2VsbHMoXG4gICAgICBzdGFydCxcbiAgICAgIGVuZCxcbiAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci5nZXROdWxsQ2VsbCh0aGlzLl9lcmFzZUF0dHJEYXRhKCkpLFxuICAgICAgdGhpcy5fZXJhc2VBdHRyRGF0YSgpXG4gICAgKTtcbiAgICBpZiAoY2xlYXJXcmFwKSB7XG4gICAgICBsaW5lLmlzV3JhcHBlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgbWV0aG9kIHRvIHJlc2V0IGNlbGxzIGluIGEgdGVybWluYWwgcm93LlxuICAgKiBUaGUgY2VsbCBnZXRzIHJlcGxhY2VkIHdpdGggdGhlIGVyYXNlQ2hhciBvZiB0aGUgdGVybWluYWwgYW5kIHRoZSBpc1dyYXBwZWQgcHJvcGVydHkgaXMgc2V0IHRvIGZhbHNlLlxuICAgKiBAcGFyYW0geSByb3cgaW5kZXhcbiAgICovXG4gIHByaXZhdGUgX3Jlc2V0QnVmZmVyTGluZSh5OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBsaW5lID0gdGhpcy5fYWN0aXZlQnVmZmVyLmxpbmVzLmdldCh0aGlzLl9hY3RpdmVCdWZmZXIueWJhc2UgKyB5KSE7XG4gICAgbGluZS5maWxsKHRoaXMuX2FjdGl2ZUJ1ZmZlci5nZXROdWxsQ2VsbCh0aGlzLl9lcmFzZUF0dHJEYXRhKCkpKTtcbiAgICB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlci5jbGVhck1hcmtlcnModGhpcy5fYWN0aXZlQnVmZmVyLnliYXNlICsgeSk7XG4gICAgbGluZS5pc1dyYXBwZWQgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDU0kgUHMgSiAgRXJhc2UgaW4gRGlzcGxheSAoRUQpLlxuICAgKiAgICAgUHMgPSAwICAtPiBFcmFzZSBCZWxvdyAoZGVmYXVsdCkuXG4gICAqICAgICBQcyA9IDEgIC0+IEVyYXNlIEFib3ZlLlxuICAgKiAgICAgUHMgPSAyICAtPiBFcmFzZSBBbGwuXG4gICAqICAgICBQcyA9IDMgIC0+IEVyYXNlIFNhdmVkIExpbmVzICh4dGVybSkuXG4gICAqIENTSSA/IFBzIEpcbiAgICogICBFcmFzZSBpbiBEaXNwbGF5IChERUNTRUQpLlxuICAgKiAgICAgUHMgPSAwICAtPiBTZWxlY3RpdmUgRXJhc2UgQmVsb3cgKGRlZmF1bHQpLlxuICAgKiAgICAgUHMgPSAxICAtPiBTZWxlY3RpdmUgRXJhc2UgQWJvdmUuXG4gICAqICAgICBQcyA9IDIgIC0+IFNlbGVjdGl2ZSBFcmFzZSBBbGwuXG4gICAqXG4gICAqIEB2dDogI1kgQ1NJIEVEICBcIkVyYXNlIEluIERpc3BsYXlcIiAgXCJDU0kgUHMgSlwiICBcIkVyYXNlIHZhcmlvdXMgcGFydHMgb2YgdGhlIHZpZXdwb3J0LlwiXG4gICAqIFN1cHBvcnRlZCBwYXJhbSB2YWx1ZXM6XG4gICAqXG4gICAqIHwgUHMgfCBFZmZlY3QgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8IC0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbiAgICogfCAwICB8IEVyYXNlIGZyb20gdGhlIGN1cnNvciB0aHJvdWdoIHRoZSBlbmQgb2YgdGhlIHZpZXdwb3J0LiAgICAgICB8XG4gICAqIHwgMSAgfCBFcmFzZSBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHZpZXdwb3J0IHRocm91Z2ggdGhlIGN1cnNvci4gfFxuICAgKiB8IDIgIHwgRXJhc2UgY29tcGxldGUgdmlld3BvcnQuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAzICB8IEVyYXNlIHNjcm9sbGJhY2suICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqXG4gICAqIEB2dDogI1BbUHJvdGVjdGlvbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkLl0gQ1NJIERFQ1NFRCAgIFwiU2VsZWN0aXZlIEVyYXNlIEluIERpc3BsYXlcIiAgXCJDU0kgPyBQcyBKXCIgIFwiQ3VycmVudGx5IHRoZSBzYW1lIGFzIEVELlwiXG4gICAqL1xuICBwdWJsaWMgZXJhc2VJbkRpc3BsYXkocGFyYW1zOiBJUGFyYW1zKTogYm9vbGVhbiB7XG4gICAgdGhpcy5fcmVzdHJpY3RDdXJzb3IodGhpcy5fYnVmZmVyU2VydmljZS5jb2xzKTtcbiAgICBsZXQgajtcbiAgICBzd2l0Y2ggKHBhcmFtcy5wYXJhbXNbMF0pIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgaiA9IHRoaXMuX2FjdGl2ZUJ1ZmZlci55O1xuICAgICAgICB0aGlzLl9kaXJ0eVJvd1NlcnZpY2UubWFya0RpcnR5KGopO1xuICAgICAgICB0aGlzLl9lcmFzZUluQnVmZmVyTGluZShqKyssIHRoaXMuX2FjdGl2ZUJ1ZmZlci54LCB0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHMsIHRoaXMuX2FjdGl2ZUJ1ZmZlci54ID09PSAwKTtcbiAgICAgICAgZm9yICg7IGogPCB0aGlzLl9idWZmZXJTZXJ2aWNlLnJvd3M7IGorKykge1xuICAgICAgICAgIHRoaXMuX3Jlc2V0QnVmZmVyTGluZShqKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kaXJ0eVJvd1NlcnZpY2UubWFya0RpcnR5KGopO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaiA9IHRoaXMuX2FjdGl2ZUJ1ZmZlci55O1xuICAgICAgICB0aGlzLl9kaXJ0eVJvd1NlcnZpY2UubWFya0RpcnR5KGopO1xuICAgICAgICAvLyBEZWxldGVkIGZyb250IHBhcnQgb2YgbGluZSBhbmQgZXZlcnl0aGluZyBiZWZvcmUuIFRoaXMgbGluZSB3aWxsIG5vIGxvbmdlciBiZSB3cmFwcGVkLlxuICAgICAgICB0aGlzLl9lcmFzZUluQnVmZmVyTGluZShqLCAwLCB0aGlzLl9hY3RpdmVCdWZmZXIueCArIDEsIHRydWUpO1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlQnVmZmVyLnggKyAxID49IHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scykge1xuICAgICAgICAgIC8vIERlbGV0ZWQgZW50aXJlIHByZXZpb3VzIGxpbmUuIFRoaXMgbmV4dCBsaW5lIGNhbiBubyBsb25nZXIgYmUgd3JhcHBlZC5cbiAgICAgICAgICB0aGlzLl9hY3RpdmVCdWZmZXIubGluZXMuZ2V0KGogKyAxKSEuaXNXcmFwcGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGotLSkge1xuICAgICAgICAgIHRoaXMuX3Jlc2V0QnVmZmVyTGluZShqKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kaXJ0eVJvd1NlcnZpY2UubWFya0RpcnR5KDApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaiA9IHRoaXMuX2J1ZmZlclNlcnZpY2Uucm93cztcbiAgICAgICAgdGhpcy5fZGlydHlSb3dTZXJ2aWNlLm1hcmtEaXJ0eShqIC0gMSk7XG4gICAgICAgIHdoaWxlIChqLS0pIHtcbiAgICAgICAgICB0aGlzLl9yZXNldEJ1ZmZlckxpbmUoaik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZGlydHlSb3dTZXJ2aWNlLm1hcmtEaXJ0eSgwKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIC8vIENsZWFyIHNjcm9sbGJhY2sgKGV2ZXJ5dGhpbmcgbm90IGluIHZpZXdwb3J0KVxuICAgICAgICBjb25zdCBzY3JvbGxCYWNrU2l6ZSA9IHRoaXMuX2FjdGl2ZUJ1ZmZlci5saW5lcy5sZW5ndGggLSB0aGlzLl9idWZmZXJTZXJ2aWNlLnJvd3M7XG4gICAgICAgIGlmIChzY3JvbGxCYWNrU2l6ZSA+IDApIHtcbiAgICAgICAgICB0aGlzLl9hY3RpdmVCdWZmZXIubGluZXMudHJpbVN0YXJ0KHNjcm9sbEJhY2tTaXplKTtcbiAgICAgICAgICB0aGlzLl9hY3RpdmVCdWZmZXIueWJhc2UgPSBNYXRoLm1heCh0aGlzLl9hY3RpdmVCdWZmZXIueWJhc2UgLSBzY3JvbGxCYWNrU2l6ZSwgMCk7XG4gICAgICAgICAgdGhpcy5fYWN0aXZlQnVmZmVyLnlkaXNwID0gTWF0aC5tYXgodGhpcy5fYWN0aXZlQnVmZmVyLnlkaXNwIC0gc2Nyb2xsQmFja1NpemUsIDApO1xuICAgICAgICAgIC8vIEZvcmNlIGEgc2Nyb2xsIGV2ZW50IHRvIHJlZnJlc2ggdmlld3BvcnRcbiAgICAgICAgICB0aGlzLl9vblNjcm9sbC5maXJlKDApO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDU0kgUHMgSyAgRXJhc2UgaW4gTGluZSAoRUwpLlxuICAgKiAgICAgUHMgPSAwICAtPiBFcmFzZSB0byBSaWdodCAoZGVmYXVsdCkuXG4gICAqICAgICBQcyA9IDEgIC0+IEVyYXNlIHRvIExlZnQuXG4gICAqICAgICBQcyA9IDIgIC0+IEVyYXNlIEFsbC5cbiAgICogQ1NJID8gUHMgS1xuICAgKiAgIEVyYXNlIGluIExpbmUgKERFQ1NFTCkuXG4gICAqICAgICBQcyA9IDAgIC0+IFNlbGVjdGl2ZSBFcmFzZSB0byBSaWdodCAoZGVmYXVsdCkuXG4gICAqICAgICBQcyA9IDEgIC0+IFNlbGVjdGl2ZSBFcmFzZSB0byBMZWZ0LlxuICAgKiAgICAgUHMgPSAyICAtPiBTZWxlY3RpdmUgRXJhc2UgQWxsLlxuICAgKlxuICAgKiBAdnQ6ICNZIENTSSBFTCAgICBcIkVyYXNlIEluIExpbmVcIiAgXCJDU0kgUHMgS1wiICBcIkVyYXNlIHZhcmlvdXMgcGFydHMgb2YgdGhlIGFjdGl2ZSByb3cuXCJcbiAgICogU3VwcG9ydGVkIHBhcmFtIHZhbHVlczpcbiAgICpcbiAgICogfCBQcyB8IEVmZmVjdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAtLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbiAgICogfCAwICB8IEVyYXNlIGZyb20gdGhlIGN1cnNvciB0aHJvdWdoIHRoZSBlbmQgb2YgdGhlIHJvdy4gICAgICAgIHxcbiAgICogfCAxICB8IEVyYXNlIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGluZSB0aHJvdWdoIHRoZSBjdXJzb3IuIHxcbiAgICogfCAyICB8IEVyYXNlIGNvbXBsZXRlIGxpbmUuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICpcbiAgICogQHZ0OiAjUFtQcm90ZWN0aW9uIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWQuXSBDU0kgREVDU0VMICAgXCJTZWxlY3RpdmUgRXJhc2UgSW4gTGluZVwiICBcIkNTSSA/IFBzIEtcIiAgXCJDdXJyZW50bHkgdGhlIHNhbWUgYXMgRUwuXCJcbiAgICovXG4gIHB1YmxpYyBlcmFzZUluTGluZShwYXJhbXM6IElQYXJhbXMpOiBib29sZWFuIHtcbiAgICB0aGlzLl9yZXN0cmljdEN1cnNvcih0aGlzLl9idWZmZXJTZXJ2aWNlLmNvbHMpO1xuICAgIHN3aXRjaCAocGFyYW1zLnBhcmFtc1swXSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICB0aGlzLl9lcmFzZUluQnVmZmVyTGluZSh0aGlzLl9hY3RpdmVCdWZmZXIueSwgdGhpcy5fYWN0aXZlQnVmZmVyLngsIHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scywgdGhpcy5fYWN0aXZlQnVmZmVyLnggPT09IDApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgdGhpcy5fZXJhc2VJbkJ1ZmZlckxpbmUodGhpcy5fYWN0aXZlQnVmZmVyLnksIDAsIHRoaXMuX2FjdGl2ZUJ1ZmZlci54ICsgMSwgZmFsc2UpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgdGhpcy5fZXJhc2VJbkJ1ZmZlckxpbmUodGhpcy5fYWN0aXZlQnVmZmVyLnksIDAsIHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scywgdHJ1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl9kaXJ0eVJvd1NlcnZpY2UubWFya0RpcnR5KHRoaXMuX2FjdGl2ZUJ1ZmZlci55KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDU0kgUHMgTFxuICAgKiBJbnNlcnQgUHMgTGluZShzKSAoZGVmYXVsdCA9IDEpIChJTCkuXG4gICAqXG4gICAqIEB2dDogI1kgQ1NJIElMICBcIkluc2VydCBMaW5lXCIgICBcIkNTSSBQcyBMXCIgIFwiSW5zZXJ0IGBQc2AgYmxhbmsgbGluZXMgYXQgYWN0aXZlIHJvdyAoZGVmYXVsdD0xKS5cIlxuICAgKiBGb3IgZXZlcnkgaW5zZXJ0ZWQgbGluZSBhdCB0aGUgc2Nyb2xsIHRvcCBvbmUgbGluZSBhdCB0aGUgc2Nyb2xsIGJvdHRvbSBnZXRzIHJlbW92ZWQuXG4gICAqIFRoZSBjdXJzb3IgaXMgc2V0IHRvIHRoZSBmaXJzdCBjb2x1bW4uXG4gICAqIElMIGhhcyBubyBlZmZlY3QgaWYgdGhlIGN1cnNvciBpcyBvdXRzaWRlIHRoZSBzY3JvbGwgbWFyZ2lucy5cbiAgICovXG4gIHB1YmxpYyBpbnNlcnRMaW5lcyhwYXJhbXM6IElQYXJhbXMpOiBib29sZWFuIHtcbiAgICB0aGlzLl9yZXN0cmljdEN1cnNvcigpO1xuICAgIGxldCBwYXJhbSA9IHBhcmFtcy5wYXJhbXNbMF0gfHwgMTtcblxuICAgIGlmICh0aGlzLl9hY3RpdmVCdWZmZXIueSA+IHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxCb3R0b20gfHwgdGhpcy5fYWN0aXZlQnVmZmVyLnkgPCB0aGlzLl9hY3RpdmVCdWZmZXIuc2Nyb2xsVG9wKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCByb3c6IG51bWJlciA9IHRoaXMuX2FjdGl2ZUJ1ZmZlci55YmFzZSArIHRoaXMuX2FjdGl2ZUJ1ZmZlci55O1xuXG4gICAgY29uc3Qgc2Nyb2xsQm90dG9tUm93c09mZnNldCA9IHRoaXMuX2J1ZmZlclNlcnZpY2Uucm93cyAtIDEgLSB0aGlzLl9hY3RpdmVCdWZmZXIuc2Nyb2xsQm90dG9tO1xuICAgIGNvbnN0IHNjcm9sbEJvdHRvbUFic29sdXRlID0gdGhpcy5fYnVmZmVyU2VydmljZS5yb3dzIC0gMSArIHRoaXMuX2FjdGl2ZUJ1ZmZlci55YmFzZSAtIHNjcm9sbEJvdHRvbVJvd3NPZmZzZXQgKyAxO1xuICAgIHdoaWxlIChwYXJhbS0tKSB7XG4gICAgICAvLyB0ZXN0OiBlY2hvIC1lICdcXGVbNDRtXFxlWzFMXFxlWzBtJ1xuICAgICAgLy8gYmxhbmtMaW5lKHRydWUpIC0geHRlcm0vbGludXggYmVoYXZpb3JcbiAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci5saW5lcy5zcGxpY2Uoc2Nyb2xsQm90dG9tQWJzb2x1dGUgLSAxLCAxKTtcbiAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci5saW5lcy5zcGxpY2Uocm93LCAwLCB0aGlzLl9hY3RpdmVCdWZmZXIuZ2V0QmxhbmtMaW5lKHRoaXMuX2VyYXNlQXR0ckRhdGEoKSkpO1xuICAgIH1cblxuICAgIHRoaXMuX2RpcnR5Um93U2VydmljZS5tYXJrUmFuZ2VEaXJ0eSh0aGlzLl9hY3RpdmVCdWZmZXIueSwgdGhpcy5fYWN0aXZlQnVmZmVyLnNjcm9sbEJvdHRvbSk7XG4gICAgdGhpcy5fYWN0aXZlQnVmZmVyLnggPSAwOyAvLyBzZWUgaHR0cHM6Ly92dDEwMC5uZXQvZG9jcy92dDIyMC1ybS9jaGFwdGVyNC5odG1sIC0gdnQyMjAgb25seT9cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDU0kgUHMgTVxuICAgKiBEZWxldGUgUHMgTGluZShzKSAoZGVmYXVsdCA9IDEpIChETCkuXG4gICAqXG4gICAqIEB2dDogI1kgQ1NJIERMICBcIkRlbGV0ZSBMaW5lXCIgICBcIkNTSSBQcyBNXCIgIFwiRGVsZXRlIGBQc2AgbGluZXMgYXQgYWN0aXZlIHJvdyAoZGVmYXVsdD0xKS5cIlxuICAgKiBGb3IgZXZlcnkgZGVsZXRlZCBsaW5lIGF0IHRoZSBzY3JvbGwgdG9wIG9uZSBibGFuayBsaW5lIGF0IHRoZSBzY3JvbGwgYm90dG9tIGdldHMgYXBwZW5kZWQuXG4gICAqIFRoZSBjdXJzb3IgaXMgc2V0IHRvIHRoZSBmaXJzdCBjb2x1bW4uXG4gICAqIERMIGhhcyBubyBlZmZlY3QgaWYgdGhlIGN1cnNvciBpcyBvdXRzaWRlIHRoZSBzY3JvbGwgbWFyZ2lucy5cbiAgICovXG4gIHB1YmxpYyBkZWxldGVMaW5lcyhwYXJhbXM6IElQYXJhbXMpOiBib29sZWFuIHtcbiAgICB0aGlzLl9yZXN0cmljdEN1cnNvcigpO1xuICAgIGxldCBwYXJhbSA9IHBhcmFtcy5wYXJhbXNbMF0gfHwgMTtcblxuICAgIGlmICh0aGlzLl9hY3RpdmVCdWZmZXIueSA+IHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxCb3R0b20gfHwgdGhpcy5fYWN0aXZlQnVmZmVyLnkgPCB0aGlzLl9hY3RpdmVCdWZmZXIuc2Nyb2xsVG9wKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCByb3c6IG51bWJlciA9IHRoaXMuX2FjdGl2ZUJ1ZmZlci55YmFzZSArIHRoaXMuX2FjdGl2ZUJ1ZmZlci55O1xuXG4gICAgbGV0IGo6IG51bWJlcjtcbiAgICBqID0gdGhpcy5fYnVmZmVyU2VydmljZS5yb3dzIC0gMSAtIHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxCb3R0b207XG4gICAgaiA9IHRoaXMuX2J1ZmZlclNlcnZpY2Uucm93cyAtIDEgKyB0aGlzLl9hY3RpdmVCdWZmZXIueWJhc2UgLSBqO1xuICAgIHdoaWxlIChwYXJhbS0tKSB7XG4gICAgICAvLyB0ZXN0OiBlY2hvIC1lICdcXGVbNDRtXFxlWzFNXFxlWzBtJ1xuICAgICAgLy8gYmxhbmtMaW5lKHRydWUpIC0geHRlcm0vbGludXggYmVoYXZpb3JcbiAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci5saW5lcy5zcGxpY2Uocm93LCAxKTtcbiAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci5saW5lcy5zcGxpY2UoaiwgMCwgdGhpcy5fYWN0aXZlQnVmZmVyLmdldEJsYW5rTGluZSh0aGlzLl9lcmFzZUF0dHJEYXRhKCkpKTtcbiAgICB9XG5cbiAgICB0aGlzLl9kaXJ0eVJvd1NlcnZpY2UubWFya1JhbmdlRGlydHkodGhpcy5fYWN0aXZlQnVmZmVyLnksIHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxCb3R0b20pO1xuICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci54ID0gMDsgLy8gc2VlIGh0dHBzOi8vdnQxMDAubmV0L2RvY3MvdnQyMjAtcm0vY2hhcHRlcjQuaHRtbCAtIHZ0MjIwIG9ubHk/XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQ1NJIFBzIEBcbiAgICogSW5zZXJ0IFBzIChCbGFuaykgQ2hhcmFjdGVyKHMpIChkZWZhdWx0ID0gMSkgKElDSCkuXG4gICAqXG4gICAqIEB2dDogI1kgQ1NJIElDSCAgXCJJbnNlcnQgQ2hhcmFjdGVyc1wiICAgXCJDU0kgUHMgQFwiICBcIkluc2VydCBgUHNgIChibGFuaykgY2hhcmFjdGVycyAoZGVmYXVsdCA9IDEpLlwiXG4gICAqIFRoZSBJQ0ggc2VxdWVuY2UgaW5zZXJ0cyBgUHNgIGJsYW5rIGNoYXJhY3RlcnMuIFRoZSBjdXJzb3IgcmVtYWlucyBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBibGFuayBjaGFyYWN0ZXJzLlxuICAgKiBUZXh0IGJldHdlZW4gdGhlIGN1cnNvciBhbmQgcmlnaHQgbWFyZ2luIG1vdmVzIHRvIHRoZSByaWdodC4gQ2hhcmFjdGVycyBtb3ZlZCBwYXN0IHRoZSByaWdodCBtYXJnaW4gYXJlIGxvc3QuXG4gICAqXG4gICAqXG4gICAqIEZJWE1FOiBjaGVjayBhZ2FpbnN0IHh0ZXJtIC0gc2hvdWxkIG5vdCB3b3JrIG91dHNpZGUgb2Ygc2Nyb2xsIG1hcmdpbnMgKHNlZSBWVDUyMCBtYW51YWwpXG4gICAqL1xuICBwdWJsaWMgaW5zZXJ0Q2hhcnMocGFyYW1zOiBJUGFyYW1zKTogYm9vbGVhbiB7XG4gICAgdGhpcy5fcmVzdHJpY3RDdXJzb3IoKTtcbiAgICBjb25zdCBsaW5lID0gdGhpcy5fYWN0aXZlQnVmZmVyLmxpbmVzLmdldCh0aGlzLl9hY3RpdmVCdWZmZXIueWJhc2UgKyB0aGlzLl9hY3RpdmVCdWZmZXIueSk7XG4gICAgaWYgKGxpbmUpIHtcbiAgICAgIGxpbmUuaW5zZXJ0Q2VsbHMoXG4gICAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci54LFxuICAgICAgICBwYXJhbXMucGFyYW1zWzBdIHx8IDEsXG4gICAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci5nZXROdWxsQ2VsbCh0aGlzLl9lcmFzZUF0dHJEYXRhKCkpLFxuICAgICAgICB0aGlzLl9lcmFzZUF0dHJEYXRhKClcbiAgICAgICk7XG4gICAgICB0aGlzLl9kaXJ0eVJvd1NlcnZpY2UubWFya0RpcnR5KHRoaXMuX2FjdGl2ZUJ1ZmZlci55KTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQ1NJIFBzIFBcbiAgICogRGVsZXRlIFBzIENoYXJhY3RlcihzKSAoZGVmYXVsdCA9IDEpIChEQ0gpLlxuICAgKlxuICAgKiBAdnQ6ICNZIENTSSBEQ0ggICBcIkRlbGV0ZSBDaGFyYWN0ZXJcIiAgXCJDU0kgUHMgUFwiICBcIkRlbGV0ZSBgUHNgIGNoYXJhY3RlcnMgKGRlZmF1bHQ9MSkuXCJcbiAgICogQXMgY2hhcmFjdGVycyBhcmUgZGVsZXRlZCwgdGhlIHJlbWFpbmluZyBjaGFyYWN0ZXJzIGJldHdlZW4gdGhlIGN1cnNvciBhbmQgcmlnaHQgbWFyZ2luIG1vdmUgdG8gdGhlIGxlZnQuXG4gICAqIENoYXJhY3RlciBhdHRyaWJ1dGVzIG1vdmUgd2l0aCB0aGUgY2hhcmFjdGVycy4gVGhlIHRlcm1pbmFsIGFkZHMgYmxhbmsgY2hhcmFjdGVycyBhdCB0aGUgcmlnaHQgbWFyZ2luLlxuICAgKlxuICAgKlxuICAgKiBGSVhNRTogY2hlY2sgYWdhaW5zdCB4dGVybSAtIHNob3VsZCBub3Qgd29yayBvdXRzaWRlIG9mIHNjcm9sbCBtYXJnaW5zIChzZWUgVlQ1MjAgbWFudWFsKVxuICAgKi9cbiAgcHVibGljIGRlbGV0ZUNoYXJzKHBhcmFtczogSVBhcmFtcyk6IGJvb2xlYW4ge1xuICAgIHRoaXMuX3Jlc3RyaWN0Q3Vyc29yKCk7XG4gICAgY29uc3QgbGluZSA9IHRoaXMuX2FjdGl2ZUJ1ZmZlci5saW5lcy5nZXQodGhpcy5fYWN0aXZlQnVmZmVyLnliYXNlICsgdGhpcy5fYWN0aXZlQnVmZmVyLnkpO1xuICAgIGlmIChsaW5lKSB7XG4gICAgICBsaW5lLmRlbGV0ZUNlbGxzKFxuICAgICAgICB0aGlzLl9hY3RpdmVCdWZmZXIueCxcbiAgICAgICAgcGFyYW1zLnBhcmFtc1swXSB8fCAxLFxuICAgICAgICB0aGlzLl9hY3RpdmVCdWZmZXIuZ2V0TnVsbENlbGwodGhpcy5fZXJhc2VBdHRyRGF0YSgpKSxcbiAgICAgICAgdGhpcy5fZXJhc2VBdHRyRGF0YSgpXG4gICAgICApO1xuICAgICAgdGhpcy5fZGlydHlSb3dTZXJ2aWNlLm1hcmtEaXJ0eSh0aGlzLl9hY3RpdmVCdWZmZXIueSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENTSSBQcyBTICBTY3JvbGwgdXAgUHMgbGluZXMgKGRlZmF1bHQgPSAxKSAoU1UpLlxuICAgKlxuICAgKiBAdnQ6ICNZIENTSSBTVSAgXCJTY3JvbGwgVXBcIiAgIFwiQ1NJIFBzIFNcIiAgXCJTY3JvbGwgYFBzYCBsaW5lcyB1cCAoZGVmYXVsdD0xKS5cIlxuICAgKlxuICAgKlxuICAgKiBGSVhNRTogc2Nyb2xsZWQgb3V0IGxpbmVzIGF0IHRvcCA9IDEgc2hvdWxkIGFkZCB0byBzY3JvbGxiYWNrICh4dGVybSlcbiAgICovXG4gIHB1YmxpYyBzY3JvbGxVcChwYXJhbXM6IElQYXJhbXMpOiBib29sZWFuIHtcbiAgICBsZXQgcGFyYW0gPSBwYXJhbXMucGFyYW1zWzBdIHx8IDE7XG5cbiAgICB3aGlsZSAocGFyYW0tLSkge1xuICAgICAgdGhpcy5fYWN0aXZlQnVmZmVyLmxpbmVzLnNwbGljZSh0aGlzLl9hY3RpdmVCdWZmZXIueWJhc2UgKyB0aGlzLl9hY3RpdmVCdWZmZXIuc2Nyb2xsVG9wLCAxKTtcbiAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci5saW5lcy5zcGxpY2UodGhpcy5fYWN0aXZlQnVmZmVyLnliYXNlICsgdGhpcy5fYWN0aXZlQnVmZmVyLnNjcm9sbEJvdHRvbSwgMCwgdGhpcy5fYWN0aXZlQnVmZmVyLmdldEJsYW5rTGluZSh0aGlzLl9lcmFzZUF0dHJEYXRhKCkpKTtcbiAgICB9XG4gICAgdGhpcy5fZGlydHlSb3dTZXJ2aWNlLm1hcmtSYW5nZURpcnR5KHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxUb3AsIHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxCb3R0b20pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENTSSBQcyBUICBTY3JvbGwgZG93biBQcyBsaW5lcyAoZGVmYXVsdCA9IDEpIChTRCkuXG4gICAqXG4gICAqIEB2dDogI1kgQ1NJIFNEICBcIlNjcm9sbCBEb3duXCIgICBcIkNTSSBQcyBUXCIgIFwiU2Nyb2xsIGBQc2AgbGluZXMgZG93biAoZGVmYXVsdD0xKS5cIlxuICAgKi9cbiAgcHVibGljIHNjcm9sbERvd24ocGFyYW1zOiBJUGFyYW1zKTogYm9vbGVhbiB7XG4gICAgbGV0IHBhcmFtID0gcGFyYW1zLnBhcmFtc1swXSB8fCAxO1xuXG4gICAgd2hpbGUgKHBhcmFtLS0pIHtcbiAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci5saW5lcy5zcGxpY2UodGhpcy5fYWN0aXZlQnVmZmVyLnliYXNlICsgdGhpcy5fYWN0aXZlQnVmZmVyLnNjcm9sbEJvdHRvbSwgMSk7XG4gICAgICB0aGlzLl9hY3RpdmVCdWZmZXIubGluZXMuc3BsaWNlKHRoaXMuX2FjdGl2ZUJ1ZmZlci55YmFzZSArIHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxUb3AsIDAsIHRoaXMuX2FjdGl2ZUJ1ZmZlci5nZXRCbGFua0xpbmUoREVGQVVMVF9BVFRSX0RBVEEpKTtcbiAgICB9XG4gICAgdGhpcy5fZGlydHlSb3dTZXJ2aWNlLm1hcmtSYW5nZURpcnR5KHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxUb3AsIHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxCb3R0b20pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENTSSBQcyBTUCBAICBTY3JvbGwgbGVmdCBQcyBjb2x1bW5zIChkZWZhdWx0ID0gMSkgKFNMKSBFQ01BLTQ4XG4gICAqXG4gICAqIE5vdGF0aW9uOiAoUG4pXG4gICAqIFJlcHJlc2VudGF0aW9uOiBDU0kgUG4gMDIvMDAgMDQvMDBcbiAgICogUGFyYW1ldGVyIGRlZmF1bHQgdmFsdWU6IFBuID0gMVxuICAgKiBTTCBjYXVzZXMgdGhlIGRhdGEgaW4gdGhlIHByZXNlbnRhdGlvbiBjb21wb25lbnQgdG8gYmUgbW92ZWQgYnkgbiBjaGFyYWN0ZXIgcG9zaXRpb25zXG4gICAqIGlmIHRoZSBsaW5lIG9yaWVudGF0aW9uIGlzIGhvcml6b250YWwsIG9yIGJ5IG4gbGluZSBwb3NpdGlvbnMgaWYgdGhlIGxpbmUgb3JpZW50YXRpb25cbiAgICogaXMgdmVydGljYWwsIHN1Y2ggdGhhdCB0aGUgZGF0YSBhcHBlYXIgdG8gbW92ZSB0byB0aGUgbGVmdDsgd2hlcmUgbiBlcXVhbHMgdGhlIHZhbHVlIG9mIFBuLlxuICAgKiBUaGUgYWN0aXZlIHByZXNlbnRhdGlvbiBwb3NpdGlvbiBpcyBub3QgYWZmZWN0ZWQgYnkgdGhpcyBjb250cm9sIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBTdXBwb3J0ZWQ6XG4gICAqICAgLSBhbHdheXMgbGVmdCBzaGlmdCAobm8gbGluZSBvcmllbnRhdGlvbiBzZXR0aW5nIHJlc3BlY3RlZClcbiAgICpcbiAgICogQHZ0OiAjWSBDU0kgU0wgIFwiU2Nyb2xsIExlZnRcIiBcIkNTSSBQcyBTUCBAXCIgXCJTY3JvbGwgdmlld3BvcnQgYFBzYCB0aW1lcyB0byB0aGUgbGVmdC5cIlxuICAgKiBTTCBtb3ZlcyB0aGUgY29udGVudCBvZiBhbGwgbGluZXMgd2l0aGluIHRoZSBzY3JvbGwgbWFyZ2lucyBgUHNgIHRpbWVzIHRvIHRoZSBsZWZ0LlxuICAgKiBTTCBoYXMgbm8gZWZmZWN0IG91dHNpZGUgb2YgdGhlIHNjcm9sbCBtYXJnaW5zLlxuICAgKi9cbiAgcHVibGljIHNjcm9sbExlZnQocGFyYW1zOiBJUGFyYW1zKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuX2FjdGl2ZUJ1ZmZlci55ID4gdGhpcy5fYWN0aXZlQnVmZmVyLnNjcm9sbEJvdHRvbSB8fCB0aGlzLl9hY3RpdmVCdWZmZXIueSA8IHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxUb3ApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBwYXJhbSA9IHBhcmFtcy5wYXJhbXNbMF0gfHwgMTtcbiAgICBmb3IgKGxldCB5ID0gdGhpcy5fYWN0aXZlQnVmZmVyLnNjcm9sbFRvcDsgeSA8PSB0aGlzLl9hY3RpdmVCdWZmZXIuc2Nyb2xsQm90dG9tOyArK3kpIHtcbiAgICAgIGNvbnN0IGxpbmUgPSB0aGlzLl9hY3RpdmVCdWZmZXIubGluZXMuZ2V0KHRoaXMuX2FjdGl2ZUJ1ZmZlci55YmFzZSArIHkpITtcbiAgICAgIGxpbmUuZGVsZXRlQ2VsbHMoMCwgcGFyYW0sIHRoaXMuX2FjdGl2ZUJ1ZmZlci5nZXROdWxsQ2VsbCh0aGlzLl9lcmFzZUF0dHJEYXRhKCkpLCB0aGlzLl9lcmFzZUF0dHJEYXRhKCkpO1xuICAgICAgbGluZS5pc1dyYXBwZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5fZGlydHlSb3dTZXJ2aWNlLm1hcmtSYW5nZURpcnR5KHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxUb3AsIHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxCb3R0b20pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENTSSBQcyBTUCBBICBTY3JvbGwgcmlnaHQgUHMgY29sdW1ucyAoZGVmYXVsdCA9IDEpIChTUikgRUNNQS00OFxuICAgKlxuICAgKiBOb3RhdGlvbjogKFBuKVxuICAgKiBSZXByZXNlbnRhdGlvbjogQ1NJIFBuIDAyLzAwIDA0LzAxXG4gICAqIFBhcmFtZXRlciBkZWZhdWx0IHZhbHVlOiBQbiA9IDFcbiAgICogU1IgY2F1c2VzIHRoZSBkYXRhIGluIHRoZSBwcmVzZW50YXRpb24gY29tcG9uZW50IHRvIGJlIG1vdmVkIGJ5IG4gY2hhcmFjdGVyIHBvc2l0aW9uc1xuICAgKiBpZiB0aGUgbGluZSBvcmllbnRhdGlvbiBpcyBob3Jpem9udGFsLCBvciBieSBuIGxpbmUgcG9zaXRpb25zIGlmIHRoZSBsaW5lIG9yaWVudGF0aW9uXG4gICAqIGlzIHZlcnRpY2FsLCBzdWNoIHRoYXQgdGhlIGRhdGEgYXBwZWFyIHRvIG1vdmUgdG8gdGhlIHJpZ2h0OyB3aGVyZSBuIGVxdWFscyB0aGUgdmFsdWUgb2YgUG4uXG4gICAqIFRoZSBhY3RpdmUgcHJlc2VudGF0aW9uIHBvc2l0aW9uIGlzIG5vdCBhZmZlY3RlZCBieSB0aGlzIGNvbnRyb2wgZnVuY3Rpb24uXG4gICAqXG4gICAqIFN1cHBvcnRlZDpcbiAgICogICAtIGFsd2F5cyByaWdodCBzaGlmdCAobm8gbGluZSBvcmllbnRhdGlvbiBzZXR0aW5nIHJlc3BlY3RlZClcbiAgICpcbiAgICogQHZ0OiAjWSBDU0kgU1IgIFwiU2Nyb2xsIFJpZ2h0XCIgIFwiQ1NJIFBzIFNQIEFcIiAgIFwiU2Nyb2xsIHZpZXdwb3J0IGBQc2AgdGltZXMgdG8gdGhlIHJpZ2h0LlwiXG4gICAqIFNMIG1vdmVzIHRoZSBjb250ZW50IG9mIGFsbCBsaW5lcyB3aXRoaW4gdGhlIHNjcm9sbCBtYXJnaW5zIGBQc2AgdGltZXMgdG8gdGhlIHJpZ2h0LlxuICAgKiBDb250ZW50IGF0IHRoZSByaWdodCBtYXJnaW4gaXMgbG9zdC5cbiAgICogU0wgaGFzIG5vIGVmZmVjdCBvdXRzaWRlIG9mIHRoZSBzY3JvbGwgbWFyZ2lucy5cbiAgICovXG4gIHB1YmxpYyBzY3JvbGxSaWdodChwYXJhbXM6IElQYXJhbXMpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5fYWN0aXZlQnVmZmVyLnkgPiB0aGlzLl9hY3RpdmVCdWZmZXIuc2Nyb2xsQm90dG9tIHx8IHRoaXMuX2FjdGl2ZUJ1ZmZlci55IDwgdGhpcy5fYWN0aXZlQnVmZmVyLnNjcm9sbFRvcCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHBhcmFtID0gcGFyYW1zLnBhcmFtc1swXSB8fCAxO1xuICAgIGZvciAobGV0IHkgPSB0aGlzLl9hY3RpdmVCdWZmZXIuc2Nyb2xsVG9wOyB5IDw9IHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxCb3R0b207ICsreSkge1xuICAgICAgY29uc3QgbGluZSA9IHRoaXMuX2FjdGl2ZUJ1ZmZlci5saW5lcy5nZXQodGhpcy5fYWN0aXZlQnVmZmVyLnliYXNlICsgeSkhO1xuICAgICAgbGluZS5pbnNlcnRDZWxscygwLCBwYXJhbSwgdGhpcy5fYWN0aXZlQnVmZmVyLmdldE51bGxDZWxsKHRoaXMuX2VyYXNlQXR0ckRhdGEoKSksIHRoaXMuX2VyYXNlQXR0ckRhdGEoKSk7XG4gICAgICBsaW5lLmlzV3JhcHBlZCA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLl9kaXJ0eVJvd1NlcnZpY2UubWFya1JhbmdlRGlydHkodGhpcy5fYWN0aXZlQnVmZmVyLnNjcm9sbFRvcCwgdGhpcy5fYWN0aXZlQnVmZmVyLnNjcm9sbEJvdHRvbSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQ1NJIFBtICcgfVxuICAgKiBJbnNlcnQgUHMgQ29sdW1uKHMpIChkZWZhdWx0ID0gMSkgKERFQ0lDKSwgVlQ0MjAgYW5kIHVwLlxuICAgKlxuICAgKiBAdnQ6ICNZIENTSSBERUNJQyBcIkluc2VydCBDb2x1bW5zXCIgIFwiQ1NJIFBzICcgfVwiICBcIkluc2VydCBgUHNgIGNvbHVtbnMgYXQgY3Vyc29yIHBvc2l0aW9uLlwiXG4gICAqIERFQ0lDIGluc2VydHMgYFBzYCB0aW1lcyBibGFuayBjb2x1bW5zIGF0IHRoZSBjdXJzb3IgcG9zaXRpb24gZm9yIGFsbCBsaW5lcyB3aXRoIHRoZSBzY3JvbGwgbWFyZ2lucyxcbiAgICogbW92aW5nIGNvbnRlbnQgdG8gdGhlIHJpZ2h0LiBDb250ZW50IGF0IHRoZSByaWdodCBtYXJnaW4gaXMgbG9zdC5cbiAgICogREVDSUMgaGFzIG5vIGVmZmVjdCBvdXRzaWRlIHRoZSBzY3JvbGxpbmcgbWFyZ2lucy5cbiAgICovXG4gIHB1YmxpYyBpbnNlcnRDb2x1bW5zKHBhcmFtczogSVBhcmFtcyk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLl9hY3RpdmVCdWZmZXIueSA+IHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxCb3R0b20gfHwgdGhpcy5fYWN0aXZlQnVmZmVyLnkgPCB0aGlzLl9hY3RpdmVCdWZmZXIuc2Nyb2xsVG9wKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgcGFyYW0gPSBwYXJhbXMucGFyYW1zWzBdIHx8IDE7XG4gICAgZm9yIChsZXQgeSA9IHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxUb3A7IHkgPD0gdGhpcy5fYWN0aXZlQnVmZmVyLnNjcm9sbEJvdHRvbTsgKyt5KSB7XG4gICAgICBjb25zdCBsaW5lID0gdGhpcy5fYWN0aXZlQnVmZmVyLmxpbmVzLmdldCh0aGlzLl9hY3RpdmVCdWZmZXIueWJhc2UgKyB5KSE7XG4gICAgICBsaW5lLmluc2VydENlbGxzKHRoaXMuX2FjdGl2ZUJ1ZmZlci54LCBwYXJhbSwgdGhpcy5fYWN0aXZlQnVmZmVyLmdldE51bGxDZWxsKHRoaXMuX2VyYXNlQXR0ckRhdGEoKSksIHRoaXMuX2VyYXNlQXR0ckRhdGEoKSk7XG4gICAgICBsaW5lLmlzV3JhcHBlZCA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLl9kaXJ0eVJvd1NlcnZpY2UubWFya1JhbmdlRGlydHkodGhpcy5fYWN0aXZlQnVmZmVyLnNjcm9sbFRvcCwgdGhpcy5fYWN0aXZlQnVmZmVyLnNjcm9sbEJvdHRvbSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQ1NJIFBtICcgflxuICAgKiBEZWxldGUgUHMgQ29sdW1uKHMpIChkZWZhdWx0ID0gMSkgKERFQ0RDKSwgVlQ0MjAgYW5kIHVwLlxuICAgKlxuICAgKiBAdnQ6ICNZIENTSSBERUNEQyBcIkRlbGV0ZSBDb2x1bW5zXCIgIFwiQ1NJIFBzICcgflwiICBcIkRlbGV0ZSBgUHNgIGNvbHVtbnMgYXQgY3Vyc29yIHBvc2l0aW9uLlwiXG4gICAqIERFQ0RDIGRlbGV0ZXMgYFBzYCB0aW1lcyBjb2x1bW5zIGF0IHRoZSBjdXJzb3IgcG9zaXRpb24gZm9yIGFsbCBsaW5lcyB3aXRoIHRoZSBzY3JvbGwgbWFyZ2lucyxcbiAgICogbW92aW5nIGNvbnRlbnQgdG8gdGhlIGxlZnQuIEJsYW5rIGNvbHVtbnMgYXJlIGFkZGVkIGF0IHRoZSByaWdodCBtYXJnaW4uXG4gICAqIERFQ0RDIGhhcyBubyBlZmZlY3Qgb3V0c2lkZSB0aGUgc2Nyb2xsaW5nIG1hcmdpbnMuXG4gICAqL1xuICBwdWJsaWMgZGVsZXRlQ29sdW1ucyhwYXJhbXM6IElQYXJhbXMpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5fYWN0aXZlQnVmZmVyLnkgPiB0aGlzLl9hY3RpdmVCdWZmZXIuc2Nyb2xsQm90dG9tIHx8IHRoaXMuX2FjdGl2ZUJ1ZmZlci55IDwgdGhpcy5fYWN0aXZlQnVmZmVyLnNjcm9sbFRvcCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHBhcmFtID0gcGFyYW1zLnBhcmFtc1swXSB8fCAxO1xuICAgIGZvciAobGV0IHkgPSB0aGlzLl9hY3RpdmVCdWZmZXIuc2Nyb2xsVG9wOyB5IDw9IHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxCb3R0b207ICsreSkge1xuICAgICAgY29uc3QgbGluZSA9IHRoaXMuX2FjdGl2ZUJ1ZmZlci5saW5lcy5nZXQodGhpcy5fYWN0aXZlQnVmZmVyLnliYXNlICsgeSkhO1xuICAgICAgbGluZS5kZWxldGVDZWxscyh0aGlzLl9hY3RpdmVCdWZmZXIueCwgcGFyYW0sIHRoaXMuX2FjdGl2ZUJ1ZmZlci5nZXROdWxsQ2VsbCh0aGlzLl9lcmFzZUF0dHJEYXRhKCkpLCB0aGlzLl9lcmFzZUF0dHJEYXRhKCkpO1xuICAgICAgbGluZS5pc1dyYXBwZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5fZGlydHlSb3dTZXJ2aWNlLm1hcmtSYW5nZURpcnR5KHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxUb3AsIHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxCb3R0b20pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENTSSBQcyBYXG4gICAqIEVyYXNlIFBzIENoYXJhY3RlcihzKSAoZGVmYXVsdCA9IDEpIChFQ0gpLlxuICAgKlxuICAgKiBAdnQ6ICNZIENTSSBFQ0ggICBcIkVyYXNlIENoYXJhY3RlclwiICAgXCJDU0kgUHMgWFwiICBcIkVyYXNlIGBQc2AgY2hhcmFjdGVycyBmcm9tIGN1cnJlbnQgY3Vyc29yIHBvc2l0aW9uIHRvIHRoZSByaWdodCAoZGVmYXVsdD0xKS5cIlxuICAgKiBFRCBlcmFzZXMgYFBzYCBjaGFyYWN0ZXJzIGZyb20gY3VycmVudCBjdXJzb3IgcG9zaXRpb24gdG8gdGhlIHJpZ2h0LlxuICAgKiBFRCB3b3JrcyBpbnNpZGUgb3Igb3V0c2lkZSB0aGUgc2Nyb2xsaW5nIG1hcmdpbnMuXG4gICAqL1xuICBwdWJsaWMgZXJhc2VDaGFycyhwYXJhbXM6IElQYXJhbXMpOiBib29sZWFuIHtcbiAgICB0aGlzLl9yZXN0cmljdEN1cnNvcigpO1xuICAgIGNvbnN0IGxpbmUgPSB0aGlzLl9hY3RpdmVCdWZmZXIubGluZXMuZ2V0KHRoaXMuX2FjdGl2ZUJ1ZmZlci55YmFzZSArIHRoaXMuX2FjdGl2ZUJ1ZmZlci55KTtcbiAgICBpZiAobGluZSkge1xuICAgICAgbGluZS5yZXBsYWNlQ2VsbHMoXG4gICAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci54LFxuICAgICAgICB0aGlzLl9hY3RpdmVCdWZmZXIueCArIChwYXJhbXMucGFyYW1zWzBdIHx8IDEpLFxuICAgICAgICB0aGlzLl9hY3RpdmVCdWZmZXIuZ2V0TnVsbENlbGwodGhpcy5fZXJhc2VBdHRyRGF0YSgpKSxcbiAgICAgICAgdGhpcy5fZXJhc2VBdHRyRGF0YSgpXG4gICAgICApO1xuICAgICAgdGhpcy5fZGlydHlSb3dTZXJ2aWNlLm1hcmtEaXJ0eSh0aGlzLl9hY3RpdmVCdWZmZXIueSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENTSSBQcyBiICBSZXBlYXQgdGhlIHByZWNlZGluZyBncmFwaGljIGNoYXJhY3RlciBQcyB0aW1lcyAoUkVQKS5cbiAgICogRnJvbSBFQ01BIDQ4IChAc2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9wdWJsaWNhdGlvbnMvZmlsZXMvRUNNQS1TVC9FY21hLTA0OC5wZGYpXG4gICAqICAgIE5vdGF0aW9uOiAoUG4pXG4gICAqICAgIFJlcHJlc2VudGF0aW9uOiBDU0kgUG4gMDYvMDJcbiAgICogICAgUGFyYW1ldGVyIGRlZmF1bHQgdmFsdWU6IFBuID0gMVxuICAgKiAgICBSRVAgaXMgdXNlZCB0byBpbmRpY2F0ZSB0aGF0IHRoZSBwcmVjZWRpbmcgY2hhcmFjdGVyIGluIHRoZSBkYXRhIHN0cmVhbSxcbiAgICogICAgaWYgaXQgaXMgYSBncmFwaGljIGNoYXJhY3RlciAocmVwcmVzZW50ZWQgYnkgb25lIG9yIG1vcmUgYml0IGNvbWJpbmF0aW9ucykgaW5jbHVkaW5nIFNQQUNFLFxuICAgKiAgICBpcyB0byBiZSByZXBlYXRlZCBuIHRpbWVzLCB3aGVyZSBuIGVxdWFscyB0aGUgdmFsdWUgb2YgUG4uXG4gICAqICAgIElmIHRoZSBjaGFyYWN0ZXIgcHJlY2VkaW5nIFJFUCBpcyBhIGNvbnRyb2wgZnVuY3Rpb24gb3IgcGFydCBvZiBhIGNvbnRyb2wgZnVuY3Rpb24sXG4gICAqICAgIHRoZSBlZmZlY3Qgb2YgUkVQIGlzIG5vdCBkZWZpbmVkIGJ5IHRoaXMgU3RhbmRhcmQuXG4gICAqXG4gICAqIFNpbmNlIHdlIHByb3BhZ2F0ZSB0aGUgdGVybWluYWwgYXMgeHRlcm0tMjU2Y29sb3Igd2UgaGF2ZSB0byBmb2xsb3cgeHRlcm0ncyBiZWhhdmlvcjpcbiAgICogICAgLSBmdWxsd2lkdGggKyBzdXJyb2dhdGUgY2hhcnMgYXJlIGlnbm9yZWRcbiAgICogICAgLSBmb3IgY29tYmluaW5nIGNoYXJzIG9ubHkgdGhlIGJhc2UgY2hhciBnZXRzIHJlcGVhdGVkXG4gICAqICAgIC0gdGV4dCBhdHRycyBhcmUgYXBwbGllZCBub3JtYWxseVxuICAgKiAgICAtIHdyYXAgYXJvdW5kIGlzIHJlc3BlY3RlZFxuICAgKiAgICAtIGFueSB2YWxpZCBzZXF1ZW5jZSByZXNldHMgdGhlIGNhcnJpZWQgZm9yd2FyZCBjaGFyXG4gICAqXG4gICAqIE5vdGU6IFRvIGdldCByZXNldCBvbiBhIHZhbGlkIHNlcXVlbmNlIHdvcmtpbmcgY29ycmVjdGx5IHdpdGhvdXQgbXVjaCBydW50aW1lIHBlbmFsdHksXG4gICAqIHRoZSBwcmVjZWRpbmcgY29kZXBvaW50IGlzIHN0b3JlZCBvbiB0aGUgcGFyc2VyIGluIGB0aGlzLnByaW50YCBhbmQgcmVzZXQgZHVyaW5nIGBwYXJzZXIucGFyc2VgLlxuICAgKlxuICAgKiBAdnQ6ICNZIENTSSBSRVAgICBcIlJlcGVhdCBQcmVjZWRpbmcgQ2hhcmFjdGVyXCIgICAgXCJDU0kgUHMgYlwiICBcIlJlcGVhdCBwcmVjZWRpbmcgY2hhcmFjdGVyIGBQc2AgdGltZXMgKGRlZmF1bHQ9MSkuXCJcbiAgICogUkVQIHJlcGVhdHMgdGhlIHByZXZpb3VzIGNoYXJhY3RlciBgUHNgIHRpbWVzIGFkdmFuY2luZyB0aGUgY3Vyc29yLCBhbHNvIHdyYXBwaW5nIGlmIERFQ0FXTSBpcyBzZXQuXG4gICAqIFJFUCBoYXMgbm8gZWZmZWN0IGlmIHRoZSBzZXF1ZW5jZSBkb2VzIG5vdCBmb2xsb3cgYSBwcmludGFibGUgQVNDSUkgY2hhcmFjdGVyXG4gICAqIChOT09QIGZvciBhbnkgb3RoZXIgc2VxdWVuY2UgaW4gYmV0d2VlbiBvciBOT04gQVNDSUkgY2hhcmFjdGVycykuXG4gICAqL1xuICBwdWJsaWMgcmVwZWF0UHJlY2VkaW5nQ2hhcmFjdGVyKHBhcmFtczogSVBhcmFtcyk6IGJvb2xlYW4ge1xuICAgIGlmICghdGhpcy5fcGFyc2VyLnByZWNlZGluZ0NvZGVwb2ludCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIGNhbGwgcHJpbnQgdG8gaW5zZXJ0IHRoZSBjaGFycyBhbmQgaGFuZGxlIGNvcnJlY3Qgd3JhcHBpbmdcbiAgICBjb25zdCBsZW5ndGggPSBwYXJhbXMucGFyYW1zWzBdIHx8IDE7XG4gICAgY29uc3QgZGF0YSA9IG5ldyBVaW50MzJBcnJheShsZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgIGRhdGFbaV0gPSB0aGlzLl9wYXJzZXIucHJlY2VkaW5nQ29kZXBvaW50O1xuICAgIH1cbiAgICB0aGlzLnByaW50KGRhdGEsIDAsIGRhdGEubGVuZ3RoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDU0kgUHMgYyAgU2VuZCBEZXZpY2UgQXR0cmlidXRlcyAoUHJpbWFyeSBEQSkuXG4gICAqICAgICBQcyA9IDAgIG9yIG9taXR0ZWQgLT4gcmVxdWVzdCBhdHRyaWJ1dGVzIGZyb20gdGVybWluYWwuICBUaGVcbiAgICogICAgIHJlc3BvbnNlIGRlcGVuZHMgb24gdGhlIGRlY1Rlcm1pbmFsSUQgcmVzb3VyY2Ugc2V0dGluZy5cbiAgICogICAgIC0+IENTSSA/IDEgOyAyIGMgIChgYFZUMTAwIHdpdGggQWR2YW5jZWQgVmlkZW8gT3B0aW9uJycpXG4gICAqICAgICAtPiBDU0kgPyAxIDsgMCBjICAoYGBWVDEwMSB3aXRoIE5vIE9wdGlvbnMnJylcbiAgICogICAgIC0+IENTSSA/IDYgYyAgKGBgVlQxMDInJylcbiAgICogICAgIC0+IENTSSA/IDYgMCA7IDEgOyAyIDsgNiA7IDggOyA5IDsgMSA1IDsgYyAgKGBgVlQyMjAnJylcbiAgICogICBUaGUgVlQxMDAtc3R5bGUgcmVzcG9uc2UgcGFyYW1ldGVycyBkbyBub3QgbWVhbiBhbnl0aGluZyBieVxuICAgKiAgIHRoZW1zZWx2ZXMuICBWVDIyMCBwYXJhbWV0ZXJzIGRvLCB0ZWxsaW5nIHRoZSBob3N0IHdoYXQgZmVhLVxuICAgKiAgIHR1cmVzIHRoZSB0ZXJtaW5hbCBzdXBwb3J0czpcbiAgICogICAgIFBzID0gMSAgLT4gMTMyLWNvbHVtbnMuXG4gICAqICAgICBQcyA9IDIgIC0+IFByaW50ZXIuXG4gICAqICAgICBQcyA9IDYgIC0+IFNlbGVjdGl2ZSBlcmFzZS5cbiAgICogICAgIFBzID0gOCAgLT4gVXNlci1kZWZpbmVkIGtleXMuXG4gICAqICAgICBQcyA9IDkgIC0+IE5hdGlvbmFsIHJlcGxhY2VtZW50IGNoYXJhY3RlciBzZXRzLlxuICAgKiAgICAgUHMgPSAxIDUgIC0+IFRlY2huaWNhbCBjaGFyYWN0ZXJzLlxuICAgKiAgICAgUHMgPSAyIDIgIC0+IEFOU0kgY29sb3IsIGUuZy4sIFZUNTI1LlxuICAgKiAgICAgUHMgPSAyIDkgIC0+IEFOU0kgdGV4dCBsb2NhdG9yIChpLmUuLCBERUMgTG9jYXRvciBtb2RlKS5cbiAgICpcbiAgICogQHZ0OiAjWSBDU0kgREExICAgXCJQcmltYXJ5IERldmljZSBBdHRyaWJ1dGVzXCIgICAgIFwiQ1NJIGNcIiAgXCJTZW5kIHByaW1hcnkgZGV2aWNlIGF0dHJpYnV0ZXMuXCJcbiAgICpcbiAgICpcbiAgICogVE9ETzogZml4IGFuZCBjbGVhbnVwIHJlc3BvbnNlXG4gICAqL1xuICBwdWJsaWMgc2VuZERldmljZUF0dHJpYnV0ZXNQcmltYXJ5KHBhcmFtczogSVBhcmFtcyk6IGJvb2xlYW4ge1xuICAgIGlmIChwYXJhbXMucGFyYW1zWzBdID4gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9pcygneHRlcm0nKSB8fCB0aGlzLl9pcygncnh2dC11bmljb2RlJykgfHwgdGhpcy5faXMoJ3NjcmVlbicpKSB7XG4gICAgICB0aGlzLl9jb3JlU2VydmljZS50cmlnZ2VyRGF0YUV2ZW50KEMwLkVTQyArICdbPzE7MmMnKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2lzKCdsaW51eCcpKSB7XG4gICAgICB0aGlzLl9jb3JlU2VydmljZS50cmlnZ2VyRGF0YUV2ZW50KEMwLkVTQyArICdbPzZjJyk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENTSSA+IFBzIGNcbiAgICogICBTZW5kIERldmljZSBBdHRyaWJ1dGVzIChTZWNvbmRhcnkgREEpLlxuICAgKiAgICAgUHMgPSAwICBvciBvbWl0dGVkIC0+IHJlcXVlc3QgdGhlIHRlcm1pbmFsJ3MgaWRlbnRpZmljYXRpb25cbiAgICogICAgIGNvZGUuICBUaGUgcmVzcG9uc2UgZGVwZW5kcyBvbiB0aGUgZGVjVGVybWluYWxJRCByZXNvdXJjZSBzZXQtXG4gICAqICAgICB0aW5nLiAgSXQgc2hvdWxkIGFwcGx5IG9ubHkgdG8gVlQyMjAgYW5kIHVwLCBidXQgeHRlcm0gZXh0ZW5kc1xuICAgKiAgICAgdGhpcyB0byBWVDEwMC5cbiAgICogICAgIC0+IENTSSAgPiBQcCA7IFB2IDsgUGMgY1xuICAgKiAgIHdoZXJlIFBwIGRlbm90ZXMgdGhlIHRlcm1pbmFsIHR5cGVcbiAgICogICAgIFBwID0gMCAgLT4gYGBWVDEwMCcnLlxuICAgKiAgICAgUHAgPSAxICAtPiBgYFZUMjIwJycuXG4gICAqICAgYW5kIFB2IGlzIHRoZSBmaXJtd2FyZSB2ZXJzaW9uIChmb3IgeHRlcm0sIHRoaXMgd2FzIG9yaWdpbmFsbHlcbiAgICogICB0aGUgWEZyZWU4NiBwYXRjaCBudW1iZXIsIHN0YXJ0aW5nIHdpdGggOTUpLiAgSW4gYSBERUMgdGVybWktXG4gICAqICAgbmFsLCBQYyBpbmRpY2F0ZXMgdGhlIFJPTSBjYXJ0cmlkZ2UgcmVnaXN0cmF0aW9uIG51bWJlciBhbmQgaXNcbiAgICogICBhbHdheXMgemVyby5cbiAgICogTW9yZSBpbmZvcm1hdGlvbjpcbiAgICogICB4dGVybS9jaGFycHJvYy5jIC0gbGluZSAyMDEyLCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICogICB2aW0gcmVzcG9uZHMgd2l0aCBeW1s/MGMgb3IgXltbPzFjIGFmdGVyIHRoZSB0ZXJtaW5hbCdzIHJlc3BvbnNlICg/KVxuICAgKlxuICAgKiBAdnQ6ICNZIENTSSBEQTIgICBcIlNlY29uZGFyeSBEZXZpY2UgQXR0cmlidXRlc1wiICAgXCJDU0kgPiBjXCIgXCJTZW5kIHByaW1hcnkgZGV2aWNlIGF0dHJpYnV0ZXMuXCJcbiAgICpcbiAgICpcbiAgICogVE9ETzogZml4IGFuZCBjbGVhbnVwIHJlc3BvbnNlXG4gICAqL1xuICBwdWJsaWMgc2VuZERldmljZUF0dHJpYnV0ZXNTZWNvbmRhcnkocGFyYW1zOiBJUGFyYW1zKTogYm9vbGVhbiB7XG4gICAgaWYgKHBhcmFtcy5wYXJhbXNbMF0gPiAwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8geHRlcm0gYW5kIHVyeHZ0XG4gICAgLy8gc2VlbSB0byBzcGl0IHRoaXNcbiAgICAvLyBvdXQgYXJvdW5kIH4zNzAgdGltZXMgKD8pLlxuICAgIGlmICh0aGlzLl9pcygneHRlcm0nKSkge1xuICAgICAgdGhpcy5fY29yZVNlcnZpY2UudHJpZ2dlckRhdGFFdmVudChDMC5FU0MgKyAnWz4wOzI3NjswYycpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5faXMoJ3J4dnQtdW5pY29kZScpKSB7XG4gICAgICB0aGlzLl9jb3JlU2VydmljZS50cmlnZ2VyRGF0YUV2ZW50KEMwLkVTQyArICdbPjg1Ozk1OzBjJyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9pcygnbGludXgnKSkge1xuICAgICAgLy8gbm90IHN1cHBvcnRlZCBieSBsaW51eCBjb25zb2xlLlxuICAgICAgLy8gbGludXggY29uc29sZSBlY2hvZXMgcGFyYW1ldGVycy5cbiAgICAgIHRoaXMuX2NvcmVTZXJ2aWNlLnRyaWdnZXJEYXRhRXZlbnQocGFyYW1zLnBhcmFtc1swXSArICdjJyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9pcygnc2NyZWVuJykpIHtcbiAgICAgIHRoaXMuX2NvcmVTZXJ2aWNlLnRyaWdnZXJEYXRhRXZlbnQoQzAuRVNDICsgJ1s+ODM7NDAwMDM7MGMnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogRXZhbHVhdGUgaWYgdGhlIGN1cnJlbnQgdGVybWluYWwgaXMgdGhlIGdpdmVuIGFyZ3VtZW50LlxuICAgKiBAcGFyYW0gdGVybSBUaGUgdGVybWluYWwgbmFtZSB0byBldmFsdWF0ZVxuICAgKi9cbiAgcHJpdmF0ZSBfaXModGVybTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICh0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLnRlcm1OYW1lICsgJycpLmluZGV4T2YodGVybSkgPT09IDA7XG4gIH1cblxuICAvKipcbiAgICogQ1NJIFBtIGggIFNldCBNb2RlIChTTSkuXG4gICAqICAgICBQcyA9IDIgIC0+IEtleWJvYXJkIEFjdGlvbiBNb2RlIChBTSkuXG4gICAqICAgICBQcyA9IDQgIC0+IEluc2VydCBNb2RlIChJUk0pLlxuICAgKiAgICAgUHMgPSAxIDIgIC0+IFNlbmQvcmVjZWl2ZSAoU1JNKS5cbiAgICogICAgIFBzID0gMiAwICAtPiBBdXRvbWF0aWMgTmV3bGluZSAoTE5NKS5cbiAgICpcbiAgICogQHZ0OiAjUFtPbmx5IElSTSBpcyBzdXBwb3J0ZWQuXSAgICBDU0kgU00gICAgXCJTZXQgTW9kZVwiICBcIkNTSSBQbSBoXCIgIFwiU2V0IHZhcmlvdXMgdGVybWluYWwgbW9kZXMuXCJcbiAgICogU3VwcG9ydGVkIHBhcmFtIHZhbHVlcyBieSBTTTpcbiAgICpcbiAgICogfCBQYXJhbSB8IEFjdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU3VwcG9ydCB8XG4gICAqIHwgLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0gfFxuICAgKiB8IDIgICAgIHwgS2V5Ym9hcmQgQWN0aW9uIE1vZGUgKEtBTSkuIEFsd2F5cyBvbi4gfCAjTiAgICAgIHxcbiAgICogfCA0ICAgICB8IEluc2VydCBNb2RlIChJUk0pLiAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgMTIgICAgfCBTZW5kL3JlY2VpdmUgKFNSTSkuIEFsd2F5cyBvZmYuICAgICAgICB8ICNOICAgICAgfFxuICAgKiB8IDIwICAgIHwgQXV0b21hdGljIE5ld2xpbmUgKExOTSkuIEFsd2F5cyBvZmYuICAgfCAjTiAgICAgIHxcbiAgICovXG4gIHB1YmxpYyBzZXRNb2RlKHBhcmFtczogSVBhcmFtcyk6IGJvb2xlYW4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzd2l0Y2ggKHBhcmFtcy5wYXJhbXNbaV0pIHtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHRoaXMuX2NvcmVTZXJ2aWNlLm1vZGVzLmluc2VydE1vZGUgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDIwOlxuICAgICAgICAgIC8vIHRoaXMuX3QuY29udmVydEVvbCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENTSSA/IFBtIGhcbiAgICogICBERUMgUHJpdmF0ZSBNb2RlIFNldCAoREVDU0VUKS5cbiAgICogICAgIFBzID0gMSAgLT4gQXBwbGljYXRpb24gQ3Vyc29yIEtleXMgKERFQ0NLTSkuXG4gICAqICAgICBQcyA9IDIgIC0+IERlc2lnbmF0ZSBVU0FTQ0lJIGZvciBjaGFyYWN0ZXIgc2V0cyBHMC1HM1xuICAgKiAgICAgKERFQ0FOTSksIGFuZCBzZXQgVlQxMDAgbW9kZS5cbiAgICogICAgIFBzID0gMyAgLT4gMTMyIENvbHVtbiBNb2RlIChERUNDT0xNKS5cbiAgICogICAgIFBzID0gNCAgLT4gU21vb3RoIChTbG93KSBTY3JvbGwgKERFQ1NDTE0pLlxuICAgKiAgICAgUHMgPSA1ICAtPiBSZXZlcnNlIFZpZGVvIChERUNTQ05NKS5cbiAgICogICAgIFBzID0gNiAgLT4gT3JpZ2luIE1vZGUgKERFQ09NKS5cbiAgICogICAgIFBzID0gNyAgLT4gV3JhcGFyb3VuZCBNb2RlIChERUNBV00pLlxuICAgKiAgICAgUHMgPSA4ICAtPiBBdXRvLXJlcGVhdCBLZXlzIChERUNBUk0pLlxuICAgKiAgICAgUHMgPSA5ICAtPiBTZW5kIE1vdXNlIFggJiBZIG9uIGJ1dHRvbiBwcmVzcy4gIFNlZSB0aGUgc2VjLVxuICAgKiAgICAgdGlvbiBNb3VzZSBUcmFja2luZy5cbiAgICogICAgIFBzID0gMSAwICAtPiBTaG93IHRvb2xiYXIgKHJ4dnQpLlxuICAgKiAgICAgUHMgPSAxIDIgIC0+IFN0YXJ0IEJsaW5raW5nIEN1cnNvciAoYXR0NjEwKS5cbiAgICogICAgIFBzID0gMSA4ICAtPiBQcmludCBmb3JtIGZlZWQgKERFQ1BGRikuXG4gICAqICAgICBQcyA9IDEgOSAgLT4gU2V0IHByaW50IGV4dGVudCB0byBmdWxsIHNjcmVlbiAoREVDUEVYKS5cbiAgICogICAgIFBzID0gMiA1ICAtPiBTaG93IEN1cnNvciAoREVDVENFTSkuXG4gICAqICAgICBQcyA9IDMgMCAgLT4gU2hvdyBzY3JvbGxiYXIgKHJ4dnQpLlxuICAgKiAgICAgUHMgPSAzIDUgIC0+IEVuYWJsZSBmb250LXNoaWZ0aW5nIGZ1bmN0aW9ucyAocnh2dCkuXG4gICAqICAgICBQcyA9IDMgOCAgLT4gRW50ZXIgVGVrdHJvbml4IE1vZGUgKERFQ1RFSykuXG4gICAqICAgICBQcyA9IDQgMCAgLT4gQWxsb3cgODAgLT4gMTMyIE1vZGUuXG4gICAqICAgICBQcyA9IDQgMSAgLT4gbW9yZSgxKSBmaXggKHNlZSBjdXJzZXMgcmVzb3VyY2UpLlxuICAgKiAgICAgUHMgPSA0IDIgIC0+IEVuYWJsZSBOYXRpb24gUmVwbGFjZW1lbnQgQ2hhcmFjdGVyIHNldHMgKERFQ04tXG4gICAqICAgICBSQ00pLlxuICAgKiAgICAgUHMgPSA0IDQgIC0+IFR1cm4gT24gTWFyZ2luIEJlbGwuXG4gICAqICAgICBQcyA9IDQgNSAgLT4gUmV2ZXJzZS13cmFwYXJvdW5kIE1vZGUuXG4gICAqICAgICBQcyA9IDQgNiAgLT4gU3RhcnQgTG9nZ2luZy4gIFRoaXMgaXMgbm9ybWFsbHkgZGlzYWJsZWQgYnkgYVxuICAgKiAgICAgY29tcGlsZS10aW1lIG9wdGlvbi5cbiAgICogICAgIFBzID0gNCA3ICAtPiBVc2UgQWx0ZXJuYXRlIFNjcmVlbiBCdWZmZXIuICAoVGhpcyBtYXkgYmUgZGlzLVxuICAgKiAgICAgYWJsZWQgYnkgdGhlIHRpdGVJbmhpYml0IHJlc291cmNlKS5cbiAgICogICAgIFBzID0gNiA2ICAtPiBBcHBsaWNhdGlvbiBrZXlwYWQgKERFQ05LTSkuXG4gICAqICAgICBQcyA9IDYgNyAgLT4gQmFja2Fycm93IGtleSBzZW5kcyBiYWNrc3BhY2UgKERFQ0JLTSkuXG4gICAqICAgICBQcyA9IDEgMCAwIDAgIC0+IFNlbmQgTW91c2UgWCAmIFkgb24gYnV0dG9uIHByZXNzIGFuZFxuICAgKiAgICAgcmVsZWFzZS4gIFNlZSB0aGUgc2VjdGlvbiBNb3VzZSBUcmFja2luZy5cbiAgICogICAgIFBzID0gMSAwIDAgMSAgLT4gVXNlIEhpbGl0ZSBNb3VzZSBUcmFja2luZy5cbiAgICogICAgIFBzID0gMSAwIDAgMiAgLT4gVXNlIENlbGwgTW90aW9uIE1vdXNlIFRyYWNraW5nLlxuICAgKiAgICAgUHMgPSAxIDAgMCAzICAtPiBVc2UgQWxsIE1vdGlvbiBNb3VzZSBUcmFja2luZy5cbiAgICogICAgIFBzID0gMSAwIDAgNCAgLT4gU2VuZCBGb2N1c0luL0ZvY3VzT3V0IGV2ZW50cy5cbiAgICogICAgIFBzID0gMSAwIDAgNSAgLT4gRW5hYmxlIEV4dGVuZGVkIE1vdXNlIE1vZGUuXG4gICAqICAgICBQcyA9IDEgMCAxIDAgIC0+IFNjcm9sbCB0byBib3R0b20gb24gdHR5IG91dHB1dCAocnh2dCkuXG4gICAqICAgICBQcyA9IDEgMCAxIDEgIC0+IFNjcm9sbCB0byBib3R0b20gb24ga2V5IHByZXNzIChyeHZ0KS5cbiAgICogICAgIFBzID0gMSAwIDMgNCAgLT4gSW50ZXJwcmV0IFwibWV0YVwiIGtleSwgc2V0cyBlaWdodGggYml0LlxuICAgKiAgICAgKGVuYWJsZXMgdGhlIGVpZ2h0Qml0SW5wdXQgcmVzb3VyY2UpLlxuICAgKiAgICAgUHMgPSAxIDAgMyA1ICAtPiBFbmFibGUgc3BlY2lhbCBtb2RpZmllcnMgZm9yIEFsdCBhbmQgTnVtLVxuICAgKiAgICAgTG9jayBrZXlzLiAgKFRoaXMgZW5hYmxlcyB0aGUgbnVtTG9jayByZXNvdXJjZSkuXG4gICAqICAgICBQcyA9IDEgMCAzIDYgIC0+IFNlbmQgRVNDICAgd2hlbiBNZXRhIG1vZGlmaWVzIGEga2V5LiAgKFRoaXNcbiAgICogICAgIGVuYWJsZXMgdGhlIG1ldGFTZW5kc0VzY2FwZSByZXNvdXJjZSkuXG4gICAqICAgICBQcyA9IDEgMCAzIDcgIC0+IFNlbmQgREVMIGZyb20gdGhlIGVkaXRpbmcta2V5cGFkIERlbGV0ZVxuICAgKiAgICAga2V5LlxuICAgKiAgICAgUHMgPSAxIDAgMyA5ICAtPiBTZW5kIEVTQyAgd2hlbiBBbHQgbW9kaWZpZXMgYSBrZXkuICAoVGhpc1xuICAgKiAgICAgZW5hYmxlcyB0aGUgYWx0U2VuZHNFc2NhcGUgcmVzb3VyY2UpLlxuICAgKiAgICAgUHMgPSAxIDAgNCAwICAtPiBLZWVwIHNlbGVjdGlvbiBldmVuIGlmIG5vdCBoaWdobGlnaHRlZC5cbiAgICogICAgIChUaGlzIGVuYWJsZXMgdGhlIGtlZXBTZWxlY3Rpb24gcmVzb3VyY2UpLlxuICAgKiAgICAgUHMgPSAxIDAgNCAxICAtPiBVc2UgdGhlIENMSVBCT0FSRCBzZWxlY3Rpb24uICAoVGhpcyBlbmFibGVzXG4gICAqICAgICB0aGUgc2VsZWN0VG9DbGlwYm9hcmQgcmVzb3VyY2UpLlxuICAgKiAgICAgUHMgPSAxIDAgNCAyICAtPiBFbmFibGUgVXJnZW5jeSB3aW5kb3cgbWFuYWdlciBoaW50IHdoZW5cbiAgICogICAgIENvbnRyb2wtRyBpcyByZWNlaXZlZC4gIChUaGlzIGVuYWJsZXMgdGhlIGJlbGxJc1VyZ2VudFxuICAgKiAgICAgcmVzb3VyY2UpLlxuICAgKiAgICAgUHMgPSAxIDAgNCAzICAtPiBFbmFibGUgcmFpc2luZyBvZiB0aGUgd2luZG93IHdoZW4gQ29udHJvbC1HXG4gICAqICAgICBpcyByZWNlaXZlZC4gIChlbmFibGVzIHRoZSBwb3BPbkJlbGwgcmVzb3VyY2UpLlxuICAgKiAgICAgUHMgPSAxIDAgNCA3ICAtPiBVc2UgQWx0ZXJuYXRlIFNjcmVlbiBCdWZmZXIuICAoVGhpcyBtYXkgYmVcbiAgICogICAgIGRpc2FibGVkIGJ5IHRoZSB0aXRlSW5oaWJpdCByZXNvdXJjZSkuXG4gICAqICAgICBQcyA9IDEgMCA0IDggIC0+IFNhdmUgY3Vyc29yIGFzIGluIERFQ1NDLiAgKFRoaXMgbWF5IGJlIGRpcy1cbiAgICogICAgIGFibGVkIGJ5IHRoZSB0aXRlSW5oaWJpdCByZXNvdXJjZSkuXG4gICAqICAgICBQcyA9IDEgMCA0IDkgIC0+IFNhdmUgY3Vyc29yIGFzIGluIERFQ1NDIGFuZCB1c2UgQWx0ZXJuYXRlXG4gICAqICAgICBTY3JlZW4gQnVmZmVyLCBjbGVhcmluZyBpdCBmaXJzdC4gIChUaGlzIG1heSBiZSBkaXNhYmxlZCBieVxuICAgKiAgICAgdGhlIHRpdGVJbmhpYml0IHJlc291cmNlKS4gIFRoaXMgY29tYmluZXMgdGhlIGVmZmVjdHMgb2YgdGhlIDFcbiAgICogICAgIDAgNCA3ICBhbmQgMSAwIDQgOCAgbW9kZXMuICBVc2UgdGhpcyB3aXRoIHRlcm1pbmZvLWJhc2VkXG4gICAqICAgICBhcHBsaWNhdGlvbnMgcmF0aGVyIHRoYW4gdGhlIDQgNyAgbW9kZS5cbiAgICogICAgIFBzID0gMSAwIDUgMCAgLT4gU2V0IHRlcm1pbmZvL3Rlcm1jYXAgZnVuY3Rpb24ta2V5IG1vZGUuXG4gICAqICAgICBQcyA9IDEgMCA1IDEgIC0+IFNldCBTdW4gZnVuY3Rpb24ta2V5IG1vZGUuXG4gICAqICAgICBQcyA9IDEgMCA1IDIgIC0+IFNldCBIUCBmdW5jdGlvbi1rZXkgbW9kZS5cbiAgICogICAgIFBzID0gMSAwIDUgMyAgLT4gU2V0IFNDTyBmdW5jdGlvbi1rZXkgbW9kZS5cbiAgICogICAgIFBzID0gMSAwIDYgMCAgLT4gU2V0IGxlZ2FjeSBrZXlib2FyZCBlbXVsYXRpb24gKFgxMVI2KS5cbiAgICogICAgIFBzID0gMSAwIDYgMSAgLT4gU2V0IFZUMjIwIGtleWJvYXJkIGVtdWxhdGlvbi5cbiAgICogICAgIFBzID0gMiAwIDAgNCAgLT4gU2V0IGJyYWNrZXRlZCBwYXN0ZSBtb2RlLlxuICAgKiBNb2RlczpcbiAgICogICBodHRwOiAqdnQxMDAubmV0L2RvY3MvdnQyMjAtcm0vY2hhcHRlcjQuaHRtbFxuICAgKlxuICAgKiBAdnQ6ICNQW1NlZSBiZWxvdyBmb3Igc3VwcG9ydGVkIG1vZGVzLl0gICAgQ1NJIERFQ1NFVCAgXCJERUMgUHJpdmF0ZSBTZXQgTW9kZVwiIFwiQ1NJID8gUG0gaFwiICBcIlNldCB2YXJpb3VzIHRlcm1pbmFsIGF0dHJpYnV0ZXMuXCJcbiAgICogU3VwcG9ydGVkIHBhcmFtIHZhbHVlcyBieSBERUNTRVQ6XG4gICAqXG4gICAqIHwgcGFyYW0gfCBBY3Rpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU3VwcG9ydCB8XG4gICAqIHwgLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS18XG4gICAqIHwgMSAgICAgfCBBcHBsaWNhdGlvbiBDdXJzb3IgS2V5cyAoREVDQ0tNKS4gICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgMiAgICAgfCBEZXNpZ25hdGUgVVMtQVNDSUkgZm9yIGNoYXJhY3RlciBzZXRzIEcwLUczIChERUNBTk0pLiAgIHwgI1kgICAgICB8XG4gICAqIHwgMyAgICAgfCAxMzIgQ29sdW1uIE1vZGUgKERFQ0NPTE0pLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgNiAgICAgfCBPcmlnaW4gTW9kZSAoREVDT00pLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgNyAgICAgfCBBdXRvLXdyYXAgTW9kZSAoREVDQVdNKS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgOCAgICAgfCBBdXRvLXJlcGVhdCBLZXlzIChERUNBUk0pLiBBbHdheXMgb24uICAgICAgICAgICAgICAgICAgIHwgI04gICAgICB8XG4gICAqIHwgOSAgICAgfCBYMTAgeHRlcm0gbW91c2UgcHJvdG9jb2wuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgMTIgICAgfCBTdGFydCBCbGlua2luZyBDdXJzb3IuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgMjUgICAgfCBTaG93IEN1cnNvciAoREVDVENFTSkuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgNDUgICAgfCBSZXZlcnNlIHdyYXAtYXJvdW5kLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgNDcgICAgfCBVc2UgQWx0ZXJuYXRlIFNjcmVlbiBCdWZmZXIuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgNjYgICAgfCBBcHBsaWNhdGlvbiBrZXlwYWQgKERFQ05LTSkuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgMTAwMCAgfCBYMTEgeHRlcm0gbW91c2UgcHJvdG9jb2wuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgMTAwMiAgfCBVc2UgQ2VsbCBNb3Rpb24gTW91c2UgVHJhY2tpbmcuICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgMTAwMyAgfCBVc2UgQWxsIE1vdGlvbiBNb3VzZSBUcmFja2luZy4gICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgMTAwNCAgfCBTZW5kIEZvY3VzSW4vRm9jdXNPdXQgZXZlbnRzICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgMTAwNSAgfCBFbmFibGUgVVRGLTggTW91c2UgTW9kZS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI04gICAgICB8XG4gICAqIHwgMTAwNiAgfCBFbmFibGUgU0dSIE1vdXNlIE1vZGUuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgMTAxNSAgfCBFbmFibGUgdXJ4dnQgTW91c2UgTW9kZS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI04gICAgICB8XG4gICAqIHwgMTA0NyAgfCBVc2UgQWx0ZXJuYXRlIFNjcmVlbiBCdWZmZXIuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgMTA0OCAgfCBTYXZlIGN1cnNvciBhcyBpbiBERUNTQy4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgMTA0OSAgfCBTYXZlIGN1cnNvciBhbmQgc3dpdGNoIHRvIGFsdGVybmF0ZSBidWZmZXIgY2xlYXJpbmcgaXQuIHwgI1BbRG9lcyBub3QgY2xlYXIgdGhlIGFsdGVybmF0ZSBidWZmZXIuXSB8XG4gICAqIHwgMjAwNCAgfCBTZXQgYnJhY2tldGVkIHBhc3RlIG1vZGUuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqXG4gICAqXG4gICAqIEZJWE1FOiBpbXBsZW1lbnQgREVDU0NOTSwgMTA0OSBzaG91bGQgY2xlYXIgYWx0YnVmZmVyXG4gICAqL1xuICBwdWJsaWMgc2V0TW9kZVByaXZhdGUocGFyYW1zOiBJUGFyYW1zKTogYm9vbGVhbiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHN3aXRjaCAocGFyYW1zLnBhcmFtc1tpXSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgdGhpcy5fY29yZVNlcnZpY2UuZGVjUHJpdmF0ZU1vZGVzLmFwcGxpY2F0aW9uQ3Vyc29yS2V5cyA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICB0aGlzLl9jaGFyc2V0U2VydmljZS5zZXRnQ2hhcnNldCgwLCBERUZBVUxUX0NIQVJTRVQpO1xuICAgICAgICAgIHRoaXMuX2NoYXJzZXRTZXJ2aWNlLnNldGdDaGFyc2V0KDEsIERFRkFVTFRfQ0hBUlNFVCk7XG4gICAgICAgICAgdGhpcy5fY2hhcnNldFNlcnZpY2Uuc2V0Z0NoYXJzZXQoMiwgREVGQVVMVF9DSEFSU0VUKTtcbiAgICAgICAgICB0aGlzLl9jaGFyc2V0U2VydmljZS5zZXRnQ2hhcnNldCgzLCBERUZBVUxUX0NIQVJTRVQpO1xuICAgICAgICAgIC8vIHNldCBWVDEwMCBtb2RlIGhlcmVcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIERFQ0NPTE0gLSAxMzIgY29sdW1uIG1vZGUuXG4gICAgICAgICAgICogVGhpcyBpcyBvbmx5IGFjdGl2ZSBpZiAnU2V0V2luTGluZXMnICgyNCkgaXMgZW5hYmxlZFxuICAgICAgICAgICAqIHRocm91Z2ggYG9wdGlvbnMud2luZG93c09wdGlvbnNgLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLndpbmRvd09wdGlvbnMuc2V0V2luTGluZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlclNlcnZpY2UucmVzaXplKDEzMiwgdGhpcy5fYnVmZmVyU2VydmljZS5yb3dzKTtcbiAgICAgICAgICAgIHRoaXMuX29uUmVxdWVzdFJlc2V0LmZpcmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgICB0aGlzLl9jb3JlU2VydmljZS5kZWNQcml2YXRlTW9kZXMub3JpZ2luID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLl9zZXRDdXJzb3IoMCwgMCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNzpcbiAgICAgICAgICB0aGlzLl9jb3JlU2VydmljZS5kZWNQcml2YXRlTW9kZXMud3JhcGFyb3VuZCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgLy8gdGhpcy5jdXJzb3JCbGluayA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgdGhpcy5fY29yZVNlcnZpY2UuZGVjUHJpdmF0ZU1vZGVzLnJldmVyc2VXcmFwYXJvdW5kID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA2NjpcbiAgICAgICAgICB0aGlzLl9sb2dTZXJ2aWNlLmRlYnVnKCdTZXJpYWwgcG9ydCByZXF1ZXN0ZWQgYXBwbGljYXRpb24ga2V5cGFkLicpO1xuICAgICAgICAgIHRoaXMuX2NvcmVTZXJ2aWNlLmRlY1ByaXZhdGVNb2Rlcy5hcHBsaWNhdGlvbktleXBhZCA9IHRydWU7XG4gICAgICAgICAgdGhpcy5fb25SZXF1ZXN0U3luY1Njcm9sbEJhci5maXJlKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgOTogLy8gWDEwIE1vdXNlXG4gICAgICAgICAgLy8gbm8gcmVsZWFzZSwgbm8gbW90aW9uLCBubyB3aGVlbCwgbm8gbW9kaWZpZXJzLlxuICAgICAgICAgIHRoaXMuX2NvcmVNb3VzZVNlcnZpY2UuYWN0aXZlUHJvdG9jb2wgPSAnWDEwJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMDAwOiAvLyB2dDIwMCBtb3VzZVxuICAgICAgICAgIC8vIG5vIG1vdGlvbi5cbiAgICAgICAgICB0aGlzLl9jb3JlTW91c2VTZXJ2aWNlLmFjdGl2ZVByb3RvY29sID0gJ1ZUMjAwJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMDAyOiAvLyBidXR0b24gZXZlbnQgbW91c2VcbiAgICAgICAgICB0aGlzLl9jb3JlTW91c2VTZXJ2aWNlLmFjdGl2ZVByb3RvY29sID0gJ0RSQUcnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEwMDM6IC8vIGFueSBldmVudCBtb3VzZVxuICAgICAgICAgIC8vIGFueSBldmVudCAtIHNlbmRzIG1vdGlvbiBldmVudHMsXG4gICAgICAgICAgLy8gZXZlbiBpZiB0aGVyZSBpcyBubyBidXR0b24gaGVsZCBkb3duLlxuICAgICAgICAgIHRoaXMuX2NvcmVNb3VzZVNlcnZpY2UuYWN0aXZlUHJvdG9jb2wgPSAnQU5ZJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMDA0OiAvLyBzZW5kIGZvY3VzaW4vZm9jdXNvdXQgZXZlbnRzXG4gICAgICAgICAgLy8gZm9jdXNpbjogXltbSVxuICAgICAgICAgIC8vIGZvY3Vzb3V0OiBeW1tPXG4gICAgICAgICAgdGhpcy5fY29yZVNlcnZpY2UuZGVjUHJpdmF0ZU1vZGVzLnNlbmRGb2N1cyA9IHRydWU7XG4gICAgICAgICAgdGhpcy5fb25SZXF1ZXN0U2VuZEZvY3VzLmZpcmUoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMDA1OiAvLyB1dGY4IGV4dCBtb2RlIG1vdXNlIC0gcmVtb3ZlZCBpbiAjMjUwN1xuICAgICAgICAgIHRoaXMuX2xvZ1NlcnZpY2UuZGVidWcoJ0RFQ1NFVCAxMDA1IG5vdCBzdXBwb3J0ZWQgKHNlZSAjMjUwNyknKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMDA2OiAvLyBzZ3IgZXh0IG1vZGUgbW91c2VcbiAgICAgICAgICB0aGlzLl9jb3JlTW91c2VTZXJ2aWNlLmFjdGl2ZUVuY29kaW5nID0gJ1NHUic7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTAxNTogLy8gdXJ4dnQgZXh0IG1vZGUgbW91c2UgLSByZW1vdmVkIGluICMyNTA3XG4gICAgICAgICAgdGhpcy5fbG9nU2VydmljZS5kZWJ1ZygnREVDU0VUIDEwMTUgbm90IHN1cHBvcnRlZCAoc2VlICMyNTA3KScpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI1OiAvLyBzaG93IGN1cnNvclxuICAgICAgICAgIHRoaXMuX2NvcmVTZXJ2aWNlLmlzQ3Vyc29ySGlkZGVuID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTA0ODogLy8gYWx0IHNjcmVlbiBjdXJzb3JcbiAgICAgICAgICB0aGlzLnNhdmVDdXJzb3IoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMDQ5OiAvLyBhbHQgc2NyZWVuIGJ1ZmZlciBjdXJzb3JcbiAgICAgICAgICB0aGlzLnNhdmVDdXJzb3IoKTtcbiAgICAgICAgLy8gRkFMTC1USFJPVUdIXG4gICAgICAgIGNhc2UgNDc6IC8vIGFsdCBzY3JlZW4gYnVmZmVyXG4gICAgICAgIGNhc2UgMTA0NzogLy8gYWx0IHNjcmVlbiBidWZmZXJcbiAgICAgICAgICB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlcnMuYWN0aXZhdGVBbHRCdWZmZXIodGhpcy5fZXJhc2VBdHRyRGF0YSgpKTtcbiAgICAgICAgICB0aGlzLl9jb3JlU2VydmljZS5pc0N1cnNvckluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLl9vblJlcXVlc3RSZWZyZXNoUm93cy5maXJlKDAsIHRoaXMuX2J1ZmZlclNlcnZpY2Uucm93cyAtIDEpO1xuICAgICAgICAgIHRoaXMuX29uUmVxdWVzdFN5bmNTY3JvbGxCYXIuZmlyZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDIwMDQ6IC8vIGJyYWNrZXRlZCBwYXN0ZSBtb2RlIChodHRwczovL2NpcncuaW4vYmxvZy9icmFja2V0ZWQtcGFzdGUpXG4gICAgICAgICAgdGhpcy5fY29yZVNlcnZpY2UuZGVjUHJpdmF0ZU1vZGVzLmJyYWNrZXRlZFBhc3RlTW9kZSA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cblxuICAvKipcbiAgICogQ1NJIFBtIGwgIFJlc2V0IE1vZGUgKFJNKS5cbiAgICogICAgIFBzID0gMiAgLT4gS2V5Ym9hcmQgQWN0aW9uIE1vZGUgKEFNKS5cbiAgICogICAgIFBzID0gNCAgLT4gUmVwbGFjZSBNb2RlIChJUk0pLlxuICAgKiAgICAgUHMgPSAxIDIgIC0+IFNlbmQvcmVjZWl2ZSAoU1JNKS5cbiAgICogICAgIFBzID0gMiAwICAtPiBOb3JtYWwgTGluZWZlZWQgKExOTSkuXG4gICAqXG4gICAqIEB2dDogI1BbT25seSBJUk0gaXMgc3VwcG9ydGVkLl0gICAgQ1NJIFJNICAgIFwiUmVzZXQgTW9kZVwiICBcIkNTSSBQbSBsXCIgIFwiU2V0IHZhcmlvdXMgdGVybWluYWwgYXR0cmlidXRlcy5cIlxuICAgKiBTdXBwb3J0ZWQgcGFyYW0gdmFsdWVzIGJ5IFJNOlxuICAgKlxuICAgKiB8IFBhcmFtIHwgQWN0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTdXBwb3J0IHxcbiAgICogfCAtLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLSB8XG4gICAqIHwgMiAgICAgfCBLZXlib2FyZCBBY3Rpb24gTW9kZSAoS0FNKS4gQWx3YXlzIG9uLiB8ICNOICAgICAgfFxuICAgKiB8IDQgICAgIHwgUmVwbGFjZSBNb2RlIChJUk0pLiAoZGVmYXVsdCkgICAgICAgICAgfCAjWSAgICAgIHxcbiAgICogfCAxMiAgICB8IFNlbmQvcmVjZWl2ZSAoU1JNKS4gQWx3YXlzIG9mZi4gICAgICAgIHwgI04gICAgICB8XG4gICAqIHwgMjAgICAgfCBOb3JtYWwgTGluZWZlZWQgKExOTSkuIEFsd2F5cyBvZmYuICAgICB8ICNOICAgICAgfFxuICAgKlxuICAgKlxuICAgKiBGSVhNRTogd2h5IGlzIExOTSBjb21tZW50ZWQgb3V0P1xuICAgKi9cbiAgcHVibGljIHJlc2V0TW9kZShwYXJhbXM6IElQYXJhbXMpOiBib29sZWFuIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkrKykge1xuICAgICAgc3dpdGNoIChwYXJhbXMucGFyYW1zW2ldKSB7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICB0aGlzLl9jb3JlU2VydmljZS5tb2Rlcy5pbnNlcnRNb2RlID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjA6XG4gICAgICAgICAgLy8gdGhpcy5fdC5jb252ZXJ0RW9sID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENTSSA/IFBtIGxcbiAgICogICBERUMgUHJpdmF0ZSBNb2RlIFJlc2V0IChERUNSU1QpLlxuICAgKiAgICAgUHMgPSAxICAtPiBOb3JtYWwgQ3Vyc29yIEtleXMgKERFQ0NLTSkuXG4gICAqICAgICBQcyA9IDIgIC0+IERlc2lnbmF0ZSBWVDUyIG1vZGUgKERFQ0FOTSkuXG4gICAqICAgICBQcyA9IDMgIC0+IDgwIENvbHVtbiBNb2RlIChERUNDT0xNKS5cbiAgICogICAgIFBzID0gNCAgLT4gSnVtcCAoRmFzdCkgU2Nyb2xsIChERUNTQ0xNKS5cbiAgICogICAgIFBzID0gNSAgLT4gTm9ybWFsIFZpZGVvIChERUNTQ05NKS5cbiAgICogICAgIFBzID0gNiAgLT4gTm9ybWFsIEN1cnNvciBNb2RlIChERUNPTSkuXG4gICAqICAgICBQcyA9IDcgIC0+IE5vIFdyYXBhcm91bmQgTW9kZSAoREVDQVdNKS5cbiAgICogICAgIFBzID0gOCAgLT4gTm8gQXV0by1yZXBlYXQgS2V5cyAoREVDQVJNKS5cbiAgICogICAgIFBzID0gOSAgLT4gRG9uJ3Qgc2VuZCBNb3VzZSBYICYgWSBvbiBidXR0b24gcHJlc3MuXG4gICAqICAgICBQcyA9IDEgMCAgLT4gSGlkZSB0b29sYmFyIChyeHZ0KS5cbiAgICogICAgIFBzID0gMSAyICAtPiBTdG9wIEJsaW5raW5nIEN1cnNvciAoYXR0NjEwKS5cbiAgICogICAgIFBzID0gMSA4ICAtPiBEb24ndCBwcmludCBmb3JtIGZlZWQgKERFQ1BGRikuXG4gICAqICAgICBQcyA9IDEgOSAgLT4gTGltaXQgcHJpbnQgdG8gc2Nyb2xsaW5nIHJlZ2lvbiAoREVDUEVYKS5cbiAgICogICAgIFBzID0gMiA1ICAtPiBIaWRlIEN1cnNvciAoREVDVENFTSkuXG4gICAqICAgICBQcyA9IDMgMCAgLT4gRG9uJ3Qgc2hvdyBzY3JvbGxiYXIgKHJ4dnQpLlxuICAgKiAgICAgUHMgPSAzIDUgIC0+IERpc2FibGUgZm9udC1zaGlmdGluZyBmdW5jdGlvbnMgKHJ4dnQpLlxuICAgKiAgICAgUHMgPSA0IDAgIC0+IERpc2FsbG93IDgwIC0+IDEzMiBNb2RlLlxuICAgKiAgICAgUHMgPSA0IDEgIC0+IE5vIG1vcmUoMSkgZml4IChzZWUgY3Vyc2VzIHJlc291cmNlKS5cbiAgICogICAgIFBzID0gNCAyICAtPiBEaXNhYmxlIE5hdGlvbiBSZXBsYWNlbWVudCBDaGFyYWN0ZXIgc2V0cyAoREVDLVxuICAgKiAgICAgTlJDTSkuXG4gICAqICAgICBQcyA9IDQgNCAgLT4gVHVybiBPZmYgTWFyZ2luIEJlbGwuXG4gICAqICAgICBQcyA9IDQgNSAgLT4gTm8gUmV2ZXJzZS13cmFwYXJvdW5kIE1vZGUuXG4gICAqICAgICBQcyA9IDQgNiAgLT4gU3RvcCBMb2dnaW5nLiAgKFRoaXMgaXMgbm9ybWFsbHkgZGlzYWJsZWQgYnkgYVxuICAgKiAgICAgY29tcGlsZS10aW1lIG9wdGlvbikuXG4gICAqICAgICBQcyA9IDQgNyAgLT4gVXNlIE5vcm1hbCBTY3JlZW4gQnVmZmVyLlxuICAgKiAgICAgUHMgPSA2IDYgIC0+IE51bWVyaWMga2V5cGFkIChERUNOS00pLlxuICAgKiAgICAgUHMgPSA2IDcgIC0+IEJhY2thcnJvdyBrZXkgc2VuZHMgZGVsZXRlIChERUNCS00pLlxuICAgKiAgICAgUHMgPSAxIDAgMCAwICAtPiBEb24ndCBzZW5kIE1vdXNlIFggJiBZIG9uIGJ1dHRvbiBwcmVzcyBhbmRcbiAgICogICAgIHJlbGVhc2UuICBTZWUgdGhlIHNlY3Rpb24gTW91c2UgVHJhY2tpbmcuXG4gICAqICAgICBQcyA9IDEgMCAwIDEgIC0+IERvbid0IHVzZSBIaWxpdGUgTW91c2UgVHJhY2tpbmcuXG4gICAqICAgICBQcyA9IDEgMCAwIDIgIC0+IERvbid0IHVzZSBDZWxsIE1vdGlvbiBNb3VzZSBUcmFja2luZy5cbiAgICogICAgIFBzID0gMSAwIDAgMyAgLT4gRG9uJ3QgdXNlIEFsbCBNb3Rpb24gTW91c2UgVHJhY2tpbmcuXG4gICAqICAgICBQcyA9IDEgMCAwIDQgIC0+IERvbid0IHNlbmQgRm9jdXNJbi9Gb2N1c091dCBldmVudHMuXG4gICAqICAgICBQcyA9IDEgMCAwIDUgIC0+IERpc2FibGUgRXh0ZW5kZWQgTW91c2UgTW9kZS5cbiAgICogICAgIFBzID0gMSAwIDEgMCAgLT4gRG9uJ3Qgc2Nyb2xsIHRvIGJvdHRvbSBvbiB0dHkgb3V0cHV0XG4gICAqICAgICAocnh2dCkuXG4gICAqICAgICBQcyA9IDEgMCAxIDEgIC0+IERvbid0IHNjcm9sbCB0byBib3R0b20gb24ga2V5IHByZXNzIChyeHZ0KS5cbiAgICogICAgIFBzID0gMSAwIDMgNCAgLT4gRG9uJ3QgaW50ZXJwcmV0IFwibWV0YVwiIGtleS4gIChUaGlzIGRpc2FibGVzXG4gICAqICAgICB0aGUgZWlnaHRCaXRJbnB1dCByZXNvdXJjZSkuXG4gICAqICAgICBQcyA9IDEgMCAzIDUgIC0+IERpc2FibGUgc3BlY2lhbCBtb2RpZmllcnMgZm9yIEFsdCBhbmQgTnVtLVxuICAgKiAgICAgTG9jayBrZXlzLiAgKFRoaXMgZGlzYWJsZXMgdGhlIG51bUxvY2sgcmVzb3VyY2UpLlxuICAgKiAgICAgUHMgPSAxIDAgMyA2ICAtPiBEb24ndCBzZW5kIEVTQyAgd2hlbiBNZXRhIG1vZGlmaWVzIGEga2V5LlxuICAgKiAgICAgKFRoaXMgZGlzYWJsZXMgdGhlIG1ldGFTZW5kc0VzY2FwZSByZXNvdXJjZSkuXG4gICAqICAgICBQcyA9IDEgMCAzIDcgIC0+IFNlbmQgVlQyMjAgUmVtb3ZlIGZyb20gdGhlIGVkaXRpbmcta2V5cGFkXG4gICAqICAgICBEZWxldGUga2V5LlxuICAgKiAgICAgUHMgPSAxIDAgMyA5ICAtPiBEb24ndCBzZW5kIEVTQyAgd2hlbiBBbHQgbW9kaWZpZXMgYSBrZXkuXG4gICAqICAgICAoVGhpcyBkaXNhYmxlcyB0aGUgYWx0U2VuZHNFc2NhcGUgcmVzb3VyY2UpLlxuICAgKiAgICAgUHMgPSAxIDAgNCAwICAtPiBEbyBub3Qga2VlcCBzZWxlY3Rpb24gd2hlbiBub3QgaGlnaGxpZ2h0ZWQuXG4gICAqICAgICAoVGhpcyBkaXNhYmxlcyB0aGUga2VlcFNlbGVjdGlvbiByZXNvdXJjZSkuXG4gICAqICAgICBQcyA9IDEgMCA0IDEgIC0+IFVzZSB0aGUgUFJJTUFSWSBzZWxlY3Rpb24uICAoVGhpcyBkaXNhYmxlc1xuICAgKiAgICAgdGhlIHNlbGVjdFRvQ2xpcGJvYXJkIHJlc291cmNlKS5cbiAgICogICAgIFBzID0gMSAwIDQgMiAgLT4gRGlzYWJsZSBVcmdlbmN5IHdpbmRvdyBtYW5hZ2VyIGhpbnQgd2hlblxuICAgKiAgICAgQ29udHJvbC1HIGlzIHJlY2VpdmVkLiAgKFRoaXMgZGlzYWJsZXMgdGhlIGJlbGxJc1VyZ2VudFxuICAgKiAgICAgcmVzb3VyY2UpLlxuICAgKiAgICAgUHMgPSAxIDAgNCAzICAtPiBEaXNhYmxlIHJhaXNpbmcgb2YgdGhlIHdpbmRvdyB3aGVuIENvbnRyb2wtXG4gICAqICAgICBHIGlzIHJlY2VpdmVkLiAgKFRoaXMgZGlzYWJsZXMgdGhlIHBvcE9uQmVsbCByZXNvdXJjZSkuXG4gICAqICAgICBQcyA9IDEgMCA0IDcgIC0+IFVzZSBOb3JtYWwgU2NyZWVuIEJ1ZmZlciwgY2xlYXJpbmcgc2NyZWVuXG4gICAqICAgICBmaXJzdCBpZiBpbiB0aGUgQWx0ZXJuYXRlIFNjcmVlbi4gIChUaGlzIG1heSBiZSBkaXNhYmxlZCBieVxuICAgKiAgICAgdGhlIHRpdGVJbmhpYml0IHJlc291cmNlKS5cbiAgICogICAgIFBzID0gMSAwIDQgOCAgLT4gUmVzdG9yZSBjdXJzb3IgYXMgaW4gREVDUkMuICAoVGhpcyBtYXkgYmVcbiAgICogICAgIGRpc2FibGVkIGJ5IHRoZSB0aXRlSW5oaWJpdCByZXNvdXJjZSkuXG4gICAqICAgICBQcyA9IDEgMCA0IDkgIC0+IFVzZSBOb3JtYWwgU2NyZWVuIEJ1ZmZlciBhbmQgcmVzdG9yZSBjdXJzb3JcbiAgICogICAgIGFzIGluIERFQ1JDLiAgKFRoaXMgbWF5IGJlIGRpc2FibGVkIGJ5IHRoZSB0aXRlSW5oaWJpdFxuICAgKiAgICAgcmVzb3VyY2UpLiAgVGhpcyBjb21iaW5lcyB0aGUgZWZmZWN0cyBvZiB0aGUgMSAwIDQgNyAgYW5kIDEgMFxuICAgKiAgICAgNCA4ICBtb2Rlcy4gIFVzZSB0aGlzIHdpdGggdGVybWluZm8tYmFzZWQgYXBwbGljYXRpb25zIHJhdGhlclxuICAgKiAgICAgdGhhbiB0aGUgNCA3ICBtb2RlLlxuICAgKiAgICAgUHMgPSAxIDAgNSAwICAtPiBSZXNldCB0ZXJtaW5mby90ZXJtY2FwIGZ1bmN0aW9uLWtleSBtb2RlLlxuICAgKiAgICAgUHMgPSAxIDAgNSAxICAtPiBSZXNldCBTdW4gZnVuY3Rpb24ta2V5IG1vZGUuXG4gICAqICAgICBQcyA9IDEgMCA1IDIgIC0+IFJlc2V0IEhQIGZ1bmN0aW9uLWtleSBtb2RlLlxuICAgKiAgICAgUHMgPSAxIDAgNSAzICAtPiBSZXNldCBTQ08gZnVuY3Rpb24ta2V5IG1vZGUuXG4gICAqICAgICBQcyA9IDEgMCA2IDAgIC0+IFJlc2V0IGxlZ2FjeSBrZXlib2FyZCBlbXVsYXRpb24gKFgxMVI2KS5cbiAgICogICAgIFBzID0gMSAwIDYgMSAgLT4gUmVzZXQga2V5Ym9hcmQgZW11bGF0aW9uIHRvIFN1bi9QQyBzdHlsZS5cbiAgICogICAgIFBzID0gMiAwIDAgNCAgLT4gUmVzZXQgYnJhY2tldGVkIHBhc3RlIG1vZGUuXG4gICAqXG4gICAqIEB2dDogI1BbU2VlIGJlbG93IGZvciBzdXBwb3J0ZWQgbW9kZXMuXSAgICBDU0kgREVDUlNUICBcIkRFQyBQcml2YXRlIFJlc2V0IE1vZGVcIiBcIkNTSSA/IFBtIGxcIiAgXCJSZXNldCB2YXJpb3VzIHRlcm1pbmFsIGF0dHJpYnV0ZXMuXCJcbiAgICogU3VwcG9ydGVkIHBhcmFtIHZhbHVlcyBieSBERUNSU1Q6XG4gICAqXG4gICAqIHwgcGFyYW0gfCBBY3Rpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU3VwcG9ydCB8XG4gICAqIHwgLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLSB8XG4gICAqIHwgMSAgICAgfCBOb3JtYWwgQ3Vyc29yIEtleXMgKERFQ0NLTSkuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgMiAgICAgfCBEZXNpZ25hdGUgVlQ1MiBtb2RlIChERUNBTk0pLiAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI04gICAgICB8XG4gICAqIHwgMyAgICAgfCA4MCBDb2x1bW4gTW9kZSAoREVDQ09MTSkuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI0JbU3dpdGNoZXMgdG8gb2xkIGNvbHVtbiB3aWR0aCBpbnN0ZWFkIG9mIDgwLl0gfFxuICAgKiB8IDYgICAgIHwgTm9ybWFsIEN1cnNvciBNb2RlIChERUNPTSkuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDcgICAgIHwgTm8gV3JhcGFyb3VuZCBNb2RlIChERUNBV00pLiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDggICAgIHwgTm8gQXV0by1yZXBlYXQgS2V5cyAoREVDQVJNKS4gICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNOICAgICAgfFxuICAgKiB8IDkgICAgIHwgRG9uJ3Qgc2VuZCBNb3VzZSBYICYgWSBvbiBidXR0b24gcHJlc3MuICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDEyICAgIHwgU3RvcCBCbGlua2luZyBDdXJzb3IuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDI1ICAgIHwgSGlkZSBDdXJzb3IgKERFQ1RDRU0pLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDQ1ICAgIHwgTm8gcmV2ZXJzZSB3cmFwLWFyb3VuZC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDQ3ICAgIHwgVXNlIE5vcm1hbCBTY3JlZW4gQnVmZmVyLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDY2ICAgIHwgTnVtZXJpYyBrZXlwYWQgKERFQ05LTSkuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDEwMDAgIHwgRG9uJ3Qgc2VuZCBNb3VzZSByZXBvcnRzLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDEwMDIgIHwgRG9uJ3QgdXNlIENlbGwgTW90aW9uIE1vdXNlIFRyYWNraW5nLiAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDEwMDMgIHwgRG9uJ3QgdXNlIEFsbCBNb3Rpb24gTW91c2UgVHJhY2tpbmcuICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDEwMDQgIHwgRG9uJ3Qgc2VuZCBGb2N1c0luL0ZvY3VzT3V0IGV2ZW50cy4gICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDEwMDUgIHwgRGlzYWJsZSBVVEYtOCBNb3VzZSBNb2RlLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNOICAgICAgfFxuICAgKiB8IDEwMDYgIHwgRGlzYWJsZSBTR1IgTW91c2UgTW9kZS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDEwMTUgIHwgRGlzYWJsZSB1cnh2dCBNb3VzZSBNb2RlLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNOICAgICAgfFxuICAgKiB8IDEwNDcgIHwgVXNlIE5vcm1hbCBTY3JlZW4gQnVmZmVyIChjbGVhcmluZyBzY3JlZW4gaWYgaW4gYWx0KS4gICB8ICNZICAgICAgfFxuICAgKiB8IDEwNDggIHwgUmVzdG9yZSBjdXJzb3IgYXMgaW4gREVDUkMuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDEwNDkgIHwgVXNlIE5vcm1hbCBTY3JlZW4gQnVmZmVyIGFuZCByZXN0b3JlIGN1cnNvci4gICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDIwMDQgIHwgUmVzZXQgYnJhY2tldGVkIHBhc3RlIG1vZGUuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKlxuICAgKlxuICAgKiBGSVhNRTogREVDQ09MTSBpcyBjdXJyZW50bHkgYnJva2VuIChhbHJlYWR5IGZpeGVkIGluIHdpbmRvdyBvcHRpb25zIFBSKVxuICAgKi9cbiAgcHVibGljIHJlc2V0TW9kZVByaXZhdGUocGFyYW1zOiBJUGFyYW1zKTogYm9vbGVhbiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHN3aXRjaCAocGFyYW1zLnBhcmFtc1tpXSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgdGhpcy5fY29yZVNlcnZpY2UuZGVjUHJpdmF0ZU1vZGVzLmFwcGxpY2F0aW9uQ3Vyc29yS2V5cyA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogREVDQ09MTSAtIDgwIGNvbHVtbiBtb2RlLlxuICAgICAgICAgICAqIFRoaXMgaXMgb25seSBhY3RpdmUgaWYgJ1NldFdpbkxpbmVzJyAoMjQpIGlzIGVuYWJsZWRcbiAgICAgICAgICAgKiB0aHJvdWdoIGBvcHRpb25zLndpbmRvd3NPcHRpb25zYC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBpZiAodGhpcy5fb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy53aW5kb3dPcHRpb25zLnNldFdpbkxpbmVzKSB7XG4gICAgICAgICAgICB0aGlzLl9idWZmZXJTZXJ2aWNlLnJlc2l6ZSg4MCwgdGhpcy5fYnVmZmVyU2VydmljZS5yb3dzKTtcbiAgICAgICAgICAgIHRoaXMuX29uUmVxdWVzdFJlc2V0LmZpcmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgICB0aGlzLl9jb3JlU2VydmljZS5kZWNQcml2YXRlTW9kZXMub3JpZ2luID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5fc2V0Q3Vyc29yKDAsIDApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgdGhpcy5fY29yZVNlcnZpY2UuZGVjUHJpdmF0ZU1vZGVzLndyYXBhcm91bmQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAvLyB0aGlzLmN1cnNvckJsaW5rID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgdGhpcy5fY29yZVNlcnZpY2UuZGVjUHJpdmF0ZU1vZGVzLnJldmVyc2VXcmFwYXJvdW5kID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNjY6XG4gICAgICAgICAgdGhpcy5fbG9nU2VydmljZS5kZWJ1ZygnU3dpdGNoaW5nIGJhY2sgdG8gbm9ybWFsIGtleXBhZC4nKTtcbiAgICAgICAgICB0aGlzLl9jb3JlU2VydmljZS5kZWNQcml2YXRlTW9kZXMuYXBwbGljYXRpb25LZXlwYWQgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLl9vblJlcXVlc3RTeW5jU2Nyb2xsQmFyLmZpcmUoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA5OiAvLyBYMTAgTW91c2VcbiAgICAgICAgY2FzZSAxMDAwOiAvLyB2dDIwMCBtb3VzZVxuICAgICAgICBjYXNlIDEwMDI6IC8vIGJ1dHRvbiBldmVudCBtb3VzZVxuICAgICAgICBjYXNlIDEwMDM6IC8vIGFueSBldmVudCBtb3VzZVxuICAgICAgICAgIHRoaXMuX2NvcmVNb3VzZVNlcnZpY2UuYWN0aXZlUHJvdG9jb2wgPSAnTk9ORSc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTAwNDogLy8gc2VuZCBmb2N1c2luL2ZvY3Vzb3V0IGV2ZW50c1xuICAgICAgICAgIHRoaXMuX2NvcmVTZXJ2aWNlLmRlY1ByaXZhdGVNb2Rlcy5zZW5kRm9jdXMgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMDA1OiAvLyB1dGY4IGV4dCBtb2RlIG1vdXNlIC0gcmVtb3ZlZCBpbiAjMjUwN1xuICAgICAgICAgIHRoaXMuX2xvZ1NlcnZpY2UuZGVidWcoJ0RFQ1JTVCAxMDA1IG5vdCBzdXBwb3J0ZWQgKHNlZSAjMjUwNyknKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMDA2OiAvLyBzZ3IgZXh0IG1vZGUgbW91c2VcbiAgICAgICAgICB0aGlzLl9jb3JlTW91c2VTZXJ2aWNlLmFjdGl2ZUVuY29kaW5nID0gJ0RFRkFVTFQnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEwMTU6IC8vIHVyeHZ0IGV4dCBtb2RlIG1vdXNlIC0gcmVtb3ZlZCBpbiAjMjUwN1xuICAgICAgICAgIHRoaXMuX2xvZ1NlcnZpY2UuZGVidWcoJ0RFQ1JTVCAxMDE1IG5vdCBzdXBwb3J0ZWQgKHNlZSAjMjUwNyknKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyNTogLy8gaGlkZSBjdXJzb3JcbiAgICAgICAgICB0aGlzLl9jb3JlU2VydmljZS5pc0N1cnNvckhpZGRlbiA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTA0ODogLy8gYWx0IHNjcmVlbiBjdXJzb3JcbiAgICAgICAgICB0aGlzLnJlc3RvcmVDdXJzb3IoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMDQ5OiAvLyBhbHQgc2NyZWVuIGJ1ZmZlciBjdXJzb3JcbiAgICAgICAgLy8gRkFMTC1USFJPVUdIXG4gICAgICAgIGNhc2UgNDc6IC8vIG5vcm1hbCBzY3JlZW4gYnVmZmVyXG4gICAgICAgIGNhc2UgMTA0NzogLy8gbm9ybWFsIHNjcmVlbiBidWZmZXIgLSBjbGVhcmluZyBpdCBmaXJzdFxuICAgICAgICAgIC8vIEVuc3VyZSB0aGUgc2VsZWN0aW9uIG1hbmFnZXIgaGFzIHRoZSBjb3JyZWN0IGJ1ZmZlclxuICAgICAgICAgIHRoaXMuX2J1ZmZlclNlcnZpY2UuYnVmZmVycy5hY3RpdmF0ZU5vcm1hbEJ1ZmZlcigpO1xuICAgICAgICAgIGlmIChwYXJhbXMucGFyYW1zW2ldID09PSAxMDQ5KSB7XG4gICAgICAgICAgICB0aGlzLnJlc3RvcmVDdXJzb3IoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5fY29yZVNlcnZpY2UuaXNDdXJzb3JJbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgdGhpcy5fb25SZXF1ZXN0UmVmcmVzaFJvd3MuZmlyZSgwLCB0aGlzLl9idWZmZXJTZXJ2aWNlLnJvd3MgLSAxKTtcbiAgICAgICAgICB0aGlzLl9vblJlcXVlc3RTeW5jU2Nyb2xsQmFyLmZpcmUoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyMDA0OiAvLyBicmFja2V0ZWQgcGFzdGUgbW9kZSAoaHR0cHM6Ly9jaXJ3LmluL2Jsb2cvYnJhY2tldGVkLXBhc3RlKVxuICAgICAgICAgIHRoaXMuX2NvcmVTZXJ2aWNlLmRlY1ByaXZhdGVNb2Rlcy5icmFja2V0ZWRQYXN0ZU1vZGUgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIHRvIHdyaXRlIGNvbG9yIGluZm9ybWF0aW9uIHBhY2tlZCB3aXRoIGNvbG9yIG1vZGUuXG4gICAqL1xuICBwcml2YXRlIF91cGRhdGVBdHRyQ29sb3IoY29sb3I6IG51bWJlciwgbW9kZTogbnVtYmVyLCBjMTogbnVtYmVyLCBjMjogbnVtYmVyLCBjMzogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAobW9kZSA9PT0gMikge1xuICAgICAgY29sb3IgfD0gQXR0cmlidXRlcy5DTV9SR0I7XG4gICAgICBjb2xvciAmPSB+QXR0cmlidXRlcy5SR0JfTUFTSztcbiAgICAgIGNvbG9yIHw9IEF0dHJpYnV0ZURhdGEuZnJvbUNvbG9yUkdCKFtjMSwgYzIsIGMzXSk7XG4gICAgfSBlbHNlIGlmIChtb2RlID09PSA1KSB7XG4gICAgICBjb2xvciAmPSB+KEF0dHJpYnV0ZXMuQ01fTUFTSyB8IEF0dHJpYnV0ZXMuUENPTE9SX01BU0spO1xuICAgICAgY29sb3IgfD0gQXR0cmlidXRlcy5DTV9QMjU2IHwgKGMxICYgMHhmZik7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgdG8gZXh0cmFjdCBhbmQgYXBwbHkgY29sb3IgcGFyYW1zL3N1YnBhcmFtcy5cbiAgICogUmV0dXJucyBhZHZhbmNlIGZvciBwYXJhbXMgaW5kZXguXG4gICAqL1xuICBwcml2YXRlIF9leHRyYWN0Q29sb3IocGFyYW1zOiBJUGFyYW1zLCBwb3M6IG51bWJlciwgYXR0cjogSUF0dHJpYnV0ZURhdGEpOiBudW1iZXIge1xuICAgIC8vIG5vcm1hbGl6ZSBwYXJhbXNcbiAgICAvLyBtZWFuaW5nOiBbdGFyZ2V0LCBDTSwgaWduLCB2YWwsIHZhbCwgdmFsXVxuICAgIC8vIFJHQiAgICA6IFsgMzgvNDgsICAyLCBpZ24sICAgciwgICBnLCAgIGJdXG4gICAgLy8gUDI1NiAgIDogWyAzOC80OCwgIDUsIGlnbiwgICB2LCBpZ24sIGlnbl1cbiAgICBjb25zdCBhY2N1ID0gWzAsIDAsIC0xLCAwLCAwLCAwXTtcblxuICAgIC8vIGFsaWdubWVudCBwbGFjZWhvbGRlciBmb3Igbm9uIGNvbG9yIHNwYWNlIHNlcXVlbmNlc1xuICAgIGxldCBjU3BhY2UgPSAwO1xuXG4gICAgLy8gcmV0dXJuIGFkdmFuY2Ugd2UgdG9vayBpbiBwYXJhbXNcbiAgICBsZXQgYWR2YW5jZSA9IDA7XG5cbiAgICBkbyB7XG4gICAgICBhY2N1W2FkdmFuY2UgKyBjU3BhY2VdID0gcGFyYW1zLnBhcmFtc1twb3MgKyBhZHZhbmNlXTtcbiAgICAgIGlmIChwYXJhbXMuaGFzU3ViUGFyYW1zKHBvcyArIGFkdmFuY2UpKSB7XG4gICAgICAgIGNvbnN0IHN1YnBhcmFtcyA9IHBhcmFtcy5nZXRTdWJQYXJhbXMocG9zICsgYWR2YW5jZSkhO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBpZiAoYWNjdVsxXSA9PT0gNSkge1xuICAgICAgICAgICAgY1NwYWNlID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYWNjdVthZHZhbmNlICsgaSArIDEgKyBjU3BhY2VdID0gc3VicGFyYW1zW2ldO1xuICAgICAgICB9IHdoaWxlICgrK2kgPCBzdWJwYXJhbXMubGVuZ3RoICYmIGkgKyBhZHZhbmNlICsgMSArIGNTcGFjZSA8IGFjY3UubGVuZ3RoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAvLyBleGl0IGVhcmx5IGlmIGNhbiBkZWNpZGUgY29sb3IgbW9kZSB3aXRoIHNlbWljb2xvbnNcbiAgICAgIGlmICgoYWNjdVsxXSA9PT0gNSAmJiBhZHZhbmNlICsgY1NwYWNlID49IDIpXG4gICAgICAgIHx8IChhY2N1WzFdID09PSAyICYmIGFkdmFuY2UgKyBjU3BhY2UgPj0gNSkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAvLyBvZmZzZXQgY29sb3JTcGFjZSBzbG90IGZvciBzZW1pY29sb24gbW9kZVxuICAgICAgaWYgKGFjY3VbMV0pIHtcbiAgICAgICAgY1NwYWNlID0gMTtcbiAgICAgIH1cbiAgICB9IHdoaWxlICgrK2FkdmFuY2UgKyBwb3MgPCBwYXJhbXMubGVuZ3RoICYmIGFkdmFuY2UgKyBjU3BhY2UgPCBhY2N1Lmxlbmd0aCk7XG5cbiAgICAvLyBzZXQgZGVmYXVsdCB2YWx1ZXMgdG8gMFxuICAgIGZvciAobGV0IGkgPSAyOyBpIDwgYWNjdS5sZW5ndGg7ICsraSkge1xuICAgICAgaWYgKGFjY3VbaV0gPT09IC0xKSB7XG4gICAgICAgIGFjY3VbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFwcGx5IGNvbG9yc1xuICAgIHN3aXRjaCAoYWNjdVswXSkge1xuICAgICAgY2FzZSAzODpcbiAgICAgICAgYXR0ci5mZyA9IHRoaXMuX3VwZGF0ZUF0dHJDb2xvcihhdHRyLmZnLCBhY2N1WzFdLCBhY2N1WzNdLCBhY2N1WzRdLCBhY2N1WzVdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDQ4OlxuICAgICAgICBhdHRyLmJnID0gdGhpcy5fdXBkYXRlQXR0ckNvbG9yKGF0dHIuYmcsIGFjY3VbMV0sIGFjY3VbM10sIGFjY3VbNF0sIGFjY3VbNV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNTg6XG4gICAgICAgIGF0dHIuZXh0ZW5kZWQgPSBhdHRyLmV4dGVuZGVkLmNsb25lKCk7XG4gICAgICAgIGF0dHIuZXh0ZW5kZWQudW5kZXJsaW5lQ29sb3IgPSB0aGlzLl91cGRhdGVBdHRyQ29sb3IoYXR0ci5leHRlbmRlZC51bmRlcmxpbmVDb2xvciwgYWNjdVsxXSwgYWNjdVszXSwgYWNjdVs0XSwgYWNjdVs1XSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkdmFuY2U7XG4gIH1cblxuICAvKipcbiAgICogU0dSIDQgc3VicGFyYW1zOlxuICAgKiAgICA0OjAgICAtICAgZXF1YWwgdG8gU0dSIDI0ICh0dXJuIG9mZiBhbGwgdW5kZXJsaW5lKVxuICAgKiAgICA0OjEgICAtICAgZXF1YWwgdG8gU0dSIDQgKHNpbmdsZSB1bmRlcmxpbmUpXG4gICAqICAgIDQ6MiAgIC0gICBlcXVhbCB0byBTR1IgMjEgKGRvdWJsZSB1bmRlcmxpbmUpXG4gICAqICAgIDQ6MyAgIC0gICBjdXJseSB1bmRlcmxpbmVcbiAgICogICAgNDo0ICAgLSAgIGRvdHRlZCB1bmRlcmxpbmVcbiAgICogICAgNDo1ICAgLSAgIGRhc2hlZCB1bmRlcmxpbmVcbiAgICovXG4gIHByaXZhdGUgX3Byb2Nlc3NVbmRlcmxpbmUoc3R5bGU6IG51bWJlciwgYXR0cjogSUF0dHJpYnV0ZURhdGEpOiB2b2lkIHtcbiAgICAvLyB0cmVhdCBleHRlbmRlZCBhdHRycyBhcyBpbW11dGFibGUsIHRodXMgYWx3YXlzIGNsb25lIGZyb20gb2xkIG9uZVxuICAgIC8vIHRoaXMgaXMgbmVlZGVkIHNpbmNlIHRoZSBidWZmZXIgb25seSBob2xkcyByZWZlcmVuY2VzIHRvIGl0XG4gICAgYXR0ci5leHRlbmRlZCA9IGF0dHIuZXh0ZW5kZWQuY2xvbmUoKTtcblxuICAgIC8vIGRlZmF1bHQgdG8gMSA9PSBzaW5nbGUgdW5kZXJsaW5lXG4gICAgaWYgKCF+c3R5bGUgfHwgc3R5bGUgPiA1KSB7XG4gICAgICBzdHlsZSA9IDE7XG4gICAgfVxuICAgIGF0dHIuZXh0ZW5kZWQudW5kZXJsaW5lU3R5bGUgPSBzdHlsZTtcbiAgICBhdHRyLmZnIHw9IEZnRmxhZ3MuVU5ERVJMSU5FO1xuXG4gICAgLy8gMCBkZWFjdGl2YXRlcyB1bmRlcmxpbmVcbiAgICBpZiAoc3R5bGUgPT09IDApIHtcbiAgICAgIGF0dHIuZmcgJj0gfkZnRmxhZ3MuVU5ERVJMSU5FO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSBIQVNfRVhURU5ERUQgaW4gQkdcbiAgICBhdHRyLnVwZGF0ZUV4dGVuZGVkKCk7XG4gIH1cblxuICAvKipcbiAgICogQ1NJIFBtIG0gIENoYXJhY3RlciBBdHRyaWJ1dGVzIChTR1IpLlxuICAgKlxuICAgKiBAdnQ6ICNQW1NlZSBiZWxvdyBmb3Igc3VwcG9ydGVkIGF0dHJpYnV0ZXMuXSAgICBDU0kgU0dSICAgXCJTZWxlY3QgR3JhcGhpYyBSZW5kaXRpb25cIiAgXCJDU0kgUG0gbVwiICBcIlNldC9SZXNldCB2YXJpb3VzIHRleHQgYXR0cmlidXRlcy5cIlxuICAgKiBTR1Igc2VsZWN0cyBvbmUgb3IgbW9yZSBjaGFyYWN0ZXIgYXR0cmlidXRlcyBhdCB0aGUgc2FtZSB0aW1lLiBNdWx0aXBsZSBwYXJhbXMgKHVwIHRvIDMyKVxuICAgKiBhcmUgYXBwbGllZCBpbiBvcmRlciBmcm9tIGxlZnQgdG8gcmlnaHQuIFRoZSBjaGFuZ2VkIGF0dHJpYnV0ZXMgYXJlIGFwcGxpZWQgdG8gYWxsIG5ld1xuICAgKiBjaGFyYWN0ZXJzIHJlY2VpdmVkLiBJZiB5b3UgbW92ZSBjaGFyYWN0ZXJzIGluIHRoZSB2aWV3cG9ydCBieSBzY3JvbGxpbmcgb3IgYW55IG90aGVyIG1lYW5zLFxuICAgKiB0aGVuIHRoZSBhdHRyaWJ1dGVzIG1vdmUgd2l0aCB0aGUgY2hhcmFjdGVycy5cbiAgICpcbiAgICogU3VwcG9ydGVkIHBhcmFtIHZhbHVlcyBieSBTR1I6XG4gICAqXG4gICAqIHwgUGFyYW0gICAgIHwgTWVhbmluZyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTdXBwb3J0IHxcbiAgICogfCAtLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0gfFxuICAgKiB8IDAgICAgICAgICB8IE5vcm1hbCAoZGVmYXVsdCkuIFJlc2V0cyBhbnkgb3RoZXIgcHJlY2VkaW5nIFNHUi4gICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgMSAgICAgICAgIHwgQm9sZC4gKGFsc28gc2VlIGBvcHRpb25zLmRyYXdCb2xkVGV4dEluQnJpZ2h0Q29sb3JzYCkgICAgfCAjWSAgICAgIHxcbiAgICogfCAyICAgICAgICAgfCBGYWludCwgZGVjcmVhc2VkIGludGVuc2l0eS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDMgICAgICAgICB8IEl0YWxpYy4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgNCAgICAgICAgIHwgVW5kZXJsaW5lZCAoc2VlIGJlbG93IGZvciBzdHlsZSBzdXBwb3J0KS4gICAgICAgICAgICAgICAgfCAjWSAgICAgIHxcbiAgICogfCA1ICAgICAgICAgfCBTbG93bHkgYmxpbmtpbmcuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNOICAgICAgfFxuICAgKiB8IDYgICAgICAgICB8IFJhcGlkbHkgYmxpbmtpbmcuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI04gICAgICB8XG4gICAqIHwgNyAgICAgICAgIHwgSW52ZXJzZS4gRmxpcHMgZm9yZWdyb3VuZCBhbmQgYmFja2dyb3VuZCBjb2xvci4gICAgICAgICAgfCAjWSAgICAgIHxcbiAgICogfCA4ICAgICAgICAgfCBJbnZpc2libGUgKGhpZGRlbikuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDkgICAgICAgICB8IENyb3NzZWQtb3V0IGNoYXJhY3RlcnMgKHN0cmlrZXRocm91Z2gpLiAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgMjEgICAgICAgIHwgRG91Ymx5IHVuZGVybGluZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAjUFtDdXJyZW50bHkgb3V0cHV0cyBhIHNpbmdsZSB1bmRlcmxpbmUuXSB8XG4gICAqIHwgMjIgICAgICAgIHwgTm9ybWFsIChuZWl0aGVyIGJvbGQgbm9yIGZhaW50KS4gICAgICAgICAgICAgICAgICAgICAgICAgfCAjWSAgICAgIHxcbiAgICogfCAyMyAgICAgICAgfCBObyBpdGFsaWMuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDI0ICAgICAgICB8IE5vdCB1bmRlcmxpbmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgMjUgICAgICAgIHwgU3RlYWR5IChub3QgYmxpbmtpbmcpLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAjWSAgICAgIHxcbiAgICogfCAyNyAgICAgICAgfCBQb3NpdGl2ZSAobm90IGludmVyc2UpLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDI4ICAgICAgICB8IFZpc2libGUgKG5vdCBoaWRkZW4pLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgMjkgICAgICAgIHwgTm90IENyb3NzZWQtb3V0IChzdHJpa2V0aHJvdWdoKS4gICAgICAgICAgICAgICAgICAgICAgICAgfCAjWSAgICAgIHxcbiAgICogfCAzMCAgICAgICAgfCBGb3JlZ3JvdW5kIGNvbG9yOiBCbGFjay4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDMxICAgICAgICB8IEZvcmVncm91bmQgY29sb3I6IFJlZC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgMzIgICAgICAgIHwgRm9yZWdyb3VuZCBjb2xvcjogR3JlZW4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAjWSAgICAgIHxcbiAgICogfCAzMyAgICAgICAgfCBGb3JlZ3JvdW5kIGNvbG9yOiBZZWxsb3cuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDM0ICAgICAgICB8IEZvcmVncm91bmQgY29sb3I6IEJsdWUuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgMzUgICAgICAgIHwgRm9yZWdyb3VuZCBjb2xvcjogTWFnZW50YS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAjWSAgICAgIHxcbiAgICogfCAzNiAgICAgICAgfCBGb3JlZ3JvdW5kIGNvbG9yOiBDeWFuLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDM3ICAgICAgICB8IEZvcmVncm91bmQgY29sb3I6IFdoaXRlLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgMzggICAgICAgIHwgRm9yZWdyb3VuZCBjb2xvcjogRXh0ZW5kZWQgY29sb3IuICAgICAgICAgICAgICAgICAgICAgICAgfCAjUFtTdXBwb3J0IGZvciBSR0IgYW5kIGluZGV4ZWQgY29sb3JzLCBzZWUgYmVsb3cuXSB8XG4gICAqIHwgMzkgICAgICAgIHwgRm9yZWdyb3VuZCBjb2xvcjogRGVmYXVsdCAob3JpZ2luYWwpLiAgICAgICAgICAgICAgICAgICAgfCAjWSAgICAgIHxcbiAgICogfCA0MCAgICAgICAgfCBCYWNrZ3JvdW5kIGNvbG9yOiBCbGFjay4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDQxICAgICAgICB8IEJhY2tncm91bmQgY29sb3I6IFJlZC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgNDIgICAgICAgIHwgQmFja2dyb3VuZCBjb2xvcjogR3JlZW4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAjWSAgICAgIHxcbiAgICogfCA0MyAgICAgICAgfCBCYWNrZ3JvdW5kIGNvbG9yOiBZZWxsb3cuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDQ0ICAgICAgICB8IEJhY2tncm91bmQgY29sb3I6IEJsdWUuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgNDUgICAgICAgIHwgQmFja2dyb3VuZCBjb2xvcjogTWFnZW50YS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAjWSAgICAgIHxcbiAgICogfCA0NiAgICAgICAgfCBCYWNrZ3JvdW5kIGNvbG9yOiBDeWFuLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDQ3ICAgICAgICB8IEJhY2tncm91bmQgY29sb3I6IFdoaXRlLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqIHwgNDggICAgICAgIHwgQmFja2dyb3VuZCBjb2xvcjogRXh0ZW5kZWQgY29sb3IuICAgICAgICAgICAgICAgICAgICAgICAgfCAjUFtTdXBwb3J0IGZvciBSR0IgYW5kIGluZGV4ZWQgY29sb3JzLCBzZWUgYmVsb3cuXSB8XG4gICAqIHwgNDkgICAgICAgIHwgQmFja2dyb3VuZCBjb2xvcjogRGVmYXVsdCAob3JpZ2luYWwpLiAgICAgICAgICAgICAgICAgICAgfCAjWSAgICAgIHxcbiAgICogfCA5MCAtIDk3ICAgfCBCcmlnaHQgZm9yZWdyb3VuZCBjb2xvciAoYW5hbG9nb3VzIHRvIDMwIC0gMzcpLiAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDEwMCAtIDEwNyB8IEJyaWdodCBiYWNrZ3JvdW5kIGNvbG9yIChhbmFsb2dvdXMgdG8gNDAgLSA0NykuICAgICAgICAgIHwgI1kgICAgICB8XG4gICAqXG4gICAqIFVuZGVybGluZSBzdXBwb3J0cyBzdWJwYXJhbXMgdG8gZGVub3RlIHRoZSBzdHlsZSBpbiB0aGUgZm9ybSBgNCA6IHhgOlxuICAgKlxuICAgKiB8IHggICAgICB8IE1lYW5pbmcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTdXBwb3J0IHxcbiAgICogfCAtLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLSB8XG4gICAqIHwgMCAgICAgIHwgTm8gdW5kZXJsaW5lLiBTYW1lIGFzIGBTR1IgMjQgbWAuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNZICAgICAgfFxuICAgKiB8IDEgICAgICB8IFNpbmdsZSB1bmRlcmxpbmUuIFNhbWUgYXMgYFNHUiA0IG1gLiAgICAgICAgICAgICAgICAgICAgICAgICAgfCAjWSAgICAgIHxcbiAgICogfCAyICAgICAgfCBEb3VibGUgdW5kZXJsaW5lLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1BbQ3VycmVudGx5IG91dHB1dHMgYSBzaW5nbGUgdW5kZXJsaW5lLl0gfFxuICAgKiB8IDMgICAgICB8IEN1cmx5IHVuZGVybGluZS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAjUFtDdXJyZW50bHkgb3V0cHV0cyBhIHNpbmdsZSB1bmRlcmxpbmUuXSB8XG4gICAqIHwgNCAgICAgIHwgRG90dGVkIHVuZGVybGluZS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNQW0N1cnJlbnRseSBvdXRwdXRzIGEgc2luZ2xlIHVuZGVybGluZS5dIHxcbiAgICogfCA1ICAgICAgfCBEYXNoZWQgdW5kZXJsaW5lLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI1BbQ3VycmVudGx5IG91dHB1dHMgYSBzaW5nbGUgdW5kZXJsaW5lLl0gfFxuICAgKiB8IG90aGVyICB8IFNpbmdsZSB1bmRlcmxpbmUuIFNhbWUgYXMgYFNHUiA0IG1gLiAgICAgICAgICAgICAgICAgICAgICAgICAgfCAjWSAgICAgIHxcbiAgICpcbiAgICogRXh0ZW5kZWQgY29sb3JzIGFyZSBzdXBwb3J0ZWQgZm9yIGZvcmVncm91bmQgKFBzPTM4KSBhbmQgYmFja2dyb3VuZCAoUHM9NDgpIGFzIGZvbGxvd3M6XG4gICAqXG4gICAqIHwgUHMgKyAxIHwgTWVhbmluZyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFN1cHBvcnQgfFxuICAgKiB8IC0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tIHxcbiAgICogfCAwICAgICAgfCBJbXBsZW1lbnRhdGlvbiBkZWZpbmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI04gICAgICB8XG4gICAqIHwgMSAgICAgIHwgVHJhbnNwYXJlbnQuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNOICAgICAgfFxuICAgKiB8IDIgICAgICB8IFJHQiBjb2xvciBhcyBgUHMgOyAyIDsgUiA7IEcgOyBCYCBvciBgUHMgOiAyIDogOiBSIDogRyA6IEJgLiAgfCAjWSAgICAgIHxcbiAgICogfCAzICAgICAgfCBDTVkgY29sb3IuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgI04gICAgICB8XG4gICAqIHwgNCAgICAgIHwgQ01ZSyBjb2xvci4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICNOICAgICAgfFxuICAgKiB8IDUgICAgICB8IEluZGV4ZWQgKDI1NiBjb2xvcnMpIGFzIGBQcyA7IDUgOyBJTkRFWGAgb3IgYFBzIDogNSA6IElOREVYYC4gfCAjWSAgICAgIHxcbiAgICpcbiAgICpcbiAgICogRklYTUU6IGJsaW5raW5nIGlzIGltcGxlbWVudGVkIGluIGF0dHJzLCBidXQgbm90IHdvcmtpbmcgaW4gcmVuZGVyZXJzP1xuICAgKiBGSVhNRTogcmVtb3ZlIGRlYWQgYnJhbmNoIGZvciBwPTEwMFxuICAgKi9cbiAgcHVibGljIGNoYXJBdHRyaWJ1dGVzKHBhcmFtczogSVBhcmFtcyk6IGJvb2xlYW4ge1xuICAgIC8vIE9wdGltaXplIGEgc2luZ2xlIFNHUjAuXG4gICAgaWYgKHBhcmFtcy5sZW5ndGggPT09IDEgJiYgcGFyYW1zLnBhcmFtc1swXSA9PT0gMCkge1xuICAgICAgdGhpcy5fY3VyQXR0ckRhdGEuZmcgPSBERUZBVUxUX0FUVFJfREFUQS5mZztcbiAgICAgIHRoaXMuX2N1ckF0dHJEYXRhLmJnID0gREVGQVVMVF9BVFRSX0RBVEEuYmc7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBsID0gcGFyYW1zLmxlbmd0aDtcbiAgICBsZXQgcDtcbiAgICBjb25zdCBhdHRyID0gdGhpcy5fY3VyQXR0ckRhdGE7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgcCA9IHBhcmFtcy5wYXJhbXNbaV07XG4gICAgICBpZiAocCA+PSAzMCAmJiBwIDw9IDM3KSB7XG4gICAgICAgIC8vIGZnIGNvbG9yIDhcbiAgICAgICAgYXR0ci5mZyAmPSB+KEF0dHJpYnV0ZXMuQ01fTUFTSyB8IEF0dHJpYnV0ZXMuUENPTE9SX01BU0spO1xuICAgICAgICBhdHRyLmZnIHw9IEF0dHJpYnV0ZXMuQ01fUDE2IHwgKHAgLSAzMCk7XG4gICAgICB9IGVsc2UgaWYgKHAgPj0gNDAgJiYgcCA8PSA0Nykge1xuICAgICAgICAvLyBiZyBjb2xvciA4XG4gICAgICAgIGF0dHIuYmcgJj0gfihBdHRyaWJ1dGVzLkNNX01BU0sgfCBBdHRyaWJ1dGVzLlBDT0xPUl9NQVNLKTtcbiAgICAgICAgYXR0ci5iZyB8PSBBdHRyaWJ1dGVzLkNNX1AxNiB8IChwIC0gNDApO1xuICAgICAgfSBlbHNlIGlmIChwID49IDkwICYmIHAgPD0gOTcpIHtcbiAgICAgICAgLy8gZmcgY29sb3IgMTZcbiAgICAgICAgYXR0ci5mZyAmPSB+KEF0dHJpYnV0ZXMuQ01fTUFTSyB8IEF0dHJpYnV0ZXMuUENPTE9SX01BU0spO1xuICAgICAgICBhdHRyLmZnIHw9IEF0dHJpYnV0ZXMuQ01fUDE2IHwgKHAgLSA5MCkgfCA4O1xuICAgICAgfSBlbHNlIGlmIChwID49IDEwMCAmJiBwIDw9IDEwNykge1xuICAgICAgICAvLyBiZyBjb2xvciAxNlxuICAgICAgICBhdHRyLmJnICY9IH4oQXR0cmlidXRlcy5DTV9NQVNLIHwgQXR0cmlidXRlcy5QQ09MT1JfTUFTSyk7XG4gICAgICAgIGF0dHIuYmcgfD0gQXR0cmlidXRlcy5DTV9QMTYgfCAocCAtIDEwMCkgfCA4O1xuICAgICAgfSBlbHNlIGlmIChwID09PSAwKSB7XG4gICAgICAgIC8vIGRlZmF1bHRcbiAgICAgICAgYXR0ci5mZyA9IERFRkFVTFRfQVRUUl9EQVRBLmZnO1xuICAgICAgICBhdHRyLmJnID0gREVGQVVMVF9BVFRSX0RBVEEuYmc7XG4gICAgICB9IGVsc2UgaWYgKHAgPT09IDEpIHtcbiAgICAgICAgLy8gYm9sZCB0ZXh0XG4gICAgICAgIGF0dHIuZmcgfD0gRmdGbGFncy5CT0xEO1xuICAgICAgfSBlbHNlIGlmIChwID09PSAzKSB7XG4gICAgICAgIC8vIGl0YWxpYyB0ZXh0XG4gICAgICAgIGF0dHIuYmcgfD0gQmdGbGFncy5JVEFMSUM7XG4gICAgICB9IGVsc2UgaWYgKHAgPT09IDQpIHtcbiAgICAgICAgLy8gdW5kZXJsaW5lZCB0ZXh0XG4gICAgICAgIGF0dHIuZmcgfD0gRmdGbGFncy5VTkRFUkxJTkU7XG4gICAgICAgIHRoaXMuX3Byb2Nlc3NVbmRlcmxpbmUocGFyYW1zLmhhc1N1YlBhcmFtcyhpKSA/IHBhcmFtcy5nZXRTdWJQYXJhbXMoaSkhWzBdIDogVW5kZXJsaW5lU3R5bGUuU0lOR0xFLCBhdHRyKTtcbiAgICAgIH0gZWxzZSBpZiAocCA9PT0gNSkge1xuICAgICAgICAvLyBibGlua1xuICAgICAgICBhdHRyLmZnIHw9IEZnRmxhZ3MuQkxJTks7XG4gICAgICB9IGVsc2UgaWYgKHAgPT09IDcpIHtcbiAgICAgICAgLy8gaW52ZXJzZSBhbmQgcG9zaXRpdmVcbiAgICAgICAgLy8gdGVzdCB3aXRoOiBlY2hvIC1lICdcXGVbMzFtXFxlWzQybWhlbGxvXFxlWzdtd29ybGRcXGVbMjdtaGlcXGVbbSdcbiAgICAgICAgYXR0ci5mZyB8PSBGZ0ZsYWdzLklOVkVSU0U7XG4gICAgICB9IGVsc2UgaWYgKHAgPT09IDgpIHtcbiAgICAgICAgLy8gaW52aXNpYmxlXG4gICAgICAgIGF0dHIuZmcgfD0gRmdGbGFncy5JTlZJU0lCTEU7XG4gICAgICB9IGVsc2UgaWYgKHAgPT09IDkpIHtcbiAgICAgICAgLy8gc3RyaWtldGhyb3VnaFxuICAgICAgICBhdHRyLmZnIHw9IEZnRmxhZ3MuU1RSSUtFVEhST1VHSDtcbiAgICAgIH0gZWxzZSBpZiAocCA9PT0gMikge1xuICAgICAgICAvLyBkaW1tZWQgdGV4dFxuICAgICAgICBhdHRyLmJnIHw9IEJnRmxhZ3MuRElNO1xuICAgICAgfSBlbHNlIGlmIChwID09PSAyMSkge1xuICAgICAgICAvLyBkb3VibGUgdW5kZXJsaW5lXG4gICAgICAgIHRoaXMuX3Byb2Nlc3NVbmRlcmxpbmUoVW5kZXJsaW5lU3R5bGUuRE9VQkxFLCBhdHRyKTtcbiAgICAgIH0gZWxzZSBpZiAocCA9PT0gMjIpIHtcbiAgICAgICAgLy8gbm90IGJvbGQgbm9yIGZhaW50XG4gICAgICAgIGF0dHIuZmcgJj0gfkZnRmxhZ3MuQk9MRDtcbiAgICAgICAgYXR0ci5iZyAmPSB+QmdGbGFncy5ESU07XG4gICAgICB9IGVsc2UgaWYgKHAgPT09IDIzKSB7XG4gICAgICAgIC8vIG5vdCBpdGFsaWNcbiAgICAgICAgYXR0ci5iZyAmPSB+QmdGbGFncy5JVEFMSUM7XG4gICAgICB9IGVsc2UgaWYgKHAgPT09IDI0KSB7XG4gICAgICAgIC8vIG5vdCB1bmRlcmxpbmVkXG4gICAgICAgIGF0dHIuZmcgJj0gfkZnRmxhZ3MuVU5ERVJMSU5FO1xuICAgICAgfSBlbHNlIGlmIChwID09PSAyNSkge1xuICAgICAgICAvLyBub3QgYmxpbmtcbiAgICAgICAgYXR0ci5mZyAmPSB+RmdGbGFncy5CTElOSztcbiAgICAgIH0gZWxzZSBpZiAocCA9PT0gMjcpIHtcbiAgICAgICAgLy8gbm90IGludmVyc2VcbiAgICAgICAgYXR0ci5mZyAmPSB+RmdGbGFncy5JTlZFUlNFO1xuICAgICAgfSBlbHNlIGlmIChwID09PSAyOCkge1xuICAgICAgICAvLyBub3QgaW52aXNpYmxlXG4gICAgICAgIGF0dHIuZmcgJj0gfkZnRmxhZ3MuSU5WSVNJQkxFO1xuICAgICAgfSBlbHNlIGlmIChwID09PSAyOSkge1xuICAgICAgICAvLyBub3Qgc3RyaWtldGhyb3VnaFxuICAgICAgICBhdHRyLmZnICY9IH5GZ0ZsYWdzLlNUUklLRVRIUk9VR0g7XG4gICAgICB9IGVsc2UgaWYgKHAgPT09IDM5KSB7XG4gICAgICAgIC8vIHJlc2V0IGZnXG4gICAgICAgIGF0dHIuZmcgJj0gfihBdHRyaWJ1dGVzLkNNX01BU0sgfCBBdHRyaWJ1dGVzLlJHQl9NQVNLKTtcbiAgICAgICAgYXR0ci5mZyB8PSBERUZBVUxUX0FUVFJfREFUQS5mZyAmIChBdHRyaWJ1dGVzLlBDT0xPUl9NQVNLIHwgQXR0cmlidXRlcy5SR0JfTUFTSyk7XG4gICAgICB9IGVsc2UgaWYgKHAgPT09IDQ5KSB7XG4gICAgICAgIC8vIHJlc2V0IGJnXG4gICAgICAgIGF0dHIuYmcgJj0gfihBdHRyaWJ1dGVzLkNNX01BU0sgfCBBdHRyaWJ1dGVzLlJHQl9NQVNLKTtcbiAgICAgICAgYXR0ci5iZyB8PSBERUZBVUxUX0FUVFJfREFUQS5iZyAmIChBdHRyaWJ1dGVzLlBDT0xPUl9NQVNLIHwgQXR0cmlidXRlcy5SR0JfTUFTSyk7XG4gICAgICB9IGVsc2UgaWYgKHAgPT09IDM4IHx8IHAgPT09IDQ4IHx8IHAgPT09IDU4KSB7XG4gICAgICAgIC8vIGZnIGNvbG9yIDI1NiBhbmQgUkdCXG4gICAgICAgIGkgKz0gdGhpcy5fZXh0cmFjdENvbG9yKHBhcmFtcywgaSwgYXR0cik7XG4gICAgICB9IGVsc2UgaWYgKHAgPT09IDU5KSB7XG4gICAgICAgIGF0dHIuZXh0ZW5kZWQgPSBhdHRyLmV4dGVuZGVkLmNsb25lKCk7XG4gICAgICAgIGF0dHIuZXh0ZW5kZWQudW5kZXJsaW5lQ29sb3IgPSAtMTtcbiAgICAgICAgYXR0ci51cGRhdGVFeHRlbmRlZCgpO1xuICAgICAgfSBlbHNlIGlmIChwID09PSAxMDApIHsgLy8gRklYTUU6IGRlYWQgYnJhbmNoLCBwPTEwMCBhbHJlYWR5IGhhbmRsZWQgYWJvdmUhXG4gICAgICAgIC8vIHJlc2V0IGZnL2JnXG4gICAgICAgIGF0dHIuZmcgJj0gfihBdHRyaWJ1dGVzLkNNX01BU0sgfCBBdHRyaWJ1dGVzLlJHQl9NQVNLKTtcbiAgICAgICAgYXR0ci5mZyB8PSBERUZBVUxUX0FUVFJfREFUQS5mZyAmIChBdHRyaWJ1dGVzLlBDT0xPUl9NQVNLIHwgQXR0cmlidXRlcy5SR0JfTUFTSyk7XG4gICAgICAgIGF0dHIuYmcgJj0gfihBdHRyaWJ1dGVzLkNNX01BU0sgfCBBdHRyaWJ1dGVzLlJHQl9NQVNLKTtcbiAgICAgICAgYXR0ci5iZyB8PSBERUZBVUxUX0FUVFJfREFUQS5iZyAmIChBdHRyaWJ1dGVzLlBDT0xPUl9NQVNLIHwgQXR0cmlidXRlcy5SR0JfTUFTSyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9sb2dTZXJ2aWNlLmRlYnVnKCdVbmtub3duIFNHUiBhdHRyaWJ1dGU6ICVkLicsIHApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDU0kgUHMgbiAgRGV2aWNlIFN0YXR1cyBSZXBvcnQgKERTUikuXG4gICAqICAgICBQcyA9IDUgIC0+IFN0YXR1cyBSZXBvcnQuICBSZXN1bHQgKGBgT0snJykgaXNcbiAgICogICBDU0kgMCBuXG4gICAqICAgICBQcyA9IDYgIC0+IFJlcG9ydCBDdXJzb3IgUG9zaXRpb24gKENQUikgW3Jvdztjb2x1bW5dLlxuICAgKiAgIFJlc3VsdCBpc1xuICAgKiAgIENTSSByIDsgYyBSXG4gICAqIENTSSA/IFBzIG5cbiAgICogICBEZXZpY2UgU3RhdHVzIFJlcG9ydCAoRFNSLCBERUMtc3BlY2lmaWMpLlxuICAgKiAgICAgUHMgPSA2ICAtPiBSZXBvcnQgQ3Vyc29yIFBvc2l0aW9uIChDUFIpIFtyb3c7Y29sdW1uXSBhcyBDU0lcbiAgICogICAgID8gciA7IGMgUiAoYXNzdW1lcyBwYWdlIGlzIHplcm8pLlxuICAgKiAgICAgUHMgPSAxIDUgIC0+IFJlcG9ydCBQcmludGVyIHN0YXR1cyBhcyBDU0kgPyAxIDAgIG4gIChyZWFkeSkuXG4gICAqICAgICBvciBDU0kgPyAxIDEgIG4gIChub3QgcmVhZHkpLlxuICAgKiAgICAgUHMgPSAyIDUgIC0+IFJlcG9ydCBVREsgc3RhdHVzIGFzIENTSSA/IDIgMCAgbiAgKHVubG9ja2VkKVxuICAgKiAgICAgb3IgQ1NJID8gMiAxICBuICAobG9ja2VkKS5cbiAgICogICAgIFBzID0gMiA2ICAtPiBSZXBvcnQgS2V5Ym9hcmQgc3RhdHVzIGFzXG4gICAqICAgQ1NJID8gMiA3ICA7ICAxICA7ICAwICA7ICAwICBuICAoTm9ydGggQW1lcmljYW4pLlxuICAgKiAgIFRoZSBsYXN0IHR3byBwYXJhbWV0ZXJzIGFwcGx5IHRvIFZUNDAwICYgdXAsIGFuZCBkZW5vdGUga2V5LVxuICAgKiAgIGJvYXJkIHJlYWR5IGFuZCBMSzAxIHJlc3BlY3RpdmVseS5cbiAgICogICAgIFBzID0gNSAzICAtPiBSZXBvcnQgTG9jYXRvciBzdGF0dXMgYXNcbiAgICogICBDU0kgPyA1IDMgIG4gIExvY2F0b3IgYXZhaWxhYmxlLCBpZiBjb21waWxlZC1pbiwgb3JcbiAgICogICBDU0kgPyA1IDAgIG4gIE5vIExvY2F0b3IsIGlmIG5vdC5cbiAgICpcbiAgICogQHZ0OiAjWSBDU0kgRFNSICAgXCJEZXZpY2UgU3RhdHVzIFJlcG9ydFwiICBcIkNTSSBQcyBuXCIgIFwiUmVxdWVzdCBjdXJzb3IgcG9zaXRpb24gKENQUikgd2l0aCBgUHNgID0gNi5cIlxuICAgKi9cbiAgcHVibGljIGRldmljZVN0YXR1cyhwYXJhbXM6IElQYXJhbXMpOiBib29sZWFuIHtcbiAgICBzd2l0Y2ggKHBhcmFtcy5wYXJhbXNbMF0pIHtcbiAgICAgIGNhc2UgNTpcbiAgICAgICAgLy8gc3RhdHVzIHJlcG9ydFxuICAgICAgICB0aGlzLl9jb3JlU2VydmljZS50cmlnZ2VyRGF0YUV2ZW50KGAke0MwLkVTQ31bMG5gKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDY6XG4gICAgICAgIC8vIGN1cnNvciBwb3NpdGlvblxuICAgICAgICBjb25zdCB5ID0gdGhpcy5fYWN0aXZlQnVmZmVyLnkgKyAxO1xuICAgICAgICBjb25zdCB4ID0gdGhpcy5fYWN0aXZlQnVmZmVyLnggKyAxO1xuICAgICAgICB0aGlzLl9jb3JlU2VydmljZS50cmlnZ2VyRGF0YUV2ZW50KGAke0MwLkVTQ31bJHt5fTske3h9UmApO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBAdnQ6ICNQW09ubHkgQ1BSIGlzIHN1cHBvcnRlZC5dICBDU0kgREVDRFNSICBcIkRFQyBEZXZpY2UgU3RhdHVzIFJlcG9ydFwiICBcIkNTSSA/IFBzIG5cIiAgXCJPbmx5IENQUiBpcyBzdXBwb3J0ZWQgKHNhbWUgYXMgRFNSKS5cIlxuICBwdWJsaWMgZGV2aWNlU3RhdHVzUHJpdmF0ZShwYXJhbXM6IElQYXJhbXMpOiBib29sZWFuIHtcbiAgICAvLyBtb2Rlcm4geHRlcm0gZG9lc250IHNlZW0gdG9cbiAgICAvLyByZXNwb25kIHRvIGFueSBvZiB0aGVzZSBleGNlcHQgPzYsIDYsIGFuZCA1XG4gICAgc3dpdGNoIChwYXJhbXMucGFyYW1zWzBdKSB7XG4gICAgICBjYXNlIDY6XG4gICAgICAgIC8vIGN1cnNvciBwb3NpdGlvblxuICAgICAgICBjb25zdCB5ID0gdGhpcy5fYWN0aXZlQnVmZmVyLnkgKyAxO1xuICAgICAgICBjb25zdCB4ID0gdGhpcy5fYWN0aXZlQnVmZmVyLnggKyAxO1xuICAgICAgICB0aGlzLl9jb3JlU2VydmljZS50cmlnZ2VyRGF0YUV2ZW50KGAke0MwLkVTQ31bPyR7eX07JHt4fVJgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE1OlxuICAgICAgICAvLyBubyBwcmludGVyXG4gICAgICAgIC8vIHRoaXMuaGFuZGxlcihDMC5FU0MgKyAnWz8xMW4nKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI1OlxuICAgICAgICAvLyBkb250IHN1cHBvcnQgdXNlciBkZWZpbmVkIGtleXNcbiAgICAgICAgLy8gdGhpcy5oYW5kbGVyKEMwLkVTQyArICdbPzIxbicpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjY6XG4gICAgICAgIC8vIG5vcnRoIGFtZXJpY2FuIGtleWJvYXJkXG4gICAgICAgIC8vIHRoaXMuaGFuZGxlcihDMC5FU0MgKyAnWz8yNzsxOzA7MG4nKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDUzOlxuICAgICAgICAvLyBubyBkZWMgbG9jYXRvci9tb3VzZVxuICAgICAgICAvLyB0aGlzLmhhbmRsZXIoQzAuRVNDICsgJ1s/NTBuJyk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDU0kgISBwICAgU29mdCB0ZXJtaW5hbCByZXNldCAoREVDU1RSKS5cbiAgICogaHR0cDovL3Z0MTAwLm5ldC9kb2NzL3Z0MjIwLXJtL3RhYmxlNC0xMC5odG1sXG4gICAqXG4gICAqIEB2dDogI1kgQ1NJIERFQ1NUUiAgXCJTb2Z0IFRlcm1pbmFsIFJlc2V0XCIgICBcIkNTSSAhIHBcIiAgIFwiUmVzZXQgc2V2ZXJhbCB0ZXJtaW5hbCBhdHRyaWJ1dGVzIHRvIGluaXRpYWwgc3RhdGUuXCJcbiAgICogVGhlcmUgYXJlIHR3byB0ZXJtaW5hbCByZXNldCBzZXF1ZW5jZXMgLSBSSVMgYW5kIERFQ1NUUi4gV2hpbGUgUklTIHBlcmZvcm1zIGFsbW9zdCBhIGZ1bGwgdGVybWluYWwgYm9vdHN0cmFwLFxuICAgKiBERUNTVFIgb25seSByZXNldHMgY2VydGFpbiBhdHRyaWJ1dGVzLiBGb3IgbW9zdCBuZWVkcyBERUNTVFIgc2hvdWxkIGJlIHN1ZmZpY2llbnQuXG4gICAqXG4gICAqIFRoZSBmb2xsb3dpbmcgdGVybWluYWwgYXR0cmlidXRlcyBhcmUgcmVzZXQgdG8gZGVmYXVsdCB2YWx1ZXM6XG4gICAqIC0gSVJNIGlzIHJlc2V0IChkYWZhdWx0ID0gZmFsc2UpXG4gICAqIC0gc2Nyb2xsIG1hcmdpbnMgYXJlIHJlc2V0IChkZWZhdWx0ID0gdmlld3BvcnQgc2l6ZSlcbiAgICogLSBlcmFzZSBhdHRyaWJ1dGVzIGFyZSByZXNldCB0byBkZWZhdWx0XG4gICAqIC0gY2hhcnNldHMgYXJlIHJlc2V0XG4gICAqIC0gREVDU0MgZGF0YSBpcyByZXNldCB0byBpbml0aWFsIHZhbHVlc1xuICAgKiAtIERFQ09NIGlzIHJlc2V0IHRvIGFic29sdXRlIG1vZGVcbiAgICpcbiAgICpcbiAgICogRklYTUU6IHRoZXJlIGFyZSBzZXZlcmFsIG1vcmUgYXR0cmlidXRlcyBtaXNzaW5nIChzZWUgVlQ1MjAgbWFudWFsKVxuICAgKi9cbiAgcHVibGljIHNvZnRSZXNldChwYXJhbXM6IElQYXJhbXMpOiBib29sZWFuIHtcbiAgICB0aGlzLl9jb3JlU2VydmljZS5pc0N1cnNvckhpZGRlbiA9IGZhbHNlO1xuICAgIHRoaXMuX29uUmVxdWVzdFN5bmNTY3JvbGxCYXIuZmlyZSgpO1xuICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxUb3AgPSAwO1xuICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci5zY3JvbGxCb3R0b20gPSB0aGlzLl9idWZmZXJTZXJ2aWNlLnJvd3MgLSAxO1xuICAgIHRoaXMuX2N1ckF0dHJEYXRhID0gREVGQVVMVF9BVFRSX0RBVEEuY2xvbmUoKTtcbiAgICB0aGlzLl9jb3JlU2VydmljZS5yZXNldCgpO1xuICAgIHRoaXMuX2NoYXJzZXRTZXJ2aWNlLnJlc2V0KCk7XG5cbiAgICAvLyByZXNldCBERUNTQyBkYXRhXG4gICAgdGhpcy5fYWN0aXZlQnVmZmVyLnNhdmVkWCA9IDA7XG4gICAgdGhpcy5fYWN0aXZlQnVmZmVyLnNhdmVkWSA9IHRoaXMuX2FjdGl2ZUJ1ZmZlci55YmFzZTtcbiAgICB0aGlzLl9hY3RpdmVCdWZmZXIuc2F2ZWRDdXJBdHRyRGF0YS5mZyA9IHRoaXMuX2N1ckF0dHJEYXRhLmZnO1xuICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci5zYXZlZEN1ckF0dHJEYXRhLmJnID0gdGhpcy5fY3VyQXR0ckRhdGEuYmc7XG4gICAgdGhpcy5fYWN0aXZlQnVmZmVyLnNhdmVkQ2hhcnNldCA9IHRoaXMuX2NoYXJzZXRTZXJ2aWNlLmNoYXJzZXQ7XG5cbiAgICAvLyByZXNldCBERUNPTVxuICAgIHRoaXMuX2NvcmVTZXJ2aWNlLmRlY1ByaXZhdGVNb2Rlcy5vcmlnaW4gPSBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDU0kgUHMgU1AgcSAgU2V0IGN1cnNvciBzdHlsZSAoREVDU0NVU1IsIFZUNTIwKS5cbiAgICogICBQcyA9IDAgIC0+IGJsaW5raW5nIGJsb2NrLlxuICAgKiAgIFBzID0gMSAgLT4gYmxpbmtpbmcgYmxvY2sgKGRlZmF1bHQpLlxuICAgKiAgIFBzID0gMiAgLT4gc3RlYWR5IGJsb2NrLlxuICAgKiAgIFBzID0gMyAgLT4gYmxpbmtpbmcgdW5kZXJsaW5lLlxuICAgKiAgIFBzID0gNCAgLT4gc3RlYWR5IHVuZGVybGluZS5cbiAgICogICBQcyA9IDUgIC0+IGJsaW5raW5nIGJhciAoeHRlcm0pLlxuICAgKiAgIFBzID0gNiAgLT4gc3RlYWR5IGJhciAoeHRlcm0pLlxuICAgKlxuICAgKiBAdnQ6ICNZIENTSSBERUNTQ1VTUiAgXCJTZXQgQ3Vyc29yIFN0eWxlXCIgIFwiQ1NJIFBzIFNQIHFcIiAgIFwiU2V0IGN1cnNvciBzdHlsZS5cIlxuICAgKiBTdXBwb3J0ZWQgY3Vyc29yIHN0eWxlczpcbiAgICogIC0gZW1wdHksIDAgb3IgMTogc3RlYWR5IGJsb2NrXG4gICAqICAtIDI6IGJsaW5rIGJsb2NrXG4gICAqICAtIDM6IHN0ZWFkeSB1bmRlcmxpbmVcbiAgICogIC0gNDogYmxpbmsgdW5kZXJsaW5lXG4gICAqICAtIDU6IHN0ZWFkeSBiYXJcbiAgICogIC0gNjogYmxpbmsgYmFyXG4gICAqL1xuICBwdWJsaWMgc2V0Q3Vyc29yU3R5bGUocGFyYW1zOiBJUGFyYW1zKTogYm9vbGVhbiB7XG4gICAgY29uc3QgcGFyYW0gPSBwYXJhbXMucGFyYW1zWzBdIHx8IDE7XG4gICAgc3dpdGNoIChwYXJhbSkge1xuICAgICAgY2FzZSAxOlxuICAgICAgY2FzZSAyOlxuICAgICAgICB0aGlzLl9vcHRpb25zU2VydmljZS5vcHRpb25zLmN1cnNvclN0eWxlID0gJ2Jsb2NrJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHRoaXMuX29wdGlvbnNTZXJ2aWNlLm9wdGlvbnMuY3Vyc29yU3R5bGUgPSAndW5kZXJsaW5lJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDU6XG4gICAgICBjYXNlIDY6XG4gICAgICAgIHRoaXMuX29wdGlvbnNTZXJ2aWNlLm9wdGlvbnMuY3Vyc29yU3R5bGUgPSAnYmFyJztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNvbnN0IGlzQmxpbmtpbmcgPSBwYXJhbSAlIDIgPT09IDE7XG4gICAgdGhpcy5fb3B0aW9uc1NlcnZpY2Uub3B0aW9ucy5jdXJzb3JCbGluayA9IGlzQmxpbmtpbmc7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQ1NJIFBzIDsgUHMgclxuICAgKiAgIFNldCBTY3JvbGxpbmcgUmVnaW9uIFt0b3A7Ym90dG9tXSAoZGVmYXVsdCA9IGZ1bGwgc2l6ZSBvZiB3aW4tXG4gICAqICAgZG93KSAoREVDU1RCTSkuXG4gICAqXG4gICAqIEB2dDogI1kgQ1NJIERFQ1NUQk0gXCJTZXQgVG9wIGFuZCBCb3R0b20gTWFyZ2luXCIgXCJDU0kgUHMgOyBQcyByXCIgXCJTZXQgdG9wIGFuZCBib3R0b20gbWFyZ2lucyBvZiB0aGUgdmlld3BvcnQgW3RvcDtib3R0b21dIChkZWZhdWx0ID0gdmlld3BvcnQgc2l6ZSkuXCJcbiAgICovXG4gIHB1YmxpYyBzZXRTY3JvbGxSZWdpb24ocGFyYW1zOiBJUGFyYW1zKTogYm9vbGVhbiB7XG4gICAgY29uc3QgdG9wID0gcGFyYW1zLnBhcmFtc1swXSB8fCAxO1xuICAgIGxldCBib3R0b206IG51bWJlcjtcblxuICAgIGlmIChwYXJhbXMubGVuZ3RoIDwgMiB8fCAoYm90dG9tID0gcGFyYW1zLnBhcmFtc1sxXSkgPiB0aGlzLl9idWZmZXJTZXJ2aWNlLnJvd3MgfHwgYm90dG9tID09PSAwKSB7XG4gICAgICBib3R0b20gPSB0aGlzLl9idWZmZXJTZXJ2aWNlLnJvd3M7XG4gICAgfVxuXG4gICAgaWYgKGJvdHRvbSA+IHRvcCkge1xuICAgICAgdGhpcy5fYWN0aXZlQnVmZmVyLnNjcm9sbFRvcCA9IHRvcCAtIDE7XG4gICAgICB0aGlzLl9hY3RpdmVCdWZmZXIuc2Nyb2xsQm90dG9tID0gYm90dG9tIC0gMTtcbiAgICAgIHRoaXMuX3NldEN1cnNvcigwLCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQ1NJIFBzIDsgUHMgOyBQcyB0IC0gVmFyaW91cyB3aW5kb3cgbWFuaXB1bGF0aW9ucyBhbmQgcmVwb3J0cyAoeHRlcm0pXG4gICAqXG4gICAqIE5vdGU6IE9ubHkgdGhvc2UgbGlzdGVkIGJlbG93IGFyZSBzdXBwb3J0ZWQuIEFsbCBvdGhlcnMgYXJlIGxlZnQgdG8gaW50ZWdyYXRvcnMgYW5kXG4gICAqIG5lZWQgc3BlY2lhbCB0cmVhdG1lbnQgYmFzZWQgb24gdGhlIGVtYmVkZGluZyBlbnZpcm9ubWVudC5cbiAgICpcbiAgICogICAgUHMgPSAxIDQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VwcG9ydGVkXG4gICAqICAgICAgUmVwb3J0IHh0ZXJtIHRleHQgYXJlYSBzaXplIGluIHBpeGVscy5cbiAgICogICAgICBSZXN1bHQgaXMgQ1NJIDQgOyBoZWlnaHQgOyB3aWR0aCB0XG4gICAqICAgIFBzID0gMTQgOyAyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdCBpbXBsZW1lbnRlZFxuICAgKiAgICBQcyA9IDE2ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXBwb3J0ZWRcbiAgICogICAgICBSZXBvcnQgeHRlcm0gY2hhcmFjdGVyIGNlbGwgc2l6ZSBpbiBwaXhlbHMuXG4gICAqICAgICAgUmVzdWx0IGlzIENTSSA2IDsgaGVpZ2h0IDsgd2lkdGggdFxuICAgKiAgICBQcyA9IDE4ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXBwb3J0ZWRcbiAgICogICAgICBSZXBvcnQgdGhlIHNpemUgb2YgdGhlIHRleHQgYXJlYSBpbiBjaGFyYWN0ZXJzLlxuICAgKiAgICAgIFJlc3VsdCBpcyBDU0kgOCA7IGhlaWdodCA7IHdpZHRoIHRcbiAgICogICAgUHMgPSAyMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VwcG9ydGVkXG4gICAqICAgICAgUmVwb3J0IHh0ZXJtIHdpbmRvdydzIGljb24gbGFiZWwuXG4gICAqICAgICAgUmVzdWx0IGlzIE9TQyBMIGxhYmVsIFNUXG4gICAqICAgIFBzID0gMjEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1cHBvcnRlZFxuICAgKiAgICAgIFJlcG9ydCB4dGVybSB3aW5kb3cncyB0aXRsZS5cbiAgICogICAgICBSZXN1bHQgaXMgT1NDIGwgbGFiZWwgU1RcbiAgICogICAgUHMgPSAyMiA7IDAgIC0+IFNhdmUgeHRlcm0gaWNvbiBhbmQgd2luZG93IHRpdGxlIG9uIHN0YWNrLiAgICAgICAgc3VwcG9ydGVkXG4gICAqICAgIFBzID0gMjIgOyAxICAtPiBTYXZlIHh0ZXJtIGljb24gdGl0bGUgb24gc3RhY2suICAgICAgICAgICAgICAgICAgIHN1cHBvcnRlZFxuICAgKiAgICBQcyA9IDIyIDsgMiAgLT4gU2F2ZSB4dGVybSB3aW5kb3cgdGl0bGUgb24gc3RhY2suICAgICAgICAgICAgICAgICBzdXBwb3J0ZWRcbiAgICogICAgUHMgPSAyMyA7IDAgIC0+IFJlc3RvcmUgeHRlcm0gaWNvbiBhbmQgd2luZG93IHRpdGxlIGZyb20gc3RhY2suICAgc3VwcG9ydGVkXG4gICAqICAgIFBzID0gMjMgOyAxICAtPiBSZXN0b3JlIHh0ZXJtIGljb24gdGl0bGUgZnJvbSBzdGFjay4gICAgICAgICAgICAgIHN1cHBvcnRlZFxuICAgKiAgICBQcyA9IDIzIDsgMiAgLT4gUmVzdG9yZSB4dGVybSB3aW5kb3cgdGl0bGUgZnJvbSBzdGFjay4gICAgICAgICAgICBzdXBwb3J0ZWRcbiAgICogICAgUHMgPj0gMjQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90IGltcGxlbWVudGVkXG4gICAqL1xuICBwdWJsaWMgd2luZG93T3B0aW9ucyhwYXJhbXM6IElQYXJhbXMpOiBib29sZWFuIHtcbiAgICBpZiAoIXBhcmFtVG9XaW5kb3dPcHRpb24ocGFyYW1zLnBhcmFtc1swXSwgdGhpcy5fb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy53aW5kb3dPcHRpb25zKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHNlY29uZCA9IChwYXJhbXMubGVuZ3RoID4gMSkgPyBwYXJhbXMucGFyYW1zWzFdIDogMDtcbiAgICBzd2l0Y2ggKHBhcmFtcy5wYXJhbXNbMF0pIHtcbiAgICAgIGNhc2UgMTQ6ICAvLyBHZXRXaW5TaXplUGl4ZWxzLCByZXR1cm5zIENTSSA0IDsgaGVpZ2h0IDsgd2lkdGggdFxuICAgICAgICBpZiAoc2Vjb25kICE9PSAyKSB7XG4gICAgICAgICAgdGhpcy5fb25SZXF1ZXN0V2luZG93c09wdGlvbnNSZXBvcnQuZmlyZShXaW5kb3dzT3B0aW9uc1JlcG9ydFR5cGUuR0VUX1dJTl9TSVpFX1BJWEVMUyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE2OiAgLy8gR2V0Q2VsbFNpemVQaXhlbHMsIHJldHVybnMgQ1NJIDYgOyBoZWlnaHQgOyB3aWR0aCB0XG4gICAgICAgIHRoaXMuX29uUmVxdWVzdFdpbmRvd3NPcHRpb25zUmVwb3J0LmZpcmUoV2luZG93c09wdGlvbnNSZXBvcnRUeXBlLkdFVF9DRUxMX1NJWkVfUElYRUxTKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE4OiAgLy8gR2V0V2luU2l6ZUNoYXJzLCByZXR1cm5zIENTSSA4IDsgaGVpZ2h0IDsgd2lkdGggdFxuICAgICAgICBpZiAodGhpcy5fYnVmZmVyU2VydmljZSkge1xuICAgICAgICAgIHRoaXMuX2NvcmVTZXJ2aWNlLnRyaWdnZXJEYXRhRXZlbnQoYCR7QzAuRVNDfVs4OyR7dGhpcy5fYnVmZmVyU2VydmljZS5yb3dzfTske3RoaXMuX2J1ZmZlclNlcnZpY2UuY29sc310YCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIyOiAgLy8gUHVzaFRpdGxlXG4gICAgICAgIGlmIChzZWNvbmQgPT09IDAgfHwgc2Vjb25kID09PSAyKSB7XG4gICAgICAgICAgdGhpcy5fd2luZG93VGl0bGVTdGFjay5wdXNoKHRoaXMuX3dpbmRvd1RpdGxlKTtcbiAgICAgICAgICBpZiAodGhpcy5fd2luZG93VGl0bGVTdGFjay5sZW5ndGggPiBTVEFDS19MSU1JVCkge1xuICAgICAgICAgICAgdGhpcy5fd2luZG93VGl0bGVTdGFjay5zaGlmdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc2Vjb25kID09PSAwIHx8IHNlY29uZCA9PT0gMSkge1xuICAgICAgICAgIHRoaXMuX2ljb25OYW1lU3RhY2sucHVzaCh0aGlzLl9pY29uTmFtZSk7XG4gICAgICAgICAgaWYgKHRoaXMuX2ljb25OYW1lU3RhY2subGVuZ3RoID4gU1RBQ0tfTElNSVQpIHtcbiAgICAgICAgICAgIHRoaXMuX2ljb25OYW1lU3RhY2suc2hpZnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIzOiAgLy8gUG9wVGl0bGVcbiAgICAgICAgaWYgKHNlY29uZCA9PT0gMCB8fCBzZWNvbmQgPT09IDIpIHtcbiAgICAgICAgICBpZiAodGhpcy5fd2luZG93VGl0bGVTdGFjay5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VGl0bGUodGhpcy5fd2luZG93VGl0bGVTdGFjay5wb3AoKSEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc2Vjb25kID09PSAwIHx8IHNlY29uZCA9PT0gMSkge1xuICAgICAgICAgIGlmICh0aGlzLl9pY29uTmFtZVN0YWNrLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5zZXRJY29uTmFtZSh0aGlzLl9pY29uTmFtZVN0YWNrLnBvcCgpISk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIENTSSBzXG4gICAqIEVTQyA3XG4gICAqICAgU2F2ZSBjdXJzb3IgKEFOU0kuU1lTKS5cbiAgICpcbiAgICogQHZ0OiAjUFtUT0RPLi4uXSAgQ1NJIFNDT1NDICAgXCJTYXZlIEN1cnNvclwiICAgXCJDU0kgc1wiICAgXCJTYXZlIGN1cnNvciBwb3NpdGlvbiwgY2hhcm1hcCBhbmQgdGV4dCBhdHRyaWJ1dGVzLlwiXG4gICAqIEB2dDogI1kgRVNDICBTQyAgIFwiU2F2ZSBDdXJzb3JcIiAgIFwiRVNDIDdcIiAgIFwiU2F2ZSBjdXJzb3IgcG9zaXRpb24sIGNoYXJtYXAgYW5kIHRleHQgYXR0cmlidXRlcy5cIlxuICAgKi9cbiAgcHVibGljIHNhdmVDdXJzb3IocGFyYW1zPzogSVBhcmFtcyk6IGJvb2xlYW4ge1xuICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci5zYXZlZFggPSB0aGlzLl9hY3RpdmVCdWZmZXIueDtcbiAgICB0aGlzLl9hY3RpdmVCdWZmZXIuc2F2ZWRZID0gdGhpcy5fYWN0aXZlQnVmZmVyLnliYXNlICsgdGhpcy5fYWN0aXZlQnVmZmVyLnk7XG4gICAgdGhpcy5fYWN0aXZlQnVmZmVyLnNhdmVkQ3VyQXR0ckRhdGEuZmcgPSB0aGlzLl9jdXJBdHRyRGF0YS5mZztcbiAgICB0aGlzLl9hY3RpdmVCdWZmZXIuc2F2ZWRDdXJBdHRyRGF0YS5iZyA9IHRoaXMuX2N1ckF0dHJEYXRhLmJnO1xuICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci5zYXZlZENoYXJzZXQgPSB0aGlzLl9jaGFyc2V0U2VydmljZS5jaGFyc2V0O1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cblxuICAvKipcbiAgICogQ1NJIHVcbiAgICogRVNDIDhcbiAgICogICBSZXN0b3JlIGN1cnNvciAoQU5TSS5TWVMpLlxuICAgKlxuICAgKiBAdnQ6ICNQW1RPRE8uLi5dICBDU0kgU0NPUkMgXCJSZXN0b3JlIEN1cnNvclwiICBcIkNTSSB1XCIgICBcIlJlc3RvcmUgY3Vyc29yIHBvc2l0aW9uLCBjaGFybWFwIGFuZCB0ZXh0IGF0dHJpYnV0ZXMuXCJcbiAgICogQHZ0OiAjWSBFU0MgIFJDIFwiUmVzdG9yZSBDdXJzb3JcIiAgXCJFU0MgOFwiICAgXCJSZXN0b3JlIGN1cnNvciBwb3NpdGlvbiwgY2hhcm1hcCBhbmQgdGV4dCBhdHRyaWJ1dGVzLlwiXG4gICAqL1xuICBwdWJsaWMgcmVzdG9yZUN1cnNvcihwYXJhbXM/OiBJUGFyYW1zKTogYm9vbGVhbiB7XG4gICAgdGhpcy5fYWN0aXZlQnVmZmVyLnggPSB0aGlzLl9hY3RpdmVCdWZmZXIuc2F2ZWRYIHx8IDA7XG4gICAgdGhpcy5fYWN0aXZlQnVmZmVyLnkgPSBNYXRoLm1heCh0aGlzLl9hY3RpdmVCdWZmZXIuc2F2ZWRZIC0gdGhpcy5fYWN0aXZlQnVmZmVyLnliYXNlLCAwKTtcbiAgICB0aGlzLl9jdXJBdHRyRGF0YS5mZyA9IHRoaXMuX2FjdGl2ZUJ1ZmZlci5zYXZlZEN1ckF0dHJEYXRhLmZnO1xuICAgIHRoaXMuX2N1ckF0dHJEYXRhLmJnID0gdGhpcy5fYWN0aXZlQnVmZmVyLnNhdmVkQ3VyQXR0ckRhdGEuYmc7XG4gICAgdGhpcy5fY2hhcnNldFNlcnZpY2UuY2hhcnNldCA9ICh0aGlzIGFzIGFueSkuX3NhdmVkQ2hhcnNldDtcbiAgICBpZiAodGhpcy5fYWN0aXZlQnVmZmVyLnNhdmVkQ2hhcnNldCkge1xuICAgICAgdGhpcy5fY2hhcnNldFNlcnZpY2UuY2hhcnNldCA9IHRoaXMuX2FjdGl2ZUJ1ZmZlci5zYXZlZENoYXJzZXQ7XG4gICAgfVxuICAgIHRoaXMuX3Jlc3RyaWN0Q3Vyc29yKCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBPU0MgMjsgPGRhdGE+IFNUIChzZXQgd2luZG93IHRpdGxlKVxuICAgKiAgIFByb3h5IHRvIHNldCB3aW5kb3cgdGl0bGUuXG4gICAqXG4gICAqIEB2dDogI1BbSWNvbiBuYW1lIGlzIG5vdCBleHBvc2VkLl0gICBPU0MgICAgMCAgIFwiU2V0IFdpbmRvd3MgVGl0bGUgYW5kIEljb24gTmFtZVwiICBcIk9TQyAwIDsgUHQgQkVMXCIgIFwiU2V0IHdpbmRvdyB0aXRsZSBhbmQgaWNvbiBuYW1lLlwiXG4gICAqIEljb24gbmFtZSBpcyBub3Qgc3VwcG9ydGVkLiBGb3IgV2luZG93IFRpdGxlIHNlZSBiZWxvdy5cbiAgICpcbiAgICogQHZ0OiAjWSAgICAgT1NDICAgIDIgICBcIlNldCBXaW5kb3dzIFRpdGxlXCIgIFwiT1NDIDIgOyBQdCBCRUxcIiAgXCJTZXQgd2luZG93IHRpdGxlLlwiXG4gICAqIHh0ZXJtLmpzIGRvZXMgbm90IG1hbmlwdWxhdGUgdGhlIHRpdGxlIGRpcmVjdGx5LCBpbnN0ZWFkIGV4cG9zZXMgY2hhbmdlcyB2aWEgdGhlIGV2ZW50IGBUZXJtaW5hbC5vblRpdGxlQ2hhbmdlYC5cbiAgICovXG4gIHB1YmxpYyBzZXRUaXRsZShkYXRhOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICB0aGlzLl93aW5kb3dUaXRsZSA9IGRhdGE7XG4gICAgdGhpcy5fb25UaXRsZUNoYW5nZS5maXJlKGRhdGEpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIE9TQyAxOyA8ZGF0YT4gU1RcbiAgICogTm90ZTogSWNvbiBuYW1lIGlzIG5vdCBleHBvc2VkLlxuICAgKi9cbiAgcHVibGljIHNldEljb25OYW1lKGRhdGE6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHRoaXMuX2ljb25OYW1lID0gZGF0YTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPU0MgNDsgPG51bT4gOyA8dGV4dD4gU1QgKHNldCBBTlNJIGNvbG9yIDxudW0+IHRvIDx0ZXh0PilcbiAgICpcbiAgICogQHZ0OiAjWSAgICBPU0MgICAgNCAgICBcIlNldCBBTlNJIGNvbG9yXCIgICBcIk9TQyA0IDsgYyA7IHNwZWMgQkVMXCIgXCJDaGFuZ2UgY29sb3IgbnVtYmVyIGBjYCB0byB0aGUgY29sb3Igc3BlY2lmaWVkIGJ5IGBzcGVjYC5cIlxuICAgKiBgY2AgaXMgdGhlIGNvbG9yIGluZGV4IGJldHdlZW4gMCBhbmQgMjU1LiBUaGUgY29sb3IgZm9ybWF0IG9mIGBzcGVjYCBpcyBkZXJpdmVkIGZyb20gYFhQYXJzZUNvbG9yYCAoc2VlIE9TQyAxMCBmb3Igc3VwcG9ydGVkIGZvcm1hdHMpLlxuICAgKiBUaGVyZSBtYXkgYmUgbXVsdGlwZSBgYyA7IHNwZWNgIHBhaXJzIHByZXNlbnQgaW4gdGhlIHNhbWUgaW5zdHJ1Y3Rpb24uXG4gICAqIElmIGBzcGVjYCBjb250YWlucyBgP2AgdGhlIHRlcm1pbmFsIHJldHVybnMgYSBzZXF1ZW5jZSB3aXRoIHRoZSBjdXJyZW50bHkgc2V0IGNvbG9yLlxuICAgKi9cbiAgcHVibGljIHNldE9yUmVwb3J0SW5kZXhlZENvbG9yKGRhdGE6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGV2ZW50OiBJQ29sb3JFdmVudCA9IFtdO1xuICAgIGNvbnN0IHNsb3RzID0gZGF0YS5zcGxpdCgnOycpO1xuICAgIHdoaWxlIChzbG90cy5sZW5ndGggPiAxKSB7XG4gICAgICBjb25zdCBpZHggPSBzbG90cy5zaGlmdCgpIGFzIHN0cmluZztcbiAgICAgIGNvbnN0IHNwZWMgPSBzbG90cy5zaGlmdCgpIGFzIHN0cmluZztcbiAgICAgIGlmICgvXlxcZCskLy5leGVjKGlkeCkpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBwYXJzZUludChpZHgpO1xuICAgICAgICBpZiAoMCA8PSBpbmRleCAmJiBpbmRleCA8IDI1Nikge1xuICAgICAgICAgIGlmIChzcGVjID09PSAnPycpIHtcbiAgICAgICAgICAgIGV2ZW50LnB1c2goeyB0eXBlOiBDb2xvclJlcXVlc3RUeXBlLlJFUE9SVCwgaW5kZXggfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gcGFyc2VDb2xvcihzcGVjKTtcbiAgICAgICAgICAgIGlmIChjb2xvcikge1xuICAgICAgICAgICAgICBldmVudC5wdXNoKHsgdHlwZTogQ29sb3JSZXF1ZXN0VHlwZS5TRVQsIGluZGV4LCBjb2xvciB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGV2ZW50Lmxlbmd0aCkge1xuICAgICAgdGhpcy5fb25Db2xvci5maXJlKGV2ZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBzcGVjaWFsIGNvbG9ycyAtIE9TQyAxMCB8IDExIHwgMTJcbiAgcHJpdmF0ZSBfc3BlY2lhbENvbG9ycyA9IFtDb2xvckluZGV4LkZPUkVHUk9VTkQsIENvbG9ySW5kZXguQkFDS0dST1VORCwgQ29sb3JJbmRleC5DVVJTT1JdO1xuXG4gIC8qKlxuICAgKiBBcHBseSBjb2xvcnMgcmVxdWVzdHMgZm9yIHNwZWNpYWwgY29sb3JzIGluIE9TQyAxMCB8IDExIHwgMTIuXG4gICAqIFNpbmNlIHRoZXNlIGNvbW1hbmRzIGFyZSBzdGFja2luZyBmcm9tIG11bHRpcGxlIHBhcmFtZXRlcnMsXG4gICAqIHdlIGhhbmRsZSB0aGVtIGluIGEgbG9vcCB3aXRoIGFuIGVudHJ5IG9mZnNldCB0byBgX3NwZWNpYWxDb2xvcnNgLlxuICAgKi9cbiAgcHJpdmF0ZSBfc2V0T3JSZXBvcnRTcGVjaWFsQ29sb3IoZGF0YTogc3RyaW5nLCBvZmZzZXQ6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHNsb3RzID0gZGF0YS5zcGxpdCgnOycpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xvdHMubGVuZ3RoOyArK2ksICsrb2Zmc2V0KSB7XG4gICAgICBpZiAob2Zmc2V0ID49IHRoaXMuX3NwZWNpYWxDb2xvcnMubGVuZ3RoKSBicmVhaztcbiAgICAgIGlmIChzbG90c1tpXSA9PT0gJz8nKSB7XG4gICAgICAgIHRoaXMuX29uQ29sb3IuZmlyZShbeyB0eXBlOiBDb2xvclJlcXVlc3RUeXBlLlJFUE9SVCwgaW5kZXg6IHRoaXMuX3NwZWNpYWxDb2xvcnNbb2Zmc2V0XSB9XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBjb2xvciA9IHBhcnNlQ29sb3Ioc2xvdHNbaV0pO1xuICAgICAgICBpZiAoY29sb3IpIHtcbiAgICAgICAgICB0aGlzLl9vbkNvbG9yLmZpcmUoW3sgdHlwZTogQ29sb3JSZXF1ZXN0VHlwZS5TRVQsIGluZGV4OiB0aGlzLl9zcGVjaWFsQ29sb3JzW29mZnNldF0sIGNvbG9yIH1dKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPU0MgMTAgOyA8eGNvbG9yIG5hbWU+fDw/PiBTVCAtIHNldCBvciBxdWVyeSBkZWZhdWx0IGZvcmVncm91bmQgY29sb3JcbiAgICpcbiAgICogQHZ0OiAjWSAgT1NDICAgMTAgICAgXCJTZXQgb3IgcXVlcnkgZGVmYXVsdCBmb3JlZ3JvdW5kIGNvbG9yXCIgICBcIk9TQyAxMCA7IFB0IEJFTFwiICBcIlNldCBvciBxdWVyeSBkZWZhdWx0IGZvcmVncm91bmQgY29sb3IuXCJcbiAgICogVG8gc2V0IHRoZSBjb2xvciwgdGhlIGZvbGxvd2luZyBjb2xvciBzcGVjaWZpY2F0aW9uIGZvcm1hdHMgYXJlIHN1cHBvcnRlZDpcbiAgICogLSBgcmdiOjxyZWQ+LzxncmVlbj4vPGJsdWU+YCBmb3IgIGA8cmVkPiwgPGdyZWVuPiwgPGJsdWU+YCBpbiBgaCB8IGhoIHwgaGhoIHwgaGhoaGAsIHdoZXJlXG4gICAqICAgYGhgIGlzIGEgc2luZ2xlIGhleGFkZWNpbWFsIGRpZ2l0IChjYXNlIGluc2lnbmlmaWNhbnQpLiBUaGUgZGlmZmVyZW50IHdpZHRocyBzY2FsZVxuICAgKiAgIGZyb20gNCBiaXQgKGBoYCkgdG8gMTYgYml0IChgaGhoaGApIGFuZCBnZXQgY29udmVydGVkIHRvIDggYml0IChgaGhgKS5cbiAgICogLSBgI1JHQmAgLSA0IGJpdHMgcGVyIGNoYW5uZWwsIGV4cGFuZGVkIHRvIGAjUjBHMEIwYFxuICAgKiAtIGAjUlJHR0JCYCAtIDggYml0cyBwZXIgY2hhbm5lbFxuICAgKiAtIGAjUlJSR0dHQkJCYCAtIDEyIGJpdHMgcGVyIGNoYW5uZWwsIHRydW5jYXRlZCB0byBgI1JSR0dCQmBcbiAgICogLSBgI1JSUlJHR0dHQkJCQmAgLSAxNiBiaXRzIHBlciBjaGFubmVsLCB0cnVuY2F0ZWQgdG8gYCNSUkdHQkJgXG4gICAqXG4gICAqICoqTm90ZToqKiBYMTEgbmFtZWQgY29sb3JzIGFyZSBjdXJyZW50bHkgdW5zdXBwb3J0ZWQuXG4gICAqXG4gICAqIElmIGBQdGAgY29udGFpbnMgYD9gIGluc3RlYWQgb2YgYSBjb2xvciBzcGVjaWZpY2F0aW9uLCB0aGUgdGVybWluYWxcbiAgICogcmV0dXJucyBhIHNlcXVlbmNlIHdpdGggdGhlIGN1cnJlbnQgZGVmYXVsdCBmb3JlZ3JvdW5kIGNvbG9yXG4gICAqICh1c2UgdGhhdCBzZXF1ZW5jZSB0byByZXN0b3JlIHRoZSBjb2xvciBhZnRlciBjaGFuZ2VzKS5cbiAgICpcbiAgICogKipOb3RlOioqIE90aGVyIHRoYW4geHRlcm0sIHh0ZXJtLmpzIGRvZXMgbm90IHN1cHBvcnQgT1NDIDEyIC0gMTkuXG4gICAqIFRoZXJlZm9yZSBzdGFja2luZyBtdWx0aXBsZSBgUHRgIHNlcGFyYXRlZCBieSBgO2Agb25seSB3b3JrcyBmb3IgdGhlIGZpcnN0IHR3byBlbnRyaWVzLlxuICAgKi9cbiAgcHVibGljIHNldE9yUmVwb3J0RmdDb2xvcihkYXRhOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc2V0T3JSZXBvcnRTcGVjaWFsQ29sb3IoZGF0YSwgMCk7XG4gIH1cblxuICAvKipcbiAgICogT1NDIDExIDsgPHhjb2xvciBuYW1lPnw8Pz4gU1QgLSBzZXQgb3IgcXVlcnkgZGVmYXVsdCBiYWNrZ3JvdW5kIGNvbG9yXG4gICAqXG4gICAqIEB2dDogI1kgIE9TQyAgIDExICAgIFwiU2V0IG9yIHF1ZXJ5IGRlZmF1bHQgYmFja2dyb3VuZCBjb2xvclwiICAgXCJPU0MgMTEgOyBQdCBCRUxcIiAgXCJTYW1lIGFzIE9TQyAxMCwgYnV0IGZvciBkZWZhdWx0IGJhY2tncm91bmQuXCJcbiAgICovXG4gIHB1YmxpYyBzZXRPclJlcG9ydEJnQ29sb3IoZGF0YTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3NldE9yUmVwb3J0U3BlY2lhbENvbG9yKGRhdGEsIDEpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9TQyAxMiA7IDx4Y29sb3IgbmFtZT58PD8+IFNUIC0gc2V0IG9yIHF1ZXJ5IGRlZmF1bHQgY3Vyc29yIGNvbG9yXG4gICAqXG4gICAqIEB2dDogI1kgIE9TQyAgIDEyICAgIFwiU2V0IG9yIHF1ZXJ5IGRlZmF1bHQgY3Vyc29yIGNvbG9yXCIgICBcIk9TQyAxMiA7IFB0IEJFTFwiICBcIlNhbWUgYXMgT1NDIDEwLCBidXQgZm9yIGRlZmF1bHQgY3Vyc29yIGNvbG9yLlwiXG4gICAqL1xuICBwdWJsaWMgc2V0T3JSZXBvcnRDdXJzb3JDb2xvcihkYXRhOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc2V0T3JSZXBvcnRTcGVjaWFsQ29sb3IoZGF0YSwgMik7XG4gIH1cblxuICAvKipcbiAgICogT1NDIDEwNCA7IDxudW0+IFNUIC0gcmVzdG9yZSBBTlNJIGNvbG9yIDxudW0+XG4gICAqXG4gICAqIEB2dDogI1kgIE9TQyAgIDEwNCAgICBcIlJlc2V0IEFOU0kgY29sb3JcIiAgIFwiT1NDIDEwNCA7IGMgQkVMXCIgXCJSZXNldCBjb2xvciBudW1iZXIgYGNgIHRvIHRoZW1lZCBjb2xvci5cIlxuICAgKiBgY2AgaXMgdGhlIGNvbG9yIGluZGV4IGJldHdlZW4gMCBhbmQgMjU1LiBUaGlzIGZ1bmN0aW9uIHJlc3RvcmVzIHRoZSBkZWZhdWx0IGNvbG9yIGZvciBgY2AgYXNcbiAgICogc3BlY2lmaWVkIGJ5IHRoZSBsb2FkZWQgdGhlbWUuIEFueSBudW1iZXIgb2YgYGNgIHBhcmFtZXRlcnMgbWF5IGJlIGdpdmVuLlxuICAgKiBJZiBubyBwYXJhbWV0ZXJzIGFyZSBnaXZlbiwgdGhlIGVudGlyZSBpbmRleGVkIGNvbG9yIHRhYmxlIHdpbGwgYmUgcmVzZXQuXG4gICAqL1xuICBwdWJsaWMgcmVzdG9yZUluZGV4ZWRDb2xvcihkYXRhOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAoIWRhdGEpIHtcbiAgICAgIHRoaXMuX29uQ29sb3IuZmlyZShbeyB0eXBlOiBDb2xvclJlcXVlc3RUeXBlLlJFU1RPUkUgfV0pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGV2ZW50OiBJQ29sb3JFdmVudCA9IFtdO1xuICAgIGNvbnN0IHNsb3RzID0gZGF0YS5zcGxpdCgnOycpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xvdHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmICgvXlxcZCskLy5leGVjKHNsb3RzW2ldKSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KHNsb3RzW2ldKTtcbiAgICAgICAgaWYgKDAgPD0gaW5kZXggJiYgaW5kZXggPCAyNTYpIHtcbiAgICAgICAgICBldmVudC5wdXNoKHsgdHlwZTogQ29sb3JSZXF1ZXN0VHlwZS5SRVNUT1JFLCBpbmRleCB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZXZlbnQubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9vbkNvbG9yLmZpcmUoZXZlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPU0MgMTEwIFNUIC0gcmVzdG9yZSBkZWZhdWx0IGZvcmVncm91bmQgY29sb3JcbiAgICpcbiAgICogQHZ0OiAjWSAgT1NDICAgMTEwICAgIFwiUmVzdG9yZSBkZWZhdWx0IGZvcmVncm91bmQgY29sb3JcIiAgIFwiT1NDIDExMCBCRUxcIiAgXCJSZXN0b3JlIGRlZmF1bHQgZm9yZWdyb3VuZCB0byB0aGVtZWQgY29sb3IuXCJcbiAgICovXG4gIHB1YmxpYyByZXN0b3JlRmdDb2xvcihkYXRhOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICB0aGlzLl9vbkNvbG9yLmZpcmUoW3sgdHlwZTogQ29sb3JSZXF1ZXN0VHlwZS5SRVNUT1JFLCBpbmRleDogQ29sb3JJbmRleC5GT1JFR1JPVU5EIH1dKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPU0MgMTExIFNUIC0gcmVzdG9yZSBkZWZhdWx0IGJhY2tncm91bmQgY29sb3JcbiAgICpcbiAgICogQHZ0OiAjWSAgT1NDICAgMTExICAgIFwiUmVzdG9yZSBkZWZhdWx0IGJhY2tncm91bmQgY29sb3JcIiAgIFwiT1NDIDExMSBCRUxcIiAgXCJSZXN0b3JlIGRlZmF1bHQgYmFja2dyb3VuZCB0byB0aGVtZWQgY29sb3IuXCJcbiAgICovXG4gIHB1YmxpYyByZXN0b3JlQmdDb2xvcihkYXRhOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICB0aGlzLl9vbkNvbG9yLmZpcmUoW3sgdHlwZTogQ29sb3JSZXF1ZXN0VHlwZS5SRVNUT1JFLCBpbmRleDogQ29sb3JJbmRleC5CQUNLR1JPVU5EIH1dKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPU0MgMTEyIFNUIC0gcmVzdG9yZSBkZWZhdWx0IGN1cnNvciBjb2xvclxuICAgKlxuICAgKiBAdnQ6ICNZICBPU0MgICAxMTIgICAgXCJSZXN0b3JlIGRlZmF1bHQgY3Vyc29yIGNvbG9yXCIgICBcIk9TQyAxMTIgQkVMXCIgIFwiUmVzdG9yZSBkZWZhdWx0IGN1cnNvciB0byB0aGVtZWQgY29sb3IuXCJcbiAgICovXG4gIHB1YmxpYyByZXN0b3JlQ3Vyc29yQ29sb3IoZGF0YTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgdGhpcy5fb25Db2xvci5maXJlKFt7IHR5cGU6IENvbG9yUmVxdWVzdFR5cGUuUkVTVE9SRSwgaW5kZXg6IENvbG9ySW5kZXguQ1VSU09SIH1dKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFU0MgRVxuICAgKiBDMS5ORUxcbiAgICogICBERUMgbW5lbW9uaWM6IE5FTCAoaHR0cHM6Ly92dDEwMC5uZXQvZG9jcy92dDUxMC1ybS9ORUwpXG4gICAqICAgTW92ZXMgY3Vyc29yIHRvIGZpcnN0IHBvc2l0aW9uIG9uIG5leHQgbGluZS5cbiAgICpcbiAgICogQHZ0OiAjWSAgIEMxICAgIE5FTCAgIFwiTmV4dCBMaW5lXCIgICBcIlxceDg1XCIgICAgXCJNb3ZlIHRoZSBjdXJzb3IgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgbmV4dCByb3cuXCJcbiAgICogQHZ0OiAjWSAgIEVTQyAgIE5FTCAgIFwiTmV4dCBMaW5lXCIgICBcIkVTQyBFXCIgICBcIk1vdmUgdGhlIGN1cnNvciB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBuZXh0IHJvdy5cIlxuICAgKi9cbiAgcHVibGljIG5leHRMaW5lKCk6IGJvb2xlYW4ge1xuICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci54ID0gMDtcbiAgICB0aGlzLmluZGV4KCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogRVNDID1cbiAgICogICBERUMgbW5lbW9uaWM6IERFQ0tQQU0gKGh0dHBzOi8vdnQxMDAubmV0L2RvY3MvdnQ1MTAtcm0vREVDS1BBTS5odG1sKVxuICAgKiAgIEVuYWJsZXMgdGhlIG51bWVyaWMga2V5cGFkIHRvIHNlbmQgYXBwbGljYXRpb24gc2VxdWVuY2VzIHRvIHRoZSBob3N0LlxuICAgKi9cbiAgcHVibGljIGtleXBhZEFwcGxpY2F0aW9uTW9kZSgpOiBib29sZWFuIHtcbiAgICB0aGlzLl9sb2dTZXJ2aWNlLmRlYnVnKCdTZXJpYWwgcG9ydCByZXF1ZXN0ZWQgYXBwbGljYXRpb24ga2V5cGFkLicpO1xuICAgIHRoaXMuX2NvcmVTZXJ2aWNlLmRlY1ByaXZhdGVNb2Rlcy5hcHBsaWNhdGlvbktleXBhZCA9IHRydWU7XG4gICAgdGhpcy5fb25SZXF1ZXN0U3luY1Njcm9sbEJhci5maXJlKCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogRVNDID5cbiAgICogICBERUMgbW5lbW9uaWM6IERFQ0tQTk0gKGh0dHBzOi8vdnQxMDAubmV0L2RvY3MvdnQ1MTAtcm0vREVDS1BOTS5odG1sKVxuICAgKiAgIEVuYWJsZXMgdGhlIGtleXBhZCB0byBzZW5kIG51bWVyaWMgY2hhcmFjdGVycyB0byB0aGUgaG9zdC5cbiAgICovXG4gIHB1YmxpYyBrZXlwYWROdW1lcmljTW9kZSgpOiBib29sZWFuIHtcbiAgICB0aGlzLl9sb2dTZXJ2aWNlLmRlYnVnKCdTd2l0Y2hpbmcgYmFjayB0byBub3JtYWwga2V5cGFkLicpO1xuICAgIHRoaXMuX2NvcmVTZXJ2aWNlLmRlY1ByaXZhdGVNb2Rlcy5hcHBsaWNhdGlvbktleXBhZCA9IGZhbHNlO1xuICAgIHRoaXMuX29uUmVxdWVzdFN5bmNTY3JvbGxCYXIuZmlyZSgpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEVTQyAlIEBcbiAgICogRVNDICUgR1xuICAgKiAgIFNlbGVjdCBkZWZhdWx0IGNoYXJhY3RlciBzZXQuIFVURi04IGlzIG5vdCBzdXBwb3J0ZWQgKHN0cmluZyBhcmUgdW5pY29kZSBhbnl3YXlzKVxuICAgKiAgIHRoZXJlZm9yZSBFU0MgJSBHIGRvZXMgdGhlIHNhbWUuXG4gICAqL1xuICBwdWJsaWMgc2VsZWN0RGVmYXVsdENoYXJzZXQoKTogYm9vbGVhbiB7XG4gICAgdGhpcy5fY2hhcnNldFNlcnZpY2Uuc2V0Z0xldmVsKDApO1xuICAgIHRoaXMuX2NoYXJzZXRTZXJ2aWNlLnNldGdDaGFyc2V0KDAsIERFRkFVTFRfQ0hBUlNFVCk7IC8vIFVTIChkZWZhdWx0KVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEVTQyAoIENcbiAgICogICBEZXNpZ25hdGUgRzAgQ2hhcmFjdGVyIFNldCwgVlQxMDAsIElTTyAyMDIyLlxuICAgKiBFU0MgKSBDXG4gICAqICAgRGVzaWduYXRlIEcxIENoYXJhY3RlciBTZXQgKElTTyAyMDIyLCBWVDEwMCkuXG4gICAqIEVTQyAqIENcbiAgICogICBEZXNpZ25hdGUgRzIgQ2hhcmFjdGVyIFNldCAoSVNPIDIwMjIsIFZUMjIwKS5cbiAgICogRVNDICsgQ1xuICAgKiAgIERlc2lnbmF0ZSBHMyBDaGFyYWN0ZXIgU2V0IChJU08gMjAyMiwgVlQyMjApLlxuICAgKiBFU0MgLSBDXG4gICAqICAgRGVzaWduYXRlIEcxIENoYXJhY3RlciBTZXQgKFZUMzAwKS5cbiAgICogRVNDIC4gQ1xuICAgKiAgIERlc2lnbmF0ZSBHMiBDaGFyYWN0ZXIgU2V0IChWVDMwMCkuXG4gICAqIEVTQyAvIENcbiAgICogICBEZXNpZ25hdGUgRzMgQ2hhcmFjdGVyIFNldCAoVlQzMDApLiBDID0gQSAgLT4gSVNPIExhdGluLTEgU3VwcGxlbWVudGFsLiAtIFN1cHBvcnRlZD9cbiAgICovXG4gIHB1YmxpYyBzZWxlY3RDaGFyc2V0KGNvbGxlY3RBbmRGbGFnOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAoY29sbGVjdEFuZEZsYWcubGVuZ3RoICE9PSAyKSB7XG4gICAgICB0aGlzLnNlbGVjdERlZmF1bHRDaGFyc2V0KCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGNvbGxlY3RBbmRGbGFnWzBdID09PSAnLycpIHtcbiAgICAgIHJldHVybiB0cnVlOyAgLy8gVE9ETzogSXMgdGhpcyBzdXBwb3J0ZWQ/XG4gICAgfVxuICAgIHRoaXMuX2NoYXJzZXRTZXJ2aWNlLnNldGdDaGFyc2V0KEdMRVZFTFtjb2xsZWN0QW5kRmxhZ1swXV0sIENIQVJTRVRTW2NvbGxlY3RBbmRGbGFnWzFdXSB8fCBERUZBVUxUX0NIQVJTRVQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEVTQyBEXG4gICAqIEMxLklORFxuICAgKiAgIERFQyBtbmVtb25pYzogSU5EIChodHRwczovL3Z0MTAwLm5ldC9kb2NzL3Z0NTEwLXJtL0lORC5odG1sKVxuICAgKiAgIE1vdmVzIHRoZSBjdXJzb3IgZG93biBvbmUgbGluZSBpbiB0aGUgc2FtZSBjb2x1bW4uXG4gICAqXG4gICAqIEB2dDogI1kgICBDMSAgICBJTkQgICBcIkluZGV4XCIgICBcIlxceDg0XCIgICAgXCJNb3ZlIHRoZSBjdXJzb3Igb25lIGxpbmUgZG93biBzY3JvbGxpbmcgaWYgbmVlZGVkLlwiXG4gICAqIEB2dDogI1kgICBFU0MgICBJTkQgICBcIkluZGV4XCIgICBcIkVTQyBEXCIgICBcIk1vdmUgdGhlIGN1cnNvciBvbmUgbGluZSBkb3duIHNjcm9sbGluZyBpZiBuZWVkZWQuXCJcbiAgICovXG4gIHB1YmxpYyBpbmRleCgpOiBib29sZWFuIHtcbiAgICB0aGlzLl9yZXN0cmljdEN1cnNvcigpO1xuICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci55Kys7XG4gICAgaWYgKHRoaXMuX2FjdGl2ZUJ1ZmZlci55ID09PSB0aGlzLl9hY3RpdmVCdWZmZXIuc2Nyb2xsQm90dG9tICsgMSkge1xuICAgICAgdGhpcy5fYWN0aXZlQnVmZmVyLnktLTtcbiAgICAgIHRoaXMuX2J1ZmZlclNlcnZpY2Uuc2Nyb2xsKHRoaXMuX2VyYXNlQXR0ckRhdGEoKSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9hY3RpdmVCdWZmZXIueSA+PSB0aGlzLl9idWZmZXJTZXJ2aWNlLnJvd3MpIHtcbiAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci55ID0gdGhpcy5fYnVmZmVyU2VydmljZS5yb3dzIC0gMTtcbiAgICB9XG4gICAgdGhpcy5fcmVzdHJpY3RDdXJzb3IoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFU0MgSFxuICAgKiBDMS5IVFNcbiAgICogICBERUMgbW5lbW9uaWM6IEhUUyAoaHR0cHM6Ly92dDEwMC5uZXQvZG9jcy92dDUxMC1ybS9IVFMuaHRtbClcbiAgICogICBTZXRzIGEgaG9yaXpvbnRhbCB0YWIgc3RvcCBhdCB0aGUgY29sdW1uIHBvc2l0aW9uIGluZGljYXRlZCBieVxuICAgKiAgIHRoZSB2YWx1ZSBvZiB0aGUgYWN0aXZlIGNvbHVtbiB3aGVuIHRoZSB0ZXJtaW5hbCByZWNlaXZlcyBhbiBIVFMuXG4gICAqXG4gICAqIEB2dDogI1kgICBDMSAgICBIVFMgICBcIkhvcml6b250YWwgVGFidWxhdGlvbiBTZXRcIiBcIlxceDg4XCIgICAgXCJQbGFjZXMgYSB0YWIgc3RvcCBhdCB0aGUgY3VycmVudCBjdXJzb3IgcG9zaXRpb24uXCJcbiAgICogQHZ0OiAjWSAgIEVTQyAgIEhUUyAgIFwiSG9yaXpvbnRhbCBUYWJ1bGF0aW9uIFNldFwiIFwiRVNDIEhcIiAgIFwiUGxhY2VzIGEgdGFiIHN0b3AgYXQgdGhlIGN1cnJlbnQgY3Vyc29yIHBvc2l0aW9uLlwiXG4gICAqL1xuICBwdWJsaWMgdGFiU2V0KCk6IGJvb2xlYW4ge1xuICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci50YWJzW3RoaXMuX2FjdGl2ZUJ1ZmZlci54XSA9IHRydWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogRVNDIE1cbiAgICogQzEuUklcbiAgICogICBERUMgbW5lbW9uaWM6IEhUU1xuICAgKiAgIE1vdmVzIHRoZSBjdXJzb3IgdXAgb25lIGxpbmUgaW4gdGhlIHNhbWUgY29sdW1uLiBJZiB0aGUgY3Vyc29yIGlzIGF0IHRoZSB0b3AgbWFyZ2luLFxuICAgKiAgIHRoZSBwYWdlIHNjcm9sbHMgZG93bi5cbiAgICpcbiAgICogQHZ0OiAjWSBFU0MgIElSIFwiUmV2ZXJzZSBJbmRleFwiIFwiRVNDIE1cIiAgXCJNb3ZlIHRoZSBjdXJzb3Igb25lIGxpbmUgdXAgc2Nyb2xsaW5nIGlmIG5lZWRlZC5cIlxuICAgKi9cbiAgcHVibGljIHJldmVyc2VJbmRleCgpOiBib29sZWFuIHtcbiAgICB0aGlzLl9yZXN0cmljdEN1cnNvcigpO1xuICAgIGlmICh0aGlzLl9hY3RpdmVCdWZmZXIueSA9PT0gdGhpcy5fYWN0aXZlQnVmZmVyLnNjcm9sbFRvcCkge1xuICAgICAgLy8gcG9zc2libHkgbW92ZSB0aGUgY29kZSBiZWxvdyB0byB0ZXJtLnJldmVyc2VTY3JvbGwoKTtcbiAgICAgIC8vIHRlc3Q6IGVjaG8gLW5lICdcXGVbMTsxSFxcZVs0NG1cXGVNXFxlWzBtJ1xuICAgICAgLy8gYmxhbmtMaW5lKHRydWUpIGlzIHh0ZXJtL2xpbnV4IGJlaGF2aW9yXG4gICAgICBjb25zdCBzY3JvbGxSZWdpb25IZWlnaHQgPSB0aGlzLl9hY3RpdmVCdWZmZXIuc2Nyb2xsQm90dG9tIC0gdGhpcy5fYWN0aXZlQnVmZmVyLnNjcm9sbFRvcDtcbiAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlci5saW5lcy5zaGlmdEVsZW1lbnRzKHRoaXMuX2FjdGl2ZUJ1ZmZlci55YmFzZSArIHRoaXMuX2FjdGl2ZUJ1ZmZlci55LCBzY3JvbGxSZWdpb25IZWlnaHQsIDEpO1xuICAgICAgdGhpcy5fYWN0aXZlQnVmZmVyLmxpbmVzLnNldCh0aGlzLl9hY3RpdmVCdWZmZXIueWJhc2UgKyB0aGlzLl9hY3RpdmVCdWZmZXIueSwgdGhpcy5fYWN0aXZlQnVmZmVyLmdldEJsYW5rTGluZSh0aGlzLl9lcmFzZUF0dHJEYXRhKCkpKTtcbiAgICAgIHRoaXMuX2RpcnR5Um93U2VydmljZS5tYXJrUmFuZ2VEaXJ0eSh0aGlzLl9hY3RpdmVCdWZmZXIuc2Nyb2xsVG9wLCB0aGlzLl9hY3RpdmVCdWZmZXIuc2Nyb2xsQm90dG9tKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fYWN0aXZlQnVmZmVyLnktLTtcbiAgICAgIHRoaXMuX3Jlc3RyaWN0Q3Vyc29yKCk7IC8vIHF1aWNrZml4IHRvIG5vdCBydW4gb3V0IG9mIGJvdW5kc1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFU0MgY1xuICAgKiAgIERFQyBtbmVtb25pYzogUklTIChodHRwczovL3Z0MTAwLm5ldC9kb2NzL3Z0NTEwLXJtL1JJUy5odG1sKVxuICAgKiAgIFJlc2V0IHRvIGluaXRpYWwgc3RhdGUuXG4gICAqL1xuICBwdWJsaWMgZnVsbFJlc2V0KCk6IGJvb2xlYW4ge1xuICAgIHRoaXMuX3BhcnNlci5yZXNldCgpO1xuICAgIHRoaXMuX29uUmVxdWVzdFJlc2V0LmZpcmUoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcbiAgICB0aGlzLl9jdXJBdHRyRGF0YSA9IERFRkFVTFRfQVRUUl9EQVRBLmNsb25lKCk7XG4gICAgdGhpcy5fZXJhc2VBdHRyRGF0YUludGVybmFsID0gREVGQVVMVF9BVFRSX0RBVEEuY2xvbmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBiYWNrX2NvbG9yX2VyYXNlIGZlYXR1cmUgZm9yIHh0ZXJtLlxuICAgKi9cbiAgcHJpdmF0ZSBfZXJhc2VBdHRyRGF0YSgpOiBJQXR0cmlidXRlRGF0YSB7XG4gICAgdGhpcy5fZXJhc2VBdHRyRGF0YUludGVybmFsLmJnICY9IH4oQXR0cmlidXRlcy5DTV9NQVNLIHwgMHhGRkZGRkYpO1xuICAgIHRoaXMuX2VyYXNlQXR0ckRhdGFJbnRlcm5hbC5iZyB8PSB0aGlzLl9jdXJBdHRyRGF0YS5iZyAmIH4weEZDMDAwMDAwO1xuICAgIHJldHVybiB0aGlzLl9lcmFzZUF0dHJEYXRhSW50ZXJuYWw7XG4gIH1cblxuICAvKipcbiAgICogRVNDIG5cbiAgICogRVNDIG9cbiAgICogRVNDIHxcbiAgICogRVNDIH1cbiAgICogRVNDIH5cbiAgICogICBERUMgbW5lbW9uaWM6IExTIChodHRwczovL3Z0MTAwLm5ldC9kb2NzL3Z0NTEwLXJtL0xTLmh0bWwpXG4gICAqICAgV2hlbiB5b3UgdXNlIGEgbG9ja2luZyBzaGlmdCwgdGhlIGNoYXJhY3RlciBzZXQgcmVtYWlucyBpbiBHTCBvciBHUiB1bnRpbFxuICAgKiAgIHlvdSB1c2UgYW5vdGhlciBsb2NraW5nIHNoaWZ0LiAocGFydGx5IHN1cHBvcnRlZClcbiAgICovXG4gIHB1YmxpYyBzZXRnTGV2ZWwobGV2ZWw6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHRoaXMuX2NoYXJzZXRTZXJ2aWNlLnNldGdMZXZlbChsZXZlbCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogRVNDICMgOFxuICAgKiAgIERFQyBtbmVtb25pYzogREVDQUxOIChodHRwczovL3Z0MTAwLm5ldC9kb2NzL3Z0NTEwLXJtL0RFQ0FMTi5odG1sKVxuICAgKiAgIFRoaXMgY29udHJvbCBmdW5jdGlvbiBmaWxscyB0aGUgY29tcGxldGUgc2NyZWVuIGFyZWEgd2l0aFxuICAgKiAgIGEgdGVzdCBwYXR0ZXJuIChFKSB1c2VkIGZvciBhZGp1c3Rpbmcgc2NyZWVuIGFsaWdubWVudC5cbiAgICpcbiAgICogQHZ0OiAjWSAgIEVTQyAgIERFQ0FMTiAgIFwiU2NyZWVuIEFsaWdubWVudCBQYXR0ZXJuXCIgIFwiRVNDICMgOFwiICBcIkZpbGwgdmlld3BvcnQgd2l0aCBhIHRlc3QgcGF0dGVybiAoRSkuXCJcbiAgICovXG4gIHB1YmxpYyBzY3JlZW5BbGlnbm1lbnRQYXR0ZXJuKCk6IGJvb2xlYW4ge1xuICAgIC8vIHByZXBhcmUgY2VsbCBkYXRhXG4gICAgY29uc3QgY2VsbCA9IG5ldyBDZWxsRGF0YSgpO1xuICAgIGNlbGwuY29udGVudCA9IDEgPDwgQ29udGVudC5XSURUSF9TSElGVCB8ICdFJy5jaGFyQ29kZUF0KDApO1xuICAgIGNlbGwuZmcgPSB0aGlzLl9jdXJBdHRyRGF0YS5mZztcbiAgICBjZWxsLmJnID0gdGhpcy5fY3VyQXR0ckRhdGEuYmc7XG5cblxuICAgIHRoaXMuX3NldEN1cnNvcigwLCAwKTtcbiAgICBmb3IgKGxldCB5T2Zmc2V0ID0gMDsgeU9mZnNldCA8IHRoaXMuX2J1ZmZlclNlcnZpY2Uucm93czsgKyt5T2Zmc2V0KSB7XG4gICAgICBjb25zdCByb3cgPSB0aGlzLl9hY3RpdmVCdWZmZXIueWJhc2UgKyB0aGlzLl9hY3RpdmVCdWZmZXIueSArIHlPZmZzZXQ7XG4gICAgICBjb25zdCBsaW5lID0gdGhpcy5fYWN0aXZlQnVmZmVyLmxpbmVzLmdldChyb3cpO1xuICAgICAgaWYgKGxpbmUpIHtcbiAgICAgICAgbGluZS5maWxsKGNlbGwpO1xuICAgICAgICBsaW5lLmlzV3JhcHBlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9kaXJ0eVJvd1NlcnZpY2UubWFya0FsbERpcnR5KCk7XG4gICAgdGhpcy5fc2V0Q3Vyc29yKDAsIDApO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOCBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElEaXNwb3NhYmxlIH0gZnJvbSAnY29tbW9uL1R5cGVzJztcblxuLyoqXG4gKiBBIGJhc2UgY2xhc3MgdGhhdCBjYW4gYmUgZXh0ZW5kZWQgdG8gcHJvdmlkZSBjb252ZW5pZW5jZSBtZXRob2RzIGZvciBtYW5hZ2luZyB0aGUgbGlmZWN5Y2xlIG9mIGFuXG4gKiBvYmplY3QgYW5kIGl0cyBjb21wb25lbnRzLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRGlzcG9zYWJsZSBpbXBsZW1lbnRzIElEaXNwb3NhYmxlIHtcbiAgcHJvdGVjdGVkIF9kaXNwb3NhYmxlczogSURpc3Bvc2FibGVbXSA9IFtdO1xuICBwcm90ZWN0ZWQgX2lzRGlzcG9zZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwb3NlcyB0aGUgb2JqZWN0LCB0cmlnZ2VyaW5nIHRoZSBgZGlzcG9zZWAgbWV0aG9kIG9uIGFsbCByZWdpc3RlcmVkIElEaXNwb3NhYmxlcy5cbiAgICovXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xuICAgIHRoaXMuX2lzRGlzcG9zZWQgPSB0cnVlO1xuICAgIGZvciAoY29uc3QgZCBvZiB0aGlzLl9kaXNwb3NhYmxlcykge1xuICAgICAgZC5kaXNwb3NlKCk7XG4gICAgfVxuICAgIHRoaXMuX2Rpc3Bvc2FibGVzLmxlbmd0aCA9IDA7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGEgZGlzcG9zYWJsZSBvYmplY3QuXG4gICAqIEBwYXJhbSBkIFRoZSBkaXNwb3NhYmxlIHRvIHJlZ2lzdGVyLlxuICAgKiBAcmV0dXJucyBUaGUgZGlzcG9zYWJsZS5cbiAgICovXG4gIHB1YmxpYyByZWdpc3RlcjxUIGV4dGVuZHMgSURpc3Bvc2FibGU+KGQ6IFQpOiBUIHtcbiAgICB0aGlzLl9kaXNwb3NhYmxlcy5wdXNoKGQpO1xuICAgIHJldHVybiBkO1xuICB9XG5cbiAgLyoqXG4gICAqIFVucmVnaXN0ZXJzIGEgZGlzcG9zYWJsZSBvYmplY3QgaWYgaXQgaGFzIGJlZW4gcmVnaXN0ZXJlZCwgaWYgbm90IGRvXG4gICAqIG5vdGhpbmcuXG4gICAqIEBwYXJhbSBkIFRoZSBkaXNwb3NhYmxlIHRvIHVucmVnaXN0ZXIuXG4gICAqL1xuICBwdWJsaWMgdW5yZWdpc3RlcjxUIGV4dGVuZHMgSURpc3Bvc2FibGU+KGQ6IFQpOiB2b2lkIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX2Rpc3Bvc2FibGVzLmluZGV4T2YoZCk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5fZGlzcG9zYWJsZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwb3NlIG9mIGFsbCBkaXNwb3NhYmxlcyBpbiBhbiBhcnJheSBhbmQgc2V0IGl0cyBsZW5ndGggdG8gMC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3Bvc2VBcnJheShkaXNwb3NhYmxlczogSURpc3Bvc2FibGVbXSk6IHZvaWQge1xuICBmb3IgKGNvbnN0IGQgb2YgZGlzcG9zYWJsZXMpIHtcbiAgICBkLmRpc3Bvc2UoKTtcbiAgfVxuICBkaXNwb3NhYmxlcy5sZW5ndGggPSAwO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBkaXNwb3NhYmxlIHRoYXQgd2lsbCBkaXNwb3NlIG9mIGFuIGFycmF5IG9mIGRpc3Bvc2FibGVzIHdoZW4gZGlzcG9zZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREaXNwb3NlQXJyYXlEaXNwb3NhYmxlKGFycmF5OiBJRGlzcG9zYWJsZVtdKTogSURpc3Bvc2FibGUge1xuICByZXR1cm4geyBkaXNwb3NlOiAoKSA9PiBkaXNwb3NlQXJyYXkoYXJyYXkpIH07XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNiBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmludGVyZmFjZSBJTmF2aWdhdG9yIHtcbiAgdXNlckFnZW50OiBzdHJpbmc7XG4gIGxhbmd1YWdlOiBzdHJpbmc7XG4gIHBsYXRmb3JtOiBzdHJpbmc7XG59XG5cbi8vIFdlJ3JlIGRlY2xhcmluZyBhIG5hdmlnYXRvciBnbG9iYWwgaGVyZSBhcyB3ZSBleHBlY3QgaXQgaW4gYWxsIHJ1bnRpbWVzIChub2RlIGFuZCBicm93c2VyKSwgYnV0XG4vLyB3ZSB3YW50IHRoaXMgbW9kdWxlIHRvIGxpdmUgaW4gY29tbW9uLlxuZGVjbGFyZSBjb25zdCBuYXZpZ2F0b3I6IElOYXZpZ2F0b3I7XG5cbmNvbnN0IGlzTm9kZSA9ICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJykgPyB0cnVlIDogZmFsc2U7XG5jb25zdCB1c2VyQWdlbnQgPSAoaXNOb2RlKSA/ICdub2RlJyA6IG5hdmlnYXRvci51c2VyQWdlbnQ7XG5jb25zdCBwbGF0Zm9ybSA9IChpc05vZGUpID8gJ25vZGUnIDogbmF2aWdhdG9yLnBsYXRmb3JtO1xuXG5leHBvcnQgY29uc3QgaXNGaXJlZm94ID0gdXNlckFnZW50LmluY2x1ZGVzKCdGaXJlZm94Jyk7XG5leHBvcnQgY29uc3QgaXNMZWdhY3lFZGdlID0gdXNlckFnZW50LmluY2x1ZGVzKCdFZGdlJyk7XG5leHBvcnQgY29uc3QgaXNTYWZhcmkgPSAvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KHVzZXJBZ2VudCk7XG5cbi8vIEZpbmQgdGhlIHVzZXJzIHBsYXRmb3JtLiBXZSB1c2UgdGhpcyB0byBpbnRlcnByZXQgdGhlIG1ldGEga2V5XG4vLyBhbmQgSVNPIHRoaXJkIGxldmVsIHNoaWZ0cy5cbi8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xLzE5ODc3OTI0LzU3NzU5OFxuZXhwb3J0IGNvbnN0IGlzTWFjID0gWydNYWNpbnRvc2gnLCAnTWFjSW50ZWwnLCAnTWFjUFBDJywgJ01hYzY4SyddLmluY2x1ZGVzKHBsYXRmb3JtKTtcbmV4cG9ydCBjb25zdCBpc0lwYWQgPSBwbGF0Zm9ybSA9PT0gJ2lQYWQnO1xuZXhwb3J0IGNvbnN0IGlzSXBob25lID0gcGxhdGZvcm0gPT09ICdpUGhvbmUnO1xuZXhwb3J0IGNvbnN0IGlzV2luZG93cyA9IFsnV2luZG93cycsICdXaW4xNicsICdXaW4zMicsICdXaW5DRSddLmluY2x1ZGVzKHBsYXRmb3JtKTtcbmV4cG9ydCBjb25zdCBpc0xpbnV4ID0gcGxhdGZvcm0uaW5kZXhPZignTGludXgnKSA+PSAwO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5leHBvcnQgdHlwZSBUeXBlZEFycmF5ID0gVWludDhBcnJheSB8IFVpbnQxNkFycmF5IHwgVWludDMyQXJyYXkgfCBVaW50OENsYW1wZWRBcnJheSB8IEludDhBcnJheSB8IEludDE2QXJyYXkgfCBJbnQzMkFycmF5IHwgRmxvYXQzMkFycmF5IHwgRmxvYXQ2NEFycmF5O1xuXG5cbi8qKlxuICogcG9seWZpbGwgZm9yIFR5cGVkQXJyYXkuZmlsbFxuICogVGhpcyBpcyBuZWVkZWQgdG8gc3VwcG9ydCAuZmlsbCBpbiBhbGwgc2FmYXJpIHZlcnNpb25zIGFuZCBJRSAxMS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbGw8VCBleHRlbmRzIFR5cGVkQXJyYXk+KGFycmF5OiBULCB2YWx1ZTogbnVtYmVyLCBzdGFydD86IG51bWJlciwgZW5kPzogbnVtYmVyKTogVCB7XG4gIC8vIGFsbCBtb2Rlcm4gZW5naW5lcyB0aGF0IHN1cHBvcnQgLmZpbGxcbiAgaWYgKGFycmF5LmZpbGwpIHtcbiAgICByZXR1cm4gYXJyYXkuZmlsbCh2YWx1ZSwgc3RhcnQsIGVuZCkgYXMgVDtcbiAgfVxuICByZXR1cm4gZmlsbEZhbGxiYWNrKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWxsRmFsbGJhY2s8VCBleHRlbmRzIFR5cGVkQXJyYXk+KGFycmF5OiBULCB2YWx1ZTogbnVtYmVyLCBzdGFydDogbnVtYmVyID0gMCwgZW5kOiBudW1iZXIgPSBhcnJheS5sZW5ndGgpOiBUIHtcbiAgLy8gc2FmYXJpIGFuZCBJRSAxMVxuICAvLyBzaW5jZSBJRSAxMSBkb2VzIG5vdCBzdXBwb3J0IEFycmF5LnByb3RvdHlwZS5maWxsIGVpdGhlclxuICAvLyB3ZSBjYW5ub3QgdXNlIHRoZSBzdWdnZXN0ZWQgcG9seWZpbGwgZnJvbSBNRE5cbiAgLy8gaW5zdGVhZCB3ZSBzaW1wbHkgZmFsbCBiYWNrIHRvIGxvb3BpbmdcbiAgaWYgKHN0YXJ0ID49IGFycmF5Lmxlbmd0aCkge1xuICAgIHJldHVybiBhcnJheTtcbiAgfVxuICBzdGFydCA9IChhcnJheS5sZW5ndGggKyBzdGFydCkgJSBhcnJheS5sZW5ndGg7XG4gIGlmIChlbmQgPj0gYXJyYXkubGVuZ3RoKSB7XG4gICAgZW5kID0gYXJyYXkubGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgIGVuZCA9IChhcnJheS5sZW5ndGggKyBlbmQpICUgYXJyYXkubGVuZ3RoO1xuICB9XG4gIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgYXJyYXlbaV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogQ29uY2F0IHR3byB0eXBlZCBhcnJheXMgYGFgIGFuZCBgYmAuXG4gKiBSZXR1cm5zIGEgbmV3IHR5cGVkIGFycmF5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29uY2F0PFQgZXh0ZW5kcyBUeXBlZEFycmF5PihhOiBULCBiOiBUKTogVCB7XG4gIGNvbnN0IHJlc3VsdCA9IG5ldyAoYS5jb25zdHJ1Y3RvciBhcyBhbnkpKGEubGVuZ3RoICsgYi5sZW5ndGgpO1xuICByZXN1bHQuc2V0KGEpO1xuICByZXN1bHQuc2V0KGIsIGEubGVuZ3RoKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgQ0hBUl9EQVRBX0NPREVfSU5ERVgsIE5VTExfQ0VMTF9DT0RFLCBXSElURVNQQUNFX0NFTExfQ09ERSB9IGZyb20gJ2NvbW1vbi9idWZmZXIvQ29uc3RhbnRzJztcbmltcG9ydCB7IElCdWZmZXJTZXJ2aWNlIH0gZnJvbSAnY29tbW9uL3NlcnZpY2VzL1NlcnZpY2VzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVdpbmRvd3NNb2RlV3JhcHBlZFN0YXRlKGJ1ZmZlclNlcnZpY2U6IElCdWZmZXJTZXJ2aWNlKTogdm9pZCB7XG4gIC8vIFdpbnB0eSBkb2VzIG5vdCBzdXBwb3J0IHdyYXBhcm91bmQgbW9kZSB3aGljaCBtZWFucyB0aGF0IGxpbmVzIHdpbGwgbmV2ZXJcbiAgLy8gYmUgbWFya2VkIGFzIHdyYXBwZWQuIFRoaXMgY2F1c2VzIGlzc3VlcyBmb3IgdGhpbmdzIGxpa2UgY29weWluZyBhIGxpbmVcbiAgLy8gcmV0YWluaW5nIHRoZSB3cmFwcGVkIG5ldyBsaW5lIGNoYXJhY3RlcnMgb3IgaWYgY29uc3VtZXJzIGFyZSBsaXN0ZW5pbmdcbiAgLy8gaW4gb24gdGhlIGRhdGEgc3RyZWFtLlxuICAvL1xuICAvLyBUaGUgd29ya2Fyb3VuZCBmb3IgdGhpcyBpcyB0byBsaXN0ZW4gdG8gZXZlcnkgaW5jb21pbmcgbGluZSBmZWVkIGFuZCBtYXJrXG4gIC8vIHRoZSBsaW5lIGFzIHdyYXBwZWQgaWYgdGhlIGxhc3QgY2hhcmFjdGVyIGluIHRoZSBwcmV2aW91cyBsaW5lIGlzIG5vdCBhXG4gIC8vIHNwYWNlLiBUaGlzIGlzIGNlcnRhaW5seSBub3Qgd2l0aG91dCBpdHMgcHJvYmxlbXMsIGJ1dCBnZW5lcmFsbHkgb25cbiAgLy8gV2luZG93cyB3aGVuIHRleHQgcmVhY2hlcyB0aGUgZW5kIG9mIHRoZSB0ZXJtaW5hbCBpdCdzIGxpa2VseSBnb2luZyB0byBiZVxuICAvLyB3cmFwcGVkLlxuICBjb25zdCBsaW5lID0gYnVmZmVyU2VydmljZS5idWZmZXIubGluZXMuZ2V0KGJ1ZmZlclNlcnZpY2UuYnVmZmVyLnliYXNlICsgYnVmZmVyU2VydmljZS5idWZmZXIueSAtIDEpO1xuICBjb25zdCBsYXN0Q2hhciA9IGxpbmU/LmdldChidWZmZXJTZXJ2aWNlLmNvbHMgLSAxKTtcblxuICBjb25zdCBuZXh0TGluZSA9IGJ1ZmZlclNlcnZpY2UuYnVmZmVyLmxpbmVzLmdldChidWZmZXJTZXJ2aWNlLmJ1ZmZlci55YmFzZSArIGJ1ZmZlclNlcnZpY2UuYnVmZmVyLnkpO1xuICBpZiAobmV4dExpbmUgJiYgbGFzdENoYXIpIHtcbiAgICBuZXh0TGluZS5pc1dyYXBwZWQgPSAobGFzdENoYXJbQ0hBUl9EQVRBX0NPREVfSU5ERVhdICE9PSBOVUxMX0NFTExfQ09ERSAmJiBsYXN0Q2hhcltDSEFSX0RBVEFfQ09ERV9JTkRFWF0gIT09IFdISVRFU1BBQ0VfQ0VMTF9DT0RFKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJQXR0cmlidXRlRGF0YSwgSUNvbG9yUkdCLCBJRXh0ZW5kZWRBdHRycyB9IGZyb20gJ2NvbW1vbi9UeXBlcyc7XG5pbXBvcnQgeyBBdHRyaWJ1dGVzLCBGZ0ZsYWdzLCBCZ0ZsYWdzLCBVbmRlcmxpbmVTdHlsZSB9IGZyb20gJ2NvbW1vbi9idWZmZXIvQ29uc3RhbnRzJztcblxuZXhwb3J0IGNsYXNzIEF0dHJpYnV0ZURhdGEgaW1wbGVtZW50cyBJQXR0cmlidXRlRGF0YSB7XG4gIHB1YmxpYyBzdGF0aWMgdG9Db2xvclJHQih2YWx1ZTogbnVtYmVyKTogSUNvbG9yUkdCIHtcbiAgICByZXR1cm4gW1xuICAgICAgdmFsdWUgPj4+IEF0dHJpYnV0ZXMuUkVEX1NISUZUICYgMjU1LFxuICAgICAgdmFsdWUgPj4+IEF0dHJpYnV0ZXMuR1JFRU5fU0hJRlQgJiAyNTUsXG4gICAgICB2YWx1ZSAmIDI1NVxuICAgIF07XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGZyb21Db2xvclJHQih2YWx1ZTogSUNvbG9yUkdCKTogbnVtYmVyIHtcbiAgICByZXR1cm4gKHZhbHVlWzBdICYgMjU1KSA8PCBBdHRyaWJ1dGVzLlJFRF9TSElGVCB8ICh2YWx1ZVsxXSAmIDI1NSkgPDwgQXR0cmlidXRlcy5HUkVFTl9TSElGVCB8IHZhbHVlWzJdICYgMjU1O1xuICB9XG5cbiAgcHVibGljIGNsb25lKCk6IElBdHRyaWJ1dGVEYXRhIHtcbiAgICBjb25zdCBuZXdPYmogPSBuZXcgQXR0cmlidXRlRGF0YSgpO1xuICAgIG5ld09iai5mZyA9IHRoaXMuZmc7XG4gICAgbmV3T2JqLmJnID0gdGhpcy5iZztcbiAgICBuZXdPYmouZXh0ZW5kZWQgPSB0aGlzLmV4dGVuZGVkLmNsb25lKCk7XG4gICAgcmV0dXJuIG5ld09iajtcbiAgfVxuXG4gIC8vIGRhdGFcbiAgcHVibGljIGZnID0gMDtcbiAgcHVibGljIGJnID0gMDtcbiAgcHVibGljIGV4dGVuZGVkID0gbmV3IEV4dGVuZGVkQXR0cnMoKTtcblxuICAvLyBmbGFnc1xuICBwdWJsaWMgaXNJbnZlcnNlKCk6IG51bWJlciAgICAgICB7IHJldHVybiB0aGlzLmZnICYgRmdGbGFncy5JTlZFUlNFOyB9XG4gIHB1YmxpYyBpc0JvbGQoKTogbnVtYmVyICAgICAgICAgIHsgcmV0dXJuIHRoaXMuZmcgJiBGZ0ZsYWdzLkJPTEQ7IH1cbiAgcHVibGljIGlzVW5kZXJsaW5lKCk6IG51bWJlciAgICAgeyByZXR1cm4gdGhpcy5mZyAmIEZnRmxhZ3MuVU5ERVJMSU5FOyB9XG4gIHB1YmxpYyBpc0JsaW5rKCk6IG51bWJlciAgICAgICAgIHsgcmV0dXJuIHRoaXMuZmcgJiBGZ0ZsYWdzLkJMSU5LOyB9XG4gIHB1YmxpYyBpc0ludmlzaWJsZSgpOiBudW1iZXIgICAgIHsgcmV0dXJuIHRoaXMuZmcgJiBGZ0ZsYWdzLklOVklTSUJMRTsgfVxuICBwdWJsaWMgaXNJdGFsaWMoKTogbnVtYmVyICAgICAgICB7IHJldHVybiB0aGlzLmJnICYgQmdGbGFncy5JVEFMSUM7IH1cbiAgcHVibGljIGlzRGltKCk6IG51bWJlciAgICAgICAgICAgeyByZXR1cm4gdGhpcy5iZyAmIEJnRmxhZ3MuRElNOyB9XG4gIHB1YmxpYyBpc1N0cmlrZXRocm91Z2goKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZmcgJiBGZ0ZsYWdzLlNUUklLRVRIUk9VR0g7IH1cblxuICAvLyBjb2xvciBtb2Rlc1xuICBwdWJsaWMgZ2V0RmdDb2xvck1vZGUoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZmcgJiBBdHRyaWJ1dGVzLkNNX01BU0s7IH1cbiAgcHVibGljIGdldEJnQ29sb3JNb2RlKCk6IG51bWJlciB7IHJldHVybiB0aGlzLmJnICYgQXR0cmlidXRlcy5DTV9NQVNLOyB9XG4gIHB1YmxpYyBpc0ZnUkdCKCk6IGJvb2xlYW4gICAgICAgeyByZXR1cm4gKHRoaXMuZmcgJiBBdHRyaWJ1dGVzLkNNX01BU0spID09PSBBdHRyaWJ1dGVzLkNNX1JHQjsgfVxuICBwdWJsaWMgaXNCZ1JHQigpOiBib29sZWFuICAgICAgIHsgcmV0dXJuICh0aGlzLmJnICYgQXR0cmlidXRlcy5DTV9NQVNLKSA9PT0gQXR0cmlidXRlcy5DTV9SR0I7IH1cbiAgcHVibGljIGlzRmdQYWxldHRlKCk6IGJvb2xlYW4gICB7IHJldHVybiAodGhpcy5mZyAmIEF0dHJpYnV0ZXMuQ01fTUFTSykgPT09IEF0dHJpYnV0ZXMuQ01fUDE2IHx8ICh0aGlzLmZnICYgQXR0cmlidXRlcy5DTV9NQVNLKSA9PT0gQXR0cmlidXRlcy5DTV9QMjU2OyB9XG4gIHB1YmxpYyBpc0JnUGFsZXR0ZSgpOiBib29sZWFuICAgeyByZXR1cm4gKHRoaXMuYmcgJiBBdHRyaWJ1dGVzLkNNX01BU0spID09PSBBdHRyaWJ1dGVzLkNNX1AxNiB8fCAodGhpcy5iZyAmIEF0dHJpYnV0ZXMuQ01fTUFTSykgPT09IEF0dHJpYnV0ZXMuQ01fUDI1NjsgfVxuICBwdWJsaWMgaXNGZ0RlZmF1bHQoKTogYm9vbGVhbiAgIHsgcmV0dXJuICh0aGlzLmZnICYgQXR0cmlidXRlcy5DTV9NQVNLKSA9PT0gMDsgfVxuICBwdWJsaWMgaXNCZ0RlZmF1bHQoKTogYm9vbGVhbiAgIHsgcmV0dXJuICh0aGlzLmJnICYgQXR0cmlidXRlcy5DTV9NQVNLKSA9PT0gMDsgfVxuICBwdWJsaWMgaXNBdHRyaWJ1dGVEZWZhdWx0KCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5mZyA9PT0gMCAmJiB0aGlzLmJnID09PSAwOyB9XG5cbiAgLy8gY29sb3JzXG4gIHB1YmxpYyBnZXRGZ0NvbG9yKCk6IG51bWJlciB7XG4gICAgc3dpdGNoICh0aGlzLmZnICYgQXR0cmlidXRlcy5DTV9NQVNLKSB7XG4gICAgICBjYXNlIEF0dHJpYnV0ZXMuQ01fUDE2OlxuICAgICAgY2FzZSBBdHRyaWJ1dGVzLkNNX1AyNTY6ICByZXR1cm4gdGhpcy5mZyAmIEF0dHJpYnV0ZXMuUENPTE9SX01BU0s7XG4gICAgICBjYXNlIEF0dHJpYnV0ZXMuQ01fUkdCOiAgIHJldHVybiB0aGlzLmZnICYgQXR0cmlidXRlcy5SR0JfTUFTSztcbiAgICAgIGRlZmF1bHQ6ICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xOyAgLy8gQ01fREVGQVVMVCBkZWZhdWx0cyB0byAtMVxuICAgIH1cbiAgfVxuICBwdWJsaWMgZ2V0QmdDb2xvcigpOiBudW1iZXIge1xuICAgIHN3aXRjaCAodGhpcy5iZyAmIEF0dHJpYnV0ZXMuQ01fTUFTSykge1xuICAgICAgY2FzZSBBdHRyaWJ1dGVzLkNNX1AxNjpcbiAgICAgIGNhc2UgQXR0cmlidXRlcy5DTV9QMjU2OiAgcmV0dXJuIHRoaXMuYmcgJiBBdHRyaWJ1dGVzLlBDT0xPUl9NQVNLO1xuICAgICAgY2FzZSBBdHRyaWJ1dGVzLkNNX1JHQjogICByZXR1cm4gdGhpcy5iZyAmIEF0dHJpYnV0ZXMuUkdCX01BU0s7XG4gICAgICBkZWZhdWx0OiAgICAgICAgICAgICAgICAgIHJldHVybiAtMTsgIC8vIENNX0RFRkFVTFQgZGVmYXVsdHMgdG8gLTFcbiAgICB9XG4gIH1cblxuICAvLyBleHRlbmRlZCBhdHRyc1xuICBwdWJsaWMgaGFzRXh0ZW5kZWRBdHRycygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmJnICYgQmdGbGFncy5IQVNfRVhURU5ERUQ7XG4gIH1cbiAgcHVibGljIHVwZGF0ZUV4dGVuZGVkKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmV4dGVuZGVkLmlzRW1wdHkoKSkge1xuICAgICAgdGhpcy5iZyAmPSB+QmdGbGFncy5IQVNfRVhURU5ERUQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYmcgfD0gQmdGbGFncy5IQVNfRVhURU5ERUQ7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBnZXRVbmRlcmxpbmVDb2xvcigpOiBudW1iZXIge1xuICAgIGlmICgodGhpcy5iZyAmIEJnRmxhZ3MuSEFTX0VYVEVOREVEKSAmJiB+dGhpcy5leHRlbmRlZC51bmRlcmxpbmVDb2xvcikge1xuICAgICAgc3dpdGNoICh0aGlzLmV4dGVuZGVkLnVuZGVybGluZUNvbG9yICYgQXR0cmlidXRlcy5DTV9NQVNLKSB7XG4gICAgICAgIGNhc2UgQXR0cmlidXRlcy5DTV9QMTY6XG4gICAgICAgIGNhc2UgQXR0cmlidXRlcy5DTV9QMjU2OiAgcmV0dXJuIHRoaXMuZXh0ZW5kZWQudW5kZXJsaW5lQ29sb3IgJiBBdHRyaWJ1dGVzLlBDT0xPUl9NQVNLO1xuICAgICAgICBjYXNlIEF0dHJpYnV0ZXMuQ01fUkdCOiAgIHJldHVybiB0aGlzLmV4dGVuZGVkLnVuZGVybGluZUNvbG9yICYgQXR0cmlidXRlcy5SR0JfTUFTSztcbiAgICAgICAgZGVmYXVsdDogICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRGZ0NvbG9yKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldEZnQ29sb3IoKTtcbiAgfVxuICBwdWJsaWMgZ2V0VW5kZXJsaW5lQ29sb3JNb2RlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuICh0aGlzLmJnICYgQmdGbGFncy5IQVNfRVhURU5ERUQpICYmIH50aGlzLmV4dGVuZGVkLnVuZGVybGluZUNvbG9yXG4gICAgICA/IHRoaXMuZXh0ZW5kZWQudW5kZXJsaW5lQ29sb3IgJiBBdHRyaWJ1dGVzLkNNX01BU0tcbiAgICAgIDogdGhpcy5nZXRGZ0NvbG9yTW9kZSgpO1xuICB9XG4gIHB1YmxpYyBpc1VuZGVybGluZUNvbG9yUkdCKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAodGhpcy5iZyAmIEJnRmxhZ3MuSEFTX0VYVEVOREVEKSAmJiB+dGhpcy5leHRlbmRlZC51bmRlcmxpbmVDb2xvclxuICAgICAgPyAodGhpcy5leHRlbmRlZC51bmRlcmxpbmVDb2xvciAmIEF0dHJpYnV0ZXMuQ01fTUFTSykgPT09IEF0dHJpYnV0ZXMuQ01fUkdCXG4gICAgICA6IHRoaXMuaXNGZ1JHQigpO1xuICB9XG4gIHB1YmxpYyBpc1VuZGVybGluZUNvbG9yUGFsZXR0ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKHRoaXMuYmcgJiBCZ0ZsYWdzLkhBU19FWFRFTkRFRCkgJiYgfnRoaXMuZXh0ZW5kZWQudW5kZXJsaW5lQ29sb3JcbiAgICAgID8gKHRoaXMuZXh0ZW5kZWQudW5kZXJsaW5lQ29sb3IgJiBBdHRyaWJ1dGVzLkNNX01BU0spID09PSBBdHRyaWJ1dGVzLkNNX1AxNlxuICAgICAgICAgIHx8ICh0aGlzLmV4dGVuZGVkLnVuZGVybGluZUNvbG9yICYgQXR0cmlidXRlcy5DTV9NQVNLKSA9PT0gQXR0cmlidXRlcy5DTV9QMjU2XG4gICAgICA6IHRoaXMuaXNGZ1BhbGV0dGUoKTtcbiAgfVxuICBwdWJsaWMgaXNVbmRlcmxpbmVDb2xvckRlZmF1bHQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICh0aGlzLmJnICYgQmdGbGFncy5IQVNfRVhURU5ERUQpICYmIH50aGlzLmV4dGVuZGVkLnVuZGVybGluZUNvbG9yXG4gICAgICA/ICh0aGlzLmV4dGVuZGVkLnVuZGVybGluZUNvbG9yICYgQXR0cmlidXRlcy5DTV9NQVNLKSA9PT0gMFxuICAgICAgOiB0aGlzLmlzRmdEZWZhdWx0KCk7XG4gIH1cbiAgcHVibGljIGdldFVuZGVybGluZVN0eWxlKCk6IFVuZGVybGluZVN0eWxlIHtcbiAgICByZXR1cm4gdGhpcy5mZyAmIEZnRmxhZ3MuVU5ERVJMSU5FXG4gICAgICA/ICh0aGlzLmJnICYgQmdGbGFncy5IQVNfRVhURU5ERUQgPyB0aGlzLmV4dGVuZGVkLnVuZGVybGluZVN0eWxlIDogVW5kZXJsaW5lU3R5bGUuU0lOR0xFKVxuICAgICAgOiBVbmRlcmxpbmVTdHlsZS5OT05FO1xuICB9XG59XG5cblxuLyoqXG4gKiBFeHRlbmRlZCBhdHRyaWJ1dGVzIGZvciBhIGNlbGwuXG4gKiBIb2xkcyBpbmZvcm1hdGlvbiBhYm91dCBkaWZmZXJlbnQgdW5kZXJsaW5lIHN0eWxlcyBhbmQgY29sb3IuXG4gKi9cbmV4cG9ydCBjbGFzcyBFeHRlbmRlZEF0dHJzIGltcGxlbWVudHMgSUV4dGVuZGVkQXR0cnMge1xuICBjb25zdHJ1Y3RvcihcbiAgICAvLyB1bmRlcmxpbmUgc3R5bGUsIE5PTkUgaXMgZW1wdHlcbiAgICBwdWJsaWMgdW5kZXJsaW5lU3R5bGU6IFVuZGVybGluZVN0eWxlID0gVW5kZXJsaW5lU3R5bGUuTk9ORSxcbiAgICAvLyB1bmRlcmxpbmUgY29sb3IsIC0xIGlzIGVtcHR5IChzYW1lIGFzIEZHKVxuICAgIHB1YmxpYyB1bmRlcmxpbmVDb2xvcjogbnVtYmVyID0gLTFcbiAgKSB7fVxuXG4gIHB1YmxpYyBjbG9uZSgpOiBJRXh0ZW5kZWRBdHRycyB7XG4gICAgcmV0dXJuIG5ldyBFeHRlbmRlZEF0dHJzKHRoaXMudW5kZXJsaW5lU3R5bGUsIHRoaXMudW5kZXJsaW5lQ29sb3IpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlbmllbnQgbWV0aG9kIHRvIGluZGljYXRlIHdoZXRoZXIgdGhlIG9iamVjdCBob2xkcyBubyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uLFxuICAgKiB0aGF0IG5lZWRzIHRvIGJlIHBlcnNpc3RhbnQgaW4gdGhlIGJ1ZmZlci5cbiAgICovXG4gIHB1YmxpYyBpc0VtcHR5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnVuZGVybGluZVN0eWxlID09PSBVbmRlcmxpbmVTdHlsZS5OT05FO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IENpcmN1bGFyTGlzdCwgSUluc2VydEV2ZW50IH0gZnJvbSAnY29tbW9uL0NpcmN1bGFyTGlzdCc7XG5pbXBvcnQgeyBJQnVmZmVyLCBCdWZmZXJJbmRleCwgSUJ1ZmZlclN0cmluZ0l0ZXJhdG9yLCBJQnVmZmVyU3RyaW5nSXRlcmF0b3JSZXN1bHQgfSBmcm9tICdjb21tb24vYnVmZmVyL1R5cGVzJztcbmltcG9ydCB7IElCdWZmZXJMaW5lLCBJQ2VsbERhdGEsIElBdHRyaWJ1dGVEYXRhLCBJQ2hhcnNldCB9IGZyb20gJ2NvbW1vbi9UeXBlcyc7XG5pbXBvcnQgeyBCdWZmZXJMaW5lLCBERUZBVUxUX0FUVFJfREFUQSB9IGZyb20gJ2NvbW1vbi9idWZmZXIvQnVmZmVyTGluZSc7XG5pbXBvcnQgeyBDZWxsRGF0YSB9IGZyb20gJ2NvbW1vbi9idWZmZXIvQ2VsbERhdGEnO1xuaW1wb3J0IHsgTlVMTF9DRUxMX0NIQVIsIE5VTExfQ0VMTF9XSURUSCwgTlVMTF9DRUxMX0NPREUsIFdISVRFU1BBQ0VfQ0VMTF9DSEFSLCBXSElURVNQQUNFX0NFTExfV0lEVEgsIFdISVRFU1BBQ0VfQ0VMTF9DT0RFLCBDSEFSX0RBVEFfV0lEVEhfSU5ERVgsIENIQVJfREFUQV9DSEFSX0lOREVYIH0gZnJvbSAnY29tbW9uL2J1ZmZlci9Db25zdGFudHMnO1xuaW1wb3J0IHsgcmVmbG93TGFyZ2VyQXBwbHlOZXdMYXlvdXQsIHJlZmxvd0xhcmdlckNyZWF0ZU5ld0xheW91dCwgcmVmbG93TGFyZ2VyR2V0TGluZXNUb1JlbW92ZSwgcmVmbG93U21hbGxlckdldE5ld0xpbmVMZW5ndGhzLCBnZXRXcmFwcGVkTGluZVRyaW1tZWRMZW5ndGggfSBmcm9tICdjb21tb24vYnVmZmVyL0J1ZmZlclJlZmxvdyc7XG5pbXBvcnQgeyBNYXJrZXIgfSBmcm9tICdjb21tb24vYnVmZmVyL01hcmtlcic7XG5pbXBvcnQgeyBJT3B0aW9uc1NlcnZpY2UsIElCdWZmZXJTZXJ2aWNlIH0gZnJvbSAnY29tbW9uL3NlcnZpY2VzL1NlcnZpY2VzJztcbmltcG9ydCB7IERFRkFVTFRfQ0hBUlNFVCB9IGZyb20gJ2NvbW1vbi9kYXRhL0NoYXJzZXRzJztcbmltcG9ydCB7IEV4dGVuZGVkQXR0cnMgfSBmcm9tICdjb21tb24vYnVmZmVyL0F0dHJpYnV0ZURhdGEnO1xuXG5leHBvcnQgY29uc3QgTUFYX0JVRkZFUl9TSVpFID0gNDI5NDk2NzI5NTsgLy8gMl4zMiAtIDFcblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSB0ZXJtaW5hbCBidWZmZXIgKGFuIGludGVybmFsIHN0YXRlIG9mIHRoZSB0ZXJtaW5hbCksIHdoZXJlIHRoZVxuICogZm9sbG93aW5nIGluZm9ybWF0aW9uIGlzIHN0b3JlZCAoaW4gaGlnaC1sZXZlbCk6XG4gKiAgIC0gdGV4dCBjb250ZW50IG9mIHRoaXMgcGFydGljdWxhciBidWZmZXJcbiAqICAgLSBjdXJzb3IgcG9zaXRpb25cbiAqICAgLSBzY3JvbGwgcG9zaXRpb25cbiAqL1xuZXhwb3J0IGNsYXNzIEJ1ZmZlciBpbXBsZW1lbnRzIElCdWZmZXIge1xuICBwdWJsaWMgbGluZXM6IENpcmN1bGFyTGlzdDxJQnVmZmVyTGluZT47XG4gIHB1YmxpYyB5ZGlzcDogbnVtYmVyID0gMDtcbiAgcHVibGljIHliYXNlOiBudW1iZXIgPSAwO1xuICBwdWJsaWMgeTogbnVtYmVyID0gMDtcbiAgcHVibGljIHg6IG51bWJlciA9IDA7XG4gIHB1YmxpYyBzY3JvbGxCb3R0b206IG51bWJlcjtcbiAgcHVibGljIHNjcm9sbFRvcDogbnVtYmVyO1xuICAvLyBUT0RPOiBUeXBlIG1lXG4gIHB1YmxpYyB0YWJzOiBhbnk7XG4gIHB1YmxpYyBzYXZlZFk6IG51bWJlciA9IDA7XG4gIHB1YmxpYyBzYXZlZFg6IG51bWJlciA9IDA7XG4gIHB1YmxpYyBzYXZlZEN1ckF0dHJEYXRhID0gREVGQVVMVF9BVFRSX0RBVEEuY2xvbmUoKTtcbiAgcHVibGljIHNhdmVkQ2hhcnNldDogSUNoYXJzZXQgfCB1bmRlZmluZWQgPSBERUZBVUxUX0NIQVJTRVQ7XG4gIHB1YmxpYyBtYXJrZXJzOiBNYXJrZXJbXSA9IFtdO1xuICBwcml2YXRlIF9udWxsQ2VsbDogSUNlbGxEYXRhID0gQ2VsbERhdGEuZnJvbUNoYXJEYXRhKFswLCBOVUxMX0NFTExfQ0hBUiwgTlVMTF9DRUxMX1dJRFRILCBOVUxMX0NFTExfQ09ERV0pO1xuICBwcml2YXRlIF93aGl0ZXNwYWNlQ2VsbDogSUNlbGxEYXRhID0gQ2VsbERhdGEuZnJvbUNoYXJEYXRhKFswLCBXSElURVNQQUNFX0NFTExfQ0hBUiwgV0hJVEVTUEFDRV9DRUxMX1dJRFRILCBXSElURVNQQUNFX0NFTExfQ09ERV0pO1xuICBwcml2YXRlIF9jb2xzOiBudW1iZXI7XG4gIHByaXZhdGUgX3Jvd3M6IG51bWJlcjtcbiAgcHJpdmF0ZSBfaXNDbGVhcmluZzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX2hhc1Njcm9sbGJhY2s6IGJvb2xlYW4sXG4gICAgcHJpdmF0ZSBfb3B0aW9uc1NlcnZpY2U6IElPcHRpb25zU2VydmljZSxcbiAgICBwcml2YXRlIF9idWZmZXJTZXJ2aWNlOiBJQnVmZmVyU2VydmljZVxuICApIHtcbiAgICB0aGlzLl9jb2xzID0gdGhpcy5fYnVmZmVyU2VydmljZS5jb2xzO1xuICAgIHRoaXMuX3Jvd3MgPSB0aGlzLl9idWZmZXJTZXJ2aWNlLnJvd3M7XG4gICAgdGhpcy5saW5lcyA9IG5ldyBDaXJjdWxhckxpc3Q8SUJ1ZmZlckxpbmU+KHRoaXMuX2dldENvcnJlY3RCdWZmZXJMZW5ndGgodGhpcy5fcm93cykpO1xuICAgIHRoaXMuc2Nyb2xsVG9wID0gMDtcbiAgICB0aGlzLnNjcm9sbEJvdHRvbSA9IHRoaXMuX3Jvd3MgLSAxO1xuICAgIHRoaXMuc2V0dXBUYWJTdG9wcygpO1xuICB9XG5cbiAgcHVibGljIGdldE51bGxDZWxsKGF0dHI/OiBJQXR0cmlidXRlRGF0YSk6IElDZWxsRGF0YSB7XG4gICAgaWYgKGF0dHIpIHtcbiAgICAgIHRoaXMuX251bGxDZWxsLmZnID0gYXR0ci5mZztcbiAgICAgIHRoaXMuX251bGxDZWxsLmJnID0gYXR0ci5iZztcbiAgICAgIHRoaXMuX251bGxDZWxsLmV4dGVuZGVkID0gYXR0ci5leHRlbmRlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbnVsbENlbGwuZmcgPSAwO1xuICAgICAgdGhpcy5fbnVsbENlbGwuYmcgPSAwO1xuICAgICAgdGhpcy5fbnVsbENlbGwuZXh0ZW5kZWQgPSBuZXcgRXh0ZW5kZWRBdHRycygpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbnVsbENlbGw7XG4gIH1cblxuICBwdWJsaWMgZ2V0V2hpdGVzcGFjZUNlbGwoYXR0cj86IElBdHRyaWJ1dGVEYXRhKTogSUNlbGxEYXRhIHtcbiAgICBpZiAoYXR0cikge1xuICAgICAgdGhpcy5fd2hpdGVzcGFjZUNlbGwuZmcgPSBhdHRyLmZnO1xuICAgICAgdGhpcy5fd2hpdGVzcGFjZUNlbGwuYmcgPSBhdHRyLmJnO1xuICAgICAgdGhpcy5fd2hpdGVzcGFjZUNlbGwuZXh0ZW5kZWQgPSBhdHRyLmV4dGVuZGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl93aGl0ZXNwYWNlQ2VsbC5mZyA9IDA7XG4gICAgICB0aGlzLl93aGl0ZXNwYWNlQ2VsbC5iZyA9IDA7XG4gICAgICB0aGlzLl93aGl0ZXNwYWNlQ2VsbC5leHRlbmRlZCA9IG5ldyBFeHRlbmRlZEF0dHJzKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl93aGl0ZXNwYWNlQ2VsbDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRCbGFua0xpbmUoYXR0cjogSUF0dHJpYnV0ZURhdGEsIGlzV3JhcHBlZD86IGJvb2xlYW4pOiBJQnVmZmVyTGluZSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXJMaW5lKHRoaXMuX2J1ZmZlclNlcnZpY2UuY29scywgdGhpcy5nZXROdWxsQ2VsbChhdHRyKSwgaXNXcmFwcGVkKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaGFzU2Nyb2xsYmFjaygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faGFzU2Nyb2xsYmFjayAmJiB0aGlzLmxpbmVzLm1heExlbmd0aCA+IHRoaXMuX3Jvd3M7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGlzQ3Vyc29ySW5WaWV3cG9ydCgpOiBib29sZWFuIHtcbiAgICBjb25zdCBhYnNvbHV0ZVkgPSB0aGlzLnliYXNlICsgdGhpcy55O1xuICAgIGNvbnN0IHJlbGF0aXZlWSA9IGFic29sdXRlWSAtIHRoaXMueWRpc3A7XG4gICAgcmV0dXJuIChyZWxhdGl2ZVkgPj0gMCAmJiByZWxhdGl2ZVkgPCB0aGlzLl9yb3dzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjb3JyZWN0IGJ1ZmZlciBsZW5ndGggYmFzZWQgb24gdGhlIHJvd3MgcHJvdmlkZWQsIHRoZSB0ZXJtaW5hbCdzXG4gICAqIHNjcm9sbGJhY2sgYW5kIHdoZXRoZXIgdGhpcyBidWZmZXIgaXMgZmxhZ2dlZCB0byBoYXZlIHNjcm9sbGJhY2sgb3Igbm90LlxuICAgKiBAcGFyYW0gcm93cyBUaGUgdGVybWluYWwgcm93cyB0byB1c2UgaW4gdGhlIGNhbGN1bGF0aW9uLlxuICAgKi9cbiAgcHJpdmF0ZSBfZ2V0Q29ycmVjdEJ1ZmZlckxlbmd0aChyb3dzOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmICghdGhpcy5faGFzU2Nyb2xsYmFjaykge1xuICAgICAgcmV0dXJuIHJvd3M7XG4gICAgfVxuXG4gICAgY29uc3QgY29ycmVjdEJ1ZmZlckxlbmd0aCA9IHJvd3MgKyB0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLnNjcm9sbGJhY2s7XG5cbiAgICByZXR1cm4gY29ycmVjdEJ1ZmZlckxlbmd0aCA+IE1BWF9CVUZGRVJfU0laRSA/IE1BWF9CVUZGRVJfU0laRSA6IGNvcnJlY3RCdWZmZXJMZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogRmlsbHMgdGhlIGJ1ZmZlcidzIHZpZXdwb3J0IHdpdGggYmxhbmsgbGluZXMuXG4gICAqL1xuICBwdWJsaWMgZmlsbFZpZXdwb3J0Um93cyhmaWxsQXR0cj86IElBdHRyaWJ1dGVEYXRhKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubGluZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBpZiAoZmlsbEF0dHIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBmaWxsQXR0ciA9IERFRkFVTFRfQVRUUl9EQVRBO1xuICAgICAgfVxuICAgICAgbGV0IGkgPSB0aGlzLl9yb3dzO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICB0aGlzLmxpbmVzLnB1c2godGhpcy5nZXRCbGFua0xpbmUoZmlsbEF0dHIpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIHRoZSBidWZmZXIgdG8gaXQncyBpbml0aWFsIHN0YXRlLCBkaXNjYXJkaW5nIGFsbCBwcmV2aW91cyBkYXRhLlxuICAgKi9cbiAgcHVibGljIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMueWRpc3AgPSAwO1xuICAgIHRoaXMueWJhc2UgPSAwO1xuICAgIHRoaXMueSA9IDA7XG4gICAgdGhpcy54ID0gMDtcbiAgICB0aGlzLmxpbmVzID0gbmV3IENpcmN1bGFyTGlzdDxJQnVmZmVyTGluZT4odGhpcy5fZ2V0Q29ycmVjdEJ1ZmZlckxlbmd0aCh0aGlzLl9yb3dzKSk7XG4gICAgdGhpcy5zY3JvbGxUb3AgPSAwO1xuICAgIHRoaXMuc2Nyb2xsQm90dG9tID0gdGhpcy5fcm93cyAtIDE7XG4gICAgdGhpcy5zZXR1cFRhYlN0b3BzKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVzaXplcyB0aGUgYnVmZmVyLCBhZGp1c3RpbmcgaXRzIGRhdGEgYWNjb3JkaW5nbHkuXG4gICAqIEBwYXJhbSBuZXdDb2xzIFRoZSBuZXcgbnVtYmVyIG9mIGNvbHVtbnMuXG4gICAqIEBwYXJhbSBuZXdSb3dzIFRoZSBuZXcgbnVtYmVyIG9mIHJvd3MuXG4gICAqL1xuICBwdWJsaWMgcmVzaXplKG5ld0NvbHM6IG51bWJlciwgbmV3Um93czogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8gc3RvcmUgcmVmZXJlbmNlIHRvIG51bGwgY2VsbCB3aXRoIGRlZmF1bHQgYXR0cnNcbiAgICBjb25zdCBudWxsQ2VsbCA9IHRoaXMuZ2V0TnVsbENlbGwoREVGQVVMVF9BVFRSX0RBVEEpO1xuXG4gICAgLy8gSW5jcmVhc2UgbWF4IGxlbmd0aCBpZiBuZWVkZWQgYmVmb3JlIGFkanVzdG1lbnRzIHRvIGFsbG93IHNwYWNlIHRvIGZpbGxcbiAgICAvLyBhcyByZXF1aXJlZC5cbiAgICBjb25zdCBuZXdNYXhMZW5ndGggPSB0aGlzLl9nZXRDb3JyZWN0QnVmZmVyTGVuZ3RoKG5ld1Jvd3MpO1xuICAgIGlmIChuZXdNYXhMZW5ndGggPiB0aGlzLmxpbmVzLm1heExlbmd0aCkge1xuICAgICAgdGhpcy5saW5lcy5tYXhMZW5ndGggPSBuZXdNYXhMZW5ndGg7XG4gICAgfVxuXG4gICAgLy8gVGhlIGZvbGxvd2luZyBhZGp1c3RtZW50cyBzaG91bGQgb25seSBoYXBwZW4gaWYgdGhlIGJ1ZmZlciBoYXMgYmVlblxuICAgIC8vIGluaXRpYWxpemVkL2ZpbGxlZC5cbiAgICBpZiAodGhpcy5saW5lcy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBEZWFsIHdpdGggY29sdW1ucyBpbmNyZWFzaW5nIChyZWR1Y2luZyBuZWVkcyB0byBoYXBwZW4gYWZ0ZXIgcmVmbG93KVxuICAgICAgaWYgKHRoaXMuX2NvbHMgPCBuZXdDb2xzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5saW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRoaXMubGluZXMuZ2V0KGkpIS5yZXNpemUobmV3Q29scywgbnVsbENlbGwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFJlc2l6ZSByb3dzIGluIGJvdGggZGlyZWN0aW9ucyBhcyBuZWVkZWRcbiAgICAgIGxldCBhZGRUb1kgPSAwO1xuICAgICAgaWYgKHRoaXMuX3Jvd3MgPCBuZXdSb3dzKSB7XG4gICAgICAgIGZvciAobGV0IHkgPSB0aGlzLl9yb3dzOyB5IDwgbmV3Um93czsgeSsrKSB7XG4gICAgICAgICAgaWYgKHRoaXMubGluZXMubGVuZ3RoIDwgbmV3Um93cyArIHRoaXMueWJhc2UpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLndpbmRvd3NNb2RlKSB7XG4gICAgICAgICAgICAgIC8vIEp1c3QgYWRkIHRoZSBuZXcgbWlzc2luZyByb3dzIG9uIFdpbmRvd3MgYXMgY29ucHR5IHJlcHJpbnRzIHRoZSBzY3JlZW4gd2l0aCBpdCdzXG4gICAgICAgICAgICAgIC8vIHZpZXcgb2YgdGhlIHdvcmxkLiBPbmNlIGEgbGluZSBlbnRlcnMgc2Nyb2xsYmFjayBmb3IgY29ucHR5IGl0IHJlbWFpbnMgdGhlcmVcbiAgICAgICAgICAgICAgdGhpcy5saW5lcy5wdXNoKG5ldyBCdWZmZXJMaW5lKG5ld0NvbHMsIG51bGxDZWxsKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAodGhpcy55YmFzZSA+IDAgJiYgdGhpcy5saW5lcy5sZW5ndGggPD0gdGhpcy55YmFzZSArIHRoaXMueSArIGFkZFRvWSArIDEpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGVyZSBpcyByb29tIGFib3ZlIHRoZSBidWZmZXIgYW5kIHRoZXJlIGFyZSBubyBlbXB0eSBlbGVtZW50cyBiZWxvdyB0aGUgbGluZSxcbiAgICAgICAgICAgICAgICAvLyBzY3JvbGwgdXBcbiAgICAgICAgICAgICAgICB0aGlzLnliYXNlLS07XG4gICAgICAgICAgICAgICAgYWRkVG9ZKys7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMueWRpc3AgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAvLyBWaWV3cG9ydCBpcyBhdCB0aGUgdG9wIG9mIHRoZSBidWZmZXIsIG11c3QgaW5jcmVhc2UgZG93bndhcmRzXG4gICAgICAgICAgICAgICAgICB0aGlzLnlkaXNwLS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEFkZCBhIGJsYW5rIGxpbmUgaWYgdGhlcmUgaXMgbm8gYnVmZmVyIGxlZnQgYXQgdGhlIHRvcCB0byBzY3JvbGwgdG8sIG9yIGlmIHRoZXJlXG4gICAgICAgICAgICAgICAgLy8gYXJlIGJsYW5rIGxpbmVzIGFmdGVyIHRoZSBjdXJzb3JcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmVzLnB1c2gobmV3IEJ1ZmZlckxpbmUobmV3Q29scywgbnVsbENlbGwpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHsgLy8gKHRoaXMuX3Jvd3MgPj0gbmV3Um93cylcbiAgICAgICAgZm9yIChsZXQgeSA9IHRoaXMuX3Jvd3M7IHkgPiBuZXdSb3dzOyB5LS0pIHtcbiAgICAgICAgICBpZiAodGhpcy5saW5lcy5sZW5ndGggPiBuZXdSb3dzICsgdGhpcy55YmFzZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMubGluZXMubGVuZ3RoID4gdGhpcy55YmFzZSArIHRoaXMueSArIDEpIHtcbiAgICAgICAgICAgICAgLy8gVGhlIGxpbmUgaXMgYSBibGFuayBsaW5lIGJlbG93IHRoZSBjdXJzb3IsIHJlbW92ZSBpdFxuICAgICAgICAgICAgICB0aGlzLmxpbmVzLnBvcCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gVGhlIGxpbmUgaXMgdGhlIGN1cnNvciwgc2Nyb2xsIGRvd25cbiAgICAgICAgICAgICAgdGhpcy55YmFzZSsrO1xuICAgICAgICAgICAgICB0aGlzLnlkaXNwKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFJlZHVjZSBtYXggbGVuZ3RoIGlmIG5lZWRlZCBhZnRlciBhZGp1c3RtZW50cywgdGhpcyBpcyBkb25lIGFmdGVyIGFzIGl0XG4gICAgICAvLyB3b3VsZCBvdGhlcndpc2UgY3V0IGRhdGEgZnJvbSB0aGUgYm90dG9tIG9mIHRoZSBidWZmZXIuXG4gICAgICBpZiAobmV3TWF4TGVuZ3RoIDwgdGhpcy5saW5lcy5tYXhMZW5ndGgpIHtcbiAgICAgICAgLy8gVHJpbSBmcm9tIHRoZSB0b3Agb2YgdGhlIGJ1ZmZlciBhbmQgYWRqdXN0IHliYXNlIGFuZCB5ZGlzcC5cbiAgICAgICAgY29uc3QgYW1vdW50VG9UcmltID0gdGhpcy5saW5lcy5sZW5ndGggLSBuZXdNYXhMZW5ndGg7XG4gICAgICAgIGlmIChhbW91bnRUb1RyaW0gPiAwKSB7XG4gICAgICAgICAgdGhpcy5saW5lcy50cmltU3RhcnQoYW1vdW50VG9UcmltKTtcbiAgICAgICAgICB0aGlzLnliYXNlID0gTWF0aC5tYXgodGhpcy55YmFzZSAtIGFtb3VudFRvVHJpbSwgMCk7XG4gICAgICAgICAgdGhpcy55ZGlzcCA9IE1hdGgubWF4KHRoaXMueWRpc3AgLSBhbW91bnRUb1RyaW0sIDApO1xuICAgICAgICAgIHRoaXMuc2F2ZWRZID0gTWF0aC5tYXgodGhpcy5zYXZlZFkgLSBhbW91bnRUb1RyaW0sIDApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGluZXMubWF4TGVuZ3RoID0gbmV3TWF4TGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgY3Vyc29yIHN0YXlzIG9uIHNjcmVlblxuICAgICAgdGhpcy54ID0gTWF0aC5taW4odGhpcy54LCBuZXdDb2xzIC0gMSk7XG4gICAgICB0aGlzLnkgPSBNYXRoLm1pbih0aGlzLnksIG5ld1Jvd3MgLSAxKTtcbiAgICAgIGlmIChhZGRUb1kpIHtcbiAgICAgICAgdGhpcy55ICs9IGFkZFRvWTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2F2ZWRYID0gTWF0aC5taW4odGhpcy5zYXZlZFgsIG5ld0NvbHMgLSAxKTtcblxuICAgICAgdGhpcy5zY3JvbGxUb3AgPSAwO1xuICAgIH1cblxuICAgIHRoaXMuc2Nyb2xsQm90dG9tID0gbmV3Um93cyAtIDE7XG5cbiAgICBpZiAodGhpcy5faXNSZWZsb3dFbmFibGVkKSB7XG4gICAgICB0aGlzLl9yZWZsb3cobmV3Q29scywgbmV3Um93cyk7XG5cbiAgICAgIC8vIFRyaW0gdGhlIGVuZCBvZiB0aGUgbGluZSBvZmYgaWYgY29scyBzaHJ1bmtcbiAgICAgIGlmICh0aGlzLl9jb2xzID4gbmV3Q29scykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0aGlzLmxpbmVzLmdldChpKSEucmVzaXplKG5ld0NvbHMsIG51bGxDZWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2NvbHMgPSBuZXdDb2xzO1xuICAgIHRoaXMuX3Jvd3MgPSBuZXdSb3dzO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXQgX2lzUmVmbG93RW5hYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faGFzU2Nyb2xsYmFjayAmJiAhdGhpcy5fb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy53aW5kb3dzTW9kZTtcbiAgfVxuXG4gIHByaXZhdGUgX3JlZmxvdyhuZXdDb2xzOiBudW1iZXIsIG5ld1Jvd3M6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh0aGlzLl9jb2xzID09PSBuZXdDb2xzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIHJvd3MsIGlnbm9yZSB0aGUgbGFzdCBvbmUgYXMgaXQgY2Fubm90IGJlIHdyYXBwZWRcbiAgICBpZiAobmV3Q29scyA+IHRoaXMuX2NvbHMpIHtcbiAgICAgIHRoaXMuX3JlZmxvd0xhcmdlcihuZXdDb2xzLCBuZXdSb3dzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcmVmbG93U21hbGxlcihuZXdDb2xzLCBuZXdSb3dzKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9yZWZsb3dMYXJnZXIobmV3Q29sczogbnVtYmVyLCBuZXdSb3dzOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCB0b1JlbW92ZTogbnVtYmVyW10gPSByZWZsb3dMYXJnZXJHZXRMaW5lc1RvUmVtb3ZlKHRoaXMubGluZXMsIHRoaXMuX2NvbHMsIG5ld0NvbHMsIHRoaXMueWJhc2UgKyB0aGlzLnksIHRoaXMuZ2V0TnVsbENlbGwoREVGQVVMVF9BVFRSX0RBVEEpKTtcbiAgICBpZiAodG9SZW1vdmUubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgbmV3TGF5b3V0UmVzdWx0ID0gcmVmbG93TGFyZ2VyQ3JlYXRlTmV3TGF5b3V0KHRoaXMubGluZXMsIHRvUmVtb3ZlKTtcbiAgICAgIHJlZmxvd0xhcmdlckFwcGx5TmV3TGF5b3V0KHRoaXMubGluZXMsIG5ld0xheW91dFJlc3VsdC5sYXlvdXQpO1xuICAgICAgdGhpcy5fcmVmbG93TGFyZ2VyQWRqdXN0Vmlld3BvcnQobmV3Q29scywgbmV3Um93cywgbmV3TGF5b3V0UmVzdWx0LmNvdW50UmVtb3ZlZCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfcmVmbG93TGFyZ2VyQWRqdXN0Vmlld3BvcnQobmV3Q29sczogbnVtYmVyLCBuZXdSb3dzOiBudW1iZXIsIGNvdW50UmVtb3ZlZDogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgbnVsbENlbGwgPSB0aGlzLmdldE51bGxDZWxsKERFRkFVTFRfQVRUUl9EQVRBKTtcbiAgICAvLyBBZGp1c3Qgdmlld3BvcnQgYmFzZWQgb24gbnVtYmVyIG9mIGl0ZW1zIHJlbW92ZWRcbiAgICBsZXQgdmlld3BvcnRBZGp1c3RtZW50cyA9IGNvdW50UmVtb3ZlZDtcbiAgICB3aGlsZSAodmlld3BvcnRBZGp1c3RtZW50cy0tID4gMCkge1xuICAgICAgaWYgKHRoaXMueWJhc2UgPT09IDApIHtcbiAgICAgICAgaWYgKHRoaXMueSA+IDApIHtcbiAgICAgICAgICB0aGlzLnktLTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5saW5lcy5sZW5ndGggPCBuZXdSb3dzKSB7XG4gICAgICAgICAgLy8gQWRkIGFuIGV4dHJhIHJvdyBhdCB0aGUgYm90dG9tIG9mIHRoZSB2aWV3cG9ydFxuICAgICAgICAgIHRoaXMubGluZXMucHVzaChuZXcgQnVmZmVyTGluZShuZXdDb2xzLCBudWxsQ2VsbCkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy55ZGlzcCA9PT0gdGhpcy55YmFzZSkge1xuICAgICAgICAgIHRoaXMueWRpc3AtLTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnliYXNlLS07XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuc2F2ZWRZID0gTWF0aC5tYXgodGhpcy5zYXZlZFkgLSBjb3VudFJlbW92ZWQsIDApO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVmbG93U21hbGxlcihuZXdDb2xzOiBudW1iZXIsIG5ld1Jvd3M6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IG51bGxDZWxsID0gdGhpcy5nZXROdWxsQ2VsbChERUZBVUxUX0FUVFJfREFUQSk7XG4gICAgLy8gR2F0aGVyIGFsbCBCdWZmZXJMaW5lcyB0aGF0IG5lZWQgdG8gYmUgaW5zZXJ0ZWQgaW50byB0aGUgQnVmZmVyIGhlcmUgc28gdGhhdCB0aGV5IGNhbiBiZVxuICAgIC8vIGJhdGNoZWQgdXAgYW5kIG9ubHkgY29tbWl0dGVkIG9uY2VcbiAgICBjb25zdCB0b0luc2VydCA9IFtdO1xuICAgIGxldCBjb3VudFRvSW5zZXJ0ID0gMDtcbiAgICAvLyBHbyBiYWNrd2FyZHMgYXMgbWFueSBsaW5lcyBtYXkgYmUgdHJpbW1lZCBhbmQgdGhpcyB3aWxsIGF2b2lkIGNvbnNpZGVyaW5nIHRoZW1cbiAgICBmb3IgKGxldCB5ID0gdGhpcy5saW5lcy5sZW5ndGggLSAxOyB5ID49IDA7IHktLSkge1xuICAgICAgLy8gQ2hlY2sgd2hldGhlciB0aGlzIGxpbmUgaXMgYSBwcm9ibGVtXG4gICAgICBsZXQgbmV4dExpbmUgPSB0aGlzLmxpbmVzLmdldCh5KSBhcyBCdWZmZXJMaW5lO1xuICAgICAgaWYgKCFuZXh0TGluZSB8fCAhbmV4dExpbmUuaXNXcmFwcGVkICYmIG5leHRMaW5lLmdldFRyaW1tZWRMZW5ndGgoKSA8PSBuZXdDb2xzKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBHYXRoZXIgd3JhcHBlZCBsaW5lcyBhbmQgYWRqdXN0IHkgdG8gYmUgdGhlIHN0YXJ0aW5nIGxpbmVcbiAgICAgIGNvbnN0IHdyYXBwZWRMaW5lczogQnVmZmVyTGluZVtdID0gW25leHRMaW5lXTtcbiAgICAgIHdoaWxlIChuZXh0TGluZS5pc1dyYXBwZWQgJiYgeSA+IDApIHtcbiAgICAgICAgbmV4dExpbmUgPSB0aGlzLmxpbmVzLmdldCgtLXkpIGFzIEJ1ZmZlckxpbmU7XG4gICAgICAgIHdyYXBwZWRMaW5lcy51bnNoaWZ0KG5leHRMaW5lKTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlc2UgbGluZXMgY29udGFpbiB0aGUgY3Vyc29yIGRvbid0IHRvdWNoIHRoZW0sIHRoZSBwcm9ncmFtIHdpbGwgaGFuZGxlIGZpeGluZyB1cFxuICAgICAgLy8gd3JhcHBlZCBsaW5lcyB3aXRoIHRoZSBjdXJzb3JcbiAgICAgIGNvbnN0IGFic29sdXRlWSA9IHRoaXMueWJhc2UgKyB0aGlzLnk7XG4gICAgICBpZiAoYWJzb2x1dGVZID49IHkgJiYgYWJzb2x1dGVZIDwgeSArIHdyYXBwZWRMaW5lcy5sZW5ndGgpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGxhc3RMaW5lTGVuZ3RoID0gd3JhcHBlZExpbmVzW3dyYXBwZWRMaW5lcy5sZW5ndGggLSAxXS5nZXRUcmltbWVkTGVuZ3RoKCk7XG4gICAgICBjb25zdCBkZXN0TGluZUxlbmd0aHMgPSByZWZsb3dTbWFsbGVyR2V0TmV3TGluZUxlbmd0aHMod3JhcHBlZExpbmVzLCB0aGlzLl9jb2xzLCBuZXdDb2xzKTtcbiAgICAgIGNvbnN0IGxpbmVzVG9BZGQgPSBkZXN0TGluZUxlbmd0aHMubGVuZ3RoIC0gd3JhcHBlZExpbmVzLmxlbmd0aDtcbiAgICAgIGxldCB0cmltbWVkTGluZXM6IG51bWJlcjtcbiAgICAgIGlmICh0aGlzLnliYXNlID09PSAwICYmIHRoaXMueSAhPT0gdGhpcy5saW5lcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIC8vIElmIHRoZSB0b3Agc2VjdGlvbiBvZiB0aGUgYnVmZmVyIGlzIG5vdCB5ZXQgZmlsbGVkXG4gICAgICAgIHRyaW1tZWRMaW5lcyA9IE1hdGgubWF4KDAsIHRoaXMueSAtIHRoaXMubGluZXMubWF4TGVuZ3RoICsgbGluZXNUb0FkZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmltbWVkTGluZXMgPSBNYXRoLm1heCgwLCB0aGlzLmxpbmVzLmxlbmd0aCAtIHRoaXMubGluZXMubWF4TGVuZ3RoICsgbGluZXNUb0FkZCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCB0aGUgbmV3IGxpbmVzXG4gICAgICBjb25zdCBuZXdMaW5lczogQnVmZmVyTGluZVtdID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzVG9BZGQ7IGkrKykge1xuICAgICAgICBjb25zdCBuZXdMaW5lID0gdGhpcy5nZXRCbGFua0xpbmUoREVGQVVMVF9BVFRSX0RBVEEsIHRydWUpIGFzIEJ1ZmZlckxpbmU7XG4gICAgICAgIG5ld0xpbmVzLnB1c2gobmV3TGluZSk7XG4gICAgICB9XG4gICAgICBpZiAobmV3TGluZXMubGVuZ3RoID4gMCkge1xuICAgICAgICB0b0luc2VydC5wdXNoKHtcbiAgICAgICAgICAvLyBjb3VudFRvSW5zZXJ0IGhlcmUgZ2V0cyB0aGUgYWN0dWFsIGluZGV4LCB0YWtpbmcgaW50byBhY2NvdW50IG90aGVyIGluc2VydGVkIGl0ZW1zLlxuICAgICAgICAgIC8vIHVzaW5nIHRoaXMgd2UgY2FuIGl0ZXJhdGUgdGhyb3VnaCB0aGUgbGlzdCBmb3J3YXJkc1xuICAgICAgICAgIHN0YXJ0OiB5ICsgd3JhcHBlZExpbmVzLmxlbmd0aCArIGNvdW50VG9JbnNlcnQsXG4gICAgICAgICAgbmV3TGluZXNcbiAgICAgICAgfSk7XG4gICAgICAgIGNvdW50VG9JbnNlcnQgKz0gbmV3TGluZXMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgd3JhcHBlZExpbmVzLnB1c2goLi4ubmV3TGluZXMpO1xuXG4gICAgICAvLyBDb3B5IGJ1ZmZlciBkYXRhIHRvIG5ldyBsb2NhdGlvbnMsIHRoaXMgbmVlZHMgdG8gaGFwcGVuIGJhY2t3YXJkcyB0byBkbyBpbi1wbGFjZVxuICAgICAgbGV0IGRlc3RMaW5lSW5kZXggPSBkZXN0TGluZUxlbmd0aHMubGVuZ3RoIC0gMTsgLy8gTWF0aC5mbG9vcihjZWxsc05lZWRlZCAvIG5ld0NvbHMpO1xuICAgICAgbGV0IGRlc3RDb2wgPSBkZXN0TGluZUxlbmd0aHNbZGVzdExpbmVJbmRleF07IC8vIGNlbGxzTmVlZGVkICUgbmV3Q29scztcbiAgICAgIGlmIChkZXN0Q29sID09PSAwKSB7XG4gICAgICAgIGRlc3RMaW5lSW5kZXgtLTtcbiAgICAgICAgZGVzdENvbCA9IGRlc3RMaW5lTGVuZ3Roc1tkZXN0TGluZUluZGV4XTtcbiAgICAgIH1cbiAgICAgIGxldCBzcmNMaW5lSW5kZXggPSB3cmFwcGVkTGluZXMubGVuZ3RoIC0gbGluZXNUb0FkZCAtIDE7XG4gICAgICBsZXQgc3JjQ29sID0gbGFzdExpbmVMZW5ndGg7XG4gICAgICB3aGlsZSAoc3JjTGluZUluZGV4ID49IDApIHtcbiAgICAgICAgY29uc3QgY2VsbHNUb0NvcHkgPSBNYXRoLm1pbihzcmNDb2wsIGRlc3RDb2wpO1xuICAgICAgICBpZiAod3JhcHBlZExpbmVzW2Rlc3RMaW5lSW5kZXhdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAvLyBTYW5pdHkgY2hlY2sgdGhhdCB0aGUgbGluZSBleGlzdHMsIHRoaXMgaGFzIGJlZW4ga25vd24gdG8gZmFpbCBmb3IgYW4gdW5rbm93biByZWFzb25cbiAgICAgICAgICAvLyB3aGljaCB3b3VsZCBzdG9wIHRoZSByZWZsb3cgZnJvbSBoYXBwZW5pbmcgaWYgYW4gZXhjZXB0aW9uIHdvdWxkIHRocm93LlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHdyYXBwZWRMaW5lc1tkZXN0TGluZUluZGV4XS5jb3B5Q2VsbHNGcm9tKHdyYXBwZWRMaW5lc1tzcmNMaW5lSW5kZXhdLCBzcmNDb2wgLSBjZWxsc1RvQ29weSwgZGVzdENvbCAtIGNlbGxzVG9Db3B5LCBjZWxsc1RvQ29weSwgdHJ1ZSk7XG4gICAgICAgIGRlc3RDb2wgLT0gY2VsbHNUb0NvcHk7XG4gICAgICAgIGlmIChkZXN0Q29sID09PSAwKSB7XG4gICAgICAgICAgZGVzdExpbmVJbmRleC0tO1xuICAgICAgICAgIGRlc3RDb2wgPSBkZXN0TGluZUxlbmd0aHNbZGVzdExpbmVJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgc3JjQ29sIC09IGNlbGxzVG9Db3B5O1xuICAgICAgICBpZiAoc3JjQ29sID09PSAwKSB7XG4gICAgICAgICAgc3JjTGluZUluZGV4LS07XG4gICAgICAgICAgY29uc3Qgd3JhcHBlZExpbmVzSW5kZXggPSBNYXRoLm1heChzcmNMaW5lSW5kZXgsIDApO1xuICAgICAgICAgIHNyY0NvbCA9IGdldFdyYXBwZWRMaW5lVHJpbW1lZExlbmd0aCh3cmFwcGVkTGluZXMsIHdyYXBwZWRMaW5lc0luZGV4LCB0aGlzLl9jb2xzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBOdWxsIG91dCB0aGUgZW5kIG9mIHRoZSBsaW5lIGVuZHMgaWYgYSB3aWRlIGNoYXJhY3RlciB3cmFwcGVkIHRvIHRoZSBmb2xsb3dpbmcgbGluZVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3cmFwcGVkTGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGRlc3RMaW5lTGVuZ3Roc1tpXSA8IG5ld0NvbHMpIHtcbiAgICAgICAgICB3cmFwcGVkTGluZXNbaV0uc2V0Q2VsbChkZXN0TGluZUxlbmd0aHNbaV0sIG51bGxDZWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBBZGp1c3Qgdmlld3BvcnQgYXMgbmVlZGVkXG4gICAgICBsZXQgdmlld3BvcnRBZGp1c3RtZW50cyA9IGxpbmVzVG9BZGQgLSB0cmltbWVkTGluZXM7XG4gICAgICB3aGlsZSAodmlld3BvcnRBZGp1c3RtZW50cy0tID4gMCkge1xuICAgICAgICBpZiAodGhpcy55YmFzZSA9PT0gMCkge1xuICAgICAgICAgIGlmICh0aGlzLnkgPCBuZXdSb3dzIC0gMSkge1xuICAgICAgICAgICAgdGhpcy55Kys7XG4gICAgICAgICAgICB0aGlzLmxpbmVzLnBvcCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnliYXNlKys7XG4gICAgICAgICAgICB0aGlzLnlkaXNwKys7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEVuc3VyZSB5YmFzZSBkb2VzIG5vdCBleGNlZWQgaXRzIG1heGltdW0gdmFsdWVcbiAgICAgICAgICBpZiAodGhpcy55YmFzZSA8IE1hdGgubWluKHRoaXMubGluZXMubWF4TGVuZ3RoLCB0aGlzLmxpbmVzLmxlbmd0aCArIGNvdW50VG9JbnNlcnQpIC0gbmV3Um93cykge1xuICAgICAgICAgICAgaWYgKHRoaXMueWJhc2UgPT09IHRoaXMueWRpc3ApIHtcbiAgICAgICAgICAgICAgdGhpcy55ZGlzcCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy55YmFzZSsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5zYXZlZFkgPSBNYXRoLm1pbih0aGlzLnNhdmVkWSArIGxpbmVzVG9BZGQsIHRoaXMueWJhc2UgKyBuZXdSb3dzIC0gMSk7XG4gICAgfVxuXG4gICAgLy8gUmVhcnJhbmdlIGxpbmVzIGluIHRoZSBidWZmZXIgaWYgdGhlcmUgYXJlIGFueSBpbnNlcnRpb25zLCB0aGlzIGlzIGRvbmUgYXQgdGhlIGVuZCByYXRoZXJcbiAgICAvLyB0aGFuIGVhcmxpZXIgc28gdGhhdCBpdCdzIGEgc2luZ2xlIE8obikgcGFzcyB0aHJvdWdoIHRoZSBidWZmZXIsIGluc3RlYWQgb2YgTyhuXjIpIGZyb20gbWFueVxuICAgIC8vIGNvc3RseSBjYWxscyB0byBDaXJjdWxhckxpc3Quc3BsaWNlLlxuICAgIGlmICh0b0luc2VydC5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBSZWNvcmQgYnVmZmVyIGluc2VydCBldmVudHMgYW5kIHRoZW4gcGxheSB0aGVtIGJhY2sgYmFja3dhcmRzIHNvIHRoYXQgdGhlIGluZGV4ZXMgYXJlXG4gICAgICAvLyBjb3JyZWN0XG4gICAgICBjb25zdCBpbnNlcnRFdmVudHM6IElJbnNlcnRFdmVudFtdID0gW107XG5cbiAgICAgIC8vIFJlY29yZCBvcmlnaW5hbCBsaW5lcyBzbyB0aGV5IGRvbid0IGdldCBvdmVycmlkZGVuIHdoZW4gd2UgcmVhcnJhbmdlIHRoZSBsaXN0XG4gICAgICBjb25zdCBvcmlnaW5hbExpbmVzOiBCdWZmZXJMaW5lW10gPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5saW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBvcmlnaW5hbExpbmVzLnB1c2godGhpcy5saW5lcy5nZXQoaSkgYXMgQnVmZmVyTGluZSk7XG4gICAgICB9XG4gICAgICBjb25zdCBvcmlnaW5hbExpbmVzTGVuZ3RoID0gdGhpcy5saW5lcy5sZW5ndGg7XG5cbiAgICAgIGxldCBvcmlnaW5hbExpbmVJbmRleCA9IG9yaWdpbmFsTGluZXNMZW5ndGggLSAxO1xuICAgICAgbGV0IG5leHRUb0luc2VydEluZGV4ID0gMDtcbiAgICAgIGxldCBuZXh0VG9JbnNlcnQgPSB0b0luc2VydFtuZXh0VG9JbnNlcnRJbmRleF07XG4gICAgICB0aGlzLmxpbmVzLmxlbmd0aCA9IE1hdGgubWluKHRoaXMubGluZXMubWF4TGVuZ3RoLCB0aGlzLmxpbmVzLmxlbmd0aCArIGNvdW50VG9JbnNlcnQpO1xuICAgICAgbGV0IGNvdW50SW5zZXJ0ZWRTb0ZhciA9IDA7XG4gICAgICBmb3IgKGxldCBpID0gTWF0aC5taW4odGhpcy5saW5lcy5tYXhMZW5ndGggLSAxLCBvcmlnaW5hbExpbmVzTGVuZ3RoICsgY291bnRUb0luc2VydCAtIDEpOyBpID49IDA7IGktLSkge1xuICAgICAgICBpZiAobmV4dFRvSW5zZXJ0ICYmIG5leHRUb0luc2VydC5zdGFydCA+IG9yaWdpbmFsTGluZUluZGV4ICsgY291bnRJbnNlcnRlZFNvRmFyKSB7XG4gICAgICAgICAgLy8gSW5zZXJ0IGV4dHJhIGxpbmVzIGhlcmUsIGFkanVzdGluZyBpIGFzIG5lZWRlZFxuICAgICAgICAgIGZvciAobGV0IG5leHRJID0gbmV4dFRvSW5zZXJ0Lm5ld0xpbmVzLmxlbmd0aCAtIDE7IG5leHRJID49IDA7IG5leHRJLS0pIHtcbiAgICAgICAgICAgIHRoaXMubGluZXMuc2V0KGktLSwgbmV4dFRvSW5zZXJ0Lm5ld0xpbmVzW25leHRJXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGkrKztcblxuICAgICAgICAgIC8vIENyZWF0ZSBpbnNlcnQgZXZlbnRzIGZvciBsYXRlclxuICAgICAgICAgIGluc2VydEV2ZW50cy5wdXNoKHtcbiAgICAgICAgICAgIGluZGV4OiBvcmlnaW5hbExpbmVJbmRleCArIDEsXG4gICAgICAgICAgICBhbW91bnQ6IG5leHRUb0luc2VydC5uZXdMaW5lcy5sZW5ndGhcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGNvdW50SW5zZXJ0ZWRTb0ZhciArPSBuZXh0VG9JbnNlcnQubmV3TGluZXMubGVuZ3RoO1xuICAgICAgICAgIG5leHRUb0luc2VydCA9IHRvSW5zZXJ0WysrbmV4dFRvSW5zZXJ0SW5kZXhdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubGluZXMuc2V0KGksIG9yaWdpbmFsTGluZXNbb3JpZ2luYWxMaW5lSW5kZXgtLV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFVwZGF0ZSBtYXJrZXJzXG4gICAgICBsZXQgaW5zZXJ0Q291bnRFbWl0dGVkID0gMDtcbiAgICAgIGZvciAobGV0IGkgPSBpbnNlcnRFdmVudHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgaW5zZXJ0RXZlbnRzW2ldLmluZGV4ICs9IGluc2VydENvdW50RW1pdHRlZDtcbiAgICAgICAgdGhpcy5saW5lcy5vbkluc2VydEVtaXR0ZXIuZmlyZShpbnNlcnRFdmVudHNbaV0pO1xuICAgICAgICBpbnNlcnRDb3VudEVtaXR0ZWQgKz0gaW5zZXJ0RXZlbnRzW2ldLmFtb3VudDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGFtb3VudFRvVHJpbSA9IE1hdGgubWF4KDAsIG9yaWdpbmFsTGluZXNMZW5ndGggKyBjb3VudFRvSW5zZXJ0IC0gdGhpcy5saW5lcy5tYXhMZW5ndGgpO1xuICAgICAgaWYgKGFtb3VudFRvVHJpbSA+IDApIHtcbiAgICAgICAgdGhpcy5saW5lcy5vblRyaW1FbWl0dGVyLmZpcmUoYW1vdW50VG9UcmltKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBwcml2YXRlIF9yZWZsb3dTbWFsbGVyR2V0TGluZXNOZWVkZWQoKVxuXG4gIC8qKlxuICAgKiBUcmFuc2xhdGVzIGEgc3RyaW5nIGluZGV4IGJhY2sgdG8gYSBCdWZmZXJJbmRleC5cbiAgICogVG8gZ2V0IHRoZSBjb3JyZWN0IGJ1ZmZlciBwb3NpdGlvbiB0aGUgc3RyaW5nIG11c3Qgc3RhcnQgYXQgYHN0YXJ0Q29sYCAwXG4gICAqIChkZWZhdWx0IGluIHRyYW5zbGF0ZUJ1ZmZlckxpbmVUb1N0cmluZykuXG4gICAqIFRoZSBtZXRob2QgYWxzbyB3b3JrcyBvbiB3cmFwcGVkIGxpbmUgc3RyaW5ncyBnaXZlbiByb3dzIHdlcmUgbm90IHRyaW1tZWQuXG4gICAqIFRoZSBtZXRob2Qgb3BlcmF0ZXMgb24gdGhlIENoYXJEYXRhIHN0cmluZyBsZW5ndGgsIHRoZXJlIGFyZSBub1xuICAgKiBhZGRpdGlvbmFsIGNvbnRlbnQgb3IgYm91bmRhcnkgY2hlY2tzLiBUaGVyZWZvcmUgdGhlIHN0cmluZyBhbmQgdGhlIGJ1ZmZlclxuICAgKiBzaG91bGQgbm90IGJlIGFsdGVyZWQgaW4gYmV0d2Vlbi5cbiAgICogVE9ETzogcmVzcGVjdCB0cmltIGZsYWcgYWZ0ZXIgZml4aW5nICMxNjg1XG4gICAqIEBwYXJhbSBsaW5lSW5kZXggbGluZSBpbmRleCB0aGUgc3RyaW5nIHdhcyByZXRyaWV2ZWQgZnJvbVxuICAgKiBAcGFyYW0gc3RyaW5nSW5kZXggaW5kZXggd2l0aGluIHRoZSBzdHJpbmdcbiAgICogQHBhcmFtIHN0YXJ0Q29sIGNvbHVtbiBvZmZzZXQgdGhlIHN0cmluZyB3YXMgcmV0cmlldmVkIGZyb21cbiAgICovXG4gIHB1YmxpYyBzdHJpbmdJbmRleFRvQnVmZmVySW5kZXgobGluZUluZGV4OiBudW1iZXIsIHN0cmluZ0luZGV4OiBudW1iZXIsIHRyaW1SaWdodDogYm9vbGVhbiA9IGZhbHNlKTogQnVmZmVySW5kZXgge1xuICAgIHdoaWxlIChzdHJpbmdJbmRleCkge1xuICAgICAgY29uc3QgbGluZSA9IHRoaXMubGluZXMuZ2V0KGxpbmVJbmRleCk7XG4gICAgICBpZiAoIWxpbmUpIHtcbiAgICAgICAgcmV0dXJuIFstMSwgLTFdO1xuICAgICAgfVxuICAgICAgY29uc3QgbGVuZ3RoID0gKHRyaW1SaWdodCkgPyBsaW5lLmdldFRyaW1tZWRMZW5ndGgoKSA6IGxpbmUubGVuZ3RoO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAobGluZS5nZXQoaSlbQ0hBUl9EQVRBX1dJRFRIX0lOREVYXSkge1xuICAgICAgICAgIC8vIGVtcHR5IGNlbGxzIHJlcG9ydCBhIHN0cmluZyBsZW5ndGggb2YgMCwgYnV0IGdldCByZXBsYWNlZFxuICAgICAgICAgIC8vIHdpdGggYSB3aGl0ZXNwYWNlIGluIHRyYW5zbGF0ZVRvU3RyaW5nLCB0aHVzIHJlcGxhY2Ugd2l0aCAxXG4gICAgICAgICAgc3RyaW5nSW5kZXggLT0gbGluZS5nZXQoaSlbQ0hBUl9EQVRBX0NIQVJfSU5ERVhdLmxlbmd0aCB8fCAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdHJpbmdJbmRleCA8IDApIHtcbiAgICAgICAgICByZXR1cm4gW2xpbmVJbmRleCwgaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpbmVJbmRleCsrO1xuICAgIH1cbiAgICByZXR1cm4gW2xpbmVJbmRleCwgMF07XG4gIH1cblxuICAvKipcbiAgICogVHJhbnNsYXRlcyBhIGJ1ZmZlciBsaW5lIHRvIGEgc3RyaW5nLCB3aXRoIG9wdGlvbmFsIHN0YXJ0IGFuZCBlbmQgY29sdW1ucy5cbiAgICogV2lkZSBjaGFyYWN0ZXJzIHdpbGwgY291bnQgYXMgdHdvIGNvbHVtbnMgaW4gdGhlIHJlc3VsdGluZyBzdHJpbmcuIFRoaXNcbiAgICogZnVuY3Rpb24gaXMgdXNlZnVsIGZvciBnZXR0aW5nIHRoZSBhY3R1YWwgdGV4dCB1bmRlcm5lYXRoIHRoZSByYXcgc2VsZWN0aW9uXG4gICAqIHBvc2l0aW9uLlxuICAgKiBAcGFyYW0gbGluZSBUaGUgbGluZSBiZWluZyB0cmFuc2xhdGVkLlxuICAgKiBAcGFyYW0gdHJpbVJpZ2h0IFdoZXRoZXIgdG8gdHJpbSB3aGl0ZXNwYWNlIHRvIHRoZSByaWdodC5cbiAgICogQHBhcmFtIHN0YXJ0Q29sIFRoZSBjb2x1bW4gdG8gc3RhcnQgYXQuXG4gICAqIEBwYXJhbSBlbmRDb2wgVGhlIGNvbHVtbiB0byBlbmQgYXQuXG4gICAqL1xuICBwdWJsaWMgdHJhbnNsYXRlQnVmZmVyTGluZVRvU3RyaW5nKGxpbmVJbmRleDogbnVtYmVyLCB0cmltUmlnaHQ6IGJvb2xlYW4sIHN0YXJ0Q29sOiBudW1iZXIgPSAwLCBlbmRDb2w/OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IGxpbmUgPSB0aGlzLmxpbmVzLmdldChsaW5lSW5kZXgpO1xuICAgIGlmICghbGluZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gbGluZS50cmFuc2xhdGVUb1N0cmluZyh0cmltUmlnaHQsIHN0YXJ0Q29sLCBlbmRDb2wpO1xuICB9XG5cbiAgcHVibGljIGdldFdyYXBwZWRSYW5nZUZvckxpbmUoeTogbnVtYmVyKTogeyBmaXJzdDogbnVtYmVyLCBsYXN0OiBudW1iZXIgfSB7XG4gICAgbGV0IGZpcnN0ID0geTtcbiAgICBsZXQgbGFzdCA9IHk7XG4gICAgLy8gU2NhbiB1cHdhcmRzIGZvciB3cmFwcGVkIGxpbmVzXG4gICAgd2hpbGUgKGZpcnN0ID4gMCAmJiB0aGlzLmxpbmVzLmdldChmaXJzdCkhLmlzV3JhcHBlZCkge1xuICAgICAgZmlyc3QtLTtcbiAgICB9XG4gICAgLy8gU2NhbiBkb3dud2FyZHMgZm9yIHdyYXBwZWQgbGluZXNcbiAgICB3aGlsZSAobGFzdCArIDEgPCB0aGlzLmxpbmVzLmxlbmd0aCAmJiB0aGlzLmxpbmVzLmdldChsYXN0ICsgMSkhLmlzV3JhcHBlZCkge1xuICAgICAgbGFzdCsrO1xuICAgIH1cbiAgICByZXR1cm4geyBmaXJzdCwgbGFzdCB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHVwIHRoZSB0YWIgc3RvcHMuXG4gICAqIEBwYXJhbSBpIFRoZSBpbmRleCB0byBzdGFydCBzZXR0aW5nIHVwIHRhYiBzdG9wcyBmcm9tLlxuICAgKi9cbiAgcHVibGljIHNldHVwVGFiU3RvcHMoaT86IG51bWJlcik6IHZvaWQge1xuICAgIGlmIChpICE9PSBudWxsICYmIGkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCF0aGlzLnRhYnNbaV0pIHtcbiAgICAgICAgaSA9IHRoaXMucHJldlN0b3AoaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGFicyA9IHt9O1xuICAgICAgaSA9IDA7XG4gICAgfVxuXG4gICAgZm9yICg7IGkgPCB0aGlzLl9jb2xzOyBpICs9IHRoaXMuX29wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMudGFiU3RvcFdpZHRoKSB7XG4gICAgICB0aGlzLnRhYnNbaV0gPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNb3ZlIHRoZSBjdXJzb3IgdG8gdGhlIHByZXZpb3VzIHRhYiBzdG9wIGZyb20gdGhlIGdpdmVuIHBvc2l0aW9uIChkZWZhdWx0IGlzIGN1cnJlbnQpLlxuICAgKiBAcGFyYW0geCBUaGUgcG9zaXRpb24gdG8gbW92ZSB0aGUgY3Vyc29yIHRvIHRoZSBwcmV2aW91cyB0YWIgc3RvcC5cbiAgICovXG4gIHB1YmxpYyBwcmV2U3RvcCh4PzogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAoeCA9PT0gbnVsbCB8fCB4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHggPSB0aGlzLng7XG4gICAgfVxuICAgIHdoaWxlICghdGhpcy50YWJzWy0teF0gJiYgeCA+IDApO1xuICAgIHJldHVybiB4ID49IHRoaXMuX2NvbHMgPyB0aGlzLl9jb2xzIC0gMSA6IHggPCAwID8gMCA6IHg7XG4gIH1cblxuICAvKipcbiAgICogTW92ZSB0aGUgY3Vyc29yIG9uZSB0YWIgc3RvcCBmb3J3YXJkIGZyb20gdGhlIGdpdmVuIHBvc2l0aW9uIChkZWZhdWx0IGlzIGN1cnJlbnQpLlxuICAgKiBAcGFyYW0geCBUaGUgcG9zaXRpb24gdG8gbW92ZSB0aGUgY3Vyc29yIG9uZSB0YWIgc3RvcCBmb3J3YXJkLlxuICAgKi9cbiAgcHVibGljIG5leHRTdG9wKHg/OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmICh4ID09PSBudWxsIHx8IHggPT09IHVuZGVmaW5lZCkge1xuICAgICAgeCA9IHRoaXMueDtcbiAgICB9XG4gICAgd2hpbGUgKCF0aGlzLnRhYnNbKyt4XSAmJiB4IDwgdGhpcy5fY29scyk7XG4gICAgcmV0dXJuIHggPj0gdGhpcy5fY29scyA/IHRoaXMuX2NvbHMgLSAxIDogeCA8IDAgPyAwIDogeDtcbiAgfVxuXG4gIHB1YmxpYyBjbGVhck1hcmtlcnMoeT86IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2lzQ2xlYXJpbmcgPSB0cnVlO1xuICAgIGlmICh5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tYXJrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzLm1hcmtlcnNbaV0ubGluZSA9PT0geSkge1xuICAgICAgICAgIHRoaXMubWFya2Vyc1tpXS5kaXNwb3NlKCk7XG4gICAgICAgICAgdGhpcy5tYXJrZXJzLnNwbGljZShpLS0sIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoY29uc3QgbWFya2VyIG9mIHRoaXMubWFya2Vycykge1xuICAgICAgICBtYXJrZXIuZGlzcG9zZSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5tYXJrZXJzID0gW107XG4gICAgfVxuICAgIHRoaXMuX2lzQ2xlYXJpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyBhZGRNYXJrZXIoeTogbnVtYmVyKTogTWFya2VyIHtcbiAgICBjb25zdCBtYXJrZXIgPSBuZXcgTWFya2VyKHkpO1xuICAgIHRoaXMubWFya2Vycy5wdXNoKG1hcmtlcik7XG4gICAgbWFya2VyLnJlZ2lzdGVyKHRoaXMubGluZXMub25UcmltKGFtb3VudCA9PiB7XG4gICAgICBtYXJrZXIubGluZSAtPSBhbW91bnQ7XG4gICAgICAvLyBUaGUgbWFya2VyIHNob3VsZCBiZSBkaXNwb3NlZCB3aGVuIHRoZSBsaW5lIGlzIHRyaW1tZWQgZnJvbSB0aGUgYnVmZmVyXG4gICAgICBpZiAobWFya2VyLmxpbmUgPCAwKSB7XG4gICAgICAgIG1hcmtlci5kaXNwb3NlKCk7XG4gICAgICB9XG4gICAgfSkpO1xuICAgIG1hcmtlci5yZWdpc3Rlcih0aGlzLmxpbmVzLm9uSW5zZXJ0KGV2ZW50ID0+IHtcbiAgICAgIGlmIChtYXJrZXIubGluZSA+PSBldmVudC5pbmRleCkge1xuICAgICAgICBtYXJrZXIubGluZSArPSBldmVudC5hbW91bnQ7XG4gICAgICB9XG4gICAgfSkpO1xuICAgIG1hcmtlci5yZWdpc3Rlcih0aGlzLmxpbmVzLm9uRGVsZXRlKGV2ZW50ID0+IHtcbiAgICAgIC8vIERlbGV0ZSB0aGUgbWFya2VyIGlmIGl0J3Mgd2l0aGluIHRoZSByYW5nZVxuICAgICAgaWYgKG1hcmtlci5saW5lID49IGV2ZW50LmluZGV4ICYmIG1hcmtlci5saW5lIDwgZXZlbnQuaW5kZXggKyBldmVudC5hbW91bnQpIHtcbiAgICAgICAgbWFya2VyLmRpc3Bvc2UoKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2hpZnQgdGhlIG1hcmtlciBpZiBpdCdzIGFmdGVyIHRoZSBkZWxldGVkIHJhbmdlXG4gICAgICBpZiAobWFya2VyLmxpbmUgPiBldmVudC5pbmRleCkge1xuICAgICAgICBtYXJrZXIubGluZSAtPSBldmVudC5hbW91bnQ7XG4gICAgICB9XG4gICAgfSkpO1xuICAgIG1hcmtlci5yZWdpc3RlcihtYXJrZXIub25EaXNwb3NlKCgpID0+IHRoaXMuX3JlbW92ZU1hcmtlcihtYXJrZXIpKSk7XG4gICAgcmV0dXJuIG1hcmtlcjtcbiAgfVxuXG4gIHByaXZhdGUgX3JlbW92ZU1hcmtlcihtYXJrZXI6IE1hcmtlcik6IHZvaWQge1xuICAgIGlmICghdGhpcy5faXNDbGVhcmluZykge1xuICAgICAgdGhpcy5tYXJrZXJzLnNwbGljZSh0aGlzLm1hcmtlcnMuaW5kZXhPZihtYXJrZXIpLCAxKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgaXRlcmF0b3IodHJpbVJpZ2h0OiBib29sZWFuLCBzdGFydEluZGV4PzogbnVtYmVyLCBlbmRJbmRleD86IG51bWJlciwgc3RhcnRPdmVyc2Nhbj86IG51bWJlciwgZW5kT3ZlcnNjYW4/OiBudW1iZXIpOiBJQnVmZmVyU3RyaW5nSXRlcmF0b3Ige1xuICAgIHJldHVybiBuZXcgQnVmZmVyU3RyaW5nSXRlcmF0b3IodGhpcywgdHJpbVJpZ2h0LCBzdGFydEluZGV4LCBlbmRJbmRleCwgc3RhcnRPdmVyc2NhbiwgZW5kT3ZlcnNjYW4pO1xuICB9XG59XG5cbi8qKlxuICogSXRlcmF0b3IgdG8gZ2V0IHVud3JhcHBlZCBjb250ZW50IHN0cmluZ3MgZnJvbSB0aGUgYnVmZmVyLlxuICogVGhlIGl0ZXJhdG9yIHJldHVybnMgYXQgbGVhc3QgdGhlIHN0cmluZyBkYXRhIGJldHdlZW4gdGhlIGJvcmRlcnNcbiAqIGBzdGFydEluZGV4YCBhbmQgYGVuZEluZGV4YCAoZXhjbHVzaXZlKSBhbmQgd2lsbCBleHBhbmQgdGhlIGxpbmVzXG4gKiBieSBgc3RhcnRPdmVyc2NhbmAgdG8gdGhlIHRvcCBhbmQgYnkgYGVuZE92ZXJzY2FuYCB0byB0aGUgYm90dG9tLFxuICogaWYgbm8gbmV3IGxpbmUgd2FzIGZvdW5kIGluIGJldHdlZW4uXG4gKiBJdCB3aWxsIG5ldmVyIHJlYWQvcmV0dXJuIHN0cmluZyBkYXRhIGJleW9uZCBgc3RhcnRJbmRleCAtIHN0YXJ0T3ZlcnNjYW5gXG4gKiBvciBgZW5kSW5kZXggKyBlbmRPdmVyc2NhbmAuIFRoZXJlZm9yZSB0aGUgZmlyc3QgYW5kIGxhc3QgbGluZSBtaWdodCBiZSB0cnVuY2F0ZWQuXG4gKiBJdCBpcyBwb3NzaWJsZSB0byBhbHdheXMgZ2V0IHRoZSBmdWxsIHN0cmluZyBmb3IgdGhlIGZpcnN0IGFuZCBsYXN0IGxpbmUgYXMgd2VsbFxuICogYnkgc2V0dGluZyB0aGUgb3ZlcnNjYW4gdmFsdWVzIHRvIHRoZSBhY3R1YWwgYnVmZmVyIGxlbmd0aC4gVGhpcyBub3QgcmVjb21tZW5kZWRcbiAqIHNpbmNlIGl0IG1pZ2h0IHJldHVybiB0aGUgd2hvbGUgYnVmZmVyIHdpdGhpbiBhIHNpbmdsZSBzdHJpbmcgaW4gYSB3b3JzdCBjYXNlIHNjZW5hcmlvLlxuICovXG5leHBvcnQgY2xhc3MgQnVmZmVyU3RyaW5nSXRlcmF0b3IgaW1wbGVtZW50cyBJQnVmZmVyU3RyaW5nSXRlcmF0b3Ige1xuICBwcml2YXRlIF9jdXJyZW50OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IgKFxuICAgIHByaXZhdGUgX2J1ZmZlcjogSUJ1ZmZlcixcbiAgICBwcml2YXRlIF90cmltUmlnaHQ6IGJvb2xlYW4sXG4gICAgcHJpdmF0ZSBfc3RhcnRJbmRleDogbnVtYmVyID0gMCxcbiAgICBwcml2YXRlIF9lbmRJbmRleDogbnVtYmVyID0gX2J1ZmZlci5saW5lcy5sZW5ndGgsXG4gICAgcHJpdmF0ZSBfc3RhcnRPdmVyc2NhbjogbnVtYmVyID0gMCxcbiAgICBwcml2YXRlIF9lbmRPdmVyc2NhbjogbnVtYmVyID0gMFxuICApIHtcbiAgICBpZiAodGhpcy5fc3RhcnRJbmRleCA8IDApIHtcbiAgICAgIHRoaXMuX3N0YXJ0SW5kZXggPSAwO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZW5kSW5kZXggPiB0aGlzLl9idWZmZXIubGluZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9lbmRJbmRleCA9IHRoaXMuX2J1ZmZlci5saW5lcy5sZW5ndGg7XG4gICAgfVxuICAgIHRoaXMuX2N1cnJlbnQgPSB0aGlzLl9zdGFydEluZGV4O1xuICB9XG5cbiAgcHVibGljIGhhc05leHQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2N1cnJlbnQgPCB0aGlzLl9lbmRJbmRleDtcbiAgfVxuXG4gIHB1YmxpYyBuZXh0KCk6IElCdWZmZXJTdHJpbmdJdGVyYXRvclJlc3VsdCB7XG4gICAgY29uc3QgcmFuZ2UgPSB0aGlzLl9idWZmZXIuZ2V0V3JhcHBlZFJhbmdlRm9yTGluZSh0aGlzLl9jdXJyZW50KTtcbiAgICAvLyBsaW1pdCBzZWFyY2ggd2luZG93IHRvIG92ZXJzY2FuIHZhbHVlIGF0IGJvdGggYm9yZGVyc1xuICAgIGlmIChyYW5nZS5maXJzdCA8IHRoaXMuX3N0YXJ0SW5kZXggLSB0aGlzLl9zdGFydE92ZXJzY2FuKSB7XG4gICAgICByYW5nZS5maXJzdCA9IHRoaXMuX3N0YXJ0SW5kZXggLSB0aGlzLl9zdGFydE92ZXJzY2FuO1xuICAgIH1cbiAgICBpZiAocmFuZ2UubGFzdCA+IHRoaXMuX2VuZEluZGV4ICsgdGhpcy5fZW5kT3ZlcnNjYW4pIHtcbiAgICAgIHJhbmdlLmxhc3QgPSB0aGlzLl9lbmRJbmRleCArIHRoaXMuX2VuZE92ZXJzY2FuO1xuICAgIH1cbiAgICAvLyBsaW1pdCB0byBjdXJyZW50IGJ1ZmZlciBsZW5ndGhcbiAgICByYW5nZS5maXJzdCA9IE1hdGgubWF4KHJhbmdlLmZpcnN0LCAwKTtcbiAgICByYW5nZS5sYXN0ID0gTWF0aC5taW4ocmFuZ2UubGFzdCwgdGhpcy5fYnVmZmVyLmxpbmVzLmxlbmd0aCk7XG4gICAgbGV0IGNvbnRlbnQgPSAnJztcbiAgICBmb3IgKGxldCBpID0gcmFuZ2UuZmlyc3Q7IGkgPD0gcmFuZ2UubGFzdDsgKytpKSB7XG4gICAgICBjb250ZW50ICs9IHRoaXMuX2J1ZmZlci50cmFuc2xhdGVCdWZmZXJMaW5lVG9TdHJpbmcoaSwgdGhpcy5fdHJpbVJpZ2h0KTtcbiAgICB9XG4gICAgdGhpcy5fY3VycmVudCA9IHJhbmdlLmxhc3QgKyAxO1xuICAgIHJldHVybiB7IHJhbmdlLCBjb250ZW50IH07XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE4IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgQ2hhckRhdGEsIElCdWZmZXJMaW5lLCBJQ2VsbERhdGEsIElBdHRyaWJ1dGVEYXRhLCBJRXh0ZW5kZWRBdHRycyB9IGZyb20gJ2NvbW1vbi9UeXBlcyc7XG5pbXBvcnQgeyBzdHJpbmdGcm9tQ29kZVBvaW50IH0gZnJvbSAnY29tbW9uL2lucHV0L1RleHREZWNvZGVyJztcbmltcG9ydCB7IENIQVJfREFUQV9DSEFSX0lOREVYLCBDSEFSX0RBVEFfV0lEVEhfSU5ERVgsIENIQVJfREFUQV9BVFRSX0lOREVYLCBOVUxMX0NFTExfQ0hBUiwgTlVMTF9DRUxMX1dJRFRILCBOVUxMX0NFTExfQ09ERSwgV0hJVEVTUEFDRV9DRUxMX0NIQVIsIENvbnRlbnQsIEJnRmxhZ3MgfSBmcm9tICdjb21tb24vYnVmZmVyL0NvbnN0YW50cyc7XG5pbXBvcnQgeyBDZWxsRGF0YSB9IGZyb20gJ2NvbW1vbi9idWZmZXIvQ2VsbERhdGEnO1xuaW1wb3J0IHsgQXR0cmlidXRlRGF0YSwgRXh0ZW5kZWRBdHRycyB9IGZyb20gJ2NvbW1vbi9idWZmZXIvQXR0cmlidXRlRGF0YSc7XG5cbi8qKlxuICogYnVmZmVyIG1lbW9yeSBsYXlvdXQ6XG4gKlxuICogICB8ICAgICAgICAgICAgIHVpbnQzMl90ICAgICAgICAgICAgIHwgICAgICAgIHVpbnQzMl90ICAgICAgICAgfCAgICAgICAgdWludDMyX3QgICAgICAgICB8XG4gKiAgIHwgICAgICAgICAgICAgYGNvbnRlbnRgICAgICAgICAgICAgfCAgICAgICAgICBgRkdgICAgICAgICAgICB8ICAgICAgICAgIGBCR2AgICAgICAgICAgIHxcbiAqICAgfCB3Y3dpZHRoKDIpIGNvbWIoMSkgY29kZXBvaW50KDIxKSB8IGZsYWdzKDgpIFIoOCkgRyg4KSBCKDgpIHwgZmxhZ3MoOCkgUig4KSBHKDgpIEIoOCkgfFxuICovXG5cblxuLyoqIHR5cGVkIGFycmF5IHNsb3RzIHRha2VuIGJ5IG9uZSBjZWxsICovXG5jb25zdCBDRUxMX1NJWkUgPSAzO1xuXG4vKipcbiAqIENlbGwgbWVtYmVyIGluZGljZXMuXG4gKlxuICogRGlyZWN0IGFjY2VzczpcbiAqICAgIGBjb250ZW50ID0gZGF0YVtjb2x1bW4gKiBDRUxMX1NJWkUgKyBDZWxsLkNPTlRFTlRdO2BcbiAqICAgIGBmZyA9IGRhdGFbY29sdW1uICogQ0VMTF9TSVpFICsgQ2VsbC5GR107YFxuICogICAgYGJnID0gZGF0YVtjb2x1bW4gKiBDRUxMX1NJWkUgKyBDZWxsLkJHXTtgXG4gKi9cbmNvbnN0IGVudW0gQ2VsbCB7XG4gIENPTlRFTlQgPSAwLFxuICBGRyA9IDEsIC8vIGN1cnJlbnRseSBzaW1wbHkgaG9sZHMgYWxsIGtub3duIGF0dHJzXG4gIEJHID0gMiAgLy8gY3VycmVudGx5IHVudXNlZFxufVxuXG5leHBvcnQgY29uc3QgREVGQVVMVF9BVFRSX0RBVEEgPSBPYmplY3QuZnJlZXplKG5ldyBBdHRyaWJ1dGVEYXRhKCkpO1xuXG4vKipcbiAqIFR5cGVkIGFycmF5IGJhc2VkIGJ1ZmZlcmxpbmUgaW1wbGVtZW50YXRpb24uXG4gKlxuICogVGhlcmUgYXJlIDIgd2F5cyB0byBpbnNlcnQgZGF0YSBpbnRvIHRoZSBjZWxsIGJ1ZmZlcjpcbiAqIC0gYHNldENlbGxGcm9tQ29kZXBvaW50YCArIGBhZGRDb2RlcG9pbnRUb0NlbGxgXG4gKiAgIFVzZSB0aGVzZSBmb3IgZGF0YSB0aGF0IGlzIGFscmVhZHkgVVRGMzIuXG4gKiAgIFVzZWQgZHVyaW5nIG5vcm1hbCBpbnB1dCBpbiBgSW5wdXRIYW5kbGVyYCBmb3IgZmFzdGVyIGJ1ZmZlciBhY2Nlc3MuXG4gKiAtIGBzZXRDZWxsYFxuICogICBUaGlzIG1ldGhvZCB0YWtlcyBhIENlbGxEYXRhIG9iamVjdCBhbmQgc3RvcmVzIHRoZSBkYXRhIGluIHRoZSBidWZmZXIuXG4gKiAgIFVzZSBgQ2VsbERhdGEuZnJvbUNoYXJEYXRhYCB0byBjcmVhdGUgdGhlIENlbGxEYXRhIG9iamVjdCAoZS5nLiBmcm9tIEpTIHN0cmluZykuXG4gKlxuICogVG8gcmV0cmlldmUgZGF0YSBmcm9tIHRoZSBidWZmZXIgdXNlIGVpdGhlciBvbmUgb2YgdGhlIHByaW1pdGl2ZSBtZXRob2RzXG4gKiAoaWYgb25seSBvbmUgcGFydGljdWxhciB2YWx1ZSBpcyBuZWVkZWQpIG9yIGBsb2FkQ2VsbGAuIEZvciBgbG9hZENlbGxgIGluIGEgbG9vcFxuICogbWVtb3J5IGFsbG9jcyAvIEdDIHByZXNzdXJlIGNhbiBiZSBncmVhdGx5IHJlZHVjZWQgYnkgcmV1c2luZyB0aGUgQ2VsbERhdGEgb2JqZWN0LlxuICovXG5leHBvcnQgY2xhc3MgQnVmZmVyTGluZSBpbXBsZW1lbnRzIElCdWZmZXJMaW5lIHtcbiAgcHJvdGVjdGVkIF9kYXRhOiBVaW50MzJBcnJheTtcbiAgcHJvdGVjdGVkIF9jb21iaW5lZDoge1tpbmRleDogbnVtYmVyXTogc3RyaW5nfSA9IHt9O1xuICBwcm90ZWN0ZWQgX2V4dGVuZGVkQXR0cnM6IHtbaW5kZXg6IG51bWJlcl06IEV4dGVuZGVkQXR0cnN9ID0ge307XG4gIHB1YmxpYyBsZW5ndGg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihjb2xzOiBudW1iZXIsIGZpbGxDZWxsRGF0YT86IElDZWxsRGF0YSwgcHVibGljIGlzV3JhcHBlZDogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgdGhpcy5fZGF0YSA9IG5ldyBVaW50MzJBcnJheShjb2xzICogQ0VMTF9TSVpFKTtcbiAgICBjb25zdCBjZWxsID0gZmlsbENlbGxEYXRhIHx8IENlbGxEYXRhLmZyb21DaGFyRGF0YShbMCwgTlVMTF9DRUxMX0NIQVIsIE5VTExfQ0VMTF9XSURUSCwgTlVMTF9DRUxMX0NPREVdKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbHM7ICsraSkge1xuICAgICAgdGhpcy5zZXRDZWxsKGksIGNlbGwpO1xuICAgIH1cbiAgICB0aGlzLmxlbmd0aCA9IGNvbHM7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGNlbGwgZGF0YSBDaGFyRGF0YS5cbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIHB1YmxpYyBnZXQoaW5kZXg6IG51bWJlcik6IENoYXJEYXRhIHtcbiAgICBjb25zdCBjb250ZW50ID0gdGhpcy5fZGF0YVtpbmRleCAqIENFTExfU0laRSArIENlbGwuQ09OVEVOVF07XG4gICAgY29uc3QgY3AgPSBjb250ZW50ICYgQ29udGVudC5DT0RFUE9JTlRfTUFTSztcbiAgICByZXR1cm4gW1xuICAgICAgdGhpcy5fZGF0YVtpbmRleCAqIENFTExfU0laRSArIENlbGwuRkddLFxuICAgICAgKGNvbnRlbnQgJiBDb250ZW50LklTX0NPTUJJTkVEX01BU0spXG4gICAgICAgID8gdGhpcy5fY29tYmluZWRbaW5kZXhdXG4gICAgICAgIDogKGNwKSA/IHN0cmluZ0Zyb21Db2RlUG9pbnQoY3ApIDogJycsXG4gICAgICBjb250ZW50ID4+IENvbnRlbnQuV0lEVEhfU0hJRlQsXG4gICAgICAoY29udGVudCAmIENvbnRlbnQuSVNfQ09NQklORURfTUFTSylcbiAgICAgICAgPyB0aGlzLl9jb21iaW5lZFtpbmRleF0uY2hhckNvZGVBdCh0aGlzLl9jb21iaW5lZFtpbmRleF0ubGVuZ3RoIC0gMSlcbiAgICAgICAgOiBjcFxuICAgIF07XG4gIH1cblxuICAvKipcbiAgICogU2V0IGNlbGwgZGF0YSBmcm9tIENoYXJEYXRhLlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgcHVibGljIHNldChpbmRleDogbnVtYmVyLCB2YWx1ZTogQ2hhckRhdGEpOiB2b2lkIHtcbiAgICB0aGlzLl9kYXRhW2luZGV4ICogQ0VMTF9TSVpFICsgQ2VsbC5GR10gPSB2YWx1ZVtDSEFSX0RBVEFfQVRUUl9JTkRFWF07XG4gICAgaWYgKHZhbHVlW0NIQVJfREFUQV9DSEFSX0lOREVYXS5sZW5ndGggPiAxKSB7XG4gICAgICB0aGlzLl9jb21iaW5lZFtpbmRleF0gPSB2YWx1ZVsxXTtcbiAgICAgIHRoaXMuX2RhdGFbaW5kZXggKiBDRUxMX1NJWkUgKyBDZWxsLkNPTlRFTlRdID0gaW5kZXggfCBDb250ZW50LklTX0NPTUJJTkVEX01BU0sgfCAodmFsdWVbQ0hBUl9EQVRBX1dJRFRIX0lOREVYXSA8PCBDb250ZW50LldJRFRIX1NISUZUKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZGF0YVtpbmRleCAqIENFTExfU0laRSArIENlbGwuQ09OVEVOVF0gPSB2YWx1ZVtDSEFSX0RBVEFfQ0hBUl9JTkRFWF0uY2hhckNvZGVBdCgwKSB8ICh2YWx1ZVtDSEFSX0RBVEFfV0lEVEhfSU5ERVhdIDw8IENvbnRlbnQuV0lEVEhfU0hJRlQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBwcmltaXRpdmUgZ2V0dGVyc1xuICAgKiB1c2UgdGhlc2Ugd2hlbiBvbmx5IG9uZSB2YWx1ZSBpcyBuZWVkZWQsIG90aGVyd2lzZSB1c2UgYGxvYWRDZWxsYFxuICAgKi9cbiAgcHVibGljIGdldFdpZHRoKGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kYXRhW2luZGV4ICogQ0VMTF9TSVpFICsgQ2VsbC5DT05URU5UXSA+PiBDb250ZW50LldJRFRIX1NISUZUO1xuICB9XG5cbiAgLyoqIFRlc3Qgd2hldGhlciBjb250ZW50IGhhcyB3aWR0aC4gKi9cbiAgcHVibGljIGhhc1dpZHRoKGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kYXRhW2luZGV4ICogQ0VMTF9TSVpFICsgQ2VsbC5DT05URU5UXSAmIENvbnRlbnQuV0lEVEhfTUFTSztcbiAgfVxuXG4gIC8qKiBHZXQgRkcgY2VsbCBjb21wb25lbnQuICovXG4gIHB1YmxpYyBnZXRGZyhpbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YVtpbmRleCAqIENFTExfU0laRSArIENlbGwuRkddO1xuICB9XG5cbiAgLyoqIEdldCBCRyBjZWxsIGNvbXBvbmVudC4gKi9cbiAgcHVibGljIGdldEJnKGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kYXRhW2luZGV4ICogQ0VMTF9TSVpFICsgQ2VsbC5CR107XG4gIH1cblxuICAvKipcbiAgICogVGVzdCB3aGV0aGVyIGNvbnRhaW5zIGFueSBjaGFycy5cbiAgICogQmFzaWNhbGx5IGFuIGVtcHR5IGhhcyBubyBjb250ZW50LCBidXQgb3RoZXIgY2VsbHMgbWlnaHQgZGlmZmVyIGluIEZHL0JHXG4gICAqIGZyb20gcmVhbCBlbXB0eSBjZWxscy5cbiAgICogKi9cbiAgcHVibGljIGhhc0NvbnRlbnQoaW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGFbaW5kZXggKiBDRUxMX1NJWkUgKyBDZWxsLkNPTlRFTlRdICYgQ29udGVudC5IQVNfQ09OVEVOVF9NQVNLO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjb2RlcG9pbnQgb2YgdGhlIGNlbGwuXG4gICAqIFRvIGJlIGluIGxpbmUgd2l0aCBgY29kZWAgaW4gQ2hhckRhdGEgdGhpcyBlaXRoZXIgcmV0dXJuc1xuICAgKiBhIHNpbmdsZSBVVEYzMiBjb2RlcG9pbnQgb3IgdGhlIGxhc3QgY29kZXBvaW50IG9mIGEgY29tYmluZWQgc3RyaW5nLlxuICAgKi9cbiAgcHVibGljIGdldENvZGVQb2ludChpbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBjb250ZW50ID0gdGhpcy5fZGF0YVtpbmRleCAqIENFTExfU0laRSArIENlbGwuQ09OVEVOVF07XG4gICAgaWYgKGNvbnRlbnQgJiBDb250ZW50LklTX0NPTUJJTkVEX01BU0spIHtcbiAgICAgIHJldHVybiB0aGlzLl9jb21iaW5lZFtpbmRleF0uY2hhckNvZGVBdCh0aGlzLl9jb21iaW5lZFtpbmRleF0ubGVuZ3RoIC0gMSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50ICYgQ29udGVudC5DT0RFUE9JTlRfTUFTSztcbiAgfVxuXG4gIC8qKiBUZXN0IHdoZXRoZXIgdGhlIGNlbGwgY29udGFpbnMgYSBjb21iaW5lZCBzdHJpbmcuICovXG4gIHB1YmxpYyBpc0NvbWJpbmVkKGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kYXRhW2luZGV4ICogQ0VMTF9TSVpFICsgQ2VsbC5DT05URU5UXSAmIENvbnRlbnQuSVNfQ09NQklORURfTUFTSztcbiAgfVxuXG4gIC8qKiBSZXR1cm5zIHRoZSBzdHJpbmcgY29udGVudCBvZiB0aGUgY2VsbC4gKi9cbiAgcHVibGljIGdldFN0cmluZyhpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBjb25zdCBjb250ZW50ID0gdGhpcy5fZGF0YVtpbmRleCAqIENFTExfU0laRSArIENlbGwuQ09OVEVOVF07XG4gICAgaWYgKGNvbnRlbnQgJiBDb250ZW50LklTX0NPTUJJTkVEX01BU0spIHtcbiAgICAgIHJldHVybiB0aGlzLl9jb21iaW5lZFtpbmRleF07XG4gICAgfVxuICAgIGlmIChjb250ZW50ICYgQ29udGVudC5DT0RFUE9JTlRfTUFTSykge1xuICAgICAgcmV0dXJuIHN0cmluZ0Zyb21Db2RlUG9pbnQoY29udGVudCAmIENvbnRlbnQuQ09ERVBPSU5UX01BU0spO1xuICAgIH1cbiAgICAvLyByZXR1cm4gZW1wdHkgc3RyaW5nIGZvciBlbXB0eSBjZWxsc1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkIGRhdGEgYXQgYGluZGV4YCBpbnRvIGBjZWxsYC4gVGhpcyBpcyB1c2VkIHRvIGFjY2VzcyBjZWxscyBpbiBhIHdheSB0aGF0J3MgbW9yZSBmcmllbmRseVxuICAgKiB0byBHQyBhcyBpdCBzaWduaWZpY2FudGx5IHJlZHVjZWQgdGhlIGFtb3VudCBvZiBuZXcgb2JqZWN0cy9yZWZlcmVuY2VzIG5lZWRlZC5cbiAgICovXG4gIHB1YmxpYyBsb2FkQ2VsbChpbmRleDogbnVtYmVyLCBjZWxsOiBJQ2VsbERhdGEpOiBJQ2VsbERhdGEge1xuICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBpbmRleCAqIENFTExfU0laRTtcbiAgICBjZWxsLmNvbnRlbnQgPSB0aGlzLl9kYXRhW3N0YXJ0SW5kZXggKyBDZWxsLkNPTlRFTlRdO1xuICAgIGNlbGwuZmcgPSB0aGlzLl9kYXRhW3N0YXJ0SW5kZXggKyBDZWxsLkZHXTtcbiAgICBjZWxsLmJnID0gdGhpcy5fZGF0YVtzdGFydEluZGV4ICsgQ2VsbC5CR107XG4gICAgaWYgKGNlbGwuY29udGVudCAmIENvbnRlbnQuSVNfQ09NQklORURfTUFTSykge1xuICAgICAgY2VsbC5jb21iaW5lZERhdGEgPSB0aGlzLl9jb21iaW5lZFtpbmRleF07XG4gICAgfVxuICAgIGlmIChjZWxsLmJnICYgQmdGbGFncy5IQVNfRVhURU5ERUQpIHtcbiAgICAgIGNlbGwuZXh0ZW5kZWQgPSB0aGlzLl9leHRlbmRlZEF0dHJzW2luZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIGNlbGw7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGRhdGEgYXQgYGluZGV4YCB0byBgY2VsbGAuXG4gICAqL1xuICBwdWJsaWMgc2V0Q2VsbChpbmRleDogbnVtYmVyLCBjZWxsOiBJQ2VsbERhdGEpOiB2b2lkIHtcbiAgICBpZiAoY2VsbC5jb250ZW50ICYgQ29udGVudC5JU19DT01CSU5FRF9NQVNLKSB7XG4gICAgICB0aGlzLl9jb21iaW5lZFtpbmRleF0gPSBjZWxsLmNvbWJpbmVkRGF0YTtcbiAgICB9XG4gICAgaWYgKGNlbGwuYmcgJiBCZ0ZsYWdzLkhBU19FWFRFTkRFRCkge1xuICAgICAgdGhpcy5fZXh0ZW5kZWRBdHRyc1tpbmRleF0gPSBjZWxsLmV4dGVuZGVkO1xuICAgIH1cbiAgICB0aGlzLl9kYXRhW2luZGV4ICogQ0VMTF9TSVpFICsgQ2VsbC5DT05URU5UXSA9IGNlbGwuY29udGVudDtcbiAgICB0aGlzLl9kYXRhW2luZGV4ICogQ0VMTF9TSVpFICsgQ2VsbC5GR10gPSBjZWxsLmZnO1xuICAgIHRoaXMuX2RhdGFbaW5kZXggKiBDRUxMX1NJWkUgKyBDZWxsLkJHXSA9IGNlbGwuYmc7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGNlbGwgZGF0YSBmcm9tIGlucHV0IGhhbmRsZXIuXG4gICAqIFNpbmNlIHRoZSBpbnB1dCBoYW5kbGVyIHNlZSB0aGUgaW5jb21pbmcgY2hhcnMgYXMgVVRGMzIgY29kZXBvaW50cyxcbiAgICogaXQgZ2V0cyBhbiBvcHRpbWl6ZWQgYWNjZXNzIG1ldGhvZC5cbiAgICovXG4gIHB1YmxpYyBzZXRDZWxsRnJvbUNvZGVQb2ludChpbmRleDogbnVtYmVyLCBjb2RlUG9pbnQ6IG51bWJlciwgd2lkdGg6IG51bWJlciwgZmc6IG51bWJlciwgYmc6IG51bWJlciwgZUF0dHJzOiBJRXh0ZW5kZWRBdHRycyk6IHZvaWQge1xuICAgIGlmIChiZyAmIEJnRmxhZ3MuSEFTX0VYVEVOREVEKSB7XG4gICAgICB0aGlzLl9leHRlbmRlZEF0dHJzW2luZGV4XSA9IGVBdHRycztcbiAgICB9XG4gICAgdGhpcy5fZGF0YVtpbmRleCAqIENFTExfU0laRSArIENlbGwuQ09OVEVOVF0gPSBjb2RlUG9pbnQgfCAod2lkdGggPDwgQ29udGVudC5XSURUSF9TSElGVCk7XG4gICAgdGhpcy5fZGF0YVtpbmRleCAqIENFTExfU0laRSArIENlbGwuRkddID0gZmc7XG4gICAgdGhpcy5fZGF0YVtpbmRleCAqIENFTExfU0laRSArIENlbGwuQkddID0gYmc7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgY29kZXBvaW50IHRvIGEgY2VsbCBmcm9tIGlucHV0IGhhbmRsZXIuXG4gICAqIER1cmluZyBpbnB1dCBzdGFnZSBjb21iaW5pbmcgY2hhcnMgd2l0aCBhIHdpZHRoIG9mIDAgZm9sbG93IGFuZCBzdGFja1xuICAgKiBvbnRvIGEgbGVhZGluZyBjaGFyLiBTaW5jZSB3ZSBhbHJlYWR5IHNldCB0aGUgYXR0cnNcbiAgICogYnkgdGhlIHByZXZpb3VzIGBzZXREYXRhRnJvbUNvZGVQb2ludGAgY2FsbCwgd2UgY2FuIG9taXQgaXQgaGVyZS5cbiAgICovXG4gIHB1YmxpYyBhZGRDb2RlcG9pbnRUb0NlbGwoaW5kZXg6IG51bWJlciwgY29kZVBvaW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICBsZXQgY29udGVudCA9IHRoaXMuX2RhdGFbaW5kZXggKiBDRUxMX1NJWkUgKyBDZWxsLkNPTlRFTlRdO1xuICAgIGlmIChjb250ZW50ICYgQ29udGVudC5JU19DT01CSU5FRF9NQVNLKSB7XG4gICAgICAvLyB3ZSBhbHJlYWR5IGhhdmUgYSBjb21iaW5lZCBzdHJpbmcsIHNpbXBseSBhZGRcbiAgICAgIHRoaXMuX2NvbWJpbmVkW2luZGV4XSArPSBzdHJpbmdGcm9tQ29kZVBvaW50KGNvZGVQb2ludCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjb250ZW50ICYgQ29udGVudC5DT0RFUE9JTlRfTUFTSykge1xuICAgICAgICAvLyBub3JtYWwgY2FzZSBmb3IgY29tYmluaW5nIGNoYXJzOlxuICAgICAgICAvLyAgLSBtb3ZlIGN1cnJlbnQgbGVhZGluZyBjaGFyICsgbmV3IG9uZSBpbnRvIGNvbWJpbmVkIHN0cmluZ1xuICAgICAgICAvLyAgLSBzZXQgY29tYmluZWQgZmxhZ1xuICAgICAgICB0aGlzLl9jb21iaW5lZFtpbmRleF0gPSBzdHJpbmdGcm9tQ29kZVBvaW50KGNvbnRlbnQgJiBDb250ZW50LkNPREVQT0lOVF9NQVNLKSArIHN0cmluZ0Zyb21Db2RlUG9pbnQoY29kZVBvaW50KTtcbiAgICAgICAgY29udGVudCAmPSB+Q29udGVudC5DT0RFUE9JTlRfTUFTSzsgLy8gc2V0IGNvZGVwb2ludCBpbiBidWZmZXIgdG8gMFxuICAgICAgICBjb250ZW50IHw9IENvbnRlbnQuSVNfQ09NQklORURfTUFTSztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHNob3VsZCBub3QgaGFwcGVuIC0gd2UgYWN0dWFsbHkgaGF2ZSBubyBkYXRhIGluIHRoZSBjZWxsIHlldFxuICAgICAgICAvLyBzaW1wbHkgc2V0IHRoZSBkYXRhIGluIHRoZSBjZWxsIGJ1ZmZlciB3aXRoIGEgd2lkdGggb2YgMVxuICAgICAgICBjb250ZW50ID0gY29kZVBvaW50IHwgKDEgPDwgQ29udGVudC5XSURUSF9TSElGVCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9kYXRhW2luZGV4ICogQ0VMTF9TSVpFICsgQ2VsbC5DT05URU5UXSA9IGNvbnRlbnQ7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGluc2VydENlbGxzKHBvczogbnVtYmVyLCBuOiBudW1iZXIsIGZpbGxDZWxsRGF0YTogSUNlbGxEYXRhLCBlcmFzZUF0dHI/OiBJQXR0cmlidXRlRGF0YSk6IHZvaWQge1xuICAgIHBvcyAlPSB0aGlzLmxlbmd0aDtcblxuICAgIC8vIGhhbmRsZSBmdWxsd2lkdGggYXQgcG9zOiByZXNldCBjZWxsIG9uZSB0byB0aGUgbGVmdCBpZiBwb3MgaXMgc2Vjb25kIGNlbGwgb2YgYSB3aWRlIGNoYXJcbiAgICBpZiAocG9zICYmIHRoaXMuZ2V0V2lkdGgocG9zIC0gMSkgPT09IDIpIHtcbiAgICAgIHRoaXMuc2V0Q2VsbEZyb21Db2RlUG9pbnQocG9zIC0gMSwgMCwgMSwgZXJhc2VBdHRyPy5mZyB8fCAwLCBlcmFzZUF0dHI/LmJnIHx8IDAsIGVyYXNlQXR0cj8uZXh0ZW5kZWQgfHwgbmV3IEV4dGVuZGVkQXR0cnMoKSk7XG4gICAgfVxuXG4gICAgaWYgKG4gPCB0aGlzLmxlbmd0aCAtIHBvcykge1xuICAgICAgY29uc3QgY2VsbCA9IG5ldyBDZWxsRGF0YSgpO1xuICAgICAgZm9yIChsZXQgaSA9IHRoaXMubGVuZ3RoIC0gcG9zIC0gbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHRoaXMuc2V0Q2VsbChwb3MgKyBuICsgaSwgdGhpcy5sb2FkQ2VsbChwb3MgKyBpLCBjZWxsKSk7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICB0aGlzLnNldENlbGwocG9zICsgaSwgZmlsbENlbGxEYXRhKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IHBvczsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdGhpcy5zZXRDZWxsKGksIGZpbGxDZWxsRGF0YSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gaGFuZGxlIGZ1bGx3aWR0aCBhdCBsaW5lIGVuZDogcmVzZXQgbGFzdCBjZWxsIGlmIGl0IGlzIGZpcnN0IGNlbGwgb2YgYSB3aWRlIGNoYXJcbiAgICBpZiAodGhpcy5nZXRXaWR0aCh0aGlzLmxlbmd0aCAtIDEpID09PSAyKSB7XG4gICAgICB0aGlzLnNldENlbGxGcm9tQ29kZVBvaW50KHRoaXMubGVuZ3RoIC0gMSwgMCwgMSwgZXJhc2VBdHRyPy5mZyB8fCAwLCBlcmFzZUF0dHI/LmJnIHx8IDAsIGVyYXNlQXR0cj8uZXh0ZW5kZWQgfHwgbmV3IEV4dGVuZGVkQXR0cnMoKSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGRlbGV0ZUNlbGxzKHBvczogbnVtYmVyLCBuOiBudW1iZXIsIGZpbGxDZWxsRGF0YTogSUNlbGxEYXRhLCBlcmFzZUF0dHI/OiBJQXR0cmlidXRlRGF0YSk6IHZvaWQge1xuICAgIHBvcyAlPSB0aGlzLmxlbmd0aDtcbiAgICBpZiAobiA8IHRoaXMubGVuZ3RoIC0gcG9zKSB7XG4gICAgICBjb25zdCBjZWxsID0gbmV3IENlbGxEYXRhKCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoIC0gcG9zIC0gbjsgKytpKSB7XG4gICAgICAgIHRoaXMuc2V0Q2VsbChwb3MgKyBpLCB0aGlzLmxvYWRDZWxsKHBvcyArIG4gKyBpLCBjZWxsKSk7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gdGhpcy5sZW5ndGggLSBuOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgICB0aGlzLnNldENlbGwoaSwgZmlsbENlbGxEYXRhKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IHBvczsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdGhpcy5zZXRDZWxsKGksIGZpbGxDZWxsRGF0YSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gaGFuZGxlIGZ1bGx3aWR0aCBhdCBwb3M6XG4gICAgLy8gLSByZXNldCBwb3MtMSBpZiB3aWRlIGNoYXJcbiAgICAvLyAtIHJlc2V0IHBvcyBpZiB3aWR0aD09MCAocHJldmlvdXMgc2Vjb25kIGNlbGwgb2YgYSB3aWRlIGNoYXIpXG4gICAgaWYgKHBvcyAmJiB0aGlzLmdldFdpZHRoKHBvcyAtIDEpID09PSAyKSB7XG4gICAgICB0aGlzLnNldENlbGxGcm9tQ29kZVBvaW50KHBvcyAtIDEsIDAsIDEsIGVyYXNlQXR0cj8uZmcgfHwgMCwgZXJhc2VBdHRyPy5iZyB8fCAwLCBlcmFzZUF0dHI/LmV4dGVuZGVkIHx8IG5ldyBFeHRlbmRlZEF0dHJzKCkpO1xuICAgIH1cbiAgICBpZiAodGhpcy5nZXRXaWR0aChwb3MpID09PSAwICYmICF0aGlzLmhhc0NvbnRlbnQocG9zKSkge1xuICAgICAgdGhpcy5zZXRDZWxsRnJvbUNvZGVQb2ludChwb3MsIDAsIDEsIGVyYXNlQXR0cj8uZmcgfHwgMCwgZXJhc2VBdHRyPy5iZyB8fCAwLCBlcmFzZUF0dHI/LmV4dGVuZGVkIHx8IG5ldyBFeHRlbmRlZEF0dHJzKCkpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZXBsYWNlQ2VsbHMoc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIsIGZpbGxDZWxsRGF0YTogSUNlbGxEYXRhLCBlcmFzZUF0dHI/OiBJQXR0cmlidXRlRGF0YSk6IHZvaWQge1xuICAgIC8vIGhhbmRsZSBmdWxsd2lkdGggYXQgc3RhcnQ6IHJlc2V0IGNlbGwgb25lIHRvIHRoZSBsZWZ0IGlmIHN0YXJ0IGlzIHNlY29uZCBjZWxsIG9mIGEgd2lkZSBjaGFyXG4gICAgaWYgKHN0YXJ0ICYmIHRoaXMuZ2V0V2lkdGgoc3RhcnQgLSAxKSA9PT0gMikge1xuICAgICAgdGhpcy5zZXRDZWxsRnJvbUNvZGVQb2ludChzdGFydCAtIDEsIDAsIDEsIGVyYXNlQXR0cj8uZmcgfHwgMCwgZXJhc2VBdHRyPy5iZyB8fCAwLCBlcmFzZUF0dHI/LmV4dGVuZGVkIHx8IG5ldyBFeHRlbmRlZEF0dHJzKCkpO1xuICAgIH1cbiAgICAvLyBoYW5kbGUgZnVsbHdpZHRoIGF0IGxhc3QgY2VsbCArIDE6IHJlc2V0IHRvIGVtcHR5IGNlbGwgaWYgaXQgaXMgc2Vjb25kIHBhcnQgb2YgYSB3aWRlIGNoYXJcbiAgICBpZiAoZW5kIDwgdGhpcy5sZW5ndGggJiYgdGhpcy5nZXRXaWR0aChlbmQgLSAxKSA9PT0gMikge1xuICAgICAgdGhpcy5zZXRDZWxsRnJvbUNvZGVQb2ludChlbmQsIDAsIDEsIGVyYXNlQXR0cj8uZmcgfHwgMCwgZXJhc2VBdHRyPy5iZyB8fCAwLCBlcmFzZUF0dHI/LmV4dGVuZGVkIHx8IG5ldyBFeHRlbmRlZEF0dHJzKCkpO1xuICAgIH1cblxuICAgIHdoaWxlIChzdGFydCA8IGVuZCAgJiYgc3RhcnQgPCB0aGlzLmxlbmd0aCkge1xuICAgICAgdGhpcy5zZXRDZWxsKHN0YXJ0KyssIGZpbGxDZWxsRGF0YSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlc2l6ZShjb2xzOiBudW1iZXIsIGZpbGxDZWxsRGF0YTogSUNlbGxEYXRhKTogdm9pZCB7XG4gICAgaWYgKGNvbHMgPT09IHRoaXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjb2xzID4gdGhpcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBuZXcgVWludDMyQXJyYXkoY29scyAqIENFTExfU0laRSk7XG4gICAgICBpZiAodGhpcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGNvbHMgKiBDRUxMX1NJWkUgPCB0aGlzLl9kYXRhLmxlbmd0aCkge1xuICAgICAgICAgIGRhdGEuc2V0KHRoaXMuX2RhdGEuc3ViYXJyYXkoMCwgY29scyAqIENFTExfU0laRSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGEuc2V0KHRoaXMuX2RhdGEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICAgIGZvciAobGV0IGkgPSB0aGlzLmxlbmd0aDsgaSA8IGNvbHM7ICsraSkge1xuICAgICAgICB0aGlzLnNldENlbGwoaSwgZmlsbENlbGxEYXRhKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNvbHMpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBVaW50MzJBcnJheShjb2xzICogQ0VMTF9TSVpFKTtcbiAgICAgICAgZGF0YS5zZXQodGhpcy5fZGF0YS5zdWJhcnJheSgwLCBjb2xzICogQ0VMTF9TSVpFKSk7XG4gICAgICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuICAgICAgICAvLyBSZW1vdmUgYW55IGN1dCBvZmYgY29tYmluZWQgZGF0YSwgRklYTUU6IHJlcGVhdCB0aGlzIGZvciBleHRlbmRlZCBhdHRyc1xuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcy5fY29tYmluZWQpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBrZXkgPSBwYXJzZUludChrZXlzW2ldLCAxMCk7XG4gICAgICAgICAgaWYgKGtleSA+PSBjb2xzKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fY29tYmluZWRba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2RhdGEgPSBuZXcgVWludDMyQXJyYXkoMCk7XG4gICAgICAgIHRoaXMuX2NvbWJpbmVkID0ge307XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gY29scztcbiAgfVxuXG4gIC8qKiBmaWxsIGEgbGluZSB3aXRoIGZpbGxDaGFyRGF0YSAqL1xuICBwdWJsaWMgZmlsbChmaWxsQ2VsbERhdGE6IElDZWxsRGF0YSk6IHZvaWQge1xuICAgIHRoaXMuX2NvbWJpbmVkID0ge307XG4gICAgdGhpcy5fZXh0ZW5kZWRBdHRycyA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgdGhpcy5zZXRDZWxsKGksIGZpbGxDZWxsRGF0YSk7XG4gICAgfVxuICB9XG5cbiAgLyoqIGFsdGVyIHRvIGEgZnVsbCBjb3B5IG9mIGxpbmUgICovXG4gIHB1YmxpYyBjb3B5RnJvbShsaW5lOiBCdWZmZXJMaW5lKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubGVuZ3RoICE9PSBsaW5lLmxlbmd0aCkge1xuICAgICAgdGhpcy5fZGF0YSA9IG5ldyBVaW50MzJBcnJheShsaW5lLl9kYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXNlIGhpZ2ggc3BlZWQgY29weSBpZiBsZW5ndGhzIGFyZSBlcXVhbFxuICAgICAgdGhpcy5fZGF0YS5zZXQobGluZS5fZGF0YSk7XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gbGluZS5sZW5ndGg7XG4gICAgdGhpcy5fY29tYmluZWQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGVsIGluIGxpbmUuX2NvbWJpbmVkKSB7XG4gICAgICB0aGlzLl9jb21iaW5lZFtlbF0gPSBsaW5lLl9jb21iaW5lZFtlbF07XG4gICAgfVxuICAgIHRoaXMuX2V4dGVuZGVkQXR0cnMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGVsIGluIGxpbmUuX2V4dGVuZGVkQXR0cnMpIHtcbiAgICAgIHRoaXMuX2V4dGVuZGVkQXR0cnNbZWxdID0gbGluZS5fZXh0ZW5kZWRBdHRyc1tlbF07XG4gICAgfVxuICAgIHRoaXMuaXNXcmFwcGVkID0gbGluZS5pc1dyYXBwZWQ7XG4gIH1cblxuICAvKiogY3JlYXRlIGEgbmV3IGNsb25lICovXG4gIHB1YmxpYyBjbG9uZSgpOiBJQnVmZmVyTGluZSB7XG4gICAgY29uc3QgbmV3TGluZSA9IG5ldyBCdWZmZXJMaW5lKDApO1xuICAgIG5ld0xpbmUuX2RhdGEgPSBuZXcgVWludDMyQXJyYXkodGhpcy5fZGF0YSk7XG4gICAgbmV3TGluZS5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICBmb3IgKGNvbnN0IGVsIGluIHRoaXMuX2NvbWJpbmVkKSB7XG4gICAgICBuZXdMaW5lLl9jb21iaW5lZFtlbF0gPSB0aGlzLl9jb21iaW5lZFtlbF07XG4gICAgfVxuICAgIGZvciAoY29uc3QgZWwgaW4gdGhpcy5fZXh0ZW5kZWRBdHRycykge1xuICAgICAgbmV3TGluZS5fZXh0ZW5kZWRBdHRyc1tlbF0gPSB0aGlzLl9leHRlbmRlZEF0dHJzW2VsXTtcbiAgICB9XG4gICAgbmV3TGluZS5pc1dyYXBwZWQgPSB0aGlzLmlzV3JhcHBlZDtcbiAgICByZXR1cm4gbmV3TGluZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRUcmltbWVkTGVuZ3RoKCk6IG51bWJlciB7XG4gICAgZm9yIChsZXQgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIGlmICgodGhpcy5fZGF0YVtpICogQ0VMTF9TSVpFICsgQ2VsbC5DT05URU5UXSAmIENvbnRlbnQuSEFTX0NPTlRFTlRfTUFTSykpIHtcbiAgICAgICAgcmV0dXJuIGkgKyAodGhpcy5fZGF0YVtpICogQ0VMTF9TSVpFICsgQ2VsbC5DT05URU5UXSA+PiBDb250ZW50LldJRFRIX1NISUZUKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBwdWJsaWMgY29weUNlbGxzRnJvbShzcmM6IEJ1ZmZlckxpbmUsIHNyY0NvbDogbnVtYmVyLCBkZXN0Q29sOiBudW1iZXIsIGxlbmd0aDogbnVtYmVyLCBhcHBseUluUmV2ZXJzZTogYm9vbGVhbik6IHZvaWQge1xuICAgIGNvbnN0IHNyY0RhdGEgPSBzcmMuX2RhdGE7XG4gICAgaWYgKGFwcGx5SW5SZXZlcnNlKSB7XG4gICAgICBmb3IgKGxldCBjZWxsID0gbGVuZ3RoIC0gMTsgY2VsbCA+PSAwOyBjZWxsLS0pIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBDRUxMX1NJWkU7IGkrKykge1xuICAgICAgICAgIHRoaXMuX2RhdGFbKGRlc3RDb2wgKyBjZWxsKSAqIENFTExfU0laRSArIGldID0gc3JjRGF0YVsoc3JjQ29sICsgY2VsbCkgKiBDRUxMX1NJWkUgKyBpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBjZWxsID0gMDsgY2VsbCA8IGxlbmd0aDsgY2VsbCsrKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQ0VMTF9TSVpFOyBpKyspIHtcbiAgICAgICAgICB0aGlzLl9kYXRhWyhkZXN0Q29sICsgY2VsbCkgKiBDRUxMX1NJWkUgKyBpXSA9IHNyY0RhdGFbKHNyY0NvbCArIGNlbGwpICogQ0VMTF9TSVpFICsgaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNb3ZlIGFueSBjb21iaW5lZCBkYXRhIG92ZXIgYXMgbmVlZGVkLCBGSVhNRTogcmVwZWF0IGZvciBleHRlbmRlZCBhdHRyc1xuICAgIGNvbnN0IHNyY0NvbWJpbmVkS2V5cyA9IE9iamVjdC5rZXlzKHNyYy5fY29tYmluZWQpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3JjQ29tYmluZWRLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBrZXkgPSBwYXJzZUludChzcmNDb21iaW5lZEtleXNbaV0sIDEwKTtcbiAgICAgIGlmIChrZXkgPj0gc3JjQ29sKSB7XG4gICAgICAgIHRoaXMuX2NvbWJpbmVkW2tleSAtIHNyY0NvbCArIGRlc3RDb2xdID0gc3JjLl9jb21iaW5lZFtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB0cmFuc2xhdGVUb1N0cmluZyh0cmltUmlnaHQ6IGJvb2xlYW4gPSBmYWxzZSwgc3RhcnRDb2w6IG51bWJlciA9IDAsIGVuZENvbDogbnVtYmVyID0gdGhpcy5sZW5ndGgpOiBzdHJpbmcge1xuICAgIGlmICh0cmltUmlnaHQpIHtcbiAgICAgIGVuZENvbCA9IE1hdGgubWluKGVuZENvbCwgdGhpcy5nZXRUcmltbWVkTGVuZ3RoKCkpO1xuICAgIH1cbiAgICBsZXQgcmVzdWx0ID0gJyc7XG4gICAgd2hpbGUgKHN0YXJ0Q29sIDwgZW5kQ29sKSB7XG4gICAgICBjb25zdCBjb250ZW50ID0gdGhpcy5fZGF0YVtzdGFydENvbCAqIENFTExfU0laRSArIENlbGwuQ09OVEVOVF07XG4gICAgICBjb25zdCBjcCA9IGNvbnRlbnQgJiBDb250ZW50LkNPREVQT0lOVF9NQVNLO1xuICAgICAgcmVzdWx0ICs9IChjb250ZW50ICYgQ29udGVudC5JU19DT01CSU5FRF9NQVNLKSA/IHRoaXMuX2NvbWJpbmVkW3N0YXJ0Q29sXSA6IChjcCkgPyBzdHJpbmdGcm9tQ29kZVBvaW50KGNwKSA6IFdISVRFU1BBQ0VfQ0VMTF9DSEFSO1xuICAgICAgc3RhcnRDb2wgKz0gKGNvbnRlbnQgPj4gQ29udGVudC5XSURUSF9TSElGVCkgfHwgMTsgLy8gYWx3YXlzIGFkdmFuY2UgYnkgMVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAyMSBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElCdWZmZXJSYW5nZSB9IGZyb20gJ3h0ZXJtJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJhbmdlTGVuZ3RoKHJhbmdlOiBJQnVmZmVyUmFuZ2UsIGJ1ZmZlckNvbHM6IG51bWJlcik6IG51bWJlciB7XG4gIGlmIChyYW5nZS5zdGFydC55ID4gcmFuZ2UuZW5kLnkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEJ1ZmZlciByYW5nZSBlbmQgKCR7cmFuZ2UuZW5kLnh9LCAke3JhbmdlLmVuZC55fSkgY2Fubm90IGJlIGJlZm9yZSBzdGFydCAoJHtyYW5nZS5zdGFydC54fSwgJHtyYW5nZS5zdGFydC55fSlgKTtcbiAgfVxuICByZXR1cm4gYnVmZmVyQ29scyAqIChyYW5nZS5lbmQueSAtIHJhbmdlLnN0YXJ0LnkpICsgKHJhbmdlLmVuZC54IC0gcmFuZ2Uuc3RhcnQueCArIDEpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBCdWZmZXJMaW5lIH0gZnJvbSAnY29tbW9uL2J1ZmZlci9CdWZmZXJMaW5lJztcbmltcG9ydCB7IENpcmN1bGFyTGlzdCB9IGZyb20gJ2NvbW1vbi9DaXJjdWxhckxpc3QnO1xuaW1wb3J0IHsgSUJ1ZmZlckxpbmUsIElDZWxsRGF0YSB9IGZyb20gJ2NvbW1vbi9UeXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU5ld0xheW91dFJlc3VsdCB7XG4gIGxheW91dDogbnVtYmVyW107XG4gIGNvdW50UmVtb3ZlZDogbnVtYmVyO1xufVxuXG4vKipcbiAqIEV2YWx1YXRlcyBhbmQgcmV0dXJucyBpbmRleGVzIHRvIGJlIHJlbW92ZWQgYWZ0ZXIgYSByZWZsb3cgbGFyZ2VyIG9jY3Vycy4gTGluZXMgd2lsbCBiZSByZW1vdmVkXG4gKiB3aGVuIGEgd3JhcHBlZCBsaW5lIHVud3JhcHMuXG4gKiBAcGFyYW0gbGluZXMgVGhlIGJ1ZmZlciBsaW5lcy5cbiAqIEBwYXJhbSBuZXdDb2xzIFRoZSBjb2x1bW5zIGFmdGVyIHJlc2l6ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZmxvd0xhcmdlckdldExpbmVzVG9SZW1vdmUobGluZXM6IENpcmN1bGFyTGlzdDxJQnVmZmVyTGluZT4sIG9sZENvbHM6IG51bWJlciwgbmV3Q29sczogbnVtYmVyLCBidWZmZXJBYnNvbHV0ZVk6IG51bWJlciwgbnVsbENlbGw6IElDZWxsRGF0YSk6IG51bWJlcltdIHtcbiAgLy8gR2F0aGVyIGFsbCBCdWZmZXJMaW5lcyB0aGF0IG5lZWQgdG8gYmUgcmVtb3ZlZCBmcm9tIHRoZSBCdWZmZXIgaGVyZSBzbyB0aGF0IHRoZXkgY2FuIGJlXG4gIC8vIGJhdGNoZWQgdXAgYW5kIG9ubHkgY29tbWl0dGVkIG9uY2VcbiAgY29uc3QgdG9SZW1vdmU6IG51bWJlcltdID0gW107XG5cbiAgZm9yIChsZXQgeSA9IDA7IHkgPCBsaW5lcy5sZW5ndGggLSAxOyB5KyspIHtcbiAgICAvLyBDaGVjayBpZiB0aGlzIHJvdyBpcyB3cmFwcGVkXG4gICAgbGV0IGkgPSB5O1xuICAgIGxldCBuZXh0TGluZSA9IGxpbmVzLmdldCgrK2kpIGFzIEJ1ZmZlckxpbmU7XG4gICAgaWYgKCFuZXh0TGluZS5pc1dyYXBwZWQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGhvdyBtYW55IGxpbmVzIGl0J3Mgd3JhcHBlZCBmb3JcbiAgICBjb25zdCB3cmFwcGVkTGluZXM6IEJ1ZmZlckxpbmVbXSA9IFtsaW5lcy5nZXQoeSkgYXMgQnVmZmVyTGluZV07XG4gICAgd2hpbGUgKGkgPCBsaW5lcy5sZW5ndGggJiYgbmV4dExpbmUuaXNXcmFwcGVkKSB7XG4gICAgICB3cmFwcGVkTGluZXMucHVzaChuZXh0TGluZSk7XG4gICAgICBuZXh0TGluZSA9IGxpbmVzLmdldCgrK2kpIGFzIEJ1ZmZlckxpbmU7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlc2UgbGluZXMgY29udGFpbiB0aGUgY3Vyc29yIGRvbid0IHRvdWNoIHRoZW0sIHRoZSBwcm9ncmFtIHdpbGwgaGFuZGxlIGZpeGluZyB1cCB3cmFwcGVkXG4gICAgLy8gbGluZXMgd2l0aCB0aGUgY3Vyc29yXG4gICAgaWYgKGJ1ZmZlckFic29sdXRlWSA+PSB5ICYmIGJ1ZmZlckFic29sdXRlWSA8IGkpIHtcbiAgICAgIHkgKz0gd3JhcHBlZExpbmVzLmxlbmd0aCAtIDE7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBDb3B5IGJ1ZmZlciBkYXRhIHRvIG5ldyBsb2NhdGlvbnNcbiAgICBsZXQgZGVzdExpbmVJbmRleCA9IDA7XG4gICAgbGV0IGRlc3RDb2wgPSBnZXRXcmFwcGVkTGluZVRyaW1tZWRMZW5ndGgod3JhcHBlZExpbmVzLCBkZXN0TGluZUluZGV4LCBvbGRDb2xzKTtcbiAgICBsZXQgc3JjTGluZUluZGV4ID0gMTtcbiAgICBsZXQgc3JjQ29sID0gMDtcbiAgICB3aGlsZSAoc3JjTGluZUluZGV4IDwgd3JhcHBlZExpbmVzLmxlbmd0aCkge1xuICAgICAgY29uc3Qgc3JjVHJpbW1lZFRpbmVMZW5ndGggPSBnZXRXcmFwcGVkTGluZVRyaW1tZWRMZW5ndGgod3JhcHBlZExpbmVzLCBzcmNMaW5lSW5kZXgsIG9sZENvbHMpO1xuICAgICAgY29uc3Qgc3JjUmVtYWluaW5nQ2VsbHMgPSBzcmNUcmltbWVkVGluZUxlbmd0aCAtIHNyY0NvbDtcbiAgICAgIGNvbnN0IGRlc3RSZW1haW5pbmdDZWxscyA9IG5ld0NvbHMgLSBkZXN0Q29sO1xuICAgICAgY29uc3QgY2VsbHNUb0NvcHkgPSBNYXRoLm1pbihzcmNSZW1haW5pbmdDZWxscywgZGVzdFJlbWFpbmluZ0NlbGxzKTtcblxuICAgICAgd3JhcHBlZExpbmVzW2Rlc3RMaW5lSW5kZXhdLmNvcHlDZWxsc0Zyb20od3JhcHBlZExpbmVzW3NyY0xpbmVJbmRleF0sIHNyY0NvbCwgZGVzdENvbCwgY2VsbHNUb0NvcHksIGZhbHNlKTtcblxuICAgICAgZGVzdENvbCArPSBjZWxsc1RvQ29weTtcbiAgICAgIGlmIChkZXN0Q29sID09PSBuZXdDb2xzKSB7XG4gICAgICAgIGRlc3RMaW5lSW5kZXgrKztcbiAgICAgICAgZGVzdENvbCA9IDA7XG4gICAgICB9XG4gICAgICBzcmNDb2wgKz0gY2VsbHNUb0NvcHk7XG4gICAgICBpZiAoc3JjQ29sID09PSBzcmNUcmltbWVkVGluZUxlbmd0aCkge1xuICAgICAgICBzcmNMaW5lSW5kZXgrKztcbiAgICAgICAgc3JjQ29sID0gMDtcbiAgICAgIH1cblxuICAgICAgLy8gTWFrZSBzdXJlIHRoZSBsYXN0IGNlbGwgaXNuJ3Qgd2lkZSwgaWYgaXQgaXMgY29weSBpdCB0byB0aGUgY3VycmVudCBkZXN0XG4gICAgICBpZiAoZGVzdENvbCA9PT0gMCAmJiBkZXN0TGluZUluZGV4ICE9PSAwKSB7XG4gICAgICAgIGlmICh3cmFwcGVkTGluZXNbZGVzdExpbmVJbmRleCAtIDFdLmdldFdpZHRoKG5ld0NvbHMgLSAxKSA9PT0gMikge1xuICAgICAgICAgIHdyYXBwZWRMaW5lc1tkZXN0TGluZUluZGV4XS5jb3B5Q2VsbHNGcm9tKHdyYXBwZWRMaW5lc1tkZXN0TGluZUluZGV4IC0gMV0sIG5ld0NvbHMgLSAxLCBkZXN0Q29sKyssIDEsIGZhbHNlKTtcbiAgICAgICAgICAvLyBOdWxsIG91dCB0aGUgZW5kIG9mIHRoZSBsYXN0IHJvd1xuICAgICAgICAgIHdyYXBwZWRMaW5lc1tkZXN0TGluZUluZGV4IC0gMV0uc2V0Q2VsbChuZXdDb2xzIC0gMSwgbnVsbENlbGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2xlYXIgb3V0IHJlbWFpbmluZyBjZWxscyBvciBmcmFnbWVudHMgY291bGQgcmVtYWluO1xuICAgIHdyYXBwZWRMaW5lc1tkZXN0TGluZUluZGV4XS5yZXBsYWNlQ2VsbHMoZGVzdENvbCwgbmV3Q29scywgbnVsbENlbGwpO1xuXG4gICAgLy8gV29yayBiYWNrd2FyZHMgYW5kIHJlbW92ZSBhbnkgcm93cyBhdCB0aGUgZW5kIHRoYXQgb25seSBjb250YWluIG51bGwgY2VsbHNcbiAgICBsZXQgY291bnRUb1JlbW92ZSA9IDA7XG4gICAgZm9yIChsZXQgaSA9IHdyYXBwZWRMaW5lcy5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XG4gICAgICBpZiAoaSA+IGRlc3RMaW5lSW5kZXggfHwgd3JhcHBlZExpbmVzW2ldLmdldFRyaW1tZWRMZW5ndGgoKSA9PT0gMCkge1xuICAgICAgICBjb3VudFRvUmVtb3ZlKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY291bnRUb1JlbW92ZSA+IDApIHtcbiAgICAgIHRvUmVtb3ZlLnB1c2goeSArIHdyYXBwZWRMaW5lcy5sZW5ndGggLSBjb3VudFRvUmVtb3ZlKTsgLy8gaW5kZXhcbiAgICAgIHRvUmVtb3ZlLnB1c2goY291bnRUb1JlbW92ZSk7XG4gICAgfVxuXG4gICAgeSArPSB3cmFwcGVkTGluZXMubGVuZ3RoIC0gMTtcbiAgfVxuICByZXR1cm4gdG9SZW1vdmU7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbmQgcmV0dXJuIHRoZSBuZXcgbGF5b3V0IGZvciBsaW5lcyBnaXZlbiBhbiBhcnJheSBvZiBpbmRleGVzIHRvIGJlIHJlbW92ZWQuXG4gKiBAcGFyYW0gbGluZXMgVGhlIGJ1ZmZlciBsaW5lcy5cbiAqIEBwYXJhbSB0b1JlbW92ZSBUaGUgaW5kZXhlcyB0byByZW1vdmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWZsb3dMYXJnZXJDcmVhdGVOZXdMYXlvdXQobGluZXM6IENpcmN1bGFyTGlzdDxJQnVmZmVyTGluZT4sIHRvUmVtb3ZlOiBudW1iZXJbXSk6IElOZXdMYXlvdXRSZXN1bHQge1xuICBjb25zdCBsYXlvdXQ6IG51bWJlcltdID0gW107XG4gIC8vIEZpcnN0IGl0ZXJhdGUgdGhyb3VnaCB0aGUgbGlzdCBhbmQgZ2V0IHRoZSBhY3R1YWwgaW5kZXhlcyB0byB1c2UgZm9yIHJvd3NcbiAgbGV0IG5leHRUb1JlbW92ZUluZGV4ID0gMDtcbiAgbGV0IG5leHRUb1JlbW92ZVN0YXJ0ID0gdG9SZW1vdmVbbmV4dFRvUmVtb3ZlSW5kZXhdO1xuICBsZXQgY291bnRSZW1vdmVkU29GYXIgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKG5leHRUb1JlbW92ZVN0YXJ0ID09PSBpKSB7XG4gICAgICBjb25zdCBjb3VudFRvUmVtb3ZlID0gdG9SZW1vdmVbKytuZXh0VG9SZW1vdmVJbmRleF07XG5cbiAgICAgIC8vIFRlbGwgbWFya2VycyB0aGF0IHRoZXJlIHdhcyBhIGRlbGV0aW9uXG4gICAgICBsaW5lcy5vbkRlbGV0ZUVtaXR0ZXIuZmlyZSh7XG4gICAgICAgIGluZGV4OiBpIC0gY291bnRSZW1vdmVkU29GYXIsXG4gICAgICAgIGFtb3VudDogY291bnRUb1JlbW92ZVxuICAgICAgfSk7XG5cbiAgICAgIGkgKz0gY291bnRUb1JlbW92ZSAtIDE7XG4gICAgICBjb3VudFJlbW92ZWRTb0ZhciArPSBjb3VudFRvUmVtb3ZlO1xuICAgICAgbmV4dFRvUmVtb3ZlU3RhcnQgPSB0b1JlbW92ZVsrK25leHRUb1JlbW92ZUluZGV4XTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGF5b3V0LnB1c2goaSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgbGF5b3V0LFxuICAgIGNvdW50UmVtb3ZlZDogY291bnRSZW1vdmVkU29GYXJcbiAgfTtcbn1cblxuLyoqXG4gKiBBcHBsaWVzIGEgbmV3IGxheW91dCB0byB0aGUgYnVmZmVyLiBUaGlzIGVzc2VudGlhbGx5IGRvZXMgdGhlIHNhbWUgYXMgbWFueSBzcGxpY2UgY2FsbHMgYnV0IGl0J3NcbiAqIGRvbmUgYWxsIGF0IG9uY2UgaW4gYSBzaW5nbGUgaXRlcmF0aW9uIHRocm91Z2ggdGhlIGxpc3Qgc2luY2Ugc3BsaWNlIGlzIHZlcnkgZXhwZW5zaXZlLlxuICogQHBhcmFtIGxpbmVzIFRoZSBidWZmZXIgbGluZXMuXG4gKiBAcGFyYW0gbmV3TGF5b3V0IFRoZSBuZXcgbGF5b3V0IHRvIGFwcGx5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVmbG93TGFyZ2VyQXBwbHlOZXdMYXlvdXQobGluZXM6IENpcmN1bGFyTGlzdDxJQnVmZmVyTGluZT4sIG5ld0xheW91dDogbnVtYmVyW10pOiB2b2lkIHtcbiAgLy8gUmVjb3JkIG9yaWdpbmFsIGxpbmVzIHNvIHRoZXkgZG9uJ3QgZ2V0IG92ZXJyaWRkZW4gd2hlbiB3ZSByZWFycmFuZ2UgdGhlIGxpc3RcbiAgY29uc3QgbmV3TGF5b3V0TGluZXM6IEJ1ZmZlckxpbmVbXSA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0xheW91dC5sZW5ndGg7IGkrKykge1xuICAgIG5ld0xheW91dExpbmVzLnB1c2gobGluZXMuZ2V0KG5ld0xheW91dFtpXSkgYXMgQnVmZmVyTGluZSk7XG4gIH1cblxuICAvLyBSZWFycmFuZ2UgdGhlIGxpc3RcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdMYXlvdXRMaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIGxpbmVzLnNldChpLCBuZXdMYXlvdXRMaW5lc1tpXSk7XG4gIH1cbiAgbGluZXMubGVuZ3RoID0gbmV3TGF5b3V0Lmxlbmd0aDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBuZXcgbGluZSBsZW5ndGhzIGZvciBhIGdpdmVuIHdyYXBwZWQgbGluZS4gVGhlIHB1cnBvc2Ugb2YgdGhpcyBmdW5jdGlvbiBpdCB0byBwcmUtXG4gKiBjb21wdXRlIHRoZSB3cmFwcGluZyBwb2ludHMgc2luY2Ugd2lkZSBjaGFyYWN0ZXJzIG1heSBuZWVkIHRvIGJlIHdyYXBwZWQgb250byB0aGUgZm9sbG93aW5nIGxpbmUuXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGFuIGFycmF5IG9mIG51bWJlcnMgb2Ygd2hlcmUgZWFjaCBsaW5lIHdyYXBzIHRvLCB0aGUgcmVzdWx0aW5nIGFycmF5XG4gKiB3aWxsIG9ubHkgY29udGFpbiB0aGUgdmFsdWVzIGBuZXdDb2xzYCAod2hlbiB0aGUgbGluZSBkb2VzIG5vdCBlbmQgd2l0aCBhIHdpZGUgY2hhcmFjdGVyKSBhbmRcbiAqIGBuZXdDb2xzIC0gMWAgKHdoZW4gdGhlIGxpbmUgZG9lcyBlbmQgd2l0aCBhIHdpZGUgY2hhcmFjdGVyKSwgZXhjZXB0IGZvciB0aGUgbGFzdCB2YWx1ZSB3aGljaFxuICogd2lsbCBjb250YWluIHRoZSByZW1haW5pbmcgaXRlbXMgdG8gZmlsbCB0aGUgbGluZS5cbiAqXG4gKiBDYWxsaW5nIHRoaXMgd2l0aCBhIGBuZXdDb2xzYCB2YWx1ZSBvZiBgMWAgd2lsbCBsb2NrIHVwLlxuICpcbiAqIEBwYXJhbSB3cmFwcGVkTGluZXMgVGhlIHdyYXBwZWQgbGluZXMgdG8gZXZhbHVhdGUuXG4gKiBAcGFyYW0gb2xkQ29scyBUaGUgY29sdW1ucyBiZWZvcmUgcmVzaXplLlxuICogQHBhcmFtIG5ld0NvbHMgVGhlIGNvbHVtbnMgYWZ0ZXIgcmVzaXplLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVmbG93U21hbGxlckdldE5ld0xpbmVMZW5ndGhzKHdyYXBwZWRMaW5lczogQnVmZmVyTGluZVtdLCBvbGRDb2xzOiBudW1iZXIsIG5ld0NvbHM6IG51bWJlcik6IG51bWJlcltdIHtcbiAgY29uc3QgbmV3TGluZUxlbmd0aHM6IG51bWJlcltdID0gW107XG4gIGNvbnN0IGNlbGxzTmVlZGVkID0gd3JhcHBlZExpbmVzLm1hcCgobCwgaSkgPT4gZ2V0V3JhcHBlZExpbmVUcmltbWVkTGVuZ3RoKHdyYXBwZWRMaW5lcywgaSwgb2xkQ29scykpLnJlZHVjZSgocCwgYykgPT4gcCArIGMpO1xuXG4gIC8vIFVzZSBzcmNDb2wgYW5kIHNyY0xpbmUgdG8gZmluZCB0aGUgbmV3IHdyYXBwaW5nIHBvaW50LCB1c2UgdGhhdCB0byBnZXQgdGhlIGNlbGxzQXZhaWxhYmxlIGFuZFxuICAvLyBsaW5lc05lZWRlZFxuICBsZXQgc3JjQ29sID0gMDtcbiAgbGV0IHNyY0xpbmUgPSAwO1xuICBsZXQgY2VsbHNBdmFpbGFibGUgPSAwO1xuICB3aGlsZSAoY2VsbHNBdmFpbGFibGUgPCBjZWxsc05lZWRlZCkge1xuICAgIGlmIChjZWxsc05lZWRlZCAtIGNlbGxzQXZhaWxhYmxlIDwgbmV3Q29scykge1xuICAgICAgLy8gQWRkIHRoZSBmaW5hbCBsaW5lIGFuZCBleGl0IHRoZSBsb29wXG4gICAgICBuZXdMaW5lTGVuZ3Rocy5wdXNoKGNlbGxzTmVlZGVkIC0gY2VsbHNBdmFpbGFibGUpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHNyY0NvbCArPSBuZXdDb2xzO1xuICAgIGNvbnN0IG9sZFRyaW1tZWRMZW5ndGggPSBnZXRXcmFwcGVkTGluZVRyaW1tZWRMZW5ndGgod3JhcHBlZExpbmVzLCBzcmNMaW5lLCBvbGRDb2xzKTtcbiAgICBpZiAoc3JjQ29sID4gb2xkVHJpbW1lZExlbmd0aCkge1xuICAgICAgc3JjQ29sIC09IG9sZFRyaW1tZWRMZW5ndGg7XG4gICAgICBzcmNMaW5lKys7XG4gICAgfVxuICAgIGNvbnN0IGVuZHNXaXRoV2lkZSA9IHdyYXBwZWRMaW5lc1tzcmNMaW5lXS5nZXRXaWR0aChzcmNDb2wgLSAxKSA9PT0gMjtcbiAgICBpZiAoZW5kc1dpdGhXaWRlKSB7XG4gICAgICBzcmNDb2wtLTtcbiAgICB9XG4gICAgY29uc3QgbGluZUxlbmd0aCA9IGVuZHNXaXRoV2lkZSA/IG5ld0NvbHMgLSAxIDogbmV3Q29scztcbiAgICBuZXdMaW5lTGVuZ3Rocy5wdXNoKGxpbmVMZW5ndGgpO1xuICAgIGNlbGxzQXZhaWxhYmxlICs9IGxpbmVMZW5ndGg7XG4gIH1cblxuICByZXR1cm4gbmV3TGluZUxlbmd0aHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRXcmFwcGVkTGluZVRyaW1tZWRMZW5ndGgobGluZXM6IEJ1ZmZlckxpbmVbXSwgaTogbnVtYmVyLCBjb2xzOiBudW1iZXIpOiBudW1iZXIge1xuICAvLyBJZiB0aGlzIGlzIHRoZSBsYXN0IHJvdyBpbiB0aGUgd3JhcHBlZCBsaW5lLCBnZXQgdGhlIGFjdHVhbCB0cmltbWVkIGxlbmd0aFxuICBpZiAoaSA9PT0gbGluZXMubGVuZ3RoIC0gMSkge1xuICAgIHJldHVybiBsaW5lc1tpXS5nZXRUcmltbWVkTGVuZ3RoKCk7XG4gIH1cbiAgLy8gRGV0ZWN0IHdoZXRoZXIgdGhlIGZvbGxvd2luZyBsaW5lIHN0YXJ0cyB3aXRoIGEgd2lkZSBjaGFyYWN0ZXIgYW5kIHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgbGluZVxuICAvLyBpcyBudWxsLCBpZiBzbyB0aGVuIHdlIGNhbiBiZSBwcmV0dHkgc3VyZSB0aGUgbnVsbCBjaGFyYWN0ZXIgc2hvdWxkIGJlIGV4Y2x1ZGVkIGZyb20gdGhlIGxpbmVcbiAgLy8gbGVuZ3RoXVxuICBjb25zdCBlbmRzSW5OdWxsID0gIShsaW5lc1tpXS5oYXNDb250ZW50KGNvbHMgLSAxKSkgJiYgbGluZXNbaV0uZ2V0V2lkdGgoY29scyAtIDEpID09PSAxO1xuICBjb25zdCBmb2xsb3dpbmdMaW5lU3RhcnRzV2l0aFdpZGUgPSBsaW5lc1tpICsgMV0uZ2V0V2lkdGgoMCkgPT09IDI7XG4gIGlmIChlbmRzSW5OdWxsICYmIGZvbGxvd2luZ0xpbmVTdGFydHNXaXRoV2lkZSkge1xuICAgIHJldHVybiBjb2xzIC0gMTtcbiAgfVxuICByZXR1cm4gY29scztcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSUJ1ZmZlciwgSUJ1ZmZlclNldCB9IGZyb20gJ2NvbW1vbi9idWZmZXIvVHlwZXMnO1xuaW1wb3J0IHsgSUF0dHJpYnV0ZURhdGEgfSBmcm9tICdjb21tb24vVHlwZXMnO1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnY29tbW9uL2J1ZmZlci9CdWZmZXInO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJRXZlbnQgfSBmcm9tICdjb21tb24vRXZlbnRFbWl0dGVyJztcbmltcG9ydCB7IElPcHRpb25zU2VydmljZSwgSUJ1ZmZlclNlcnZpY2UgfSBmcm9tICdjb21tb24vc2VydmljZXMvU2VydmljZXMnO1xuaW1wb3J0IHsgRGlzcG9zYWJsZSB9IGZyb20gJ2NvbW1vbi9MaWZlY3ljbGUnO1xuXG4vKipcbiAqIFRoZSBCdWZmZXJTZXQgcmVwcmVzZW50cyB0aGUgc2V0IG9mIHR3byBidWZmZXJzIHVzZWQgYnkgeHRlcm0gdGVybWluYWxzIChub3JtYWwgYW5kIGFsdCkgYW5kXG4gKiBwcm92aWRlcyBhbHNvIHV0aWxpdGllcyBmb3Igd29ya2luZyB3aXRoIHRoZW0uXG4gKi9cbmV4cG9ydCBjbGFzcyBCdWZmZXJTZXQgZXh0ZW5kcyBEaXNwb3NhYmxlIGltcGxlbWVudHMgSUJ1ZmZlclNldCB7XG4gIHByaXZhdGUgX25vcm1hbCE6IEJ1ZmZlcjtcbiAgcHJpdmF0ZSBfYWx0ITogQnVmZmVyO1xuICBwcml2YXRlIF9hY3RpdmVCdWZmZXIhOiBCdWZmZXI7XG5cbiAgcHJpdmF0ZSBfb25CdWZmZXJBY3RpdmF0ZSA9IHRoaXMucmVnaXN0ZXIobmV3IEV2ZW50RW1pdHRlcjx7YWN0aXZlQnVmZmVyOiBJQnVmZmVyLCBpbmFjdGl2ZUJ1ZmZlcjogSUJ1ZmZlcn0+KCkpO1xuICBwdWJsaWMgZ2V0IG9uQnVmZmVyQWN0aXZhdGUoKTogSUV2ZW50PHthY3RpdmVCdWZmZXI6IElCdWZmZXIsIGluYWN0aXZlQnVmZmVyOiBJQnVmZmVyfT4geyByZXR1cm4gdGhpcy5fb25CdWZmZXJBY3RpdmF0ZS5ldmVudDsgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgQnVmZmVyU2V0IGZvciB0aGUgZ2l2ZW4gdGVybWluYWwuXG4gICAqIEBwYXJhbSBfdGVybWluYWwgLSBUaGUgdGVybWluYWwgdGhlIEJ1ZmZlclNldCB3aWxsIGJlbG9uZyB0b1xuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBfb3B0aW9uc1NlcnZpY2U6IElPcHRpb25zU2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9idWZmZXJTZXJ2aWNlOiBJQnVmZmVyU2VydmljZVxuICApIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcbiAgICB0aGlzLl9ub3JtYWwgPSBuZXcgQnVmZmVyKHRydWUsIHRoaXMuX29wdGlvbnNTZXJ2aWNlLCB0aGlzLl9idWZmZXJTZXJ2aWNlKTtcbiAgICB0aGlzLl9ub3JtYWwuZmlsbFZpZXdwb3J0Um93cygpO1xuXG4gICAgLy8gVGhlIGFsdCBidWZmZXIgc2hvdWxkIG5ldmVyIGhhdmUgc2Nyb2xsYmFjay5cbiAgICAvLyBTZWUgaHR0cDovL2ludmlzaWJsZS1pc2xhbmQubmV0L3h0ZXJtL2N0bHNlcXMvY3Rsc2Vxcy5odG1sI2gyLVRoZS1BbHRlcm5hdGUtU2NyZWVuLUJ1ZmZlclxuICAgIHRoaXMuX2FsdCA9IG5ldyBCdWZmZXIoZmFsc2UsIHRoaXMuX29wdGlvbnNTZXJ2aWNlLCB0aGlzLl9idWZmZXJTZXJ2aWNlKTtcbiAgICB0aGlzLl9hY3RpdmVCdWZmZXIgPSB0aGlzLl9ub3JtYWw7XG4gICAgdGhpcy5fb25CdWZmZXJBY3RpdmF0ZS5maXJlKHtcbiAgICAgIGFjdGl2ZUJ1ZmZlcjogdGhpcy5fbm9ybWFsLFxuICAgICAgaW5hY3RpdmVCdWZmZXI6IHRoaXMuX2FsdFxuICAgIH0pO1xuXG4gICAgdGhpcy5zZXR1cFRhYlN0b3BzKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYWx0IEJ1ZmZlciBvZiB0aGUgQnVmZmVyU2V0XG4gICAqL1xuICBwdWJsaWMgZ2V0IGFsdCgpOiBCdWZmZXIge1xuICAgIHJldHVybiB0aGlzLl9hbHQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbm9ybWFsIEJ1ZmZlciBvZiB0aGUgQnVmZmVyU2V0XG4gICAqL1xuICBwdWJsaWMgZ2V0IGFjdGl2ZSgpOiBCdWZmZXIge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmVCdWZmZXI7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudGx5IGFjdGl2ZSBCdWZmZXIgb2YgdGhlIEJ1ZmZlclNldFxuICAgKi9cbiAgcHVibGljIGdldCBub3JtYWwoKTogQnVmZmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbm9ybWFsO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIG5vcm1hbCBCdWZmZXIgb2YgdGhlIEJ1ZmZlclNldCBhcyBpdHMgY3VycmVudGx5IGFjdGl2ZSBCdWZmZXJcbiAgICovXG4gIHB1YmxpYyBhY3RpdmF0ZU5vcm1hbEJ1ZmZlcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fYWN0aXZlQnVmZmVyID09PSB0aGlzLl9ub3JtYWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fbm9ybWFsLnggPSB0aGlzLl9hbHQueDtcbiAgICB0aGlzLl9ub3JtYWwueSA9IHRoaXMuX2FsdC55O1xuICAgIC8vIFRoZSBhbHQgYnVmZmVyIHNob3VsZCBhbHdheXMgYmUgY2xlYXJlZCB3aGVuIHdlIHN3aXRjaCB0byB0aGUgbm9ybWFsXG4gICAgLy8gYnVmZmVyLiBUaGlzIGZyZWVzIHVwIG1lbW9yeSBzaW5jZSB0aGUgYWx0IGJ1ZmZlciBzaG91bGQgYWx3YXlzIGJlIG5ld1xuICAgIC8vIHdoZW4gYWN0aXZhdGVkLlxuICAgIHRoaXMuX2FsdC5jbGVhcigpO1xuICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlciA9IHRoaXMuX25vcm1hbDtcbiAgICB0aGlzLl9vbkJ1ZmZlckFjdGl2YXRlLmZpcmUoe1xuICAgICAgYWN0aXZlQnVmZmVyOiB0aGlzLl9ub3JtYWwsXG4gICAgICBpbmFjdGl2ZUJ1ZmZlcjogdGhpcy5fYWx0XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgYWx0IEJ1ZmZlciBvZiB0aGUgQnVmZmVyU2V0IGFzIGl0cyBjdXJyZW50bHkgYWN0aXZlIEJ1ZmZlclxuICAgKi9cbiAgcHVibGljIGFjdGl2YXRlQWx0QnVmZmVyKGZpbGxBdHRyPzogSUF0dHJpYnV0ZURhdGEpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fYWN0aXZlQnVmZmVyID09PSB0aGlzLl9hbHQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gU2luY2UgdGhlIGFsdCBidWZmZXIgaXMgYWx3YXlzIGNsZWFyZWQgd2hlbiB0aGUgbm9ybWFsIGJ1ZmZlciBpc1xuICAgIC8vIGFjdGl2YXRlZCwgd2Ugd2FudCB0byBmaWxsIGl0IHdoZW4gc3dpdGNoaW5nIHRvIGl0LlxuICAgIHRoaXMuX2FsdC5maWxsVmlld3BvcnRSb3dzKGZpbGxBdHRyKTtcbiAgICB0aGlzLl9hbHQueCA9IHRoaXMuX25vcm1hbC54O1xuICAgIHRoaXMuX2FsdC55ID0gdGhpcy5fbm9ybWFsLnk7XG4gICAgdGhpcy5fYWN0aXZlQnVmZmVyID0gdGhpcy5fYWx0O1xuICAgIHRoaXMuX29uQnVmZmVyQWN0aXZhdGUuZmlyZSh7XG4gICAgICBhY3RpdmVCdWZmZXI6IHRoaXMuX2FsdCxcbiAgICAgIGluYWN0aXZlQnVmZmVyOiB0aGlzLl9ub3JtYWxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNpemVzIGJvdGggbm9ybWFsIGFuZCBhbHQgYnVmZmVycywgYWRqdXN0aW5nIHRoZWlyIGRhdGEgYWNjb3JkaW5nbHkuXG4gICAqIEBwYXJhbSBuZXdDb2xzIFRoZSBuZXcgbnVtYmVyIG9mIGNvbHVtbnMuXG4gICAqIEBwYXJhbSBuZXdSb3dzIFRoZSBuZXcgbnVtYmVyIG9mIHJvd3MuXG4gICAqL1xuICBwdWJsaWMgcmVzaXplKG5ld0NvbHM6IG51bWJlciwgbmV3Um93czogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fbm9ybWFsLnJlc2l6ZShuZXdDb2xzLCBuZXdSb3dzKTtcbiAgICB0aGlzLl9hbHQucmVzaXplKG5ld0NvbHMsIG5ld1Jvd3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHVwIHRoZSB0YWIgc3RvcHMuXG4gICAqIEBwYXJhbSBpIFRoZSBpbmRleCB0byBzdGFydCBzZXR0aW5nIHVwIHRhYiBzdG9wcyBmcm9tLlxuICAgKi9cbiAgcHVibGljIHNldHVwVGFiU3RvcHMoaT86IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX25vcm1hbC5zZXR1cFRhYlN0b3BzKGkpO1xuICAgIHRoaXMuX2FsdC5zZXR1cFRhYlN0b3BzKGkpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOCBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IENoYXJEYXRhLCBJQ2VsbERhdGEsIElFeHRlbmRlZEF0dHJzIH0gZnJvbSAnY29tbW9uL1R5cGVzJztcbmltcG9ydCB7IHN0cmluZ0Zyb21Db2RlUG9pbnQgfSBmcm9tICdjb21tb24vaW5wdXQvVGV4dERlY29kZXInO1xuaW1wb3J0IHsgQ0hBUl9EQVRBX0NIQVJfSU5ERVgsIENIQVJfREFUQV9XSURUSF9JTkRFWCwgQ0hBUl9EQVRBX0FUVFJfSU5ERVgsIENvbnRlbnQgfSBmcm9tICdjb21tb24vYnVmZmVyL0NvbnN0YW50cyc7XG5pbXBvcnQgeyBBdHRyaWJ1dGVEYXRhLCBFeHRlbmRlZEF0dHJzIH0gZnJvbSAnY29tbW9uL2J1ZmZlci9BdHRyaWJ1dGVEYXRhJztcblxuLyoqXG4gKiBDZWxsRGF0YSAtIHJlcHJlc2VudHMgYSBzaW5nbGUgQ2VsbCBpbiB0aGUgdGVybWluYWwgYnVmZmVyLlxuICovXG5leHBvcnQgY2xhc3MgQ2VsbERhdGEgZXh0ZW5kcyBBdHRyaWJ1dGVEYXRhIGltcGxlbWVudHMgSUNlbGxEYXRhIHtcbiAgLyoqIEhlbHBlciB0byBjcmVhdGUgQ2VsbERhdGEgZnJvbSBDaGFyRGF0YS4gKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tQ2hhckRhdGEodmFsdWU6IENoYXJEYXRhKTogQ2VsbERhdGEge1xuICAgIGNvbnN0IG9iaiA9IG5ldyBDZWxsRGF0YSgpO1xuICAgIG9iai5zZXRGcm9tQ2hhckRhdGEodmFsdWUpO1xuICAgIHJldHVybiBvYmo7XG4gIH1cbiAgLyoqIFByaW1pdGl2ZXMgZnJvbSB0ZXJtaW5hbCBidWZmZXIuICovXG4gIHB1YmxpYyBjb250ZW50ID0gMDtcbiAgcHVibGljIGZnID0gMDtcbiAgcHVibGljIGJnID0gMDtcbiAgcHVibGljIGV4dGVuZGVkOiBJRXh0ZW5kZWRBdHRycyA9IG5ldyBFeHRlbmRlZEF0dHJzKCk7XG4gIHB1YmxpYyBjb21iaW5lZERhdGEgPSAnJztcbiAgLyoqIFdoZXRoZXIgY2VsbCBjb250YWlucyBhIGNvbWJpbmVkIHN0cmluZy4gKi9cbiAgcHVibGljIGlzQ29tYmluZWQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50ICYgQ29udGVudC5JU19DT01CSU5FRF9NQVNLO1xuICB9XG4gIC8qKiBXaWR0aCBvZiB0aGUgY2VsbC4gKi9cbiAgcHVibGljIGdldFdpZHRoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudCA+PiBDb250ZW50LldJRFRIX1NISUZUO1xuICB9XG4gIC8qKiBKUyBzdHJpbmcgb2YgdGhlIGNvbnRlbnQuICovXG4gIHB1YmxpYyBnZXRDaGFycygpOiBzdHJpbmcge1xuICAgIGlmICh0aGlzLmNvbnRlbnQgJiBDb250ZW50LklTX0NPTUJJTkVEX01BU0spIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbWJpbmVkRGF0YTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY29udGVudCAmIENvbnRlbnQuQ09ERVBPSU5UX01BU0spIHtcbiAgICAgIHJldHVybiBzdHJpbmdGcm9tQ29kZVBvaW50KHRoaXMuY29udGVudCAmIENvbnRlbnQuQ09ERVBPSU5UX01BU0spO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgLyoqXG4gICAqIENvZGVwb2ludCBvZiBjZWxsXG4gICAqIE5vdGUgdGhpcyByZXR1cm5zIHRoZSBVVEYzMiBjb2RlcG9pbnQgb2Ygc2luZ2xlIGNoYXJzLFxuICAgKiBpZiBjb250ZW50IGlzIGEgY29tYmluZWQgc3RyaW5nIGl0IHJldHVybnMgdGhlIGNvZGVwb2ludFxuICAgKiBvZiB0aGUgbGFzdCBjaGFyIGluIHN0cmluZyB0byBiZSBpbiBsaW5lIHdpdGggY29kZSBpbiBDaGFyRGF0YS5cbiAgICogKi9cbiAgcHVibGljIGdldENvZGUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gKHRoaXMuaXNDb21iaW5lZCgpKVxuICAgICAgPyB0aGlzLmNvbWJpbmVkRGF0YS5jaGFyQ29kZUF0KHRoaXMuY29tYmluZWREYXRhLmxlbmd0aCAtIDEpXG4gICAgICA6IHRoaXMuY29udGVudCAmIENvbnRlbnQuQ09ERVBPSU5UX01BU0s7XG4gIH1cbiAgLyoqIFNldCBkYXRhIGZyb20gQ2hhckRhdGEgKi9cbiAgcHVibGljIHNldEZyb21DaGFyRGF0YSh2YWx1ZTogQ2hhckRhdGEpOiB2b2lkIHtcbiAgICB0aGlzLmZnID0gdmFsdWVbQ0hBUl9EQVRBX0FUVFJfSU5ERVhdO1xuICAgIHRoaXMuYmcgPSAwO1xuICAgIGxldCBjb21iaW5lZCA9IGZhbHNlO1xuICAgIC8vIHN1cnJvZ2F0ZXMgYW5kIGNvbWJpbmVkIHN0cmluZ3MgbmVlZCBzcGVjaWFsIHRyZWF0bWVudFxuICAgIGlmICh2YWx1ZVtDSEFSX0RBVEFfQ0hBUl9JTkRFWF0ubGVuZ3RoID4gMikge1xuICAgICAgY29tYmluZWQgPSB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmICh2YWx1ZVtDSEFSX0RBVEFfQ0hBUl9JTkRFWF0ubGVuZ3RoID09PSAyKSB7XG4gICAgICBjb25zdCBjb2RlID0gdmFsdWVbQ0hBUl9EQVRBX0NIQVJfSU5ERVhdLmNoYXJDb2RlQXQoMCk7XG4gICAgICAvLyBpZiB0aGUgMi1jaGFyIHN0cmluZyBpcyBhIHN1cnJvZ2F0ZSBjcmVhdGUgc2luZ2xlIGNvZGVwb2ludFxuICAgICAgLy8gZXZlcnl0aGluZyBlbHNlIGlzIGNvbWJpbmVkXG4gICAgICBpZiAoMHhEODAwIDw9IGNvZGUgJiYgY29kZSA8PSAweERCRkYpIHtcbiAgICAgICAgY29uc3Qgc2Vjb25kID0gdmFsdWVbQ0hBUl9EQVRBX0NIQVJfSU5ERVhdLmNoYXJDb2RlQXQoMSk7XG4gICAgICAgIGlmICgweERDMDAgPD0gc2Vjb25kICYmIHNlY29uZCA8PSAweERGRkYpIHtcbiAgICAgICAgICB0aGlzLmNvbnRlbnQgPSAoKGNvZGUgLSAweEQ4MDApICogMHg0MDAgKyBzZWNvbmQgLSAweERDMDAgKyAweDEwMDAwKSB8ICh2YWx1ZVtDSEFSX0RBVEFfV0lEVEhfSU5ERVhdIDw8IENvbnRlbnQuV0lEVEhfU0hJRlQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbWJpbmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGNvbWJpbmVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmNvbnRlbnQgPSB2YWx1ZVtDSEFSX0RBVEFfQ0hBUl9JTkRFWF0uY2hhckNvZGVBdCgwKSB8ICh2YWx1ZVtDSEFSX0RBVEFfV0lEVEhfSU5ERVhdIDw8IENvbnRlbnQuV0lEVEhfU0hJRlQpO1xuICAgIH1cbiAgICBpZiAoY29tYmluZWQpIHtcbiAgICAgIHRoaXMuY29tYmluZWREYXRhID0gdmFsdWVbQ0hBUl9EQVRBX0NIQVJfSU5ERVhdO1xuICAgICAgdGhpcy5jb250ZW50ID0gQ29udGVudC5JU19DT01CSU5FRF9NQVNLIHwgKHZhbHVlW0NIQVJfREFUQV9XSURUSF9JTkRFWF0gPDwgQ29udGVudC5XSURUSF9TSElGVCk7XG4gICAgfVxuICB9XG4gIC8qKiBHZXQgZGF0YSBhcyBDaGFyRGF0YS4gKi9cbiAgcHVibGljIGdldEFzQ2hhckRhdGEoKTogQ2hhckRhdGEge1xuICAgIHJldHVybiBbdGhpcy5mZywgdGhpcy5nZXRDaGFycygpLCB0aGlzLmdldFdpZHRoKCksIHRoaXMuZ2V0Q29kZSgpXTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9DT0xPUiA9IDI1NjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX0FUVFIgPSAoMCA8PCAxOCkgfCAoREVGQVVMVF9DT0xPUiA8PCA5KSB8ICgyNTYgPDwgMCk7XG5cbmV4cG9ydCBjb25zdCBDSEFSX0RBVEFfQVRUUl9JTkRFWCA9IDA7XG5leHBvcnQgY29uc3QgQ0hBUl9EQVRBX0NIQVJfSU5ERVggPSAxO1xuZXhwb3J0IGNvbnN0IENIQVJfREFUQV9XSURUSF9JTkRFWCA9IDI7XG5leHBvcnQgY29uc3QgQ0hBUl9EQVRBX0NPREVfSU5ERVggPSAzO1xuXG4vKipcbiAqIE51bGwgY2VsbCAtIGEgcmVhbCBlbXB0eSBjZWxsIChjb250YWluaW5nIG5vdGhpbmcpLlxuICogTm90ZSB0aGF0IGNvZGUgc2hvdWxkIGFsd2F5cyBiZSAwIGZvciBhIG51bGwgY2VsbCBhc1xuICogc2V2ZXJhbCB0ZXN0IGNvbmRpdGlvbiBvZiB0aGUgYnVmZmVyIGxpbmUgcmVseSBvbiB0aGlzLlxuICovXG5leHBvcnQgY29uc3QgTlVMTF9DRUxMX0NIQVIgPSAnJztcbmV4cG9ydCBjb25zdCBOVUxMX0NFTExfV0lEVEggPSAxO1xuZXhwb3J0IGNvbnN0IE5VTExfQ0VMTF9DT0RFID0gMDtcblxuLyoqXG4gKiBXaGl0ZXNwYWNlIGNlbGwuXG4gKiBUaGlzIGlzIG1lYW50IGFzIGEgcmVwbGFjZW1lbnQgZm9yIGVtcHR5IGNlbGxzIHdoZW4gbmVlZGVkXG4gKiBkdXJpbmcgcmVuZGVyaW5nIGxpbmVzIHRvIHByZXNlcnZlIGNvcnJlY3QgYWxpZ21lbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBXSElURVNQQUNFX0NFTExfQ0hBUiA9ICcgJztcbmV4cG9ydCBjb25zdCBXSElURVNQQUNFX0NFTExfV0lEVEggPSAxO1xuZXhwb3J0IGNvbnN0IFdISVRFU1BBQ0VfQ0VMTF9DT0RFID0gMzI7XG5cbi8qKlxuICogQml0bWFza3MgZm9yIGFjY2Vzc2luZyBkYXRhIGluIGBjb250ZW50YC5cbiAqL1xuZXhwb3J0IGNvbnN0IGVudW0gQ29udGVudCB7XG4gIC8qKlxuICAgKiBiaXQgMS4uMjEgICAgY29kZXBvaW50LCBtYXggYWxsb3dlZCBpbiBVVEYzMiBpcyAweDEwRkZGRiAoMjEgYml0cyB0YWtlbilcbiAgICogICAgICAgICAgICAgIHJlYWQ6ICAgYGNvZGVwb2ludCA9IGNvbnRlbnQgJiBDb250ZW50LmNvZGVwb2ludE1hc2s7YFxuICAgKiAgICAgICAgICAgICAgd3JpdGU6ICBgY29udGVudCB8PSBjb2RlcG9pbnQgJiBDb250ZW50LmNvZGVwb2ludE1hc2s7YFxuICAgKiAgICAgICAgICAgICAgICAgICAgICBzaG9ydGN1dCBpZiBwcmVjb25kaXRpb24gYGNvZGVwb2ludCA8PSAweDEwRkZGRmAgaXMgbWV0OlxuICAgKiAgICAgICAgICAgICAgICAgICAgICBgY29udGVudCB8PSBjb2RlcG9pbnQ7YFxuICAgKi9cbiAgQ09ERVBPSU5UX01BU0sgPSAweDFGRkZGRixcblxuICAvKipcbiAgICogYml0IDIyICAgICAgIGZsYWcgaW5kaWNhdGlvbiB3aGV0aGVyIGEgY2VsbCBjb250YWlucyBjb21iaW5lZCBjb250ZW50XG4gICAqICAgICAgICAgICAgICByZWFkOiAgIGBpc0NvbWJpbmVkID0gY29udGVudCAmIENvbnRlbnQuaXNDb21iaW5lZDtgXG4gICAqICAgICAgICAgICAgICBzZXQ6ICAgIGBjb250ZW50IHw9IENvbnRlbnQuaXNDb21iaW5lZDtgXG4gICAqICAgICAgICAgICAgICBjbGVhcjogIGBjb250ZW50ICY9IH5Db250ZW50LmlzQ29tYmluZWQ7YFxuICAgKi9cbiAgSVNfQ09NQklORURfTUFTSyA9IDB4MjAwMDAwLCAgLy8gMSA8PCAyMVxuXG4gIC8qKlxuICAgKiBiaXQgMS4uMjIgICAgbWFzayB0byBjaGVjayB3aGV0aGVyIGEgY2VsbCBjb250YWlucyBhbnkgc3RyaW5nIGRhdGFcbiAgICogICAgICAgICAgICAgIHdlIG5lZWQgdG8gY2hlY2sgZm9yIGNvZGVwb2ludCBhbmQgaXNDb21iaW5lZCBiaXRzIHRvIHNlZVxuICAgKiAgICAgICAgICAgICAgd2hldGhlciBhIGNlbGwgY29udGFpbnMgYW55dGhpbmdcbiAgICogICAgICAgICAgICAgIHJlYWQ6ICAgYGlzRW1wdHkgPSAhKGNvbnRlbnQgJiBDb250ZW50Lmhhc0NvbnRlbnQpYFxuICAgKi9cbiAgSEFTX0NPTlRFTlRfTUFTSyA9IDB4M0ZGRkZGLFxuXG4gIC8qKlxuICAgKiBiaXQgMjMuLjI0ICAgd2N3aWR0aCB2YWx1ZSBvZiBjZWxsLCB0YWtlcyAyIGJpdHMgKHJhbmdlcyBmcm9tIDAuLjIpXG4gICAqICAgICAgICAgICAgICByZWFkOiAgIGB3aWR0aCA9IChjb250ZW50ICYgQ29udGVudC53aWR0aE1hc2spID4+IENvbnRlbnQud2lkdGhTaGlmdDtgXG4gICAqICAgICAgICAgICAgICAgICAgICAgIGBoYXNXaWR0aCA9IGNvbnRlbnQgJiBDb250ZW50LndpZHRoTWFzaztgXG4gICAqICAgICAgICAgICAgICAgICAgICAgIGFzIGxvbmcgYXMgd2N3aWR0aCBpcyBoaWdoZXN0IHZhbHVlIGluIGBjb250ZW50YDpcbiAgICogICAgICAgICAgICAgICAgICAgICAgYHdpZHRoID0gY29udGVudCA+PiBDb250ZW50LndpZHRoU2hpZnQ7YFxuICAgKiAgICAgICAgICAgICAgd3JpdGU6ICBgY29udGVudCB8PSAod2lkdGggPDwgQ29udGVudC53aWR0aFNoaWZ0KSAmIENvbnRlbnQud2lkdGhNYXNrO2BcbiAgICogICAgICAgICAgICAgICAgICAgICAgc2hvcnRjdXQgaWYgcHJlY29uZGl0aW9uIGAwIDw9IHdpZHRoIDw9IDNgIGlzIG1ldDpcbiAgICogICAgICAgICAgICAgICAgICAgICAgYGNvbnRlbnQgfD0gd2lkdGggPDwgQ29udGVudC53aWR0aFNoaWZ0O2BcbiAgICovXG4gIFdJRFRIX01BU0sgPSAweEMwMDAwMCwgICAvLyAzIDw8IDIyXG4gIFdJRFRIX1NISUZUID0gMjJcbn1cblxuZXhwb3J0IGNvbnN0IGVudW0gQXR0cmlidXRlcyB7XG4gIC8qKlxuICAgKiBiaXQgMS4uOCAgICAgYmx1ZSBpbiBSR0IsIGNvbG9yIGluIFAyNTYgYW5kIFAxNlxuICAgKi9cbiAgQkxVRV9NQVNLID0gMHhGRixcbiAgQkxVRV9TSElGVCA9IDAsXG4gIFBDT0xPUl9NQVNLID0gMHhGRixcbiAgUENPTE9SX1NISUZUID0gMCxcblxuICAvKipcbiAgICogYml0IDkuLjE2ICAgIGdyZWVuIGluIFJHQlxuICAgKi9cbiAgR1JFRU5fTUFTSyA9IDB4RkYwMCxcbiAgR1JFRU5fU0hJRlQgPSA4LFxuXG4gIC8qKlxuICAgKiBiaXQgMTcuLjI0ICAgcmVkIGluIFJHQlxuICAgKi9cbiAgUkVEX01BU0sgPSAweEZGMDAwMCxcbiAgUkVEX1NISUZUID0gMTYsXG5cbiAgLyoqXG4gICAqIGJpdCAyNS4uMjYgICBjb2xvciBtb2RlOiBERUZBVUxUICgwKSB8IFAxNiAoMSkgfCBQMjU2ICgyKSB8IFJHQiAoMylcbiAgICovXG4gIENNX01BU0sgPSAweDMwMDAwMDAsXG4gIENNX0RFRkFVTFQgPSAwLFxuICBDTV9QMTYgPSAweDEwMDAwMDAsXG4gIENNX1AyNTYgPSAweDIwMDAwMDAsXG4gIENNX1JHQiA9IDB4MzAwMDAwMCxcblxuICAvKipcbiAgICogYml0IDEuLjI0ICBSR0Igcm9vbVxuICAgKi9cbiAgUkdCX01BU0sgPSAweEZGRkZGRlxufVxuXG5leHBvcnQgY29uc3QgZW51bSBGZ0ZsYWdzIHtcbiAgLyoqXG4gICAqIGJpdCAyNy4uMzJcbiAgICovXG4gIElOVkVSU0UgPSAweDQwMDAwMDAsXG4gIEJPTEQgPSAweDgwMDAwMDAsXG4gIFVOREVSTElORSA9IDB4MTAwMDAwMDAsXG4gIEJMSU5LID0gMHgyMDAwMDAwMCxcbiAgSU5WSVNJQkxFID0gMHg0MDAwMDAwMCxcbiAgU1RSSUtFVEhST1VHSCA9IDB4ODAwMDAwMDAsXG59XG5cbmV4cG9ydCBjb25zdCBlbnVtIEJnRmxhZ3Mge1xuICAvKipcbiAgICogYml0IDI3Li4zMiAodXBwZXIgMyB1bnVzZWQpXG4gICAqL1xuICBJVEFMSUMgPSAweDQwMDAwMDAsXG4gIERJTSA9IDB4ODAwMDAwMCxcbiAgSEFTX0VYVEVOREVEID0gMHgxMDAwMDAwMFxufVxuXG5leHBvcnQgY29uc3QgZW51bSBVbmRlcmxpbmVTdHlsZSB7XG4gIE5PTkUgPSAwLFxuICBTSU5HTEUgPSAxLFxuICBET1VCTEUgPSAyLFxuICBDVVJMWSA9IDMsXG4gIERPVFRFRCA9IDQsXG4gIERBU0hFRCA9IDVcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE4IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJRXZlbnQgfSBmcm9tICdjb21tb24vRXZlbnRFbWl0dGVyJztcbmltcG9ydCB7IERpc3Bvc2FibGUgfSBmcm9tICdjb21tb24vTGlmZWN5Y2xlJztcbmltcG9ydCB7IElNYXJrZXIgfSBmcm9tICdjb21tb24vVHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgTWFya2VyIGV4dGVuZHMgRGlzcG9zYWJsZSBpbXBsZW1lbnRzIElNYXJrZXIge1xuICBwcml2YXRlIHN0YXRpYyBfbmV4dElkID0gMTtcblxuICBwcml2YXRlIF9pZDogbnVtYmVyID0gTWFya2VyLl9uZXh0SWQrKztcbiAgcHVibGljIGlzRGlzcG9zZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwdWJsaWMgZ2V0IGlkKCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9pZDsgfVxuXG4gIHByaXZhdGUgX29uRGlzcG9zZSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgcHVibGljIGdldCBvbkRpc3Bvc2UoKTogSUV2ZW50PHZvaWQ+IHsgcmV0dXJuIHRoaXMuX29uRGlzcG9zZS5ldmVudDsgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBsaW5lOiBudW1iZXJcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzRGlzcG9zZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5pc0Rpc3Bvc2VkID0gdHJ1ZTtcbiAgICB0aGlzLmxpbmUgPSAtMTtcbiAgICAvLyBFbWl0IGJlZm9yZSBzdXBlci5kaXNwb3NlIHN1Y2ggdGhhdCBkaXNwb3NlIGxpc3RlbmVycyBnZXQgYSBjaGFuZ2UgdG8gcmVhY3RcbiAgICB0aGlzLl9vbkRpc3Bvc2UuZmlyZSgpO1xuICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJQ2hhcnNldCB9IGZyb20gJ2NvbW1vbi9UeXBlcyc7XG5cbi8qKlxuICogVGhlIGNoYXJhY3RlciBzZXRzIHN1cHBvcnRlZCBieSB0aGUgdGVybWluYWwuIFRoZXNlIGVuYWJsZSBzZXZlcmFsIGxhbmd1YWdlc1xuICogdG8gYmUgcmVwcmVzZW50ZWQgd2l0aGluIHRoZSB0ZXJtaW5hbCB3aXRoIG9ubHkgOC1iaXQgZW5jb2RpbmcuIFNlZSBJU08gMjAyMlxuICogZm9yIGEgZGlzY3Vzc2lvbiBvbiBjaGFyYWN0ZXIgc2V0cy4gT25seSBWVDEwMCBjaGFyYWN0ZXIgc2V0cyBhcmUgc3VwcG9ydGVkLlxuICovXG5leHBvcnQgY29uc3QgQ0hBUlNFVFM6IHsgW2tleTogc3RyaW5nXTogSUNoYXJzZXQgfCB1bmRlZmluZWQgfSA9IHt9O1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IGNoYXJhY3RlciBzZXQsIFVTLlxuICovXG5leHBvcnQgY29uc3QgREVGQVVMVF9DSEFSU0VUOiBJQ2hhcnNldCB8IHVuZGVmaW5lZCA9IENIQVJTRVRTWydCJ107XG5cbi8qKlxuICogREVDIFNwZWNpYWwgQ2hhcmFjdGVyIGFuZCBMaW5lIERyYXdpbmcgU2V0LlxuICogUmVmZXJlbmNlOiBodHRwOi8vdnQxMDAubmV0L2RvY3MvdnQxMDItdWcvdGFibGU1LTEzLmh0bWxcbiAqIEEgbG90IG9mIGN1cnNlcyBhcHBzIHVzZSB0aGlzIGlmIHRoZXkgc2VlIFRFUk09eHRlcm0uXG4gKiB0ZXN0aW5nOiBlY2hvIC1lICdcXGUoMGFcXGUoQidcbiAqIFRoZSB4dGVybSBvdXRwdXQgc29tZXRpbWVzIHNlZW1zIHRvIGNvbmZsaWN0IHdpdGggdGhlXG4gKiByZWZlcmVuY2UgYWJvdmUuIHh0ZXJtIHNlZW1zIGluIGxpbmUgd2l0aCB0aGUgcmVmZXJlbmNlXG4gKiB3aGVuIHJ1bm5pbmcgdnR0ZXN0IGhvd2V2ZXIuXG4gKiBUaGUgdGFibGUgYmVsb3cgbm93IHVzZXMgeHRlcm0ncyBvdXRwdXQgZnJvbSB2dHRlc3QuXG4gKi9cbkNIQVJTRVRTWycwJ10gPSB7XG4gICdgJzogJ1xcdTI1YzYnLCAvLyAn4peGJ1xuICAnYSc6ICdcXHUyNTkyJywgLy8gJ+KWkidcbiAgJ2InOiAnXFx1MjQwOScsIC8vICfikIknIChIVClcbiAgJ2MnOiAnXFx1MjQwYycsIC8vICfikIwnIChGRilcbiAgJ2QnOiAnXFx1MjQwZCcsIC8vICfikI0nIChDUilcbiAgJ2UnOiAnXFx1MjQwYScsIC8vICfikIonIChMRilcbiAgJ2YnOiAnXFx1MDBiMCcsIC8vICfCsCdcbiAgJ2cnOiAnXFx1MDBiMScsIC8vICfCsSdcbiAgJ2gnOiAnXFx1MjQyNCcsIC8vICfikKQnIChOTClcbiAgJ2knOiAnXFx1MjQwYicsIC8vICfikIsnIChWVClcbiAgJ2onOiAnXFx1MjUxOCcsIC8vICfilJgnXG4gICdrJzogJ1xcdTI1MTAnLCAvLyAn4pSQJ1xuICAnbCc6ICdcXHUyNTBjJywgLy8gJ+KUjCdcbiAgJ20nOiAnXFx1MjUxNCcsIC8vICfilJQnXG4gICduJzogJ1xcdTI1M2MnLCAvLyAn4pS8J1xuICAnbyc6ICdcXHUyM2JhJywgLy8gJ+KOuidcbiAgJ3AnOiAnXFx1MjNiYicsIC8vICfijrsnXG4gICdxJzogJ1xcdTI1MDAnLCAvLyAn4pSAJ1xuICAncic6ICdcXHUyM2JjJywgLy8gJ+KOvCdcbiAgJ3MnOiAnXFx1MjNiZCcsIC8vICfijr0nXG4gICd0JzogJ1xcdTI1MWMnLCAvLyAn4pScJ1xuICAndSc6ICdcXHUyNTI0JywgLy8gJ+KUpCdcbiAgJ3YnOiAnXFx1MjUzNCcsIC8vICfilLQnXG4gICd3JzogJ1xcdTI1MmMnLCAvLyAn4pSsJ1xuICAneCc6ICdcXHUyNTAyJywgLy8gJ+KUgidcbiAgJ3knOiAnXFx1MjI2NCcsIC8vICfiiaQnXG4gICd6JzogJ1xcdTIyNjUnLCAvLyAn4omlJ1xuICAneyc6ICdcXHUwM2MwJywgLy8gJ8+AJ1xuICAnfCc6ICdcXHUyMjYwJywgLy8gJ+KJoCdcbiAgJ30nOiAnXFx1MDBhMycsIC8vICfCoydcbiAgJ34nOiAnXFx1MDBiNycgIC8vICfCtydcbn07XG5cbi8qKlxuICogQnJpdGlzaCBjaGFyYWN0ZXIgc2V0XG4gKiBFU0MgKEFcbiAqIFJlZmVyZW5jZTogaHR0cDovL3Z0MTAwLm5ldC9kb2NzL3Z0MjIwLXJtL3RhYmxlMi01Lmh0bWxcbiAqL1xuQ0hBUlNFVFNbJ0EnXSA9IHtcbiAgJyMnOiAnwqMnXG59O1xuXG4vKipcbiAqIFVuaXRlZCBTdGF0ZXMgY2hhcmFjdGVyIHNldFxuICogRVNDIChCXG4gKi9cbkNIQVJTRVRTWydCJ10gPSB1bmRlZmluZWQ7XG5cbi8qKlxuICogRHV0Y2ggY2hhcmFjdGVyIHNldFxuICogRVNDICg0XG4gKiBSZWZlcmVuY2U6IGh0dHA6Ly92dDEwMC5uZXQvZG9jcy92dDIyMC1ybS90YWJsZTItNi5odG1sXG4gKi9cbkNIQVJTRVRTWyc0J10gPSB7XG4gICcjJzogJ8KjJyxcbiAgJ0AnOiAnwr4nLFxuICAnWyc6ICdpaicsXG4gICdcXFxcJzogJ8K9JyxcbiAgJ10nOiAnfCcsXG4gICd7JzogJ8KoJyxcbiAgJ3wnOiAnZicsXG4gICd9JzogJ8K8JyxcbiAgJ34nOiAnwrQnXG59O1xuXG4vKipcbiAqIEZpbm5pc2ggY2hhcmFjdGVyIHNldFxuICogRVNDIChDIG9yIEVTQyAoNVxuICogUmVmZXJlbmNlOiBodHRwOi8vdnQxMDAubmV0L2RvY3MvdnQyMjAtcm0vdGFibGUyLTcuaHRtbFxuICovXG5DSEFSU0VUU1snQyddID1cbkNIQVJTRVRTWyc1J10gPSB7XG4gICdbJzogJ8OEJyxcbiAgJ1xcXFwnOiAnw5YnLFxuICAnXSc6ICfDhScsXG4gICdeJzogJ8OcJyxcbiAgJ2AnOiAnw6knLFxuICAneyc6ICfDpCcsXG4gICd8JzogJ8O2JyxcbiAgJ30nOiAnw6UnLFxuICAnfic6ICfDvCdcbn07XG5cbi8qKlxuICogRnJlbmNoIGNoYXJhY3RlciBzZXRcbiAqIEVTQyAoUlxuICogUmVmZXJlbmNlOiBodHRwOi8vdnQxMDAubmV0L2RvY3MvdnQyMjAtcm0vdGFibGUyLTguaHRtbFxuICovXG5DSEFSU0VUU1snUiddID0ge1xuICAnIyc6ICfCoycsXG4gICdAJzogJ8OgJyxcbiAgJ1snOiAnwrAnLFxuICAnXFxcXCc6ICfDpycsXG4gICddJzogJ8KnJyxcbiAgJ3snOiAnw6knLFxuICAnfCc6ICfDuScsXG4gICd9JzogJ8OoJyxcbiAgJ34nOiAnwqgnXG59O1xuXG4vKipcbiAqIEZyZW5jaCBDYW5hZGlhbiBjaGFyYWN0ZXIgc2V0XG4gKiBFU0MgKFFcbiAqIFJlZmVyZW5jZTogaHR0cDovL3Z0MTAwLm5ldC9kb2NzL3Z0MjIwLXJtL3RhYmxlMi05Lmh0bWxcbiAqL1xuQ0hBUlNFVFNbJ1EnXSA9IHtcbiAgJ0AnOiAnw6AnLFxuICAnWyc6ICfDoicsXG4gICdcXFxcJzogJ8OnJyxcbiAgJ10nOiAnw6onLFxuICAnXic6ICfDricsXG4gICdgJzogJ8O0JyxcbiAgJ3snOiAnw6knLFxuICAnfCc6ICfDuScsXG4gICd9JzogJ8OoJyxcbiAgJ34nOiAnw7snXG59O1xuXG4vKipcbiAqIEdlcm1hbiBjaGFyYWN0ZXIgc2V0XG4gKiBFU0MgKEtcbiAqIFJlZmVyZW5jZTogaHR0cDovL3Z0MTAwLm5ldC9kb2NzL3Z0MjIwLXJtL3RhYmxlMi0xMC5odG1sXG4gKi9cbkNIQVJTRVRTWydLJ10gPSB7XG4gICdAJzogJ8KnJyxcbiAgJ1snOiAnw4QnLFxuICAnXFxcXCc6ICfDlicsXG4gICddJzogJ8OcJyxcbiAgJ3snOiAnw6QnLFxuICAnfCc6ICfDticsXG4gICd9JzogJ8O8JyxcbiAgJ34nOiAnw58nXG59O1xuXG4vKipcbiAqIEl0YWxpYW4gY2hhcmFjdGVyIHNldFxuICogRVNDIChZXG4gKiBSZWZlcmVuY2U6IGh0dHA6Ly92dDEwMC5uZXQvZG9jcy92dDIyMC1ybS90YWJsZTItMTEuaHRtbFxuICovXG5DSEFSU0VUU1snWSddID0ge1xuICAnIyc6ICfCoycsXG4gICdAJzogJ8KnJyxcbiAgJ1snOiAnwrAnLFxuICAnXFxcXCc6ICfDpycsXG4gICddJzogJ8OpJyxcbiAgJ2AnOiAnw7knLFxuICAneyc6ICfDoCcsXG4gICd8JzogJ8OyJyxcbiAgJ30nOiAnw6gnLFxuICAnfic6ICfDrCdcbn07XG5cbi8qKlxuICogTm9yd2VnaWFuL0RhbmlzaCBjaGFyYWN0ZXIgc2V0XG4gKiBFU0MgKEUgb3IgRVNDICg2XG4gKiBSZWZlcmVuY2U6IGh0dHA6Ly92dDEwMC5uZXQvZG9jcy92dDIyMC1ybS90YWJsZTItMTIuaHRtbFxuICovXG5DSEFSU0VUU1snRSddID1cbkNIQVJTRVRTWyc2J10gPSB7XG4gICdAJzogJ8OEJyxcbiAgJ1snOiAnw4YnLFxuICAnXFxcXCc6ICfDmCcsXG4gICddJzogJ8OFJyxcbiAgJ14nOiAnw5wnLFxuICAnYCc6ICfDpCcsXG4gICd7JzogJ8OmJyxcbiAgJ3wnOiAnw7gnLFxuICAnfSc6ICfDpScsXG4gICd+JzogJ8O8J1xufTtcblxuLyoqXG4gKiBTcGFuaXNoIGNoYXJhY3RlciBzZXRcbiAqIEVTQyAoWlxuICogUmVmZXJlbmNlOiBodHRwOi8vdnQxMDAubmV0L2RvY3MvdnQyMjAtcm0vdGFibGUyLTEzLmh0bWxcbiAqL1xuQ0hBUlNFVFNbJ1onXSA9IHtcbiAgJyMnOiAnwqMnLFxuICAnQCc6ICfCpycsXG4gICdbJzogJ8KhJyxcbiAgJ1xcXFwnOiAnw5EnLFxuICAnXSc6ICfCvycsXG4gICd7JzogJ8KwJyxcbiAgJ3wnOiAnw7EnLFxuICAnfSc6ICfDpydcbn07XG5cbi8qKlxuICogU3dlZGlzaCBjaGFyYWN0ZXIgc2V0XG4gKiBFU0MgKEggb3IgRVNDICg3XG4gKiBSZWZlcmVuY2U6IGh0dHA6Ly92dDEwMC5uZXQvZG9jcy92dDIyMC1ybS90YWJsZTItMTQuaHRtbFxuICovXG5DSEFSU0VUU1snSCddID1cbkNIQVJTRVRTWyc3J10gPSB7XG4gICdAJzogJ8OJJyxcbiAgJ1snOiAnw4QnLFxuICAnXFxcXCc6ICfDlicsXG4gICddJzogJ8OFJyxcbiAgJ14nOiAnw5wnLFxuICAnYCc6ICfDqScsXG4gICd7JzogJ8OkJyxcbiAgJ3wnOiAnw7YnLFxuICAnfSc6ICfDpScsXG4gICd+JzogJ8O8J1xufTtcblxuLyoqXG4gKiBTd2lzcyBjaGFyYWN0ZXIgc2V0XG4gKiBFU0MgKD1cbiAqIFJlZmVyZW5jZTogaHR0cDovL3Z0MTAwLm5ldC9kb2NzL3Z0MjIwLXJtL3RhYmxlMi0xNS5odG1sXG4gKi9cbkNIQVJTRVRTWyc9J10gPSB7XG4gICcjJzogJ8O5JyxcbiAgJ0AnOiAnw6AnLFxuICAnWyc6ICfDqScsXG4gICdcXFxcJzogJ8OnJyxcbiAgJ10nOiAnw6onLFxuICAnXic6ICfDricsXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbiAgJ18nOiAnw6gnLFxuICAnYCc6ICfDtCcsXG4gICd7JzogJ8OkJyxcbiAgJ3wnOiAnw7YnLFxuICAnfSc6ICfDvCcsXG4gICd+JzogJ8O7J1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuLyoqXG4gKiBDMCBjb250cm9sIGNvZGVzXG4gKiBTZWUgPSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DMF9hbmRfQzFfY29udHJvbF9jb2Rlc1xuICovXG5leHBvcnQgbmFtZXNwYWNlIEMwIHtcbiAgLyoqIE51bGwgKENhcmV0ID0gXkAsIEMgPSBcXDApICovXG4gIGV4cG9ydCBjb25zdCBOVUwgPSAnXFx4MDAnO1xuICAvKiogU3RhcnQgb2YgSGVhZGluZyAoQ2FyZXQgPSBeQSkgKi9cbiAgZXhwb3J0IGNvbnN0IFNPSCA9ICdcXHgwMSc7XG4gIC8qKiBTdGFydCBvZiBUZXh0IChDYXJldCA9IF5CKSAqL1xuICBleHBvcnQgY29uc3QgU1RYID0gJ1xceDAyJztcbiAgLyoqIEVuZCBvZiBUZXh0IChDYXJldCA9IF5DKSAqL1xuICBleHBvcnQgY29uc3QgRVRYID0gJ1xceDAzJztcbiAgLyoqIEVuZCBvZiBUcmFuc21pc3Npb24gKENhcmV0ID0gXkQpICovXG4gIGV4cG9ydCBjb25zdCBFT1QgPSAnXFx4MDQnO1xuICAvKiogRW5xdWlyeSAoQ2FyZXQgPSBeRSkgKi9cbiAgZXhwb3J0IGNvbnN0IEVOUSA9ICdcXHgwNSc7XG4gIC8qKiBBY2tub3dsZWRnZSAoQ2FyZXQgPSBeRikgKi9cbiAgZXhwb3J0IGNvbnN0IEFDSyA9ICdcXHgwNic7XG4gIC8qKiBCZWxsIChDYXJldCA9IF5HLCBDID0gXFxhKSAqL1xuICBleHBvcnQgY29uc3QgQkVMID0gJ1xceDA3JztcbiAgLyoqIEJhY2tzcGFjZSAoQ2FyZXQgPSBeSCwgQyA9IFxcYikgKi9cbiAgZXhwb3J0IGNvbnN0IEJTICA9ICdcXHgwOCc7XG4gIC8qKiBDaGFyYWN0ZXIgVGFidWxhdGlvbiwgSG9yaXpvbnRhbCBUYWJ1bGF0aW9uIChDYXJldCA9IF5JLCBDID0gXFx0KSAqL1xuICBleHBvcnQgY29uc3QgSFQgID0gJ1xceDA5JztcbiAgLyoqIExpbmUgRmVlZCAoQ2FyZXQgPSBeSiwgQyA9IFxcbikgKi9cbiAgZXhwb3J0IGNvbnN0IExGICA9ICdcXHgwYSc7XG4gIC8qKiBMaW5lIFRhYnVsYXRpb24sIFZlcnRpY2FsIFRhYnVsYXRpb24gKENhcmV0ID0gXkssIEMgPSBcXHYpICovXG4gIGV4cG9ydCBjb25zdCBWVCAgPSAnXFx4MGInO1xuICAvKiogRm9ybSBGZWVkIChDYXJldCA9IF5MLCBDID0gXFxmKSAqL1xuICBleHBvcnQgY29uc3QgRkYgID0gJ1xceDBjJztcbiAgLyoqIENhcnJpYWdlIFJldHVybiAoQ2FyZXQgPSBeTSwgQyA9IFxccikgKi9cbiAgZXhwb3J0IGNvbnN0IENSICA9ICdcXHgwZCc7XG4gIC8qKiBTaGlmdCBPdXQgKENhcmV0ID0gXk4pICovXG4gIGV4cG9ydCBjb25zdCBTTyAgPSAnXFx4MGUnO1xuICAvKiogU2hpZnQgSW4gKENhcmV0ID0gXk8pICovXG4gIGV4cG9ydCBjb25zdCBTSSAgPSAnXFx4MGYnO1xuICAvKiogRGF0YSBMaW5rIEVzY2FwZSAoQ2FyZXQgPSBeUCkgKi9cbiAgZXhwb3J0IGNvbnN0IERMRSA9ICdcXHgxMCc7XG4gIC8qKiBEZXZpY2UgQ29udHJvbCBPbmUgKFhPTikgKENhcmV0ID0gXlEpICovXG4gIGV4cG9ydCBjb25zdCBEQzEgPSAnXFx4MTEnO1xuICAvKiogRGV2aWNlIENvbnRyb2wgVHdvIChDYXJldCA9IF5SKSAqL1xuICBleHBvcnQgY29uc3QgREMyID0gJ1xceDEyJztcbiAgLyoqIERldmljZSBDb250cm9sIFRocmVlIChYT0ZGKSAoQ2FyZXQgPSBeUykgKi9cbiAgZXhwb3J0IGNvbnN0IERDMyA9ICdcXHgxMyc7XG4gIC8qKiBEZXZpY2UgQ29udHJvbCBGb3VyIChDYXJldCA9IF5UKSAqL1xuICBleHBvcnQgY29uc3QgREM0ID0gJ1xceDE0JztcbiAgLyoqIE5lZ2F0aXZlIEFja25vd2xlZGdlIChDYXJldCA9IF5VKSAqL1xuICBleHBvcnQgY29uc3QgTkFLID0gJ1xceDE1JztcbiAgLyoqIFN5bmNocm9ub3VzIElkbGUgKENhcmV0ID0gXlYpICovXG4gIGV4cG9ydCBjb25zdCBTWU4gPSAnXFx4MTYnO1xuICAvKiogRW5kIG9mIFRyYW5zbWlzc2lvbiBCbG9jayAoQ2FyZXQgPSBeVykgKi9cbiAgZXhwb3J0IGNvbnN0IEVUQiA9ICdcXHgxNyc7XG4gIC8qKiBDYW5jZWwgKENhcmV0ID0gXlgpICovXG4gIGV4cG9ydCBjb25zdCBDQU4gPSAnXFx4MTgnO1xuICAvKiogRW5kIG9mIE1lZGl1bSAoQ2FyZXQgPSBeWSkgKi9cbiAgZXhwb3J0IGNvbnN0IEVNICA9ICdcXHgxOSc7XG4gIC8qKiBTdWJzdGl0dXRlIChDYXJldCA9IF5aKSAqL1xuICBleHBvcnQgY29uc3QgU1VCID0gJ1xceDFhJztcbiAgLyoqIEVzY2FwZSAoQ2FyZXQgPSBeWywgQyA9IFxcZSkgKi9cbiAgZXhwb3J0IGNvbnN0IEVTQyA9ICdcXHgxYic7XG4gIC8qKiBGaWxlIFNlcGFyYXRvciAoQ2FyZXQgPSBeXFwpICovXG4gIGV4cG9ydCBjb25zdCBGUyAgPSAnXFx4MWMnO1xuICAvKiogR3JvdXAgU2VwYXJhdG9yIChDYXJldCA9IF5dKSAqL1xuICBleHBvcnQgY29uc3QgR1MgID0gJ1xceDFkJztcbiAgLyoqIFJlY29yZCBTZXBhcmF0b3IgKENhcmV0ID0gXl4pICovXG4gIGV4cG9ydCBjb25zdCBSUyAgPSAnXFx4MWUnO1xuICAvKiogVW5pdCBTZXBhcmF0b3IgKENhcmV0ID0gXl8pICovXG4gIGV4cG9ydCBjb25zdCBVUyAgPSAnXFx4MWYnO1xuICAvKiogU3BhY2UgKi9cbiAgZXhwb3J0IGNvbnN0IFNQICA9ICdcXHgyMCc7XG4gIC8qKiBEZWxldGUgKENhcmV0ID0gXj8pICovXG4gIGV4cG9ydCBjb25zdCBERUwgPSAnXFx4N2YnO1xufVxuXG4vKipcbiAqIEMxIGNvbnRyb2wgY29kZXNcbiAqIFNlZSA9IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0MwX2FuZF9DMV9jb250cm9sX2NvZGVzXG4gKi9cbmV4cG9ydCBuYW1lc3BhY2UgQzEge1xuICAvKiogcGFkZGluZyBjaGFyYWN0ZXIgKi9cbiAgZXhwb3J0IGNvbnN0IFBBRCA9ICdcXHg4MCc7XG4gIC8qKiBIaWdoIE9jdGV0IFByZXNldCAqL1xuICBleHBvcnQgY29uc3QgSE9QID0gJ1xceDgxJztcbiAgLyoqIEJyZWFrIFBlcm1pdHRlZCBIZXJlICovXG4gIGV4cG9ydCBjb25zdCBCUEggPSAnXFx4ODInO1xuICAvKiogTm8gQnJlYWsgSGVyZSAqL1xuICBleHBvcnQgY29uc3QgTkJIID0gJ1xceDgzJztcbiAgLyoqIEluZGV4ICovXG4gIGV4cG9ydCBjb25zdCBJTkQgPSAnXFx4ODQnO1xuICAvKiogTmV4dCBMaW5lICovXG4gIGV4cG9ydCBjb25zdCBORUwgPSAnXFx4ODUnO1xuICAvKiogU3RhcnQgb2YgU2VsZWN0ZWQgQXJlYSAqL1xuICBleHBvcnQgY29uc3QgU1NBID0gJ1xceDg2JztcbiAgLyoqIEVuZCBvZiBTZWxlY3RlZCBBcmVhICovXG4gIGV4cG9ydCBjb25zdCBFU0EgPSAnXFx4ODcnO1xuICAvKiogSG9yaXpvbnRhbCBUYWJ1bGF0aW9uIFNldCAqL1xuICBleHBvcnQgY29uc3QgSFRTID0gJ1xceDg4JztcbiAgLyoqIEhvcml6b250YWwgVGFidWxhdGlvbiBXaXRoIEp1c3RpZmljYXRpb24gKi9cbiAgZXhwb3J0IGNvbnN0IEhUSiA9ICdcXHg4OSc7XG4gIC8qKiBWZXJ0aWNhbCBUYWJ1bGF0aW9uIFNldCAqL1xuICBleHBvcnQgY29uc3QgVlRTID0gJ1xceDhhJztcbiAgLyoqIFBhcnRpYWwgTGluZSBEb3duICovXG4gIGV4cG9ydCBjb25zdCBQTEQgPSAnXFx4OGInO1xuICAvKiogUGFydGlhbCBMaW5lIFVwICovXG4gIGV4cG9ydCBjb25zdCBQTFUgPSAnXFx4OGMnO1xuICAvKiogUmV2ZXJzZSBJbmRleCAqL1xuICBleHBvcnQgY29uc3QgUkkgPSAnXFx4OGQnO1xuICAvKiogU2luZ2xlLVNoaWZ0IDIgKi9cbiAgZXhwb3J0IGNvbnN0IFNTMiA9ICdcXHg4ZSc7XG4gIC8qKiBTaW5nbGUtU2hpZnQgMyAqL1xuICBleHBvcnQgY29uc3QgU1MzID0gJ1xceDhmJztcbiAgLyoqIERldmljZSBDb250cm9sIFN0cmluZyAqL1xuICBleHBvcnQgY29uc3QgRENTID0gJ1xceDkwJztcbiAgLyoqIFByaXZhdGUgVXNlIDEgKi9cbiAgZXhwb3J0IGNvbnN0IFBVMSA9ICdcXHg5MSc7XG4gIC8qKiBQcml2YXRlIFVzZSAyICovXG4gIGV4cG9ydCBjb25zdCBQVTIgPSAnXFx4OTInO1xuICAvKiogU2V0IFRyYW5zbWl0IFN0YXRlICovXG4gIGV4cG9ydCBjb25zdCBTVFMgPSAnXFx4OTMnO1xuICAvKiogRGVzdHJ1Y3RpdmUgYmFja3NwYWNlLCBpbnRlbmRlZCB0byBlbGltaW5hdGUgYW1iaWd1aXR5IGFib3V0IG1lYW5pbmcgb2YgQlMuICovXG4gIGV4cG9ydCBjb25zdCBDQ0ggPSAnXFx4OTQnO1xuICAvKiogTWVzc2FnZSBXYWl0aW5nICovXG4gIGV4cG9ydCBjb25zdCBNVyA9ICdcXHg5NSc7XG4gIC8qKiBTdGFydCBvZiBQcm90ZWN0ZWQgQXJlYSAqL1xuICBleHBvcnQgY29uc3QgU1BBID0gJ1xceDk2JztcbiAgLyoqIEVuZCBvZiBQcm90ZWN0ZWQgQXJlYSAqL1xuICBleHBvcnQgY29uc3QgRVBBID0gJ1xceDk3JztcbiAgLyoqIFN0YXJ0IG9mIFN0cmluZyAqL1xuICBleHBvcnQgY29uc3QgU09TID0gJ1xceDk4JztcbiAgLyoqIFNpbmdsZSBHcmFwaGljIENoYXJhY3RlciBJbnRyb2R1Y2VyICovXG4gIGV4cG9ydCBjb25zdCBTR0NJID0gJ1xceDk5JztcbiAgLyoqIFNpbmdsZSBDaGFyYWN0ZXIgSW50cm9kdWNlciAqL1xuICBleHBvcnQgY29uc3QgU0NJID0gJ1xceDlhJztcbiAgLyoqIENvbnRyb2wgU2VxdWVuY2UgSW50cm9kdWNlciAqL1xuICBleHBvcnQgY29uc3QgQ1NJID0gJ1xceDliJztcbiAgLyoqIFN0cmluZyBUZXJtaW5hdG9yICovXG4gIGV4cG9ydCBjb25zdCBTVCA9ICdcXHg5Yyc7XG4gIC8qKiBPcGVyYXRpbmcgU3lzdGVtIENvbW1hbmQgKi9cbiAgZXhwb3J0IGNvbnN0IE9TQyA9ICdcXHg5ZCc7XG4gIC8qKiBQcml2YWN5IE1lc3NhZ2UgKi9cbiAgZXhwb3J0IGNvbnN0IFBNID0gJ1xceDllJztcbiAgLyoqIEFwcGxpY2F0aW9uIFByb2dyYW0gQ29tbWFuZCAqL1xuICBleHBvcnQgY29uc3QgQVBDID0gJ1xceDlmJztcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTMsIENocmlzdG9waGVyIEplZmZyZXkgKE1JVCBMaWNlbnNlKVxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSUtleWJvYXJkRXZlbnQsIElLZXlib2FyZFJlc3VsdCwgS2V5Ym9hcmRSZXN1bHRUeXBlIH0gZnJvbSAnY29tbW9uL1R5cGVzJztcbmltcG9ydCB7IEMwIH0gZnJvbSAnY29tbW9uL2RhdGEvRXNjYXBlU2VxdWVuY2VzJztcblxuLy8gcmVnICsgc2hpZnQga2V5IG1hcHBpbmdzIGZvciBkaWdpdHMgYW5kIHNwZWNpYWwgY2hhcnNcbmNvbnN0IEtFWUNPREVfS0VZX01BUFBJTkdTOiB7IFtrZXk6IG51bWJlcl06IFtzdHJpbmcsIHN0cmluZ119ID0ge1xuICAvLyBkaWdpdHMgMC05XG4gIDQ4OiBbJzAnLCAnKSddLFxuICA0OTogWycxJywgJyEnXSxcbiAgNTA6IFsnMicsICdAJ10sXG4gIDUxOiBbJzMnLCAnIyddLFxuICA1MjogWyc0JywgJyQnXSxcbiAgNTM6IFsnNScsICclJ10sXG4gIDU0OiBbJzYnLCAnXiddLFxuICA1NTogWyc3JywgJyYnXSxcbiAgNTY6IFsnOCcsICcqJ10sXG4gIDU3OiBbJzknLCAnKCddLFxuXG4gIC8vIHNwZWNpYWwgY2hhcnNcbiAgMTg2OiBbJzsnLCAnOiddLFxuICAxODc6IFsnPScsICcrJ10sXG4gIDE4ODogWycsJywgJzwnXSxcbiAgMTg5OiBbJy0nLCAnXyddLFxuICAxOTA6IFsnLicsICc+J10sXG4gIDE5MTogWycvJywgJz8nXSxcbiAgMTkyOiBbJ2AnLCAnfiddLFxuICAyMTk6IFsnWycsICd7J10sXG4gIDIyMDogWydcXFxcJywgJ3wnXSxcbiAgMjIxOiBbJ10nLCAnfSddLFxuICAyMjI6IFsnXFwnJywgJ1wiJ11cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBldmFsdWF0ZUtleWJvYXJkRXZlbnQoXG4gIGV2OiBJS2V5Ym9hcmRFdmVudCxcbiAgYXBwbGljYXRpb25DdXJzb3JNb2RlOiBib29sZWFuLFxuICBpc01hYzogYm9vbGVhbixcbiAgbWFjT3B0aW9uSXNNZXRhOiBib29sZWFuXG4pOiBJS2V5Ym9hcmRSZXN1bHQge1xuICBjb25zdCByZXN1bHQ6IElLZXlib2FyZFJlc3VsdCA9IHtcbiAgICB0eXBlOiBLZXlib2FyZFJlc3VsdFR5cGUuU0VORF9LRVksXG4gICAgLy8gV2hldGhlciB0byBjYW5jZWwgZXZlbnQgcHJvcGFnYXRpb24gKE5PVEU6IHRoaXMgbWF5IG5vdCBiZSBuZWVkZWQgc2luY2UgdGhlIGV2ZW50IGlzXG4gICAgLy8gY2FuY2VsZWQgYXQgdGhlIGVuZCBvZiBrZXlEb3duXG4gICAgY2FuY2VsOiBmYWxzZSxcbiAgICAvLyBUaGUgbmV3IGtleSBldmVuIHRvIGVtaXRcbiAgICBrZXk6IHVuZGVmaW5lZFxuICB9O1xuICBjb25zdCBtb2RpZmllcnMgPSAoZXYuc2hpZnRLZXkgPyAxIDogMCkgfCAoZXYuYWx0S2V5ID8gMiA6IDApIHwgKGV2LmN0cmxLZXkgPyA0IDogMCkgfCAoZXYubWV0YUtleSA/IDggOiAwKTtcbiAgc3dpdGNoIChldi5rZXlDb2RlKSB7XG4gICAgY2FzZSAwOlxuICAgICAgaWYgKGV2LmtleSA9PT0gJ1VJS2V5SW5wdXRVcEFycm93Jykge1xuICAgICAgICBpZiAoYXBwbGljYXRpb25DdXJzb3JNb2RlKSB7XG4gICAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdPQSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbQSc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGV2LmtleSA9PT0gJ1VJS2V5SW5wdXRMZWZ0QXJyb3cnKSB7XG4gICAgICAgIGlmIChhcHBsaWNhdGlvbkN1cnNvck1vZGUpIHtcbiAgICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ09EJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ1tEJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZXYua2V5ID09PSAnVUlLZXlJbnB1dFJpZ2h0QXJyb3cnKSB7XG4gICAgICAgIGlmIChhcHBsaWNhdGlvbkN1cnNvck1vZGUpIHtcbiAgICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ09DJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ1tDJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZXYua2V5ID09PSAnVUlLZXlJbnB1dERvd25BcnJvdycpIHtcbiAgICAgICAgaWYgKGFwcGxpY2F0aW9uQ3Vyc29yTW9kZSkge1xuICAgICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnT0InO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnW0InO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDg6XG4gICAgICAvLyBiYWNrc3BhY2VcbiAgICAgIGlmIChldi5zaGlmdEtleSkge1xuICAgICAgICByZXN1bHQua2V5ID0gQzAuQlM7IC8vIF5IXG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBlbHNlIGlmIChldi5hbHRLZXkpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArIEMwLkRFTDsgLy8gXFxlIF4/XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmVzdWx0LmtleSA9IEMwLkRFTDsgLy8gXj9cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgOTpcbiAgICAgIC8vIHRhYlxuICAgICAgaWYgKGV2LnNoaWZ0S2V5KSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnW1onO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5rZXkgPSBDMC5IVDtcbiAgICAgIHJlc3VsdC5jYW5jZWwgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMzpcbiAgICAgIC8vIHJldHVybi9lbnRlclxuICAgICAgcmVzdWx0LmtleSA9IGV2LmFsdEtleSA/IEMwLkVTQyArIEMwLkNSIDogQzAuQ1I7XG4gICAgICByZXN1bHQuY2FuY2VsID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjc6XG4gICAgICAvLyBlc2NhcGVcbiAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0M7XG4gICAgICBpZiAoZXYuYWx0S2V5KSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyBDMC5FU0M7XG4gICAgICB9XG4gICAgICByZXN1bHQuY2FuY2VsID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzc6XG4gICAgICAvLyBsZWZ0LWFycm93XG4gICAgICBpZiAoZXYubWV0YUtleSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMTsnICsgKG1vZGlmaWVycyArIDEpICsgJ0QnO1xuICAgICAgICAvLyBIQUNLOiBNYWtlIEFsdCArIGxlZnQtYXJyb3cgYmVoYXZlIGxpa2UgQ3RybCArIGxlZnQtYXJyb3c6IG1vdmUgb25lIHdvcmQgYmFja3dhcmRzXG4gICAgICAgIC8vIGh0dHA6Ly91bml4LnN0YWNrZXhjaGFuZ2UuY29tL2EvMTA4MTA2XG4gICAgICAgIC8vIG1hY09TIHVzZXMgZGlmZmVyZW50IGVzY2FwZSBzZXF1ZW5jZXMgdGhhbiBsaW51eFxuICAgICAgICBpZiAocmVzdWx0LmtleSA9PT0gQzAuRVNDICsgJ1sxOzNEJykge1xuICAgICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAoaXNNYWMgPyAnYicgOiAnWzE7NUQnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhcHBsaWNhdGlvbkN1cnNvck1vZGUpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdPRCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ1tEJztcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzk6XG4gICAgICAvLyByaWdodC1hcnJvd1xuICAgICAgaWYgKGV2Lm1ldGFLZXkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzE7JyArIChtb2RpZmllcnMgKyAxKSArICdDJztcbiAgICAgICAgLy8gSEFDSzogTWFrZSBBbHQgKyByaWdodC1hcnJvdyBiZWhhdmUgbGlrZSBDdHJsICsgcmlnaHQtYXJyb3c6IG1vdmUgb25lIHdvcmQgZm9yd2FyZFxuICAgICAgICAvLyBodHRwOi8vdW5peC5zdGFja2V4Y2hhbmdlLmNvbS9hLzEwODEwNlxuICAgICAgICAvLyBtYWNPUyB1c2VzIGRpZmZlcmVudCBlc2NhcGUgc2VxdWVuY2VzIHRoYW4gbGludXhcbiAgICAgICAgaWYgKHJlc3VsdC5rZXkgPT09IEMwLkVTQyArICdbMTszQycpIHtcbiAgICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgKGlzTWFjID8gJ2YnIDogJ1sxOzVDJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYXBwbGljYXRpb25DdXJzb3JNb2RlKSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnT0MnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbQyc7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM4OlxuICAgICAgLy8gdXAtYXJyb3dcbiAgICAgIGlmIChldi5tZXRhS2V5KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKG1vZGlmaWVycykge1xuICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ1sxOycgKyAobW9kaWZpZXJzICsgMSkgKyAnQSc7XG4gICAgICAgIC8vIEhBQ0s6IE1ha2UgQWx0ICsgdXAtYXJyb3cgYmVoYXZlIGxpa2UgQ3RybCArIHVwLWFycm93XG4gICAgICAgIC8vIGh0dHA6Ly91bml4LnN0YWNrZXhjaGFuZ2UuY29tL2EvMTA4MTA2XG4gICAgICAgIC8vIG1hY09TIHVzZXMgZGlmZmVyZW50IGVzY2FwZSBzZXF1ZW5jZXMgdGhhbiBsaW51eFxuICAgICAgICBpZiAoIWlzTWFjICYmIHJlc3VsdC5rZXkgPT09IEMwLkVTQyArICdbMTszQScpIHtcbiAgICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ1sxOzVBJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhcHBsaWNhdGlvbkN1cnNvck1vZGUpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdPQSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ1tBJztcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDA6XG4gICAgICAvLyBkb3duLWFycm93XG4gICAgICBpZiAoZXYubWV0YUtleSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMTsnICsgKG1vZGlmaWVycyArIDEpICsgJ0InO1xuICAgICAgICAvLyBIQUNLOiBNYWtlIEFsdCArIGRvd24tYXJyb3cgYmVoYXZlIGxpa2UgQ3RybCArIGRvd24tYXJyb3dcbiAgICAgICAgLy8gaHR0cDovL3VuaXguc3RhY2tleGNoYW5nZS5jb20vYS8xMDgxMDZcbiAgICAgICAgLy8gbWFjT1MgdXNlcyBkaWZmZXJlbnQgZXNjYXBlIHNlcXVlbmNlcyB0aGFuIGxpbnV4XG4gICAgICAgIGlmICghaXNNYWMgJiYgcmVzdWx0LmtleSA9PT0gQzAuRVNDICsgJ1sxOzNCJykge1xuICAgICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzE7NUInO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFwcGxpY2F0aW9uQ3Vyc29yTW9kZSkge1xuICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ09CJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnW0InO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0NTpcbiAgICAgIC8vIGluc2VydFxuICAgICAgaWYgKCFldi5zaGlmdEtleSAmJiAhZXYuY3RybEtleSkge1xuICAgICAgICAvLyA8Q3RybD4gb3IgPFNoaWZ0PiArIDxJbnNlcnQ+IGFyZSB1c2VkIHRvXG4gICAgICAgIC8vIGNvcHktcGFzdGUgb24gc29tZSBzeXN0ZW1zLlxuICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ1syfic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ2OlxuICAgICAgLy8gZGVsZXRlXG4gICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzM7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzN+JztcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzY6XG4gICAgICAvLyBob21lXG4gICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzE7JyArIChtb2RpZmllcnMgKyAxKSArICdIJztcbiAgICAgIH0gZWxzZSBpZiAoYXBwbGljYXRpb25DdXJzb3JNb2RlKSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnT0gnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbSCc7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM1OlxuICAgICAgLy8gZW5kXG4gICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzE7JyArIChtb2RpZmllcnMgKyAxKSArICdGJztcbiAgICAgIH0gZWxzZSBpZiAoYXBwbGljYXRpb25DdXJzb3JNb2RlKSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnT0YnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbRic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDMzOlxuICAgICAgLy8gcGFnZSB1cFxuICAgICAgaWYgKGV2LnNoaWZ0S2V5KSB7XG4gICAgICAgIHJlc3VsdC50eXBlID0gS2V5Ym9hcmRSZXN1bHRUeXBlLlBBR0VfVVA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ1s1fic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM0OlxuICAgICAgLy8gcGFnZSBkb3duXG4gICAgICBpZiAoZXYuc2hpZnRLZXkpIHtcbiAgICAgICAgcmVzdWx0LnR5cGUgPSBLZXlib2FyZFJlc3VsdFR5cGUuUEFHRV9ET1dOO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbNn4nO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMTI6XG4gICAgICAvLyBGMS1GMTJcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMTsnICsgKG1vZGlmaWVycyArIDEpICsgJ1AnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdPUCc7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDExMzpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMTsnICsgKG1vZGlmaWVycyArIDEpICsgJ1EnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdPUSc7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDExNDpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMTsnICsgKG1vZGlmaWVycyArIDEpICsgJ1InO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdPUic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDExNTpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMTsnICsgKG1vZGlmaWVycyArIDEpICsgJ1MnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdPUyc7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDExNjpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMTU7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzE1fic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDExNzpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMTc7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzE3fic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDExODpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMTg7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzE4fic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDExOTpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMTk7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzE5fic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEyMDpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMjA7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzIwfic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEyMTpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMjE7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzIxfic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEyMjpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMjM7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzIzfic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEyMzpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMjQ7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzI0fic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgLy8gYS16IGFuZCBzcGFjZVxuICAgICAgaWYgKGV2LmN0cmxLZXkgJiYgIWV2LnNoaWZ0S2V5ICYmICFldi5hbHRLZXkgJiYgIWV2Lm1ldGFLZXkpIHtcbiAgICAgICAgaWYgKGV2LmtleUNvZGUgPj0gNjUgJiYgZXYua2V5Q29kZSA8PSA5MCkge1xuICAgICAgICAgIHJlc3VsdC5rZXkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGV2LmtleUNvZGUgLSA2NCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXYua2V5Q29kZSA9PT0gMzIpIHtcbiAgICAgICAgICByZXN1bHQua2V5ID0gQzAuTlVMO1xuICAgICAgICB9IGVsc2UgaWYgKGV2LmtleUNvZGUgPj0gNTEgJiYgZXYua2V5Q29kZSA8PSA1NSkge1xuICAgICAgICAgIC8vIGVzY2FwZSwgZmlsZSBzZXAsIGdyb3VwIHNlcCwgcmVjb3JkIHNlcCwgdW5pdCBzZXBcbiAgICAgICAgICByZXN1bHQua2V5ID0gU3RyaW5nLmZyb21DaGFyQ29kZShldi5rZXlDb2RlIC0gNTEgKyAyNyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXYua2V5Q29kZSA9PT0gNTYpIHtcbiAgICAgICAgICByZXN1bHQua2V5ID0gQzAuREVMO1xuICAgICAgICB9IGVsc2UgaWYgKGV2LmtleUNvZGUgPT09IDIxOSkge1xuICAgICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0M7XG4gICAgICAgIH0gZWxzZSBpZiAoZXYua2V5Q29kZSA9PT0gMjIwKSB7XG4gICAgICAgICAgcmVzdWx0LmtleSA9IEMwLkZTO1xuICAgICAgICB9IGVsc2UgaWYgKGV2LmtleUNvZGUgPT09IDIyMSkge1xuICAgICAgICAgIHJlc3VsdC5rZXkgPSBDMC5HUztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgoIWlzTWFjIHx8IG1hY09wdGlvbklzTWV0YSkgJiYgZXYuYWx0S2V5ICYmICFldi5tZXRhS2V5KSB7XG4gICAgICAgIC8vIE9uIG1hY09TIHRoaXMgaXMgYSB0aGlyZCBsZXZlbCBzaGlmdCB3aGVuICFtYWNPcHRpb25Jc01ldGEuIFVzZSA8RXNjPiBpbnN0ZWFkLlxuICAgICAgICBjb25zdCBrZXlNYXBwaW5nID0gS0VZQ09ERV9LRVlfTUFQUElOR1NbZXYua2V5Q29kZV07XG4gICAgICAgIGNvbnN0IGtleSA9IGtleU1hcHBpbmc/LlshZXYuc2hpZnRLZXkgPyAwIDogMV07XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsga2V5O1xuICAgICAgICB9IGVsc2UgaWYgKGV2LmtleUNvZGUgPj0gNjUgJiYgZXYua2V5Q29kZSA8PSA5MCkge1xuICAgICAgICAgIGNvbnN0IGtleUNvZGUgPSBldi5jdHJsS2V5ID8gZXYua2V5Q29kZSAtIDY0IDogZXYua2V5Q29kZSArIDMyO1xuICAgICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGtleUNvZGUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzTWFjICYmICFldi5hbHRLZXkgJiYgIWV2LmN0cmxLZXkgJiYgIWV2LnNoaWZ0S2V5ICYmIGV2Lm1ldGFLZXkpIHtcbiAgICAgICAgaWYgKGV2LmtleUNvZGUgPT09IDY1KSB7IC8vIGNtZCArIGFcbiAgICAgICAgICByZXN1bHQudHlwZSA9IEtleWJvYXJkUmVzdWx0VHlwZS5TRUxFQ1RfQUxMO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGV2LmtleSAmJiAhZXYuY3RybEtleSAmJiAhZXYuYWx0S2V5ICYmICFldi5tZXRhS2V5ICYmIGV2LmtleUNvZGUgPj0gNDggJiYgZXYua2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAvLyBJbmNsdWRlIG9ubHkga2V5cyB0aGF0IHRoYXQgcmVzdWx0IGluIGEgX3NpbmdsZV8gY2hhcmFjdGVyOyBkb24ndCBpbmNsdWRlIG51bSBsb2NrLCB2b2x1bWUgdXAsIGV0Yy5cbiAgICAgICAgcmVzdWx0LmtleSA9IGV2LmtleTtcbiAgICAgIH0gZWxzZSBpZiAoZXYua2V5ICYmIGV2LmN0cmxLZXkpIHtcbiAgICAgICAgaWYgKGV2LmtleSA9PT0gJ18nKSB7IC8vIF5fXG4gICAgICAgICAgcmVzdWx0LmtleSA9IEMwLlVTO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbi8qKlxuICogUG9seWZpbGwgLSBDb252ZXJ0IFVURjMyIGNvZGVwb2ludCBpbnRvIEpTIHN0cmluZy5cbiAqIE5vdGU6IFRoZSBidWlsdC1pbiBTdHJpbmcuZnJvbUNvZGVQb2ludCBoYXBwZW5zIHRvIGJlIG11Y2ggc2xvd2VyXG4gKiAgICAgICBkdWUgdG8gYWRkaXRpb25hbCBzYW5pdHkgY2hlY2tzLiBXZSBjYW4gYXZvaWQgdGhlbSBzaW5jZVxuICogICAgICAgd2UgYWx3YXlzIG9wZXJhdGUgb24gbGVnYWwgVVRGMzIgKGdyYW50ZWQgYnkgdGhlIGlucHV0IGRlY29kZXJzKVxuICogICAgICAgYW5kIHVzZSB0aGlzIGZhc3RlciB2ZXJzaW9uIGluc3RlYWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdGcm9tQ29kZVBvaW50KGNvZGVQb2ludDogbnVtYmVyKTogc3RyaW5nIHtcbiAgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgIGNvZGVQb2ludCAtPSAweDEwMDAwO1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKChjb2RlUG9pbnQgPj4gMTApICsgMHhEODAwKSArIFN0cmluZy5mcm9tQ2hhckNvZGUoKGNvZGVQb2ludCAlIDB4NDAwKSArIDB4REMwMCk7XG4gIH1cbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IFVURjMyIGNoYXIgY29kZXMgaW50byBKUyBzdHJpbmcuXG4gKiBCYXNpY2FsbHkgdGhlIHNhbWUgYXMgYHN0cmluZ0Zyb21Db2RlUG9pbnRgIGJ1dCBmb3IgbXVsdGlwbGUgY29kZXBvaW50c1xuICogaW4gYSBsb29wICh3aGljaCBpcyBhIGxvdCBmYXN0ZXIpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXRmMzJUb1N0cmluZyhkYXRhOiBVaW50MzJBcnJheSwgc3RhcnQ6IG51bWJlciA9IDAsIGVuZDogbnVtYmVyID0gZGF0YS5sZW5ndGgpOiBzdHJpbmcge1xuICBsZXQgcmVzdWx0ID0gJyc7XG4gIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgbGV0IGNvZGVwb2ludCA9IGRhdGFbaV07XG4gICAgaWYgKGNvZGVwb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gSlMgc3RyaW5ncyBhcmUgZW5jb2RlZCBhcyBVVEYxNiwgdGh1cyBhIG5vbiBCTVAgY29kZXBvaW50IGdldHMgY29udmVydGVkIGludG8gYSBzdXJyb2dhdGUgcGFpclxuICAgICAgLy8gY29udmVyc2lvbiBydWxlczpcbiAgICAgIC8vICAtIHN1YnRyYWN0IDB4MTAwMDAgZnJvbSBjb2RlIHBvaW50LCBsZWF2aW5nIGEgMjAgYml0IG51bWJlclxuICAgICAgLy8gIC0gYWRkIGhpZ2ggMTAgYml0cyB0byAweEQ4MDAgIC0tPiBmaXJzdCBzdXJyb2dhdGVcbiAgICAgIC8vICAtIGFkZCBsb3cgMTAgYml0cyB0byAweERDMDAgICAtLT4gc2Vjb25kIHN1cnJvZ2F0ZVxuICAgICAgY29kZXBvaW50IC09IDB4MTAwMDA7XG4gICAgICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoY29kZXBvaW50ID4+IDEwKSArIDB4RDgwMCkgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKChjb2RlcG9pbnQgJSAweDQwMCkgKyAweERDMDApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlcG9pbnQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFN0cmluZ1RvVXRmMzIgLSBkZWNvZGVzIFVURjE2IHNlcXVlbmNlcyBpbnRvIFVURjMyIGNvZGVwb2ludHMuXG4gKiBUbyBrZWVwIHRoZSBkZWNvZGVyIGluIGxpbmUgd2l0aCBKUyBzdHJpbmdzIGl0IGhhbmRsZXMgc2luZ2xlIHN1cnJvZ2F0ZXMgYXMgVUNTMi5cbiAqL1xuZXhwb3J0IGNsYXNzIFN0cmluZ1RvVXRmMzIge1xuICBwcml2YXRlIF9pbnRlcmltOiBudW1iZXIgPSAwO1xuXG4gIC8qKlxuICAgKiBDbGVhcnMgaW50ZXJpbSBhbmQgcmVzZXRzIGRlY29kZXIgdG8gY2xlYW4gc3RhdGUuXG4gICAqL1xuICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5faW50ZXJpbSA9IDA7XG4gIH1cblxuICAvKipcbiAgICogRGVjb2RlIEpTIHN0cmluZyB0byBVVEYzMiBjb2RlcG9pbnRzLlxuICAgKiBUaGUgbWV0aG9kcyBhc3N1bWVzIHN0cmVhbSBpbnB1dCBhbmQgd2lsbCBzdG9yZSBwYXJ0bHkgdHJhbnNtaXR0ZWRcbiAgICogc3Vycm9nYXRlIHBhaXJzIGFuZCBkZWNvZGUgdGhlbSB3aXRoIHRoZSBuZXh0IGRhdGEgY2h1bmsuXG4gICAqIE5vdGU6IFRoZSBtZXRob2QgZG9lcyBubyBib3VuZCBjaGVja3MgZm9yIHRhcmdldCwgdGhlcmVmb3JlIG1ha2Ugc3VyZVxuICAgKiB0aGUgcHJvdmlkZWQgaW5wdXQgZGF0YSBkb2VzIG5vdCBleGNlZWQgdGhlIHNpemUgb2YgYHRhcmdldGAuXG4gICAqIFJldHVybnMgdGhlIG51bWJlciBvZiB3cml0dGVuIGNvZGVwb2ludHMgaW4gYHRhcmdldGAuXG4gICAqL1xuICBwdWJsaWMgZGVjb2RlKGlucHV0OiBzdHJpbmcsIHRhcmdldDogVWludDMyQXJyYXkpOiBudW1iZXIge1xuICAgIGNvbnN0IGxlbmd0aCA9IGlucHV0Lmxlbmd0aDtcblxuICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBsZXQgc2l6ZSA9IDA7XG4gICAgbGV0IHN0YXJ0UG9zID0gMDtcblxuICAgIC8vIGhhbmRsZSBsZWZ0b3ZlciBzdXJyb2dhdGUgaGlnaFxuICAgIGlmICh0aGlzLl9pbnRlcmltKSB7XG4gICAgICBjb25zdCBzZWNvbmQgPSBpbnB1dC5jaGFyQ29kZUF0KHN0YXJ0UG9zKyspO1xuICAgICAgaWYgKDB4REMwMCA8PSBzZWNvbmQgJiYgc2Vjb25kIDw9IDB4REZGRikge1xuICAgICAgICB0YXJnZXRbc2l6ZSsrXSA9ICh0aGlzLl9pbnRlcmltIC0gMHhEODAwKSAqIDB4NDAwICsgc2Vjb25kIC0gMHhEQzAwICsgMHgxMDAwMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGlsbGVnYWwgY29kZXBvaW50IChVU0MyIGhhbmRsaW5nKVxuICAgICAgICB0YXJnZXRbc2l6ZSsrXSA9IHRoaXMuX2ludGVyaW07XG4gICAgICAgIHRhcmdldFtzaXplKytdID0gc2Vjb25kO1xuICAgICAgfVxuICAgICAgdGhpcy5faW50ZXJpbSA9IDA7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0UG9zOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgIGNvbnN0IGNvZGUgPSBpbnB1dC5jaGFyQ29kZUF0KGkpO1xuICAgICAgLy8gc3Vycm9nYXRlIHBhaXIgZmlyc3RcbiAgICAgIGlmICgweEQ4MDAgPD0gY29kZSAmJiBjb2RlIDw9IDB4REJGRikge1xuICAgICAgICBpZiAoKytpID49IGxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuX2ludGVyaW0gPSBjb2RlO1xuICAgICAgICAgIHJldHVybiBzaXplO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNlY29uZCA9IGlucHV0LmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmICgweERDMDAgPD0gc2Vjb25kICYmIHNlY29uZCA8PSAweERGRkYpIHtcbiAgICAgICAgICB0YXJnZXRbc2l6ZSsrXSA9IChjb2RlIC0gMHhEODAwKSAqIDB4NDAwICsgc2Vjb25kIC0gMHhEQzAwICsgMHgxMDAwMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBpbGxlZ2FsIGNvZGVwb2ludCAoVVNDMiBoYW5kbGluZylcbiAgICAgICAgICB0YXJnZXRbc2l6ZSsrXSA9IGNvZGU7XG4gICAgICAgICAgdGFyZ2V0W3NpemUrK10gPSBzZWNvbmQ7XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoY29kZSA9PT0gMHhGRUZGKSB7XG4gICAgICAgIC8vIEJPTVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHRhcmdldFtzaXplKytdID0gY29kZTtcbiAgICB9XG4gICAgcmV0dXJuIHNpemU7XG4gIH1cbn1cblxuLyoqXG4gKiBVdGY4RGVjb2RlciAtIGRlY29kZXMgVVRGOCBieXRlIHNlcXVlbmNlcyBpbnRvIFVURjMyIGNvZGVwb2ludHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBVdGY4VG9VdGYzMiB7XG4gIHB1YmxpYyBpbnRlcmltOiBVaW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoMyk7XG5cbiAgLyoqXG4gICAqIENsZWFycyBpbnRlcmltIGJ5dGVzIGFuZCByZXNldHMgZGVjb2RlciB0byBjbGVhbiBzdGF0ZS5cbiAgICovXG4gIHB1YmxpYyBjbGVhcigpOiB2b2lkIHtcbiAgICB0aGlzLmludGVyaW0uZmlsbCgwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNvZGVzIFVURjggYnl0ZSBzZXF1ZW5jZXMgaW4gYGlucHV0YCB0byBVVEYzMiBjb2RlcG9pbnRzIGluIGB0YXJnZXRgLlxuICAgKiBUaGUgbWV0aG9kcyBhc3N1bWVzIHN0cmVhbSBpbnB1dCBhbmQgd2lsbCBzdG9yZSBwYXJ0bHkgdHJhbnNtaXR0ZWQgYnl0ZXNcbiAgICogYW5kIGRlY29kZSB0aGVtIHdpdGggdGhlIG5leHQgZGF0YSBjaHVuay5cbiAgICogTm90ZTogVGhlIG1ldGhvZCBkb2VzIG5vIGJvdW5kIGNoZWNrcyBmb3IgdGFyZ2V0LCB0aGVyZWZvcmUgbWFrZSBzdXJlXG4gICAqIHRoZSBwcm92aWRlZCBkYXRhIGNodW5rIGRvZXMgbm90IGV4Y2VlZCB0aGUgc2l6ZSBvZiBgdGFyZ2V0YC5cbiAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHdyaXR0ZW4gY29kZXBvaW50cyBpbiBgdGFyZ2V0YC5cbiAgICovXG4gIHB1YmxpYyBkZWNvZGUoaW5wdXQ6IFVpbnQ4QXJyYXksIHRhcmdldDogVWludDMyQXJyYXkpOiBudW1iZXIge1xuICAgIGNvbnN0IGxlbmd0aCA9IGlucHV0Lmxlbmd0aDtcblxuICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBsZXQgc2l6ZSA9IDA7XG4gICAgbGV0IGJ5dGUxOiBudW1iZXI7XG4gICAgbGV0IGJ5dGUyOiBudW1iZXI7XG4gICAgbGV0IGJ5dGUzOiBudW1iZXI7XG4gICAgbGV0IGJ5dGU0OiBudW1iZXI7XG4gICAgbGV0IGNvZGVwb2ludCA9IDA7XG4gICAgbGV0IHN0YXJ0UG9zID0gMDtcblxuICAgIC8vIGhhbmRsZSBsZWZ0b3ZlciBieXRlc1xuICAgIGlmICh0aGlzLmludGVyaW1bMF0pIHtcbiAgICAgIGxldCBkaXNjYXJkSW50ZXJpbSA9IGZhbHNlO1xuICAgICAgbGV0IGNwID0gdGhpcy5pbnRlcmltWzBdO1xuICAgICAgY3AgJj0gKCgoKGNwICYgMHhFMCkgPT09IDB4QzApKSA/IDB4MUYgOiAoKChjcCAmIDB4RjApID09PSAweEUwKSkgPyAweDBGIDogMHgwNyk7XG4gICAgICBsZXQgcG9zID0gMDtcbiAgICAgIGxldCB0bXA6IG51bWJlcjtcbiAgICAgIHdoaWxlICgodG1wID0gdGhpcy5pbnRlcmltWysrcG9zXSAmIDB4M0YpICYmIHBvcyA8IDQpIHtcbiAgICAgICAgY3AgPDw9IDY7XG4gICAgICAgIGNwIHw9IHRtcDtcbiAgICAgIH1cbiAgICAgIC8vIG1pc3NpbmcgYnl0ZXMgLSByZWFkIGFoZWFkIGZyb20gaW5wdXRcbiAgICAgIGNvbnN0IHR5cGUgPSAoKCh0aGlzLmludGVyaW1bMF0gJiAweEUwKSA9PT0gMHhDMCkpID8gMiA6ICgoKHRoaXMuaW50ZXJpbVswXSAmIDB4RjApID09PSAweEUwKSkgPyAzIDogNDtcbiAgICAgIGNvbnN0IG1pc3NpbmcgPSB0eXBlIC0gcG9zO1xuICAgICAgd2hpbGUgKHN0YXJ0UG9zIDwgbWlzc2luZykge1xuICAgICAgICBpZiAoc3RhcnRQb3MgPj0gbGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgdG1wID0gaW5wdXRbc3RhcnRQb3MrK107XG4gICAgICAgIGlmICgodG1wICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgICAvLyB3cm9uZyBjb250aW51YXRpb24sIGRpc2NhcmQgaW50ZXJpbSBieXRlcyBjb21wbGV0ZWx5XG4gICAgICAgICAgc3RhcnRQb3MtLTtcbiAgICAgICAgICBkaXNjYXJkSW50ZXJpbSA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbmVlZCB0byBzYXZlIHNvIHdlIGNhbiBjb250aW51ZSBzaG9ydCBpbnB1dHMgaW4gbmV4dCBjYWxsXG4gICAgICAgICAgdGhpcy5pbnRlcmltW3BvcysrXSA9IHRtcDtcbiAgICAgICAgICBjcCA8PD0gNjtcbiAgICAgICAgICBjcCB8PSB0bXAgJiAweDNGO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWRpc2NhcmRJbnRlcmltKSB7XG4gICAgICAgIC8vIGZpbmFsIHRlc3QgaXMgdHlwZSBkZXBlbmRlbnRcbiAgICAgICAgaWYgKHR5cGUgPT09IDIpIHtcbiAgICAgICAgICBpZiAoY3AgPCAweDgwKSB7XG4gICAgICAgICAgICAvLyB3cm9uZyBzdGFydGVyIGJ5dGVcbiAgICAgICAgICAgIHN0YXJ0UG9zLS07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldFtzaXplKytdID0gY3A7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDMpIHtcbiAgICAgICAgICBpZiAoY3AgPCAweDA4MDAgfHwgKGNwID49IDB4RDgwMCAmJiBjcCA8PSAweERGRkYpIHx8IGNwID09PSAweEZFRkYpIHtcbiAgICAgICAgICAgIC8vIGlsbGVnYWwgY29kZXBvaW50IG9yIEJPTVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXRbc2l6ZSsrXSA9IGNwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoY3AgPCAweDAxMDAwMCB8fCBjcCA+IDB4MTBGRkZGKSB7XG4gICAgICAgICAgICAvLyBpbGxlZ2FsIGNvZGVwb2ludFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXRbc2l6ZSsrXSA9IGNwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5pbnRlcmltLmZpbGwoMCk7XG4gICAgfVxuXG4gICAgLy8gbG9vcCB0aHJvdWdoIGlucHV0XG4gICAgY29uc3QgZm91clN0b3AgPSBsZW5ndGggLSA0O1xuICAgIGxldCBpID0gc3RhcnRQb3M7XG4gICAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICAgIC8qKlxuICAgICAgICogQVNDSUkgc2hvcnRjdXQgd2l0aCBsb29wIHVucm9sbGVkIHRvIDQgY29uc2VjdXRpdmUgQVNDSUkgY2hhcnMuXG4gICAgICAgKiBUaGlzIGlzIGEgY29tcHJvbWlzZSBiZXR3ZWVuIHNwZWVkIGdhaW4gZm9yIEFTQ0lJXG4gICAgICAgKiBhbmQgcGVuYWx0eSBmb3Igbm9uIEFTQ0lJOlxuICAgICAgICogRm9yIGJlc3QgQVNDSUkgcGVyZm9ybWFuY2UgdGhlIGNoYXIgc2hvdWxkIGJlIHN0b3JlZCBkaXJlY3RseSBpbnRvIHRhcmdldCxcbiAgICAgICAqIGJ1dCBldmVuIGEgc2luZ2xlIGF0dGVtcHQgdG8gd3JpdGUgdG8gdGFyZ2V0IGFuZCBjb21wYXJlIGFmdGVyd2FyZHNcbiAgICAgICAqIHBlbmFsaXplcyBub24gQVNDSUkgcmVhbGx5IGJhZCAoLTUwJSksIHRodXMgd2UgbG9hZCB0aGUgY2hhciBpbnRvIGJ5dGVYIGZpcnN0LFxuICAgICAgICogd2hpY2ggcmVkdWNlcyBBU0NJSSBwZXJmb3JtYW5jZSBieSB+MTUlLlxuICAgICAgICogVGhpcyB0cmlhbCBmb3IgQVNDSUkgcmVkdWNlcyBub24gQVNDSUkgcGVyZm9ybWFuY2UgYnkgfjEwJSB3aGljaCBzZWVtcyBhY2NlcHRpYmxlXG4gICAgICAgKiBjb21wYXJlZCB0byB0aGUgZ2FpbnMuXG4gICAgICAgKiBOb3RlIHRoYXQgdGhpcyBvcHRpbWl6YXRpb24gb25seSB0YWtlcyBwbGFjZSBmb3IgNCBjb25zZWN1dGl2ZSBBU0NJSSBjaGFycyxcbiAgICAgICAqIGZvciBhbnkgc2hvcnRlciBpdCBiYWlscyBvdXQuIFdvcnN0IGNhc2UgLSBhbGwgNCBieXRlcyBiZWluZyByZWFkIGJ1dFxuICAgICAgICogdGhyb3duIGF3YXkgZHVlIHRvIHRoZSBsYXN0IGJlaW5nIGEgbm9uIEFTQ0lJIGNoYXIgKC0xMCUgcGVyZm9ybWFuY2UpLlxuICAgICAgICovXG4gICAgICB3aGlsZSAoaSA8IGZvdXJTdG9wXG4gICAgICAgICYmICEoKGJ5dGUxID0gaW5wdXRbaV0pICYgMHg4MClcbiAgICAgICAgJiYgISgoYnl0ZTIgPSBpbnB1dFtpICsgMV0pICYgMHg4MClcbiAgICAgICAgJiYgISgoYnl0ZTMgPSBpbnB1dFtpICsgMl0pICYgMHg4MClcbiAgICAgICAgJiYgISgoYnl0ZTQgPSBpbnB1dFtpICsgM10pICYgMHg4MCkpXG4gICAgICB7XG4gICAgICAgIHRhcmdldFtzaXplKytdID0gYnl0ZTE7XG4gICAgICAgIHRhcmdldFtzaXplKytdID0gYnl0ZTI7XG4gICAgICAgIHRhcmdldFtzaXplKytdID0gYnl0ZTM7XG4gICAgICAgIHRhcmdldFtzaXplKytdID0gYnl0ZTQ7XG4gICAgICAgIGkgKz0gNDtcbiAgICAgIH1cblxuICAgICAgLy8gcmVyZWFkIGJ5dGUxXG4gICAgICBieXRlMSA9IGlucHV0W2krK107XG5cbiAgICAgIC8vIDEgYnl0ZVxuICAgICAgaWYgKGJ5dGUxIDwgMHg4MCkge1xuICAgICAgICB0YXJnZXRbc2l6ZSsrXSA9IGJ5dGUxO1xuXG4gICAgICAgIC8vIDIgYnl0ZXNcbiAgICAgIH0gZWxzZSBpZiAoKGJ5dGUxICYgMHhFMCkgPT09IDB4QzApIHtcbiAgICAgICAgaWYgKGkgPj0gbGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5pbnRlcmltWzBdID0gYnl0ZTE7XG4gICAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICAgIH1cbiAgICAgICAgYnl0ZTIgPSBpbnB1dFtpKytdO1xuICAgICAgICBpZiAoKGJ5dGUyICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgICAvLyB3cm9uZyBjb250aW51YXRpb25cbiAgICAgICAgICBpLS07XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29kZXBvaW50ID0gKGJ5dGUxICYgMHgxRikgPDwgNiB8IChieXRlMiAmIDB4M0YpO1xuICAgICAgICBpZiAoY29kZXBvaW50IDwgMHg4MCkge1xuICAgICAgICAgIC8vIHdyb25nIHN0YXJ0ZXIgYnl0ZVxuICAgICAgICAgIGktLTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXRbc2l6ZSsrXSA9IGNvZGVwb2ludDtcblxuICAgICAgICAvLyAzIGJ5dGVzXG4gICAgICB9IGVsc2UgaWYgKChieXRlMSAmIDB4RjApID09PSAweEUwKSB7XG4gICAgICAgIGlmIChpID49IGxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuaW50ZXJpbVswXSA9IGJ5dGUxO1xuICAgICAgICAgIHJldHVybiBzaXplO1xuICAgICAgICB9XG4gICAgICAgIGJ5dGUyID0gaW5wdXRbaSsrXTtcbiAgICAgICAgaWYgKChieXRlMiAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICAgICAgLy8gd3JvbmcgY29udGludWF0aW9uXG4gICAgICAgICAgaS0tO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpID49IGxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuaW50ZXJpbVswXSA9IGJ5dGUxO1xuICAgICAgICAgIHRoaXMuaW50ZXJpbVsxXSA9IGJ5dGUyO1xuICAgICAgICAgIHJldHVybiBzaXplO1xuICAgICAgICB9XG4gICAgICAgIGJ5dGUzID0gaW5wdXRbaSsrXTtcbiAgICAgICAgaWYgKChieXRlMyAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICAgICAgLy8gd3JvbmcgY29udGludWF0aW9uXG4gICAgICAgICAgaS0tO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvZGVwb2ludCA9IChieXRlMSAmIDB4MEYpIDw8IDEyIHwgKGJ5dGUyICYgMHgzRikgPDwgNiB8IChieXRlMyAmIDB4M0YpO1xuICAgICAgICBpZiAoY29kZXBvaW50IDwgMHgwODAwIHx8IChjb2RlcG9pbnQgPj0gMHhEODAwICYmIGNvZGVwb2ludCA8PSAweERGRkYpIHx8IGNvZGVwb2ludCA9PT0gMHhGRUZGKSB7XG4gICAgICAgICAgLy8gaWxsZWdhbCBjb2RlcG9pbnQgb3IgQk9NLCBubyBpLS0gaGVyZVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldFtzaXplKytdID0gY29kZXBvaW50O1xuXG4gICAgICAgIC8vIDQgYnl0ZXNcbiAgICAgIH0gZWxzZSBpZiAoKGJ5dGUxICYgMHhGOCkgPT09IDB4RjApIHtcbiAgICAgICAgaWYgKGkgPj0gbGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5pbnRlcmltWzBdID0gYnl0ZTE7XG4gICAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICAgIH1cbiAgICAgICAgYnl0ZTIgPSBpbnB1dFtpKytdO1xuICAgICAgICBpZiAoKGJ5dGUyICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgICAvLyB3cm9uZyBjb250aW51YXRpb25cbiAgICAgICAgICBpLS07XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPj0gbGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5pbnRlcmltWzBdID0gYnl0ZTE7XG4gICAgICAgICAgdGhpcy5pbnRlcmltWzFdID0gYnl0ZTI7XG4gICAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICAgIH1cbiAgICAgICAgYnl0ZTMgPSBpbnB1dFtpKytdO1xuICAgICAgICBpZiAoKGJ5dGUzICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgICAvLyB3cm9uZyBjb250aW51YXRpb25cbiAgICAgICAgICBpLS07XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPj0gbGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5pbnRlcmltWzBdID0gYnl0ZTE7XG4gICAgICAgICAgdGhpcy5pbnRlcmltWzFdID0gYnl0ZTI7XG4gICAgICAgICAgdGhpcy5pbnRlcmltWzJdID0gYnl0ZTM7XG4gICAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICAgIH1cbiAgICAgICAgYnl0ZTQgPSBpbnB1dFtpKytdO1xuICAgICAgICBpZiAoKGJ5dGU0ICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgICAvLyB3cm9uZyBjb250aW51YXRpb25cbiAgICAgICAgICBpLS07XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29kZXBvaW50ID0gKGJ5dGUxICYgMHgwNykgPDwgMTggfCAoYnl0ZTIgJiAweDNGKSA8PCAxMiB8IChieXRlMyAmIDB4M0YpIDw8IDYgfCAoYnl0ZTQgJiAweDNGKTtcbiAgICAgICAgaWYgKGNvZGVwb2ludCA8IDB4MDEwMDAwIHx8IGNvZGVwb2ludCA+IDB4MTBGRkZGKSB7XG4gICAgICAgICAgLy8gaWxsZWdhbCBjb2RlcG9pbnQsIG5vIGktLSBoZXJlXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0W3NpemUrK10gPSBjb2RlcG9pbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpbGxlZ2FsIGJ5dGUsIGp1c3Qgc2tpcFxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2l6ZTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0IHsgSVVuaWNvZGVWZXJzaW9uUHJvdmlkZXIgfSBmcm9tICdjb21tb24vc2VydmljZXMvU2VydmljZXMnO1xuaW1wb3J0IHsgZmlsbCB9IGZyb20gJ2NvbW1vbi9UeXBlZEFycmF5VXRpbHMnO1xuXG50eXBlIENoYXJXaWR0aCA9IDAgfCAxIHwgMjtcblxuY29uc3QgQk1QX0NPTUJJTklORyA9IFtcbiAgWzB4MDMwMCwgMHgwMzZGXSwgWzB4MDQ4MywgMHgwNDg2XSwgWzB4MDQ4OCwgMHgwNDg5XSxcbiAgWzB4MDU5MSwgMHgwNUJEXSwgWzB4MDVCRiwgMHgwNUJGXSwgWzB4MDVDMSwgMHgwNUMyXSxcbiAgWzB4MDVDNCwgMHgwNUM1XSwgWzB4MDVDNywgMHgwNUM3XSwgWzB4MDYwMCwgMHgwNjAzXSxcbiAgWzB4MDYxMCwgMHgwNjE1XSwgWzB4MDY0QiwgMHgwNjVFXSwgWzB4MDY3MCwgMHgwNjcwXSxcbiAgWzB4MDZENiwgMHgwNkU0XSwgWzB4MDZFNywgMHgwNkU4XSwgWzB4MDZFQSwgMHgwNkVEXSxcbiAgWzB4MDcwRiwgMHgwNzBGXSwgWzB4MDcxMSwgMHgwNzExXSwgWzB4MDczMCwgMHgwNzRBXSxcbiAgWzB4MDdBNiwgMHgwN0IwXSwgWzB4MDdFQiwgMHgwN0YzXSwgWzB4MDkwMSwgMHgwOTAyXSxcbiAgWzB4MDkzQywgMHgwOTNDXSwgWzB4MDk0MSwgMHgwOTQ4XSwgWzB4MDk0RCwgMHgwOTREXSxcbiAgWzB4MDk1MSwgMHgwOTU0XSwgWzB4MDk2MiwgMHgwOTYzXSwgWzB4MDk4MSwgMHgwOTgxXSxcbiAgWzB4MDlCQywgMHgwOUJDXSwgWzB4MDlDMSwgMHgwOUM0XSwgWzB4MDlDRCwgMHgwOUNEXSxcbiAgWzB4MDlFMiwgMHgwOUUzXSwgWzB4MEEwMSwgMHgwQTAyXSwgWzB4MEEzQywgMHgwQTNDXSxcbiAgWzB4MEE0MSwgMHgwQTQyXSwgWzB4MEE0NywgMHgwQTQ4XSwgWzB4MEE0QiwgMHgwQTREXSxcbiAgWzB4MEE3MCwgMHgwQTcxXSwgWzB4MEE4MSwgMHgwQTgyXSwgWzB4MEFCQywgMHgwQUJDXSxcbiAgWzB4MEFDMSwgMHgwQUM1XSwgWzB4MEFDNywgMHgwQUM4XSwgWzB4MEFDRCwgMHgwQUNEXSxcbiAgWzB4MEFFMiwgMHgwQUUzXSwgWzB4MEIwMSwgMHgwQjAxXSwgWzB4MEIzQywgMHgwQjNDXSxcbiAgWzB4MEIzRiwgMHgwQjNGXSwgWzB4MEI0MSwgMHgwQjQzXSwgWzB4MEI0RCwgMHgwQjREXSxcbiAgWzB4MEI1NiwgMHgwQjU2XSwgWzB4MEI4MiwgMHgwQjgyXSwgWzB4MEJDMCwgMHgwQkMwXSxcbiAgWzB4MEJDRCwgMHgwQkNEXSwgWzB4MEMzRSwgMHgwQzQwXSwgWzB4MEM0NiwgMHgwQzQ4XSxcbiAgWzB4MEM0QSwgMHgwQzREXSwgWzB4MEM1NSwgMHgwQzU2XSwgWzB4MENCQywgMHgwQ0JDXSxcbiAgWzB4MENCRiwgMHgwQ0JGXSwgWzB4MENDNiwgMHgwQ0M2XSwgWzB4MENDQywgMHgwQ0NEXSxcbiAgWzB4MENFMiwgMHgwQ0UzXSwgWzB4MEQ0MSwgMHgwRDQzXSwgWzB4MEQ0RCwgMHgwRDREXSxcbiAgWzB4MERDQSwgMHgwRENBXSwgWzB4MEREMiwgMHgwREQ0XSwgWzB4MERENiwgMHgwREQ2XSxcbiAgWzB4MEUzMSwgMHgwRTMxXSwgWzB4MEUzNCwgMHgwRTNBXSwgWzB4MEU0NywgMHgwRTRFXSxcbiAgWzB4MEVCMSwgMHgwRUIxXSwgWzB4MEVCNCwgMHgwRUI5XSwgWzB4MEVCQiwgMHgwRUJDXSxcbiAgWzB4MEVDOCwgMHgwRUNEXSwgWzB4MEYxOCwgMHgwRjE5XSwgWzB4MEYzNSwgMHgwRjM1XSxcbiAgWzB4MEYzNywgMHgwRjM3XSwgWzB4MEYzOSwgMHgwRjM5XSwgWzB4MEY3MSwgMHgwRjdFXSxcbiAgWzB4MEY4MCwgMHgwRjg0XSwgWzB4MEY4NiwgMHgwRjg3XSwgWzB4MEY5MCwgMHgwRjk3XSxcbiAgWzB4MEY5OSwgMHgwRkJDXSwgWzB4MEZDNiwgMHgwRkM2XSwgWzB4MTAyRCwgMHgxMDMwXSxcbiAgWzB4MTAzMiwgMHgxMDMyXSwgWzB4MTAzNiwgMHgxMDM3XSwgWzB4MTAzOSwgMHgxMDM5XSxcbiAgWzB4MTA1OCwgMHgxMDU5XSwgWzB4MTE2MCwgMHgxMUZGXSwgWzB4MTM1RiwgMHgxMzVGXSxcbiAgWzB4MTcxMiwgMHgxNzE0XSwgWzB4MTczMiwgMHgxNzM0XSwgWzB4MTc1MiwgMHgxNzUzXSxcbiAgWzB4MTc3MiwgMHgxNzczXSwgWzB4MTdCNCwgMHgxN0I1XSwgWzB4MTdCNywgMHgxN0JEXSxcbiAgWzB4MTdDNiwgMHgxN0M2XSwgWzB4MTdDOSwgMHgxN0QzXSwgWzB4MTdERCwgMHgxN0REXSxcbiAgWzB4MTgwQiwgMHgxODBEXSwgWzB4MThBOSwgMHgxOEE5XSwgWzB4MTkyMCwgMHgxOTIyXSxcbiAgWzB4MTkyNywgMHgxOTI4XSwgWzB4MTkzMiwgMHgxOTMyXSwgWzB4MTkzOSwgMHgxOTNCXSxcbiAgWzB4MUExNywgMHgxQTE4XSwgWzB4MUIwMCwgMHgxQjAzXSwgWzB4MUIzNCwgMHgxQjM0XSxcbiAgWzB4MUIzNiwgMHgxQjNBXSwgWzB4MUIzQywgMHgxQjNDXSwgWzB4MUI0MiwgMHgxQjQyXSxcbiAgWzB4MUI2QiwgMHgxQjczXSwgWzB4MURDMCwgMHgxRENBXSwgWzB4MURGRSwgMHgxREZGXSxcbiAgWzB4MjAwQiwgMHgyMDBGXSwgWzB4MjAyQSwgMHgyMDJFXSwgWzB4MjA2MCwgMHgyMDYzXSxcbiAgWzB4MjA2QSwgMHgyMDZGXSwgWzB4MjBEMCwgMHgyMEVGXSwgWzB4MzAyQSwgMHgzMDJGXSxcbiAgWzB4MzA5OSwgMHgzMDlBXSwgWzB4QTgwNiwgMHhBODA2XSwgWzB4QTgwQiwgMHhBODBCXSxcbiAgWzB4QTgyNSwgMHhBODI2XSwgWzB4RkIxRSwgMHhGQjFFXSwgWzB4RkUwMCwgMHhGRTBGXSxcbiAgWzB4RkUyMCwgMHhGRTIzXSwgWzB4RkVGRiwgMHhGRUZGXSwgWzB4RkZGOSwgMHhGRkZCXVxuXTtcbmNvbnN0IEhJR0hfQ09NQklOSU5HID0gW1xuICBbMHgxMEEwMSwgMHgxMEEwM10sIFsweDEwQTA1LCAweDEwQTA2XSwgWzB4MTBBMEMsIDB4MTBBMEZdLFxuICBbMHgxMEEzOCwgMHgxMEEzQV0sIFsweDEwQTNGLCAweDEwQTNGXSwgWzB4MUQxNjcsIDB4MUQxNjldLFxuICBbMHgxRDE3MywgMHgxRDE4Ml0sIFsweDFEMTg1LCAweDFEMThCXSwgWzB4MUQxQUEsIDB4MUQxQURdLFxuICBbMHgxRDI0MiwgMHgxRDI0NF0sIFsweEUwMDAxLCAweEUwMDAxXSwgWzB4RTAwMjAsIDB4RTAwN0ZdLFxuICBbMHhFMDEwMCwgMHhFMDFFRl1cbl07XG5cbi8vIEJNUCBsb29rdXAgdGFibGUsIGxhenkgaW5pdGlhbGl6ZWQgZHVyaW5nIGZpcnN0IGFkZG9uIGxvYWRpbmdcbmxldCB0YWJsZTogVWludDhBcnJheTtcblxuZnVuY3Rpb24gYmlzZWFyY2godWNzOiBudW1iZXIsIGRhdGE6IG51bWJlcltdW10pOiBib29sZWFuIHtcbiAgbGV0IG1pbiA9IDA7XG4gIGxldCBtYXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGxldCBtaWQ7XG4gIGlmICh1Y3MgPCBkYXRhWzBdWzBdIHx8IHVjcyA+IGRhdGFbbWF4XVsxXSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB3aGlsZSAobWF4ID49IG1pbikge1xuICAgIG1pZCA9IChtaW4gKyBtYXgpID4+IDE7XG4gICAgaWYgKHVjcyA+IGRhdGFbbWlkXVsxXSkge1xuICAgICAgbWluID0gbWlkICsgMTtcbiAgICB9IGVsc2UgaWYgKHVjcyA8IGRhdGFbbWlkXVswXSkge1xuICAgICAgbWF4ID0gbWlkIC0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGNsYXNzIFVuaWNvZGVWNiBpbXBsZW1lbnRzIElVbmljb2RlVmVyc2lvblByb3ZpZGVyIHtcbiAgcHVibGljIHJlYWRvbmx5IHZlcnNpb24gPSAnNic7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gaW5pdCBsb29rdXAgdGFibGUgb25jZVxuICAgIGlmICghdGFibGUpIHtcbiAgICAgIHRhYmxlID0gbmV3IFVpbnQ4QXJyYXkoNjU1MzYpO1xuICAgICAgZmlsbCh0YWJsZSwgMSk7XG4gICAgICB0YWJsZVswXSA9IDA7XG4gICAgICAvLyBjb250cm9sIGNoYXJzXG4gICAgICBmaWxsKHRhYmxlLCAwLCAxLCAzMik7XG4gICAgICBmaWxsKHRhYmxlLCAwLCAweDdmLCAweGEwKTtcblxuICAgICAgLy8gYXBwbHkgd2lkZSBjaGFyIHJ1bGVzIGZpcnN0XG4gICAgICAvLyB3aWRlIGNoYXJzXG4gICAgICBmaWxsKHRhYmxlLCAyLCAweDExMDAsIDB4MTE2MCk7XG4gICAgICB0YWJsZVsweDIzMjldID0gMjtcbiAgICAgIHRhYmxlWzB4MjMyYV0gPSAyO1xuICAgICAgZmlsbCh0YWJsZSwgMiwgMHgyZTgwLCAweGE0ZDApO1xuICAgICAgdGFibGVbMHgzMDNmXSA9IDE7ICAvLyB3cm9uZ2x5IGluIGxhc3QgbGluZVxuXG4gICAgICBmaWxsKHRhYmxlLCAyLCAweGFjMDAsIDB4ZDdhNCk7XG4gICAgICBmaWxsKHRhYmxlLCAyLCAweGY5MDAsIDB4ZmIwMCk7XG4gICAgICBmaWxsKHRhYmxlLCAyLCAweGZlMTAsIDB4ZmUxYSk7XG4gICAgICBmaWxsKHRhYmxlLCAyLCAweGZlMzAsIDB4ZmU3MCk7XG4gICAgICBmaWxsKHRhYmxlLCAyLCAweGZmMDAsIDB4ZmY2MSk7XG4gICAgICBmaWxsKHRhYmxlLCAyLCAweGZmZTAsIDB4ZmZlNyk7XG5cbiAgICAgIC8vIGFwcGx5IGNvbWJpbmluZyBsYXN0IHRvIGVuc3VyZSB3ZSBvdmVyd3JpdGVcbiAgICAgIC8vIHdyb25nbHkgd2lkZSBzZXQgY2hhcnM6XG4gICAgICAvLyAgICB0aGUgb3JpZ2luYWwgYWxnbyBldmFscyBjb21iaW5pbmcgZmlyc3QgYW5kIGZhbGxzXG4gICAgICAvLyAgICB0aHJvdWdoIHRvIHdpZGUgY2hlY2sgc28gd2Ugc2ltcGx5IGRvIGhlcmUgdGhlIG9wcG9zaXRlXG4gICAgICAvLyBjb21iaW5pbmcgMFxuICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCBCTVBfQ09NQklOSU5HLmxlbmd0aDsgKytyKSB7XG4gICAgICAgIGZpbGwodGFibGUsIDAsIEJNUF9DT01CSU5JTkdbcl1bMF0sIEJNUF9DT01CSU5JTkdbcl1bMV0gKyAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgd2N3aWR0aChudW06IG51bWJlcik6IENoYXJXaWR0aCB7XG4gICAgaWYgKG51bSA8IDMyKSByZXR1cm4gMDtcbiAgICBpZiAobnVtIDwgMTI3KSByZXR1cm4gMTtcbiAgICBpZiAobnVtIDwgNjU1MzYpIHJldHVybiB0YWJsZVtudW1dIGFzIENoYXJXaWR0aDtcbiAgICBpZiAoYmlzZWFyY2gobnVtLCBISUdIX0NPTUJJTklORykpIHJldHVybiAwO1xuICAgIGlmICgobnVtID49IDB4MjAwMDAgJiYgbnVtIDw9IDB4MmZmZmQpIHx8IChudW0gPj0gMHgzMDAwMCAmJiBudW0gPD0gMHgzZmZmZCkpIHJldHVybiAyO1xuICAgIHJldHVybiAxO1xuICB9XG59XG4iLCJcbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuZGVjbGFyZSBjb25zdCBzZXRUaW1lb3V0OiAoaGFuZGxlcjogKCkgPT4gdm9pZCwgdGltZW91dD86IG51bWJlcikgPT4gdm9pZDtcblxuLyoqXG4gKiBTYWZldHkgd2F0ZXJtYXJrIHRvIGF2b2lkIG1lbW9yeSBleGhhdXN0aW9uIGFuZCBicm93c2VyIGVuZ2luZSBjcmFzaCBvbiBmYXN0IGRhdGEgaW5wdXQuXG4gKiBFbmFibGUgZmxvdyBjb250cm9sIHRvIGF2b2lkIHRoaXMgbGltaXQgYW5kIG1ha2Ugc3VyZSB0aGF0IHlvdXIgYmFja2VuZCBjb3JyZWN0bHlcbiAqIHByb3BhZ2F0ZXMgdGhpcyB0byB0aGUgdW5kZXJseWluZyBwdHkuIChzZWUgZG9jcyBmb3IgZnVydGhlciBpbnN0cnVjdGlvbnMpXG4gKiBTaW5jZSB0aGlzIGxpbWl0IGlzIG1lYW50IGFzIGEgc2FmZXR5IHBhcmFjaHV0ZSB0byBwcmV2ZW50IGJyb3dzZXIgY3Jhc2hzLFxuICogaXQgaXMgc2V0IHRvIGEgdmVyeSBoaWdoIG51bWJlci4gVHlwaWNhbGx5IHh0ZXJtLmpzIGdldHMgdW5yZXNwb25zaXZlIHdpdGhcbiAqIGEgMTAwIHRpbWVzIGxvd2VyIG51bWJlciAoPjUwMCBrQikuXG4gKi9cbmNvbnN0IERJU0NBUkRfV0FURVJNQVJLID0gNTAwMDAwMDA7IC8vIH41MCBNQlxuXG4vKipcbiAqIFRoZSBtYXggbnVtYmVyIG9mIG1zIHRvIHNwZW5kIG9uIHdyaXRlcyBiZWZvcmUgYWxsb3dpbmcgdGhlIHJlbmRlcmVyIHRvXG4gKiBjYXRjaCB1cCB3aXRoIGEgMG1zIHNldFRpbWVvdXQuIEEgdmFsdWUgb2YgPCAzMyB0byBrZWVwIHVzIGNsb3NlIHRvXG4gKiAzMGZwcywgYW5kIGEgdmFsdWUgb2YgPCAxNiB0byB0cnkgdG8gcnVuIGF0IDYwZnBzLiBPZiBjb3Vyc2UsIHRoZSByZWFsIEZQU1xuICogZGVwZW5kcyBvbiB0aGUgdGltZSBpdCB0YWtlcyBmb3IgdGhlIHJlbmRlcmVyIHRvIGRyYXcgdGhlIGZyYW1lLlxuICovXG5jb25zdCBXUklURV9USU1FT1VUX01TID0gMTI7XG5cbi8qKlxuICogVGhyZXNob2xkIG9mIG1heCBoZWxkIGNodW5rcyBpbiB0aGUgd3JpdGUgYnVmZmVyLCB0aGF0IHdlcmUgYWxyZWFkeSBwcm9jZXNzZWQuXG4gKiBUaGlzIGlzIGEgdHJhZGVvZmYgYmV0d2VlbiBleHRlbnNpdmUgd3JpdGUgYnVmZmVyIHNoaWZ0cyAoYmFkIHJ1bnRpbWUpIGFuZCBoaWdoXG4gKiBtZW1vcnkgY29uc3VtcHRpb24gYnkgZGF0YSB0aGF0cyBub3QgdXNlZCBhbnltb3JlLlxuICovXG5jb25zdCBXUklURV9CVUZGRVJfTEVOR1RIX1RIUkVTSE9MRCA9IDUwO1xuXG4vLyBxdWV1ZU1pY3JvdGFzayBwb2x5ZmlsbCBmb3Igbm9kZWpzIDwgdjExXG5jb25zdCBxbXQ6IChjYjogKCkgPT4gdm9pZCkgPT4gdm9pZCA9ICh0eXBlb2YgcXVldWVNaWNyb3Rhc2sgPT09ICd1bmRlZmluZWQnKVxuICA/IChjYjogKCkgPT4gdm9pZCkgPT4geyBQcm9taXNlLnJlc29sdmUoKS50aGVuKGNiKTsgfVxuICA6IHF1ZXVlTWljcm90YXNrO1xuXG5cbmV4cG9ydCBjbGFzcyBXcml0ZUJ1ZmZlciB7XG4gIHByaXZhdGUgX3dyaXRlQnVmZmVyOiAoc3RyaW5nIHwgVWludDhBcnJheSlbXSA9IFtdO1xuICBwcml2YXRlIF9jYWxsYmFja3M6ICgoKCkgPT4gdm9pZCkgfCB1bmRlZmluZWQpW10gPSBbXTtcbiAgcHJpdmF0ZSBfcGVuZGluZ0RhdGEgPSAwO1xuICBwcml2YXRlIF9idWZmZXJPZmZzZXQgPSAwO1xuICBwcml2YXRlIF9pc1N5bmNXcml0aW5nID0gZmFsc2U7XG4gIHByaXZhdGUgX3N5bmNDYWxscyA9IDA7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfYWN0aW9uOiAoZGF0YTogc3RyaW5nIHwgVWludDhBcnJheSwgcHJvbWlzZVJlc3VsdD86IGJvb2xlYW4pID0+IHZvaWQgfCBQcm9taXNlPGJvb2xlYW4+KSB7IH1cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgVW5yZWxpYWJsZSwgdG8gYmUgcmVtb3ZlZCBzb29uLlxuICAgKi9cbiAgcHVibGljIHdyaXRlU3luYyhkYXRhOiBzdHJpbmcgfCBVaW50OEFycmF5LCBtYXhTdWJzZXF1ZW50Q2FsbHM/OiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyBzdG9wIHdyaXRlU3luYyByZWN1cnNpb25zIHdpdGggbWF4U3Vic2VxdWVudENhbGxzIGFyZ3VtZW50XG4gICAgLy8gVGhpcyBpcyBkYW5nZXJvdXMgdG8gdXNlIGFzIGl0IHdpbGwgbG9zZSB0aGUgY3VycmVudCBkYXRhIGNodW5rXG4gICAgLy8gYW5kIHJldHVybiBpbW1lZGlhdGVseS5cbiAgICBpZiAobWF4U3Vic2VxdWVudENhbGxzICE9PSB1bmRlZmluZWQgJiYgdGhpcy5fc3luY0NhbGxzID4gbWF4U3Vic2VxdWVudENhbGxzKSB7XG4gICAgICAvLyBjb21tZW50IG5leHQgbGluZSBpZiBhIHdob2xlIGxvb3AgYmxvY2sgc2hvdWxkIG9ubHkgY29udGFpbiB4IGB3cml0ZVN5bmNgIGNhbGxzXG4gICAgICAvLyAodG90YWwgZmxhdCB2cy4gZGVlcCBuZXN0ZWQgbGltaXQpXG4gICAgICB0aGlzLl9zeW5jQ2FsbHMgPSAwO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBhcHBlbmQgY2h1bmsgdG8gYnVmZmVyXG4gICAgdGhpcy5fcGVuZGluZ0RhdGEgKz0gZGF0YS5sZW5ndGg7XG4gICAgdGhpcy5fd3JpdGVCdWZmZXIucHVzaChkYXRhKTtcbiAgICB0aGlzLl9jYWxsYmFja3MucHVzaCh1bmRlZmluZWQpO1xuXG4gICAgLy8gaW5jcmVhc2UgcmVjdXJzaW9uIGNvdW50ZXJcbiAgICB0aGlzLl9zeW5jQ2FsbHMrKztcbiAgICAvLyBleGl0IGVhcmx5IGlmIGFub3RoZXIgd3JpdGVTeW5jIGxvb3AgaXMgYWN0aXZlXG4gICAgaWYgKHRoaXMuX2lzU3luY1dyaXRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5faXNTeW5jV3JpdGluZyA9IHRydWU7XG5cbiAgICAvLyBmb3JjZSBzeW5jIHByb2Nlc3Npbmcgb24gcGVuZGluZyBkYXRhIGNodW5rcyB0byBhdm9pZCBpbi1iYW5kIGRhdGEgc2NyYW1ibGluZ1xuICAgIC8vIGRvZXMgdGhlIHNhbWUgYXMgaW5uZXJXcml0ZSBidXQgd2l0aG91dCBldmVudCBsb29wXG4gICAgLy8gd2UgaGF2ZSB0byBkbyBpdCBoZXJlIGFzIHNpbmdsZSBsb29wIHN0ZXBzIHRvIG5vdCBjb3JydXB0IGxvb3Agc3ViamVjdFxuICAgIC8vIGJ5IGFub3RoZXIgd3JpdGVTeW5jIGNhbGwgdHJpZ2dlcmVkIGZyb20gX2FjdGlvblxuICAgIGxldCBjaHVuazogc3RyaW5nIHwgVWludDhBcnJheSB8IHVuZGVmaW5lZDtcbiAgICB3aGlsZSAoY2h1bmsgPSB0aGlzLl93cml0ZUJ1ZmZlci5zaGlmdCgpKSB7XG4gICAgICB0aGlzLl9hY3Rpb24oY2h1bmspO1xuICAgICAgY29uc3QgY2IgPSB0aGlzLl9jYWxsYmFja3Muc2hpZnQoKTtcbiAgICAgIGlmIChjYikgY2IoKTtcbiAgICB9XG4gICAgLy8gcmVzZXQgdG8gYXZvaWQgcmVwcm9jZXNzaW5nIG9mIGNodW5rcyB3aXRoIHNjaGVkdWxlZCBpbm5lcldyaXRlIGNhbGxcbiAgICAvLyBzdG9wcGluZyBzY2hlZHVsZWQgaW5uZXJXcml0ZSBieSBvZmZzZXQgPiBsZW5ndGggY29uZGl0aW9uXG4gICAgdGhpcy5fcGVuZGluZ0RhdGEgPSAwO1xuICAgIHRoaXMuX2J1ZmZlck9mZnNldCA9IDB4N0ZGRkZGRkY7XG5cbiAgICAvLyBhbGxvdyBhbm90aGVyIHdyaXRlU3luYyB0byBsb29wXG4gICAgdGhpcy5faXNTeW5jV3JpdGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3N5bmNDYWxscyA9IDA7XG4gIH1cblxuICBwdWJsaWMgd3JpdGUoZGF0YTogc3RyaW5nIHwgVWludDhBcnJheSwgY2FsbGJhY2s/OiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX3BlbmRpbmdEYXRhID4gRElTQ0FSRF9XQVRFUk1BUkspIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignd3JpdGUgZGF0YSBkaXNjYXJkZWQsIHVzZSBmbG93IGNvbnRyb2wgdG8gYXZvaWQgbG9zaW5nIGRhdGEnKTtcbiAgICB9XG5cbiAgICAvLyBzY2hlZHVsZSBjaHVuayBwcm9jZXNzaW5nIGZvciBuZXh0IGV2ZW50IGxvb3AgcnVuXG4gICAgaWYgKCF0aGlzLl93cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2J1ZmZlck9mZnNldCA9IDA7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuX2lubmVyV3JpdGUoKSk7XG4gICAgfVxuXG4gICAgdGhpcy5fcGVuZGluZ0RhdGEgKz0gZGF0YS5sZW5ndGg7XG4gICAgdGhpcy5fd3JpdGVCdWZmZXIucHVzaChkYXRhKTtcbiAgICB0aGlzLl9jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogSW5uZXIgd3JpdGUgY2FsbCwgdGhhdCBlbnRlcnMgdGhlIHNsaWNlZCBjaHVuayBwcm9jZXNzaW5nIGJ5IHRpbWluZy5cbiAgICpcbiAgICogYGxhc3RUaW1lYCBpbmRpY2F0ZXMsIHdoZW4gdGhlIGxhc3QgX2lubmVyV3JpdGUgY2FsbCBoYWQgc3RhcnRlZC5cbiAgICogSXQgaXMgdXNlZCB0byBhZ2dyZWdhdGUgYXN5bmMgaGFuZGxlciBleGVjdXRpb24gdW5kZXIgYSB0aW1lb3V0IGNvbnN0cmFpbnRcbiAgICogZWZmZWN0aXZlbHkgbG93ZXJpbmcgdGhlIHJlZHJhd2luZyBuZWVkcywgc2NoZW1hdGljYWxseTpcbiAgICpcbiAgICogICBtYWNyb1Rhc2sgX2lubmVyV3JpdGU6XG4gICAqICAgICBpZiAoRGF0ZS5ub3coKSAtIChsYXN0VGltZSB8IDApIDwgV1JJVEVfVElNRU9VVF9NUyk6XG4gICAqICAgICAgICBzY2hlZHVsZSBtaWNyb1Rhc2sgX2lubmVyV3JpdGUobGFzdFRpbWUpXG4gICAqICAgICBlbHNlOlxuICAgKiAgICAgICAgc2NoZWR1bGUgbWFjcm9UYXNrIF9pbm5lcldyaXRlKDApXG4gICAqXG4gICAqICAgb3ZlcmFsbCBleGVjdXRpb24gb3JkZXIgb24gdGFzayBxdWV1ZXM6XG4gICAqXG4gICAqICAgbWFjcm90YXNrczogIFsuLi5dICAtLT4gIF9pbm5lcldyaXRlKDApICAtLT4gIFsuLi5dICAtLT4gIHNjcmVlblVwZGF0ZSAgLS0+ICBbLi4uXVxuICAgKiAgICAgICAgIG0gIHQ6ICAgICAgICAgICAgICAgICAgICB8XG4gICAqICAgICAgICAgaSAgYTogICAgICAgICAgICAgICAgICBbLi4uXVxuICAgKiAgICAgICAgIGMgIHM6ICAgICAgICAgICAgICAgICAgICB8XG4gICAqICAgICAgICAgciAgazogICAgICAgICAgICAgIHdoaWxlIDwgdGltZW91dDpcbiAgICogICAgICAgICBvICBzOiAgICAgICAgICAgICAgICBfaW5uZXJXcml0ZSh0aW1lb3V0KVxuICAgKlxuICAgKiBgcHJvbWlzZVJlc3VsdGAgZGVwaWN0cyB0aGUgcHJvbWlzZSByZXNvbHZlIHZhbHVlIG9mIGFuIGFzeW5jIGhhbmRsZXIuXG4gICAqIFRoaXMgdmFsdWUgZ2V0cyBjYXJyaWVkIGZvcndhcmQgdGhyb3VnaCBhbGwgc2F2ZWQgc3RhY2sgc3RhdGVzIG9mIHRoZVxuICAgKiBwYXVzZWQgcGFyc2VyIGZvciBwcm9wZXIgY29udGludWF0aW9uLlxuICAgKlxuICAgKiBOb3RlLCBmb3IgcHVyZSBzeW5jIGNvZGUgYGxhc3RUaW1lYCBhbmQgYHByb21pc2VSZXN1bHRgIGhhdmUgbm8gbWVhbmluZy5cbiAgICovXG4gIHByb3RlY3RlZCBfaW5uZXJXcml0ZShsYXN0VGltZTogbnVtYmVyID0gMCwgcHJvbWlzZVJlc3VsdDogYm9vbGVhbiA9IHRydWUpOiB2b2lkIHtcbiAgICBjb25zdCBzdGFydFRpbWUgPSBsYXN0VGltZSB8fCBEYXRlLm5vdygpO1xuICAgIHdoaWxlICh0aGlzLl93cml0ZUJ1ZmZlci5sZW5ndGggPiB0aGlzLl9idWZmZXJPZmZzZXQpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLl93cml0ZUJ1ZmZlclt0aGlzLl9idWZmZXJPZmZzZXRdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fYWN0aW9uKGRhdGEsIHByb21pc2VSZXN1bHQpO1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgd2UgZ2V0IGEgcHJvbWlzZSBhcyByZXR1cm4gdmFsdWUsIHdlIHJlLXNjaGVkdWxlIHRoZSBjb250aW51YXRpb25cbiAgICAgICAgICogYXMgdGhlbmFibGUgb24gdGhlIHByb21pc2UgYW5kIGV4aXQgcmlnaHQgYXdheS5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhlIGV4aXQgaGVyZSBtZWFucywgdGhhdCB3ZSBibG9jayBpbnB1dCBwcm9jZXNzaW5nIGF0IHRoZSBjdXJyZW50IGFjdGl2ZSBjaHVuayxcbiAgICAgICAgICogdGhlIGV4YWN0IGV4ZWN1dGlvbiBwb3NpdGlvbiB3aXRoaW4gdGhlIGNodW5rIGlzIHByZXNlcnZlZCBieSB0aGUgc2F2ZWRcbiAgICAgICAgICogc3RhY2sgY29udGVudCBpbiBJbnB1dEhhbmRsZXIgYW5kIEVzY2FwZVNlcXVlbmNlUGFyc2VyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBSZXN1bWluZyBoYXBwZW5zIGF1dG9tYXRpY2FsbHkgZnJvbSB0aGF0IHNhdmVkIHN0YWNrIHN0YXRlLlxuICAgICAgICAgKiBBbHNvIHRoZSByZXNvbHZlZCBwcm9taXNlIHZhbHVlIGlzIHBhc3NlZCBhbG9uZyB0aGUgY2FsbHN0YWNrIHRvXG4gICAgICAgICAqIGBFc2NhcGVTZXF1ZW5jZVBhcnNlci5wYXJzZWAgdG8gY29ycmVjdGx5IHJlc3VtZSB0aGUgc3RvcHBlZCBoYW5kbGVyIGxvb3AuXG4gICAgICAgICAqXG4gICAgICAgICAqIEV4Y2VwdGlvbnMgb24gYXN5bmMgaGFuZGxlcnMgd2lsbCBiZSBsb2dnZWQgdG8gY29uc29sZSBhc3luYywgYnV0IGRvIG5vdCBpbnRlcnJ1cHRcbiAgICAgICAgICogdGhlIGlucHV0IHByb2Nlc3NpbmcgKGNvbnRpbnVlcyB3aXRoIG5leHQgaGFuZGxlciBhdCB0aGUgY3VycmVudCBpbnB1dCBwb3NpdGlvbikuXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBhIHByb21pc2UgdGFrZXMgbG9uZyB0byByZXNvbHZlLCB3ZSBzaG91bGQgc2NoZWR1bGUgY29udGludWF0aW9uIGJlaGluZCBzZXRUaW1lb3V0LlxuICAgICAgICAgKiBUaGlzIG1pZ2h0IGFscmVhZHkgYmUgdG9vIGxhdGUsIGlmIG91ciAudGhlbiBlbnRlcnMgcmVhbGx5IGxhdGUgKGV4ZWN1dG9yICsgcHJldiB0aGVucyB0b29rIHZlcnkgbG9uZykuXG4gICAgICAgICAqIFRoaXMgY2Fubm90IGJlIHNvbHZlZCBoZXJlIGZvciB0aGUgaGFuZGxlciBpdHNlbGYgKGl0IGlzIHRoZSBoYW5kbGVycyByZXNwb25zaWJpbGl0eSB0byBzbGljZSBoYXJkIHdvcmspLFxuICAgICAgICAgKiBidXQgd2UgY2FuIGF0IGxlYXN0IHNjaGVkdWxlIGEgc2NyZWVuIHVwZGF0ZSBhcyB3ZSBnYWluIGNvbnRyb2wuXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBjb250aW51YXRpb246IChyOiBib29sZWFuKSA9PiB2b2lkID0gKHI6IGJvb2xlYW4pID0+IERhdGUubm93KCkgLSBzdGFydFRpbWUgPj0gV1JJVEVfVElNRU9VVF9NU1xuICAgICAgICAgID8gc2V0VGltZW91dCgoKSA9PiB0aGlzLl9pbm5lcldyaXRlKDAsIHIpKVxuICAgICAgICAgIDogdGhpcy5faW5uZXJXcml0ZShzdGFydFRpbWUsIHIpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPcHRpbWl6YXRpb24gY29uc2lkZXJhdGlvbnM6XG4gICAgICAgICAqIFRoZSBjb250aW51YXRpb24gYWJvdmUgZmF2b3JzIEZQUyBvdmVyIHRocm91Z2hwdXQgYnkgZXZhbCdpbmcgYHN0YXJ0VGltZWAgb24gcmVzb2x2ZS5cbiAgICAgICAgICogVGhpcyBtaWdodCBzY2hlZHVsZSB0b28gbWFueSBzY3JlZW4gdXBkYXRlcyB3aXRoIGJhZCB0aHJvdWdocHV0IGRyb3BzIChpbiBjYXNlIGEgc2xvd1xuICAgICAgICAgKiByZXNvbHZpbmcgaGFuZGxlciBzbGljZWQgaXRzIHdvcmsgcHJvcGVybHkgYmVoaW5kIHNldFRpbWVvdXQgY2FsbHMpLiBXZSBjYW5ub3Qgc3BvdFxuICAgICAgICAgKiB0aGlzIGNvbmRpdGlvbiBoZXJlLCBhbHNvIHRoZSByZW5kZXJlciBoYXMgbm8gd2F5IHRvIHNwb3Qgbm9uc2Vuc2UgdXBkYXRlcyBlaXRoZXIuXG4gICAgICAgICAqIEZJWE1FOiBBIHByb3BlciBmaXggZm9yIHRoaXMgd291bGQgdHJhY2sgdGhlIEZQUyBhdCB0aGUgcmVuZGVyZXIgZW50cnkgbGV2ZWwgc2VwYXJhdGVseS5cbiAgICAgICAgICpcbiAgICAgICAgICogSWYgZmF2b3Jpbmcgb2YgRlBTIHNob3dzIGJhZCB0aHJvdWdodHB1dCBpbXBhY3QsIHVzZSB0aGUgZm9sbG93aW5nIGluc3RlYWQuIEl0IGZhdm9yc1xuICAgICAgICAgKiB0aHJvdWdocHV0IGJ5IGV2YWwnaW5nIGBzdGFydFRpbWVgIHVwZnJvbnQgcHVsbGluZyBhdCBsZWFzdCBvbmUgbW9yZSBjaHVuayBpbnRvIHRoZVxuICAgICAgICAgKiBjdXJyZW50IG1pY3JvdGFzayBxdWV1ZSAoZXhlY3V0ZWQgYmVmb3JlIHNldFRpbWVvdXQpLlxuICAgICAgICAgKi9cbiAgICAgICAgLy8gY29uc3QgY29udGludWF0aW9uOiAocjogYm9vbGVhbikgPT4gdm9pZCA9IERhdGUubm93KCkgLSBzdGFydFRpbWUgPj0gV1JJVEVfVElNRU9VVF9NU1xuICAgICAgICAvLyAgID8gciA9PiBzZXRUaW1lb3V0KCgpID0+IHRoaXMuX2lubmVyV3JpdGUoMCwgcikpXG4gICAgICAgIC8vICAgOiByID0+IHRoaXMuX2lubmVyV3JpdGUoc3RhcnRUaW1lLCByKTtcblxuICAgICAgICAvLyBIYW5kbGUgZXhjZXB0aW9ucyBzeW5jaHJvbm91c2x5IHRvIGN1cnJlbnQgYmFuZCBwb3NpdGlvbiwgaWRlYTpcbiAgICAgICAgLy8gMS4gc3Bhd24gYSBzaW5nbGUgbWljcm90YXNrIHdoaWNoIHdlIGFsbG93IHRvIHRocm93IGhhcmRcbiAgICAgICAgLy8gMi4gc3Bhd24gYSBwcm9taXNlIGltbWVkaWF0ZWx5IHJlc29sdmluZyB0byBgdHJ1ZWBcbiAgICAgICAgLy8gKGV4ZWN1dGVkIG9uIHRoZSBzYW1lIHF1ZXVlLCB0aHVzIHByb3Blcmx5IGFsaWduZWQgYmVmb3JlIGNvbnRpbnVhdGlvbiBoYXBwZW5zKVxuICAgICAgICByZXN1bHQuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICBxbXQoKCkgPT4ge3Rocm93IGVycjt9KTtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgfSkudGhlbihjb250aW51YXRpb24pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNiID0gdGhpcy5fY2FsbGJhY2tzW3RoaXMuX2J1ZmZlck9mZnNldF07XG4gICAgICBpZiAoY2IpIGNiKCk7XG4gICAgICB0aGlzLl9idWZmZXJPZmZzZXQrKztcbiAgICAgIHRoaXMuX3BlbmRpbmdEYXRhIC09IGRhdGEubGVuZ3RoO1xuXG4gICAgICBpZiAoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSA+PSBXUklURV9USU1FT1VUX01TKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5fd3JpdGVCdWZmZXIubGVuZ3RoID4gdGhpcy5fYnVmZmVyT2Zmc2V0KSB7XG4gICAgICAvLyBBbGxvdyByZW5kZXJlciB0byBjYXRjaCB1cCBiZWZvcmUgcHJvY2Vzc2luZyB0aGUgbmV4dCBiYXRjaFxuICAgICAgLy8gdHJpbSBhbHJlYWR5IHByb2Nlc3NlZCBjaHVua3MgaWYgd2UgYXJlIGFib3ZlIHRocmVzaG9sZFxuICAgICAgaWYgKHRoaXMuX2J1ZmZlck9mZnNldCA+IFdSSVRFX0JVRkZFUl9MRU5HVEhfVEhSRVNIT0xEKSB7XG4gICAgICAgIHRoaXMuX3dyaXRlQnVmZmVyID0gdGhpcy5fd3JpdGVCdWZmZXIuc2xpY2UodGhpcy5fYnVmZmVyT2Zmc2V0KTtcbiAgICAgICAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzLnNsaWNlKHRoaXMuX2J1ZmZlck9mZnNldCk7XG4gICAgICAgIHRoaXMuX2J1ZmZlck9mZnNldCA9IDA7XG4gICAgICB9XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuX2lubmVyV3JpdGUoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3dyaXRlQnVmZmVyLmxlbmd0aCA9IDA7XG4gICAgICB0aGlzLl9jYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgICAgIHRoaXMuX3BlbmRpbmdEYXRhID0gMDtcbiAgICAgIHRoaXMuX2J1ZmZlck9mZnNldCA9IDA7XG4gICAgfVxuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAyMSBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cblxuLy8gJ3JnYjonIHJ1bGUgLSBtYXRjaGluZzogci9nL2IgfCByci9nZy9iYiB8IHJyci9nZ2cvYmJiIHwgcnJyci9nZ2dnL2JiYmIgKGhleCBkaWdpdHMpXG5jb25zdCBSR0JfUkVYID0gL14oW1xcZGEtZl17MX0pXFwvKFtcXGRhLWZdezF9KVxcLyhbXFxkYS1mXXsxfSkkfF4oW1xcZGEtZl17Mn0pXFwvKFtcXGRhLWZdezJ9KVxcLyhbXFxkYS1mXXsyfSkkfF4oW1xcZGEtZl17M30pXFwvKFtcXGRhLWZdezN9KVxcLyhbXFxkYS1mXXszfSkkfF4oW1xcZGEtZl17NH0pXFwvKFtcXGRhLWZdezR9KVxcLyhbXFxkYS1mXXs0fSkkLztcbi8vICcjLi4uJyBydWxlIC0gbWF0Y2hpbmcgYW55IGhleCBkaWdpdHNcbmNvbnN0IEhBU0hfUkVYID0gL15bXFxkYS1mXSskLztcblxuLyoqXG4gKiBQYXJzZSBjb2xvciBzcGVjIHRvIFJHQiB2YWx1ZXMgKDggYml0IHBlciBjaGFubmVsKS5cbiAqIFNlZSBgbWFuIHhwYXJzZWNvbG9yYCBmb3IgZGV0YWlscyBhYm91dCBjZXJ0YWluIGZvcm1hdCBzcGVjaWZpY2F0aW9ucy5cbiAqXG4gKiBTdXBwb3J0ZWQgZm9ybWF0czpcbiAqIC0gcmdiOjxyZWQ+LzxncmVlbj4vPGJsdWU+IHdpdGggPHJlZD4sIDxncmVlbj4sIDxibHVlPiBpbiBoIHwgaGggfCBoaGggfCBoaGhoXG4gKiAtICNSR0IsICNSUkdHQkIsICNSUlJHR0dCQkIsICNSUlJSR0dHR0JCQkJcbiAqXG4gKiBBbGwgb3RoZXIgZm9ybWF0cyBsaWtlIHJnYmk6IG9yIGRldmljZS1pbmRlcGVuZGVudCBzdHJpbmcgc3BlY2lmaWNhdGlvbnNcbiAqIHdpdGggZmxvYXQgbnVtYmVyaW5nIGFyZSBub3Qgc3VwcG9ydGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDb2xvcihkYXRhOiBzdHJpbmcpOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0gfCB1bmRlZmluZWQge1xuICBpZiAoIWRhdGEpIHJldHVybjtcbiAgLy8gYWxzbyBoYW5kbGUgdXBwZXJjYXNlc1xuICBsZXQgbG93ID0gZGF0YS50b0xvd2VyQ2FzZSgpO1xuICBpZiAobG93LmluZGV4T2YoJ3JnYjonKSA9PT0gMCkge1xuICAgIC8vICdyZ2I6JyBzcGVjaWZpZXJcbiAgICBsb3cgPSBsb3cuc2xpY2UoNCk7XG4gICAgY29uc3QgbSA9IFJHQl9SRVguZXhlYyhsb3cpO1xuICAgIGlmIChtKSB7XG4gICAgICBjb25zdCBiYXNlID0gbVsxXSA/IDE1IDogbVs0XSA/IDI1NSA6IG1bN10gPyA0MDk1IDogNjU1MzU7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBNYXRoLnJvdW5kKHBhcnNlSW50KG1bMV0gfHwgbVs0XSB8fCBtWzddIHx8IG1bMTBdLCAxNikgLyBiYXNlICogMjU1KSxcbiAgICAgICAgTWF0aC5yb3VuZChwYXJzZUludChtWzJdIHx8IG1bNV0gfHwgbVs4XSB8fCBtWzExXSwgMTYpIC8gYmFzZSAqIDI1NSksXG4gICAgICAgIE1hdGgucm91bmQocGFyc2VJbnQobVszXSB8fCBtWzZdIHx8IG1bOV0gfHwgbVsxMl0sIDE2KSAvIGJhc2UgKiAyNTUpXG4gICAgICBdO1xuICAgIH1cbiAgfSBlbHNlIGlmIChsb3cuaW5kZXhPZignIycpID09PSAwKSB7XG4gICAgLy8gJyMnIHNwZWNpZmllclxuICAgIGxvdyA9IGxvdy5zbGljZSgxKTtcbiAgICBpZiAoSEFTSF9SRVguZXhlYyhsb3cpICYmIFszLCA2LCA5LCAxMl0uaW5jbHVkZXMobG93Lmxlbmd0aCkpIHtcbiAgICAgIGNvbnN0IGFkdiA9IGxvdy5sZW5ndGggLyAzO1xuICAgICAgY29uc3QgcmVzdWx0OiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0gPSBbMCwgMCwgMF07XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7ICsraSkge1xuICAgICAgICBjb25zdCBjID0gcGFyc2VJbnQobG93LnNsaWNlKGFkdiAqIGksIGFkdiAqIGkgKyBhZHYpLCAxNik7XG4gICAgICAgIHJlc3VsdFtpXSA9IGFkdiA9PT0gMSA/IGMgPDwgNCA6IGFkdiA9PT0gMiA/IGMgOiBhZHYgPT09IDMgPyBjID4+IDQgOiBjID4+IDg7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxuXG4gIC8vIE5hbWVkIGNvbG9ycyBhcmUgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQgZHVlIHRvIHRoZSBsYXJnZSBhZGRpdGlvbiB0byB0aGUgeHRlcm0uanMgYnVuZGxlIHNpemVcbiAgLy8gdGhleSB3b3VsZCBhZGQuIEluIG9yZGVyIHRvIHN1cHBvcnQgbmFtZWQgY29sb3JzLCB3ZSB3b3VsZCBuZWVkIHNvbWUgd2F5IG9mIG9wdGlvbmFsbHkgbG9hZGluZ1xuICAvLyBhZGRpdGlvbmFsIHBheWxvYWRzIHNvIHN0YXJ0dXAvZG93bmxvYWQgdGltZSBpcyBub3QgYmxvYXRlZCAoc2VlICMzNTMwKS5cbn1cblxuLy8gcGFkIGhleCBvdXRwdXQgdG8gcmVxdWVzdGVkIGJpdCB3aWR0aFxuZnVuY3Rpb24gcGFkKG46IG51bWJlciwgYml0czogbnVtYmVyKTogc3RyaW5nIHtcbiAgY29uc3QgcyA9IG4udG9TdHJpbmcoMTYpO1xuICBjb25zdCBzMiA9IHMubGVuZ3RoIDwgMiA/ICcwJyArIHMgOiBzO1xuICBzd2l0Y2ggKGJpdHMpIHtcbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gc1swXTtcbiAgICBjYXNlIDg6XG4gICAgICByZXR1cm4gczI7XG4gICAgY2FzZSAxMjpcbiAgICAgIHJldHVybiAoczIgKyBzMikuc2xpY2UoMCwgMyk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzMiArIHMyO1xuICB9XG59XG5cbi8qKlxuICogQ29udmVydCBhIGdpdmVuIGNvbG9yIHRvIHJnYjouLi8uLi8uLiBzdHJpbmcgb2YgYGJpdHNgIGRlcHRoLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9SZ2JTdHJpbmcoY29sb3I6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSwgYml0czogbnVtYmVyID0gMTYpOiBzdHJpbmcge1xuICBjb25zdCBbciwgZywgYl0gPSBjb2xvcjtcbiAgcmV0dXJuIGByZ2I6JHtwYWQociwgYml0cyl9LyR7cGFkKGcsIGJpdHMpfS8ke3BhZChiLCBiaXRzKX1gO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG4vKipcbiAqIEludGVybmFsIHN0YXRlcyBvZiBFc2NhcGVTZXF1ZW5jZVBhcnNlci5cbiAqL1xuZXhwb3J0IGNvbnN0IGVudW0gUGFyc2VyU3RhdGUge1xuICBHUk9VTkQgPSAwLFxuICBFU0NBUEUgPSAxLFxuICBFU0NBUEVfSU5URVJNRURJQVRFID0gMixcbiAgQ1NJX0VOVFJZID0gMyxcbiAgQ1NJX1BBUkFNID0gNCxcbiAgQ1NJX0lOVEVSTUVESUFURSA9IDUsXG4gIENTSV9JR05PUkUgPSA2LFxuICBTT1NfUE1fQVBDX1NUUklORyA9IDcsXG4gIE9TQ19TVFJJTkcgPSA4LFxuICBEQ1NfRU5UUlkgPSA5LFxuICBEQ1NfUEFSQU0gPSAxMCxcbiAgRENTX0lHTk9SRSA9IDExLFxuICBEQ1NfSU5URVJNRURJQVRFID0gMTIsXG4gIERDU19QQVNTVEhST1VHSCA9IDEzXG59XG5cbi8qKlxuKiBJbnRlcm5hbCBhY3Rpb25zIG9mIEVzY2FwZVNlcXVlbmNlUGFyc2VyLlxuKi9cbmV4cG9ydCBjb25zdCBlbnVtIFBhcnNlckFjdGlvbiB7XG4gIElHTk9SRSA9IDAsXG4gIEVSUk9SID0gMSxcbiAgUFJJTlQgPSAyLFxuICBFWEVDVVRFID0gMyxcbiAgT1NDX1NUQVJUID0gNCxcbiAgT1NDX1BVVCA9IDUsXG4gIE9TQ19FTkQgPSA2LFxuICBDU0lfRElTUEFUQ0ggPSA3LFxuICBQQVJBTSA9IDgsXG4gIENPTExFQ1QgPSA5LFxuICBFU0NfRElTUEFUQ0ggPSAxMCxcbiAgQ0xFQVIgPSAxMSxcbiAgRENTX0hPT0sgPSAxMixcbiAgRENTX1BVVCA9IDEzLFxuICBEQ1NfVU5IT09LID0gMTRcbn1cblxuLyoqXG4gKiBJbnRlcm5hbCBzdGF0ZXMgb2YgT3NjUGFyc2VyLlxuICovXG5leHBvcnQgY29uc3QgZW51bSBPc2NTdGF0ZSB7XG4gIFNUQVJUID0gMCxcbiAgSUQgPSAxLFxuICBQQVlMT0FEID0gMixcbiAgQUJPUlQgPSAzXG59XG5cbi8vIHBheWxvYWQgbGltaXQgZm9yIE9TQyBhbmQgRENTXG5leHBvcnQgY29uc3QgUEFZTE9BRF9MSU1JVCA9IDEwMDAwMDAwO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJRGlzcG9zYWJsZSB9IGZyb20gJ2NvbW1vbi9UeXBlcyc7XG5pbXBvcnQgeyBJRGNzSGFuZGxlciwgSVBhcmFtcywgSUhhbmRsZXJDb2xsZWN0aW9uLCBJRGNzUGFyc2VyLCBEY3NGYWxsYmFja0hhbmRsZXJUeXBlLCBJU3ViUGFyc2VyU3RhY2tTdGF0ZSB9IGZyb20gJ2NvbW1vbi9wYXJzZXIvVHlwZXMnO1xuaW1wb3J0IHsgdXRmMzJUb1N0cmluZyB9IGZyb20gJ2NvbW1vbi9pbnB1dC9UZXh0RGVjb2Rlcic7XG5pbXBvcnQgeyBQYXJhbXMgfSBmcm9tICdjb21tb24vcGFyc2VyL1BhcmFtcyc7XG5pbXBvcnQgeyBQQVlMT0FEX0xJTUlUIH0gZnJvbSAnY29tbW9uL3BhcnNlci9Db25zdGFudHMnO1xuXG5jb25zdCBFTVBUWV9IQU5ETEVSUzogSURjc0hhbmRsZXJbXSA9IFtdO1xuXG5leHBvcnQgY2xhc3MgRGNzUGFyc2VyIGltcGxlbWVudHMgSURjc1BhcnNlciB7XG4gIHByaXZhdGUgX2hhbmRsZXJzOiBJSGFuZGxlckNvbGxlY3Rpb248SURjc0hhbmRsZXI+ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcHJpdmF0ZSBfYWN0aXZlOiBJRGNzSGFuZGxlcltdID0gRU1QVFlfSEFORExFUlM7XG4gIHByaXZhdGUgX2lkZW50OiBudW1iZXIgPSAwO1xuICBwcml2YXRlIF9oYW5kbGVyRmI6IERjc0ZhbGxiYWNrSGFuZGxlclR5cGUgPSAoKSA9PiB7IH07XG4gIHByaXZhdGUgX3N0YWNrOiBJU3ViUGFyc2VyU3RhY2tTdGF0ZSA9IHtcbiAgICBwYXVzZWQ6IGZhbHNlLFxuICAgIGxvb3BQb3NpdGlvbjogMCxcbiAgICBmYWxsVGhyb3VnaDogZmFsc2VcbiAgfTtcblxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9oYW5kbGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5faGFuZGxlckZiID0gKCkgPT4geyB9O1xuICAgIHRoaXMuX2FjdGl2ZSA9IEVNUFRZX0hBTkRMRVJTO1xuICB9XG5cbiAgcHVibGljIHJlZ2lzdGVySGFuZGxlcihpZGVudDogbnVtYmVyLCBoYW5kbGVyOiBJRGNzSGFuZGxlcik6IElEaXNwb3NhYmxlIHtcbiAgICBpZiAodGhpcy5faGFuZGxlcnNbaWRlbnRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX2hhbmRsZXJzW2lkZW50XSA9IFtdO1xuICAgIH1cbiAgICBjb25zdCBoYW5kbGVyTGlzdCA9IHRoaXMuX2hhbmRsZXJzW2lkZW50XTtcbiAgICBoYW5kbGVyTGlzdC5wdXNoKGhhbmRsZXIpO1xuICAgIHJldHVybiB7XG4gICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXJJbmRleCA9IGhhbmRsZXJMaXN0LmluZGV4T2YoaGFuZGxlcik7XG4gICAgICAgIGlmIChoYW5kbGVySW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgaGFuZGxlckxpc3Quc3BsaWNlKGhhbmRsZXJJbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGNsZWFySGFuZGxlcihpZGVudDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2hhbmRsZXJzW2lkZW50XSkgZGVsZXRlIHRoaXMuX2hhbmRsZXJzW2lkZW50XTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRIYW5kbGVyRmFsbGJhY2soaGFuZGxlcjogRGNzRmFsbGJhY2tIYW5kbGVyVHlwZSk6IHZvaWQge1xuICAgIHRoaXMuX2hhbmRsZXJGYiA9IGhhbmRsZXI7XG4gIH1cblxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XG4gICAgLy8gZm9yY2UgY2xlYW51cCBsZWZ0b3ZlciBoYW5kbGVyc1xuICAgIGlmICh0aGlzLl9hY3RpdmUubGVuZ3RoKSB7XG4gICAgICBmb3IgKGxldCBqID0gdGhpcy5fc3RhY2sucGF1c2VkID8gdGhpcy5fc3RhY2subG9vcFBvc2l0aW9uIC0gMSA6IHRoaXMuX2FjdGl2ZS5sZW5ndGggLSAxOyBqID49IDA7IC0taikge1xuICAgICAgICB0aGlzLl9hY3RpdmVbal0udW5ob29rKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fc3RhY2sucGF1c2VkID0gZmFsc2U7XG4gICAgdGhpcy5fYWN0aXZlID0gRU1QVFlfSEFORExFUlM7XG4gICAgdGhpcy5faWRlbnQgPSAwO1xuICB9XG5cbiAgcHVibGljIGhvb2soaWRlbnQ6IG51bWJlciwgcGFyYW1zOiBJUGFyYW1zKTogdm9pZCB7XG4gICAgLy8gYWx3YXlzIHJlc2V0IGxlZnRvdmVyIGhhbmRsZXJzXG4gICAgdGhpcy5yZXNldCgpO1xuICAgIHRoaXMuX2lkZW50ID0gaWRlbnQ7XG4gICAgdGhpcy5fYWN0aXZlID0gdGhpcy5faGFuZGxlcnNbaWRlbnRdIHx8IEVNUFRZX0hBTkRMRVJTO1xuICAgIGlmICghdGhpcy5fYWN0aXZlLmxlbmd0aCkge1xuICAgICAgdGhpcy5faGFuZGxlckZiKHRoaXMuX2lkZW50LCAnSE9PSycsIHBhcmFtcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGogPSB0aGlzLl9hY3RpdmUubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgdGhpcy5fYWN0aXZlW2pdLmhvb2socGFyYW1zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcHV0KGRhdGE6IFVpbnQzMkFycmF5LCBzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICghdGhpcy5fYWN0aXZlLmxlbmd0aCkge1xuICAgICAgdGhpcy5faGFuZGxlckZiKHRoaXMuX2lkZW50LCAnUFVUJywgdXRmMzJUb1N0cmluZyhkYXRhLCBzdGFydCwgZW5kKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGogPSB0aGlzLl9hY3RpdmUubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgdGhpcy5fYWN0aXZlW2pdLnB1dChkYXRhLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgdW5ob29rKHN1Y2Nlc3M6IGJvb2xlYW4sIHByb21pc2VSZXN1bHQ6IGJvb2xlYW4gPSB0cnVlKTogdm9pZCB8IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGlmICghdGhpcy5fYWN0aXZlLmxlbmd0aCkge1xuICAgICAgdGhpcy5faGFuZGxlckZiKHRoaXMuX2lkZW50LCAnVU5IT09LJywgc3VjY2Vzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBoYW5kbGVyUmVzdWx0OiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPiA9IGZhbHNlO1xuICAgICAgbGV0IGogPSB0aGlzLl9hY3RpdmUubGVuZ3RoIC0gMTtcbiAgICAgIGxldCBmYWxsVGhyb3VnaCA9IGZhbHNlO1xuICAgICAgaWYgKHRoaXMuX3N0YWNrLnBhdXNlZCkge1xuICAgICAgICBqID0gdGhpcy5fc3RhY2subG9vcFBvc2l0aW9uIC0gMTtcbiAgICAgICAgaGFuZGxlclJlc3VsdCA9IHByb21pc2VSZXN1bHQ7XG4gICAgICAgIGZhbGxUaHJvdWdoID0gdGhpcy5fc3RhY2suZmFsbFRocm91Z2g7XG4gICAgICAgIHRoaXMuX3N0YWNrLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCFmYWxsVGhyb3VnaCAmJiBoYW5kbGVyUmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICBmb3IgKDsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgICBoYW5kbGVyUmVzdWx0ID0gdGhpcy5fYWN0aXZlW2pdLnVuaG9vayhzdWNjZXNzKTtcbiAgICAgICAgICBpZiAoaGFuZGxlclJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyUmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhY2sucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3N0YWNrLmxvb3BQb3NpdGlvbiA9IGo7XG4gICAgICAgICAgICB0aGlzLl9zdGFjay5mYWxsVGhyb3VnaCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXJSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGotLTtcbiAgICAgIH1cbiAgICAgIC8vIGNsZWFudXAgbGVmdCBvdmVyIGhhbmRsZXJzIChmYWxsVGhyb3VnaCBmb3IgYXN5bmMpXG4gICAgICBmb3IgKDsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgaGFuZGxlclJlc3VsdCA9IHRoaXMuX2FjdGl2ZVtqXS51bmhvb2soZmFsc2UpO1xuICAgICAgICBpZiAoaGFuZGxlclJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICB0aGlzLl9zdGFjay5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuX3N0YWNrLmxvb3BQb3NpdGlvbiA9IGo7XG4gICAgICAgICAgdGhpcy5fc3RhY2suZmFsbFRocm91Z2ggPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBoYW5kbGVyUmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2FjdGl2ZSA9IEVNUFRZX0hBTkRMRVJTO1xuICAgIHRoaXMuX2lkZW50ID0gMDtcbiAgfVxufVxuXG4vLyBwcmVkZWZpbmUgZW1wdHkgcGFyYW1zIGFzIFswXSAoWkRNKVxuY29uc3QgRU1QVFlfUEFSQU1TID0gbmV3IFBhcmFtcygpO1xuRU1QVFlfUEFSQU1TLmFkZFBhcmFtKDApO1xuXG4vKipcbiAqIENvbnZlbmllbnQgY2xhc3MgdG8gY3JlYXRlIGEgRENTIGhhbmRsZXIgZnJvbSBhIHNpbmdsZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqIE5vdGU6IFRoZSBwYXlsb2FkIGlzIGN1cnJlbnRseSBsaW1pdGVkIHRvIDUwIE1CIChoYXJkY29kZWQpLlxuICovXG5leHBvcnQgY2xhc3MgRGNzSGFuZGxlciBpbXBsZW1lbnRzIElEY3NIYW5kbGVyIHtcbiAgcHJpdmF0ZSBfZGF0YSA9ICcnO1xuICBwcml2YXRlIF9wYXJhbXM6IElQYXJhbXMgPSBFTVBUWV9QQVJBTVM7XG4gIHByaXZhdGUgX2hpdExpbWl0OiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfaGFuZGxlcjogKGRhdGE6IHN0cmluZywgcGFyYW1zOiBJUGFyYW1zKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPikgeyB9XG5cbiAgcHVibGljIGhvb2socGFyYW1zOiBJUGFyYW1zKTogdm9pZCB7XG4gICAgLy8gc2luY2Ugd2UgbmVlZCB0byBwcmVzZXJ2ZSBwYXJhbXMgdW50aWwgYHVuaG9va2AsIHdlIGhhdmUgdG8gY2xvbmUgaXRcbiAgICAvLyAob25seSBib3Jyb3dlZCBmcm9tIHBhcnNlciBhbmQgc3BhbnMgbXVsdGlwbGUgcGFyc2VyIHN0YXRlcylcbiAgICAvLyBwZXJmIG9wdGltaXphdGlvbjpcbiAgICAvLyBjbG9uZSBvbmx5LCBpZiB3ZSBoYXZlIG5vbiBlbXB0eSBwYXJhbXMsIG90aGVyd2lzZSBzdGljayB3aXRoIGRlZmF1bHRcbiAgICB0aGlzLl9wYXJhbXMgPSAocGFyYW1zLmxlbmd0aCA+IDEgfHwgcGFyYW1zLnBhcmFtc1swXSkgPyBwYXJhbXMuY2xvbmUoKSA6IEVNUFRZX1BBUkFNUztcbiAgICB0aGlzLl9kYXRhID0gJyc7XG4gICAgdGhpcy5faGl0TGltaXQgPSBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyBwdXQoZGF0YTogVWludDMyQXJyYXksIHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2hpdExpbWl0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2RhdGEgKz0gdXRmMzJUb1N0cmluZyhkYXRhLCBzdGFydCwgZW5kKTtcbiAgICBpZiAodGhpcy5fZGF0YS5sZW5ndGggPiBQQVlMT0FEX0xJTUlUKSB7XG4gICAgICB0aGlzLl9kYXRhID0gJyc7XG4gICAgICB0aGlzLl9oaXRMaW1pdCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHVuaG9vayhzdWNjZXNzOiBib29sZWFuKTogYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGxldCByZXQ6IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+ID0gZmFsc2U7XG4gICAgaWYgKHRoaXMuX2hpdExpbWl0KSB7XG4gICAgICByZXQgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgIHJldCA9IHRoaXMuX2hhbmRsZXIodGhpcy5fZGF0YSwgdGhpcy5fcGFyYW1zKTtcbiAgICAgIGlmIChyZXQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIC8vIG5lZWQgdG8gaG9sZCBkYXRhIGFuZCBwYXJhbXMgdW50aWwgYHJldGAgZ290IHJlc29sdmVkXG4gICAgICAgIC8vIGRvbnQgY2FyZSBmb3IgZXJyb3JzLCBkYXRhIHdpbGwgYmUgZnJlZWQgYW55d2F5IG9uIG5leHQgc3RhcnRcbiAgICAgICAgcmV0dXJuIHJldC50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgdGhpcy5fcGFyYW1zID0gRU1QVFlfUEFSQU1TO1xuICAgICAgICAgIHRoaXMuX2RhdGEgPSAnJztcbiAgICAgICAgICB0aGlzLl9oaXRMaW1pdCA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9wYXJhbXMgPSBFTVBUWV9QQVJBTVM7XG4gICAgdGhpcy5fZGF0YSA9ICcnO1xuICAgIHRoaXMuX2hpdExpbWl0ID0gZmFsc2U7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJUGFyc2luZ1N0YXRlLCBJRGNzSGFuZGxlciwgSUVzY2FwZVNlcXVlbmNlUGFyc2VyLCBJUGFyYW1zLCBJT3NjSGFuZGxlciwgSUhhbmRsZXJDb2xsZWN0aW9uLCBDc2lIYW5kbGVyVHlwZSwgT3NjRmFsbGJhY2tIYW5kbGVyVHlwZSwgSU9zY1BhcnNlciwgRXNjSGFuZGxlclR5cGUsIElEY3NQYXJzZXIsIERjc0ZhbGxiYWNrSGFuZGxlclR5cGUsIElGdW5jdGlvbklkZW50aWZpZXIsIEV4ZWN1dGVGYWxsYmFja0hhbmRsZXJUeXBlLCBDc2lGYWxsYmFja0hhbmRsZXJUeXBlLCBFc2NGYWxsYmFja0hhbmRsZXJUeXBlLCBQcmludEhhbmRsZXJUeXBlLCBQcmludEZhbGxiYWNrSGFuZGxlclR5cGUsIEV4ZWN1dGVIYW5kbGVyVHlwZSwgSVBhcnNlclN0YWNrU3RhdGUsIFBhcnNlclN0YWNrVHlwZSwgUmVzdW1hYmxlSGFuZGxlcnNUeXBlIH0gZnJvbSAnY29tbW9uL3BhcnNlci9UeXBlcyc7XG5pbXBvcnQgeyBQYXJzZXJTdGF0ZSwgUGFyc2VyQWN0aW9uIH0gZnJvbSAnY29tbW9uL3BhcnNlci9Db25zdGFudHMnO1xuaW1wb3J0IHsgRGlzcG9zYWJsZSB9IGZyb20gJ2NvbW1vbi9MaWZlY3ljbGUnO1xuaW1wb3J0IHsgSURpc3Bvc2FibGUgfSBmcm9tICdjb21tb24vVHlwZXMnO1xuaW1wb3J0IHsgZmlsbCB9IGZyb20gJ2NvbW1vbi9UeXBlZEFycmF5VXRpbHMnO1xuaW1wb3J0IHsgUGFyYW1zIH0gZnJvbSAnY29tbW9uL3BhcnNlci9QYXJhbXMnO1xuaW1wb3J0IHsgT3NjUGFyc2VyIH0gZnJvbSAnY29tbW9uL3BhcnNlci9Pc2NQYXJzZXInO1xuaW1wb3J0IHsgRGNzUGFyc2VyIH0gZnJvbSAnY29tbW9uL3BhcnNlci9EY3NQYXJzZXInO1xuXG4vKipcbiAqIFRhYmxlIHZhbHVlcyBhcmUgZ2VuZXJhdGVkIGxpa2UgdGhpczpcbiAqICAgIGluZGV4OiAgY3VycmVudFN0YXRlIDw8IFRhYmxlVmFsdWUuSU5ERVhfU1RBVEVfU0hJRlQgfCBjaGFyQ29kZVxuICogICAgdmFsdWU6ICBhY3Rpb24gPDwgVGFibGVWYWx1ZS5UUkFOU0lUSU9OX0FDVElPTl9TSElGVCB8IG5leHRTdGF0ZVxuICovXG5jb25zdCBlbnVtIFRhYmxlQWNjZXNzIHtcbiAgVFJBTlNJVElPTl9BQ1RJT05fU0hJRlQgPSA0LFxuICBUUkFOU0lUSU9OX1NUQVRFX01BU0sgPSAxNSxcbiAgSU5ERVhfU1RBVEVfU0hJRlQgPSA4XG59XG5cbi8qKlxuICogVHJhbnNpdGlvbiB0YWJsZSBmb3IgRXNjYXBlU2VxdWVuY2VQYXJzZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBUcmFuc2l0aW9uVGFibGUge1xuICBwdWJsaWMgdGFibGU6IFVpbnQ4QXJyYXk7XG5cbiAgY29uc3RydWN0b3IobGVuZ3RoOiBudW1iZXIpIHtcbiAgICB0aGlzLnRhYmxlID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgZGVmYXVsdCB0cmFuc2l0aW9uLlxuICAgKiBAcGFyYW0gYWN0aW9uIGRlZmF1bHQgYWN0aW9uXG4gICAqIEBwYXJhbSBuZXh0IGRlZmF1bHQgbmV4dCBzdGF0ZVxuICAgKi9cbiAgcHVibGljIHNldERlZmF1bHQoYWN0aW9uOiBQYXJzZXJBY3Rpb24sIG5leHQ6IFBhcnNlclN0YXRlKTogdm9pZCB7XG4gICAgZmlsbCh0aGlzLnRhYmxlLCBhY3Rpb24gPDwgVGFibGVBY2Nlc3MuVFJBTlNJVElPTl9BQ1RJT05fU0hJRlQgfCBuZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSB0cmFuc2l0aW9uIHRvIHRoZSB0cmFuc2l0aW9uIHRhYmxlLlxuICAgKiBAcGFyYW0gY29kZSBpbnB1dCBjaGFyYWN0ZXIgY29kZVxuICAgKiBAcGFyYW0gc3RhdGUgY3VycmVudCBwYXJzZXIgc3RhdGVcbiAgICogQHBhcmFtIGFjdGlvbiBwYXJzZXIgYWN0aW9uIHRvIGJlIGRvbmVcbiAgICogQHBhcmFtIG5leHQgbmV4dCBwYXJzZXIgc3RhdGVcbiAgICovXG4gIHB1YmxpYyBhZGQoY29kZTogbnVtYmVyLCBzdGF0ZTogUGFyc2VyU3RhdGUsIGFjdGlvbjogUGFyc2VyQWN0aW9uLCBuZXh0OiBQYXJzZXJTdGF0ZSk6IHZvaWQge1xuICAgIHRoaXMudGFibGVbc3RhdGUgPDwgVGFibGVBY2Nlc3MuSU5ERVhfU1RBVEVfU0hJRlQgfCBjb2RlXSA9IGFjdGlvbiA8PCBUYWJsZUFjY2Vzcy5UUkFOU0lUSU9OX0FDVElPTl9TSElGVCB8IG5leHQ7XG4gIH1cblxuICAvKipcbiAgICogQWRkIHRyYW5zaXRpb25zIGZvciBtdWx0aXBsZSBpbnB1dCBjaGFyYWN0ZXIgY29kZXMuXG4gICAqIEBwYXJhbSBjb2RlcyBpbnB1dCBjaGFyYWN0ZXIgY29kZSBhcnJheVxuICAgKiBAcGFyYW0gc3RhdGUgY3VycmVudCBwYXJzZXIgc3RhdGVcbiAgICogQHBhcmFtIGFjdGlvbiBwYXJzZXIgYWN0aW9uIHRvIGJlIGRvbmVcbiAgICogQHBhcmFtIG5leHQgbmV4dCBwYXJzZXIgc3RhdGVcbiAgICovXG4gIHB1YmxpYyBhZGRNYW55KGNvZGVzOiBudW1iZXJbXSwgc3RhdGU6IFBhcnNlclN0YXRlLCBhY3Rpb246IFBhcnNlckFjdGlvbiwgbmV4dDogUGFyc2VyU3RhdGUpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnRhYmxlW3N0YXRlIDw8IFRhYmxlQWNjZXNzLklOREVYX1NUQVRFX1NISUZUIHwgY29kZXNbaV1dID0gYWN0aW9uIDw8IFRhYmxlQWNjZXNzLlRSQU5TSVRJT05fQUNUSU9OX1NISUZUIHwgbmV4dDtcbiAgICB9XG4gIH1cbn1cblxuXG4vLyBQc2V1ZG8tY2hhcmFjdGVyIHBsYWNlaG9sZGVyIGZvciBwcmludGFibGUgbm9uLWFzY2lpIGNoYXJhY3RlcnMgKHVuaWNvZGUpLlxuY29uc3QgTk9OX0FTQ0lJX1BSSU5UQUJMRSA9IDB4QTA7XG5cblxuLyoqXG4gKiBWVDUwMCBjb21wYXRpYmxlIHRyYW5zaXRpb24gdGFibGUuXG4gKiBUYWtlbiBmcm9tIGh0dHBzOi8vdnQxMDAubmV0L2VtdS9kZWNfYW5zaV9wYXJzZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBWVDUwMF9UUkFOU0lUSU9OX1RBQkxFID0gKGZ1bmN0aW9uICgpOiBUcmFuc2l0aW9uVGFibGUge1xuICBjb25zdCB0YWJsZTogVHJhbnNpdGlvblRhYmxlID0gbmV3IFRyYW5zaXRpb25UYWJsZSg0MDk1KTtcblxuICAvLyByYW5nZSBtYWNybyBmb3IgYnl0ZVxuICBjb25zdCBCWVRFX1ZBTFVFUyA9IDI1NjtcbiAgY29uc3QgYmx1ZXByaW50ID0gQXJyYXkuYXBwbHkobnVsbCwgQXJyYXkoQllURV9WQUxVRVMpKS5tYXAoKHVudXNlZDogYW55LCBpOiBudW1iZXIpID0+IGkpO1xuICBjb25zdCByID0gKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKTogbnVtYmVyW10gPT4gYmx1ZXByaW50LnNsaWNlKHN0YXJ0LCBlbmQpO1xuXG4gIC8vIERlZmF1bHQgZGVmaW5pdGlvbnMuXG4gIGNvbnN0IFBSSU5UQUJMRVMgPSByKDB4MjAsIDB4N2YpOyAvLyAweDIwIChTUCkgaW5jbHVkZWQsIDB4N0YgKERFTCkgZXhjbHVkZWRcbiAgY29uc3QgRVhFQ1VUQUJMRVMgPSByKDB4MDAsIDB4MTgpO1xuICBFWEVDVVRBQkxFUy5wdXNoKDB4MTkpO1xuICBFWEVDVVRBQkxFUy5wdXNoLmFwcGx5KEVYRUNVVEFCTEVTLCByKDB4MWMsIDB4MjApKTtcblxuICBjb25zdCBzdGF0ZXM6IG51bWJlcltdID0gcihQYXJzZXJTdGF0ZS5HUk9VTkQsIFBhcnNlclN0YXRlLkRDU19QQVNTVEhST1VHSCArIDEpO1xuICBsZXQgc3RhdGU6IGFueTtcblxuICAvLyBzZXQgZGVmYXVsdCB0cmFuc2l0aW9uXG4gIHRhYmxlLnNldERlZmF1bHQoUGFyc2VyQWN0aW9uLkVSUk9SLCBQYXJzZXJTdGF0ZS5HUk9VTkQpO1xuICAvLyBwcmludGFibGVzXG4gIHRhYmxlLmFkZE1hbnkoUFJJTlRBQkxFUywgUGFyc2VyU3RhdGUuR1JPVU5ELCBQYXJzZXJBY3Rpb24uUFJJTlQsIFBhcnNlclN0YXRlLkdST1VORCk7XG4gIC8vIGdsb2JhbCBhbnl3aGVyZSBydWxlc1xuICBmb3IgKHN0YXRlIGluIHN0YXRlcykge1xuICAgIHRhYmxlLmFkZE1hbnkoWzB4MTgsIDB4MWEsIDB4OTksIDB4OWFdLCBzdGF0ZSwgUGFyc2VyQWN0aW9uLkVYRUNVVEUsIFBhcnNlclN0YXRlLkdST1VORCk7XG4gICAgdGFibGUuYWRkTWFueShyKDB4ODAsIDB4OTApLCBzdGF0ZSwgUGFyc2VyQWN0aW9uLkVYRUNVVEUsIFBhcnNlclN0YXRlLkdST1VORCk7XG4gICAgdGFibGUuYWRkTWFueShyKDB4OTAsIDB4OTgpLCBzdGF0ZSwgUGFyc2VyQWN0aW9uLkVYRUNVVEUsIFBhcnNlclN0YXRlLkdST1VORCk7XG4gICAgdGFibGUuYWRkKDB4OWMsIHN0YXRlLCBQYXJzZXJBY3Rpb24uSUdOT1JFLCBQYXJzZXJTdGF0ZS5HUk9VTkQpOyAvLyBTVCBhcyB0ZXJtaW5hdG9yXG4gICAgdGFibGUuYWRkKDB4MWIsIHN0YXRlLCBQYXJzZXJBY3Rpb24uQ0xFQVIsIFBhcnNlclN0YXRlLkVTQ0FQRSk7ICAvLyBFU0NcbiAgICB0YWJsZS5hZGQoMHg5ZCwgc3RhdGUsIFBhcnNlckFjdGlvbi5PU0NfU1RBUlQsIFBhcnNlclN0YXRlLk9TQ19TVFJJTkcpOyAgLy8gT1NDXG4gICAgdGFibGUuYWRkTWFueShbMHg5OCwgMHg5ZSwgMHg5Zl0sIHN0YXRlLCBQYXJzZXJBY3Rpb24uSUdOT1JFLCBQYXJzZXJTdGF0ZS5TT1NfUE1fQVBDX1NUUklORyk7XG4gICAgdGFibGUuYWRkKDB4OWIsIHN0YXRlLCBQYXJzZXJBY3Rpb24uQ0xFQVIsIFBhcnNlclN0YXRlLkNTSV9FTlRSWSk7ICAvLyBDU0lcbiAgICB0YWJsZS5hZGQoMHg5MCwgc3RhdGUsIFBhcnNlckFjdGlvbi5DTEVBUiwgUGFyc2VyU3RhdGUuRENTX0VOVFJZKTsgIC8vIERDU1xuICB9XG4gIC8vIHJ1bGVzIGZvciBleGVjdXRhYmxlcyBhbmQgN2ZcbiAgdGFibGUuYWRkTWFueShFWEVDVVRBQkxFUywgUGFyc2VyU3RhdGUuR1JPVU5ELCBQYXJzZXJBY3Rpb24uRVhFQ1VURSwgUGFyc2VyU3RhdGUuR1JPVU5EKTtcbiAgdGFibGUuYWRkTWFueShFWEVDVVRBQkxFUywgUGFyc2VyU3RhdGUuRVNDQVBFLCBQYXJzZXJBY3Rpb24uRVhFQ1VURSwgUGFyc2VyU3RhdGUuRVNDQVBFKTtcbiAgdGFibGUuYWRkKDB4N2YsIFBhcnNlclN0YXRlLkVTQ0FQRSwgUGFyc2VyQWN0aW9uLklHTk9SRSwgUGFyc2VyU3RhdGUuRVNDQVBFKTtcbiAgdGFibGUuYWRkTWFueShFWEVDVVRBQkxFUywgUGFyc2VyU3RhdGUuT1NDX1NUUklORywgUGFyc2VyQWN0aW9uLklHTk9SRSwgUGFyc2VyU3RhdGUuT1NDX1NUUklORyk7XG4gIHRhYmxlLmFkZE1hbnkoRVhFQ1VUQUJMRVMsIFBhcnNlclN0YXRlLkNTSV9FTlRSWSwgUGFyc2VyQWN0aW9uLkVYRUNVVEUsIFBhcnNlclN0YXRlLkNTSV9FTlRSWSk7XG4gIHRhYmxlLmFkZCgweDdmLCBQYXJzZXJTdGF0ZS5DU0lfRU5UUlksIFBhcnNlckFjdGlvbi5JR05PUkUsIFBhcnNlclN0YXRlLkNTSV9FTlRSWSk7XG4gIHRhYmxlLmFkZE1hbnkoRVhFQ1VUQUJMRVMsIFBhcnNlclN0YXRlLkNTSV9QQVJBTSwgUGFyc2VyQWN0aW9uLkVYRUNVVEUsIFBhcnNlclN0YXRlLkNTSV9QQVJBTSk7XG4gIHRhYmxlLmFkZCgweDdmLCBQYXJzZXJTdGF0ZS5DU0lfUEFSQU0sIFBhcnNlckFjdGlvbi5JR05PUkUsIFBhcnNlclN0YXRlLkNTSV9QQVJBTSk7XG4gIHRhYmxlLmFkZE1hbnkoRVhFQ1VUQUJMRVMsIFBhcnNlclN0YXRlLkNTSV9JR05PUkUsIFBhcnNlckFjdGlvbi5FWEVDVVRFLCBQYXJzZXJTdGF0ZS5DU0lfSUdOT1JFKTtcbiAgdGFibGUuYWRkTWFueShFWEVDVVRBQkxFUywgUGFyc2VyU3RhdGUuQ1NJX0lOVEVSTUVESUFURSwgUGFyc2VyQWN0aW9uLkVYRUNVVEUsIFBhcnNlclN0YXRlLkNTSV9JTlRFUk1FRElBVEUpO1xuICB0YWJsZS5hZGQoMHg3ZiwgUGFyc2VyU3RhdGUuQ1NJX0lOVEVSTUVESUFURSwgUGFyc2VyQWN0aW9uLklHTk9SRSwgUGFyc2VyU3RhdGUuQ1NJX0lOVEVSTUVESUFURSk7XG4gIHRhYmxlLmFkZE1hbnkoRVhFQ1VUQUJMRVMsIFBhcnNlclN0YXRlLkVTQ0FQRV9JTlRFUk1FRElBVEUsIFBhcnNlckFjdGlvbi5FWEVDVVRFLCBQYXJzZXJTdGF0ZS5FU0NBUEVfSU5URVJNRURJQVRFKTtcbiAgdGFibGUuYWRkKDB4N2YsIFBhcnNlclN0YXRlLkVTQ0FQRV9JTlRFUk1FRElBVEUsIFBhcnNlckFjdGlvbi5JR05PUkUsIFBhcnNlclN0YXRlLkVTQ0FQRV9JTlRFUk1FRElBVEUpO1xuICAvLyBvc2NcbiAgdGFibGUuYWRkKDB4NWQsIFBhcnNlclN0YXRlLkVTQ0FQRSwgUGFyc2VyQWN0aW9uLk9TQ19TVEFSVCwgUGFyc2VyU3RhdGUuT1NDX1NUUklORyk7XG4gIHRhYmxlLmFkZE1hbnkoUFJJTlRBQkxFUywgUGFyc2VyU3RhdGUuT1NDX1NUUklORywgUGFyc2VyQWN0aW9uLk9TQ19QVVQsIFBhcnNlclN0YXRlLk9TQ19TVFJJTkcpO1xuICB0YWJsZS5hZGQoMHg3ZiwgUGFyc2VyU3RhdGUuT1NDX1NUUklORywgUGFyc2VyQWN0aW9uLk9TQ19QVVQsIFBhcnNlclN0YXRlLk9TQ19TVFJJTkcpO1xuICB0YWJsZS5hZGRNYW55KFsweDljLCAweDFiLCAweDE4LCAweDFhLCAweDA3XSwgUGFyc2VyU3RhdGUuT1NDX1NUUklORywgUGFyc2VyQWN0aW9uLk9TQ19FTkQsIFBhcnNlclN0YXRlLkdST1VORCk7XG4gIHRhYmxlLmFkZE1hbnkocigweDFjLCAweDIwKSwgUGFyc2VyU3RhdGUuT1NDX1NUUklORywgUGFyc2VyQWN0aW9uLklHTk9SRSwgUGFyc2VyU3RhdGUuT1NDX1NUUklORyk7XG4gIC8vIHNvcy9wbS9hcGMgZG9lcyBub3RoaW5nXG4gIHRhYmxlLmFkZE1hbnkoWzB4NTgsIDB4NWUsIDB4NWZdLCBQYXJzZXJTdGF0ZS5FU0NBUEUsIFBhcnNlckFjdGlvbi5JR05PUkUsIFBhcnNlclN0YXRlLlNPU19QTV9BUENfU1RSSU5HKTtcbiAgdGFibGUuYWRkTWFueShQUklOVEFCTEVTLCBQYXJzZXJTdGF0ZS5TT1NfUE1fQVBDX1NUUklORywgUGFyc2VyQWN0aW9uLklHTk9SRSwgUGFyc2VyU3RhdGUuU09TX1BNX0FQQ19TVFJJTkcpO1xuICB0YWJsZS5hZGRNYW55KEVYRUNVVEFCTEVTLCBQYXJzZXJTdGF0ZS5TT1NfUE1fQVBDX1NUUklORywgUGFyc2VyQWN0aW9uLklHTk9SRSwgUGFyc2VyU3RhdGUuU09TX1BNX0FQQ19TVFJJTkcpO1xuICB0YWJsZS5hZGQoMHg5YywgUGFyc2VyU3RhdGUuU09TX1BNX0FQQ19TVFJJTkcsIFBhcnNlckFjdGlvbi5JR05PUkUsIFBhcnNlclN0YXRlLkdST1VORCk7XG4gIHRhYmxlLmFkZCgweDdmLCBQYXJzZXJTdGF0ZS5TT1NfUE1fQVBDX1NUUklORywgUGFyc2VyQWN0aW9uLklHTk9SRSwgUGFyc2VyU3RhdGUuU09TX1BNX0FQQ19TVFJJTkcpO1xuICAvLyBjc2kgZW50cmllc1xuICB0YWJsZS5hZGQoMHg1YiwgUGFyc2VyU3RhdGUuRVNDQVBFLCBQYXJzZXJBY3Rpb24uQ0xFQVIsIFBhcnNlclN0YXRlLkNTSV9FTlRSWSk7XG4gIHRhYmxlLmFkZE1hbnkocigweDQwLCAweDdmKSwgUGFyc2VyU3RhdGUuQ1NJX0VOVFJZLCBQYXJzZXJBY3Rpb24uQ1NJX0RJU1BBVENILCBQYXJzZXJTdGF0ZS5HUk9VTkQpO1xuICB0YWJsZS5hZGRNYW55KHIoMHgzMCwgMHgzYyksIFBhcnNlclN0YXRlLkNTSV9FTlRSWSwgUGFyc2VyQWN0aW9uLlBBUkFNLCBQYXJzZXJTdGF0ZS5DU0lfUEFSQU0pO1xuICB0YWJsZS5hZGRNYW55KFsweDNjLCAweDNkLCAweDNlLCAweDNmXSwgUGFyc2VyU3RhdGUuQ1NJX0VOVFJZLCBQYXJzZXJBY3Rpb24uQ09MTEVDVCwgUGFyc2VyU3RhdGUuQ1NJX1BBUkFNKTtcbiAgdGFibGUuYWRkTWFueShyKDB4MzAsIDB4M2MpLCBQYXJzZXJTdGF0ZS5DU0lfUEFSQU0sIFBhcnNlckFjdGlvbi5QQVJBTSwgUGFyc2VyU3RhdGUuQ1NJX1BBUkFNKTtcbiAgdGFibGUuYWRkTWFueShyKDB4NDAsIDB4N2YpLCBQYXJzZXJTdGF0ZS5DU0lfUEFSQU0sIFBhcnNlckFjdGlvbi5DU0lfRElTUEFUQ0gsIFBhcnNlclN0YXRlLkdST1VORCk7XG4gIHRhYmxlLmFkZE1hbnkoWzB4M2MsIDB4M2QsIDB4M2UsIDB4M2ZdLCBQYXJzZXJTdGF0ZS5DU0lfUEFSQU0sIFBhcnNlckFjdGlvbi5JR05PUkUsIFBhcnNlclN0YXRlLkNTSV9JR05PUkUpO1xuICB0YWJsZS5hZGRNYW55KHIoMHgyMCwgMHg0MCksIFBhcnNlclN0YXRlLkNTSV9JR05PUkUsIFBhcnNlckFjdGlvbi5JR05PUkUsIFBhcnNlclN0YXRlLkNTSV9JR05PUkUpO1xuICB0YWJsZS5hZGQoMHg3ZiwgUGFyc2VyU3RhdGUuQ1NJX0lHTk9SRSwgUGFyc2VyQWN0aW9uLklHTk9SRSwgUGFyc2VyU3RhdGUuQ1NJX0lHTk9SRSk7XG4gIHRhYmxlLmFkZE1hbnkocigweDQwLCAweDdmKSwgUGFyc2VyU3RhdGUuQ1NJX0lHTk9SRSwgUGFyc2VyQWN0aW9uLklHTk9SRSwgUGFyc2VyU3RhdGUuR1JPVU5EKTtcbiAgdGFibGUuYWRkTWFueShyKDB4MjAsIDB4MzApLCBQYXJzZXJTdGF0ZS5DU0lfRU5UUlksIFBhcnNlckFjdGlvbi5DT0xMRUNULCBQYXJzZXJTdGF0ZS5DU0lfSU5URVJNRURJQVRFKTtcbiAgdGFibGUuYWRkTWFueShyKDB4MjAsIDB4MzApLCBQYXJzZXJTdGF0ZS5DU0lfSU5URVJNRURJQVRFLCBQYXJzZXJBY3Rpb24uQ09MTEVDVCwgUGFyc2VyU3RhdGUuQ1NJX0lOVEVSTUVESUFURSk7XG4gIHRhYmxlLmFkZE1hbnkocigweDMwLCAweDQwKSwgUGFyc2VyU3RhdGUuQ1NJX0lOVEVSTUVESUFURSwgUGFyc2VyQWN0aW9uLklHTk9SRSwgUGFyc2VyU3RhdGUuQ1NJX0lHTk9SRSk7XG4gIHRhYmxlLmFkZE1hbnkocigweDQwLCAweDdmKSwgUGFyc2VyU3RhdGUuQ1NJX0lOVEVSTUVESUFURSwgUGFyc2VyQWN0aW9uLkNTSV9ESVNQQVRDSCwgUGFyc2VyU3RhdGUuR1JPVU5EKTtcbiAgdGFibGUuYWRkTWFueShyKDB4MjAsIDB4MzApLCBQYXJzZXJTdGF0ZS5DU0lfUEFSQU0sIFBhcnNlckFjdGlvbi5DT0xMRUNULCBQYXJzZXJTdGF0ZS5DU0lfSU5URVJNRURJQVRFKTtcbiAgLy8gZXNjX2ludGVybWVkaWF0ZVxuICB0YWJsZS5hZGRNYW55KHIoMHgyMCwgMHgzMCksIFBhcnNlclN0YXRlLkVTQ0FQRSwgUGFyc2VyQWN0aW9uLkNPTExFQ1QsIFBhcnNlclN0YXRlLkVTQ0FQRV9JTlRFUk1FRElBVEUpO1xuICB0YWJsZS5hZGRNYW55KHIoMHgyMCwgMHgzMCksIFBhcnNlclN0YXRlLkVTQ0FQRV9JTlRFUk1FRElBVEUsIFBhcnNlckFjdGlvbi5DT0xMRUNULCBQYXJzZXJTdGF0ZS5FU0NBUEVfSU5URVJNRURJQVRFKTtcbiAgdGFibGUuYWRkTWFueShyKDB4MzAsIDB4N2YpLCBQYXJzZXJTdGF0ZS5FU0NBUEVfSU5URVJNRURJQVRFLCBQYXJzZXJBY3Rpb24uRVNDX0RJU1BBVENILCBQYXJzZXJTdGF0ZS5HUk9VTkQpO1xuICB0YWJsZS5hZGRNYW55KHIoMHgzMCwgMHg1MCksIFBhcnNlclN0YXRlLkVTQ0FQRSwgUGFyc2VyQWN0aW9uLkVTQ19ESVNQQVRDSCwgUGFyc2VyU3RhdGUuR1JPVU5EKTtcbiAgdGFibGUuYWRkTWFueShyKDB4NTEsIDB4NTgpLCBQYXJzZXJTdGF0ZS5FU0NBUEUsIFBhcnNlckFjdGlvbi5FU0NfRElTUEFUQ0gsIFBhcnNlclN0YXRlLkdST1VORCk7XG4gIHRhYmxlLmFkZE1hbnkoWzB4NTksIDB4NWEsIDB4NWNdLCBQYXJzZXJTdGF0ZS5FU0NBUEUsIFBhcnNlckFjdGlvbi5FU0NfRElTUEFUQ0gsIFBhcnNlclN0YXRlLkdST1VORCk7XG4gIHRhYmxlLmFkZE1hbnkocigweDYwLCAweDdmKSwgUGFyc2VyU3RhdGUuRVNDQVBFLCBQYXJzZXJBY3Rpb24uRVNDX0RJU1BBVENILCBQYXJzZXJTdGF0ZS5HUk9VTkQpO1xuICAvLyBkY3MgZW50cnlcbiAgdGFibGUuYWRkKDB4NTAsIFBhcnNlclN0YXRlLkVTQ0FQRSwgUGFyc2VyQWN0aW9uLkNMRUFSLCBQYXJzZXJTdGF0ZS5EQ1NfRU5UUlkpO1xuICB0YWJsZS5hZGRNYW55KEVYRUNVVEFCTEVTLCBQYXJzZXJTdGF0ZS5EQ1NfRU5UUlksIFBhcnNlckFjdGlvbi5JR05PUkUsIFBhcnNlclN0YXRlLkRDU19FTlRSWSk7XG4gIHRhYmxlLmFkZCgweDdmLCBQYXJzZXJTdGF0ZS5EQ1NfRU5UUlksIFBhcnNlckFjdGlvbi5JR05PUkUsIFBhcnNlclN0YXRlLkRDU19FTlRSWSk7XG4gIHRhYmxlLmFkZE1hbnkocigweDFjLCAweDIwKSwgUGFyc2VyU3RhdGUuRENTX0VOVFJZLCBQYXJzZXJBY3Rpb24uSUdOT1JFLCBQYXJzZXJTdGF0ZS5EQ1NfRU5UUlkpO1xuICB0YWJsZS5hZGRNYW55KHIoMHgyMCwgMHgzMCksIFBhcnNlclN0YXRlLkRDU19FTlRSWSwgUGFyc2VyQWN0aW9uLkNPTExFQ1QsIFBhcnNlclN0YXRlLkRDU19JTlRFUk1FRElBVEUpO1xuICB0YWJsZS5hZGRNYW55KHIoMHgzMCwgMHgzYyksIFBhcnNlclN0YXRlLkRDU19FTlRSWSwgUGFyc2VyQWN0aW9uLlBBUkFNLCBQYXJzZXJTdGF0ZS5EQ1NfUEFSQU0pO1xuICB0YWJsZS5hZGRNYW55KFsweDNjLCAweDNkLCAweDNlLCAweDNmXSwgUGFyc2VyU3RhdGUuRENTX0VOVFJZLCBQYXJzZXJBY3Rpb24uQ09MTEVDVCwgUGFyc2VyU3RhdGUuRENTX1BBUkFNKTtcbiAgdGFibGUuYWRkTWFueShFWEVDVVRBQkxFUywgUGFyc2VyU3RhdGUuRENTX0lHTk9SRSwgUGFyc2VyQWN0aW9uLklHTk9SRSwgUGFyc2VyU3RhdGUuRENTX0lHTk9SRSk7XG4gIHRhYmxlLmFkZE1hbnkocigweDIwLCAweDgwKSwgUGFyc2VyU3RhdGUuRENTX0lHTk9SRSwgUGFyc2VyQWN0aW9uLklHTk9SRSwgUGFyc2VyU3RhdGUuRENTX0lHTk9SRSk7XG4gIHRhYmxlLmFkZE1hbnkocigweDFjLCAweDIwKSwgUGFyc2VyU3RhdGUuRENTX0lHTk9SRSwgUGFyc2VyQWN0aW9uLklHTk9SRSwgUGFyc2VyU3RhdGUuRENTX0lHTk9SRSk7XG4gIHRhYmxlLmFkZE1hbnkoRVhFQ1VUQUJMRVMsIFBhcnNlclN0YXRlLkRDU19QQVJBTSwgUGFyc2VyQWN0aW9uLklHTk9SRSwgUGFyc2VyU3RhdGUuRENTX1BBUkFNKTtcbiAgdGFibGUuYWRkKDB4N2YsIFBhcnNlclN0YXRlLkRDU19QQVJBTSwgUGFyc2VyQWN0aW9uLklHTk9SRSwgUGFyc2VyU3RhdGUuRENTX1BBUkFNKTtcbiAgdGFibGUuYWRkTWFueShyKDB4MWMsIDB4MjApLCBQYXJzZXJTdGF0ZS5EQ1NfUEFSQU0sIFBhcnNlckFjdGlvbi5JR05PUkUsIFBhcnNlclN0YXRlLkRDU19QQVJBTSk7XG4gIHRhYmxlLmFkZE1hbnkocigweDMwLCAweDNjKSwgUGFyc2VyU3RhdGUuRENTX1BBUkFNLCBQYXJzZXJBY3Rpb24uUEFSQU0sIFBhcnNlclN0YXRlLkRDU19QQVJBTSk7XG4gIHRhYmxlLmFkZE1hbnkoWzB4M2MsIDB4M2QsIDB4M2UsIDB4M2ZdLCBQYXJzZXJTdGF0ZS5EQ1NfUEFSQU0sIFBhcnNlckFjdGlvbi5JR05PUkUsIFBhcnNlclN0YXRlLkRDU19JR05PUkUpO1xuICB0YWJsZS5hZGRNYW55KHIoMHgyMCwgMHgzMCksIFBhcnNlclN0YXRlLkRDU19QQVJBTSwgUGFyc2VyQWN0aW9uLkNPTExFQ1QsIFBhcnNlclN0YXRlLkRDU19JTlRFUk1FRElBVEUpO1xuICB0YWJsZS5hZGRNYW55KEVYRUNVVEFCTEVTLCBQYXJzZXJTdGF0ZS5EQ1NfSU5URVJNRURJQVRFLCBQYXJzZXJBY3Rpb24uSUdOT1JFLCBQYXJzZXJTdGF0ZS5EQ1NfSU5URVJNRURJQVRFKTtcbiAgdGFibGUuYWRkKDB4N2YsIFBhcnNlclN0YXRlLkRDU19JTlRFUk1FRElBVEUsIFBhcnNlckFjdGlvbi5JR05PUkUsIFBhcnNlclN0YXRlLkRDU19JTlRFUk1FRElBVEUpO1xuICB0YWJsZS5hZGRNYW55KHIoMHgxYywgMHgyMCksIFBhcnNlclN0YXRlLkRDU19JTlRFUk1FRElBVEUsIFBhcnNlckFjdGlvbi5JR05PUkUsIFBhcnNlclN0YXRlLkRDU19JTlRFUk1FRElBVEUpO1xuICB0YWJsZS5hZGRNYW55KHIoMHgyMCwgMHgzMCksIFBhcnNlclN0YXRlLkRDU19JTlRFUk1FRElBVEUsIFBhcnNlckFjdGlvbi5DT0xMRUNULCBQYXJzZXJTdGF0ZS5EQ1NfSU5URVJNRURJQVRFKTtcbiAgdGFibGUuYWRkTWFueShyKDB4MzAsIDB4NDApLCBQYXJzZXJTdGF0ZS5EQ1NfSU5URVJNRURJQVRFLCBQYXJzZXJBY3Rpb24uSUdOT1JFLCBQYXJzZXJTdGF0ZS5EQ1NfSUdOT1JFKTtcbiAgdGFibGUuYWRkTWFueShyKDB4NDAsIDB4N2YpLCBQYXJzZXJTdGF0ZS5EQ1NfSU5URVJNRURJQVRFLCBQYXJzZXJBY3Rpb24uRENTX0hPT0ssIFBhcnNlclN0YXRlLkRDU19QQVNTVEhST1VHSCk7XG4gIHRhYmxlLmFkZE1hbnkocigweDQwLCAweDdmKSwgUGFyc2VyU3RhdGUuRENTX1BBUkFNLCBQYXJzZXJBY3Rpb24uRENTX0hPT0ssIFBhcnNlclN0YXRlLkRDU19QQVNTVEhST1VHSCk7XG4gIHRhYmxlLmFkZE1hbnkocigweDQwLCAweDdmKSwgUGFyc2VyU3RhdGUuRENTX0VOVFJZLCBQYXJzZXJBY3Rpb24uRENTX0hPT0ssIFBhcnNlclN0YXRlLkRDU19QQVNTVEhST1VHSCk7XG4gIHRhYmxlLmFkZE1hbnkoRVhFQ1VUQUJMRVMsIFBhcnNlclN0YXRlLkRDU19QQVNTVEhST1VHSCwgUGFyc2VyQWN0aW9uLkRDU19QVVQsIFBhcnNlclN0YXRlLkRDU19QQVNTVEhST1VHSCk7XG4gIHRhYmxlLmFkZE1hbnkoUFJJTlRBQkxFUywgUGFyc2VyU3RhdGUuRENTX1BBU1NUSFJPVUdILCBQYXJzZXJBY3Rpb24uRENTX1BVVCwgUGFyc2VyU3RhdGUuRENTX1BBU1NUSFJPVUdIKTtcbiAgdGFibGUuYWRkKDB4N2YsIFBhcnNlclN0YXRlLkRDU19QQVNTVEhST1VHSCwgUGFyc2VyQWN0aW9uLklHTk9SRSwgUGFyc2VyU3RhdGUuRENTX1BBU1NUSFJPVUdIKTtcbiAgdGFibGUuYWRkTWFueShbMHgxYiwgMHg5YywgMHgxOCwgMHgxYV0sIFBhcnNlclN0YXRlLkRDU19QQVNTVEhST1VHSCwgUGFyc2VyQWN0aW9uLkRDU19VTkhPT0ssIFBhcnNlclN0YXRlLkdST1VORCk7XG4gIC8vIHNwZWNpYWwgaGFuZGxpbmcgb2YgdW5pY29kZSBjaGFyc1xuICB0YWJsZS5hZGQoTk9OX0FTQ0lJX1BSSU5UQUJMRSwgUGFyc2VyU3RhdGUuR1JPVU5ELCBQYXJzZXJBY3Rpb24uUFJJTlQsIFBhcnNlclN0YXRlLkdST1VORCk7XG4gIHRhYmxlLmFkZChOT05fQVNDSUlfUFJJTlRBQkxFLCBQYXJzZXJTdGF0ZS5PU0NfU1RSSU5HLCBQYXJzZXJBY3Rpb24uT1NDX1BVVCwgUGFyc2VyU3RhdGUuT1NDX1NUUklORyk7XG4gIHRhYmxlLmFkZChOT05fQVNDSUlfUFJJTlRBQkxFLCBQYXJzZXJTdGF0ZS5DU0lfSUdOT1JFLCBQYXJzZXJBY3Rpb24uSUdOT1JFLCBQYXJzZXJTdGF0ZS5DU0lfSUdOT1JFKTtcbiAgdGFibGUuYWRkKE5PTl9BU0NJSV9QUklOVEFCTEUsIFBhcnNlclN0YXRlLkRDU19JR05PUkUsIFBhcnNlckFjdGlvbi5JR05PUkUsIFBhcnNlclN0YXRlLkRDU19JR05PUkUpO1xuICB0YWJsZS5hZGQoTk9OX0FTQ0lJX1BSSU5UQUJMRSwgUGFyc2VyU3RhdGUuRENTX1BBU1NUSFJPVUdILCBQYXJzZXJBY3Rpb24uRENTX1BVVCwgUGFyc2VyU3RhdGUuRENTX1BBU1NUSFJPVUdIKTtcbiAgcmV0dXJuIHRhYmxlO1xufSkoKTtcblxuXG4vKipcbiAqIEVzY2FwZVNlcXVlbmNlUGFyc2VyLlxuICogVGhpcyBjbGFzcyBpbXBsZW1lbnRzIHRoZSBBTlNJL0RFQyBjb21wYXRpYmxlIHBhcnNlciBkZXNjcmliZWQgYnlcbiAqIFBhdWwgV2lsbGlhbXMgKGh0dHBzOi8vdnQxMDAubmV0L2VtdS9kZWNfYW5zaV9wYXJzZXIpLlxuICpcbiAqIFRvIGltcGxlbWVudCBjdXN0b20gQU5TSSBjb21wbGlhbnQgZXNjYXBlIHNlcXVlbmNlcyBpdCBpcyBub3QgbmVlZGVkIHRvXG4gKiBhbHRlciB0aGlzIHBhcnNlciwgaW5zdGVhZCBjb25zaWRlciByZWdpc3RlcmluZyBhIGN1c3RvbSBoYW5kbGVyLlxuICogRm9yIG5vbiBBTlNJIGNvbXBsaWFudCBzZXF1ZW5jZXMgY2hhbmdlIHRoZSB0cmFuc2l0aW9uIHRhYmxlIHdpdGhcbiAqIHRoZSBvcHRpb25hbCBgdHJhbnNpdGlvbnNgIGNvbnN0cnVjdG9yIGFyZ3VtZW50IGFuZFxuICogcmVpbXBsZW1lbnQgdGhlIGBwYXJzZWAgbWV0aG9kLlxuICpcbiAqIFRoaXMgcGFyc2VyIGlzIGN1cnJlbnRseSBoYXJkY29kZWQgdG8gb3BlcmF0ZSBpbiBaRE0gKFplcm8gRGVmYXVsdCBNb2RlKVxuICogYXMgc3VnZ2VzdGVkIGJ5IHRoZSBvcmlnaW5hbCBwYXJzZXIsIHRodXMgZW1wdHkgcGFyYW1ldGVycyBhcmUgc2V0IHRvIDAuXG4gKiBUaGlzIHRoaXMgaXMgbm90IGluIGxpbmUgd2l0aCB0aGUgbGF0ZXN0IEVDTUEtNDggc3BlY2lmaWNhdGlvblxuICogKFpETSB3YXMgcGFydCBvZiB0aGUgZWFybHkgc3BlY3MgYW5kIGdvdCBjb21wbGV0ZWx5IHJlbW92ZWQgbGF0ZXIgb24pLlxuICpcbiAqIE90aGVyIHRoYW4gdGhlIG9yaWdpbmFsIHBhcnNlciBmcm9tIHZ0MTAwLm5ldCB0aGlzIHBhcnNlciBzdXBwb3J0c1xuICogc3ViIHBhcmFtZXRlcnMgaW4gZGlnaXRhbCBwYXJhbWV0ZXJzIHNlcGFyYXRlZCBieSBjb2xvbnMuIEVtcHR5IHN1YiBwYXJhbWV0ZXJzXG4gKiBhcmUgc2V0IHRvIC0xIChubyBaRE0gZm9yIHN1YiBwYXJhbWV0ZXJzKS5cbiAqXG4gKiBBYm91dCBwcmVmaXggYW5kIGludGVybWVkaWF0ZSBieXRlczpcbiAqIFRoaXMgcGFyc2VyIGZvbGxvd3MgdGhlIGFzc3VtcHRpb25zIG9mIHRoZSB2dDEwMC5uZXQgcGFyc2VyIHdpdGggdGhlc2UgcmVzdHJpY3Rpb25zOlxuICogLSBvbmx5IG9uZSBwcmVmaXggYnl0ZSBpcyBhbGxvd2VkIGFzIGZpcnN0IHBhcmFtZXRlciBieXRlLCBieXRlIHJhbmdlIDB4M2MgLi4gMHgzZlxuICogLSBtYXguIHR3byBpbnRlcm1lZGlhdGVzIGFyZSByZXNwZWN0ZWQsIGJ5dGUgcmFuZ2UgMHgyMCAuLiAweDJmXG4gKiBOb3RlIHRoYXQgdGhpcyBpcyBub3QgaW4gbGluZSB3aXRoIEVDTUEtNDggd2hpY2ggZG9lcyBub3QgbGltaXQgZWl0aGVyIG9mIHRob3NlLlxuICogRnVydGhlcm1vcmUgRUNNQS00OCBhbGxvd3MgdGhlIHByZWZpeCBieXRlIHJhbmdlIGF0IGFueSBwYXJhbSBieXRlIHBvc2l0aW9uLiBDdXJyZW50bHlcbiAqIHRoZXJlIGFyZSBubyBrbm93biBzZXF1ZW5jZXMgdGhhdCBmb2xsb3cgdGhlIGJyb2FkZXIgZGVmaW5pdGlvbiBvZiB0aGUgc3BlY2lmaWNhdGlvbi5cbiAqXG4gKiBUT0RPOiBpbXBsZW1lbnQgZXJyb3IgcmVjb3ZlcnkgaG9vayB2aWEgZXJyb3IgaGFuZGxlciByZXR1cm4gdmFsdWVzXG4gKi9cbmV4cG9ydCBjbGFzcyBFc2NhcGVTZXF1ZW5jZVBhcnNlciBleHRlbmRzIERpc3Bvc2FibGUgaW1wbGVtZW50cyBJRXNjYXBlU2VxdWVuY2VQYXJzZXIge1xuICBwdWJsaWMgaW5pdGlhbFN0YXRlOiBudW1iZXI7XG4gIHB1YmxpYyBjdXJyZW50U3RhdGU6IG51bWJlcjtcbiAgcHVibGljIHByZWNlZGluZ0NvZGVwb2ludDogbnVtYmVyO1xuXG4gIC8vIGJ1ZmZlcnMgb3ZlciBzZXZlcmFsIHBhcnNlIGNhbGxzXG4gIHByb3RlY3RlZCBfcGFyYW1zOiBQYXJhbXM7XG4gIHByb3RlY3RlZCBfY29sbGVjdDogbnVtYmVyO1xuXG4gIC8vIGhhbmRsZXIgbG9va3VwIGNvbnRhaW5lcnNcbiAgcHJvdGVjdGVkIF9wcmludEhhbmRsZXI6IFByaW50SGFuZGxlclR5cGU7XG4gIHByb3RlY3RlZCBfZXhlY3V0ZUhhbmRsZXJzOiB7IFtmbGFnOiBudW1iZXJdOiBFeGVjdXRlSGFuZGxlclR5cGUgfTtcbiAgcHJvdGVjdGVkIF9jc2lIYW5kbGVyczogSUhhbmRsZXJDb2xsZWN0aW9uPENzaUhhbmRsZXJUeXBlPjtcbiAgcHJvdGVjdGVkIF9lc2NIYW5kbGVyczogSUhhbmRsZXJDb2xsZWN0aW9uPEVzY0hhbmRsZXJUeXBlPjtcbiAgcHJvdGVjdGVkIF9vc2NQYXJzZXI6IElPc2NQYXJzZXI7XG4gIHByb3RlY3RlZCBfZGNzUGFyc2VyOiBJRGNzUGFyc2VyO1xuICBwcm90ZWN0ZWQgX2Vycm9ySGFuZGxlcjogKHN0YXRlOiBJUGFyc2luZ1N0YXRlKSA9PiBJUGFyc2luZ1N0YXRlO1xuXG4gIC8vIGZhbGxiYWNrIGhhbmRsZXJzXG4gIHByb3RlY3RlZCBfcHJpbnRIYW5kbGVyRmI6IFByaW50RmFsbGJhY2tIYW5kbGVyVHlwZTtcbiAgcHJvdGVjdGVkIF9leGVjdXRlSGFuZGxlckZiOiBFeGVjdXRlRmFsbGJhY2tIYW5kbGVyVHlwZTtcbiAgcHJvdGVjdGVkIF9jc2lIYW5kbGVyRmI6IENzaUZhbGxiYWNrSGFuZGxlclR5cGU7XG4gIHByb3RlY3RlZCBfZXNjSGFuZGxlckZiOiBFc2NGYWxsYmFja0hhbmRsZXJUeXBlO1xuICBwcm90ZWN0ZWQgX2Vycm9ySGFuZGxlckZiOiAoc3RhdGU6IElQYXJzaW5nU3RhdGUpID0+IElQYXJzaW5nU3RhdGU7XG5cbiAgLy8gcGFyc2VyIHN0YWNrIHNhdmUgZm9yIGFzeW5jIGhhbmRsZXIgc3VwcG9ydFxuICBwcm90ZWN0ZWQgX3BhcnNlU3RhY2s6IElQYXJzZXJTdGFja1N0YXRlID0ge1xuICAgIHN0YXRlOiBQYXJzZXJTdGFja1R5cGUuTk9ORSxcbiAgICBoYW5kbGVyczogW10sXG4gICAgaGFuZGxlclBvczogMCxcbiAgICB0cmFuc2l0aW9uOiAwLFxuICAgIGNodW5rUG9zOiAwXG4gIH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IF90cmFuc2l0aW9uczogVHJhbnNpdGlvblRhYmxlID0gVlQ1MDBfVFJBTlNJVElPTl9UQUJMRVxuICApIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5pbml0aWFsU3RhdGUgPSBQYXJzZXJTdGF0ZS5HUk9VTkQ7XG4gICAgdGhpcy5jdXJyZW50U3RhdGUgPSB0aGlzLmluaXRpYWxTdGF0ZTtcbiAgICB0aGlzLl9wYXJhbXMgPSBuZXcgUGFyYW1zKCk7IC8vIGRlZmF1bHRzIHRvIDMyIHN0b3JhYmxlIHBhcmFtcy9zdWJwYXJhbXNcbiAgICB0aGlzLl9wYXJhbXMuYWRkUGFyYW0oMCk7ICAgIC8vIFpETVxuICAgIHRoaXMuX2NvbGxlY3QgPSAwO1xuICAgIHRoaXMucHJlY2VkaW5nQ29kZXBvaW50ID0gMDtcblxuICAgIC8vIHNldCBkZWZhdWx0IGZhbGxiYWNrIGhhbmRsZXJzIGFuZCBoYW5kbGVyIGxvb2t1cCBjb250YWluZXJzXG4gICAgdGhpcy5fcHJpbnRIYW5kbGVyRmIgPSAoZGF0YSwgc3RhcnQsIGVuZCk6IHZvaWQgPT4geyB9O1xuICAgIHRoaXMuX2V4ZWN1dGVIYW5kbGVyRmIgPSAoY29kZTogbnVtYmVyKTogdm9pZCA9PiB7IH07XG4gICAgdGhpcy5fY3NpSGFuZGxlckZiID0gKGlkZW50OiBudW1iZXIsIHBhcmFtczogSVBhcmFtcyk6IHZvaWQgPT4geyB9O1xuICAgIHRoaXMuX2VzY0hhbmRsZXJGYiA9IChpZGVudDogbnVtYmVyKTogdm9pZCA9PiB7IH07XG4gICAgdGhpcy5fZXJyb3JIYW5kbGVyRmIgPSAoc3RhdGU6IElQYXJzaW5nU3RhdGUpOiBJUGFyc2luZ1N0YXRlID0+IHN0YXRlO1xuICAgIHRoaXMuX3ByaW50SGFuZGxlciA9IHRoaXMuX3ByaW50SGFuZGxlckZiO1xuICAgIHRoaXMuX2V4ZWN1dGVIYW5kbGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fY3NpSGFuZGxlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2VzY0hhbmRsZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9vc2NQYXJzZXIgPSBuZXcgT3NjUGFyc2VyKCk7XG4gICAgdGhpcy5fZGNzUGFyc2VyID0gbmV3IERjc1BhcnNlcigpO1xuICAgIHRoaXMuX2Vycm9ySGFuZGxlciA9IHRoaXMuX2Vycm9ySGFuZGxlckZiO1xuXG4gICAgLy8gc3dhbGxvdyA3Yml0IFNUIChFU0MrXFwpXG4gICAgdGhpcy5yZWdpc3RlckVzY0hhbmRsZXIoeyBmaW5hbDogJ1xcXFwnIH0sICgpID0+IHRydWUpO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9pZGVudGlmaWVyKGlkOiBJRnVuY3Rpb25JZGVudGlmaWVyLCBmaW5hbFJhbmdlOiBudW1iZXJbXSA9IFsweDQwLCAweDdlXSk6IG51bWJlciB7XG4gICAgbGV0IHJlcyA9IDA7XG4gICAgaWYgKGlkLnByZWZpeCkge1xuICAgICAgaWYgKGlkLnByZWZpeC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignb25seSBvbmUgYnl0ZSBhcyBwcmVmaXggc3VwcG9ydGVkJyk7XG4gICAgICB9XG4gICAgICByZXMgPSBpZC5wcmVmaXguY2hhckNvZGVBdCgwKTtcbiAgICAgIGlmIChyZXMgJiYgMHgzYyA+IHJlcyB8fCByZXMgPiAweDNmKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncHJlZml4IG11c3QgYmUgaW4gcmFuZ2UgMHgzYyAuLiAweDNmJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpZC5pbnRlcm1lZGlhdGVzKSB7XG4gICAgICBpZiAoaWQuaW50ZXJtZWRpYXRlcy5sZW5ndGggPiAyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignb25seSB0d28gYnl0ZXMgYXMgaW50ZXJtZWRpYXRlcyBhcmUgc3VwcG9ydGVkJyk7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlkLmludGVybWVkaWF0ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgaW50ZXJtZWRpYXRlID0gaWQuaW50ZXJtZWRpYXRlcy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBpZiAoMHgyMCA+IGludGVybWVkaWF0ZSB8fCBpbnRlcm1lZGlhdGUgPiAweDJmKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnRlcm1lZGlhdGUgbXVzdCBiZSBpbiByYW5nZSAweDIwIC4uIDB4MmYnKTtcbiAgICAgICAgfVxuICAgICAgICByZXMgPDw9IDg7XG4gICAgICAgIHJlcyB8PSBpbnRlcm1lZGlhdGU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpZC5maW5hbC5sZW5ndGggIT09IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZmluYWwgbXVzdCBiZSBhIHNpbmdsZSBieXRlJyk7XG4gICAgfVxuICAgIGNvbnN0IGZpbmFsQ29kZSA9IGlkLmZpbmFsLmNoYXJDb2RlQXQoMCk7XG4gICAgaWYgKGZpbmFsUmFuZ2VbMF0gPiBmaW5hbENvZGUgfHwgZmluYWxDb2RlID4gZmluYWxSYW5nZVsxXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBmaW5hbCBtdXN0IGJlIGluIHJhbmdlICR7ZmluYWxSYW5nZVswXX0gLi4gJHtmaW5hbFJhbmdlWzFdfWApO1xuICAgIH1cbiAgICByZXMgPDw9IDg7XG4gICAgcmVzIHw9IGZpbmFsQ29kZTtcblxuICAgIHJldHVybiByZXM7XG4gIH1cblxuICBwdWJsaWMgaWRlbnRUb1N0cmluZyhpZGVudDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBjb25zdCByZXM6IHN0cmluZ1tdID0gW107XG4gICAgd2hpbGUgKGlkZW50KSB7XG4gICAgICByZXMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGlkZW50ICYgMHhGRikpO1xuICAgICAgaWRlbnQgPj49IDg7XG4gICAgfVxuICAgIHJldHVybiByZXMucmV2ZXJzZSgpLmpvaW4oJycpO1xuICB9XG5cbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5fY3NpSGFuZGxlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V4ZWN1dGVIYW5kbGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fZXNjSGFuZGxlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX29zY1BhcnNlci5kaXNwb3NlKCk7XG4gICAgdGhpcy5fZGNzUGFyc2VyLmRpc3Bvc2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRQcmludEhhbmRsZXIoaGFuZGxlcjogUHJpbnRIYW5kbGVyVHlwZSk6IHZvaWQge1xuICAgIHRoaXMuX3ByaW50SGFuZGxlciA9IGhhbmRsZXI7XG4gIH1cbiAgcHVibGljIGNsZWFyUHJpbnRIYW5kbGVyKCk6IHZvaWQge1xuICAgIHRoaXMuX3ByaW50SGFuZGxlciA9IHRoaXMuX3ByaW50SGFuZGxlckZiO1xuICB9XG5cbiAgcHVibGljIHJlZ2lzdGVyRXNjSGFuZGxlcihpZDogSUZ1bmN0aW9uSWRlbnRpZmllciwgaGFuZGxlcjogRXNjSGFuZGxlclR5cGUpOiBJRGlzcG9zYWJsZSB7XG4gICAgY29uc3QgaWRlbnQgPSB0aGlzLl9pZGVudGlmaWVyKGlkLCBbMHgzMCwgMHg3ZV0pO1xuICAgIGlmICh0aGlzLl9lc2NIYW5kbGVyc1tpZGVudF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fZXNjSGFuZGxlcnNbaWRlbnRdID0gW107XG4gICAgfVxuICAgIGNvbnN0IGhhbmRsZXJMaXN0ID0gdGhpcy5fZXNjSGFuZGxlcnNbaWRlbnRdO1xuICAgIGhhbmRsZXJMaXN0LnB1c2goaGFuZGxlcik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgY29uc3QgaGFuZGxlckluZGV4ID0gaGFuZGxlckxpc3QuaW5kZXhPZihoYW5kbGVyKTtcbiAgICAgICAgaWYgKGhhbmRsZXJJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICBoYW5kbGVyTGlzdC5zcGxpY2UoaGFuZGxlckluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgcHVibGljIGNsZWFyRXNjSGFuZGxlcihpZDogSUZ1bmN0aW9uSWRlbnRpZmllcik6IHZvaWQge1xuICAgIGlmICh0aGlzLl9lc2NIYW5kbGVyc1t0aGlzLl9pZGVudGlmaWVyKGlkLCBbMHgzMCwgMHg3ZV0pXSkgZGVsZXRlIHRoaXMuX2VzY0hhbmRsZXJzW3RoaXMuX2lkZW50aWZpZXIoaWQsIFsweDMwLCAweDdlXSldO1xuICB9XG4gIHB1YmxpYyBzZXRFc2NIYW5kbGVyRmFsbGJhY2soaGFuZGxlcjogRXNjRmFsbGJhY2tIYW5kbGVyVHlwZSk6IHZvaWQge1xuICAgIHRoaXMuX2VzY0hhbmRsZXJGYiA9IGhhbmRsZXI7XG4gIH1cblxuICBwdWJsaWMgc2V0RXhlY3V0ZUhhbmRsZXIoZmxhZzogc3RyaW5nLCBoYW5kbGVyOiBFeGVjdXRlSGFuZGxlclR5cGUpOiB2b2lkIHtcbiAgICB0aGlzLl9leGVjdXRlSGFuZGxlcnNbZmxhZy5jaGFyQ29kZUF0KDApXSA9IGhhbmRsZXI7XG4gIH1cbiAgcHVibGljIGNsZWFyRXhlY3V0ZUhhbmRsZXIoZmxhZzogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2V4ZWN1dGVIYW5kbGVyc1tmbGFnLmNoYXJDb2RlQXQoMCldKSBkZWxldGUgdGhpcy5fZXhlY3V0ZUhhbmRsZXJzW2ZsYWcuY2hhckNvZGVBdCgwKV07XG4gIH1cbiAgcHVibGljIHNldEV4ZWN1dGVIYW5kbGVyRmFsbGJhY2soaGFuZGxlcjogRXhlY3V0ZUZhbGxiYWNrSGFuZGxlclR5cGUpOiB2b2lkIHtcbiAgICB0aGlzLl9leGVjdXRlSGFuZGxlckZiID0gaGFuZGxlcjtcbiAgfVxuXG4gIHB1YmxpYyByZWdpc3RlckNzaUhhbmRsZXIoaWQ6IElGdW5jdGlvbklkZW50aWZpZXIsIGhhbmRsZXI6IENzaUhhbmRsZXJUeXBlKTogSURpc3Bvc2FibGUge1xuICAgIGNvbnN0IGlkZW50ID0gdGhpcy5faWRlbnRpZmllcihpZCk7XG4gICAgaWYgKHRoaXMuX2NzaUhhbmRsZXJzW2lkZW50XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9jc2lIYW5kbGVyc1tpZGVudF0gPSBbXTtcbiAgICB9XG4gICAgY29uc3QgaGFuZGxlckxpc3QgPSB0aGlzLl9jc2lIYW5kbGVyc1tpZGVudF07XG4gICAgaGFuZGxlckxpc3QucHVzaChoYW5kbGVyKTtcbiAgICByZXR1cm4ge1xuICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICBjb25zdCBoYW5kbGVySW5kZXggPSBoYW5kbGVyTGlzdC5pbmRleE9mKGhhbmRsZXIpO1xuICAgICAgICBpZiAoaGFuZGxlckluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIGhhbmRsZXJMaXN0LnNwbGljZShoYW5kbGVySW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBwdWJsaWMgY2xlYXJDc2lIYW5kbGVyKGlkOiBJRnVuY3Rpb25JZGVudGlmaWVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2NzaUhhbmRsZXJzW3RoaXMuX2lkZW50aWZpZXIoaWQpXSkgZGVsZXRlIHRoaXMuX2NzaUhhbmRsZXJzW3RoaXMuX2lkZW50aWZpZXIoaWQpXTtcbiAgfVxuICBwdWJsaWMgc2V0Q3NpSGFuZGxlckZhbGxiYWNrKGNhbGxiYWNrOiAoaWRlbnQ6IG51bWJlciwgcGFyYW1zOiBJUGFyYW1zKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5fY3NpSGFuZGxlckZiID0gY2FsbGJhY2s7XG4gIH1cblxuICBwdWJsaWMgcmVnaXN0ZXJEY3NIYW5kbGVyKGlkOiBJRnVuY3Rpb25JZGVudGlmaWVyLCBoYW5kbGVyOiBJRGNzSGFuZGxlcik6IElEaXNwb3NhYmxlIHtcbiAgICByZXR1cm4gdGhpcy5fZGNzUGFyc2VyLnJlZ2lzdGVySGFuZGxlcih0aGlzLl9pZGVudGlmaWVyKGlkKSwgaGFuZGxlcik7XG4gIH1cbiAgcHVibGljIGNsZWFyRGNzSGFuZGxlcihpZDogSUZ1bmN0aW9uSWRlbnRpZmllcik6IHZvaWQge1xuICAgIHRoaXMuX2Rjc1BhcnNlci5jbGVhckhhbmRsZXIodGhpcy5faWRlbnRpZmllcihpZCkpO1xuICB9XG4gIHB1YmxpYyBzZXREY3NIYW5kbGVyRmFsbGJhY2soaGFuZGxlcjogRGNzRmFsbGJhY2tIYW5kbGVyVHlwZSk6IHZvaWQge1xuICAgIHRoaXMuX2Rjc1BhcnNlci5zZXRIYW5kbGVyRmFsbGJhY2soaGFuZGxlcik7XG4gIH1cblxuICBwdWJsaWMgcmVnaXN0ZXJPc2NIYW5kbGVyKGlkZW50OiBudW1iZXIsIGhhbmRsZXI6IElPc2NIYW5kbGVyKTogSURpc3Bvc2FibGUge1xuICAgIHJldHVybiB0aGlzLl9vc2NQYXJzZXIucmVnaXN0ZXJIYW5kbGVyKGlkZW50LCBoYW5kbGVyKTtcbiAgfVxuICBwdWJsaWMgY2xlYXJPc2NIYW5kbGVyKGlkZW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9vc2NQYXJzZXIuY2xlYXJIYW5kbGVyKGlkZW50KTtcbiAgfVxuICBwdWJsaWMgc2V0T3NjSGFuZGxlckZhbGxiYWNrKGhhbmRsZXI6IE9zY0ZhbGxiYWNrSGFuZGxlclR5cGUpOiB2b2lkIHtcbiAgICB0aGlzLl9vc2NQYXJzZXIuc2V0SGFuZGxlckZhbGxiYWNrKGhhbmRsZXIpO1xuICB9XG5cbiAgcHVibGljIHNldEVycm9ySGFuZGxlcihjYWxsYmFjazogKHN0YXRlOiBJUGFyc2luZ1N0YXRlKSA9PiBJUGFyc2luZ1N0YXRlKTogdm9pZCB7XG4gICAgdGhpcy5fZXJyb3JIYW5kbGVyID0gY2FsbGJhY2s7XG4gIH1cbiAgcHVibGljIGNsZWFyRXJyb3JIYW5kbGVyKCk6IHZvaWQge1xuICAgIHRoaXMuX2Vycm9ySGFuZGxlciA9IHRoaXMuX2Vycm9ySGFuZGxlckZiO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0IHBhcnNlciB0byBpbml0aWFsIHZhbHVlcy5cbiAgICpcbiAgICogVGhpcyBjYW4gYWxzbyBiZSB1c2VkIHRvIGxpZnQgdGhlIGltcHJvcGVyIGNvbnRpbnVhdGlvbiBlcnJvciBjb25kaXRpb25cbiAgICogd2hlbiBkZWFsaW5nIHdpdGggYXN5bmMgaGFuZGxlcnMuIFVzZSB0aGlzIG9ubHkgYXMgYSBsYXN0IHJlc29ydCB0byBzaWxlbmNlXG4gICAqIHRoYXQgZXJyb3Igd2hlbiB0aGUgdGVybWluYWwgaGFzIG5vIHBlbmRpbmcgZGF0YSB0byBiZSBwcm9jZXNzZWQuIE5vdGUgdGhhdFxuICAgKiB0aGUgaW50ZXJydXB0ZWQgYXN5bmMgaGFuZGxlciBtaWdodCBjb250aW51ZSBpdHMgd29yayBpbiB0aGUgZnV0dXJlIG1lc3NpbmdcbiAgICogdXAgdGhlIHRlcm1pbmFsIHN0YXRlIGV2ZW4gZnVydGhlci5cbiAgICovXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcbiAgICB0aGlzLmN1cnJlbnRTdGF0ZSA9IHRoaXMuaW5pdGlhbFN0YXRlO1xuICAgIHRoaXMuX29zY1BhcnNlci5yZXNldCgpO1xuICAgIHRoaXMuX2Rjc1BhcnNlci5yZXNldCgpO1xuICAgIHRoaXMuX3BhcmFtcy5yZXNldCgpO1xuICAgIHRoaXMuX3BhcmFtcy5hZGRQYXJhbSgwKTsgLy8gWkRNXG4gICAgdGhpcy5fY29sbGVjdCA9IDA7XG4gICAgdGhpcy5wcmVjZWRpbmdDb2RlcG9pbnQgPSAwO1xuICAgIC8vIGFib3J0IHBlbmRpbmcgY29udGludWF0aW9uIGZyb20gYXN5bmMgaGFuZGxlclxuICAgIC8vIEhlcmUgdGhlIFJFU0VUIHR5cGUgaW5kaWNhdGVzLCB0aGF0IHRoZSBuZXh0IHBhcnNlIGNhbGwgd2lsbFxuICAgIC8vIGlnbm9yZSBhbnkgc2F2ZWQgc3RhY2ssIGluc3RlYWQgY29udGludWVzIHN5bmMgd2l0aCBuZXh0IGNvZGVwb2ludCBmcm9tIEdST1VORFxuICAgIGlmICh0aGlzLl9wYXJzZVN0YWNrLnN0YXRlICE9PSBQYXJzZXJTdGFja1R5cGUuTk9ORSkge1xuICAgICAgdGhpcy5fcGFyc2VTdGFjay5zdGF0ZSA9IFBhcnNlclN0YWNrVHlwZS5SRVNFVDtcbiAgICAgIHRoaXMuX3BhcnNlU3RhY2suaGFuZGxlcnMgPSBbXTsgLy8gYWxzbyByZWxlYXNlIGhhbmRsZXJzIHJlZlxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBc3luYyBwYXJzZSBzdXBwb3J0LlxuICAgKi9cbiAgcHJvdGVjdGVkIF9wcmVzZXJ2ZVN0YWNrKFxuICAgIHN0YXRlOiBQYXJzZXJTdGFja1R5cGUsXG4gICAgaGFuZGxlcnM6IFJlc3VtYWJsZUhhbmRsZXJzVHlwZSxcbiAgICBoYW5kbGVyUG9zOiBudW1iZXIsXG4gICAgdHJhbnNpdGlvbjogbnVtYmVyLFxuICAgIGNodW5rUG9zOiBudW1iZXJcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5fcGFyc2VTdGFjay5zdGF0ZSA9IHN0YXRlO1xuICAgIHRoaXMuX3BhcnNlU3RhY2suaGFuZGxlcnMgPSBoYW5kbGVycztcbiAgICB0aGlzLl9wYXJzZVN0YWNrLmhhbmRsZXJQb3MgPSBoYW5kbGVyUG9zO1xuICAgIHRoaXMuX3BhcnNlU3RhY2sudHJhbnNpdGlvbiA9IHRyYW5zaXRpb247XG4gICAgdGhpcy5fcGFyc2VTdGFjay5jaHVua1BvcyA9IGNodW5rUG9zO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlIFVURjMyIGNvZGVwb2ludHMgaW4gYGRhdGFgIHVwIHRvIGBsZW5ndGhgLlxuICAgKlxuICAgKiBOb3RlOiBGb3Igc2V2ZXJhbCBhY3Rpb25zIHdpdGggaGlnaCBkYXRhIGxvYWQgdGhlIHBhcnNpbmcgaXMgb3B0aW1pemVkXG4gICAqIGJ5IHVzaW5nIGxvY2FsIHJlYWQgYWhlYWQgbG9vcHMgd2l0aCBoYXJkY29kZWQgY29uZGl0aW9ucyB0b1xuICAgKiBhdm9pZCBjb3N0bHkgdGFibGUgbG9va3Vwcy4gTWFrZSBzdXJlIHRoYXQgYW55IGNoYW5nZSBvZiB0YWJsZSB2YWx1ZXNcbiAgICogd2lsbCBiZSByZWZsZWN0ZWQgaW4gdGhlIGxvb3AgY29uZGl0aW9ucyBhcyB3ZWxsIGFuZCB2aWNlIHZlcnNhLlxuICAgKiBBZmZlY3RlZCBzdGF0ZXMvYWN0aW9uczpcbiAgICogLSBHUk9VTkQ6UFJJTlRcbiAgICogLSBDU0lfUEFSQU06UEFSQU1cbiAgICogLSBEQ1NfUEFSQU06UEFSQU1cbiAgICogLSBPU0NfU1RSSU5HOk9TQ19QVVRcbiAgICogLSBEQ1NfUEFTU1RIUk9VR0g6RENTX1BVVFxuICAgKlxuICAgKiBOb3RlIG9uIGFzeW5jaHJvbm91cyBoYW5kbGVyIHN1cHBvcnQ6XG4gICAqIEFueSBoYW5kbGVyIHJldHVybmluZyBhIHByb21pc2Ugd2lsbCBiZSB0cmVhdGVkIGFzIGFzeW5jaHJvbm91cy5cbiAgICogVG8ga2VlcCB0aGUgaW4tYmFuZCBibG9ja2luZyB3b3JraW5nIGZvciBhc3luYyBoYW5kbGVycywgYHBhcnNlYCBwYXVzZXMgZXhlY3V0aW9uLFxuICAgKiBjcmVhdGVzIGEgc3RhY2sgc2F2ZSBhbmQgcmV0dXJucyB0aGUgcHJvbWlzZSB0byB0aGUgY2FsbGVyLlxuICAgKiBGb3IgcHJvcGVyIGNvbnRpbnVhdGlvbiBvZiB0aGUgcGF1c2VkIHN0YXRlIGl0IGlzIGltcG9ydGFudFxuICAgKiB0byBhd2FpdCB0aGUgcHJvbWlzZSByZXNvbHZpbmcuIE9uIHJlc29sdmUgdGhlIHBhcnNlIG11c3QgYmUgcmVwZWF0ZWRcbiAgICogd2l0aCB0aGUgc2FtZSBjaHVuayBvZiBkYXRhIGFuZCB0aGUgcmVzb2x2ZWQgdmFsdWUgaW4gYHByb21pc2VSZXN1bHRgXG4gICAqIHVudGlsIG5vIHByb21pc2UgaXMgcmV0dXJuZWQuXG4gICAqXG4gICAqIEltcG9ydGFudDogV2l0aCBvbmx5IHN5bmMgaGFuZGxlcnMgZGVmaW5lZCwgcGFyc2luZyBpcyBjb21wbGV0ZWx5IHN5bmNocm9ub3VzIGFzIHdlbGwuXG4gICAqIEFzIHNvb24gYXMgYW4gYXN5bmMgaGFuZGxlciBpcyBpbnZvbHZlZCwgc3luY2hyb25vdXMgcGFyc2luZyBpcyBub3QgcG9zc2libGUgYW55bW9yZS5cbiAgICpcbiAgICogQm9pbGVycGxhdGUgZm9yIHByb3BlciBwYXJzaW5nIG9mIG11bHRpcGxlIGNodW5rcyB3aXRoIGFzeW5jIGhhbmRsZXJzOlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGFzeW5jIGZ1bmN0aW9uIHBhcnNlTXVsdGlwbGVDaHVua3MoY2h1bmtzOiBVaW50MzJBcnJheVtdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAqICAgZm9yIChjb25zdCBjaHVuayBvZiBjaHVua3MpIHtcbiAgICogICAgIGxldCByZXN1bHQ6IHZvaWQgfCBQcm9taXNlPGJvb2xlYW4+O1xuICAgKiAgICAgbGV0IHByZXY6IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG4gICAqICAgICB3aGlsZSAocmVzdWx0ID0gcGFyc2VyLnBhcnNlKGNodW5rLCBjaHVuay5sZW5ndGgsIHByZXYpKSB7XG4gICAqICAgICAgIHByZXYgPSBhd2FpdCByZXN1bHQ7XG4gICAqICAgICB9XG4gICAqICAgfVxuICAgKiAgIC8vIGZpbmlzaGVkIHBhcnNpbmcgYWxsIGNodW5rcy4uLlxuICAgKiB9XG4gICAqIGBgYFxuICAgKi9cbiAgcHVibGljIHBhcnNlKGRhdGE6IFVpbnQzMkFycmF5LCBsZW5ndGg6IG51bWJlciwgcHJvbWlzZVJlc3VsdD86IGJvb2xlYW4pOiB2b2lkIHwgUHJvbWlzZTxib29sZWFuPiB7XG4gICAgbGV0IGNvZGUgPSAwO1xuICAgIGxldCB0cmFuc2l0aW9uID0gMDtcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGxldCBoYW5kbGVyUmVzdWx0OiB2b2lkIHwgYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgICAvLyByZXN1bWUgZnJvbSBhc3luYyBoYW5kbGVyXG4gICAgaWYgKHRoaXMuX3BhcnNlU3RhY2suc3RhdGUpIHtcbiAgICAgIC8vIGFsbG93IHN5bmMgcGFyc2VyIHJlc2V0IGV2ZW4gaW4gY29udGludWF0aW9uIG1vZGVcbiAgICAgIC8vIE5vdGU6IGNhbiBiZSB1c2VkIHRvIHJlY292ZXIgcGFyc2VyIGZyb20gaW1wcm9wZXIgY29udGludWF0aW9uIGVycm9yIGJlbG93XG4gICAgICBpZiAodGhpcy5fcGFyc2VTdGFjay5zdGF0ZSA9PT0gUGFyc2VyU3RhY2tUeXBlLlJFU0VUKSB7XG4gICAgICAgIHRoaXMuX3BhcnNlU3RhY2suc3RhdGUgPSBQYXJzZXJTdGFja1R5cGUuTk9ORTtcbiAgICAgICAgc3RhcnQgPSB0aGlzLl9wYXJzZVN0YWNrLmNodW5rUG9zICsgMTsgLy8gY29udGludWUgd2l0aCBuZXh0IGNvZGVwb2ludCBpbiBHUk9VTkRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9taXNlUmVzdWx0ID09PSB1bmRlZmluZWQgfHwgdGhpcy5fcGFyc2VTdGFjay5zdGF0ZSA9PT0gUGFyc2VyU3RhY2tUeXBlLkZBSUwpIHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBSZWplY3QgZnVydGhlciBwYXJzaW5nIG9uIGltcHJvcGVyIGNvbnRpbnVhdGlvbiBhZnRlciBwYXVzaW5nLlxuICAgICAgICAgICAqIFRoaXMgaXMgYSByZWFsbHkgYmFkIGNvbmRpdGlvbiB3aXRoIHNjcmV3ZWQgdXAgZXhlY3V0aW9uIG9yZGVyIGFuZCBwcm9sbHkgbWVzc2VkIHVwXG4gICAgICAgICAgICogdGVybWluYWwgc3RhdGUsIHRoZXJlZm9yZSB3ZSBleGl0IGhhcmQgd2l0aCBhbiBleGNlcHRpb24gYW5kIHJlamVjdCBhbnkgZnVydGhlciBwYXJzaW5nLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogTm90ZTogV2l0aCBgVGVybWluYWwud3JpdGVgIHVzYWdlIHRoaXMgZXhjZXB0aW9uIHNob3VsZCBuZXZlciBvY2N1ciwgYXMgdGhlIHRvcCBsZXZlbFxuICAgICAgICAgICAqIGNhbGxzIGFyZSBndWFyYW50ZWVkIHRvIGhhbmRsZSBhc3luYyBjb25kaXRpb25zIHByb3Blcmx5LiBJZiB5b3UgZXZlciBlbmNvdW50ZXIgdGhpc1xuICAgICAgICAgICAqIGV4Y2VwdGlvbiBpbiB5b3VyIHRlcm1pbmFsIGludGVncmF0aW9uIGl0IGluZGljYXRlcywgdGhhdCB5b3UgaW5qZWN0ZWQgZGF0YSBjaHVua3MgdG9cbiAgICAgICAgICAgKiBgSW5wdXRIYW5kbGVyLnBhcnNlYCBvciBgRXNjYXBlU2VxdWVuY2VQYXJzZXIucGFyc2VgIHN5bmNocm9ub3VzbHkgd2l0aG91dCB3YWl0aW5nIGZvclxuICAgICAgICAgICAqIGNvbnRpbnVhdGlvbiBvZiBhIHJ1bm5pbmcgYXN5bmMgaGFuZGxlci5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEl0IGlzIHBvc3NpYmxlIHRvIGdldCByaWQgb2YgdGhpcyBlcnJvciBieSBjYWxsaW5nIGByZXNldGAuIEJ1dCBkb250IHJlbHkgb24gdGhhdCxcbiAgICAgICAgICAgKiBhcyB0aGUgcGVuZGluZyBhc3luYyBoYW5kbGVyIHN0aWxsIG1pZ2h0IG1lc3MgdXAgdGhlIHRlcm1pbmFsIGxhdGVyLiBJbnN0ZWFkIGZpeCB0aGUgZmF1bHR5XG4gICAgICAgICAgICogYXN5bmMgaGFuZGxpbmcsIHNvIHRoaXMgZXJyb3Igd2lsbCBub3QgYmUgdGhyb3duIGFueW1vcmUuXG4gICAgICAgICAgICovXG4gICAgICAgICAgdGhpcy5fcGFyc2VTdGFjay5zdGF0ZSA9IFBhcnNlclN0YWNrVHlwZS5GQUlMO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW1wcm9wZXIgY29udGludWF0aW9uIGR1ZSB0byBwcmV2aW91cyBhc3luYyBoYW5kbGVyLCBnaXZpbmcgdXAgcGFyc2luZycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gd2UgaGF2ZSB0byByZXN1bWUgdGhlIG9sZCBoYW5kbGVyIGxvb3AgaWY6XG4gICAgICAgIC8vIC0gcmV0dXJuIHZhbHVlIG9mIHRoZSBwcm9taXNlIHdhcyBgZmFsc2VgXG4gICAgICAgIC8vIC0gaGFuZGxlcnMgYXJlIG5vdCBleGhhdXN0ZWQgeWV0XG4gICAgICAgIGNvbnN0IGhhbmRsZXJzID0gdGhpcy5fcGFyc2VTdGFjay5oYW5kbGVycztcbiAgICAgICAgbGV0IGhhbmRsZXJQb3MgPSB0aGlzLl9wYXJzZVN0YWNrLmhhbmRsZXJQb3MgLSAxO1xuICAgICAgICBzd2l0Y2ggKHRoaXMuX3BhcnNlU3RhY2suc3RhdGUpIHtcbiAgICAgICAgICBjYXNlIFBhcnNlclN0YWNrVHlwZS5DU0k6XG4gICAgICAgICAgICBpZiAocHJvbWlzZVJlc3VsdCA9PT0gZmFsc2UgJiYgaGFuZGxlclBvcyA+IC0xKSB7XG4gICAgICAgICAgICAgIGZvciAoOyBoYW5kbGVyUG9zID49IDA7IGhhbmRsZXJQb3MtLSkge1xuICAgICAgICAgICAgICAgIGhhbmRsZXJSZXN1bHQgPSAoaGFuZGxlcnMgYXMgQ3NpSGFuZGxlclR5cGVbXSlbaGFuZGxlclBvc10odGhpcy5fcGFyYW1zKTtcbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlclJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyUmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5fcGFyc2VTdGFjay5oYW5kbGVyUG9zID0gaGFuZGxlclBvcztcbiAgICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVyUmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcGFyc2VTdGFjay5oYW5kbGVycyA9IFtdO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBQYXJzZXJTdGFja1R5cGUuRVNDOlxuICAgICAgICAgICAgaWYgKHByb21pc2VSZXN1bHQgPT09IGZhbHNlICYmIGhhbmRsZXJQb3MgPiAtMSkge1xuICAgICAgICAgICAgICBmb3IgKDsgaGFuZGxlclBvcyA+PSAwOyBoYW5kbGVyUG9zLS0pIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyUmVzdWx0ID0gKGhhbmRsZXJzIGFzIEVzY0hhbmRsZXJUeXBlW10pW2hhbmRsZXJQb3NdKCk7XG4gICAgICAgICAgICAgICAgaWYgKGhhbmRsZXJSZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlclJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuX3BhcnNlU3RhY2suaGFuZGxlclBvcyA9IGhhbmRsZXJQb3M7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlclJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3BhcnNlU3RhY2suaGFuZGxlcnMgPSBbXTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgUGFyc2VyU3RhY2tUeXBlLkRDUzpcbiAgICAgICAgICAgIGNvZGUgPSBkYXRhW3RoaXMuX3BhcnNlU3RhY2suY2h1bmtQb3NdO1xuICAgICAgICAgICAgaGFuZGxlclJlc3VsdCA9IHRoaXMuX2Rjc1BhcnNlci51bmhvb2soY29kZSAhPT0gMHgxOCAmJiBjb2RlICE9PSAweDFhLCBwcm9taXNlUmVzdWx0KTtcbiAgICAgICAgICAgIGlmIChoYW5kbGVyUmVzdWx0KSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGVyUmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvZGUgPT09IDB4MWIpIHRoaXMuX3BhcnNlU3RhY2sudHJhbnNpdGlvbiB8PSBQYXJzZXJTdGF0ZS5FU0NBUEU7XG4gICAgICAgICAgICB0aGlzLl9wYXJhbXMucmVzZXQoKTtcbiAgICAgICAgICAgIHRoaXMuX3BhcmFtcy5hZGRQYXJhbSgwKTsgLy8gWkRNXG4gICAgICAgICAgICB0aGlzLl9jb2xsZWN0ID0gMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgUGFyc2VyU3RhY2tUeXBlLk9TQzpcbiAgICAgICAgICAgIGNvZGUgPSBkYXRhW3RoaXMuX3BhcnNlU3RhY2suY2h1bmtQb3NdO1xuICAgICAgICAgICAgaGFuZGxlclJlc3VsdCA9IHRoaXMuX29zY1BhcnNlci5lbmQoY29kZSAhPT0gMHgxOCAmJiBjb2RlICE9PSAweDFhLCBwcm9taXNlUmVzdWx0KTtcbiAgICAgICAgICAgIGlmIChoYW5kbGVyUmVzdWx0KSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGVyUmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvZGUgPT09IDB4MWIpIHRoaXMuX3BhcnNlU3RhY2sudHJhbnNpdGlvbiB8PSBQYXJzZXJTdGF0ZS5FU0NBUEU7XG4gICAgICAgICAgICB0aGlzLl9wYXJhbXMucmVzZXQoKTtcbiAgICAgICAgICAgIHRoaXMuX3BhcmFtcy5hZGRQYXJhbSgwKTsgLy8gWkRNXG4gICAgICAgICAgICB0aGlzLl9jb2xsZWN0ID0gMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNsZWFudXAgYmVmb3JlIGNvbnRpbnVpbmcgd2l0aCB0aGUgbWFpbiBzeW5jIGxvb3BcbiAgICAgICAgdGhpcy5fcGFyc2VTdGFjay5zdGF0ZSA9IFBhcnNlclN0YWNrVHlwZS5OT05FO1xuICAgICAgICBzdGFydCA9IHRoaXMuX3BhcnNlU3RhY2suY2h1bmtQb3MgKyAxO1xuICAgICAgICB0aGlzLnByZWNlZGluZ0NvZGVwb2ludCA9IDA7XG4gICAgICAgIHRoaXMuY3VycmVudFN0YXRlID0gdGhpcy5fcGFyc2VTdGFjay50cmFuc2l0aW9uICYgVGFibGVBY2Nlc3MuVFJBTlNJVElPTl9TVEFURV9NQVNLO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvbnRpbnVlIHdpdGggbWFpbiBzeW5jIGxvb3BcblxuICAgIC8vIHByb2Nlc3MgaW5wdXQgc3RyaW5nXG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgIGNvZGUgPSBkYXRhW2ldO1xuXG4gICAgICAvLyBub3JtYWwgdHJhbnNpdGlvbiAmIGFjdGlvbiBsb29rdXBcbiAgICAgIHRyYW5zaXRpb24gPSB0aGlzLl90cmFuc2l0aW9ucy50YWJsZVt0aGlzLmN1cnJlbnRTdGF0ZSA8PCBUYWJsZUFjY2Vzcy5JTkRFWF9TVEFURV9TSElGVCB8IChjb2RlIDwgMHhhMCA/IGNvZGUgOiBOT05fQVNDSUlfUFJJTlRBQkxFKV07XG4gICAgICBzd2l0Y2ggKHRyYW5zaXRpb24gPj4gVGFibGVBY2Nlc3MuVFJBTlNJVElPTl9BQ1RJT05fU0hJRlQpIHtcbiAgICAgICAgY2FzZSBQYXJzZXJBY3Rpb24uUFJJTlQ6XG4gICAgICAgICAgLy8gcmVhZCBhaGVhZCB3aXRoIGxvb3AgdW5yb2xsaW5nXG4gICAgICAgICAgLy8gTm90ZTogMHgyMCAoU1ApIGlzIGluY2x1ZGVkLCAweDdGIChERUwpIGlzIGV4Y2x1ZGVkXG4gICAgICAgICAgZm9yIChsZXQgaiA9IGkgKyAxOyA7ICsraikge1xuICAgICAgICAgICAgaWYgKGogPj0gbGVuZ3RoIHx8IChjb2RlID0gZGF0YVtqXSkgPCAweDIwIHx8IChjb2RlID4gMHg3ZSAmJiBjb2RlIDwgTk9OX0FTQ0lJX1BSSU5UQUJMRSkpIHtcbiAgICAgICAgICAgICAgdGhpcy5fcHJpbnRIYW5kbGVyKGRhdGEsIGksIGopO1xuICAgICAgICAgICAgICBpID0gaiAtIDE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCsraiA+PSBsZW5ndGggfHwgKGNvZGUgPSBkYXRhW2pdKSA8IDB4MjAgfHwgKGNvZGUgPiAweDdlICYmIGNvZGUgPCBOT05fQVNDSUlfUFJJTlRBQkxFKSkge1xuICAgICAgICAgICAgICB0aGlzLl9wcmludEhhbmRsZXIoZGF0YSwgaSwgaik7XG4gICAgICAgICAgICAgIGkgPSBqIC0gMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKytqID49IGxlbmd0aCB8fCAoY29kZSA9IGRhdGFbal0pIDwgMHgyMCB8fCAoY29kZSA+IDB4N2UgJiYgY29kZSA8IE5PTl9BU0NJSV9QUklOVEFCTEUpKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3ByaW50SGFuZGxlcihkYXRhLCBpLCBqKTtcbiAgICAgICAgICAgICAgaSA9IGogLSAxO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgrK2ogPj0gbGVuZ3RoIHx8IChjb2RlID0gZGF0YVtqXSkgPCAweDIwIHx8IChjb2RlID4gMHg3ZSAmJiBjb2RlIDwgTk9OX0FTQ0lJX1BSSU5UQUJMRSkpIHtcbiAgICAgICAgICAgICAgdGhpcy5fcHJpbnRIYW5kbGVyKGRhdGEsIGksIGopO1xuICAgICAgICAgICAgICBpID0gaiAtIDE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBQYXJzZXJBY3Rpb24uRVhFQ1VURTpcbiAgICAgICAgICBpZiAodGhpcy5fZXhlY3V0ZUhhbmRsZXJzW2NvZGVdKSB0aGlzLl9leGVjdXRlSGFuZGxlcnNbY29kZV0oKTtcbiAgICAgICAgICBlbHNlIHRoaXMuX2V4ZWN1dGVIYW5kbGVyRmIoY29kZSk7XG4gICAgICAgICAgdGhpcy5wcmVjZWRpbmdDb2RlcG9pbnQgPSAwO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFBhcnNlckFjdGlvbi5JR05PUkU6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUGFyc2VyQWN0aW9uLkVSUk9SOlxuICAgICAgICAgIGNvbnN0IGluamVjdDogSVBhcnNpbmdTdGF0ZSA9IHRoaXMuX2Vycm9ySGFuZGxlcihcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgcG9zaXRpb246IGksXG4gICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgIGN1cnJlbnRTdGF0ZTogdGhpcy5jdXJyZW50U3RhdGUsXG4gICAgICAgICAgICAgIGNvbGxlY3Q6IHRoaXMuX2NvbGxlY3QsXG4gICAgICAgICAgICAgIHBhcmFtczogdGhpcy5fcGFyYW1zLFxuICAgICAgICAgICAgICBhYm9ydDogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChpbmplY3QuYWJvcnQpIHJldHVybjtcbiAgICAgICAgICAvLyBpbmplY3QgdmFsdWVzOiBjdXJyZW50bHkgbm90IGltcGxlbWVudGVkXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUGFyc2VyQWN0aW9uLkNTSV9ESVNQQVRDSDpcbiAgICAgICAgICAvLyBUcmlnZ2VyIENTSSBIYW5kbGVyXG4gICAgICAgICAgY29uc3QgaGFuZGxlcnMgPSB0aGlzLl9jc2lIYW5kbGVyc1t0aGlzLl9jb2xsZWN0IDw8IDggfCBjb2RlXTtcbiAgICAgICAgICBsZXQgaiA9IGhhbmRsZXJzID8gaGFuZGxlcnMubGVuZ3RoIC0gMSA6IC0xO1xuICAgICAgICAgIGZvciAoOyBqID49IDA7IGotLSkge1xuICAgICAgICAgICAgLy8gdHJ1ZSBtZWFucyBzdWNjZXNzIGFuZCB0byBzdG9wIGJ1YmJsaW5nXG4gICAgICAgICAgICAvLyBhIHByb21pc2UgaW5kaWNhdGVzIGFuIGFzeW5jIGhhbmRsZXIgdGhhdCBuZWVkcyB0byBmaW5pc2ggYmVmb3JlIHByb2dyZXNzaW5nXG4gICAgICAgICAgICBoYW5kbGVyUmVzdWx0ID0gaGFuZGxlcnNbal0odGhpcy5fcGFyYW1zKTtcbiAgICAgICAgICAgIGlmIChoYW5kbGVyUmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyUmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgICB0aGlzLl9wcmVzZXJ2ZVN0YWNrKFBhcnNlclN0YWNrVHlwZS5DU0ksIGhhbmRsZXJzLCBqLCB0cmFuc2l0aW9uLCBpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXJSZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChqIDwgMCkge1xuICAgICAgICAgICAgdGhpcy5fY3NpSGFuZGxlckZiKHRoaXMuX2NvbGxlY3QgPDwgOCB8IGNvZGUsIHRoaXMuX3BhcmFtcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMucHJlY2VkaW5nQ29kZXBvaW50ID0gMDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBQYXJzZXJBY3Rpb24uUEFSQU06XG4gICAgICAgICAgLy8gaW5uZXIgbG9vcDogZGlnaXRzICgweDMwIC0gMHgzOSkgYW5kIDsgKDB4M2IpIGFuZCA6ICgweDNhKVxuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgICAgICAgICBjYXNlIDB4M2I6XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyYW1zLmFkZFBhcmFtKDApOyAgLy8gWkRNXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMHgzYTpcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJhbXMuYWRkU3ViUGFyYW0oLTEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OiAgLy8gMHgzMCAtIDB4MzlcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJhbXMuYWRkRGlnaXQoY29kZSAtIDQ4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IHdoaWxlICgrK2kgPCBsZW5ndGggJiYgKGNvZGUgPSBkYXRhW2ldKSA+IDB4MmYgJiYgY29kZSA8IDB4M2MpO1xuICAgICAgICAgIGktLTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBQYXJzZXJBY3Rpb24uQ09MTEVDVDpcbiAgICAgICAgICB0aGlzLl9jb2xsZWN0IDw8PSA4O1xuICAgICAgICAgIHRoaXMuX2NvbGxlY3QgfD0gY29kZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBQYXJzZXJBY3Rpb24uRVNDX0RJU1BBVENIOlxuICAgICAgICAgIGNvbnN0IGhhbmRsZXJzRXNjID0gdGhpcy5fZXNjSGFuZGxlcnNbdGhpcy5fY29sbGVjdCA8PCA4IHwgY29kZV07XG4gICAgICAgICAgbGV0IGpqID0gaGFuZGxlcnNFc2MgPyBoYW5kbGVyc0VzYy5sZW5ndGggLSAxIDogLTE7XG4gICAgICAgICAgZm9yICg7IGpqID49IDA7IGpqLS0pIHtcbiAgICAgICAgICAgIC8vIHRydWUgbWVhbnMgc3VjY2VzcyBhbmQgdG8gc3RvcCBidWJibGluZ1xuICAgICAgICAgICAgLy8gYSBwcm9taXNlIGluZGljYXRlcyBhbiBhc3luYyBoYW5kbGVyIHRoYXQgbmVlZHMgdG8gZmluaXNoIGJlZm9yZSBwcm9ncmVzc2luZ1xuICAgICAgICAgICAgaGFuZGxlclJlc3VsdCA9IGhhbmRsZXJzRXNjW2pqXSgpO1xuICAgICAgICAgICAgaWYgKGhhbmRsZXJSZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXJSZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3ByZXNlcnZlU3RhY2soUGFyc2VyU3RhY2tUeXBlLkVTQywgaGFuZGxlcnNFc2MsIGpqLCB0cmFuc2l0aW9uLCBpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXJSZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChqaiA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2VzY0hhbmRsZXJGYih0aGlzLl9jb2xsZWN0IDw8IDggfCBjb2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5wcmVjZWRpbmdDb2RlcG9pbnQgPSAwO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFBhcnNlckFjdGlvbi5DTEVBUjpcbiAgICAgICAgICB0aGlzLl9wYXJhbXMucmVzZXQoKTtcbiAgICAgICAgICB0aGlzLl9wYXJhbXMuYWRkUGFyYW0oMCk7IC8vIFpETVxuICAgICAgICAgIHRoaXMuX2NvbGxlY3QgPSAwO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFBhcnNlckFjdGlvbi5EQ1NfSE9PSzpcbiAgICAgICAgICB0aGlzLl9kY3NQYXJzZXIuaG9vayh0aGlzLl9jb2xsZWN0IDw8IDggfCBjb2RlLCB0aGlzLl9wYXJhbXMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFBhcnNlckFjdGlvbi5EQ1NfUFVUOlxuICAgICAgICAgIC8vIGlubmVyIGxvb3AgLSBleGl0IERDU19QVVQ6IDB4MTgsIDB4MWEsIDB4MWIsIDB4N2YsIDB4ODAgLSAweDlmXG4gICAgICAgICAgLy8gdW5ob29rIHRyaWdnZXJlZCBieTogMHgxYiwgMHg5YyAoc3VjY2VzcykgYW5kIDB4MTgsIDB4MWEgKGFib3J0KVxuICAgICAgICAgIGZvciAobGV0IGogPSBpICsgMTsgOyArK2opIHtcbiAgICAgICAgICAgIGlmIChqID49IGxlbmd0aCB8fCAoY29kZSA9IGRhdGFbal0pID09PSAweDE4IHx8IGNvZGUgPT09IDB4MWEgfHwgY29kZSA9PT0gMHgxYiB8fCAoY29kZSA+IDB4N2YgJiYgY29kZSA8IE5PTl9BU0NJSV9QUklOVEFCTEUpKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2Rjc1BhcnNlci5wdXQoZGF0YSwgaSwgaik7XG4gICAgICAgICAgICAgIGkgPSBqIC0gMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFBhcnNlckFjdGlvbi5EQ1NfVU5IT09LOlxuICAgICAgICAgIGhhbmRsZXJSZXN1bHQgPSB0aGlzLl9kY3NQYXJzZXIudW5ob29rKGNvZGUgIT09IDB4MTggJiYgY29kZSAhPT0gMHgxYSk7XG4gICAgICAgICAgaWYgKGhhbmRsZXJSZXN1bHQpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByZXNlcnZlU3RhY2soUGFyc2VyU3RhY2tUeXBlLkRDUywgW10sIDAsIHRyYW5zaXRpb24sIGkpO1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXJSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb2RlID09PSAweDFiKSB0cmFuc2l0aW9uIHw9IFBhcnNlclN0YXRlLkVTQ0FQRTtcbiAgICAgICAgICB0aGlzLl9wYXJhbXMucmVzZXQoKTtcbiAgICAgICAgICB0aGlzLl9wYXJhbXMuYWRkUGFyYW0oMCk7IC8vIFpETVxuICAgICAgICAgIHRoaXMuX2NvbGxlY3QgPSAwO1xuICAgICAgICAgIHRoaXMucHJlY2VkaW5nQ29kZXBvaW50ID0gMDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBQYXJzZXJBY3Rpb24uT1NDX1NUQVJUOlxuICAgICAgICAgIHRoaXMuX29zY1BhcnNlci5zdGFydCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFBhcnNlckFjdGlvbi5PU0NfUFVUOlxuICAgICAgICAgIC8vIGlubmVyIGxvb3A6IDB4MjAgKFNQKSBpbmNsdWRlZCwgMHg3RiAoREVMKSBpbmNsdWRlZFxuICAgICAgICAgIGZvciAobGV0IGogPSBpICsgMTsgOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChqID49IGxlbmd0aCB8fCAoY29kZSA9IGRhdGFbal0pIDwgMHgyMCB8fCAoY29kZSA+IDB4N2YgJiYgY29kZSA8IE5PTl9BU0NJSV9QUklOVEFCTEUpKSB7XG4gICAgICAgICAgICAgIHRoaXMuX29zY1BhcnNlci5wdXQoZGF0YSwgaSwgaik7XG4gICAgICAgICAgICAgIGkgPSBqIC0gMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFBhcnNlckFjdGlvbi5PU0NfRU5EOlxuICAgICAgICAgIGhhbmRsZXJSZXN1bHQgPSB0aGlzLl9vc2NQYXJzZXIuZW5kKGNvZGUgIT09IDB4MTggJiYgY29kZSAhPT0gMHgxYSk7XG4gICAgICAgICAgaWYgKGhhbmRsZXJSZXN1bHQpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByZXNlcnZlU3RhY2soUGFyc2VyU3RhY2tUeXBlLk9TQywgW10sIDAsIHRyYW5zaXRpb24sIGkpO1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXJSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb2RlID09PSAweDFiKSB0cmFuc2l0aW9uIHw9IFBhcnNlclN0YXRlLkVTQ0FQRTtcbiAgICAgICAgICB0aGlzLl9wYXJhbXMucmVzZXQoKTtcbiAgICAgICAgICB0aGlzLl9wYXJhbXMuYWRkUGFyYW0oMCk7IC8vIFpETVxuICAgICAgICAgIHRoaXMuX2NvbGxlY3QgPSAwO1xuICAgICAgICAgIHRoaXMucHJlY2VkaW5nQ29kZXBvaW50ID0gMDtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHRoaXMuY3VycmVudFN0YXRlID0gdHJhbnNpdGlvbiAmIFRhYmxlQWNjZXNzLlRSQU5TSVRJT05fU1RBVEVfTUFTSztcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSU9zY0hhbmRsZXIsIElIYW5kbGVyQ29sbGVjdGlvbiwgT3NjRmFsbGJhY2tIYW5kbGVyVHlwZSwgSU9zY1BhcnNlciwgSVN1YlBhcnNlclN0YWNrU3RhdGUgfSBmcm9tICdjb21tb24vcGFyc2VyL1R5cGVzJztcbmltcG9ydCB7IE9zY1N0YXRlLCBQQVlMT0FEX0xJTUlUIH0gZnJvbSAnY29tbW9uL3BhcnNlci9Db25zdGFudHMnO1xuaW1wb3J0IHsgdXRmMzJUb1N0cmluZyB9IGZyb20gJ2NvbW1vbi9pbnB1dC9UZXh0RGVjb2Rlcic7XG5pbXBvcnQgeyBJRGlzcG9zYWJsZSB9IGZyb20gJ2NvbW1vbi9UeXBlcyc7XG5cbmNvbnN0IEVNUFRZX0hBTkRMRVJTOiBJT3NjSGFuZGxlcltdID0gW107XG5cbmV4cG9ydCBjbGFzcyBPc2NQYXJzZXIgaW1wbGVtZW50cyBJT3NjUGFyc2VyIHtcbiAgcHJpdmF0ZSBfc3RhdGUgPSBPc2NTdGF0ZS5TVEFSVDtcbiAgcHJpdmF0ZSBfYWN0aXZlID0gRU1QVFlfSEFORExFUlM7XG4gIHByaXZhdGUgX2lkID0gLTE7XG4gIHByaXZhdGUgX2hhbmRsZXJzOiBJSGFuZGxlckNvbGxlY3Rpb248SU9zY0hhbmRsZXI+ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcHJpdmF0ZSBfaGFuZGxlckZiOiBPc2NGYWxsYmFja0hhbmRsZXJUeXBlID0gKCkgPT4geyB9O1xuICBwcml2YXRlIF9zdGFjazogSVN1YlBhcnNlclN0YWNrU3RhdGUgPSB7XG4gICAgcGF1c2VkOiBmYWxzZSxcbiAgICBsb29wUG9zaXRpb246IDAsXG4gICAgZmFsbFRocm91Z2g6IGZhbHNlXG4gIH07XG5cbiAgcHVibGljIHJlZ2lzdGVySGFuZGxlcihpZGVudDogbnVtYmVyLCBoYW5kbGVyOiBJT3NjSGFuZGxlcik6IElEaXNwb3NhYmxlIHtcbiAgICBpZiAodGhpcy5faGFuZGxlcnNbaWRlbnRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX2hhbmRsZXJzW2lkZW50XSA9IFtdO1xuICAgIH1cbiAgICBjb25zdCBoYW5kbGVyTGlzdCA9IHRoaXMuX2hhbmRsZXJzW2lkZW50XTtcbiAgICBoYW5kbGVyTGlzdC5wdXNoKGhhbmRsZXIpO1xuICAgIHJldHVybiB7XG4gICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXJJbmRleCA9IGhhbmRsZXJMaXN0LmluZGV4T2YoaGFuZGxlcik7XG4gICAgICAgIGlmIChoYW5kbGVySW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgaGFuZGxlckxpc3Quc3BsaWNlKGhhbmRsZXJJbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHB1YmxpYyBjbGVhckhhbmRsZXIoaWRlbnQ6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh0aGlzLl9oYW5kbGVyc1tpZGVudF0pIGRlbGV0ZSB0aGlzLl9oYW5kbGVyc1tpZGVudF07XG4gIH1cbiAgcHVibGljIHNldEhhbmRsZXJGYWxsYmFjayhoYW5kbGVyOiBPc2NGYWxsYmFja0hhbmRsZXJUeXBlKTogdm9pZCB7XG4gICAgdGhpcy5faGFuZGxlckZiID0gaGFuZGxlcjtcbiAgfVxuXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xuICAgIHRoaXMuX2hhbmRsZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9oYW5kbGVyRmIgPSAoKSA9PiB7IH07XG4gICAgdGhpcy5fYWN0aXZlID0gRU1QVFlfSEFORExFUlM7XG4gIH1cblxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XG4gICAgLy8gZm9yY2UgY2xlYW51cCBoYW5kbGVycyBpZiBwYXlsb2FkIHdhcyBhbHJlYWR5IHNlbnRcbiAgICBpZiAodGhpcy5fc3RhdGUgPT09IE9zY1N0YXRlLlBBWUxPQUQpIHtcbiAgICAgIGZvciAobGV0IGogPSB0aGlzLl9zdGFjay5wYXVzZWQgPyB0aGlzLl9zdGFjay5sb29wUG9zaXRpb24gLSAxIDogdGhpcy5fYWN0aXZlLmxlbmd0aCAtIDE7IGogPj0gMDsgLS1qKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVtqXS5lbmQoZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9zdGFjay5wYXVzZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9hY3RpdmUgPSBFTVBUWV9IQU5ETEVSUztcbiAgICB0aGlzLl9pZCA9IC0xO1xuICAgIHRoaXMuX3N0YXRlID0gT3NjU3RhdGUuU1RBUlQ7XG4gIH1cblxuICBwcml2YXRlIF9zdGFydCgpOiB2b2lkIHtcbiAgICB0aGlzLl9hY3RpdmUgPSB0aGlzLl9oYW5kbGVyc1t0aGlzLl9pZF0gfHwgRU1QVFlfSEFORExFUlM7XG4gICAgaWYgKCF0aGlzLl9hY3RpdmUubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9oYW5kbGVyRmIodGhpcy5faWQsICdTVEFSVCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBqID0gdGhpcy5fYWN0aXZlLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVtqXS5zdGFydCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX3B1dChkYXRhOiBVaW50MzJBcnJheSwgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX2FjdGl2ZS5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2hhbmRsZXJGYih0aGlzLl9pZCwgJ1BVVCcsIHV0ZjMyVG9TdHJpbmcoZGF0YSwgc3RhcnQsIGVuZCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBqID0gdGhpcy5fYWN0aXZlLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVtqXS5wdXQoZGF0YSwgc3RhcnQsIGVuZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXJ0KCk6IHZvaWQge1xuICAgIC8vIGFsd2F5cyByZXNldCBsZWZ0b3ZlciBoYW5kbGVyc1xuICAgIHRoaXMucmVzZXQoKTtcbiAgICB0aGlzLl9zdGF0ZSA9IE9zY1N0YXRlLklEO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1dCBkYXRhIHRvIGN1cnJlbnQgT1NDIGNvbW1hbmQuXG4gICAqIEV4cGVjdHMgdGhlIGlkZW50aWZpZXIgb2YgdGhlIE9TQyBjb21tYW5kIGluIHRoZSBmb3JtXG4gICAqIE9TQyBpZCA7IHBheWxvYWQgU1QvQkVMXG4gICAqIFBheWxvYWQgY2h1bmtzIGFyZSBub3QgZnVydGhlciBwcm9jZXNzZWQgYW5kIGdldFxuICAgKiBkaXJlY3RseSBwYXNzZWQgdG8gdGhlIGhhbmRsZXJzLlxuICAgKi9cbiAgcHVibGljIHB1dChkYXRhOiBVaW50MzJBcnJheSwgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fc3RhdGUgPT09IE9zY1N0YXRlLkFCT1JUKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLl9zdGF0ZSA9PT0gT3NjU3RhdGUuSUQpIHtcbiAgICAgIHdoaWxlIChzdGFydCA8IGVuZCkge1xuICAgICAgICBjb25zdCBjb2RlID0gZGF0YVtzdGFydCsrXTtcbiAgICAgICAgaWYgKGNvZGUgPT09IDB4M2IpIHtcbiAgICAgICAgICB0aGlzLl9zdGF0ZSA9IE9zY1N0YXRlLlBBWUxPQUQ7XG4gICAgICAgICAgdGhpcy5fc3RhcnQoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29kZSA8IDB4MzAgfHwgMHgzOSA8IGNvZGUpIHtcbiAgICAgICAgICB0aGlzLl9zdGF0ZSA9IE9zY1N0YXRlLkFCT1JUO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faWQgPT09IC0xKSB7XG4gICAgICAgICAgdGhpcy5faWQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lkID0gdGhpcy5faWQgKiAxMCArIGNvZGUgLSA0ODtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuX3N0YXRlID09PSBPc2NTdGF0ZS5QQVlMT0FEICYmIGVuZCAtIHN0YXJ0ID4gMCkge1xuICAgICAgdGhpcy5fcHV0KGRhdGEsIHN0YXJ0LCBlbmQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgZW5kIG9mIGFuIE9TQyBjb21tYW5kLlxuICAgKiBXaGV0aGVyIHRoZSBPU0MgZ290IGFib3J0ZWQgb3IgZmluaXNoZWQgbm9ybWFsbHlcbiAgICogaXMgaW5kaWNhdGVkIGJ5IGBzdWNjZXNzYC5cbiAgICovXG4gIHB1YmxpYyBlbmQoc3VjY2VzczogYm9vbGVhbiwgcHJvbWlzZVJlc3VsdDogYm9vbGVhbiA9IHRydWUpOiB2b2lkIHwgUHJvbWlzZTxib29sZWFuPiB7XG4gICAgaWYgKHRoaXMuX3N0YXRlID09PSBPc2NTdGF0ZS5TVEFSVCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBkbyBub3RoaW5nIGlmIGNvbW1hbmQgd2FzIGZhdWx0eVxuICAgIGlmICh0aGlzLl9zdGF0ZSAhPT0gT3NjU3RhdGUuQUJPUlQpIHtcbiAgICAgIC8vIGlmIHdlIGFyZSBzdGlsbCBpbiBJRCBzdGF0ZSBhbmQgZ2V0IGFuIGVhcmx5IGVuZFxuICAgICAgLy8gbWVhbnMgdGhhdCB0aGUgY29tbWFuZCBoYXMgbm8gcGF5bG9hZCB0aHVzIHdlIHN0aWxsIGhhdmVcbiAgICAgIC8vIHRvIGFubm91bmNlIFNUQVJUIGFuZCBzZW5kIEVORCByaWdodCBhZnRlclxuICAgICAgaWYgKHRoaXMuX3N0YXRlID09PSBPc2NTdGF0ZS5JRCkge1xuICAgICAgICB0aGlzLl9zdGFydCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2FjdGl2ZS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlckZiKHRoaXMuX2lkLCAnRU5EJywgc3VjY2Vzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgaGFuZGxlclJlc3VsdDogYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4gPSBmYWxzZTtcbiAgICAgICAgbGV0IGogPSB0aGlzLl9hY3RpdmUubGVuZ3RoIC0gMTtcbiAgICAgICAgbGV0IGZhbGxUaHJvdWdoID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLl9zdGFjay5wYXVzZWQpIHtcbiAgICAgICAgICBqID0gdGhpcy5fc3RhY2subG9vcFBvc2l0aW9uIC0gMTtcbiAgICAgICAgICBoYW5kbGVyUmVzdWx0ID0gcHJvbWlzZVJlc3VsdDtcbiAgICAgICAgICBmYWxsVGhyb3VnaCA9IHRoaXMuX3N0YWNrLmZhbGxUaHJvdWdoO1xuICAgICAgICAgIHRoaXMuX3N0YWNrLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZmFsbFRocm91Z2ggJiYgaGFuZGxlclJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBmb3IgKDsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgICAgIGhhbmRsZXJSZXN1bHQgPSB0aGlzLl9hY3RpdmVbal0uZW5kKHN1Y2Nlc3MpO1xuICAgICAgICAgICAgaWYgKGhhbmRsZXJSZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXJSZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3N0YWNrLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgIHRoaXMuX3N0YWNrLmxvb3BQb3NpdGlvbiA9IGo7XG4gICAgICAgICAgICAgIHRoaXMuX3N0YWNrLmZhbGxUaHJvdWdoID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGVyUmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBqLS07XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2xlYW51cCBsZWZ0IG92ZXIgaGFuZGxlcnNcbiAgICAgICAgLy8gd2UgYWx3YXlzIGhhdmUgdG8gY2FsbCAuZW5kIGZvciBwcm9wZXIgY2xlYW51cCxcbiAgICAgICAgLy8gaGVyZSB3ZSB1c2UgYHN1Y2Nlc3NgIHRvIGluZGljYXRlIHdoZXRoZXIgYSBoYW5kbGVyIHNob3VsZCBleGVjdXRlXG4gICAgICAgIGZvciAoOyBqID49IDA7IGotLSkge1xuICAgICAgICAgIGhhbmRsZXJSZXN1bHQgPSB0aGlzLl9hY3RpdmVbal0uZW5kKGZhbHNlKTtcbiAgICAgICAgICBpZiAoaGFuZGxlclJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YWNrLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9zdGFjay5sb29wUG9zaXRpb24gPSBqO1xuICAgICAgICAgICAgdGhpcy5fc3RhY2suZmFsbFRocm91Z2ggPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXJSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9XG4gICAgdGhpcy5fYWN0aXZlID0gRU1QVFlfSEFORExFUlM7XG4gICAgdGhpcy5faWQgPSAtMTtcbiAgICB0aGlzLl9zdGF0ZSA9IE9zY1N0YXRlLlNUQVJUO1xuICB9XG59XG5cbi8qKlxuICogQ29udmVuaWVudCBjbGFzcyB0byBhbGxvdyBhdHRhY2hpbmcgc3RyaW5nIGJhc2VkIGhhbmRsZXIgZnVuY3Rpb25zXG4gKiBhcyBPU0MgaGFuZGxlcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBPc2NIYW5kbGVyIGltcGxlbWVudHMgSU9zY0hhbmRsZXIge1xuICBwcml2YXRlIF9kYXRhID0gJyc7XG4gIHByaXZhdGUgX2hpdExpbWl0OiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfaGFuZGxlcjogKGRhdGE6IHN0cmluZykgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4pIHsgfVxuXG4gIHB1YmxpYyBzdGFydCgpOiB2b2lkIHtcbiAgICB0aGlzLl9kYXRhID0gJyc7XG4gICAgdGhpcy5faGl0TGltaXQgPSBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyBwdXQoZGF0YTogVWludDMyQXJyYXksIHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2hpdExpbWl0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2RhdGEgKz0gdXRmMzJUb1N0cmluZyhkYXRhLCBzdGFydCwgZW5kKTtcbiAgICBpZiAodGhpcy5fZGF0YS5sZW5ndGggPiBQQVlMT0FEX0xJTUlUKSB7XG4gICAgICB0aGlzLl9kYXRhID0gJyc7XG4gICAgICB0aGlzLl9oaXRMaW1pdCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGVuZChzdWNjZXNzOiBib29sZWFuKTogYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGxldCByZXQ6IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+ID0gZmFsc2U7XG4gICAgaWYgKHRoaXMuX2hpdExpbWl0KSB7XG4gICAgICByZXQgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgIHJldCA9IHRoaXMuX2hhbmRsZXIodGhpcy5fZGF0YSk7XG4gICAgICBpZiAocmV0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAvLyBuZWVkIHRvIGhvbGQgZGF0YSB1bnRpbCBgcmV0YCBnb3QgcmVzb2x2ZWRcbiAgICAgICAgLy8gZG9udCBjYXJlIGZvciBlcnJvcnMsIGRhdGEgd2lsbCBiZSBmcmVlZCBhbnl3YXkgb24gbmV4dCBzdGFydFxuICAgICAgICByZXR1cm4gcmV0LnRoZW4ocmVzID0+IHtcbiAgICAgICAgICB0aGlzLl9kYXRhID0gJyc7XG4gICAgICAgICAgdGhpcy5faGl0TGltaXQgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fZGF0YSA9ICcnO1xuICAgIHRoaXMuX2hpdExpbWl0ID0gZmFsc2U7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0IHsgSVBhcmFtcywgUGFyYW1zQXJyYXkgfSBmcm9tICdjb21tb24vcGFyc2VyL1R5cGVzJztcblxuLy8gbWF4IHZhbHVlIHN1cHBvcnRlZCBmb3IgYSBzaW5nbGUgcGFyYW0vc3VicGFyYW0gKGNsYW1wZWQgdG8gcG9zaXRpdmUgaW50MzIgcmFuZ2UpXG5jb25zdCBNQVhfVkFMVUUgPSAweDdGRkZGRkZGO1xuLy8gbWF4IGFsbG93ZWQgc3VicGFyYW1zIGZvciBhIHNpbmdsZSBzZXF1ZW5jZSAoaGFyZGNvZGVkIGxpbWl0YXRpb24pXG5jb25zdCBNQVhfU1VCUEFSQU1TID0gMjU2O1xuXG4vKipcbiAqIFBhcmFtcyBzdG9yYWdlIGNsYXNzLlxuICogVGhpcyB0eXBlIGlzIHVzZWQgYnkgdGhlIHBhcnNlciB0byBhY2N1bXVsYXRlIHNlcXVlbmNlIHBhcmFtZXRlcnMgYW5kIHN1YiBwYXJhbWV0ZXJzXG4gKiBhbmQgdHJhbnNtaXQgdGhlbSB0byB0aGUgaW5wdXQgaGFuZGxlciBhY3Rpb25zLlxuICpcbiAqIE5PVEVTOlxuICogIC0gcGFyYW1zIG9iamVjdCBmb3IgYWN0aW9uIGhhbmRsZXJzIGlzIGJvcnJvd2VkLCB1c2UgYC50b0FycmF5YCBvciBgLmNsb25lYCB0byBnZXQgYSBjb3B5XG4gKiAgLSBuZXZlciByZWFkIGJleW9uZCBgcGFyYW1zLmxlbmd0aCAtIDFgIChsaWtlbHkgdG8gY29udGFpbiBhcmJpdHJhcnkgZGF0YSlcbiAqICAtIGAuZ2V0U3ViUGFyYW1zYCByZXR1cm5zIGEgYm9ycm93ZWQgdHlwZWQgYXJyYXksIHVzZSBgLmdldFN1YlBhcmFtc0FsbGAgZm9yIGNsb25lZCBzdWIgcGFyYW1zXG4gKiAgLSBoYXJkY29kZWQgbGltaXRhdGlvbnM6XG4gKiAgICAtIG1heC4gdmFsdWUgZm9yIGEgc2luZ2xlIChzdWIpIHBhcmFtIGlzIDJeMzEgLSAxIChncmVhdGVyIHZhbHVlcyBhcmUgY2xhbXBlZCB0byB0aGF0KVxuICogICAgLSBtYXguIDI1NiBzdWIgcGFyYW1zIHBvc3NpYmxlXG4gKiAgICAtIG5lZ2F0aXZlIHZhbHVlcyBhcmUgbm90IGFsbG93ZWQgYmVzaWRlIC0xIChwbGFjZWhvbGRlciBmb3IgZGVmYXVsdCB2YWx1ZSlcbiAqXG4gKiBBYm91dCBaRE0gKFplcm8gRGVmYXVsdCBNb2RlKTpcbiAqIFpETSBpcyBub3Qgb3JjaGVzdHJhdGVkIGJ5IHRoaXMgY2xhc3MuIElmIHRoZSBwYXJzZXIgaXMgaW4gWkRNLFxuICogaXQgc2hvdWxkIGFkZCAwIGZvciBlbXB0eSBwYXJhbXMsIG90aGVyd2lzZSAtMS4gVGhpcyBkb2VzIG5vdCBhcHBseVxuICogdG8gc3VicGFyYW1zLCBlbXB0eSBzdWJwYXJhbXMgc2hvdWxkIGFsd2F5cyBiZSBhZGRlZCB3aXRoIC0xLlxuICovXG5leHBvcnQgY2xhc3MgUGFyYW1zIGltcGxlbWVudHMgSVBhcmFtcyB7XG4gIC8vIHBhcmFtcyBzdG9yZSBhbmQgbGVuZ3RoXG4gIHB1YmxpYyBwYXJhbXM6IEludDMyQXJyYXk7XG4gIHB1YmxpYyBsZW5ndGg6IG51bWJlcjtcblxuICAvLyBzdWIgcGFyYW1zIHN0b3JlIGFuZCBsZW5ndGhcbiAgcHJvdGVjdGVkIF9zdWJQYXJhbXM6IEludDMyQXJyYXk7XG4gIHByb3RlY3RlZCBfc3ViUGFyYW1zTGVuZ3RoOiBudW1iZXI7XG5cbiAgLy8gc3ViIHBhcmFtcyBvZmZzZXRzIGZyb20gcGFyYW06IHBhcmFtIGlkeCAtLT4gW3N0YXJ0LCBlbmRdIG9mZnNldFxuICBwcml2YXRlIF9zdWJQYXJhbXNJZHg6IFVpbnQxNkFycmF5O1xuICBwcml2YXRlIF9yZWplY3REaWdpdHM6IGJvb2xlYW47XG4gIHByaXZhdGUgX3JlamVjdFN1YkRpZ2l0czogYm9vbGVhbjtcbiAgcHJpdmF0ZSBfZGlnaXRJc1N1YjogYm9vbGVhbjtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgYFBhcmFtc2AgdHlwZSBmcm9tIEpTIGFycmF5IHJlcHJlc2VudGF0aW9uLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tQXJyYXkodmFsdWVzOiBQYXJhbXNBcnJheSk6IFBhcmFtcyB7XG4gICAgY29uc3QgcGFyYW1zID0gbmV3IFBhcmFtcygpO1xuICAgIGlmICghdmFsdWVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9XG4gICAgLy8gc2tpcCBsZWFkaW5nIHN1YiBwYXJhbXNcbiAgICBmb3IgKGxldCBpID0gKEFycmF5LmlzQXJyYXkodmFsdWVzWzBdKSkgPyAxIDogMDsgaSA8IHZhbHVlcy5sZW5ndGg7ICsraSkge1xuICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCB2YWx1ZS5sZW5ndGg7ICsraykge1xuICAgICAgICAgIHBhcmFtcy5hZGRTdWJQYXJhbSh2YWx1ZVtrXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmFtcy5hZGRQYXJhbSh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIG1heExlbmd0aCBtYXggbGVuZ3RoIG9mIHN0b3JhYmxlIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIG1heFN1YlBhcmFtc0xlbmd0aCBtYXggbGVuZ3RoIG9mIHN0b3JhYmxlIHN1YiBwYXJhbWV0ZXJzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgbWF4TGVuZ3RoOiBudW1iZXIgPSAzMiwgcHVibGljIG1heFN1YlBhcmFtc0xlbmd0aDogbnVtYmVyID0gMzIpIHtcbiAgICBpZiAobWF4U3ViUGFyYW1zTGVuZ3RoID4gTUFYX1NVQlBBUkFNUykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYXhTdWJQYXJhbXNMZW5ndGggbXVzdCBub3QgYmUgZ3JlYXRlciB0aGFuIDI1NicpO1xuICAgIH1cbiAgICB0aGlzLnBhcmFtcyA9IG5ldyBJbnQzMkFycmF5KG1heExlbmd0aCk7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIHRoaXMuX3N1YlBhcmFtcyA9IG5ldyBJbnQzMkFycmF5KG1heFN1YlBhcmFtc0xlbmd0aCk7XG4gICAgdGhpcy5fc3ViUGFyYW1zTGVuZ3RoID0gMDtcbiAgICB0aGlzLl9zdWJQYXJhbXNJZHggPSBuZXcgVWludDE2QXJyYXkobWF4TGVuZ3RoKTtcbiAgICB0aGlzLl9yZWplY3REaWdpdHMgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWplY3RTdWJEaWdpdHMgPSBmYWxzZTtcbiAgICB0aGlzLl9kaWdpdElzU3ViID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmUgb2JqZWN0LlxuICAgKi9cbiAgcHVibGljIGNsb25lKCk6IFBhcmFtcyB7XG4gICAgY29uc3QgbmV3UGFyYW1zID0gbmV3IFBhcmFtcyh0aGlzLm1heExlbmd0aCwgdGhpcy5tYXhTdWJQYXJhbXNMZW5ndGgpO1xuICAgIG5ld1BhcmFtcy5wYXJhbXMuc2V0KHRoaXMucGFyYW1zKTtcbiAgICBuZXdQYXJhbXMubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgbmV3UGFyYW1zLl9zdWJQYXJhbXMuc2V0KHRoaXMuX3N1YlBhcmFtcyk7XG4gICAgbmV3UGFyYW1zLl9zdWJQYXJhbXNMZW5ndGggPSB0aGlzLl9zdWJQYXJhbXNMZW5ndGg7XG4gICAgbmV3UGFyYW1zLl9zdWJQYXJhbXNJZHguc2V0KHRoaXMuX3N1YlBhcmFtc0lkeCk7XG4gICAgbmV3UGFyYW1zLl9yZWplY3REaWdpdHMgPSB0aGlzLl9yZWplY3REaWdpdHM7XG4gICAgbmV3UGFyYW1zLl9yZWplY3RTdWJEaWdpdHMgPSB0aGlzLl9yZWplY3RTdWJEaWdpdHM7XG4gICAgbmV3UGFyYW1zLl9kaWdpdElzU3ViID0gdGhpcy5fZGlnaXRJc1N1YjtcbiAgICByZXR1cm4gbmV3UGFyYW1zO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIEpTIGFycmF5IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjdXJyZW50IHBhcmFtZXRlcnMgYW5kIHN1YiBwYXJhbWV0ZXJzLlxuICAgKiBUaGUgYXJyYXkgaXMgc3RydWN0dXJlZCBhcyBmb2xsb3dzOlxuICAgKiAgICBzZXF1ZW5jZTogXCIxOzI6Mzo0OzU6OjZcIlxuICAgKiAgICBhcnJheSAgIDogWzEsIDIsIFszLCA0XSwgNSwgWy0xLCA2XV1cbiAgICovXG4gIHB1YmxpYyB0b0FycmF5KCk6IFBhcmFtc0FycmF5IHtcbiAgICBjb25zdCByZXM6IFBhcmFtc0FycmF5ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgKytpKSB7XG4gICAgICByZXMucHVzaCh0aGlzLnBhcmFtc1tpXSk7XG4gICAgICBjb25zdCBzdGFydCA9IHRoaXMuX3N1YlBhcmFtc0lkeFtpXSA+PiA4O1xuICAgICAgY29uc3QgZW5kID0gdGhpcy5fc3ViUGFyYW1zSWR4W2ldICYgMHhGRjtcbiAgICAgIGlmIChlbmQgLSBzdGFydCA+IDApIHtcbiAgICAgICAgcmVzLnB1c2goQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fc3ViUGFyYW1zLCBzdGFydCwgZW5kKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH1cblxuICAvKipcbiAgICogUmVzZXQgdG8gaW5pdGlhbCBlbXB0eSBzdGF0ZS5cbiAgICovXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5fc3ViUGFyYW1zTGVuZ3RoID0gMDtcbiAgICB0aGlzLl9yZWplY3REaWdpdHMgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWplY3RTdWJEaWdpdHMgPSBmYWxzZTtcbiAgICB0aGlzLl9kaWdpdElzU3ViID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgcGFyYW1ldGVyIHZhbHVlLlxuICAgKiBgUGFyYW1zYCBvbmx5IHN0b3JlcyB1cCB0byBgbWF4TGVuZ3RoYCBwYXJhbWV0ZXJzLCBhbnkgbGF0ZXJcbiAgICogcGFyYW1ldGVyIHdpbGwgYmUgaWdub3JlZC5cbiAgICogTm90ZTogVlQgZGV2aWNlcyBvbmx5IHN0b3JlZCB1cCB0byAxNiB2YWx1ZXMsIHh0ZXJtIHNlZW1zIHRvXG4gICAqIHN0b3JlIHVwIHRvIDMwLlxuICAgKi9cbiAgcHVibGljIGFkZFBhcmFtKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9kaWdpdElzU3ViID0gZmFsc2U7XG4gICAgaWYgKHRoaXMubGVuZ3RoID49IHRoaXMubWF4TGVuZ3RoKSB7XG4gICAgICB0aGlzLl9yZWplY3REaWdpdHMgPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPCAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd2YWx1ZXMgbGVzc2VyIHRoYW4gLTEgYXJlIG5vdCBhbGxvd2VkJyk7XG4gICAgfVxuICAgIHRoaXMuX3N1YlBhcmFtc0lkeFt0aGlzLmxlbmd0aF0gPSB0aGlzLl9zdWJQYXJhbXNMZW5ndGggPDwgOCB8IHRoaXMuX3N1YlBhcmFtc0xlbmd0aDtcbiAgICB0aGlzLnBhcmFtc1t0aGlzLmxlbmd0aCsrXSA9IHZhbHVlID4gTUFYX1ZBTFVFID8gTUFYX1ZBTFVFIDogdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgc3ViIHBhcmFtZXRlciB2YWx1ZS5cbiAgICogVGhlIHN1YiBwYXJhbWV0ZXIgaXMgYXV0b21hdGljYWxseSBhc3NvY2lhdGVkIHdpdGggdGhlIGxhc3QgcGFyYW1ldGVyIHZhbHVlLlxuICAgKiBUaHVzIGl0IGlzIG5vdCBwb3NzaWJsZSB0byBhZGQgYSBzdWJwYXJhbWV0ZXIgd2l0aG91dCBhbnkgcGFyYW1ldGVyIGFkZGVkIHlldC5cbiAgICogYFBhcmFtc2Agb25seSBzdG9yZXMgdXAgdG8gYHN1YlBhcmFtc0xlbmd0aGAgc3ViIHBhcmFtZXRlcnMsIGFueSBsYXRlclxuICAgKiBzdWIgcGFyYW1ldGVyIHdpbGwgYmUgaWdub3JlZC5cbiAgICovXG4gIHB1YmxpYyBhZGRTdWJQYXJhbSh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fZGlnaXRJc1N1YiA9IHRydWU7XG4gICAgaWYgKCF0aGlzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5fcmVqZWN0RGlnaXRzIHx8IHRoaXMuX3N1YlBhcmFtc0xlbmd0aCA+PSB0aGlzLm1heFN1YlBhcmFtc0xlbmd0aCkge1xuICAgICAgdGhpcy5fcmVqZWN0U3ViRGlnaXRzID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHZhbHVlIDwgLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigndmFsdWVzIGxlc3NlciB0aGFuIC0xIGFyZSBub3QgYWxsb3dlZCcpO1xuICAgIH1cbiAgICB0aGlzLl9zdWJQYXJhbXNbdGhpcy5fc3ViUGFyYW1zTGVuZ3RoKytdID0gdmFsdWUgPiBNQVhfVkFMVUUgPyBNQVhfVkFMVUUgOiB2YWx1ZTtcbiAgICB0aGlzLl9zdWJQYXJhbXNJZHhbdGhpcy5sZW5ndGggLSAxXSsrO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgcGFyYW1ldGVyIGF0IGluZGV4IGBpZHhgIGhhcyBzdWIgcGFyYW1ldGVycy5cbiAgICovXG4gIHB1YmxpYyBoYXNTdWJQYXJhbXMoaWR4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKCh0aGlzLl9zdWJQYXJhbXNJZHhbaWR4XSAmIDB4RkYpIC0gKHRoaXMuX3N1YlBhcmFtc0lkeFtpZHhdID4+IDgpID4gMCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHN1YiBwYXJhbWV0ZXJzIGZvciBwYXJhbWV0ZXIgYXQgaW5kZXggYGlkeGAuXG4gICAqIE5vdGU6IFRoZSB2YWx1ZXMgYXJlIGJvcnJvd2VkLCB0aHVzIHlvdSBuZWVkIHRvIGNvcHlcbiAgICogdGhlIHZhbHVlcyBpZiB5b3UgbmVlZCB0byBob2xkIHRoZW0gaW4gbm9ubG9jYWwgc2NvcGUuXG4gICAqL1xuICBwdWJsaWMgZ2V0U3ViUGFyYW1zKGlkeDogbnVtYmVyKTogSW50MzJBcnJheSB8IG51bGwge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fc3ViUGFyYW1zSWR4W2lkeF0gPj4gODtcbiAgICBjb25zdCBlbmQgPSB0aGlzLl9zdWJQYXJhbXNJZHhbaWR4XSAmIDB4RkY7XG4gICAgaWYgKGVuZCAtIHN0YXJ0ID4gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3N1YlBhcmFtcy5zdWJhcnJheShzdGFydCwgZW5kKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGFsbCBzdWIgcGFyYW1ldGVycyBhcyB7aWR4OiBzdWJwYXJhbXN9IG1hcHBpbmcuXG4gICAqIE5vdGU6IFRoZSB2YWx1ZXMgYXJlIG5vdCBib3Jyb3dlZC5cbiAgICovXG4gIHB1YmxpYyBnZXRTdWJQYXJhbXNBbGwoKToge1tpZHg6IG51bWJlcl06IEludDMyQXJyYXl9IHtcbiAgICBjb25zdCByZXN1bHQ6IHtbaWR4OiBudW1iZXJdOiBJbnQzMkFycmF5fSA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgY29uc3Qgc3RhcnQgPSB0aGlzLl9zdWJQYXJhbXNJZHhbaV0gPj4gODtcbiAgICAgIGNvbnN0IGVuZCA9IHRoaXMuX3N1YlBhcmFtc0lkeFtpXSAmIDB4RkY7XG4gICAgICBpZiAoZW5kIC0gc3RhcnQgPiAwKSB7XG4gICAgICAgIHJlc3VsdFtpXSA9IHRoaXMuX3N1YlBhcmFtcy5zbGljZShzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBzaW5nbGUgZGlnaXQgdmFsdWUgdG8gY3VycmVudCBwYXJhbWV0ZXIuXG4gICAqIFRoaXMgaXMgdXNlZCBieSB0aGUgcGFyc2VyIHRvIGFjY291bnQgZGlnaXRzIG9uIGEgY2hhciBieSBjaGFyIGJhc2lzLlxuICAgKi9cbiAgcHVibGljIGFkZERpZ2l0KHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICBsZXQgbGVuZ3RoO1xuICAgIGlmICh0aGlzLl9yZWplY3REaWdpdHNcbiAgICAgIHx8ICEobGVuZ3RoID0gdGhpcy5fZGlnaXRJc1N1YiA/IHRoaXMuX3N1YlBhcmFtc0xlbmd0aCA6IHRoaXMubGVuZ3RoKVxuICAgICAgfHwgKHRoaXMuX2RpZ2l0SXNTdWIgJiYgdGhpcy5fcmVqZWN0U3ViRGlnaXRzKVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHN0b3JlID0gdGhpcy5fZGlnaXRJc1N1YiA/IHRoaXMuX3N1YlBhcmFtcyA6IHRoaXMucGFyYW1zO1xuICAgIGNvbnN0IGN1ciA9IHN0b3JlW2xlbmd0aCAtIDFdO1xuICAgIHN0b3JlW2xlbmd0aCAtIDFdID0gfmN1ciA/IE1hdGgubWluKGN1ciAqIDEwICsgdmFsdWUsIE1BWF9WQUxVRSkgOiB2YWx1ZTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJVGVybWluYWxBZGRvbiwgSURpc3Bvc2FibGUsIFRlcm1pbmFsIH0gZnJvbSAneHRlcm0nO1xuXG5leHBvcnQgaW50ZXJmYWNlIElMb2FkZWRBZGRvbiB7XG4gIGluc3RhbmNlOiBJVGVybWluYWxBZGRvbjtcbiAgZGlzcG9zZTogKCkgPT4gdm9pZDtcbiAgaXNEaXNwb3NlZDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIEFkZG9uTWFuYWdlciBpbXBsZW1lbnRzIElEaXNwb3NhYmxlIHtcbiAgcHJvdGVjdGVkIF9hZGRvbnM6IElMb2FkZWRBZGRvbltdID0gW107XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gdGhpcy5fYWRkb25zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB0aGlzLl9hZGRvbnNbaV0uaW5zdGFuY2UuZGlzcG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBsb2FkQWRkb24odGVybWluYWw6IFRlcm1pbmFsLCBpbnN0YW5jZTogSVRlcm1pbmFsQWRkb24pOiB2b2lkIHtcbiAgICBjb25zdCBsb2FkZWRBZGRvbjogSUxvYWRlZEFkZG9uID0ge1xuICAgICAgaW5zdGFuY2UsXG4gICAgICBkaXNwb3NlOiBpbnN0YW5jZS5kaXNwb3NlLFxuICAgICAgaXNEaXNwb3NlZDogZmFsc2VcbiAgICB9O1xuICAgIHRoaXMuX2FkZG9ucy5wdXNoKGxvYWRlZEFkZG9uKTtcbiAgICBpbnN0YW5jZS5kaXNwb3NlID0gKCkgPT4gdGhpcy5fd3JhcHBlZEFkZG9uRGlzcG9zZShsb2FkZWRBZGRvbik7XG4gICAgaW5zdGFuY2UuYWN0aXZhdGUodGVybWluYWwgYXMgYW55KTtcbiAgfVxuXG4gIHByaXZhdGUgX3dyYXBwZWRBZGRvbkRpc3Bvc2UobG9hZGVkQWRkb246IElMb2FkZWRBZGRvbik6IHZvaWQge1xuICAgIGlmIChsb2FkZWRBZGRvbi5pc0Rpc3Bvc2VkKSB7XG4gICAgICAvLyBEbyBub3RoaW5nIGlmIGFscmVhZHkgZGlzcG9zZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9hZGRvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLl9hZGRvbnNbaV0gPT09IGxvYWRlZEFkZG9uKSB7XG4gICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGRpc3Bvc2UgYW4gYWRkb24gdGhhdCBoYXMgbm90IGJlZW4gbG9hZGVkJyk7XG4gICAgfVxuICAgIGxvYWRlZEFkZG9uLmlzRGlzcG9zZWQgPSB0cnVlO1xuICAgIGxvYWRlZEFkZG9uLmRpc3Bvc2UuYXBwbHkobG9hZGVkQWRkb24uaW5zdGFuY2UpO1xuICAgIHRoaXMuX2FkZG9ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAyMSBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElCdWZmZXIgYXMgSUJ1ZmZlckFwaSwgSUJ1ZmZlckxpbmUgYXMgSUJ1ZmZlckxpbmVBcGksIElCdWZmZXJDZWxsIGFzIElCdWZmZXJDZWxsQXBpIH0gZnJvbSAneHRlcm0nO1xuaW1wb3J0IHsgSUJ1ZmZlciB9IGZyb20gJ2NvbW1vbi9idWZmZXIvVHlwZXMnO1xuaW1wb3J0IHsgQnVmZmVyTGluZUFwaVZpZXcgfSBmcm9tICdjb21tb24vcHVibGljL0J1ZmZlckxpbmVBcGlWaWV3JztcbmltcG9ydCB7IENlbGxEYXRhIH0gZnJvbSAnY29tbW9uL2J1ZmZlci9DZWxsRGF0YSc7XG5cbmV4cG9ydCBjbGFzcyBCdWZmZXJBcGlWaWV3IGltcGxlbWVudHMgSUJ1ZmZlckFwaSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX2J1ZmZlcjogSUJ1ZmZlcixcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZTogJ25vcm1hbCcgfCAnYWx0ZXJuYXRlJ1xuICApIHsgfVxuXG4gIHB1YmxpYyBpbml0KGJ1ZmZlcjogSUJ1ZmZlcik6IEJ1ZmZlckFwaVZpZXcge1xuICAgIHRoaXMuX2J1ZmZlciA9IGJ1ZmZlcjtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHB1YmxpYyBnZXQgY3Vyc29yWSgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fYnVmZmVyLnk7IH1cbiAgcHVibGljIGdldCBjdXJzb3JYKCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9idWZmZXIueDsgfVxuICBwdWJsaWMgZ2V0IHZpZXdwb3J0WSgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fYnVmZmVyLnlkaXNwOyB9XG4gIHB1YmxpYyBnZXQgYmFzZVkoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX2J1ZmZlci55YmFzZTsgfVxuICBwdWJsaWMgZ2V0IGxlbmd0aCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fYnVmZmVyLmxpbmVzLmxlbmd0aDsgfVxuICBwdWJsaWMgZ2V0TGluZSh5OiBudW1iZXIpOiBJQnVmZmVyTGluZUFwaSB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgbGluZSA9IHRoaXMuX2J1ZmZlci5saW5lcy5nZXQoeSk7XG4gICAgaWYgKCFsaW5lKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEJ1ZmZlckxpbmVBcGlWaWV3KGxpbmUpO1xuICB9XG4gIHB1YmxpYyBnZXROdWxsQ2VsbCgpOiBJQnVmZmVyQ2VsbEFwaSB7IHJldHVybiBuZXcgQ2VsbERhdGEoKTsgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjEgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBDZWxsRGF0YSB9IGZyb20gJ2NvbW1vbi9idWZmZXIvQ2VsbERhdGEnO1xuaW1wb3J0IHsgSUJ1ZmZlckxpbmUsIElDZWxsRGF0YSB9IGZyb20gJ2NvbW1vbi9UeXBlcyc7XG5pbXBvcnQgeyBJQnVmZmVyQ2VsbCBhcyBJQnVmZmVyQ2VsbEFwaSwgSUJ1ZmZlckxpbmUgYXMgSUJ1ZmZlckxpbmVBcGkgfSBmcm9tICd4dGVybSc7XG5cbmV4cG9ydCBjbGFzcyBCdWZmZXJMaW5lQXBpVmlldyBpbXBsZW1lbnRzIElCdWZmZXJMaW5lQXBpIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfbGluZTogSUJ1ZmZlckxpbmUpIHsgfVxuXG4gIHB1YmxpYyBnZXQgaXNXcmFwcGVkKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5fbGluZS5pc1dyYXBwZWQ7IH1cbiAgcHVibGljIGdldCBsZW5ndGgoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX2xpbmUubGVuZ3RoOyB9XG4gIHB1YmxpYyBnZXRDZWxsKHg6IG51bWJlciwgY2VsbD86IElCdWZmZXJDZWxsQXBpKTogSUJ1ZmZlckNlbGxBcGkgfCB1bmRlZmluZWQge1xuICAgIGlmICh4IDwgMCB8fCB4ID49IHRoaXMuX2xpbmUubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChjZWxsKSB7XG4gICAgICB0aGlzLl9saW5lLmxvYWRDZWxsKHgsIGNlbGwgYXMgSUNlbGxEYXRhKTtcbiAgICAgIHJldHVybiBjZWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbGluZS5sb2FkQ2VsbCh4LCBuZXcgQ2VsbERhdGEoKSk7XG4gIH1cbiAgcHVibGljIHRyYW5zbGF0ZVRvU3RyaW5nKHRyaW1SaWdodD86IGJvb2xlYW4sIHN0YXJ0Q29sdW1uPzogbnVtYmVyLCBlbmRDb2x1bW4/OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9saW5lLnRyYW5zbGF0ZVRvU3RyaW5nKHRyaW1SaWdodCwgc3RhcnRDb2x1bW4sIGVuZENvbHVtbik7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDIxIFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSUJ1ZmZlciBhcyBJQnVmZmVyQXBpLCBJQnVmZmVyTmFtZXNwYWNlIGFzIElCdWZmZXJOYW1lc3BhY2VBcGkgfSBmcm9tICd4dGVybSc7XG5pbXBvcnQgeyBCdWZmZXJBcGlWaWV3IH0gZnJvbSAnY29tbW9uL3B1YmxpYy9CdWZmZXJBcGlWaWV3JztcbmltcG9ydCB7IElFdmVudCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnY29tbW9uL0V2ZW50RW1pdHRlcic7XG5pbXBvcnQgeyBJQ29yZVRlcm1pbmFsIH0gZnJvbSAnY29tbW9uL1R5cGVzJztcblxuZXhwb3J0IGNsYXNzIEJ1ZmZlck5hbWVzcGFjZUFwaSBpbXBsZW1lbnRzIElCdWZmZXJOYW1lc3BhY2VBcGkge1xuICBwcml2YXRlIF9ub3JtYWw6IEJ1ZmZlckFwaVZpZXc7XG4gIHByaXZhdGUgX2FsdGVybmF0ZTogQnVmZmVyQXBpVmlldztcbiAgcHJpdmF0ZSBfb25CdWZmZXJDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPElCdWZmZXJBcGk+KCk7XG4gIHB1YmxpYyBnZXQgb25CdWZmZXJDaGFuZ2UoKTogSUV2ZW50PElCdWZmZXJBcGk+IHsgcmV0dXJuIHRoaXMuX29uQnVmZmVyQ2hhbmdlLmV2ZW50OyB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfY29yZTogSUNvcmVUZXJtaW5hbCkge1xuICAgIHRoaXMuX25vcm1hbCA9IG5ldyBCdWZmZXJBcGlWaWV3KHRoaXMuX2NvcmUuYnVmZmVycy5ub3JtYWwsICdub3JtYWwnKTtcbiAgICB0aGlzLl9hbHRlcm5hdGUgPSBuZXcgQnVmZmVyQXBpVmlldyh0aGlzLl9jb3JlLmJ1ZmZlcnMuYWx0LCAnYWx0ZXJuYXRlJyk7XG4gICAgdGhpcy5fY29yZS5idWZmZXJzLm9uQnVmZmVyQWN0aXZhdGUoKCkgPT4gdGhpcy5fb25CdWZmZXJDaGFuZ2UuZmlyZSh0aGlzLmFjdGl2ZSkpO1xuICB9XG4gIHB1YmxpYyBnZXQgYWN0aXZlKCk6IElCdWZmZXJBcGkge1xuICAgIGlmICh0aGlzLl9jb3JlLmJ1ZmZlcnMuYWN0aXZlID09PSB0aGlzLl9jb3JlLmJ1ZmZlcnMubm9ybWFsKSB7IHJldHVybiB0aGlzLm5vcm1hbDsgfVxuICAgIGlmICh0aGlzLl9jb3JlLmJ1ZmZlcnMuYWN0aXZlID09PSB0aGlzLl9jb3JlLmJ1ZmZlcnMuYWx0KSB7IHJldHVybiB0aGlzLmFsdGVybmF0ZTsgfVxuICAgIHRocm93IG5ldyBFcnJvcignQWN0aXZlIGJ1ZmZlciBpcyBuZWl0aGVyIG5vcm1hbCBub3IgYWx0ZXJuYXRlJyk7XG4gIH1cbiAgcHVibGljIGdldCBub3JtYWwoKTogSUJ1ZmZlckFwaSB7XG4gICAgcmV0dXJuIHRoaXMuX25vcm1hbC5pbml0KHRoaXMuX2NvcmUuYnVmZmVycy5ub3JtYWwpO1xuICB9XG4gIHB1YmxpYyBnZXQgYWx0ZXJuYXRlKCk6IElCdWZmZXJBcGkge1xuICAgIHJldHVybiB0aGlzLl9hbHRlcm5hdGUuaW5pdCh0aGlzLl9jb3JlLmJ1ZmZlcnMuYWx0KTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjEgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJUGFyYW1zIH0gZnJvbSAnY29tbW9uL3BhcnNlci9UeXBlcyc7XG5pbXBvcnQgeyBJRGlzcG9zYWJsZSwgSUZ1bmN0aW9uSWRlbnRpZmllciwgSVBhcnNlciB9IGZyb20gJ3h0ZXJtJztcbmltcG9ydCB7IElDb3JlVGVybWluYWwgfSBmcm9tICdjb21tb24vVHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgUGFyc2VyQXBpIGltcGxlbWVudHMgSVBhcnNlciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NvcmU6IElDb3JlVGVybWluYWwpIHsgfVxuXG4gIHB1YmxpYyByZWdpc3RlckNzaUhhbmRsZXIoaWQ6IElGdW5jdGlvbklkZW50aWZpZXIsIGNhbGxiYWNrOiAocGFyYW1zOiAobnVtYmVyIHwgbnVtYmVyW10pW10pID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+KTogSURpc3Bvc2FibGUge1xuICAgIHJldHVybiB0aGlzLl9jb3JlLnJlZ2lzdGVyQ3NpSGFuZGxlcihpZCwgKHBhcmFtczogSVBhcmFtcykgPT4gY2FsbGJhY2socGFyYW1zLnRvQXJyYXkoKSkpO1xuICB9XG4gIHB1YmxpYyBhZGRDc2lIYW5kbGVyKGlkOiBJRnVuY3Rpb25JZGVudGlmaWVyLCBjYWxsYmFjazogKHBhcmFtczogKG51bWJlciB8IG51bWJlcltdKVtdKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPik6IElEaXNwb3NhYmxlIHtcbiAgICByZXR1cm4gdGhpcy5yZWdpc3RlckNzaUhhbmRsZXIoaWQsIGNhbGxiYWNrKTtcbiAgfVxuICBwdWJsaWMgcmVnaXN0ZXJEY3NIYW5kbGVyKGlkOiBJRnVuY3Rpb25JZGVudGlmaWVyLCBjYWxsYmFjazogKGRhdGE6IHN0cmluZywgcGFyYW06IChudW1iZXIgfCBudW1iZXJbXSlbXSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4pOiBJRGlzcG9zYWJsZSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvcmUucmVnaXN0ZXJEY3NIYW5kbGVyKGlkLCAoZGF0YTogc3RyaW5nLCBwYXJhbXM6IElQYXJhbXMpID0+IGNhbGxiYWNrKGRhdGEsIHBhcmFtcy50b0FycmF5KCkpKTtcbiAgfVxuICBwdWJsaWMgYWRkRGNzSGFuZGxlcihpZDogSUZ1bmN0aW9uSWRlbnRpZmllciwgY2FsbGJhY2s6IChkYXRhOiBzdHJpbmcsIHBhcmFtOiAobnVtYmVyIHwgbnVtYmVyW10pW10pID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+KTogSURpc3Bvc2FibGUge1xuICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyRGNzSGFuZGxlcihpZCwgY2FsbGJhY2spO1xuICB9XG4gIHB1YmxpYyByZWdpc3RlckVzY0hhbmRsZXIoaWQ6IElGdW5jdGlvbklkZW50aWZpZXIsIGhhbmRsZXI6ICgpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+KTogSURpc3Bvc2FibGUge1xuICAgIHJldHVybiB0aGlzLl9jb3JlLnJlZ2lzdGVyRXNjSGFuZGxlcihpZCwgaGFuZGxlcik7XG4gIH1cbiAgcHVibGljIGFkZEVzY0hhbmRsZXIoaWQ6IElGdW5jdGlvbklkZW50aWZpZXIsIGhhbmRsZXI6ICgpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+KTogSURpc3Bvc2FibGUge1xuICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyRXNjSGFuZGxlcihpZCwgaGFuZGxlcik7XG4gIH1cbiAgcHVibGljIHJlZ2lzdGVyT3NjSGFuZGxlcihpZGVudDogbnVtYmVyLCBjYWxsYmFjazogKGRhdGE6IHN0cmluZykgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4pOiBJRGlzcG9zYWJsZSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvcmUucmVnaXN0ZXJPc2NIYW5kbGVyKGlkZW50LCBjYWxsYmFjayk7XG4gIH1cbiAgcHVibGljIGFkZE9zY0hhbmRsZXIoaWRlbnQ6IG51bWJlciwgY2FsbGJhY2s6IChkYXRhOiBzdHJpbmcpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+KTogSURpc3Bvc2FibGUge1xuICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyT3NjSGFuZGxlcihpZGVudCwgY2FsbGJhY2spO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAyMSBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElDb3JlVGVybWluYWwgfSBmcm9tICdjb21tb24vVHlwZXMnO1xuaW1wb3J0IHsgSVVuaWNvZGVIYW5kbGluZywgSVVuaWNvZGVWZXJzaW9uUHJvdmlkZXIgfSBmcm9tICd4dGVybSc7XG5cbmV4cG9ydCBjbGFzcyBVbmljb2RlQXBpIGltcGxlbWVudHMgSVVuaWNvZGVIYW5kbGluZyB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NvcmU6IElDb3JlVGVybWluYWwpIHsgfVxuXG4gIHB1YmxpYyByZWdpc3Rlcihwcm92aWRlcjogSVVuaWNvZGVWZXJzaW9uUHJvdmlkZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9jb3JlLnVuaWNvZGVTZXJ2aWNlLnJlZ2lzdGVyKHByb3ZpZGVyKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgdmVyc2lvbnMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLl9jb3JlLnVuaWNvZGVTZXJ2aWNlLnZlcnNpb25zO1xuICB9XG5cbiAgcHVibGljIGdldCBhY3RpdmVWZXJzaW9uKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2NvcmUudW5pY29kZVNlcnZpY2UuYWN0aXZlVmVyc2lvbjtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgYWN0aXZlVmVyc2lvbih2ZXJzaW9uOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9jb3JlLnVuaWNvZGVTZXJ2aWNlLmFjdGl2ZVZlcnNpb24gPSB2ZXJzaW9uO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElCdWZmZXJTZXJ2aWNlLCBJT3B0aW9uc1NlcnZpY2UgfSBmcm9tICdjb21tb24vc2VydmljZXMvU2VydmljZXMnO1xuaW1wb3J0IHsgQnVmZmVyU2V0IH0gZnJvbSAnY29tbW9uL2J1ZmZlci9CdWZmZXJTZXQnO1xuaW1wb3J0IHsgSUJ1ZmZlclNldCwgSUJ1ZmZlciB9IGZyb20gJ2NvbW1vbi9idWZmZXIvVHlwZXMnO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJRXZlbnQgfSBmcm9tICdjb21tb24vRXZlbnRFbWl0dGVyJztcbmltcG9ydCB7IERpc3Bvc2FibGUgfSBmcm9tICdjb21tb24vTGlmZWN5Y2xlJztcbmltcG9ydCB7IElBdHRyaWJ1dGVEYXRhLCBJQnVmZmVyTGluZSwgU2Nyb2xsU291cmNlIH0gZnJvbSAnY29tbW9uL1R5cGVzJztcblxuZXhwb3J0IGNvbnN0IE1JTklNVU1fQ09MUyA9IDI7IC8vIExlc3MgdGhhbiAyIGNhbiBtZXNzIHdpdGggd2lkZSBjaGFyc1xuZXhwb3J0IGNvbnN0IE1JTklNVU1fUk9XUyA9IDE7XG5cbmV4cG9ydCBjbGFzcyBCdWZmZXJTZXJ2aWNlIGV4dGVuZHMgRGlzcG9zYWJsZSBpbXBsZW1lbnRzIElCdWZmZXJTZXJ2aWNlIHtcbiAgcHVibGljIHNlcnZpY2VCcmFuZDogYW55O1xuXG4gIHB1YmxpYyBjb2xzOiBudW1iZXI7XG4gIHB1YmxpYyByb3dzOiBudW1iZXI7XG4gIHB1YmxpYyBidWZmZXJzOiBJQnVmZmVyU2V0O1xuICAvKiogV2hldGhlciB0aGUgdXNlciBpcyBzY3JvbGxpbmcgKGxvY2tzIHRoZSBzY3JvbGwgcG9zaXRpb24pICovXG4gIHB1YmxpYyBpc1VzZXJTY3JvbGxpbmc6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwcml2YXRlIF9vblJlc2l6ZSA9IG5ldyBFdmVudEVtaXR0ZXI8eyBjb2xzOiBudW1iZXIsIHJvd3M6IG51bWJlciB9PigpO1xuICBwdWJsaWMgZ2V0IG9uUmVzaXplKCk6IElFdmVudDx7IGNvbHM6IG51bWJlciwgcm93czogbnVtYmVyIH0+IHsgcmV0dXJuIHRoaXMuX29uUmVzaXplLmV2ZW50OyB9XG4gIHByaXZhdGUgX29uU2Nyb2xsID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XG4gIHB1YmxpYyBnZXQgb25TY3JvbGwoKTogSUV2ZW50PG51bWJlcj4geyByZXR1cm4gdGhpcy5fb25TY3JvbGwuZXZlbnQ7IH1cblxuICBwdWJsaWMgZ2V0IGJ1ZmZlcigpOiBJQnVmZmVyIHsgcmV0dXJuIHRoaXMuYnVmZmVycy5hY3RpdmU7IH1cblxuICAvKiogQW4gSUJ1ZmZlcmxpbmUgdG8gY2xvbmUvY29weSBmcm9tIGZvciBuZXcgYmxhbmsgbGluZXMgKi9cbiAgcHJpdmF0ZSBfY2FjaGVkQmxhbmtMaW5lOiBJQnVmZmVyTGluZSB8IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASU9wdGlvbnNTZXJ2aWNlIHByaXZhdGUgX29wdGlvbnNTZXJ2aWNlOiBJT3B0aW9uc1NlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmNvbHMgPSBNYXRoLm1heChfb3B0aW9uc1NlcnZpY2UucmF3T3B0aW9ucy5jb2xzIHx8IDAsIE1JTklNVU1fQ09MUyk7XG4gICAgdGhpcy5yb3dzID0gTWF0aC5tYXgoX29wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMucm93cyB8fCAwLCBNSU5JTVVNX1JPV1MpO1xuICAgIHRoaXMuYnVmZmVycyA9IG5ldyBCdWZmZXJTZXQoX29wdGlvbnNTZXJ2aWNlLCB0aGlzKTtcbiAgfVxuXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xuICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICB0aGlzLmJ1ZmZlcnMuZGlzcG9zZSgpO1xuICB9XG5cbiAgcHVibGljIHJlc2l6ZShjb2xzOiBudW1iZXIsIHJvd3M6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuY29scyA9IGNvbHM7XG4gICAgdGhpcy5yb3dzID0gcm93cztcbiAgICB0aGlzLmJ1ZmZlcnMucmVzaXplKGNvbHMsIHJvd3MpO1xuICAgIHRoaXMuYnVmZmVycy5zZXR1cFRhYlN0b3BzKHRoaXMuY29scyk7XG4gICAgdGhpcy5fb25SZXNpemUuZmlyZSh7IGNvbHMsIHJvd3MgfSk7XG4gIH1cblxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XG4gICAgdGhpcy5idWZmZXJzLnJlc2V0KCk7XG4gICAgdGhpcy5pc1VzZXJTY3JvbGxpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY3JvbGwgdGhlIHRlcm1pbmFsIGRvd24gMSByb3csIGNyZWF0aW5nIGEgYmxhbmsgbGluZS5cbiAgICogQHBhcmFtIGlzV3JhcHBlZCBXaGV0aGVyIHRoZSBuZXcgbGluZSBpcyB3cmFwcGVkIGZyb20gdGhlIHByZXZpb3VzIGxpbmUuXG4gICAqL1xuICBwdWJsaWMgc2Nyb2xsKGVyYXNlQXR0cjogSUF0dHJpYnV0ZURhdGEsIGlzV3JhcHBlZDogYm9vbGVhbiA9IGZhbHNlKTogdm9pZCB7XG4gICAgY29uc3QgYnVmZmVyID0gdGhpcy5idWZmZXI7XG5cbiAgICBsZXQgbmV3TGluZTogSUJ1ZmZlckxpbmUgfCB1bmRlZmluZWQ7XG4gICAgbmV3TGluZSA9IHRoaXMuX2NhY2hlZEJsYW5rTGluZTtcbiAgICBpZiAoIW5ld0xpbmUgfHwgbmV3TGluZS5sZW5ndGggIT09IHRoaXMuY29scyB8fCBuZXdMaW5lLmdldEZnKDApICE9PSBlcmFzZUF0dHIuZmcgfHwgbmV3TGluZS5nZXRCZygwKSAhPT0gZXJhc2VBdHRyLmJnKSB7XG4gICAgICBuZXdMaW5lID0gYnVmZmVyLmdldEJsYW5rTGluZShlcmFzZUF0dHIsIGlzV3JhcHBlZCk7XG4gICAgICB0aGlzLl9jYWNoZWRCbGFua0xpbmUgPSBuZXdMaW5lO1xuICAgIH1cbiAgICBuZXdMaW5lLmlzV3JhcHBlZCA9IGlzV3JhcHBlZDtcblxuICAgIGNvbnN0IHRvcFJvdyA9IGJ1ZmZlci55YmFzZSArIGJ1ZmZlci5zY3JvbGxUb3A7XG4gICAgY29uc3QgYm90dG9tUm93ID0gYnVmZmVyLnliYXNlICsgYnVmZmVyLnNjcm9sbEJvdHRvbTtcblxuICAgIGlmIChidWZmZXIuc2Nyb2xsVG9wID09PSAwKSB7XG4gICAgICAvLyBEZXRlcm1pbmUgd2hldGhlciB0aGUgYnVmZmVyIGlzIGdvaW5nIHRvIGJlIHRyaW1tZWQgYWZ0ZXIgaW5zZXJ0aW9uLlxuICAgICAgY29uc3Qgd2lsbEJ1ZmZlckJlVHJpbW1lZCA9IGJ1ZmZlci5saW5lcy5pc0Z1bGw7XG5cbiAgICAgIC8vIEluc2VydCB0aGUgbGluZSB1c2luZyB0aGUgZmFzdGVzdCBtZXRob2RcbiAgICAgIGlmIChib3R0b21Sb3cgPT09IGJ1ZmZlci5saW5lcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIGlmICh3aWxsQnVmZmVyQmVUcmltbWVkKSB7XG4gICAgICAgICAgYnVmZmVyLmxpbmVzLnJlY3ljbGUoKS5jb3B5RnJvbShuZXdMaW5lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBidWZmZXIubGluZXMucHVzaChuZXdMaW5lLmNsb25lKCkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBidWZmZXIubGluZXMuc3BsaWNlKGJvdHRvbVJvdyArIDEsIDAsIG5ld0xpbmUuY2xvbmUoKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIE9ubHkgYWRqdXN0IHliYXNlIGFuZCB5ZGlzcCB3aGVuIHRoZSBidWZmZXIgaXMgbm90IHRyaW1tZWRcbiAgICAgIGlmICghd2lsbEJ1ZmZlckJlVHJpbW1lZCkge1xuICAgICAgICBidWZmZXIueWJhc2UrKztcbiAgICAgICAgLy8gT25seSBzY3JvbGwgdGhlIHlkaXNwIHdpdGggeWJhc2UgaWYgdGhlIHVzZXIgaGFzIG5vdCBzY3JvbGxlZCB1cFxuICAgICAgICBpZiAoIXRoaXMuaXNVc2VyU2Nyb2xsaW5nKSB7XG4gICAgICAgICAgYnVmZmVyLnlkaXNwKys7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFdoZW4gdGhlIGJ1ZmZlciBpcyBmdWxsIGFuZCB0aGUgdXNlciBoYXMgc2Nyb2xsZWQgdXAsIGtlZXAgdGhlIHRleHRcbiAgICAgICAgLy8gc3RhYmxlIHVubGVzcyB5ZGlzcCBpcyByaWdodCBhdCB0aGUgdG9wXG4gICAgICAgIGlmICh0aGlzLmlzVXNlclNjcm9sbGluZykge1xuICAgICAgICAgIGJ1ZmZlci55ZGlzcCA9IE1hdGgubWF4KGJ1ZmZlci55ZGlzcCAtIDEsIDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHNjcm9sbFRvcCBpcyBub24temVybyB3aGljaCBtZWFucyBubyBsaW5lIHdpbGwgYmUgZ29pbmcgdG8gdGhlXG4gICAgICAvLyBzY3JvbGxiYWNrLCBpbnN0ZWFkIHdlIGNhbiBqdXN0IHNoaWZ0IHRoZW0gaW4tcGxhY2UuXG4gICAgICBjb25zdCBzY3JvbGxSZWdpb25IZWlnaHQgPSBib3R0b21Sb3cgLSB0b3BSb3cgKyAxIC8qIGFzIGl0J3MgemVyby1iYXNlZCAqLztcbiAgICAgIGJ1ZmZlci5saW5lcy5zaGlmdEVsZW1lbnRzKHRvcFJvdyArIDEsIHNjcm9sbFJlZ2lvbkhlaWdodCAtIDEsIC0xKTtcbiAgICAgIGJ1ZmZlci5saW5lcy5zZXQoYm90dG9tUm93LCBuZXdMaW5lLmNsb25lKCkpO1xuICAgIH1cblxuICAgIC8vIE1vdmUgdGhlIHZpZXdwb3J0IHRvIHRoZSBib3R0b20gb2YgdGhlIGJ1ZmZlciB1bmxlc3MgdGhlIHVzZXIgaXNcbiAgICAvLyBzY3JvbGxpbmcuXG4gICAgaWYgKCF0aGlzLmlzVXNlclNjcm9sbGluZykge1xuICAgICAgYnVmZmVyLnlkaXNwID0gYnVmZmVyLnliYXNlO1xuICAgIH1cblxuICAgIHRoaXMuX29uU2Nyb2xsLmZpcmUoYnVmZmVyLnlkaXNwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY3JvbGwgdGhlIGRpc3BsYXkgb2YgdGhlIHRlcm1pbmFsXG4gICAqIEBwYXJhbSBkaXNwIFRoZSBudW1iZXIgb2YgbGluZXMgdG8gc2Nyb2xsIGRvd24gKG5lZ2F0aXZlIHNjcm9sbCB1cCkuXG4gICAqIEBwYXJhbSBzdXBwcmVzc1Njcm9sbEV2ZW50IERvbid0IGVtaXQgdGhlIHNjcm9sbCBldmVudCBhcyBzY3JvbGxMaW5lcy4gVGhpcyBpcyB1c2VkXG4gICAqIHRvIGF2b2lkIHVud2FudGVkIGV2ZW50cyBiZWluZyBoYW5kbGVkIGJ5IHRoZSB2aWV3cG9ydCB3aGVuIHRoZSBldmVudCB3YXMgdHJpZ2dlcmVkIGZyb20gdGhlXG4gICAqIHZpZXdwb3J0IG9yaWdpbmFsbHkuXG4gICAqL1xuICBwdWJsaWMgc2Nyb2xsTGluZXMoZGlzcDogbnVtYmVyLCBzdXBwcmVzc1Njcm9sbEV2ZW50PzogYm9vbGVhbiwgc291cmNlPzogU2Nyb2xsU291cmNlKTogdm9pZCB7XG4gICAgY29uc3QgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgaWYgKGRpc3AgPCAwKSB7XG4gICAgICBpZiAoYnVmZmVyLnlkaXNwID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuaXNVc2VyU2Nyb2xsaW5nID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGRpc3AgKyBidWZmZXIueWRpc3AgPj0gYnVmZmVyLnliYXNlKSB7XG4gICAgICB0aGlzLmlzVXNlclNjcm9sbGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IG9sZFlkaXNwID0gYnVmZmVyLnlkaXNwO1xuICAgIGJ1ZmZlci55ZGlzcCA9IE1hdGgubWF4KE1hdGgubWluKGJ1ZmZlci55ZGlzcCArIGRpc3AsIGJ1ZmZlci55YmFzZSksIDApO1xuXG4gICAgLy8gTm8gY2hhbmdlIG9jY3VycmVkLCBkb24ndCB0cmlnZ2VyIHNjcm9sbC9yZWZyZXNoXG4gICAgaWYgKG9sZFlkaXNwID09PSBidWZmZXIueWRpc3ApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXN1cHByZXNzU2Nyb2xsRXZlbnQpIHtcbiAgICAgIHRoaXMuX29uU2Nyb2xsLmZpcmUoYnVmZmVyLnlkaXNwKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2Nyb2xsIHRoZSBkaXNwbGF5IG9mIHRoZSB0ZXJtaW5hbCBieSBhIG51bWJlciBvZiBwYWdlcy5cbiAgICogQHBhcmFtIHBhZ2VDb3VudCBUaGUgbnVtYmVyIG9mIHBhZ2VzIHRvIHNjcm9sbCAobmVnYXRpdmUgc2Nyb2xscyB1cCkuXG4gICAqL1xuICBwdWJsaWMgc2Nyb2xsUGFnZXMocGFnZUNvdW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnNjcm9sbExpbmVzKHBhZ2VDb3VudCAqICh0aGlzLnJvd3MgLSAxKSk7XG4gIH1cblxuICAvKipcbiAgICogU2Nyb2xscyB0aGUgZGlzcGxheSBvZiB0aGUgdGVybWluYWwgdG8gdGhlIHRvcC5cbiAgICovXG4gIHB1YmxpYyBzY3JvbGxUb1RvcCgpOiB2b2lkIHtcbiAgICB0aGlzLnNjcm9sbExpbmVzKC10aGlzLmJ1ZmZlci55ZGlzcCk7XG4gIH1cblxuICAvKipcbiAgICogU2Nyb2xscyB0aGUgZGlzcGxheSBvZiB0aGUgdGVybWluYWwgdG8gdGhlIGJvdHRvbS5cbiAgICovXG4gIHB1YmxpYyBzY3JvbGxUb0JvdHRvbSgpOiB2b2lkIHtcbiAgICB0aGlzLnNjcm9sbExpbmVzKHRoaXMuYnVmZmVyLnliYXNlIC0gdGhpcy5idWZmZXIueWRpc3ApO1xuICB9XG5cbiAgcHVibGljIHNjcm9sbFRvTGluZShsaW5lOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBzY3JvbGxBbW91bnQgPSBsaW5lIC0gdGhpcy5idWZmZXIueWRpc3A7XG4gICAgaWYgKHNjcm9sbEFtb3VudCAhPT0gMCkge1xuICAgICAgdGhpcy5zY3JvbGxMaW5lcyhzY3JvbGxBbW91bnQpO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJQ2hhcnNldFNlcnZpY2UgfSBmcm9tICdjb21tb24vc2VydmljZXMvU2VydmljZXMnO1xuaW1wb3J0IHsgSUNoYXJzZXQgfSBmcm9tICdjb21tb24vVHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgQ2hhcnNldFNlcnZpY2UgaW1wbGVtZW50cyBJQ2hhcnNldFNlcnZpY2Uge1xuICBwdWJsaWMgc2VydmljZUJyYW5kOiBhbnk7XG5cbiAgcHVibGljIGNoYXJzZXQ6IElDaGFyc2V0IHwgdW5kZWZpbmVkO1xuICBwdWJsaWMgZ2xldmVsOiBudW1iZXIgPSAwO1xuXG4gIHByaXZhdGUgX2NoYXJzZXRzOiAoSUNoYXJzZXQgfCB1bmRlZmluZWQpW10gPSBbXTtcblxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XG4gICAgdGhpcy5jaGFyc2V0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2NoYXJzZXRzID0gW107XG4gICAgdGhpcy5nbGV2ZWwgPSAwO1xuICB9XG5cbiAgcHVibGljIHNldGdMZXZlbChnOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLmdsZXZlbCA9IGc7XG4gICAgdGhpcy5jaGFyc2V0ID0gdGhpcy5fY2hhcnNldHNbZ107XG4gIH1cblxuICBwdWJsaWMgc2V0Z0NoYXJzZXQoZzogbnVtYmVyLCBjaGFyc2V0OiBJQ2hhcnNldCB8IHVuZGVmaW5lZCk6IHZvaWQge1xuICAgIHRoaXMuX2NoYXJzZXRzW2ddID0gY2hhcnNldDtcbiAgICBpZiAodGhpcy5nbGV2ZWwgPT09IGcpIHtcbiAgICAgIHRoaXMuY2hhcnNldCA9IGNoYXJzZXQ7XG4gICAgfVxuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5pbXBvcnQgeyBJQnVmZmVyU2VydmljZSwgSUNvcmVTZXJ2aWNlLCBJQ29yZU1vdXNlU2VydmljZSB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElFdmVudCB9IGZyb20gJ2NvbW1vbi9FdmVudEVtaXR0ZXInO1xuaW1wb3J0IHsgSUNvcmVNb3VzZVByb3RvY29sLCBJQ29yZU1vdXNlRXZlbnQsIENvcmVNb3VzZUVuY29kaW5nLCBDb3JlTW91c2VFdmVudFR5cGUsIENvcmVNb3VzZUJ1dHRvbiwgQ29yZU1vdXNlQWN0aW9uIH0gZnJvbSAnY29tbW9uL1R5cGVzJztcblxuLyoqXG4gKiBTdXBwb3J0ZWQgZGVmYXVsdCBwcm90b2NvbHMuXG4gKi9cbmNvbnN0IERFRkFVTFRfUFJPVE9DT0xTOiB7W2tleTogc3RyaW5nXTogSUNvcmVNb3VzZVByb3RvY29sfSA9IHtcbiAgLyoqXG4gICAqIE5PTkVcbiAgICogRXZlbnRzOiBub25lXG4gICAqIE1vZGlmaWVyczogbm9uZVxuICAgKi9cbiAgTk9ORToge1xuICAgIGV2ZW50czogQ29yZU1vdXNlRXZlbnRUeXBlLk5PTkUsXG4gICAgcmVzdHJpY3Q6ICgpID0+IGZhbHNlXG4gIH0sXG4gIC8qKlxuICAgKiBYMTBcbiAgICogRXZlbnRzOiBtb3VzZWRvd25cbiAgICogTW9kaWZpZXJzOiBub25lXG4gICAqL1xuICBYMTA6IHtcbiAgICBldmVudHM6IENvcmVNb3VzZUV2ZW50VHlwZS5ET1dOLFxuICAgIHJlc3RyaWN0OiAoZTogSUNvcmVNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAvLyBubyB3aGVlbCwgbm8gbW92ZSwgbm8gdXBcbiAgICAgIGlmIChlLmJ1dHRvbiA9PT0gQ29yZU1vdXNlQnV0dG9uLldIRUVMIHx8IGUuYWN0aW9uICE9PSBDb3JlTW91c2VBY3Rpb24uRE9XTikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBubyBtb2RpZmllcnNcbiAgICAgIGUuY3RybCA9IGZhbHNlO1xuICAgICAgZS5hbHQgPSBmYWxzZTtcbiAgICAgIGUuc2hpZnQgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSxcbiAgLyoqXG4gICAqIFZUMjAwXG4gICAqIEV2ZW50czogbW91c2Vkb3duIC8gbW91c2V1cCAvIHdoZWVsXG4gICAqIE1vZGlmaWVyczogYWxsXG4gICAqL1xuICBWVDIwMDoge1xuICAgIGV2ZW50czogQ29yZU1vdXNlRXZlbnRUeXBlLkRPV04gfCBDb3JlTW91c2VFdmVudFR5cGUuVVAgfCBDb3JlTW91c2VFdmVudFR5cGUuV0hFRUwsXG4gICAgcmVzdHJpY3Q6IChlOiBJQ29yZU1vdXNlRXZlbnQpID0+IHtcbiAgICAgIC8vIG5vIG1vdmVcbiAgICAgIGlmIChlLmFjdGlvbiA9PT0gQ29yZU1vdXNlQWN0aW9uLk1PVkUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LFxuICAvKipcbiAgICogRFJBR1xuICAgKiBFdmVudHM6IG1vdXNlZG93biAvIG1vdXNldXAgLyB3aGVlbCAvIG1vdXNlZHJhZ1xuICAgKiBNb2RpZmllcnM6IGFsbFxuICAgKi9cbiAgRFJBRzoge1xuICAgIGV2ZW50czogQ29yZU1vdXNlRXZlbnRUeXBlLkRPV04gfCBDb3JlTW91c2VFdmVudFR5cGUuVVAgfCBDb3JlTW91c2VFdmVudFR5cGUuV0hFRUwgfCBDb3JlTW91c2VFdmVudFR5cGUuRFJBRyxcbiAgICByZXN0cmljdDogKGU6IElDb3JlTW91c2VFdmVudCkgPT4ge1xuICAgICAgLy8gbm8gbW92ZSB3aXRob3V0IGJ1dHRvblxuICAgICAgaWYgKGUuYWN0aW9uID09PSBDb3JlTW91c2VBY3Rpb24uTU9WRSAmJiBlLmJ1dHRvbiA9PT0gQ29yZU1vdXNlQnV0dG9uLk5PTkUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LFxuICAvKipcbiAgICogQU5ZXG4gICAqIEV2ZW50czogYWxsIG1vdXNlIHJlbGF0ZWQgZXZlbnRzXG4gICAqIE1vZGlmaWVyczogYWxsXG4gICAqL1xuICBBTlk6IHtcbiAgICBldmVudHM6XG4gICAgICBDb3JlTW91c2VFdmVudFR5cGUuRE9XTiB8IENvcmVNb3VzZUV2ZW50VHlwZS5VUCB8IENvcmVNb3VzZUV2ZW50VHlwZS5XSEVFTFxuICAgICAgfCBDb3JlTW91c2VFdmVudFR5cGUuRFJBRyB8IENvcmVNb3VzZUV2ZW50VHlwZS5NT1ZFLFxuICAgIHJlc3RyaWN0OiAoZTogSUNvcmVNb3VzZUV2ZW50KSA9PiB0cnVlXG4gIH1cbn07XG5cbmNvbnN0IGVudW0gTW9kaWZpZXJzIHtcbiAgU0hJRlQgPSA0LFxuICBBTFQgPSA4LFxuICBDVFJMID0gMTZcbn1cblxuLy8gaGVscGVyIGZvciBkZWZhdWx0IGVuY29kZXJzIHRvIGdlbmVyYXRlIHRoZSBldmVudCBjb2RlLlxuZnVuY3Rpb24gZXZlbnRDb2RlKGU6IElDb3JlTW91c2VFdmVudCwgaXNTR1I6IGJvb2xlYW4pOiBudW1iZXIge1xuICBsZXQgY29kZSA9IChlLmN0cmwgPyBNb2RpZmllcnMuQ1RSTCA6IDApIHwgKGUuc2hpZnQgPyBNb2RpZmllcnMuU0hJRlQgOiAwKSB8IChlLmFsdCA/IE1vZGlmaWVycy5BTFQgOiAwKTtcbiAgaWYgKGUuYnV0dG9uID09PSBDb3JlTW91c2VCdXR0b24uV0hFRUwpIHtcbiAgICBjb2RlIHw9IDY0O1xuICAgIGNvZGUgfD0gZS5hY3Rpb247XG4gIH0gZWxzZSB7XG4gICAgY29kZSB8PSBlLmJ1dHRvbiAmIDM7XG4gICAgaWYgKGUuYnV0dG9uICYgNCkge1xuICAgICAgY29kZSB8PSA2NDtcbiAgICB9XG4gICAgaWYgKGUuYnV0dG9uICYgOCkge1xuICAgICAgY29kZSB8PSAxMjg7XG4gICAgfVxuICAgIGlmIChlLmFjdGlvbiA9PT0gQ29yZU1vdXNlQWN0aW9uLk1PVkUpIHtcbiAgICAgIGNvZGUgfD0gQ29yZU1vdXNlQWN0aW9uLk1PVkU7XG4gICAgfSBlbHNlIGlmIChlLmFjdGlvbiA9PT0gQ29yZU1vdXNlQWN0aW9uLlVQICYmICFpc1NHUikge1xuICAgICAgLy8gc3BlY2lhbCBjYXNlIC0gb25seSBTR1IgY2FuIHJlcG9ydCBidXR0b24gb24gcmVsZWFzZVxuICAgICAgLy8gYWxsIG90aGVycyBoYXZlIHRvIGdvIHdpdGggTk9ORVxuICAgICAgY29kZSB8PSBDb3JlTW91c2VCdXR0b24uTk9ORTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNvZGU7XG59XG5cbmNvbnN0IFMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG4vKipcbiAqIFN1cHBvcnRlZCBkZWZhdWx0IGVuY29kaW5ncy5cbiAqL1xuY29uc3QgREVGQVVMVF9FTkNPRElOR1M6IHtba2V5OiBzdHJpbmddOiBDb3JlTW91c2VFbmNvZGluZ30gPSB7XG4gIC8qKlxuICAgKiBERUZBVUxUIC0gQ1NJIE0gUGIgUHggUHlcbiAgICogU2luZ2xlIGJ5dGUgZW5jb2RpbmcgZm9yIGNvb3JkcyBhbmQgZXZlbnQgY29kZS5cbiAgICogQ2FuIGVuY29kZSB2YWx1ZXMgdXAgdG8gMjIzICgxLWJhc2VkKS5cbiAgICovXG4gIERFRkFVTFQ6IChlOiBJQ29yZU1vdXNlRXZlbnQpID0+IHtcbiAgICBjb25zdCBwYXJhbXMgPSBbZXZlbnRDb2RlKGUsIGZhbHNlKSArIDMyLCBlLmNvbCArIDMyLCBlLnJvdyArIDMyXTtcbiAgICAvLyBzdXByZXNzIG1vdXNlIHJlcG9ydCBpZiB3ZSBleGNlZWQgYWRkcmVzc2libGUgcmFuZ2VcbiAgICAvLyBOb3RlIHRoaXMgaXMgaGFuZGxlZCBkaWZmZXJlbnRseSBieSBlbXVsYXRvcnNcbiAgICAvLyAtIHh0ZXJtOiAgICAgICAgIHNlbmRzIDA7MCBjb29yZHMgaW5zdGVhZFxuICAgIC8vIC0gdnRlLCBrb25zb2xlOiAgbm8gcmVwb3J0XG4gICAgaWYgKHBhcmFtc1swXSA+IDI1NSB8fCBwYXJhbXNbMV0gPiAyNTUgfHwgcGFyYW1zWzJdID4gMjU1KSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiBgXFx4MWJbTSR7UyhwYXJhbXNbMF0pfSR7UyhwYXJhbXNbMV0pfSR7UyhwYXJhbXNbMl0pfWA7XG4gIH0sXG4gIC8qKlxuICAgKiBTR1IgLSBDU0kgPCBQYiA7IFB4IDsgUHkgTXxtXG4gICAqIE5vIGVuY29kaW5nIGxpbWl0YXRpb24uXG4gICAqIENhbiByZXBvcnQgYnV0dG9uIG9uIHJlbGVhc2UgYW5kIHdvcmtzIHdpdGggYSB3ZWxsIGZvcm1lZCBzZXF1ZW5jZS5cbiAgICovXG4gIFNHUjogKGU6IElDb3JlTW91c2VFdmVudCkgPT4ge1xuICAgIGNvbnN0IGZpbmFsID0gKGUuYWN0aW9uID09PSBDb3JlTW91c2VBY3Rpb24uVVAgJiYgZS5idXR0b24gIT09IENvcmVNb3VzZUJ1dHRvbi5XSEVFTCkgPyAnbScgOiAnTSc7XG4gICAgcmV0dXJuIGBcXHgxYls8JHtldmVudENvZGUoZSwgdHJ1ZSl9OyR7ZS5jb2x9OyR7ZS5yb3d9JHtmaW5hbH1gO1xuICB9XG59O1xuXG4vKipcbiAqIENvcmVNb3VzZVNlcnZpY2VcbiAqXG4gKiBQcm92aWRlcyBtb3VzZSB0cmFja2luZyByZXBvcnRzIHdpdGggZGlmZmVyZW50IHByb3RvY29scyBhbmQgZW5jb2RpbmdzLlxuICogIC0gcHJvdG9jb2xzOiBOT05FIChkZWZhdWx0KSwgWDEwLCBWVDIwMCwgRFJBRywgQU5ZXG4gKiAgLSBlbmNvZGluZ3M6IERFRkFVTFQsIFNHUiAoVVRGOCwgVVJYVlQgcmVtb3ZlZCBpbiAjMjUwNylcbiAqXG4gKiBDdXN0b20gcHJvdG9jb2xzL2VuY29kaW5ncyBjYW4gYmUgYWRkZWQgYnkgYGFkZFByb3RvY29sYCAvIGBhZGRFbmNvZGluZ2AuXG4gKiBUbyBhY3RpdmF0ZSBhIHByb3RvY29sL2VuY29kaW5nLCBzZXQgYGFjdGl2ZVByb3RvY29sYCAvIGBhY3RpdmVFbmNvZGluZ2AuXG4gKiBTd2l0Y2hpbmcgYSBwcm90b2NvbCB3aWxsIHNlbmQgYSBub3RpZmljYXRpb24gZXZlbnQgYG9uUHJvdG9jb2xDaGFuZ2VgXG4gKiB3aXRoIGEgbGlzdCBvZiBuZWVkZWQgZXZlbnRzIHRvIHRyYWNrLlxuICpcbiAqIFRoZSBzZXJ2aWNlIGhhbmRsZXMgdGhlIG1vdXNlIHRyYWNraW5nIHN0YXRlIGFuZCBkZWNpZGVzIHdoZXRoZXIgdG8gc2VuZFxuICogYSB0cmFja2luZyByZXBvcnQgdG8gdGhlIGJhY2tlbmQgYmFzZWQgb24gcHJvdG9jb2wgYW5kIGVuY29kaW5nIGxpbWl0YXRpb25zLlxuICogVG8gc2VuZCBhIG1vdXNlIGV2ZW50IGNhbGwgYHRyaWdnZXJNb3VzZUV2ZW50YC5cbiAqL1xuZXhwb3J0IGNsYXNzIENvcmVNb3VzZVNlcnZpY2UgaW1wbGVtZW50cyBJQ29yZU1vdXNlU2VydmljZSB7XG4gIHByaXZhdGUgX3Byb3RvY29sczoge1tuYW1lOiBzdHJpbmddOiBJQ29yZU1vdXNlUHJvdG9jb2x9ID0ge307XG4gIHByaXZhdGUgX2VuY29kaW5nczoge1tuYW1lOiBzdHJpbmddOiBDb3JlTW91c2VFbmNvZGluZ30gPSB7fTtcbiAgcHJpdmF0ZSBfYWN0aXZlUHJvdG9jb2w6IHN0cmluZyA9ICcnO1xuICBwcml2YXRlIF9hY3RpdmVFbmNvZGluZzogc3RyaW5nID0gJyc7XG4gIHByaXZhdGUgX29uUHJvdG9jb2xDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPENvcmVNb3VzZUV2ZW50VHlwZT4oKTtcbiAgcHJpdmF0ZSBfbGFzdEV2ZW50OiBJQ29yZU1vdXNlRXZlbnQgfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASUJ1ZmZlclNlcnZpY2UgcHJpdmF0ZSByZWFkb25seSBfYnVmZmVyU2VydmljZTogSUJ1ZmZlclNlcnZpY2UsXG4gICAgQElDb3JlU2VydmljZSBwcml2YXRlIHJlYWRvbmx5IF9jb3JlU2VydmljZTogSUNvcmVTZXJ2aWNlXG4gICkge1xuICAgIC8vIHJlZ2lzdGVyIGRlZmF1bHQgcHJvdG9jb2xzIGFuZCBlbmNvZGluZ3NcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgT2JqZWN0LmtleXMoREVGQVVMVF9QUk9UT0NPTFMpKSB0aGlzLmFkZFByb3RvY29sKG5hbWUsIERFRkFVTFRfUFJPVE9DT0xTW25hbWVdKTtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgT2JqZWN0LmtleXMoREVGQVVMVF9FTkNPRElOR1MpKSB0aGlzLmFkZEVuY29kaW5nKG5hbWUsIERFRkFVTFRfRU5DT0RJTkdTW25hbWVdKTtcbiAgICAvLyBjYWxsIHJlc2V0IHRvIHNldCBkZWZhdWx0c1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuXG4gIHB1YmxpYyBhZGRQcm90b2NvbChuYW1lOiBzdHJpbmcsIHByb3RvY29sOiBJQ29yZU1vdXNlUHJvdG9jb2wpOiB2b2lkIHtcbiAgICB0aGlzLl9wcm90b2NvbHNbbmFtZV0gPSBwcm90b2NvbDtcbiAgfVxuXG4gIHB1YmxpYyBhZGRFbmNvZGluZyhuYW1lOiBzdHJpbmcsIGVuY29kaW5nOiBDb3JlTW91c2VFbmNvZGluZyk6IHZvaWQge1xuICAgIHRoaXMuX2VuY29kaW5nc1tuYW1lXSA9IGVuY29kaW5nO1xuICB9XG5cbiAgcHVibGljIGdldCBhY3RpdmVQcm90b2NvbCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmVQcm90b2NvbDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgYXJlTW91c2VFdmVudHNBY3RpdmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb3RvY29sc1t0aGlzLl9hY3RpdmVQcm90b2NvbF0uZXZlbnRzICE9PSAwO1xuICB9XG5cbiAgcHVibGljIHNldCBhY3RpdmVQcm90b2NvbChuYW1lOiBzdHJpbmcpIHtcbiAgICBpZiAoIXRoaXMuX3Byb3RvY29sc1tuYW1lXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bmtub3duIHByb3RvY29sIFwiJHtuYW1lfVwiYCk7XG4gICAgfVxuICAgIHRoaXMuX2FjdGl2ZVByb3RvY29sID0gbmFtZTtcbiAgICB0aGlzLl9vblByb3RvY29sQ2hhbmdlLmZpcmUodGhpcy5fcHJvdG9jb2xzW25hbWVdLmV2ZW50cyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGFjdGl2ZUVuY29kaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZUVuY29kaW5nO1xuICB9XG5cbiAgcHVibGljIHNldCBhY3RpdmVFbmNvZGluZyhuYW1lOiBzdHJpbmcpIHtcbiAgICBpZiAoIXRoaXMuX2VuY29kaW5nc1tuYW1lXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bmtub3duIGVuY29kaW5nIFwiJHtuYW1lfVwiYCk7XG4gICAgfVxuICAgIHRoaXMuX2FjdGl2ZUVuY29kaW5nID0gbmFtZTtcbiAgfVxuXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcbiAgICB0aGlzLmFjdGl2ZVByb3RvY29sID0gJ05PTkUnO1xuICAgIHRoaXMuYWN0aXZlRW5jb2RpbmcgPSAnREVGQVVMVCc7XG4gICAgdGhpcy5fbGFzdEV2ZW50ID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCB0byBhbm5vdW5jZSBjaGFuZ2VzIGluIG1vdXNlIHRyYWNraW5nLlxuICAgKi9cbiAgcHVibGljIGdldCBvblByb3RvY29sQ2hhbmdlKCk6IElFdmVudDxDb3JlTW91c2VFdmVudFR5cGU+IHtcbiAgICByZXR1cm4gdGhpcy5fb25Qcm90b2NvbENoYW5nZS5ldmVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VycyBhIG1vdXNlIGV2ZW50IHRvIGJlIHNlbnQuXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZXZlbnQgcGFzc2VkIGFsbCBwcm90b2NvbCByZXN0cmljdGlvbnMgYW5kIGEgcmVwb3J0XG4gICAqIHdhcyBzZW50LCBvdGhlcndpc2UgZmFsc2UuIFRoZSByZXR1cm4gdmFsdWUgbWF5IGJlIHVzZWQgdG8gZGVjaWRlIHdoZXRoZXJcbiAgICogdGhlIGRlZmF1bHQgZXZlbnQgYWN0aW9uIGluIHRoZSBib3dzZXIgY29tcG9uZW50IHNob3VsZCBiZSBvbWl0dGVkLlxuICAgKlxuICAgKiBOb3RlOiBUaGUgbWV0aG9kIHdpbGwgY2hhbmdlIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gZXZlbnQgb2JqZWN0XG4gICAqIHRvIGZ1bGxmaWxsIHByb3RvY29sIGFuZCBlbmNvZGluZyByZXN0cmljdGlvbnMuXG4gICAqL1xuICBwdWJsaWMgdHJpZ2dlck1vdXNlRXZlbnQoZTogSUNvcmVNb3VzZUV2ZW50KTogYm9vbGVhbiB7XG4gICAgLy8gcmFuZ2UgY2hlY2sgZm9yIGNvbC9yb3dcbiAgICBpZiAoZS5jb2wgPCAwIHx8IGUuY29sID49IHRoaXMuX2J1ZmZlclNlcnZpY2UuY29sc1xuICAgICAgICB8fCBlLnJvdyA8IDAgfHwgZS5yb3cgPj0gdGhpcy5fYnVmZmVyU2VydmljZS5yb3dzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gZmlsdGVyIG5vbnNlbnNlIGNvbWJpbmF0aW9ucyBvZiBidXR0b24gKyBhY3Rpb25cbiAgICBpZiAoZS5idXR0b24gPT09IENvcmVNb3VzZUJ1dHRvbi5XSEVFTCAmJiBlLmFjdGlvbiA9PT0gQ29yZU1vdXNlQWN0aW9uLk1PVkUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGUuYnV0dG9uID09PSBDb3JlTW91c2VCdXR0b24uTk9ORSAmJiBlLmFjdGlvbiAhPT0gQ29yZU1vdXNlQWN0aW9uLk1PVkUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGUuYnV0dG9uICE9PSBDb3JlTW91c2VCdXR0b24uV0hFRUwgJiYgKGUuYWN0aW9uID09PSBDb3JlTW91c2VBY3Rpb24uTEVGVCB8fCBlLmFjdGlvbiA9PT0gQ29yZU1vdXNlQWN0aW9uLlJJR0hUKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIHJlcG9ydCAxLWJhc2VkIGNvb3Jkc1xuICAgIGUuY29sKys7XG4gICAgZS5yb3crKztcblxuICAgIC8vIGRlYm91bmNlIG1vdmUgYXQgZ3JpZCBsZXZlbFxuICAgIGlmIChlLmFjdGlvbiA9PT0gQ29yZU1vdXNlQWN0aW9uLk1PVkUgJiYgdGhpcy5fbGFzdEV2ZW50ICYmIHRoaXMuX2NvbXBhcmVFdmVudHModGhpcy5fbGFzdEV2ZW50LCBlKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIGFwcGx5IHByb3RvY29sIHJlc3RyaWN0aW9uc1xuICAgIGlmICghdGhpcy5fcHJvdG9jb2xzW3RoaXMuX2FjdGl2ZVByb3RvY29sXS5yZXN0cmljdChlKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIGVuY29kZSByZXBvcnQgYW5kIHNlbmRcbiAgICBjb25zdCByZXBvcnQgPSB0aGlzLl9lbmNvZGluZ3NbdGhpcy5fYWN0aXZlRW5jb2RpbmddKGUpO1xuICAgIGlmIChyZXBvcnQpIHtcbiAgICAgIC8vIGFsd2F5cyBzZW5kIERFRkFVTFQgYXMgYmluYXJ5IGRhdGFcbiAgICAgIGlmICh0aGlzLl9hY3RpdmVFbmNvZGluZyA9PT0gJ0RFRkFVTFQnKSB7XG4gICAgICAgIHRoaXMuX2NvcmVTZXJ2aWNlLnRyaWdnZXJCaW5hcnlFdmVudChyZXBvcnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY29yZVNlcnZpY2UudHJpZ2dlckRhdGFFdmVudChyZXBvcnQsIHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2xhc3RFdmVudCA9IGU7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyBleHBsYWluRXZlbnRzKGV2ZW50czogQ29yZU1vdXNlRXZlbnRUeXBlKToge1tldmVudDogc3RyaW5nXTogYm9vbGVhbn0ge1xuICAgIHJldHVybiB7XG4gICAgICBkb3duOiAhIShldmVudHMgJiBDb3JlTW91c2VFdmVudFR5cGUuRE9XTiksXG4gICAgICB1cDogISEoZXZlbnRzICYgQ29yZU1vdXNlRXZlbnRUeXBlLlVQKSxcbiAgICAgIGRyYWc6ICEhKGV2ZW50cyAmIENvcmVNb3VzZUV2ZW50VHlwZS5EUkFHKSxcbiAgICAgIG1vdmU6ICEhKGV2ZW50cyAmIENvcmVNb3VzZUV2ZW50VHlwZS5NT1ZFKSxcbiAgICAgIHdoZWVsOiAhIShldmVudHMgJiBDb3JlTW91c2VFdmVudFR5cGUuV0hFRUwpXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgX2NvbXBhcmVFdmVudHMoZTE6IElDb3JlTW91c2VFdmVudCwgZTI6IElDb3JlTW91c2VFdmVudCk6IGJvb2xlYW4ge1xuICAgIGlmIChlMS5jb2wgIT09IGUyLmNvbCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChlMS5yb3cgIT09IGUyLnJvdykgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChlMS5idXR0b24gIT09IGUyLmJ1dHRvbikgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChlMS5hY3Rpb24gIT09IGUyLmFjdGlvbikgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChlMS5jdHJsICE9PSBlMi5jdHJsKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGUxLmFsdCAhPT0gZTIuYWx0KSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGUxLnNoaWZ0ICE9PSBlMi5zaGlmdCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElDb3JlU2VydmljZSwgSUxvZ1NlcnZpY2UsIElPcHRpb25zU2VydmljZSwgSUJ1ZmZlclNlcnZpY2UgfSBmcm9tICdjb21tb24vc2VydmljZXMvU2VydmljZXMnO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJRXZlbnQgfSBmcm9tICdjb21tb24vRXZlbnRFbWl0dGVyJztcbmltcG9ydCB7IElEZWNQcml2YXRlTW9kZXMsIElNb2RlcyB9IGZyb20gJ2NvbW1vbi9UeXBlcyc7XG5pbXBvcnQgeyBjbG9uZSB9IGZyb20gJ2NvbW1vbi9DbG9uZSc7XG5pbXBvcnQgeyBEaXNwb3NhYmxlIH0gZnJvbSAnY29tbW9uL0xpZmVjeWNsZSc7XG5cbmNvbnN0IERFRkFVTFRfTU9ERVM6IElNb2RlcyA9IE9iamVjdC5mcmVlemUoe1xuICBpbnNlcnRNb2RlOiBmYWxzZVxufSk7XG5cbmNvbnN0IERFRkFVTFRfREVDX1BSSVZBVEVfTU9ERVM6IElEZWNQcml2YXRlTW9kZXMgPSBPYmplY3QuZnJlZXplKHtcbiAgYXBwbGljYXRpb25DdXJzb3JLZXlzOiBmYWxzZSxcbiAgYXBwbGljYXRpb25LZXlwYWQ6IGZhbHNlLFxuICBicmFja2V0ZWRQYXN0ZU1vZGU6IGZhbHNlLFxuICBvcmlnaW46IGZhbHNlLFxuICByZXZlcnNlV3JhcGFyb3VuZDogZmFsc2UsXG4gIHNlbmRGb2N1czogZmFsc2UsXG4gIHdyYXBhcm91bmQ6IHRydWUgLy8gZGVmYXVsdHM6IHh0ZXJtIC0gdHJ1ZSwgdnQxMDAgLSBmYWxzZVxufSk7XG5cbmV4cG9ydCBjbGFzcyBDb3JlU2VydmljZSBleHRlbmRzIERpc3Bvc2FibGUgaW1wbGVtZW50cyBJQ29yZVNlcnZpY2Uge1xuICBwdWJsaWMgc2VydmljZUJyYW5kOiBhbnk7XG5cbiAgcHVibGljIGlzQ3Vyc29ySW5pdGlhbGl6ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHVibGljIGlzQ3Vyc29ySGlkZGVuOiBib29sZWFuID0gZmFsc2U7XG4gIHB1YmxpYyBtb2RlczogSU1vZGVzO1xuICBwdWJsaWMgZGVjUHJpdmF0ZU1vZGVzOiBJRGVjUHJpdmF0ZU1vZGVzO1xuXG4gIC8vIENpcmN1bGFyIGRlcGVuZGVuY3ksIHRoaXMgbXVzdCBiZSB1bnNldCBvciBtZW1vcnkgd2lsbCBsZWFrIGFmdGVyIFRlcm1pbmFsLmRpc3Bvc2VcbiAgcHJpdmF0ZSBfc2Nyb2xsVG9Cb3R0b206ICgoKSA9PiB2b2lkKSB8IHVuZGVmaW5lZDtcblxuICBwcml2YXRlIF9vbkRhdGEgPSB0aGlzLnJlZ2lzdGVyKG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpKTtcbiAgcHVibGljIGdldCBvbkRhdGEoKTogSUV2ZW50PHN0cmluZz4geyByZXR1cm4gdGhpcy5fb25EYXRhLmV2ZW50OyB9XG4gIHByaXZhdGUgX29uVXNlcklucHV0ID0gdGhpcy5yZWdpc3RlcihuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCkpO1xuICBwdWJsaWMgZ2V0IG9uVXNlcklucHV0KCk6IElFdmVudDx2b2lkPiB7IHJldHVybiB0aGlzLl9vblVzZXJJbnB1dC5ldmVudDsgfVxuICBwcml2YXRlIF9vbkJpbmFyeSA9IHRoaXMucmVnaXN0ZXIobmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCkpO1xuICBwdWJsaWMgZ2V0IG9uQmluYXJ5KCk6IElFdmVudDxzdHJpbmc+IHsgcmV0dXJuIHRoaXMuX29uQmluYXJ5LmV2ZW50OyB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgLy8gVE9ETzogTW92ZSB0aGlzIGludG8gYSBzZXJ2aWNlXG4gICAgc2Nyb2xsVG9Cb3R0b206ICgpID0+IHZvaWQsXG4gICAgQElCdWZmZXJTZXJ2aWNlIHByaXZhdGUgcmVhZG9ubHkgX2J1ZmZlclNlcnZpY2U6IElCdWZmZXJTZXJ2aWNlLFxuICAgIEBJTG9nU2VydmljZSBwcml2YXRlIHJlYWRvbmx5IF9sb2dTZXJ2aWNlOiBJTG9nU2VydmljZSxcbiAgICBASU9wdGlvbnNTZXJ2aWNlIHByaXZhdGUgcmVhZG9ubHkgX29wdGlvbnNTZXJ2aWNlOiBJT3B0aW9uc1NlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zY3JvbGxUb0JvdHRvbSA9IHNjcm9sbFRvQm90dG9tO1xuICAgIHRoaXMucmVnaXN0ZXIoeyBkaXNwb3NlOiAoKSA9PiB0aGlzLl9zY3JvbGxUb0JvdHRvbSA9IHVuZGVmaW5lZCB9KTtcbiAgICB0aGlzLm1vZGVzID0gY2xvbmUoREVGQVVMVF9NT0RFUyk7XG4gICAgdGhpcy5kZWNQcml2YXRlTW9kZXMgPSBjbG9uZShERUZBVUxUX0RFQ19QUklWQVRFX01PREVTKTtcbiAgfVxuXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcbiAgICB0aGlzLm1vZGVzID0gY2xvbmUoREVGQVVMVF9NT0RFUyk7XG4gICAgdGhpcy5kZWNQcml2YXRlTW9kZXMgPSBjbG9uZShERUZBVUxUX0RFQ19QUklWQVRFX01PREVTKTtcbiAgfVxuXG4gIHB1YmxpYyB0cmlnZ2VyRGF0YUV2ZW50KGRhdGE6IHN0cmluZywgd2FzVXNlcklucHV0OiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcbiAgICAvLyBQcmV2ZW50cyBhbGwgZXZlbnRzIHRvIHB0eSBwcm9jZXNzIGlmIHN0ZGluIGlzIGRpc2FibGVkXG4gICAgaWYgKHRoaXMuX29wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMuZGlzYWJsZVN0ZGluKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSW5wdXQgaXMgYmVpbmcgc2VudCB0byB0aGUgdGVybWluYWwsIHRoZSB0ZXJtaW5hbCBzaG91bGQgZm9jdXMgdGhlIHByb21wdC5cbiAgICBjb25zdCBidWZmZXIgPSB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlcjtcbiAgICBpZiAoYnVmZmVyLnliYXNlICE9PSBidWZmZXIueWRpc3ApIHtcbiAgICAgIHRoaXMuX3Njcm9sbFRvQm90dG9tISgpO1xuICAgIH1cblxuICAgIC8vIEZpcmUgb25Vc2VySW5wdXQgc28gbGlzdGVuZXJzIGNhbiByZWFjdCBhcyB3ZWxsIChlZy4gY2xlYXIgc2VsZWN0aW9uKVxuICAgIGlmICh3YXNVc2VySW5wdXQpIHtcbiAgICAgIHRoaXMuX29uVXNlcklucHV0LmZpcmUoKTtcbiAgICB9XG5cbiAgICAvLyBGaXJlIG9uRGF0YSBBUElcbiAgICB0aGlzLl9sb2dTZXJ2aWNlLmRlYnVnKGBzZW5kaW5nIGRhdGEgXCIke2RhdGF9XCJgLCAoKSA9PiBkYXRhLnNwbGl0KCcnKS5tYXAoZSA9PiBlLmNoYXJDb2RlQXQoMCkpKTtcbiAgICB0aGlzLl9vbkRhdGEuZmlyZShkYXRhKTtcbiAgfVxuXG4gIHB1YmxpYyB0cmlnZ2VyQmluYXJ5RXZlbnQoZGF0YTogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX29wdGlvbnNTZXJ2aWNlLnJhd09wdGlvbnMuZGlzYWJsZVN0ZGluKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2xvZ1NlcnZpY2UuZGVidWcoYHNlbmRpbmcgYmluYXJ5IFwiJHtkYXRhfVwiYCwgKCkgPT4gZGF0YS5zcGxpdCgnJykubWFwKGUgPT4gZS5jaGFyQ29kZUF0KDApKSk7XG4gICAgdGhpcy5fb25CaW5hcnkuZmlyZShkYXRhKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJQnVmZmVyU2VydmljZSwgSURpcnR5Um93U2VydmljZSB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5cbmV4cG9ydCBjbGFzcyBEaXJ0eVJvd1NlcnZpY2UgaW1wbGVtZW50cyBJRGlydHlSb3dTZXJ2aWNlIHtcbiAgcHVibGljIHNlcnZpY2VCcmFuZDogYW55O1xuXG4gIHByaXZhdGUgX3N0YXJ0ITogbnVtYmVyO1xuICBwcml2YXRlIF9lbmQhOiBudW1iZXI7XG5cbiAgcHVibGljIGdldCBzdGFydCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fc3RhcnQ7IH1cbiAgcHVibGljIGdldCBlbmQoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX2VuZDsgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJQnVmZmVyU2VydmljZSBwcml2YXRlIHJlYWRvbmx5IF9idWZmZXJTZXJ2aWNlOiBJQnVmZmVyU2VydmljZVxuICApIHtcbiAgICB0aGlzLmNsZWFyUmFuZ2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBjbGVhclJhbmdlKCk6IHZvaWQge1xuICAgIHRoaXMuX3N0YXJ0ID0gdGhpcy5fYnVmZmVyU2VydmljZS5idWZmZXIueTtcbiAgICB0aGlzLl9lbmQgPSB0aGlzLl9idWZmZXJTZXJ2aWNlLmJ1ZmZlci55O1xuICB9XG5cbiAgcHVibGljIG1hcmtEaXJ0eSh5OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoeSA8IHRoaXMuX3N0YXJ0KSB7XG4gICAgICB0aGlzLl9zdGFydCA9IHk7XG4gICAgfSBlbHNlIGlmICh5ID4gdGhpcy5fZW5kKSB7XG4gICAgICB0aGlzLl9lbmQgPSB5O1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBtYXJrUmFuZ2VEaXJ0eSh5MTogbnVtYmVyLCB5MjogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHkxID4geTIpIHtcbiAgICAgIGNvbnN0IHRlbXAgPSB5MTtcbiAgICAgIHkxID0geTI7XG4gICAgICB5MiA9IHRlbXA7XG4gICAgfVxuICAgIGlmICh5MSA8IHRoaXMuX3N0YXJ0KSB7XG4gICAgICB0aGlzLl9zdGFydCA9IHkxO1xuICAgIH1cbiAgICBpZiAoeTIgPiB0aGlzLl9lbmQpIHtcbiAgICAgIHRoaXMuX2VuZCA9IHkyO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBtYXJrQWxsRGlydHkoKTogdm9pZCB7XG4gICAgdGhpcy5tYXJrUmFuZ2VEaXJ0eSgwLCB0aGlzLl9idWZmZXJTZXJ2aWNlLnJvd3MgLSAxKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqXG4gKiBUaGlzIHdhcyBoZWF2aWx5IGluc3BpcmVkIGZyb20gbWljcm9zb2Z0L3ZzY29kZSdzIGRlcGVuZGVuY3kgaW5qZWN0aW9uIHN5c3RlbSAoTUlUKS5cbiAqL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbmltcG9ydCB7IElJbnN0YW50aWF0aW9uU2VydmljZSwgSVNlcnZpY2VJZGVudGlmaWVyIH0gZnJvbSAnY29tbW9uL3NlcnZpY2VzL1NlcnZpY2VzJztcbmltcG9ydCB7IGdldFNlcnZpY2VEZXBlbmRlbmNpZXMgfSBmcm9tICdjb21tb24vc2VydmljZXMvU2VydmljZVJlZ2lzdHJ5JztcblxuZXhwb3J0IGNsYXNzIFNlcnZpY2VDb2xsZWN0aW9uIHtcblxuICBwcml2YXRlIF9lbnRyaWVzID0gbmV3IE1hcDxJU2VydmljZUlkZW50aWZpZXI8YW55PiwgYW55PigpO1xuXG4gIGNvbnN0cnVjdG9yKC4uLmVudHJpZXM6IFtJU2VydmljZUlkZW50aWZpZXI8YW55PiwgYW55XVtdKSB7XG4gICAgZm9yIChjb25zdCBbaWQsIHNlcnZpY2VdIG9mIGVudHJpZXMpIHtcbiAgICAgIHRoaXMuc2V0KGlkLCBzZXJ2aWNlKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2V0PFQ+KGlkOiBJU2VydmljZUlkZW50aWZpZXI8VD4sIGluc3RhbmNlOiBUKTogVCB7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fZW50cmllcy5nZXQoaWQpO1xuICAgIHRoaXMuX2VudHJpZXMuc2V0KGlkLCBpbnN0YW5jZSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHB1YmxpYyBmb3JFYWNoKGNhbGxiYWNrOiAoaWQ6IElTZXJ2aWNlSWRlbnRpZmllcjxhbnk+LCBpbnN0YW5jZTogYW55KSA9PiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLl9lbnRyaWVzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IGNhbGxiYWNrKGtleSwgdmFsdWUpKTtcbiAgfVxuXG4gIHB1YmxpYyBoYXMoaWQ6IElTZXJ2aWNlSWRlbnRpZmllcjxhbnk+KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2VudHJpZXMuaGFzKGlkKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQ8VD4oaWQ6IElTZXJ2aWNlSWRlbnRpZmllcjxUPik6IFQgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9lbnRyaWVzLmdldChpZCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEluc3RhbnRpYXRpb25TZXJ2aWNlIGltcGxlbWVudHMgSUluc3RhbnRpYXRpb25TZXJ2aWNlIHtcbiAgcHVibGljIHNlcnZpY2VCcmFuZDogdW5kZWZpbmVkO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgX3NlcnZpY2VzOiBTZXJ2aWNlQ29sbGVjdGlvbiA9IG5ldyBTZXJ2aWNlQ29sbGVjdGlvbigpO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3NlcnZpY2VzLnNldChJSW5zdGFudGlhdGlvblNlcnZpY2UsIHRoaXMpO1xuICB9XG5cbiAgcHVibGljIHNldFNlcnZpY2U8VD4oaWQ6IElTZXJ2aWNlSWRlbnRpZmllcjxUPiwgaW5zdGFuY2U6IFQpOiB2b2lkIHtcbiAgICB0aGlzLl9zZXJ2aWNlcy5zZXQoaWQsIGluc3RhbmNlKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTZXJ2aWNlPFQ+KGlkOiBJU2VydmljZUlkZW50aWZpZXI8VD4pOiBUIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fc2VydmljZXMuZ2V0KGlkKTtcbiAgfVxuXG4gIHB1YmxpYyBjcmVhdGVJbnN0YW5jZTxUPihjdG9yOiBhbnksIC4uLmFyZ3M6IGFueVtdKTogVCB7XG4gICAgY29uc3Qgc2VydmljZURlcGVuZGVuY2llcyA9IGdldFNlcnZpY2VEZXBlbmRlbmNpZXMoY3Rvcikuc29ydCgoYSwgYikgPT4gYS5pbmRleCAtIGIuaW5kZXgpO1xuXG4gICAgY29uc3Qgc2VydmljZUFyZ3M6IGFueVtdID0gW107XG4gICAgZm9yIChjb25zdCBkZXBlbmRlbmN5IG9mIHNlcnZpY2VEZXBlbmRlbmNpZXMpIHtcbiAgICAgIGNvbnN0IHNlcnZpY2UgPSB0aGlzLl9zZXJ2aWNlcy5nZXQoZGVwZW5kZW5jeS5pZCk7XG4gICAgICBpZiAoIXNlcnZpY2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbY3JlYXRlSW5zdGFuY2VdICR7Y3Rvci5uYW1lfSBkZXBlbmRzIG9uIFVOS05PV04gc2VydmljZSAke2RlcGVuZGVuY3kuaWR9LmApO1xuICAgICAgfVxuICAgICAgc2VydmljZUFyZ3MucHVzaChzZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBjb25zdCBmaXJzdFNlcnZpY2VBcmdQb3MgPSBzZXJ2aWNlRGVwZW5kZW5jaWVzLmxlbmd0aCA+IDAgPyBzZXJ2aWNlRGVwZW5kZW5jaWVzWzBdLmluZGV4IDogYXJncy5sZW5ndGg7XG5cbiAgICAvLyBjaGVjayBmb3IgYXJndW1lbnQgbWlzbWF0Y2hlcywgYWRqdXN0IHN0YXRpYyBhcmdzIGlmIG5lZWRlZFxuICAgIGlmIChhcmdzLmxlbmd0aCAhPT0gZmlyc3RTZXJ2aWNlQXJnUG9zKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFtjcmVhdGVJbnN0YW5jZV0gRmlyc3Qgc2VydmljZSBkZXBlbmRlbmN5IG9mICR7Y3Rvci5uYW1lfSBhdCBwb3NpdGlvbiAke2ZpcnN0U2VydmljZUFyZ1BvcyArIDF9IGNvbmZsaWN0cyB3aXRoICR7YXJncy5sZW5ndGh9IHN0YXRpYyBhcmd1bWVudHNgKTtcbiAgICB9XG5cbiAgICAvLyBub3cgY3JlYXRlIHRoZSBpbnN0YW5jZVxuICAgIHJldHVybiBuZXcgY3RvciguLi5bLi4uYXJncywgLi4uc2VydmljZUFyZ3NdKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJTG9nU2VydmljZSwgSU9wdGlvbnNTZXJ2aWNlLCBMb2dMZXZlbEVudW0gfSBmcm9tICdjb21tb24vc2VydmljZXMvU2VydmljZXMnO1xuXG50eXBlIExvZ1R5cGUgPSAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB2b2lkO1xuXG5pbnRlcmZhY2UgSUNvbnNvbGUge1xuICBsb2c6IExvZ1R5cGU7XG4gIGVycm9yOiBMb2dUeXBlO1xuICBpbmZvOiBMb2dUeXBlO1xuICB0cmFjZTogTG9nVHlwZTtcbiAgd2FybjogTG9nVHlwZTtcbn1cblxuLy8gY29uc29sZSBpcyBhdmFpbGFibGUgb24gYm90aCBub2RlLmpzIGFuZCBicm93c2VyIGNvbnRleHRzIGJ1dCB0aGUgY29tbW9uXG4vLyBtb2R1bGUgZG9lc24ndCBkZXBlbmQgb24gdGhlbSBzbyB3ZSBuZWVkIHRvIGV4cGxpY2l0bHkgZGVjbGFyZSBpdC5cbmRlY2xhcmUgY29uc3QgY29uc29sZTogSUNvbnNvbGU7XG5cbmNvbnN0IG9wdGlvbnNLZXlUb0xvZ0xldmVsOiB7IFtrZXk6IHN0cmluZ106IExvZ0xldmVsRW51bSB9ID0ge1xuICBkZWJ1ZzogTG9nTGV2ZWxFbnVtLkRFQlVHLFxuICBpbmZvOiBMb2dMZXZlbEVudW0uSU5GTyxcbiAgd2FybjogTG9nTGV2ZWxFbnVtLldBUk4sXG4gIGVycm9yOiBMb2dMZXZlbEVudW0uRVJST1IsXG4gIG9mZjogTG9nTGV2ZWxFbnVtLk9GRlxufTtcblxuY29uc3QgTE9HX1BSRUZJWCA9ICd4dGVybS5qczogJztcblxuZXhwb3J0IGNsYXNzIExvZ1NlcnZpY2UgaW1wbGVtZW50cyBJTG9nU2VydmljZSB7XG4gIHB1YmxpYyBzZXJ2aWNlQnJhbmQ6IGFueTtcblxuICBwdWJsaWMgbG9nTGV2ZWw6IExvZ0xldmVsRW51bSA9IExvZ0xldmVsRW51bS5PRkY7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQElPcHRpb25zU2VydmljZSBwcml2YXRlIHJlYWRvbmx5IF9vcHRpb25zU2VydmljZTogSU9wdGlvbnNTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuX3VwZGF0ZUxvZ0xldmVsKCk7XG4gICAgdGhpcy5fb3B0aW9uc1NlcnZpY2Uub25PcHRpb25DaGFuZ2Uoa2V5ID0+IHtcbiAgICAgIGlmIChrZXkgPT09ICdsb2dMZXZlbCcpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlTG9nTGV2ZWwoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgX3VwZGF0ZUxvZ0xldmVsKCk6IHZvaWQge1xuICAgIHRoaXMubG9nTGV2ZWwgPSBvcHRpb25zS2V5VG9Mb2dMZXZlbFt0aGlzLl9vcHRpb25zU2VydmljZS5yYXdPcHRpb25zLmxvZ0xldmVsXTtcbiAgfVxuXG4gIHByaXZhdGUgX2V2YWxMYXp5T3B0aW9uYWxQYXJhbXMob3B0aW9uYWxQYXJhbXM6IGFueVtdKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25hbFBhcmFtcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25hbFBhcmFtc1tpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvcHRpb25hbFBhcmFtc1tpXSA9IG9wdGlvbmFsUGFyYW1zW2ldKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfbG9nKHR5cGU6IExvZ1R5cGUsIG1lc3NhZ2U6IHN0cmluZywgb3B0aW9uYWxQYXJhbXM6IGFueVtdKTogdm9pZCB7XG4gICAgdGhpcy5fZXZhbExhenlPcHRpb25hbFBhcmFtcyhvcHRpb25hbFBhcmFtcyk7XG4gICAgdHlwZS5jYWxsKGNvbnNvbGUsIExPR19QUkVGSVggKyBtZXNzYWdlLCAuLi5vcHRpb25hbFBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgZGVidWcobWVzc2FnZTogc3RyaW5nLCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5sb2dMZXZlbCA8PSBMb2dMZXZlbEVudW0uREVCVUcpIHtcbiAgICAgIHRoaXMuX2xvZyhjb25zb2xlLmxvZywgbWVzc2FnZSwgb3B0aW9uYWxQYXJhbXMpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBpbmZvKG1lc3NhZ2U6IHN0cmluZywgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubG9nTGV2ZWwgPD0gTG9nTGV2ZWxFbnVtLklORk8pIHtcbiAgICAgIHRoaXMuX2xvZyhjb25zb2xlLmluZm8sIG1lc3NhZ2UsIG9wdGlvbmFsUGFyYW1zKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgd2FybihtZXNzYWdlOiBzdHJpbmcsIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSk6IHZvaWQge1xuICAgIGlmICh0aGlzLmxvZ0xldmVsIDw9IExvZ0xldmVsRW51bS5XQVJOKSB7XG4gICAgICB0aGlzLl9sb2coY29uc29sZS53YXJuLCBtZXNzYWdlLCBvcHRpb25hbFBhcmFtcyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGVycm9yKG1lc3NhZ2U6IHN0cmluZywgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubG9nTGV2ZWwgPD0gTG9nTGV2ZWxFbnVtLkVSUk9SKSB7XG4gICAgICB0aGlzLl9sb2coY29uc29sZS5lcnJvciwgbWVzc2FnZSwgb3B0aW9uYWxQYXJhbXMpO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJT3B0aW9uc1NlcnZpY2UsIElUZXJtaW5hbE9wdGlvbnMsIEZvbnRXZWlnaHQgfSBmcm9tICdjb21tb24vc2VydmljZXMvU2VydmljZXMnO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJRXZlbnQgfSBmcm9tICdjb21tb24vRXZlbnRFbWl0dGVyJztcbmltcG9ydCB7IGlzTWFjIH0gZnJvbSAnY29tbW9uL1BsYXRmb3JtJztcblxuLy8gU291cmNlOiBodHRwczovL2ZyZWVzb3VuZC5vcmcvcGVvcGxlL2FsdGVtYXJrL3NvdW5kcy80NTc1OS9cbi8vIFRoaXMgc291bmQgaXMgcmVsZWFzZWQgdW5kZXIgdGhlIENyZWF0aXZlIENvbW1vbnMgQXR0cmlidXRpb24gMy4wIFVucG9ydGVkXG4vLyAoQ0MgQlkgMy4wKSBsaWNlbnNlLiBJdCB3YXMgY3JlYXRlZCBieSAnYWx0ZW1hcmsnLiBObyBtb2RpZmljYXRpb25zIGhhdmUgYmVlblxuLy8gbWFkZSwgYXBhcnQgZnJvbSB0aGUgY29udmVyc2lvbiB0byBiYXNlNjQuXG5leHBvcnQgY29uc3QgREVGQVVMVF9CRUxMX1NPVU5EID0gJ2RhdGE6YXVkaW8vbXAzO2Jhc2U2NCxTVVF6QkFBQUFBQUFJMVJUVTBVQUFBQVBBQUFEVEdGMlpqVTRMak15TGpFd05BQUFBQUFBQUFBQUFBQUEvL3RReEFBREI4QWhTbXhoSUlFVkNTaUpyRENRQlRjdTNVckFJd1Vka1JnUWJGQVpDMUNRRXdUSjltalJ2QkE0VU9MRDhuS1ZPV2ZoK1VsSzN6LzE3N09YcmZPZEtsN3B5bjNYZi8vV3JleVRSVW9BV2dCZ2tPQUdiWkhCZ0cxT0Y2ek04MkRXYlphVW1NQnB0Z1FoR2pzeVlxYzlhZTlYRnoyODA5NDhOTUJXSW5sanl6c05SRkxQV2RuWkdXcmRkRHNqSzF1bnVTclZOOWpKc0s4S3VRdFFDdE1CakNFdEltSVNkTktKT29wSXBCRnBOU01iSUhDU1JwUlI1aWFralRpeXpMaGNoVVVCd0NneUtpd2VCdi83VXNRYmc4aXNWTm9NUE1qQUFBQTBnQUFBQkVWRkdtZ3FLLy8vLzliUC82WEN5a3hCVFVVekxqRXdNS3FxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxJztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfT1BUSU9OUzogUmVhZG9ubHk8SVRlcm1pbmFsT3B0aW9ucz4gPSB7XG4gIGNvbHM6IDgwLFxuICByb3dzOiAyNCxcbiAgY3Vyc29yQmxpbms6IGZhbHNlLFxuICBjdXJzb3JTdHlsZTogJ2Jsb2NrJyxcbiAgY3Vyc29yV2lkdGg6IDEsXG4gIGN1c3RvbUdseXBoczogdHJ1ZSxcbiAgYmVsbFNvdW5kOiBERUZBVUxUX0JFTExfU09VTkQsXG4gIGJlbGxTdHlsZTogJ25vbmUnLFxuICBkcmF3Qm9sZFRleHRJbkJyaWdodENvbG9yczogdHJ1ZSxcbiAgZmFzdFNjcm9sbE1vZGlmaWVyOiAnYWx0JyxcbiAgZmFzdFNjcm9sbFNlbnNpdGl2aXR5OiA1LFxuICBmb250RmFtaWx5OiAnY291cmllci1uZXcsIGNvdXJpZXIsIG1vbm9zcGFjZScsXG4gIGZvbnRTaXplOiAxNSxcbiAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gIGZvbnRXZWlnaHRCb2xkOiAnYm9sZCcsXG4gIGxpbmVIZWlnaHQ6IDEuMCxcbiAgbGlua1Rvb2x0aXBIb3ZlckR1cmF0aW9uOiA1MDAsXG4gIGxldHRlclNwYWNpbmc6IDAsXG4gIGxvZ0xldmVsOiAnaW5mbycsXG4gIHNjcm9sbGJhY2s6IDEwMDAsXG4gIHNjcm9sbFNlbnNpdGl2aXR5OiAxLFxuICBzY3JlZW5SZWFkZXJNb2RlOiBmYWxzZSxcbiAgbWFjT3B0aW9uSXNNZXRhOiBmYWxzZSxcbiAgbWFjT3B0aW9uQ2xpY2tGb3JjZXNTZWxlY3Rpb246IGZhbHNlLFxuICBtaW5pbXVtQ29udHJhc3RSYXRpbzogMSxcbiAgZGlzYWJsZVN0ZGluOiBmYWxzZSxcbiAgYWxsb3dQcm9wb3NlZEFwaTogdHJ1ZSxcbiAgYWxsb3dUcmFuc3BhcmVuY3k6IGZhbHNlLFxuICB0YWJTdG9wV2lkdGg6IDgsXG4gIHRoZW1lOiB7fSxcbiAgcmlnaHRDbGlja1NlbGVjdHNXb3JkOiBpc01hYyxcbiAgcmVuZGVyZXJUeXBlOiAnY2FudmFzJyxcbiAgd2luZG93T3B0aW9uczoge30sXG4gIHdpbmRvd3NNb2RlOiBmYWxzZSxcbiAgd29yZFNlcGFyYXRvcjogJyAoKVtde31cXCcsXCJgJyxcbiAgYWx0Q2xpY2tNb3Zlc0N1cnNvcjogdHJ1ZSxcbiAgY29udmVydEVvbDogZmFsc2UsXG4gIHRlcm1OYW1lOiAneHRlcm0nLFxuICBjYW5jZWxFdmVudHM6IGZhbHNlXG59O1xuXG5jb25zdCBGT05UX1dFSUdIVF9PUFRJT05TOiBFeHRyYWN0PEZvbnRXZWlnaHQsIHN0cmluZz5bXSA9IFsnbm9ybWFsJywgJ2JvbGQnLCAnMTAwJywgJzIwMCcsICczMDAnLCAnNDAwJywgJzUwMCcsICc2MDAnLCAnNzAwJywgJzgwMCcsICc5MDAnXTtcblxuZXhwb3J0IGNsYXNzIE9wdGlvbnNTZXJ2aWNlIGltcGxlbWVudHMgSU9wdGlvbnNTZXJ2aWNlIHtcbiAgcHVibGljIHNlcnZpY2VCcmFuZDogYW55O1xuXG4gIHB1YmxpYyByZWFkb25seSByYXdPcHRpb25zOiBJVGVybWluYWxPcHRpb25zO1xuICBwdWJsaWMgb3B0aW9uczogSVRlcm1pbmFsT3B0aW9ucztcblxuICBwcml2YXRlIF9vbk9wdGlvbkNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuICBwdWJsaWMgZ2V0IG9uT3B0aW9uQ2hhbmdlKCk6IElFdmVudDxzdHJpbmc+IHsgcmV0dXJuIHRoaXMuX29uT3B0aW9uQ2hhbmdlLmV2ZW50OyB9XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogUGFydGlhbDxJVGVybWluYWxPcHRpb25zPikge1xuICAgIC8vIHNldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBlYWNoIG9wdGlvblxuICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0geyAuLi5ERUZBVUxUX09QVElPTlMgfTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvcHRpb25zKSB7XG4gICAgICBpZiAoa2V5IGluIGRlZmF1bHRPcHRpb25zKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBvcHRpb25zW2tleV07XG4gICAgICAgICAgZGVmYXVsdE9wdGlvbnNba2V5XSA9IHRoaXMuX3Nhbml0aXplQW5kVmFsaWRhdGVPcHRpb24oa2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc2V0IHVwIGdldHRlcnMgYW5kIHNldHRlcnMgZm9yIGVhY2ggb3B0aW9uXG4gICAgdGhpcy5yYXdPcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7XG4gICAgdGhpcy5vcHRpb25zID0geyAuLi4gZGVmYXVsdE9wdGlvbnMgfTtcbiAgICB0aGlzLl9zZXR1cE9wdGlvbnMoKTtcbiAgfVxuXG4gIHByaXZhdGUgX3NldHVwT3B0aW9ucygpOiB2b2lkIHtcbiAgICBjb25zdCBnZXR0ZXIgPSAocHJvcE5hbWU6IHN0cmluZyk6IGFueSA9PiB7XG4gICAgICBpZiAoIShwcm9wTmFtZSBpbiBERUZBVUxUX09QVElPTlMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gb3B0aW9uIHdpdGgga2V5IFwiJHtwcm9wTmFtZX1cImApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucmF3T3B0aW9uc1twcm9wTmFtZV07XG4gICAgfTtcblxuICAgIGNvbnN0IHNldHRlciA9IChwcm9wTmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZCA9PiB7XG4gICAgICBpZiAoIShwcm9wTmFtZSBpbiBERUZBVUxUX09QVElPTlMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gb3B0aW9uIHdpdGgga2V5IFwiJHtwcm9wTmFtZX1cImApO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZSA9IHRoaXMuX3Nhbml0aXplQW5kVmFsaWRhdGVPcHRpb24ocHJvcE5hbWUsIHZhbHVlKTtcbiAgICAgIC8vIERvbid0IGZpcmUgYW4gb3B0aW9uIGNoYW5nZSBldmVudCBpZiB0aGV5IGRpZG4ndCBjaGFuZ2VcbiAgICAgIGlmICh0aGlzLnJhd09wdGlvbnNbcHJvcE5hbWVdICE9PSB2YWx1ZSkge1xuICAgICAgICB0aGlzLnJhd09wdGlvbnNbcHJvcE5hbWVdID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX29uT3B0aW9uQ2hhbmdlLmZpcmUocHJvcE5hbWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3IgKGNvbnN0IHByb3BOYW1lIGluIHRoaXMucmF3T3B0aW9ucykge1xuICAgICAgY29uc3QgZGVzYyA9IHtcbiAgICAgICAgZ2V0OiBnZXR0ZXIuYmluZCh0aGlzLCBwcm9wTmFtZSksXG4gICAgICAgIHNldDogc2V0dGVyLmJpbmQodGhpcywgcHJvcE5hbWUpXG4gICAgICB9O1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMub3B0aW9ucywgcHJvcE5hbWUsIGRlc2MpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzZXRPcHRpb24oa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcHJpdmF0ZSBfc2FuaXRpemVBbmRWYWxpZGF0ZU9wdGlvbihrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IGFueSB7XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgIGNhc2UgJ2JlbGxTdHlsZSc6XG4gICAgICBjYXNlICdjdXJzb3JTdHlsZSc6XG4gICAgICBjYXNlICdyZW5kZXJlclR5cGUnOlxuICAgICAgY2FzZSAnd29yZFNlcGFyYXRvcic6XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICB2YWx1ZSA9IERFRkFVTFRfT1BUSU9OU1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZm9udFdlaWdodCc6XG4gICAgICBjYXNlICdmb250V2VpZ2h0Qm9sZCc6XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIDEgPD0gdmFsdWUgJiYgdmFsdWUgPD0gMTAwMCkge1xuICAgICAgICAgIC8vIGFscmVhZHkgdmFsaWQgbnVtZXJpYyB2YWx1ZVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gRk9OVF9XRUlHSFRfT1BUSU9OUy5pbmNsdWRlcyh2YWx1ZSkgPyB2YWx1ZSA6IERFRkFVTFRfT1BUSU9OU1trZXldO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2N1cnNvcldpZHRoJzpcbiAgICAgICAgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKTtcbiAgICAgICAgLy8gRmFsbCB0aHJvdWdoIGZvciBib3VuZHMgY2hlY2tcbiAgICAgIGNhc2UgJ2xpbmVIZWlnaHQnOlxuICAgICAgY2FzZSAndGFiU3RvcFdpZHRoJzpcbiAgICAgICAgaWYgKHZhbHVlIDwgMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtrZXl9IGNhbm5vdCBiZSBsZXNzIHRoYW4gMSwgdmFsdWU6ICR7dmFsdWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtaW5pbXVtQ29udHJhc3RSYXRpbyc6XG4gICAgICAgIHZhbHVlID0gTWF0aC5tYXgoMSwgTWF0aC5taW4oMjEsIE1hdGgucm91bmQodmFsdWUgKiAxMCkgLyAxMCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3Njcm9sbGJhY2snOlxuICAgICAgICB2YWx1ZSA9IE1hdGgubWluKHZhbHVlLCA0Mjk0OTY3Mjk1KTtcbiAgICAgICAgaWYgKHZhbHVlIDwgMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtrZXl9IGNhbm5vdCBiZSBsZXNzIHRoYW4gMCwgdmFsdWU6ICR7dmFsdWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdmYXN0U2Nyb2xsU2Vuc2l0aXZpdHknOlxuICAgICAgY2FzZSAnc2Nyb2xsU2Vuc2l0aXZpdHknOlxuICAgICAgICBpZiAodmFsdWUgPD0gMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtrZXl9IGNhbm5vdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gMCwgdmFsdWU6ICR7dmFsdWV9YCk7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ3Jvd3MnOlxuICAgICAgY2FzZSAnY29scyc6XG4gICAgICAgIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7a2V5fSBtdXN0IGJlIG51bWVyaWMsIHZhbHVlOiAke3ZhbHVlfWApO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBwdWJsaWMgZ2V0T3B0aW9uKGtleTogc3RyaW5nKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zW2tleV07XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKlxuICogVGhpcyB3YXMgaGVhdmlseSBpbnNwaXJlZCBmcm9tIG1pY3Jvc29mdC92c2NvZGUncyBkZXBlbmRlbmN5IGluamVjdGlvbiBzeXN0ZW0gKE1JVCkuXG4gKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5pbXBvcnQgeyBJU2VydmljZUlkZW50aWZpZXIgfSBmcm9tICdjb21tb24vc2VydmljZXMvU2VydmljZXMnO1xuXG5jb25zdCBESV9UQVJHRVQgPSAnZGkkdGFyZ2V0JztcbmNvbnN0IERJX0RFUEVOREVOQ0lFUyA9ICdkaSRkZXBlbmRlbmNpZXMnO1xuXG5leHBvcnQgY29uc3Qgc2VydmljZVJlZ2lzdHJ5OiBNYXA8c3RyaW5nLCBJU2VydmljZUlkZW50aWZpZXI8YW55Pj4gPSBuZXcgTWFwKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZXJ2aWNlRGVwZW5kZW5jaWVzKGN0b3I6IGFueSk6IHsgaWQ6IElTZXJ2aWNlSWRlbnRpZmllcjxhbnk+LCBpbmRleDogbnVtYmVyLCBvcHRpb25hbDogYm9vbGVhbiB9W10ge1xuICByZXR1cm4gY3RvcltESV9ERVBFTkRFTkNJRVNdIHx8IFtdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGVjb3JhdG9yPFQ+KGlkOiBzdHJpbmcpOiBJU2VydmljZUlkZW50aWZpZXI8VD4ge1xuICBpZiAoc2VydmljZVJlZ2lzdHJ5LmhhcyhpZCkpIHtcbiAgICByZXR1cm4gc2VydmljZVJlZ2lzdHJ5LmdldChpZCkhO1xuICB9XG5cbiAgY29uc3QgZGVjb3JhdG9yOiBhbnkgPSBmdW5jdGlvbiAodGFyZ2V0OiBGdW5jdGlvbiwga2V5OiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBhbnkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0BJU2VydmljZU5hbWUtZGVjb3JhdG9yIGNhbiBvbmx5IGJlIHVzZWQgdG8gZGVjb3JhdGUgYSBwYXJhbWV0ZXInKTtcbiAgICB9XG5cbiAgICBzdG9yZVNlcnZpY2VEZXBlbmRlbmN5KGRlY29yYXRvciwgdGFyZ2V0LCBpbmRleCk7XG4gIH07XG5cbiAgZGVjb3JhdG9yLnRvU3RyaW5nID0gKCkgPT4gaWQ7XG5cbiAgc2VydmljZVJlZ2lzdHJ5LnNldChpZCwgZGVjb3JhdG9yKTtcbiAgcmV0dXJuIGRlY29yYXRvcjtcbn1cblxuZnVuY3Rpb24gc3RvcmVTZXJ2aWNlRGVwZW5kZW5jeShpZDogRnVuY3Rpb24sIHRhcmdldDogRnVuY3Rpb24sIGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgaWYgKCh0YXJnZXQgYXMgYW55KVtESV9UQVJHRVRdID09PSB0YXJnZXQpIHtcbiAgICAodGFyZ2V0IGFzIGFueSlbRElfREVQRU5ERU5DSUVTXS5wdXNoKHsgaWQsIGluZGV4IH0pO1xuICB9IGVsc2Uge1xuICAgICh0YXJnZXQgYXMgYW55KVtESV9ERVBFTkRFTkNJRVNdID0gW3sgaWQsIGluZGV4IH1dO1xuICAgICh0YXJnZXQgYXMgYW55KVtESV9UQVJHRVRdID0gdGFyZ2V0O1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElFdmVudCB9IGZyb20gJ2NvbW1vbi9FdmVudEVtaXR0ZXInO1xuaW1wb3J0IHsgSUJ1ZmZlciwgSUJ1ZmZlclNldCB9IGZyb20gJ2NvbW1vbi9idWZmZXIvVHlwZXMnO1xuaW1wb3J0IHsgSURlY1ByaXZhdGVNb2RlcywgSUNvcmVNb3VzZUV2ZW50LCBDb3JlTW91c2VFbmNvZGluZywgSUNvcmVNb3VzZVByb3RvY29sLCBDb3JlTW91c2VFdmVudFR5cGUsIElDaGFyc2V0LCBJV2luZG93T3B0aW9ucywgSU1vZGVzLCBJQXR0cmlidXRlRGF0YSwgU2Nyb2xsU291cmNlIH0gZnJvbSAnY29tbW9uL1R5cGVzJztcbmltcG9ydCB7IGNyZWF0ZURlY29yYXRvciB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlUmVnaXN0cnknO1xuXG5leHBvcnQgY29uc3QgSUJ1ZmZlclNlcnZpY2UgPSBjcmVhdGVEZWNvcmF0b3I8SUJ1ZmZlclNlcnZpY2U+KCdCdWZmZXJTZXJ2aWNlJyk7XG5leHBvcnQgaW50ZXJmYWNlIElCdWZmZXJTZXJ2aWNlIHtcbiAgc2VydmljZUJyYW5kOiB1bmRlZmluZWQ7XG5cbiAgcmVhZG9ubHkgY29sczogbnVtYmVyO1xuICByZWFkb25seSByb3dzOiBudW1iZXI7XG4gIHJlYWRvbmx5IGJ1ZmZlcjogSUJ1ZmZlcjtcbiAgcmVhZG9ubHkgYnVmZmVyczogSUJ1ZmZlclNldDtcbiAgaXNVc2VyU2Nyb2xsaW5nOiBib29sZWFuO1xuICBvblJlc2l6ZTogSUV2ZW50PHsgY29sczogbnVtYmVyLCByb3dzOiBudW1iZXIgfT47XG4gIG9uU2Nyb2xsOiBJRXZlbnQ8bnVtYmVyPjtcbiAgc2Nyb2xsKGVyYXNlQXR0cjogSUF0dHJpYnV0ZURhdGEsIGlzV3JhcHBlZD86IGJvb2xlYW4pOiB2b2lkO1xuICBzY3JvbGxUb0JvdHRvbSgpOiB2b2lkO1xuICBzY3JvbGxUb1RvcCgpOiB2b2lkO1xuICBzY3JvbGxUb0xpbmUobGluZTogbnVtYmVyKTogdm9pZDtcbiAgc2Nyb2xsTGluZXMoZGlzcDogbnVtYmVyLCBzdXBwcmVzc1Njcm9sbEV2ZW50PzogYm9vbGVhbiwgc291cmNlPzogU2Nyb2xsU291cmNlKTogdm9pZDtcbiAgc2Nyb2xsUGFnZXMocGFnZUNvdW50OiBudW1iZXIpOiB2b2lkO1xuICByZXNpemUoY29sczogbnVtYmVyLCByb3dzOiBudW1iZXIpOiB2b2lkO1xuICByZXNldCgpOiB2b2lkO1xufVxuXG5leHBvcnQgY29uc3QgSUNvcmVNb3VzZVNlcnZpY2UgPSBjcmVhdGVEZWNvcmF0b3I8SUNvcmVNb3VzZVNlcnZpY2U+KCdDb3JlTW91c2VTZXJ2aWNlJyk7XG5leHBvcnQgaW50ZXJmYWNlIElDb3JlTW91c2VTZXJ2aWNlIHtcbiAgYWN0aXZlUHJvdG9jb2w6IHN0cmluZztcbiAgYWN0aXZlRW5jb2Rpbmc6IHN0cmluZztcbiAgYXJlTW91c2VFdmVudHNBY3RpdmU6IGJvb2xlYW47XG4gIGFkZFByb3RvY29sKG5hbWU6IHN0cmluZywgcHJvdG9jb2w6IElDb3JlTW91c2VQcm90b2NvbCk6IHZvaWQ7XG4gIGFkZEVuY29kaW5nKG5hbWU6IHN0cmluZywgZW5jb2Rpbmc6IENvcmVNb3VzZUVuY29kaW5nKTogdm9pZDtcbiAgcmVzZXQoKTogdm9pZDtcblxuICAvKipcbiAgICogVHJpZ2dlcnMgYSBtb3VzZSBldmVudCB0byBiZSBzZW50LlxuICAgKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGV2ZW50IHBhc3NlZCBhbGwgcHJvdG9jb2wgcmVzdHJpY3Rpb25zIGFuZCBhIHJlcG9ydFxuICAgKiB3YXMgc2VudCwgb3RoZXJ3aXNlIGZhbHNlLiBUaGUgcmV0dXJuIHZhbHVlIG1heSBiZSB1c2VkIHRvIGRlY2lkZSB3aGV0aGVyXG4gICAqIHRoZSBkZWZhdWx0IGV2ZW50IGFjdGlvbiBpbiB0aGUgYm93c2VyIGNvbXBvbmVudCBzaG91bGQgYmUgb21pdHRlZC5cbiAgICpcbiAgICogTm90ZTogVGhlIG1ldGhvZCB3aWxsIGNoYW5nZSB2YWx1ZXMgb2YgdGhlIGdpdmVuIGV2ZW50IG9iamVjdFxuICAgKiB0byBmdWxsZmlsbCBwcm90b2NvbCBhbmQgZW5jb2RpbmcgcmVzdHJpY3Rpb25zLlxuICAgKi9cbiAgdHJpZ2dlck1vdXNlRXZlbnQoZXZlbnQ6IElDb3JlTW91c2VFdmVudCk6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEV2ZW50IHRvIGFubm91bmNlIGNoYW5nZXMgaW4gbW91c2UgdHJhY2tpbmcuXG4gICAqL1xuICBvblByb3RvY29sQ2hhbmdlOiBJRXZlbnQ8Q29yZU1vdXNlRXZlbnRUeXBlPjtcblxuICAvKipcbiAgICogSHVtYW4gcmVhZGFibGUgdmVyc2lvbiBvZiBtb3VzZSBldmVudHMuXG4gICAqL1xuICBleHBsYWluRXZlbnRzKGV2ZW50czogQ29yZU1vdXNlRXZlbnRUeXBlKTogeyBbZXZlbnQ6IHN0cmluZ106IGJvb2xlYW4gfTtcbn1cblxuZXhwb3J0IGNvbnN0IElDb3JlU2VydmljZSA9IGNyZWF0ZURlY29yYXRvcjxJQ29yZVNlcnZpY2U+KCdDb3JlU2VydmljZScpO1xuZXhwb3J0IGludGVyZmFjZSBJQ29yZVNlcnZpY2Uge1xuICBzZXJ2aWNlQnJhbmQ6IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogSW5pdGlhbGx5IHRoZSBjdXJzb3Igd2lsbCBub3QgYmUgdmlzaWJsZSB1bnRpbCB0aGUgZmlyc3QgdGltZSB0aGUgdGVybWluYWxcbiAgICogaXMgZm9jdXNlZC5cbiAgICovXG4gIGlzQ3Vyc29ySW5pdGlhbGl6ZWQ6IGJvb2xlYW47XG4gIGlzQ3Vyc29ySGlkZGVuOiBib29sZWFuO1xuXG4gIHJlYWRvbmx5IG1vZGVzOiBJTW9kZXM7XG4gIHJlYWRvbmx5IGRlY1ByaXZhdGVNb2RlczogSURlY1ByaXZhdGVNb2RlcztcblxuICByZWFkb25seSBvbkRhdGE6IElFdmVudDxzdHJpbmc+O1xuICByZWFkb25seSBvblVzZXJJbnB1dDogSUV2ZW50PHZvaWQ+O1xuICByZWFkb25seSBvbkJpbmFyeTogSUV2ZW50PHN0cmluZz47XG5cbiAgcmVzZXQoKTogdm9pZDtcblxuICAvKipcbiAgICogVHJpZ2dlcnMgdGhlIG9uRGF0YSBldmVudCBpbiB0aGUgcHVibGljIEFQSS5cbiAgICogQHBhcmFtIGRhdGEgVGhlIGRhdGEgdGhhdCBpcyBiZWluZyBlbWl0dGVkLlxuICAgKiBAcGFyYW0gd2FzRnJvbVVzZXIgV2hldGhlciB0aGUgZGF0YSBvcmlnaW5hdGVkIGZyb20gdGhlIHVzZXIgKGFzIG9wcG9zZWQgdG9cbiAgICogcmVzdWx0aW5nIGZyb20gcGFyc2luZyBpbmNvbWluZyBkYXRhKS4gV2hlbiB0cnVlIHRoaXMgd2lsbCBhbHNvOlxuICAgKiAtIFNjcm9sbCB0byB0aGUgYm90dG9tIG9mIHRoZSBidWZmZXIuc1xuICAgKiAtIEZpcmUgdGhlIGBvblVzZXJJbnB1dGAgZXZlbnQgKHNvIHNlbGVjdGlvbiBjYW4gYmUgY2xlYXJlZCkuXG4gICAqL1xuICB0cmlnZ2VyRGF0YUV2ZW50KGRhdGE6IHN0cmluZywgd2FzVXNlcklucHV0PzogYm9vbGVhbik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFRyaWdnZXJzIHRoZSBvbkJpbmFyeSBldmVudCBpbiB0aGUgcHVibGljIEFQSS5cbiAgICogQHBhcmFtIGRhdGEgVGhlIGRhdGEgdGhhdCBpcyBiZWluZyBlbWl0dGVkLlxuICAgKi9cbiAgdHJpZ2dlckJpbmFyeUV2ZW50KGRhdGE6IHN0cmluZyk6IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCBJQ2hhcnNldFNlcnZpY2UgPSBjcmVhdGVEZWNvcmF0b3I8SUNoYXJzZXRTZXJ2aWNlPignQ2hhcnNldFNlcnZpY2UnKTtcbmV4cG9ydCBpbnRlcmZhY2UgSUNoYXJzZXRTZXJ2aWNlIHtcbiAgc2VydmljZUJyYW5kOiB1bmRlZmluZWQ7XG5cbiAgY2hhcnNldDogSUNoYXJzZXQgfCB1bmRlZmluZWQ7XG4gIHJlYWRvbmx5IGdsZXZlbDogbnVtYmVyO1xuXG4gIHJlc2V0KCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgRyBsZXZlbCBvZiB0aGUgdGVybWluYWwuXG4gICAqIEBwYXJhbSBnXG4gICAqL1xuICBzZXRnTGV2ZWwoZzogbnVtYmVyKTogdm9pZDtcblxuICAvKipcbiAgICogU2V0IHRoZSBjaGFyc2V0IGZvciB0aGUgZ2l2ZW4gRyBsZXZlbCBvZiB0aGUgdGVybWluYWwuXG4gICAqIEBwYXJhbSBnXG4gICAqIEBwYXJhbSBjaGFyc2V0XG4gICAqL1xuICBzZXRnQ2hhcnNldChnOiBudW1iZXIsIGNoYXJzZXQ6IElDaGFyc2V0IHwgdW5kZWZpbmVkKTogdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IElEaXJ0eVJvd1NlcnZpY2UgPSBjcmVhdGVEZWNvcmF0b3I8SURpcnR5Um93U2VydmljZT4oJ0RpcnR5Um93U2VydmljZScpO1xuZXhwb3J0IGludGVyZmFjZSBJRGlydHlSb3dTZXJ2aWNlIHtcbiAgc2VydmljZUJyYW5kOiB1bmRlZmluZWQ7XG5cbiAgcmVhZG9ubHkgc3RhcnQ6IG51bWJlcjtcbiAgcmVhZG9ubHkgZW5kOiBudW1iZXI7XG5cbiAgY2xlYXJSYW5nZSgpOiB2b2lkO1xuICBtYXJrRGlydHkoeTogbnVtYmVyKTogdm9pZDtcbiAgbWFya1JhbmdlRGlydHkoeTE6IG51bWJlciwgeTI6IG51bWJlcik6IHZvaWQ7XG4gIG1hcmtBbGxEaXJ0eSgpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElTZXJ2aWNlSWRlbnRpZmllcjxUPiB7XG4gICguLi5hcmdzOiBhbnlbXSk6IHZvaWQ7XG4gIHR5cGU6IFQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUJyYW5kZWRTZXJ2aWNlIHtcbiAgc2VydmljZUJyYW5kOiB1bmRlZmluZWQ7XG59XG5cbnR5cGUgR2V0TGVhZGluZ05vblNlcnZpY2VBcmdzPEFyZ3M+ID1cbiAgQXJncyBleHRlbmRzIFsuLi5JQnJhbmRlZFNlcnZpY2VbXV0gPyBbXVxuICAgIDogQXJncyBleHRlbmRzIFtpbmZlciBBMSwgLi4uSUJyYW5kZWRTZXJ2aWNlW11dID8gW0ExXVxuICAgICAgOiBBcmdzIGV4dGVuZHMgW2luZmVyIEExLCBpbmZlciBBMiwgLi4uSUJyYW5kZWRTZXJ2aWNlW11dID8gW0ExLCBBMl1cbiAgICAgICAgOiBBcmdzIGV4dGVuZHMgW2luZmVyIEExLCBpbmZlciBBMiwgaW5mZXIgQTMsIC4uLklCcmFuZGVkU2VydmljZVtdXSA/IFtBMSwgQTIsIEEzXVxuICAgICAgICAgIDogQXJncyBleHRlbmRzIFtpbmZlciBBMSwgaW5mZXIgQTIsIGluZmVyIEEzLCBpbmZlciBBNCwgLi4uSUJyYW5kZWRTZXJ2aWNlW11dID8gW0ExLCBBMiwgQTMsIEE0XVxuICAgICAgICAgICAgOiBBcmdzIGV4dGVuZHMgW2luZmVyIEExLCBpbmZlciBBMiwgaW5mZXIgQTMsIGluZmVyIEE0LCBpbmZlciBBNSwgLi4uSUJyYW5kZWRTZXJ2aWNlW11dID8gW0ExLCBBMiwgQTMsIEE0LCBBNV1cbiAgICAgICAgICAgICAgOiBBcmdzIGV4dGVuZHMgW2luZmVyIEExLCBpbmZlciBBMiwgaW5mZXIgQTMsIGluZmVyIEE0LCBpbmZlciBBNSwgaW5mZXIgQTYsIC4uLklCcmFuZGVkU2VydmljZVtdXSA/IFtBMSwgQTIsIEEzLCBBNCwgQTUsIEE2XVxuICAgICAgICAgICAgICAgIDogQXJncyBleHRlbmRzIFtpbmZlciBBMSwgaW5mZXIgQTIsIGluZmVyIEEzLCBpbmZlciBBNCwgaW5mZXIgQTUsIGluZmVyIEE2LCBpbmZlciBBNywgLi4uSUJyYW5kZWRTZXJ2aWNlW11dID8gW0ExLCBBMiwgQTMsIEE0LCBBNSwgQTYsIEE3XVxuICAgICAgICAgICAgICAgICAgOiBBcmdzIGV4dGVuZHMgW2luZmVyIEExLCBpbmZlciBBMiwgaW5mZXIgQTMsIGluZmVyIEE0LCBpbmZlciBBNSwgaW5mZXIgQTYsIGluZmVyIEE3LCBpbmZlciBBOCwgLi4uSUJyYW5kZWRTZXJ2aWNlW11dID8gW0ExLCBBMiwgQTMsIEE0LCBBNSwgQTYsIEE3LCBBOF1cbiAgICAgICAgICAgICAgICAgICAgOiBuZXZlcjtcblxuZXhwb3J0IGNvbnN0IElJbnN0YW50aWF0aW9uU2VydmljZSA9IGNyZWF0ZURlY29yYXRvcjxJSW5zdGFudGlhdGlvblNlcnZpY2U+KCdJbnN0YW50aWF0aW9uU2VydmljZScpO1xuZXhwb3J0IGludGVyZmFjZSBJSW5zdGFudGlhdGlvblNlcnZpY2Uge1xuICBzZXJ2aWNlQnJhbmQ6IHVuZGVmaW5lZDtcblxuICBzZXRTZXJ2aWNlPFQ+KGlkOiBJU2VydmljZUlkZW50aWZpZXI8VD4sIGluc3RhbmNlOiBUKTogdm9pZDtcbiAgZ2V0U2VydmljZTxUPihpZDogSVNlcnZpY2VJZGVudGlmaWVyPFQ+KTogVCB8IHVuZGVmaW5lZDtcbiAgY3JlYXRlSW5zdGFuY2U8Q3RvciBleHRlbmRzIG5ldyAoLi4uYXJnczogYW55W10pID0+IGFueSwgUiBleHRlbmRzIEluc3RhbmNlVHlwZTxDdG9yPj4odDogQ3RvciwgLi4uYXJnczogR2V0TGVhZGluZ05vblNlcnZpY2VBcmdzPENvbnN0cnVjdG9yUGFyYW1ldGVyczxDdG9yPj4pOiBSO1xufVxuXG5leHBvcnQgZW51bSBMb2dMZXZlbEVudW0ge1xuICBERUJVRyA9IDAsXG4gIElORk8gPSAxLFxuICBXQVJOID0gMixcbiAgRVJST1IgPSAzLFxuICBPRkYgPSA0XG59XG5cbmV4cG9ydCBjb25zdCBJTG9nU2VydmljZSA9IGNyZWF0ZURlY29yYXRvcjxJTG9nU2VydmljZT4oJ0xvZ1NlcnZpY2UnKTtcbmV4cG9ydCBpbnRlcmZhY2UgSUxvZ1NlcnZpY2Uge1xuICBzZXJ2aWNlQnJhbmQ6IHVuZGVmaW5lZDtcblxuICBsb2dMZXZlbDogTG9nTGV2ZWxFbnVtO1xuXG4gIGRlYnVnKG1lc3NhZ2U6IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKTogdm9pZDtcbiAgaW5mbyhtZXNzYWdlOiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSk6IHZvaWQ7XG4gIHdhcm4obWVzc2FnZTogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pOiB2b2lkO1xuICBlcnJvcihtZXNzYWdlOiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSk6IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCBJT3B0aW9uc1NlcnZpY2UgPSBjcmVhdGVEZWNvcmF0b3I8SU9wdGlvbnNTZXJ2aWNlPignT3B0aW9uc1NlcnZpY2UnKTtcbmV4cG9ydCBpbnRlcmZhY2UgSU9wdGlvbnNTZXJ2aWNlIHtcbiAgc2VydmljZUJyYW5kOiB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFJlYWQgb25seSBhY2Nlc3MgdG8gdGhlIHJhdyBvcHRpb25zIG9iamVjdCwgdGhpcyBpcyBhbiBpbnRlcm5hbC1vbmx5IGZhc3QgcGF0aCBmb3IgYWNjZXNzaW5nXG4gICAqIHNpbmdsZSBvcHRpb25zIHdpdGhvdXQgYW55IHZhbGlkYXRpb24gYXMgd2UgdHJ1c3QgVHlwZVNjcmlwdCB0byBlbmZvcmNlIGNvcnJlY3QgdXNhZ2VcbiAgICogaW50ZXJuYWxseS5cbiAgICovXG4gIHJlYWRvbmx5IHJhd09wdGlvbnM6IFJlYWRvbmx5PElUZXJtaW5hbE9wdGlvbnM+O1xuICByZWFkb25seSBvcHRpb25zOiBJVGVybWluYWxPcHRpb25zO1xuXG4gIHJlYWRvbmx5IG9uT3B0aW9uQ2hhbmdlOiBJRXZlbnQ8c3RyaW5nPjtcblxuICBzZXRPcHRpb248VD4oa2V5OiBzdHJpbmcsIHZhbHVlOiBUKTogdm9pZDtcbiAgZ2V0T3B0aW9uPFQ+KGtleTogc3RyaW5nKTogVCB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IHR5cGUgRm9udFdlaWdodCA9ICdub3JtYWwnIHwgJ2JvbGQnIHwgJzEwMCcgfCAnMjAwJyB8ICczMDAnIHwgJzQwMCcgfCAnNTAwJyB8ICc2MDAnIHwgJzcwMCcgfCAnODAwJyB8ICc5MDAnIHwgbnVtYmVyO1xuZXhwb3J0IHR5cGUgTG9nTGV2ZWwgPSAnZGVidWcnIHwgJ2luZm8nIHwgJ3dhcm4nIHwgJ2Vycm9yJyB8ICdvZmYnO1xuXG5leHBvcnQgdHlwZSBSZW5kZXJlclR5cGUgPSAnZG9tJyB8ICdjYW52YXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElUZXJtaW5hbE9wdGlvbnMge1xuICBhbGxvd1Byb3Bvc2VkQXBpOiBib29sZWFuO1xuICBhbGxvd1RyYW5zcGFyZW5jeTogYm9vbGVhbjtcbiAgYWx0Q2xpY2tNb3Zlc0N1cnNvcjogYm9vbGVhbjtcbiAgYmVsbFNvdW5kOiBzdHJpbmc7XG4gIGJlbGxTdHlsZTogJ25vbmUnIHwgJ3NvdW5kJyAvKiB8ICd2aXN1YWwnIHwgJ2JvdGgnICovO1xuICBjb2xzOiBudW1iZXI7XG4gIGNvbnZlcnRFb2w6IGJvb2xlYW47XG4gIGN1cnNvckJsaW5rOiBib29sZWFuO1xuICBjdXJzb3JTdHlsZTogJ2Jsb2NrJyB8ICd1bmRlcmxpbmUnIHwgJ2Jhcic7XG4gIGN1cnNvcldpZHRoOiBudW1iZXI7XG4gIGN1c3RvbUdseXBoczogYm9vbGVhbjtcbiAgZGlzYWJsZVN0ZGluOiBib29sZWFuO1xuICBkcmF3Qm9sZFRleHRJbkJyaWdodENvbG9yczogYm9vbGVhbjtcbiAgZmFzdFNjcm9sbE1vZGlmaWVyOiAnYWx0JyB8ICdjdHJsJyB8ICdzaGlmdCcgfCB1bmRlZmluZWQ7XG4gIGZhc3RTY3JvbGxTZW5zaXRpdml0eTogbnVtYmVyO1xuICBmb250U2l6ZTogbnVtYmVyO1xuICBmb250RmFtaWx5OiBzdHJpbmc7XG4gIGZvbnRXZWlnaHQ6IEZvbnRXZWlnaHQ7XG4gIGZvbnRXZWlnaHRCb2xkOiBGb250V2VpZ2h0O1xuICBsZXR0ZXJTcGFjaW5nOiBudW1iZXI7XG4gIGxpbmVIZWlnaHQ6IG51bWJlcjtcbiAgbGlua1Rvb2x0aXBIb3ZlckR1cmF0aW9uOiBudW1iZXI7XG4gIGxvZ0xldmVsOiBMb2dMZXZlbDtcbiAgbWFjT3B0aW9uSXNNZXRhOiBib29sZWFuO1xuICBtYWNPcHRpb25DbGlja0ZvcmNlc1NlbGVjdGlvbjogYm9vbGVhbjtcbiAgbWluaW11bUNvbnRyYXN0UmF0aW86IG51bWJlcjtcbiAgcmVuZGVyZXJUeXBlOiBSZW5kZXJlclR5cGU7XG4gIHJpZ2h0Q2xpY2tTZWxlY3RzV29yZDogYm9vbGVhbjtcbiAgcm93czogbnVtYmVyO1xuICBzY3JlZW5SZWFkZXJNb2RlOiBib29sZWFuO1xuICBzY3JvbGxiYWNrOiBudW1iZXI7XG4gIHNjcm9sbFNlbnNpdGl2aXR5OiBudW1iZXI7XG4gIHRhYlN0b3BXaWR0aDogbnVtYmVyO1xuICB0aGVtZTogSVRoZW1lO1xuICB3aW5kb3dzTW9kZTogYm9vbGVhbjtcbiAgd2luZG93T3B0aW9uczogSVdpbmRvd09wdGlvbnM7XG4gIHdvcmRTZXBhcmF0b3I6IHN0cmluZztcblxuICBba2V5OiBzdHJpbmddOiBhbnk7XG4gIGNhbmNlbEV2ZW50czogYm9vbGVhbjtcbiAgdGVybU5hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJVGhlbWUge1xuICBmb3JlZ3JvdW5kPzogc3RyaW5nO1xuICBiYWNrZ3JvdW5kPzogc3RyaW5nO1xuICBjdXJzb3I/OiBzdHJpbmc7XG4gIGN1cnNvckFjY2VudD86IHN0cmluZztcbiAgc2VsZWN0aW9uPzogc3RyaW5nO1xuICBibGFjaz86IHN0cmluZztcbiAgcmVkPzogc3RyaW5nO1xuICBncmVlbj86IHN0cmluZztcbiAgeWVsbG93Pzogc3RyaW5nO1xuICBibHVlPzogc3RyaW5nO1xuICBtYWdlbnRhPzogc3RyaW5nO1xuICBjeWFuPzogc3RyaW5nO1xuICB3aGl0ZT86IHN0cmluZztcbiAgYnJpZ2h0QmxhY2s/OiBzdHJpbmc7XG4gIGJyaWdodFJlZD86IHN0cmluZztcbiAgYnJpZ2h0R3JlZW4/OiBzdHJpbmc7XG4gIGJyaWdodFllbGxvdz86IHN0cmluZztcbiAgYnJpZ2h0Qmx1ZT86IHN0cmluZztcbiAgYnJpZ2h0TWFnZW50YT86IHN0cmluZztcbiAgYnJpZ2h0Q3lhbj86IHN0cmluZztcbiAgYnJpZ2h0V2hpdGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBJVW5pY29kZVNlcnZpY2UgPSBjcmVhdGVEZWNvcmF0b3I8SVVuaWNvZGVTZXJ2aWNlPignVW5pY29kZVNlcnZpY2UnKTtcbmV4cG9ydCBpbnRlcmZhY2UgSVVuaWNvZGVTZXJ2aWNlIHtcbiAgc2VydmljZUJyYW5kOiB1bmRlZmluZWQ7XG4gIC8qKiBSZWdpc3RlciBhbiBVbmljb2RlIHZlcnNpb24gcHJvdmlkZXIuICovXG4gIHJlZ2lzdGVyKHByb3ZpZGVyOiBJVW5pY29kZVZlcnNpb25Qcm92aWRlcik6IHZvaWQ7XG4gIC8qKiBSZWdpc3RlcmVkIFVuaWNvZGUgdmVyc2lvbnMuICovXG4gIHJlYWRvbmx5IHZlcnNpb25zOiBzdHJpbmdbXTtcbiAgLyoqIEN1cnJlbnRseSBhY3RpdmUgdmVyc2lvbi4gKi9cbiAgYWN0aXZlVmVyc2lvbjogc3RyaW5nO1xuICAvKiogRXZlbnQgdHJpZ2dlcmVkLCB3aGVuIGFjdGl2YXRlIHZlcnNpb24gY2hhbmdlZC4gKi9cbiAgcmVhZG9ubHkgb25DaGFuZ2U6IElFdmVudDxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBVbmljb2RlIHZlcnNpb24gZGVwZW5kZW50XG4gICAqL1xuICB3Y3dpZHRoKGNvZGVwb2ludDogbnVtYmVyKTogbnVtYmVyO1xuICBnZXRTdHJpbmdDZWxsV2lkdGgoczogc3RyaW5nKTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElVbmljb2RlVmVyc2lvblByb3ZpZGVyIHtcbiAgcmVhZG9ubHkgdmVyc2lvbjogc3RyaW5nO1xuICB3Y3dpZHRoKHVjczogbnVtYmVyKTogMCB8IDEgfCAyO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0IHsgSVVuaWNvZGVTZXJ2aWNlLCBJVW5pY29kZVZlcnNpb25Qcm92aWRlciB9IGZyb20gJ2NvbW1vbi9zZXJ2aWNlcy9TZXJ2aWNlcyc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElFdmVudCB9IGZyb20gJ2NvbW1vbi9FdmVudEVtaXR0ZXInO1xuaW1wb3J0IHsgVW5pY29kZVY2IH0gZnJvbSAnY29tbW9uL2lucHV0L1VuaWNvZGVWNic7XG5cblxuZXhwb3J0IGNsYXNzIFVuaWNvZGVTZXJ2aWNlIGltcGxlbWVudHMgSVVuaWNvZGVTZXJ2aWNlIHtcbiAgcHVibGljIHNlcnZpY2VCcmFuZDogYW55O1xuXG4gIHByaXZhdGUgX3Byb3ZpZGVyczoge1trZXk6IHN0cmluZ106IElVbmljb2RlVmVyc2lvblByb3ZpZGVyfSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHByaXZhdGUgX2FjdGl2ZTogc3RyaW5nID0gJyc7XG4gIHByaXZhdGUgX2FjdGl2ZVByb3ZpZGVyOiBJVW5pY29kZVZlcnNpb25Qcm92aWRlcjtcbiAgcHJpdmF0ZSBfb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgcHVibGljIGdldCBvbkNoYW5nZSgpOiBJRXZlbnQ8c3RyaW5nPiB7IHJldHVybiB0aGlzLl9vbkNoYW5nZS5ldmVudDsgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IGRlZmF1bHRQcm92aWRlciA9IG5ldyBVbmljb2RlVjYoKTtcbiAgICB0aGlzLnJlZ2lzdGVyKGRlZmF1bHRQcm92aWRlcik7XG4gICAgdGhpcy5fYWN0aXZlID0gZGVmYXVsdFByb3ZpZGVyLnZlcnNpb247XG4gICAgdGhpcy5fYWN0aXZlUHJvdmlkZXIgPSBkZWZhdWx0UHJvdmlkZXI7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHZlcnNpb25zKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5fcHJvdmlkZXJzKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgYWN0aXZlVmVyc2lvbigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gIH1cblxuICBwdWJsaWMgc2V0IGFjdGl2ZVZlcnNpb24odmVyc2lvbjogc3RyaW5nKSB7XG4gICAgaWYgKCF0aGlzLl9wcm92aWRlcnNbdmVyc2lvbl0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdW5rbm93biBVbmljb2RlIHZlcnNpb24gXCIke3ZlcnNpb259XCJgKTtcbiAgICB9XG4gICAgdGhpcy5fYWN0aXZlID0gdmVyc2lvbjtcbiAgICB0aGlzLl9hY3RpdmVQcm92aWRlciA9IHRoaXMuX3Byb3ZpZGVyc1t2ZXJzaW9uXTtcbiAgICB0aGlzLl9vbkNoYW5nZS5maXJlKHZlcnNpb24pO1xuICB9XG5cbiAgcHVibGljIHJlZ2lzdGVyKHByb3ZpZGVyOiBJVW5pY29kZVZlcnNpb25Qcm92aWRlcik6IHZvaWQge1xuICAgIHRoaXMuX3Byb3ZpZGVyc1twcm92aWRlci52ZXJzaW9uXSA9IHByb3ZpZGVyO1xuICB9XG5cbiAgLyoqXG4gICAqIFVuaWNvZGUgdmVyc2lvbiBkZXBlbmRlbnQgaW50ZXJmYWNlLlxuICAgKi9cbiAgcHVibGljIHdjd2lkdGgobnVtOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmVQcm92aWRlci53Y3dpZHRoKG51bSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0U3RyaW5nQ2VsbFdpZHRoKHM6IHN0cmluZyk6IG51bWJlciB7XG4gICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgY29uc3QgbGVuZ3RoID0gcy5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgbGV0IGNvZGUgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAvLyBzdXJyb2dhdGUgcGFpciBmaXJzdFxuICAgICAgaWYgKDB4RDgwMCA8PSBjb2RlICYmIGNvZGUgPD0gMHhEQkZGKSB7XG4gICAgICAgIGlmICgrK2kgPj0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdGhpcyBzaG91bGQgbm90IGhhcHBlbiB3aXRoIHN0cmluZ3MgcmV0cmlldmVkIGZyb21cbiAgICAgICAgICAvLyBCdWZmZXIudHJhbnNsYXRlVG9TdHJpbmcgYXMgaXQgY29udmVydHMgZnJvbSBVVEYtMzJcbiAgICAgICAgICAvLyBhbmQgdGhlcmVmb3JlIGFsd2F5cyBzaG91bGQgY29udGFpbiB0aGUgc2Vjb25kIHBhcnRcbiAgICAgICAgICAvLyBmb3IgYW55IG90aGVyIHN0cmluZyB3ZSBzdGlsbCBoYXZlIHRvIGhhbmRsZSBpdCBzb21laG93OlxuICAgICAgICAgIC8vIHNpbXBseSB0cmVhdCB0aGUgbG9uZWx5IHN1cnJvZ2F0ZSBmaXJzdCBhcyBhIHNpbmdsZSBjaGFyIChVQ1MtMiBiZWhhdmlvcilcbiAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgdGhpcy53Y3dpZHRoKGNvZGUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNlY29uZCA9IHMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgLy8gY29udmVydCBzdXJyb2dhdGUgcGFpciB0byBoaWdoIGNvZGVwb2ludCBvbmx5IGZvciB2YWxpZCBzZWNvbmQgcGFydCAoVVRGLTE2KVxuICAgICAgICAvLyBvdGhlcndpc2UgdHJlYXQgdGhlbSBpbmRlcGVuZGVudGx5IChVQ1MtMiBiZWhhdmlvcilcbiAgICAgICAgaWYgKDB4REMwMCA8PSBzZWNvbmQgJiYgc2Vjb25kIDw9IDB4REZGRikge1xuICAgICAgICAgIGNvZGUgPSAoY29kZSAtIDB4RDgwMCkgKiAweDQwMCArIHNlY29uZCAtIDB4REMwMCArIDB4MTAwMDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ICs9IHRoaXMud2N3aWR0aChzZWNvbmQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXN1bHQgKz0gdGhpcy53Y3dpZHRoKGNvZGUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzODkpO1xuIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsImEiLCJpIiwic2VsZiIsIl90ZXJtaW5hbCIsIl9yZW5kZXJTZXJ2aWNlIiwiX2xpdmVSZWdpb25MaW5lQ291bnQiLCJfY2hhcnNUb0NvbnN1bWUiLCJfY2hhcnNUb0Fubm91bmNlIiwiX2FjY2Vzc2liaWxpdHlUcmVlUm9vdCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInRhYkluZGV4IiwiX3Jvd0NvbnRhaW5lciIsInNldEF0dHJpYnV0ZSIsIl9yb3dFbGVtZW50cyIsInJvd3MiLCJfY3JlYXRlQWNjZXNzaWJpbGl0eVRyZWVOb2RlIiwiYXBwZW5kQ2hpbGQiLCJfdG9wQm91bmRhcnlGb2N1c0xpc3RlbmVyIiwiZSIsIl9vbkJvdW5kYXJ5Rm9jdXMiLCJfYm90dG9tQm91bmRhcnlGb2N1c0xpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImxlbmd0aCIsIl9yZWZyZXNoUm93c0RpbWVuc2lvbnMiLCJfcmVuZGVyUm93c0RlYm91bmNlciIsIlRpbWVCYXNlZERlYm91bmNlciIsIl9yZW5kZXJSb3dzIiwiYmluZCIsIl9yZWZyZXNoUm93cyIsIl9saXZlUmVnaW9uIiwiZWxlbWVudCIsIkVycm9yIiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwicmVnaXN0ZXIiLCJvblJlc2l6ZSIsIl9vblJlc2l6ZSIsIm9uUmVuZGVyIiwic3RhcnQiLCJlbmQiLCJvblNjcm9sbCIsIm9uQTExeUNoYXIiLCJjaGFyIiwiX29uQ2hhciIsIm9uTGluZUZlZWQiLCJvbkExMXlUYWIiLCJzcGFjZUNvdW50IiwiX29uVGFiIiwib25LZXkiLCJfb25LZXkiLCJrZXkiLCJvbkJsdXIiLCJfY2xlYXJMaXZlUmVnaW9uIiwib25EaW1lbnNpb25zQ2hhbmdlIiwiX3NjcmVlbkRwck1vbml0b3IiLCJTY3JlZW5EcHJNb25pdG9yIiwic2V0TGlzdGVuZXIiLCJhZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIiLCJ3aW5kb3ciLCJkaXNwb3NlIiwicmVtb3ZlRWxlbWVudEZyb21QYXJlbnQiLCJ0aGlzIiwicG9zaXRpb24iLCJib3VuZGFyeUVsZW1lbnQiLCJ0YXJnZXQiLCJiZWZvcmVCb3VuZGFyeUVsZW1lbnQiLCJnZXRBdHRyaWJ1dGUiLCJidWZmZXIiLCJsaW5lcyIsInJlbGF0ZWRUYXJnZXQiLCJ0b3BCb3VuZGFyeUVsZW1lbnQiLCJib3R0b21Cb3VuZGFyeUVsZW1lbnQiLCJwb3AiLCJyZW1vdmVDaGlsZCIsInNoaWZ0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm5ld0VsZW1lbnQiLCJ1bnNoaWZ0IiwicHVzaCIsInNjcm9sbExpbmVzIiwiZm9jdXMiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImNoaWxkcmVuIiwiX3JlZnJlc2hSb3dEaW1lbnNpb25zIiwiTUFYX1JPV1NfVE9fUkVBRCIsInRleHRDb250ZW50IiwiU3RyaW5ncyIsInRvb011Y2hPdXRwdXQiLCJpc01hYyIsInBhcmVudE5vZGUiLCJzZXRUaW1lb3V0Iiwia2V5Q2hhciIsInJlZnJlc2giLCJzZXRTaXplIiwidG9TdHJpbmciLCJsaW5lRGF0YSIsInRyYW5zbGF0ZUJ1ZmZlckxpbmVUb1N0cmluZyIsInlkaXNwIiwicG9zSW5TZXQiLCJpbm5lclRleHQiLCJfYW5ub3VuY2VDaGFyYWN0ZXJzIiwiZGltZW5zaW9ucyIsImFjdHVhbENlbGxIZWlnaHQiLCJzdHlsZSIsImhlaWdodCIsIkRpc3Bvc2FibGUiLCJBY2Nlc3NpYmlsaXR5TWFuYWdlciIsInByZXBhcmVUZXh0Rm9yVGVybWluYWwiLCJ0ZXh0IiwicmVwbGFjZSIsImJyYWNrZXRUZXh0Rm9yUGFzdGUiLCJicmFja2V0ZWRQYXN0ZU1vZGUiLCJwYXN0ZSIsInRleHRhcmVhIiwiY29yZVNlcnZpY2UiLCJkZWNQcml2YXRlTW9kZXMiLCJ0cmlnZ2VyRGF0YUV2ZW50IiwidmFsdWUiLCJtb3ZlVGV4dEFyZWFVbmRlck1vdXNlQ3Vyc29yIiwiZXYiLCJzY3JlZW5FbGVtZW50IiwicG9zIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsImNsaWVudFgiLCJ0b3AiLCJjbGllbnRZIiwid2lkdGgiLCJ6SW5kZXgiLCJzZWxlY3Rpb25TZXJ2aWNlIiwiY2xpcGJvYXJkRGF0YSIsInNldERhdGEiLCJzZWxlY3Rpb25UZXh0Iiwic3RvcFByb3BhZ2F0aW9uIiwiZ2V0RGF0YSIsInNob3VsZFNlbGVjdFdvcmQiLCJyaWdodENsaWNrU2VsZWN0Iiwic2VsZWN0IiwiY2hhbm5lbHMiLCJyZ2IiLCJyZ2JhIiwidG9QYWRkZWRIZXgiLCJjIiwicyIsImNvbnRyYXN0UmF0aW8iLCJsMSIsImwyIiwidG9Dc3MiLCJyIiwiZyIsImIiLCJ1bmRlZmluZWQiLCJ0b1JnYmEiLCJjb2xvciIsImJsZW5kIiwiYmciLCJmZyIsImNzcyIsImZnUiIsImZnRyIsImZnQiIsImJnUiIsImJnRyIsImJnQiIsIk1hdGgiLCJyb3VuZCIsImlzT3BhcXVlIiwiZW5zdXJlQ29udHJhc3RSYXRpbyIsInJhdGlvIiwicmVzdWx0IiwidG9Db2xvciIsIm9wYXF1ZSIsInJnYmFDb2xvciIsInRvQ2hhbm5lbHMiLCJvcGFjaXR5IiwidG9Db2xvclJHQiIsInBhcnNlSW50Iiwic2xpY2UiLCJyZWxhdGl2ZUx1bWluYW5jZTIiLCJycyIsImdzIiwiYnMiLCJwb3ciLCJyZWxhdGl2ZUx1bWluYW5jZSIsInJlZHVjZUx1bWluYW5jZSIsImJnUmdiYSIsImZnUmdiYSIsImNyIiwibWF4IiwiY2VpbCIsImluY3JlYXNlTHVtaW5hbmNlIiwibWluIiwiYmdMIiwiZmdMIiwiX2NvbG9yIiwiX3JnYmEiLCJjbGVhciIsInNldENzcyIsImdldENzcyIsInNldENvbG9yIiwiZ2V0Q29sb3IiLCJDb2xvckNvbnRyYXN0Q2FjaGUiLCJERUZBVUxUX0ZPUkVHUk9VTkQiLCJERUZBVUxUX0JBQ0tHUk9VTkQiLCJERUZBVUxUX0NVUlNPUiIsIkRFRkFVTFRfQ1VSU09SX0FDQ0VOVCIsIkRFRkFVTFRfU0VMRUNUSU9OIiwiREVGQVVMVF9BTlNJX0NPTE9SUyIsIk9iamVjdCIsImZyZWV6ZSIsImNvbG9ycyIsInYiLCJhbGxvd1RyYW5zcGFyZW5jeSIsImNhbnZhcyIsImN0eCIsImdldENvbnRleHQiLCJfY3R4IiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiX2xpdG11c0NvbG9yIiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJfY29udHJhc3RDYWNoZSIsImZvcmVncm91bmQiLCJiYWNrZ3JvdW5kIiwiY3Vyc29yIiwiY3Vyc29yQWNjZW50Iiwic2VsZWN0aW9uVHJhbnNwYXJlbnQiLCJzZWxlY3Rpb25PcGFxdWUiLCJhbnNpIiwiY29udHJhc3RDYWNoZSIsIl91cGRhdGVSZXN0b3JlQ29sb3JzIiwib25PcHRpb25zQ2hhbmdlIiwic2V0VGhlbWUiLCJ0aGVtZSIsIl9wYXJzZUNvbG9yIiwic2VsZWN0aW9uIiwiYmxhY2siLCJyZWQiLCJncmVlbiIsInllbGxvdyIsImJsdWUiLCJtYWdlbnRhIiwiY3lhbiIsIndoaXRlIiwiYnJpZ2h0QmxhY2siLCJicmlnaHRSZWQiLCJicmlnaHRHcmVlbiIsImJyaWdodFllbGxvdyIsImJyaWdodEJsdWUiLCJicmlnaHRNYWdlbnRhIiwiYnJpZ2h0Q3lhbiIsImJyaWdodFdoaXRlIiwicmVzdG9yZUNvbG9yIiwic2xvdCIsIl9yZXN0b3JlQ29sb3JzIiwiZmFsbGJhY2siLCJmaWxsU3R5bGUiLCJjb25zb2xlIiwid2FybiIsImZpbGxSZWN0IiwiZGF0YSIsImdldEltYWdlRGF0YSIsInN1YnN0cmluZyIsInNwbGl0IiwibWFwIiwiY29tcG9uZW50IiwiTnVtYmVyIiwiYWxwaGEiLCJDb2xvck1hbmFnZXIiLCJlbGVtZW50cyIsInBhcmVudEVsZW1lbnQiLCJub2RlIiwidHlwZSIsImhhbmRsZXIiLCJvcHRpb25zIiwiZGlzcG9zZWQiLCJfYnVmZmVyU2VydmljZSIsIl9sb2dTZXJ2aWNlIiwiX3VuaWNvZGVTZXJ2aWNlIiwiX2xpbmtNYXRjaGVycyIsIl9uZXh0TGlua01hdGNoZXJJZCIsIl9vblNob3dMaW5rVW5kZXJsaW5lIiwiRXZlbnRFbWl0dGVyIiwiX29uSGlkZUxpbmtVbmRlcmxpbmUiLCJfb25MaW5rVG9vbHRpcCIsIl9yb3dzVG9MaW5raWZ5IiwiZXZlbnQiLCJhdHRhY2hUb0RvbSIsIm1vdXNlWm9uZU1hbmFnZXIiLCJfZWxlbWVudCIsIl9tb3VzZVpvbmVNYW5hZ2VyIiwibGlua2lmeVJvd3MiLCJjbGVhckFsbCIsIl9yb3dzVGltZW91dElkIiwiY2xlYXJUaW1lb3V0IiwiX2xpbmtpZnlSb3dzIiwiTGlua2lmaWVyIiwiX3RpbWVCZWZvcmVMYXRlbmN5IiwiYWJzb2x1dGVSb3dJbmRleFN0YXJ0IiwiYWJzb2x1dGVSb3dJbmRleEVuZCIsIm92ZXJzY2FuTGluZUxpbWl0IiwiY29scyIsIml0ZXJhdG9yIiwiaGFzTmV4dCIsIm5leHQiLCJfZG9MaW5raWZ5Um93IiwicmFuZ2UiLCJmaXJzdCIsImNvbnRlbnQiLCJkZWJ1ZyIsInJlZ2lzdGVyTGlua01hdGNoZXIiLCJyZWdleCIsIm1hdGNoZXIiLCJpZCIsIm1hdGNoSW5kZXgiLCJ2YWxpZGF0aW9uQ2FsbGJhY2siLCJob3ZlclRvb2x0aXBDYWxsYmFjayIsInRvb2x0aXBDYWxsYmFjayIsImhvdmVyTGVhdmVDYWxsYmFjayIsImxlYXZlQ2FsbGJhY2siLCJ3aWxsTGlua0FjdGl2YXRlIiwicHJpb3JpdHkiLCJfYWRkTGlua01hdGNoZXJUb0xpc3QiLCJzcGxpY2UiLCJkZXJlZ2lzdGVyTGlua01hdGNoZXIiLCJtYXRjaGVySWQiLCJyb3dJbmRleCIsIm1hdGNoIiwicmV4IiwiUmVnRXhwIiwic291cmNlIiwiZmxhZ3MiLCJzdHJpbmdJbmRleCIsInVyaSIsImluZGV4T2YiLCJsYXN0SW5kZXgiLCJidWZmZXJJbmRleCIsInN0cmluZ0luZGV4VG9CdWZmZXJJbmRleCIsImxpbmUiLCJnZXQiLCJhdHRyIiwiZ2V0RmciLCJpc1ZhbGlkIiwiX2FkZExpbmsiLCJleGVjIiwieCIsInkiLCJnZXRTdHJpbmdDZWxsV2lkdGgiLCJ4MSIsInkxIiwiZmxvb3IiLCJ4MiIsInkyIiwiTW91c2Vab25lIiwibmV3V2luZG93Iiwib3BlbiIsIm9wZW5lciIsImxvY2F0aW9uIiwiaHJlZiIsImZpcmUiLCJfY3JlYXRlTGlua0hvdmVyRXZlbnQiLCJyZW1vdmUiLCJJQnVmZmVyU2VydmljZSIsIklMb2dTZXJ2aWNlIiwiSVVuaWNvZGVTZXJ2aWNlIiwiY2xpY2tDYWxsYmFjayIsImhvdmVyQ2FsbGJhY2siLCJfbGlua1Byb3ZpZGVycyIsIl9saW5rQ2FjaGVEaXNwb3NhYmxlcyIsIl9pc01vdXNlT3V0IiwiX2FjdGl2ZUxpbmUiLCJnZXREaXNwb3NlQXJyYXlEaXNwb3NhYmxlIiwiX2N1cnJlbnRMaW5rIiwicmVnaXN0ZXJMaW5rUHJvdmlkZXIiLCJsaW5rUHJvdmlkZXIiLCJwcm92aWRlckluZGV4IiwibW91c2VTZXJ2aWNlIiwicmVuZGVyU2VydmljZSIsIl9tb3VzZVNlcnZpY2UiLCJfY2xlYXJDdXJyZW50TGluayIsIl9vbk1vdXNlTW92ZSIsIl9vbkNsaWNrIiwiX2xhc3RNb3VzZUV2ZW50IiwiX3Bvc2l0aW9uRnJvbU1vdXNlRXZlbnQiLCJjb21wb3NlZFBhdGgiLCJjb250YWlucyIsIl9sYXN0QnVmZmVyQ2VsbCIsIl9vbkhvdmVyIiwiX2Fza0ZvckxpbmsiLCJfbGlua0F0UG9zaXRpb24iLCJsaW5rIiwidXNlTGluZUNhY2hlIiwiX2FjdGl2ZVByb3ZpZGVyUmVwbGllcyIsImZvckVhY2giLCJyZXBseSIsImxpbmtXaXRoU3RhdGUiLCJNYXAiLCJsaW5rUHJvdmlkZWQiLCJfY2hlY2tMaW5rUHJvdmlkZXJSZXN1bHQiLCJwcm92aWRlTGlua3MiLCJsaW5rcyIsImxpbmtzV2l0aFN0YXRlIiwic2V0Iiwic2l6ZSIsIl9yZW1vdmVJbnRlcnNlY3RpbmdMaW5rcyIsInJlcGxpZXMiLCJvY2N1cGllZENlbGxzIiwiU2V0IiwicHJvdmlkZXJSZXBseSIsInN0YXJ0WCIsImVuZFgiLCJoYXMiLCJpbmRleCIsImhhc0xpbmtCZWZvcmUiLCJqIiwibGlua0F0UG9zaXRpb24iLCJmaW5kIiwiX2hhbmRsZU5ld0xpbmsiLCJjdXJyZW50TGluayIsImFjdGl2YXRlIiwic3RhcnRSb3ciLCJlbmRSb3ciLCJfbGlua0xlYXZlIiwiZGlzcG9zZUFycmF5Iiwic3RhdGUiLCJkZWNvcmF0aW9ucyIsInVuZGVybGluZSIsInBvaW50ZXJDdXJzb3IiLCJpc0hvdmVyZWQiLCJfbGlua0hvdmVyIiwiZGVmaW5lUHJvcGVydGllcyIsInRvZ2dsZSIsIl9maXJlVW5kZXJsaW5lRXZlbnQiLCJvblJlbmRlcmVkQnVmZmVyQ2hhbmdlIiwiaG92ZXIiLCJzaG93RXZlbnQiLCJzY3JvbGxPZmZzZXQiLCJfY3JlYXRlTGlua1VuZGVybGluZUV2ZW50IiwibGVhdmUiLCJzYW1lTGluZSIsIndyYXBwZWRGcm9tTGVmdCIsIndyYXBwZWRUb1JpZ2h0IiwiY29vcmRzIiwiZ2V0Q29vcmRzIiwiTGlua2lmaWVyMiIsInByb21wdExhYmVsIiwiX3NjcmVlbkVsZW1lbnQiLCJfc2VsZWN0aW9uU2VydmljZSIsIl9vcHRpb25zU2VydmljZSIsIl96b25lcyIsIl9hcmVab25lc0FjdGl2ZSIsIl9sYXN0SG92ZXJDb29yZHMiLCJfaW5pdGlhbFNlbGVjdGlvbkxlbmd0aCIsIl9vbk1vdXNlRG93biIsIl9tb3VzZU1vdmVMaXN0ZW5lciIsIl9tb3VzZUxlYXZlTGlzdGVuZXIiLCJfb25Nb3VzZUxlYXZlIiwiX2NsaWNrTGlzdGVuZXIiLCJfZGVhY3RpdmF0ZSIsInpvbmUiLCJfYWN0aXZhdGUiLCJfY3VycmVudFpvbmUiLCJwYWdlWCIsInBhZ2VZIiwiX2ZpbmRab25lRXZlbnRBdCIsIl90b29sdGlwVGltZW91dCIsIl9vblRvb2x0aXAiLCJyYXdPcHRpb25zIiwibGlua1Rvb2x0aXBIb3ZlckR1cmF0aW9uIiwiX2dldFNlbGVjdGlvbkxlbmd0aCIsImN1cnJlbnRTZWxlY3Rpb25MZW5ndGgiLCJJTW91c2VTZXJ2aWNlIiwiSVNlbGVjdGlvblNlcnZpY2UiLCJJT3B0aW9uc1NlcnZpY2UiLCJNb3VzZVpvbmVNYW5hZ2VyIiwiX3JlbmRlckNhbGxiYWNrIiwiX2FuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyb3dTdGFydCIsInJvd0VuZCIsInJvd0NvdW50IiwiX3Jvd0NvdW50IiwiX3Jvd1N0YXJ0IiwiX3Jvd0VuZCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIl9pbm5lclJlZnJlc2giLCJSZW5kZXJEZWJvdW5jZXIiLCJfY3VycmVudERldmljZVBpeGVsUmF0aW8iLCJkZXZpY2VQaXhlbFJhdGlvIiwibGlzdGVuZXIiLCJfbGlzdGVuZXIiLCJjbGVhckxpc3RlbmVyIiwiX291dGVyTGlzdGVuZXIiLCJfdXBkYXRlRHByIiwiX3Jlc29sdXRpb25NZWRpYU1hdGNoTGlzdCIsInJlbW92ZUxpc3RlbmVyIiwibWF0Y2hNZWRpYSIsImFkZExpc3RlbmVyIiwiYnJvd3NlciIsIkJyb3dzZXIiLCJfa2V5RG93bkhhbmRsZWQiLCJfa2V5UHJlc3NIYW5kbGVkIiwiX3VucHJvY2Vzc2VkRGVhZEtleSIsIl9vbkN1cnNvck1vdmUiLCJfb25SZW5kZXIiLCJfb25TZWxlY3Rpb25DaGFuZ2UiLCJfb25UaXRsZUNoYW5nZSIsIl9vbkJlbGwiLCJfb25Gb2N1cyIsIl9vbkJsdXIiLCJfb25BMTF5Q2hhckVtaXR0ZXIiLCJfb25BMTF5VGFiRW1pdHRlciIsIl9zZXR1cCIsImxpbmtpZmllciIsIl9pbnN0YW50aWF0aW9uU2VydmljZSIsImNyZWF0ZUluc3RhbmNlIiwibGlua2lmaWVyMiIsImRlY29yYXRpb25TZXJ2aWNlIiwiRGVjb3JhdGlvblNlcnZpY2UiLCJfaW5wdXRIYW5kbGVyIiwib25SZXF1ZXN0QmVsbCIsImJlbGwiLCJvblJlcXVlc3RSZWZyZXNoUm93cyIsIm9uUmVxdWVzdFNlbmRGb2N1cyIsIl9yZXBvcnRGb2N1cyIsIm9uUmVxdWVzdFJlc2V0IiwicmVzZXQiLCJvblJlcXVlc3RXaW5kb3dzT3B0aW9uc1JlcG9ydCIsIl9yZXBvcnRXaW5kb3dzT3B0aW9ucyIsIm9uQ29sb3IiLCJfaGFuZGxlQ29sb3JFdmVudCIsImZvcndhcmRFdmVudCIsIm9uQ3Vyc29yTW92ZSIsIm9uVGl0bGVDaGFuZ2UiLCJfYWZ0ZXJSZXNpemUiLCJfY29sb3JNYW5hZ2VyIiwicmVxIiwiYWNjIiwiaWRlbnQiLCJDMCIsIkVTQyIsInRvUmdiU3RyaW5nIiwiQkVMIiwic2V0Q29sb3JzIiwidmlld3BvcnQiLCJvblRoZW1lQ2hhbmdlIiwiX2lzRGlzcG9zZWQiLCJfY3VzdG9tS2V5RXZlbnRIYW5kbGVyIiwid3JpdGUiLCJidWZmZXJzIiwiYWN0aXZlIiwicHJldmVudFNjcm9sbCIsIl91cGRhdGVPcHRpb25zIiwiX2NoYXJTaXplU2VydmljZSIsIm1lYXN1cmUiLCJzZXRSZW5kZXJlciIsIl9jcmVhdGVSZW5kZXJlciIsInN5bmNTY3JvbGxBcmVhIiwib3B0aW9uc1NlcnZpY2UiLCJzY3JlZW5SZWFkZXJNb2RlIiwiX2FjY2Vzc2liaWxpdHlNYW5hZ2VyIiwic2V0dXBUYWJTdG9wcyIsIl9zZXRUaGVtZSIsIl9vblRleHRBcmVhRm9jdXMiLCJzZW5kRm9jdXMiLCJ1cGRhdGVDdXJzb3JTdHlsZSIsIl9zaG93Q3Vyc29yIiwiYmx1ciIsIl9vblRleHRBcmVhQmx1ciIsIl9zeW5jVGV4dEFyZWEiLCJpc0N1cnNvckluVmlld3BvcnQiLCJfY29tcG9zaXRpb25IZWxwZXIiLCJpc0NvbXBvc2luZyIsImN1cnNvclkiLCJ5YmFzZSIsImJ1ZmZlckxpbmUiLCJjdXJzb3JYIiwiY2VsbEhlaWdodCIsImdldFdpZHRoIiwiY2VsbFdpZHRoIiwiYWN0dWFsQ2VsbFdpZHRoIiwiY3Vyc29yVG9wIiwiY3Vyc29yTGVmdCIsImxpbmVIZWlnaHQiLCJfaW5pdEdsb2JhbCIsIl9iaW5kS2V5cyIsImhhc1NlbGVjdGlvbiIsImNvcHlIYW5kbGVyIiwicGFzdGVIYW5kbGVyV3JhcHBlciIsImhhbmRsZVBhc3RlRXZlbnQiLCJpc0ZpcmVmb3giLCJidXR0b24iLCJyaWdodENsaWNrSGFuZGxlciIsInJpZ2h0Q2xpY2tTZWxlY3RzV29yZCIsImlzTGludXgiLCJfa2V5VXAiLCJfa2V5RG93biIsIl9rZXlQcmVzcyIsImNvbXBvc2l0aW9uc3RhcnQiLCJjb21wb3NpdGlvbnVwZGF0ZSIsImNvbXBvc2l0aW9uZW5kIiwiX2lucHV0RXZlbnQiLCJ1cGRhdGVDb21wb3NpdGlvbkVsZW1lbnRzIiwiX3F1ZXVlTGlua2lmaWNhdGlvbiIsInBhcmVudCIsImlzQ29ubmVjdGVkIiwiX2RvY3VtZW50Iiwib3duZXJEb2N1bWVudCIsImRpciIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIl92aWV3cG9ydEVsZW1lbnQiLCJfdmlld3BvcnRTY3JvbGxBcmVhIiwiX2hlbHBlckNvbnRhaW5lciIsImNvcmVCcm93c2VyU2VydmljZSIsIkNvcmVCcm93c2VyU2VydmljZSIsInNldFNlcnZpY2UiLCJJQ29yZUJyb3dzZXJTZXJ2aWNlIiwiQ2hhclNpemVTZXJ2aWNlIiwiSUNoYXJTaXplU2VydmljZSIsIl90aGVtZSIsIm9uT3B0aW9uQ2hhbmdlIiwiX2NoYXJhY3RlckpvaW5lclNlcnZpY2UiLCJDaGFyYWN0ZXJKb2luZXJTZXJ2aWNlIiwiSUNoYXJhY3RlckpvaW5lclNlcnZpY2UiLCJyZW5kZXJlciIsIlJlbmRlclNlcnZpY2UiLCJJUmVuZGVyU2VydmljZSIsInJlc2l6ZSIsIl9jb21wb3NpdGlvblZpZXciLCJDb21wb3NpdGlvbkhlbHBlciIsIl9zb3VuZFNlcnZpY2UiLCJTb3VuZFNlcnZpY2UiLCJJU291bmRTZXJ2aWNlIiwiTW91c2VTZXJ2aWNlIiwiVmlld3BvcnQiLCJhbW91bnQiLCJvblJlcXVlc3RTeW5jU2Nyb2xsQmFyIiwib25Gb2N1cyIsIlNlbGVjdGlvblNlcnZpY2UiLCJvblJlcXVlc3RTY3JvbGxMaW5lcyIsInN1cHByZXNzU2Nyb2xsRXZlbnQiLCJvblNlbGVjdGlvbkNoYW5nZSIsIm9uUmVxdWVzdFJlZHJhdyIsIm9uU2VsZWN0aW9uQ2hhbmdlZCIsImNvbHVtblNlbGVjdE1vZGUiLCJvbkxpbnV4TW91c2VTZWxlY3Rpb24iLCJfb25TY3JvbGwiLCJvbk1vdXNlRG93biIsImNvcmVNb3VzZVNlcnZpY2UiLCJhcmVNb3VzZUV2ZW50c0FjdGl2ZSIsImRpc2FibGUiLCJlbmFibGUiLCJiaW5kTW91c2UiLCJyZW5kZXJlclR5cGUiLCJSZW5kZXJlciIsIkRvbVJlbmRlcmVyIiwiZWwiLCJzZW5kRXZlbnQiLCJidXQiLCJhY3Rpb24iLCJnZXRSYXdCeXRlQ29vcmRzIiwib3ZlcnJpZGVUeXBlIiwiYnV0dG9ucyIsImRlbHRhWSIsInRyaWdnZXJNb3VzZUV2ZW50IiwiY29sIiwicm93IiwiY3RybCIsImN0cmxLZXkiLCJhbHQiLCJhbHRLZXkiLCJzaGlmdEtleSIsInJlcXVlc3RlZEV2ZW50cyIsIm1vdXNldXAiLCJ3aGVlbCIsIm1vdXNlZHJhZyIsIm1vdXNlbW92ZSIsImV2ZW50TGlzdGVuZXJzIiwiY2FuY2VsIiwib25Qcm90b2NvbENoYW5nZSIsImV2ZW50cyIsImxvZ0xldmVsIiwiZXhwbGFpbkV2ZW50cyIsInBhc3NpdmUiLCJhY3RpdmVQcm90b2NvbCIsInNob3VsZEZvcmNlU2VsZWN0aW9uIiwiaGFzU2Nyb2xsYmFjayIsImdldExpbmVzU2Nyb2xsZWQiLCJzZXF1ZW5jZSIsImFwcGxpY2F0aW9uQ3Vyc29yS2V5cyIsImFicyIsIm9uV2hlZWwiLCJvblRvdWNoU3RhcnQiLCJvblRvdWNoTW92ZSIsInJlZnJlc2hSb3dzIiwic2hvdWxkQ29sdW1uU2VsZWN0IiwiaXNDdXJzb3JJbml0aWFsaXplZCIsImRpc3AiLCJhdHRhY2hDdXN0b21LZXlFdmVudEhhbmRsZXIiLCJjdXN0b21LZXlFdmVudEhhbmRsZXIiLCJyZWdpc3RlckNoYXJhY3RlckpvaW5lciIsImpvaW5lcklkIiwiZGVyZWdpc3RlckNoYXJhY3RlckpvaW5lciIsImRlcmVnaXN0ZXIiLCJtYXJrZXJzIiwiYWRkTWFya2VyIiwiY3Vyc29yWU9mZnNldCIsIm5vcm1hbCIsInJlZ2lzdGVyRGVjb3JhdGlvbiIsImRlY29yYXRpb25PcHRpb25zIiwiY29sdW1uIiwic2V0U2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uUG9zaXRpb24iLCJzdGFydENvbHVtbiIsInNlbGVjdGlvblN0YXJ0IiwiZW5kQ29sdW1uIiwic2VsZWN0aW9uRW5kIiwiY2xlYXJTZWxlY3Rpb24iLCJzZWxlY3RBbGwiLCJzZWxlY3RMaW5lcyIsImtleWRvd24iLCJzY3JvbGxUb0JvdHRvbSIsImV2YWx1YXRlS2V5Ym9hcmRFdmVudCIsIm1hY09wdGlvbklzTWV0YSIsInNjcm9sbENvdW50IiwiX2lzVGhpcmRMZXZlbFNoaWZ0IiwiRVRYIiwiQ1IiLCJkb21FdmVudCIsInRoaXJkTGV2ZWxLZXkiLCJtZXRhS2V5IiwiaXNXaW5kb3dzIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsImtleUNvZGUiLCJ3YXNNb2RpZmllcktleU9ubHlFdmVudCIsImNoYXJDb2RlIiwid2hpY2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJpbnB1dFR5cGUiLCJjb21wb3NlZCIsIl9zb3VuZEJlbGwiLCJwbGF5QmVsbFNvdW5kIiwiaGFzVmFsaWRTaXplIiwiY2xlYXJNYXJrZXJzIiwiZ2V0QmxhbmtMaW5lIiwiREVGQVVMVF9BVFRSX0RBVEEiLCJjbGVhclRleHR1cmVBdGxhcyIsIldpbmRvd3NPcHRpb25zUmVwb3J0VHlwZSIsIkdFVF9XSU5fU0laRV9QSVhFTFMiLCJjYW52YXNXaWR0aCIsInNjYWxlZENhbnZhc1dpZHRoIiwidG9GaXhlZCIsImNhbnZhc0hlaWdodCIsInNjYWxlZENhbnZhc0hlaWdodCIsIkdFVF9DRUxMX1NJWkVfUElYRUxTIiwic2NhbGVkQ2VsbFdpZHRoIiwic2NhbGVkQ2VsbEhlaWdodCIsImZvcmNlIiwiY2FuY2VsRXZlbnRzIiwiX3Zpc3VhbEJlbGwiLCJiZWxsU3R5bGUiLCJDb3JlVGVybWluYWwiLCJUZXJtaW5hbCIsIl9kZWJvdW5jZVRocmVzaG9sZE1TIiwiX2xhc3RSZWZyZXNoTXMiLCJfYWRkaXRpb25hbFJlZnJlc2hSZXF1ZXN0ZWQiLCJfcmVmcmVzaFRpbWVvdXRJRCIsInJlZnJlc2hSZXF1ZXN0VGltZSIsIkRhdGUiLCJub3ciLCJlbGFwc2VkIiwid2FpdFBlcmlvZEJlZm9yZVRyYWlsaW5nUmVmcmVzaCIsIl9zY3JvbGxMaW5lcyIsIl9zY3JvbGxBcmVhIiwic2Nyb2xsQmFyV2lkdGgiLCJfY3VycmVudFJvd0hlaWdodCIsIl9jdXJyZW50U2NhbGVkQ2VsbEhlaWdodCIsIl9sYXN0UmVjb3JkZWRCdWZmZXJMZW5ndGgiLCJfbGFzdFJlY29yZGVkVmlld3BvcnRIZWlnaHQiLCJfbGFzdFJlY29yZGVkQnVmZmVySGVpZ2h0IiwiX2xhc3RUb3VjaFkiLCJfbGFzdFNjcm9sbFRvcCIsIl9sYXN0SGFkU2Nyb2xsQmFyIiwiX3doZWVsUGFydGlhbFNjcm9sbCIsIl9yZWZyZXNoQW5pbWF0aW9uRnJhbWUiLCJfaWdub3JlTmV4dFNjcm9sbEV2ZW50Iiwib2Zmc2V0V2lkdGgiLCJfYWN0aXZlQnVmZmVyIiwib25CdWZmZXJBY3RpdmF0ZSIsImFjdGl2ZUJ1ZmZlciIsIl9yZW5kZXJEaW1lbnNpb25zIiwiYmFja2dyb3VuZENvbG9yIiwiX3JlZnJlc2giLCJpbW1lZGlhdGUiLCJvZmZzZXRIZWlnaHQiLCJuZXdCdWZmZXJIZWlnaHQiLCJzY3JvbGxUb3AiLCJzY3JvbGxiYWNrIiwiZWxlbWVudFN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImVsZW1lbnRQYWRkaW5nIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJvZmZzZXRQYXJlbnQiLCJkaWZmIiwiX2J1YmJsZVNjcm9sbCIsInNjcm9sbFBvc0Zyb21Ub3AiLCJjYW5jZWxhYmxlIiwiX2dldFBpeGVsc1Njcm9sbGVkIiwiX2FwcGx5U2Nyb2xsTW9kaWZpZXIiLCJkZWx0YU1vZGUiLCJXaGVlbEV2ZW50IiwiRE9NX0RFTFRBX0xJTkUiLCJET01fREVMVEFfUEFHRSIsIkRPTV9ERUxUQV9QSVhFTCIsIm1vZGlmaWVyIiwiZmFzdFNjcm9sbE1vZGlmaWVyIiwiZmFzdFNjcm9sbFNlbnNpdGl2aXR5Iiwic2Nyb2xsU2Vuc2l0aXZpdHkiLCJ0b3VjaGVzIiwiX3RleHRhcmVhIiwiX2NvcmVTZXJ2aWNlIiwiX2lzQ29tcG9zaW5nIiwiX2lzU2VuZGluZ0NvbXBvc2l0aW9uIiwiX2NvbXBvc2l0aW9uUG9zaXRpb24iLCJfZGF0YUFscmVhZHlTZW50IiwiX2ZpbmFsaXplQ29tcG9zaXRpb24iLCJfaGFuZGxlQW55VGV4dGFyZWFDaGFuZ2VzIiwid2FpdEZvclByb3BhZ2F0aW9uIiwiaW5wdXQiLCJvbGRWYWx1ZSIsImRvbnRSZWN1cnNlIiwiZm9udEZhbWlseSIsImZvbnRTaXplIiwiY29tcG9zaXRpb25WaWV3Qm91bmRzIiwiSUNvcmVTZXJ2aWNlIiwiZ2V0Q29vcmRzUmVsYXRpdmVUb0VsZW1lbnQiLCJyZWN0IiwiY29sQ291bnQiLCJoYXNWYWxpZENoYXJTaXplIiwiaXNTZWxlY3Rpb24iLCJtb3ZlVG9SZXF1ZXN0ZWRSb3ciLCJzdGFydFkiLCJ0YXJnZXRZIiwiYnVmZmVyU2VydmljZSIsImFwcGxpY2F0aW9uQ3Vyc29yIiwid3JhcHBlZFJvd3NGb3JSb3ciLCJyb3dzVG9Nb3ZlIiwid3JhcHBlZFJvd3MiLCJkaXJlY3Rpb24iLCJ2ZXJ0aWNhbERpcmVjdGlvbiIsImlzV3JhcHBlZCIsIndyYXBwZWRSb3dzQ291bnQiLCJyZXBlYXQiLCJjdXJyZW50Um93IiwibGluZVdyYXBzIiwic3RhcnRDb2wiLCJlbmRDb2wiLCJmb3J3YXJkIiwiY3VycmVudENvbCIsImJ1ZmZlclN0ciIsIm1vZCIsImNvdW50Iiwic3RyIiwicnB0IiwidGFyZ2V0WCIsInJlc2V0U3RhcnRpbmdSb3ciLCJob3Jpem9udGFsRGlyZWN0aW9uIiwibW92ZVRvUmVxdWVzdGVkQ29sIiwicm93RGlmZmVyZW5jZSIsImN1cnJYIiwiY29sc0Zyb21Sb3dFbmQiLCJDT05TVFJVQ1RPUl9PTkxZX09QVElPTlMiLCJfY29yZSIsIl9hZGRvbk1hbmFnZXIiLCJBZGRvbk1hbmFnZXIiLCJfcHVibGljT3B0aW9ucyIsImdldHRlciIsInByb3BOYW1lIiwic2V0dGVyIiwiX2NoZWNrUmVhZG9ubHlPcHRpb25zIiwiZGVzYyIsImRlZmluZVByb3BlcnR5IiwiaW5jbHVkZXMiLCJfY2hlY2tQcm9wb3NlZEFwaSIsImFsbG93UHJvcG9zZWRBcGkiLCJvbkJlbGwiLCJvbkJpbmFyeSIsIm9uRGF0YSIsIl9wYXJzZXIiLCJQYXJzZXJBcGkiLCJVbmljb2RlQXBpIiwiX2J1ZmZlciIsIkJ1ZmZlck5hbWVzcGFjZUFwaSIsIm0iLCJtb3VzZVRyYWNraW5nTW9kZSIsImFwcGxpY2F0aW9uQ3Vyc29yS2V5c01vZGUiLCJhcHBsaWNhdGlvbktleXBhZE1vZGUiLCJhcHBsaWNhdGlvbktleXBhZCIsImluc2VydE1vZGUiLCJtb2RlcyIsIm9yaWdpbk1vZGUiLCJvcmlnaW4iLCJyZXZlcnNlV3JhcGFyb3VuZE1vZGUiLCJyZXZlcnNlV3JhcGFyb3VuZCIsInNlbmRGb2N1c01vZGUiLCJ3cmFwYXJvdW5kTW9kZSIsIndyYXBhcm91bmQiLCJjb2x1bW5zIiwiX3ZlcmlmeUludGVnZXJzIiwicmVnaXN0ZXJNYXJrZXIiLCJfdmVyaWZ5UG9zaXRpdmVJbnRlZ2VycyIsInNjcm9sbFBhZ2VzIiwicGFnZUNvdW50Iiwic2Nyb2xsVG9Ub3AiLCJzY3JvbGxUb0xpbmUiLCJjYWxsYmFjayIsIndyaXRlVXRmOCIsIndyaXRlbG4iLCJnZXRPcHRpb24iLCJzZXRPcHRpb24iLCJsb2FkQWRkb24iLCJhZGRvbiIsInZhbHVlcyIsIkluZmluaXR5IiwiaXNOYU4iLCJfY29udGFpbmVyIiwiX2FscGhhIiwiX2NvbG9ycyIsIl9yZW5kZXJlcklkIiwiX3NjYWxlZENoYXJXaWR0aCIsIl9zY2FsZWRDaGFySGVpZ2h0IiwiX3NjYWxlZENlbGxXaWR0aCIsIl9zY2FsZWRDZWxsSGVpZ2h0IiwiX3NjYWxlZENoYXJMZWZ0IiwiX3NjYWxlZENoYXJUb3AiLCJfY3VycmVudEdseXBoSWRlbnRpZmllciIsImNoYXJzIiwiY29kZSIsImJvbGQiLCJkaW0iLCJpdGFsaWMiLCJfY2FudmFzIiwiX2luaXRDYW52YXMiLCJfY2hhckF0bGFzIiwidGhyb3dJZkZhbHN5IiwiX2NsZWFyQWxsIiwib25PcHRpb25zQ2hhbmdlZCIsIm9uR3JpZENoYW5nZWQiLCJjb2xvclNldCIsIl9yZWZyZXNoQ2hhckF0bGFzIiwiX3NldFRyYW5zcGFyZW5jeSIsIm9sZENhbnZhcyIsImNsb25lTm9kZSIsInJlcGxhY2VDaGlsZCIsImFjcXVpcmVDaGFyQXRsYXMiLCJ3YXJtVXAiLCJzY2FsZWRDaGFyV2lkdGgiLCJzY2FsZWRDaGFySGVpZ2h0Iiwic2NhbGVkQ2hhckxlZnQiLCJzY2FsZWRDaGFyVG9wIiwiX2ZpbGxDZWxscyIsIl9maWxsTWlkZGxlTGluZUF0Q2VsbHMiLCJjZWxsT2Zmc2V0IiwiX2ZpbGxCb3R0b21MaW5lQXRDZWxscyIsIl9maWxsTGVmdExpbmVBdENlbGwiLCJfc3Ryb2tlUmVjdEF0Q2VsbCIsImxpbmVXaWR0aCIsInN0cm9rZVJlY3QiLCJjbGVhclJlY3QiLCJfY2xlYXJDZWxscyIsIl9maWxsQ2hhclRydWVDb2xvciIsImNlbGwiLCJmb250IiwiX2dldEZvbnQiLCJ0ZXh0QmFzZWxpbmUiLCJURVhUX0JBU0VMSU5FIiwiX2NsaXBSb3ciLCJkcmF3U3VjY2VzcyIsImN1c3RvbUdseXBocyIsInRyeURyYXdDdXN0b21DaGFyIiwiZ2V0Q2hhcnMiLCJmaWxsVGV4dCIsIl9kcmF3Q2hhcnMiLCJjb250cmFzdENvbG9yIiwiX2dldENvbnRyYXN0Q29sb3IiLCJpc0ZnUkdCIiwiaXNCZ1JHQiIsIl9kcmF3VW5jYWNoZWRDaGFycyIsImlzSW52ZXJzZSIsImlzQmdEZWZhdWx0IiwiSU5WRVJURURfREVGQVVMVF9DT0xPUiIsImdldEJnQ29sb3IiLCJpc0ZnRGVmYXVsdCIsImdldEZnQ29sb3IiLCJERUZBVUxUX0NPTE9SIiwiZHJhd0JvbGRUZXh0SW5CcmlnaHRDb2xvcnMiLCJpc0JvbGQiLCJXSElURVNQQUNFX0NFTExfQ0hBUiIsImdldENvZGUiLCJXSElURVNQQUNFX0NFTExfQ09ERSIsImlzRGltIiwiaXNJdGFsaWMiLCJkcmF3IiwiZmdPdmVycmlkZSIsInNhdmUiLCJBdHRyaWJ1dGVEYXRhIiwiam9pbiIsImdsb2JhbEFscGhhIiwiRElNX09QQUNJVFkiLCJyZXN0b3JlIiwiYmVnaW5QYXRoIiwiY2xpcCIsImZvbnRXZWlnaHRCb2xkIiwiZm9udFdlaWdodCIsIm1pbmltdW1Db250cmFzdFJhdGlvIiwiYWRqdXN0ZWRDb2xvciIsImZnQ29sb3IiLCJmZ0NvbG9yTW9kZSIsImdldEZnQ29sb3JNb2RlIiwiYmdDb2xvciIsImJnQ29sb3JNb2RlIiwiZ2V0QmdDb2xvck1vZGUiLCJ0ZW1wIiwidGVtcDIiLCJfcmVzb2x2ZUJhY2tncm91bmRSZ2JhIiwiX3Jlc29sdmVGb3JlZ3JvdW5kUmdiYSIsImludmVyc2UiLCJCYXNlUmVuZGVyTGF5ZXIiLCJCTElOS19JTlRFUlZBTCIsImNvbnRhaW5lciIsInJlbmRlcmVySWQiLCJfb25SZXF1ZXN0UmVkcmF3IiwiX2NvcmVCcm93c2VyU2VydmljZSIsIl9jZWxsIiwiQ2VsbERhdGEiLCJfc3RhdGUiLCJpc0ZvY3VzZWQiLCJfY3Vyc29yUmVuZGVyZXJzIiwiX3JlbmRlckJhckN1cnNvciIsIl9yZW5kZXJCbG9ja0N1cnNvciIsIl9yZW5kZXJVbmRlcmxpbmVDdXJzb3IiLCJfY3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIiLCJfY2xlYXJDdXJzb3IiLCJyZXN0YXJ0QmxpbmtBbmltYXRpb24iLCJwYXVzZSIsInJlc3VtZSIsImN1cnNvckJsaW5rIiwiQ3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIiLCJfcmVuZGVyIiwiaXNQYXVzZWQiLCJ0cmlnZ2VyZWRCeUFuaW1hdGlvbkZyYW1lIiwiaXNDdXJzb3JIaWRkZW4iLCJ2aWV3cG9ydFJlbGF0aXZlQ3Vyc29yWSIsImxvYWRDZWxsIiwiY3Vyc29yU3R5bGUiLCJfcmVuZGVyQmx1ckN1cnNvciIsImlzQ3Vyc29yVmlzaWJsZSIsImN1cnNvcldpZHRoIiwic3Ryb2tlU3R5bGUiLCJDdXJzb3JSZW5kZXJMYXllciIsIl9yZXN0YXJ0SW50ZXJ2YWwiLCJfYmxpbmtTdGFydFRpbWVvdXQiLCJfYmxpbmtJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJfYW5pbWF0aW9uVGltZVJlc3RhcnRlZCIsInRpbWVUb1N0YXJ0IiwidGltZSIsInNldEludGVydmFsIiwiYmxvY2tFbGVtZW50RGVmaW5pdGlvbnMiLCJ3IiwiaCIsInBhdHRlcm5DaGFyYWN0ZXJEZWZpbml0aW9ucyIsImJveERyYXdpbmdEZWZpbml0aW9ucyIsInhwIiwieXAiLCJ4T2Zmc2V0IiwieU9mZnNldCIsImJsb2NrRWxlbWVudERlZmluaXRpb24iLCJjaGFyRGVmaW5pdGlvbiIsImJveCIsInhFaWdodGgiLCJ5RWlnaHRoIiwiZHJhd0Jsb2NrRWxlbWVudENoYXIiLCJwYXR0ZXJuRGVmaW5pdGlvbiIsInBhdHRlcm5TZXQiLCJjYWNoZWRQYXR0ZXJucyIsInBhdHRlcm4iLCJ0bXBDYW52YXMiLCJ0bXBDdHgiLCJpbWFnZURhdGEiLCJJbWFnZURhdGEiLCJzdGFydHNXaXRoIiwic3Vic3RyIiwicGFyc2VGbG9hdCIsInB1dEltYWdlRGF0YSIsImNyZWF0ZVBhdHRlcm4iLCJkcmF3UGF0dGVybkNoYXIiLCJib3hEcmF3aW5nRGVmaW5pdGlvbiIsImVudHJpZXMiLCJpbnN0cnVjdGlvbnMiLCJpbnN0cnVjdGlvbiIsImYiLCJzdmdUb0NhbnZhc0luc3RydWN0aW9uTWFwIiwiYXJncyIsInRyYW5zbGF0ZUFyZ3MiLCJlcnJvciIsInN0cm9rZSIsImNsb3NlUGF0aCIsImRyYXdCb3hEcmF3aW5nQ2hhciIsImNsYW1wIiwiYmV6aWVyQ3VydmVUbyIsImxpbmVUbyIsIm1vdmVUbyIsImNhY2hlIiwiR3JpZENhY2hlIiwib25TaG93TGlua1VuZGVybGluZSIsIm9uSGlkZUxpbmtVbmRlcmxpbmUiLCJtaWRkbGVSb3dDb3VudCIsImlzMjU2Q29sb3IiLCJMaW5rUmVuZGVyTGF5ZXIiLCJuZXh0UmVuZGVyZXJJZCIsImluc3RhbnRpYXRpb25TZXJ2aWNlIiwiX2lkIiwiX3JlbmRlckxheWVycyIsIlRleHRSZW5kZXJMYXllciIsIlNlbGVjdGlvblJlbmRlckxheWVyIiwiX2RldmljZVBpeGVsUmF0aW8iLCJfdXBkYXRlRGltZW5zaW9ucyIsInJlbW92ZVRlcm1pbmFsRnJvbUNhY2hlIiwib25EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlIiwibCIsIm9uQ2hhclNpemVDaGFuZ2VkIiwiX3J1bk9wZXJhdGlvbiIsIm9wZXJhdGlvbiIsInJlbmRlclJvd3MiLCJsZXR0ZXJTcGFjaW5nIiwiSUluc3RhbnRpYXRpb25TZXJ2aWNlIiwiX2NsZWFyU3RhdGUiLCJfZGlkU3RhdGVDaGFuZ2UiLCJ2aWV3cG9ydFN0YXJ0Um93Iiwidmlld3BvcnRFbmRSb3ciLCJ2aWV3cG9ydENhcHBlZFN0YXJ0Um93Iiwidmlld3BvcnRDYXBwZWRFbmRSb3ciLCJzdGFydFJvd0VuZENvbCIsIm1pZGRsZVJvd3NDb3VudCIsIl9hcmVDb29yZGluYXRlc0VxdWFsIiwiY29vcmQxIiwiY29vcmQyIiwiX2NoYXJhY3RlcldpZHRoIiwiX2NoYXJhY3RlckZvbnQiLCJfY2hhcmFjdGVyT3ZlcmxhcENhY2hlIiwiX3dvcmtDZWxsIiwidGVybWluYWxGb250IiwiX2ZvckVhY2hDZWxsIiwiZmlyc3RSb3ciLCJsYXN0Um93Iiwiam9pbmVkUmFuZ2VzIiwiZ2V0Sm9pbmVkQ2hhcmFjdGVycyIsImlzSm9pbmVkIiwibGFzdENoYXJYIiwiSm9pbmVkQ2VsbERhdGEiLCJ0cmFuc2xhdGVUb1N0cmluZyIsIl9pc092ZXJsYXBwaW5nIiwiZ2V0Q29kZVBvaW50IiwiTlVMTF9DRUxMX0NPREUiLCJfZHJhd0JhY2tncm91bmQiLCJwcmV2RmlsbFN0eWxlIiwibmV4dEZpbGxTdHlsZSIsImlzQmdQYWxldHRlIiwiX2RyYXdGb3JlZ3JvdW5kIiwiaXNJbnZpc2libGUiLCJpc1VuZGVybGluZSIsImlzU3RyaWtldGhyb3VnaCIsImJlZ2luRnJhbWUiLCJoYXNPd25Qcm9wZXJ0eSIsIm92ZXJsYXBzIiwibWVhc3VyZVRleHQiLCJfZGlkV2FybVVwIiwiX2RvV2FybVVwIiwiQmFzZUNoYXJBdGxhcyIsImNoYXJBdGxhc0NhY2hlIiwibmV3Q29uZmlnIiwiZ2VuZXJhdGVDb25maWciLCJvd25lZEJ5SW5kZXgiLCJlbnRyeSIsIm93bmVkQnkiLCJjb25maWdFcXVhbHMiLCJjb25maWciLCJhdGxhcyIsIm5ld0VudHJ5IiwiRHluYW1pY0NoYXJBdGxhcyIsImNsb25lZENvbG9ycyIsImNvbG9yQ29kZSIsImlzTGVnYWN5RWRnZSIsIkNIQVJfQVRMQVNfQ0VMTF9TUEFDSU5HIiwiVEVYVFVSRV9XSURUSCIsIlRFWFRVUkVfSEVJR0hUIiwiVFJBTlNQQVJFTlRfQ09MT1IiLCJnZXRHbHlwaENhY2hlS2V5IiwiZ2x5cGgiLCJfY29uZmlnIiwiX2RyYXdUb0NhY2hlQ291bnQiLCJfZ2x5cGhzV2FpdGluZ09uQml0bWFwIiwiX2JpdG1hcENvbW1pdFRpbWVvdXQiLCJfYml0bWFwIiwiX2NhY2hlQ2FudmFzIiwiX2NhY2hlQ3R4IiwiX3RtcEN0eCIsIl93aWR0aCIsIl9oZWlnaHQiLCJjYXBhY2l0eSIsIl9jYWNoZU1hcCIsIkxSVU1hcCIsInByZWFsbG9jIiwiX2NhbkNhY2hlIiwiZ2x5cGhLZXkiLCJjYWNoZVZhbHVlIiwiX2RyYXdGcm9tQ2FjaGUiLCJwZWVrIiwiX2RyYXdUb0NhY2hlIiwiX3RvQ29vcmRpbmF0ZVgiLCJfdG9Db29yZGluYXRlWSIsImlzRW1wdHkiLCJjYWNoZVgiLCJjYWNoZVkiLCJkcmF3SW1hZ2UiLCJpbkJpdG1hcCIsIl9nZXRDb2xvckZyb21BbnNpSW5kZXgiLCJpZHgiLCJfZ2V0QmFja2dyb3VuZENvbG9yIiwiX2dldEZvcmVncm91bmRDb2xvciIsImZvbnRTdHlsZSIsImNsZWFyQ29sb3IiLCJvZmZzZXQiLCJfYWRkR2x5cGhUb0JpdG1hcCIsImlzU2FmYXJpIiwiX2dlbmVyYXRlQml0bWFwIiwiZ2x5cGhzTW92aW5nVG9CaXRtYXAiLCJjcmVhdGVJbWFnZUJpdG1hcCIsInRoZW4iLCJiaXRtYXAiLCJOb25lQ2hhckF0bGFzIiwiX21hcCIsIl9oZWFkIiwiX3RhaWwiLCJfbm9kZVBvb2wiLCJfdW5saW5rTm9kZSIsInByZXYiLCJfYXBwZW5kTm9kZSIsInRhaWwiLCJub2RlUG9vbCIsInBlZWtWYWx1ZSIsImhlYWQiLCJURVJNSU5BTF9DTEFTU19QUkVGSVgiLCJGR19DTEFTU19QUkVGSVgiLCJCR19DTEFTU19QUkVGSVgiLCJGT0NVU19DTEFTUyIsIm5leHRUZXJtaW5hbElkIiwiX2xpbmtpZmllciIsIl9saW5raWZpZXIyIiwiX3Rlcm1pbmFsQ2xhc3MiLCJfcmVmcmVzaFJvd0VsZW1lbnRzIiwiX3NlbGVjdGlvbkNvbnRhaW5lciIsIl9pbmplY3RDc3MiLCJfcm93RmFjdG9yeSIsIkRvbVJlbmRlcmVyUm93RmFjdG9yeSIsIl9vbkxpbmtIb3ZlciIsIl9vbkxpbmtMZWF2ZSIsIl90aGVtZVN0eWxlRWxlbWVudCIsIl9kaW1lbnNpb25zU3R5bGVFbGVtZW50Iiwib3ZlcmZsb3ciLCJzdHlsZXMiLCJfdGVybWluYWxTZWxlY3RvciIsIkJPTERfQ0xBU1MiLCJJVEFMSUNfQ0xBU1MiLCJDVVJTT1JfQ0xBU1MiLCJDVVJTT1JfU1RZTEVfQkxPQ0tfQ0xBU1MiLCJDVVJTT1JfQkxJTktfQ0xBU1MiLCJDVVJTT1JfU1RZTEVfQkFSX0NMQVNTIiwiQ1VSU09SX1NUWUxFX1VOREVSTElORV9DTEFTUyIsImRvY3VtZW50RnJhZ21lbnQiLCJfY3JlYXRlU2VsZWN0aW9uRWxlbWVudCIsImNvbFN0YXJ0IiwiY29sRW5kIiwiY3Vyc29yQWJzb2x1dGVZIiwicm93RWxlbWVudCIsImNyZWF0ZVJvdyIsIl9zZXRDZWxsVW5kZXJsaW5lIiwiZW5hYmxlZCIsInNwYW4iLCJ0ZXh0RGVjb3JhdGlvbiIsIkRJTV9DTEFTUyIsIlVOREVSTElORV9DTEFTUyIsIlNUUklLRVRIUk9VR0hfQ0xBU1MiLCJpc0N1cnNvclJvdyIsImxpbmVMZW5ndGgiLCJjaGFyRWxlbWVudCIsImRpc3BsYXkiLCJfYXBwbHlNaW5pbXVtQ29udHJhc3QiLCJfYWRkU3R5bGUiLCJwYWRTdGFydCIsInBhZENoYXIiLCJpc1NlbGVjdEFsbEFjdGl2ZSIsInNlbGVjdGlvblN0YXJ0TGVuZ3RoIiwiYXJlU2VsZWN0aW9uVmFsdWVzUmV2ZXJzZWQiLCJzdGFydFBsdXNMZW5ndGgiLCJvblRyaW0iLCJTZWxlY3Rpb25Nb2RlbCIsIl9vbkNoYXJTaXplQ2hhbmdlIiwiX21lYXN1cmVTdHJhdGVneSIsIkRvbU1lYXN1cmVTdHJhdGVneSIsIl9wYXJlbnRFbGVtZW50IiwiX3Jlc3VsdCIsIl9tZWFzdXJlRWxlbWVudCIsImdlb21ldHJ5IiwiZmlyc3RDZWxsIiwiY29tYmluZWREYXRhIiwiaXNDb21iaW5lZCIsInNldEZyb21DaGFyRGF0YSIsImdldEFzQ2hhckRhdGEiLCJfY2hhcmFjdGVySm9pbmVycyIsIl9uZXh0Q2hhcmFjdGVySm9pbmVySWQiLCJqb2luZXIiLCJyYW5nZXMiLCJsaW5lU3RyIiwicmFuZ2VTdGFydENvbHVtbiIsImN1cnJlbnRTdHJpbmdJbmRleCIsInJhbmdlU3RhcnRTdHJpbmdJbmRleCIsInJhbmdlQXR0ckZHIiwicmFuZ2VBdHRyQkciLCJnZXRCZyIsImdldFRyaW1tZWRMZW5ndGgiLCJfZ2V0Sm9pbmVkUmFuZ2VzIiwic3RhcnRJbmRleCIsImVuZEluZGV4IiwiYWxsSm9pbmVkUmFuZ2VzIiwiam9pbmVyUmFuZ2VzIiwiX21lcmdlUmFuZ2VzIiwiX3N0cmluZ1Jhbmdlc1RvQ2VsbFJhbmdlcyIsImN1cnJlbnRSYW5nZUluZGV4IiwiY3VycmVudFJhbmdlU3RhcnRlZCIsImN1cnJlbnRSYW5nZSIsImdldFN0cmluZyIsIm5ld1JhbmdlIiwiaW5SYW5nZSIsImdldFJvb3ROb2RlIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiX2RlY29yYXRpb25zIiwibWFya2VyIiwiaXNEaXNwb3NlZCIsImRlY29yYXRpb24iLCJEZWNvcmF0aW9uIiwib25EaXNwb3NlIiwiX3F1ZXVlUmVmcmVzaCIsInNob3VsZFJlY3JlYXRlIiwicmVuZGVyIiwiX29uRGlzcG9zZSIsIl9tYXJrZXIiLCJhbmNob3IiLCJfY3JlYXRlRWxlbWVudCIsImFwcGVuZCIsIl9yZWZyZXNoU3R5bGUiLCJyaWdodCIsIl9yZW5kZXJlciIsIl9pc1BhdXNlZCIsIl9uZWVkc0Z1bGxSZWZyZXNoIiwiX2lzTmV4dFJlbmRlclJlZHJhd09ubHkiLCJfbmVlZHNTZWxlY3Rpb25SZWZyZXNoIiwiX2NhbnZhc1dpZHRoIiwiX2NhbnZhc0hlaWdodCIsIl9zZWxlY3Rpb25TdGF0ZSIsIl9vbkRpbWVuc2lvbnNDaGFuZ2UiLCJfb25SZWZyZXNoUmVxdWVzdCIsIl9yZW5kZXJEZWJvdW5jZXIiLCJfZnVsbFJlZnJlc2giLCJvbkNoYXJTaXplQ2hhbmdlIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJfb25JbnRlcnNlY3Rpb25DaGFuZ2UiLCJ0aHJlc2hvbGQiLCJvYnNlcnZlIiwiZGlzY29ubmVjdCIsImlzSW50ZXJzZWN0aW5nIiwiaW50ZXJzZWN0aW9uUmF0aW8iLCJpc1JlZHJhd09ubHkiLCJfZmlyZU9uQ2FudmFzUmVzaXplIiwiY2hhbmdlT3B0aW9ucyIsIk5PTl9CUkVBS0lOR19TUEFDRV9DSEFSIiwiQUxMX05PTl9CUkVBS0lOR19TUEFDRV9SRUdFWCIsIl9kcmFnU2Nyb2xsQW1vdW50IiwiX2VuYWJsZWQiLCJfbW91c2VEb3duVGltZVN0YW1wIiwiX29sZEhhc1NlbGVjdGlvbiIsIl9vbGRTZWxlY3Rpb25TdGFydCIsIl9vbGRTZWxlY3Rpb25FbmQiLCJfb25MaW51eE1vdXNlU2VsZWN0aW9uIiwiX29uUmVkcmF3UmVxdWVzdCIsIl9vblJlcXVlc3RTY3JvbGxMaW5lcyIsIl9tb3VzZVVwTGlzdGVuZXIiLCJfb25Nb3VzZVVwIiwib25Vc2VySW5wdXQiLCJfdHJpbUxpc3RlbmVyIiwiX29uVHJpbSIsIl9vbkJ1ZmZlckFjdGl2YXRlIiwiX21vZGVsIiwiX2FjdGl2ZVNlbGVjdGlvbk1vZGUiLCJfcmVtb3ZlTW91c2VEb3duTGlzdGVuZXJzIiwiZmluYWxTZWxlY3Rpb25TdGFydCIsImZpbmFsU2VsZWN0aW9uRW5kIiwibGluZVRleHQiLCJpc0xpbnV4TW91c2VTZWxlY3Rpb24iLCJfaXNDbGlja0luU2VsZWN0aW9uIiwiX2dldE1vdXNlQnVmZmVyQ29vcmRzIiwiX2FyZUNvb3Jkc0luU2VsZWN0aW9uIiwiX3NlbGVjdFdvcmRBdEN1cnNvciIsImFsbG93V2hpdGVzcGFjZU9ubHlTZWxlY3Rpb24iLCJnZXRSYW5nZUxlbmd0aCIsIl9zZWxlY3RXb3JkQXQiLCJfZ2V0TW91c2VFdmVudFNjcm9sbEFtb3VudCIsInRlcm1pbmFsSGVpZ2h0IiwibWFjT3B0aW9uQ2xpY2tGb3JjZXNTZWxlY3Rpb24iLCJ0aW1lU3RhbXAiLCJfb25JbmNyZW1lbnRhbENsaWNrIiwiZGV0YWlsIiwiX29uU2luZ2xlQ2xpY2siLCJfb25Eb3VibGVDbGljayIsIl9vblRyaXBsZUNsaWNrIiwiX2FkZE1vdXNlRG93bkxpc3RlbmVycyIsIl9kcmFnU2Nyb2xsSW50ZXJ2YWxUaW1lciIsIl9kcmFnU2Nyb2xsIiwiaGFzV2lkdGgiLCJfc2VsZWN0TGluZUF0IiwicHJldmlvdXNTZWxlY3Rpb25FbmQiLCJfc2VsZWN0VG9Xb3JkQXQiLCJ0aW1lRWxhcHNlZCIsImNvb3JkaW5hdGVzIiwibW92ZVRvQ2VsbFNlcXVlbmNlIiwiX2ZpcmVFdmVudElmU2VsZWN0aW9uQ2hhbmdlZCIsIl9maXJlT25TZWxlY3Rpb25DaGFuZ2UiLCJfY29udmVydFZpZXdwb3J0Q29sVG9DaGFyYWN0ZXJJbmRleCIsImNoYXJJbmRleCIsIl9nZXRXb3JkQXQiLCJmb2xsb3dXcmFwcGVkTGluZXNBYm92ZSIsImZvbGxvd1dyYXBwZWRMaW5lc0JlbG93IiwiY2hhck9mZnNldCIsImxlZnRXaWRlQ2hhckNvdW50IiwicmlnaHRXaWRlQ2hhckNvdW50IiwibGVmdExvbmdDaGFyT2Zmc2V0IiwicmlnaHRMb25nQ2hhck9mZnNldCIsImNoYXJBdCIsIl9pc0NoYXJXb3JkU2VwYXJhdG9yIiwidHJpbSIsInByZXZpb3VzQnVmZmVyTGluZSIsInByZXZpb3VzTGluZVdvcmRQb3NpdGlvbiIsIm5leHRCdWZmZXJMaW5lIiwibmV4dExpbmVXb3JkUG9zaXRpb24iLCJ3b3JkUG9zaXRpb24iLCJ3b3JkU2VwYXJhdG9yIiwid3JhcHBlZFJhbmdlIiwiZ2V0V3JhcHBlZFJhbmdlRm9yTGluZSIsImxhc3QiLCJjcmVhdGVEZWNvcmF0b3IiLCJJRGVjb3JhdGlvblNlcnZpY2UiLCJfYXVkaW9Db250ZXh0IiwiYXVkaW9Db250ZXh0Q3RvciIsIkF1ZGlvQ29udGV4dCIsIndlYmtpdEF1ZGlvQ29udGV4dCIsImF1ZGlvQ29udGV4dCIsImJlbGxBdWRpb1NvdXJjZSIsImNyZWF0ZUJ1ZmZlclNvdXJjZSIsImRlY29kZUF1ZGlvRGF0YSIsIl9iYXNlNjRUb0FycmF5QnVmZmVyIiwiX3JlbW92ZU1pbWVUeXBlIiwiYmVsbFNvdW5kIiwiY29ubmVjdCIsImRlc3RpbmF0aW9uIiwiYmFzZTY0IiwiYmluYXJ5U3RyaW5nIiwiYXRvYiIsImxlbiIsImJ5dGVzIiwiVWludDhBcnJheSIsImNoYXJDb2RlQXQiLCJkYXRhVVJJIiwiX21heExlbmd0aCIsIm9uRGVsZXRlRW1pdHRlciIsIm9uSW5zZXJ0RW1pdHRlciIsIm9uVHJpbUVtaXR0ZXIiLCJfYXJyYXkiLCJBcnJheSIsIl9zdGFydEluZGV4IiwiX2xlbmd0aCIsIm5ld01heExlbmd0aCIsIm5ld0FycmF5IiwiX2dldEN5Y2xpY0luZGV4IiwibmV3TGVuZ3RoIiwicmVjeWNsZSIsImRlbGV0ZUNvdW50IiwiaXRlbXMiLCJjb3VudFRvVHJpbSIsInRyaW1TdGFydCIsInNoaWZ0RWxlbWVudHMiLCJleHBhbmRMaXN0QnkiLCJDaXJjdWxhckxpc3QiLCJjbG9uZSIsInZhbCIsImRlcHRoIiwiY2xvbmVkT2JqZWN0IiwiaXNBcnJheSIsImhhc1dyaXRlU3luY1dhcm5IYXBwZW5lZCIsIl9vbkJpbmFyeSIsIl9vbkRhdGEiLCJfb25MaW5lRmVlZCIsIkluc3RhbnRpYXRpb25TZXJ2aWNlIiwiT3B0aW9uc1NlcnZpY2UiLCJCdWZmZXJTZXJ2aWNlIiwiTG9nU2VydmljZSIsIkNvcmVTZXJ2aWNlIiwiQ29yZU1vdXNlU2VydmljZSIsIklDb3JlTW91c2VTZXJ2aWNlIiwiX2RpcnR5Um93U2VydmljZSIsIkRpcnR5Um93U2VydmljZSIsIklEaXJ0eVJvd1NlcnZpY2UiLCJ1bmljb2RlU2VydmljZSIsIlVuaWNvZGVTZXJ2aWNlIiwiX2NoYXJzZXRTZXJ2aWNlIiwiQ2hhcnNldFNlcnZpY2UiLCJJQ2hhcnNldFNlcnZpY2UiLCJJbnB1dEhhbmRsZXIiLCJtYXJrUmFuZ2VEaXJ0eSIsInNjcm9sbEJvdHRvbSIsIl93cml0ZUJ1ZmZlciIsIldyaXRlQnVmZmVyIiwicHJvbWlzZVJlc3VsdCIsInBhcnNlIiwiX29uU2Nyb2xsQXBpIiwiX3dpbmRvd3NNb2RlIiwid3JpdGVTeW5jIiwibWF4U3Vic2VxdWVudENhbGxzIiwiTG9nTGV2ZWxFbnVtIiwiV0FSTiIsIk1JTklNVU1fQ09MUyIsIk1JTklNVU1fUk9XUyIsInNjcm9sbCIsImVyYXNlQXR0ciIsInJlZ2lzdGVyRXNjSGFuZGxlciIsInJlZ2lzdGVyRGNzSGFuZGxlciIsInJlZ2lzdGVyQ3NpSGFuZGxlciIsInJlZ2lzdGVyT3NjSGFuZGxlciIsIndpbmRvd3NNb2RlIiwiX2VuYWJsZVdpbmRvd3NNb2RlIiwidXBkYXRlV2luZG93c01vZGVXcmFwcGVkU3RhdGUiLCJmaW5hbCIsIl9saXN0ZW5lcnMiLCJfZGlzcG9zZWQiLCJfZXZlbnQiLCJhcmcxIiwiYXJnMiIsInF1ZXVlIiwiY2FsbCIsImZyb20iLCJ0byIsIkdMRVZFTCIsIk1BWF9QQVJTRUJVRkZFUl9MRU5HVEgiLCJwYXJhbVRvV2luZG93T3B0aW9uIiwibiIsIm9wdHMiLCJzZXRXaW5MaW5lcyIsInJlc3RvcmVXaW4iLCJtaW5pbWl6ZVdpbiIsInNldFdpblBvc2l0aW9uIiwic2V0V2luU2l6ZVBpeGVscyIsInJhaXNlV2luIiwibG93ZXJXaW4iLCJyZWZyZXNoV2luIiwic2V0V2luU2l6ZUNoYXJzIiwibWF4aW1pemVXaW4iLCJmdWxsc2NyZWVuV2luIiwiZ2V0V2luU3RhdGUiLCJnZXRXaW5Qb3NpdGlvbiIsImdldFdpblNpemVQaXhlbHMiLCJnZXRTY3JlZW5TaXplUGl4ZWxzIiwiZ2V0Q2VsbFNpemVQaXhlbHMiLCJnZXRXaW5TaXplQ2hhcnMiLCJnZXRTY3JlZW5TaXplQ2hhcnMiLCJnZXRJY29uVGl0bGUiLCJnZXRXaW5UaXRsZSIsInB1c2hUaXRsZSIsInBvcFRpdGxlIiwiX2RhdGEiLCJVaW50MzJBcnJheSIsImhvb2siLCJwYXJhbXMiLCJwdXQiLCJjb25jYXQiLCJzdWJhcnJheSIsInVuaG9vayIsInN1Y2Nlc3MiLCJ1dGYzMlRvU3RyaW5nIiwicHQiLCJfY29yZU1vdXNlU2VydmljZSIsIkVzY2FwZVNlcXVlbmNlUGFyc2VyIiwiX3BhcnNlQnVmZmVyIiwiX3N0cmluZ0RlY29kZXIiLCJTdHJpbmdUb1V0ZjMyIiwiX3V0ZjhEZWNvZGVyIiwiVXRmOFRvVXRmMzIiLCJfd2luZG93VGl0bGUiLCJfaWNvbk5hbWUiLCJfd2luZG93VGl0bGVTdGFjayIsIl9pY29uTmFtZVN0YWNrIiwiX2N1ckF0dHJEYXRhIiwiX2VyYXNlQXR0ckRhdGFJbnRlcm5hbCIsIl9vblJlcXVlc3RCZWxsIiwiX29uUmVxdWVzdFJlZnJlc2hSb3dzIiwiX29uUmVxdWVzdFJlc2V0IiwiX29uUmVxdWVzdFNlbmRGb2N1cyIsIl9vblJlcXVlc3RTeW5jU2Nyb2xsQmFyIiwiX29uUmVxdWVzdFdpbmRvd3NPcHRpb25zUmVwb3J0IiwiX29uQTExeUNoYXIiLCJfb25BMTF5VGFiIiwiX29uQ29sb3IiLCJfcGFyc2VTdGFjayIsInBhdXNlZCIsImN1cnNvclN0YXJ0WCIsImN1cnNvclN0YXJ0WSIsImRlY29kZWRMZW5ndGgiLCJfc3BlY2lhbENvbG9ycyIsInNldENzaUhhbmRsZXJGYWxsYmFjayIsImlkZW50aWZpZXIiLCJpZGVudFRvU3RyaW5nIiwidG9BcnJheSIsInNldEVzY0hhbmRsZXJGYWxsYmFjayIsInNldEV4ZWN1dGVIYW5kbGVyRmFsbGJhY2siLCJzZXRPc2NIYW5kbGVyRmFsbGJhY2siLCJzZXREY3NIYW5kbGVyRmFsbGJhY2siLCJwYXlsb2FkIiwic2V0UHJpbnRIYW5kbGVyIiwicHJpbnQiLCJpbnNlcnRDaGFycyIsImludGVybWVkaWF0ZXMiLCJzY3JvbGxMZWZ0IiwiY3Vyc29yVXAiLCJzY3JvbGxSaWdodCIsImN1cnNvckRvd24iLCJjdXJzb3JGb3J3YXJkIiwiY3Vyc29yQmFja3dhcmQiLCJjdXJzb3JOZXh0TGluZSIsImN1cnNvclByZWNlZGluZ0xpbmUiLCJjdXJzb3JDaGFyQWJzb2x1dGUiLCJjdXJzb3JQb3NpdGlvbiIsImN1cnNvckZvcndhcmRUYWIiLCJlcmFzZUluRGlzcGxheSIsInByZWZpeCIsImVyYXNlSW5MaW5lIiwiaW5zZXJ0TGluZXMiLCJkZWxldGVMaW5lcyIsImRlbGV0ZUNoYXJzIiwic2Nyb2xsVXAiLCJzY3JvbGxEb3duIiwiZXJhc2VDaGFycyIsImN1cnNvckJhY2t3YXJkVGFiIiwiY2hhclBvc0Fic29sdXRlIiwiaFBvc2l0aW9uUmVsYXRpdmUiLCJyZXBlYXRQcmVjZWRpbmdDaGFyYWN0ZXIiLCJzZW5kRGV2aWNlQXR0cmlidXRlc1ByaW1hcnkiLCJzZW5kRGV2aWNlQXR0cmlidXRlc1NlY29uZGFyeSIsImxpbmVQb3NBYnNvbHV0ZSIsInZQb3NpdGlvblJlbGF0aXZlIiwiaFZQb3NpdGlvbiIsInRhYkNsZWFyIiwic2V0TW9kZSIsInNldE1vZGVQcml2YXRlIiwicmVzZXRNb2RlIiwicmVzZXRNb2RlUHJpdmF0ZSIsImNoYXJBdHRyaWJ1dGVzIiwiZGV2aWNlU3RhdHVzIiwiZGV2aWNlU3RhdHVzUHJpdmF0ZSIsInNvZnRSZXNldCIsInNldEN1cnNvclN0eWxlIiwic2V0U2Nyb2xsUmVnaW9uIiwic2F2ZUN1cnNvciIsIndpbmRvd09wdGlvbnMiLCJyZXN0b3JlQ3Vyc29yIiwiaW5zZXJ0Q29sdW1ucyIsImRlbGV0ZUNvbHVtbnMiLCJzZXRFeGVjdXRlSGFuZGxlciIsIkxGIiwibGluZUZlZWQiLCJWVCIsIkZGIiwiY2FycmlhZ2VSZXR1cm4iLCJCUyIsImJhY2tzcGFjZSIsIkhUIiwidGFiIiwiU08iLCJzaGlmdE91dCIsIlNJIiwic2hpZnRJbiIsIkMxIiwiSU5EIiwiTkVMIiwibmV4dExpbmUiLCJIVFMiLCJ0YWJTZXQiLCJPc2NIYW5kbGVyIiwic2V0VGl0bGUiLCJzZXRJY29uTmFtZSIsInNldE9yUmVwb3J0SW5kZXhlZENvbG9yIiwic2V0T3JSZXBvcnRGZ0NvbG9yIiwic2V0T3JSZXBvcnRCZ0NvbG9yIiwic2V0T3JSZXBvcnRDdXJzb3JDb2xvciIsInJlc3RvcmVJbmRleGVkQ29sb3IiLCJyZXN0b3JlRmdDb2xvciIsInJlc3RvcmVCZ0NvbG9yIiwicmVzdG9yZUN1cnNvckNvbG9yIiwicmV2ZXJzZUluZGV4Iiwia2V5cGFkQXBwbGljYXRpb25Nb2RlIiwia2V5cGFkTnVtZXJpY01vZGUiLCJmdWxsUmVzZXQiLCJzZXRnTGV2ZWwiLCJzZWxlY3REZWZhdWx0Q2hhcnNldCIsImZsYWciLCJzZWxlY3RDaGFyc2V0IiwiQ0hBUlNFVFMiLCJzY3JlZW5BbGlnbm1lbnRQYXR0ZXJuIiwic2V0RXJyb3JIYW5kbGVyIiwiREVDUlFTUyIsIl9wcmVzZXJ2ZVN0YWNrIiwiX2xvZ1Nsb3dSZXNvbHZpbmdBc3luYyIsInAiLCJQcm9taXNlIiwicmFjZSIsInJlcyIsInJlaiIsImNhdGNoIiwiZXJyIiwid2FzUGF1c2VkIiwiREVCVUciLCJwcm90b3R5cGUiLCJjbGVhclJhbmdlIiwiZGVjb2RlIiwiY2hXaWR0aCIsImNoYXJzZXQiLCJjdXJBdHRyIiwiYnVmZmVyUm93IiwibWFya0RpcnR5Iiwic2V0Q2VsbEZyb21Db2RlUG9pbnQiLCJleHRlbmRlZCIsIndjd2lkdGgiLCJjaCIsInN0cmluZ0Zyb21Db2RlUG9pbnQiLCJfZXJhc2VBdHRyRGF0YSIsImluc2VydENlbGxzIiwiZ2V0TnVsbENlbGwiLCJOVUxMX0NFTExfV0lEVEgiLCJhZGRDb2RlcG9pbnRUb0NlbGwiLCJwcmVjZWRpbmdDb2RlcG9pbnQiLCJoYXNDb250ZW50IiwiRGNzSGFuZGxlciIsImNvbnZlcnRFb2wiLCJfcmVzdHJpY3RDdXJzb3IiLCJvcmlnaW5hbFgiLCJuZXh0U3RvcCIsIm1heENvbCIsIl9zZXRDdXJzb3IiLCJfbW92ZUN1cnNvciIsImRpZmZUb1RvcCIsImRpZmZUb0JvdHRvbSIsInBhcmFtIiwidGFicyIsInByZXZTdG9wIiwiX2VyYXNlSW5CdWZmZXJMaW5lIiwiY2xlYXJXcmFwIiwicmVwbGFjZUNlbGxzIiwiX3Jlc2V0QnVmZmVyTGluZSIsImZpbGwiLCJzY3JvbGxCYWNrU2l6ZSIsInNjcm9sbEJvdHRvbVJvd3NPZmZzZXQiLCJzY3JvbGxCb3R0b21BYnNvbHV0ZSIsImRlbGV0ZUNlbGxzIiwiX2lzIiwidGVybSIsInRlcm1OYW1lIiwic2V0Z0NoYXJzZXQiLCJERUZBVUxUX0NIQVJTRVQiLCJhY3RpdmVFbmNvZGluZyIsImFjdGl2YXRlQWx0QnVmZmVyIiwiYWN0aXZhdGVOb3JtYWxCdWZmZXIiLCJfdXBkYXRlQXR0ckNvbG9yIiwibW9kZSIsImMxIiwiYzIiLCJjMyIsImZyb21Db2xvclJHQiIsIl9leHRyYWN0Q29sb3IiLCJhY2N1IiwiY1NwYWNlIiwiYWR2YW5jZSIsImhhc1N1YlBhcmFtcyIsInN1YnBhcmFtcyIsImdldFN1YlBhcmFtcyIsInVuZGVybGluZUNvbG9yIiwiX3Byb2Nlc3NVbmRlcmxpbmUiLCJ1bmRlcmxpbmVTdHlsZSIsInVwZGF0ZUV4dGVuZGVkIiwic2F2ZWRYIiwic2F2ZWRZIiwic2F2ZWRDdXJBdHRyRGF0YSIsInNhdmVkQ2hhcnNldCIsImlzQmxpbmtpbmciLCJib3R0b20iLCJzZWNvbmQiLCJfc2F2ZWRDaGFyc2V0Iiwic2xvdHMiLCJzcGVjIiwicGFyc2VDb2xvciIsIl9zZXRPclJlcG9ydFNwZWNpYWxDb2xvciIsImNvbGxlY3RBbmRGbGFnIiwic2Nyb2xsUmVnaW9uSGVpZ2h0IiwibGV2ZWwiLCJtYXJrQWxsRGlydHkiLCJfZGlzcG9zYWJsZXMiLCJkIiwidW5yZWdpc3RlciIsImRpc3Bvc2FibGVzIiwiYXJyYXkiLCJpc05vZGUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJwbGF0Zm9ybSIsInRlc3QiLCJpc0lwYWQiLCJpc0lwaG9uZSIsImZpbGxGYWxsYmFjayIsImNvbnN0cnVjdG9yIiwibGFzdENoYXIiLCJDSEFSX0RBVEFfQ09ERV9JTkRFWCIsIkV4dGVuZGVkQXR0cnMiLCJuZXdPYmoiLCJpc0JsaW5rIiwiaXNGZ1BhbGV0dGUiLCJpc0F0dHJpYnV0ZURlZmF1bHQiLCJoYXNFeHRlbmRlZEF0dHJzIiwiZ2V0VW5kZXJsaW5lQ29sb3IiLCJnZXRVbmRlcmxpbmVDb2xvck1vZGUiLCJpc1VuZGVybGluZUNvbG9yUkdCIiwiaXNVbmRlcmxpbmVDb2xvclBhbGV0dGUiLCJpc1VuZGVybGluZUNvbG9yRGVmYXVsdCIsImdldFVuZGVybGluZVN0eWxlIiwiTUFYX0JVRkZFUl9TSVpFIiwiX2hhc1Njcm9sbGJhY2siLCJfbnVsbENlbGwiLCJmcm9tQ2hhckRhdGEiLCJOVUxMX0NFTExfQ0hBUiIsIl93aGl0ZXNwYWNlQ2VsbCIsIldISVRFU1BBQ0VfQ0VMTF9XSURUSCIsIl9pc0NsZWFyaW5nIiwiX2NvbHMiLCJfcm93cyIsIl9nZXRDb3JyZWN0QnVmZmVyTGVuZ3RoIiwiZ2V0V2hpdGVzcGFjZUNlbGwiLCJCdWZmZXJMaW5lIiwibWF4TGVuZ3RoIiwicmVsYXRpdmVZIiwiY29ycmVjdEJ1ZmZlckxlbmd0aCIsImZpbGxWaWV3cG9ydFJvd3MiLCJmaWxsQXR0ciIsIm5ld0NvbHMiLCJuZXdSb3dzIiwibnVsbENlbGwiLCJhZGRUb1kiLCJhbW91bnRUb1RyaW0iLCJfaXNSZWZsb3dFbmFibGVkIiwiX3JlZmxvdyIsIl9yZWZsb3dMYXJnZXIiLCJfcmVmbG93U21hbGxlciIsInRvUmVtb3ZlIiwicmVmbG93TGFyZ2VyR2V0TGluZXNUb1JlbW92ZSIsIm5ld0xheW91dFJlc3VsdCIsInJlZmxvd0xhcmdlckNyZWF0ZU5ld0xheW91dCIsInJlZmxvd0xhcmdlckFwcGx5TmV3TGF5b3V0IiwibGF5b3V0IiwiX3JlZmxvd0xhcmdlckFkanVzdFZpZXdwb3J0IiwiY291bnRSZW1vdmVkIiwidmlld3BvcnRBZGp1c3RtZW50cyIsInRvSW5zZXJ0IiwiY291bnRUb0luc2VydCIsIndyYXBwZWRMaW5lcyIsImFic29sdXRlWSIsInRyaW1tZWRMaW5lcyIsImxhc3RMaW5lTGVuZ3RoIiwiZGVzdExpbmVMZW5ndGhzIiwicmVmbG93U21hbGxlckdldE5ld0xpbmVMZW5ndGhzIiwibGluZXNUb0FkZCIsIm5ld0xpbmVzIiwibmV3TGluZSIsImRlc3RMaW5lSW5kZXgiLCJkZXN0Q29sIiwic3JjTGluZUluZGV4Iiwic3JjQ29sIiwiY2VsbHNUb0NvcHkiLCJjb3B5Q2VsbHNGcm9tIiwid3JhcHBlZExpbmVzSW5kZXgiLCJnZXRXcmFwcGVkTGluZVRyaW1tZWRMZW5ndGgiLCJzZXRDZWxsIiwiaW5zZXJ0RXZlbnRzIiwib3JpZ2luYWxMaW5lcyIsIm9yaWdpbmFsTGluZXNMZW5ndGgiLCJvcmlnaW5hbExpbmVJbmRleCIsIm5leHRUb0luc2VydEluZGV4IiwibmV4dFRvSW5zZXJ0IiwiY291bnRJbnNlcnRlZFNvRmFyIiwibmV4dEkiLCJpbnNlcnRDb3VudEVtaXR0ZWQiLCJsaW5lSW5kZXgiLCJ0cmltUmlnaHQiLCJDSEFSX0RBVEFfV0lEVEhfSU5ERVgiLCJDSEFSX0RBVEFfQ0hBUl9JTkRFWCIsInRhYlN0b3BXaWR0aCIsIk1hcmtlciIsIm9uSW5zZXJ0Iiwib25EZWxldGUiLCJfcmVtb3ZlTWFya2VyIiwic3RhcnRPdmVyc2NhbiIsImVuZE92ZXJzY2FuIiwiQnVmZmVyU3RyaW5nSXRlcmF0b3IiLCJCdWZmZXIiLCJfdHJpbVJpZ2h0IiwiX2VuZEluZGV4IiwiX3N0YXJ0T3ZlcnNjYW4iLCJfZW5kT3ZlcnNjYW4iLCJfY3VycmVudCIsImZpbGxDZWxsRGF0YSIsIl9jb21iaW5lZCIsIl9leHRlbmRlZEF0dHJzIiwiY3AiLCJDSEFSX0RBVEFfQVRUUl9JTkRFWCIsImNvZGVQb2ludCIsImVBdHRycyIsImtleXMiLCJjb3B5RnJvbSIsInNyYyIsImFwcGx5SW5SZXZlcnNlIiwic3JjRGF0YSIsInNyY0NvbWJpbmVkS2V5cyIsImJ1ZmZlckNvbHMiLCJlbmRzSW5OdWxsIiwiZm9sbG93aW5nTGluZVN0YXJ0c1dpdGhXaWRlIiwib2xkQ29scyIsImJ1ZmZlckFic29sdXRlWSIsInNyY1RyaW1tZWRUaW5lTGVuZ3RoIiwic3JjUmVtYWluaW5nQ2VsbHMiLCJkZXN0UmVtYWluaW5nQ2VsbHMiLCJjb3VudFRvUmVtb3ZlIiwibmV4dFRvUmVtb3ZlSW5kZXgiLCJuZXh0VG9SZW1vdmVTdGFydCIsImNvdW50UmVtb3ZlZFNvRmFyIiwibmV3TGF5b3V0IiwibmV3TGF5b3V0TGluZXMiLCJuZXdMaW5lTGVuZ3RocyIsImNlbGxzTmVlZGVkIiwicmVkdWNlIiwic3JjTGluZSIsImNlbGxzQXZhaWxhYmxlIiwib2xkVHJpbW1lZExlbmd0aCIsImVuZHNXaXRoV2lkZSIsIl9ub3JtYWwiLCJfYWx0IiwiaW5hY3RpdmVCdWZmZXIiLCJCdWZmZXJTZXQiLCJvYmoiLCJjb21iaW5lZCIsIkRFRkFVTFRfQVRUUiIsIl9uZXh0SWQiLCJDIiwiTlVMIiwiU09IIiwiU1RYIiwiRU9UIiwiRU5RIiwiQUNLIiwiRExFIiwiREMxIiwiREMyIiwiREMzIiwiREM0IiwiTkFLIiwiU1lOIiwiRVRCIiwiQ0FOIiwiRU0iLCJTVUIiLCJGUyIsIkdTIiwiUlMiLCJVUyIsIlNQIiwiREVMIiwiUEFEIiwiSE9QIiwiQlBIIiwiTkJIIiwiU1NBIiwiRVNBIiwiSFRKIiwiVlRTIiwiUExEIiwiUExVIiwiUkkiLCJTUzIiLCJTUzMiLCJEQ1MiLCJQVTEiLCJQVTIiLCJTVFMiLCJDQ0giLCJNVyIsIlNQQSIsIkVQQSIsIlNPUyIsIlNHQ0kiLCJTQ0kiLCJDU0kiLCJTVCIsIk9TQyIsIlBNIiwiQVBDIiwiS0VZQ09ERV9LRVlfTUFQUElOR1MiLCJhcHBsaWNhdGlvbkN1cnNvck1vZGUiLCJtb2RpZmllcnMiLCJrZXlNYXBwaW5nIiwiY29kZXBvaW50IiwiX2ludGVyaW0iLCJzdGFydFBvcyIsImludGVyaW0iLCJieXRlMSIsImJ5dGUyIiwiYnl0ZTMiLCJieXRlNCIsImRpc2NhcmRJbnRlcmltIiwidG1wIiwibWlzc2luZyIsImZvdXJTdG9wIiwidGFibGUiLCJCTVBfQ09NQklOSU5HIiwiSElHSF9DT01CSU5JTkciLCJ2ZXJzaW9uIiwibnVtIiwidWNzIiwibWlkIiwiYmlzZWFyY2giLCJVbmljb2RlVjYiLCJxbXQiLCJxdWV1ZU1pY3JvdGFzayIsImNiIiwicmVzb2x2ZSIsIl9hY3Rpb24iLCJfY2FsbGJhY2tzIiwiX3BlbmRpbmdEYXRhIiwiX2J1ZmZlck9mZnNldCIsIl9pc1N5bmNXcml0aW5nIiwiX3N5bmNDYWxscyIsImNodW5rIiwiX2lubmVyV3JpdGUiLCJsYXN0VGltZSIsInN0YXJ0VGltZSIsIlJHQl9SRVgiLCJIQVNIX1JFWCIsInBhZCIsImJpdHMiLCJzMiIsImxvdyIsInRvTG93ZXJDYXNlIiwiYmFzZSIsImFkdiIsIlBBWUxPQURfTElNSVQiLCJFTVBUWV9IQU5ETEVSUyIsIl9oYW5kbGVycyIsImNyZWF0ZSIsIl9hY3RpdmUiLCJfaWRlbnQiLCJfaGFuZGxlckZiIiwiX3N0YWNrIiwibG9vcFBvc2l0aW9uIiwiZmFsbFRocm91Z2giLCJyZWdpc3RlckhhbmRsZXIiLCJoYW5kbGVyTGlzdCIsImhhbmRsZXJJbmRleCIsImNsZWFySGFuZGxlciIsInNldEhhbmRsZXJGYWxsYmFjayIsImhhbmRsZXJSZXN1bHQiLCJEY3NQYXJzZXIiLCJFTVBUWV9QQVJBTVMiLCJQYXJhbXMiLCJhZGRQYXJhbSIsIl9oYW5kbGVyIiwiX3BhcmFtcyIsIl9oaXRMaW1pdCIsInJldCIsInNldERlZmF1bHQiLCJhZGRNYW55IiwiY29kZXMiLCJUcmFuc2l0aW9uVGFibGUiLCJOT05fQVNDSUlfUFJJTlRBQkxFIiwiVlQ1MDBfVFJBTlNJVElPTl9UQUJMRSIsImJsdWVwcmludCIsImFwcGx5IiwidW51c2VkIiwiUFJJTlRBQkxFUyIsIkVYRUNVVEFCTEVTIiwic3RhdGVzIiwiX3RyYW5zaXRpb25zIiwiaGFuZGxlcnMiLCJoYW5kbGVyUG9zIiwidHJhbnNpdGlvbiIsImNodW5rUG9zIiwiaW5pdGlhbFN0YXRlIiwiY3VycmVudFN0YXRlIiwiX2NvbGxlY3QiLCJfcHJpbnRIYW5kbGVyRmIiLCJfZXhlY3V0ZUhhbmRsZXJGYiIsIl9jc2lIYW5kbGVyRmIiLCJfZXNjSGFuZGxlckZiIiwiX2Vycm9ySGFuZGxlckZiIiwiX3ByaW50SGFuZGxlciIsIl9leGVjdXRlSGFuZGxlcnMiLCJfY3NpSGFuZGxlcnMiLCJfZXNjSGFuZGxlcnMiLCJfb3NjUGFyc2VyIiwiT3NjUGFyc2VyIiwiX2Rjc1BhcnNlciIsIl9lcnJvckhhbmRsZXIiLCJfaWRlbnRpZmllciIsImZpbmFsUmFuZ2UiLCJpbnRlcm1lZGlhdGUiLCJmaW5hbENvZGUiLCJyZXZlcnNlIiwiY2xlYXJQcmludEhhbmRsZXIiLCJjbGVhckVzY0hhbmRsZXIiLCJjbGVhckV4ZWN1dGVIYW5kbGVyIiwiY2xlYXJDc2lIYW5kbGVyIiwiY2xlYXJEY3NIYW5kbGVyIiwiY2xlYXJPc2NIYW5kbGVyIiwiY2xlYXJFcnJvckhhbmRsZXIiLCJjb2xsZWN0IiwiYWJvcnQiLCJhZGRTdWJQYXJhbSIsImFkZERpZ2l0IiwiaGFuZGxlcnNFc2MiLCJqaiIsIl9zdGFydCIsIl9wdXQiLCJNQVhfVkFMVUUiLCJtYXhTdWJQYXJhbXNMZW5ndGgiLCJJbnQzMkFycmF5IiwiX3N1YlBhcmFtcyIsIl9zdWJQYXJhbXNMZW5ndGgiLCJfc3ViUGFyYW1zSWR4IiwiVWludDE2QXJyYXkiLCJfcmVqZWN0RGlnaXRzIiwiX3JlamVjdFN1YkRpZ2l0cyIsIl9kaWdpdElzU3ViIiwiZnJvbUFycmF5IiwiayIsIm5ld1BhcmFtcyIsImdldFN1YlBhcmFtc0FsbCIsInN0b3JlIiwiY3VyIiwiX2FkZG9ucyIsImluc3RhbmNlIiwidGVybWluYWwiLCJsb2FkZWRBZGRvbiIsIl93cmFwcGVkQWRkb25EaXNwb3NlIiwiaW5pdCIsImdldExpbmUiLCJCdWZmZXJMaW5lQXBpVmlldyIsIkJ1ZmZlckFwaVZpZXciLCJfbGluZSIsImdldENlbGwiLCJfb25CdWZmZXJDaGFuZ2UiLCJfYWx0ZXJuYXRlIiwiYWx0ZXJuYXRlIiwiYWRkQ3NpSGFuZGxlciIsImFkZERjc0hhbmRsZXIiLCJhZGRFc2NIYW5kbGVyIiwiYWRkT3NjSGFuZGxlciIsInByb3ZpZGVyIiwidmVyc2lvbnMiLCJhY3RpdmVWZXJzaW9uIiwiaXNVc2VyU2Nyb2xsaW5nIiwiX2NhY2hlZEJsYW5rTGluZSIsInRvcFJvdyIsImJvdHRvbVJvdyIsIndpbGxCdWZmZXJCZVRyaW1tZWQiLCJpc0Z1bGwiLCJvbGRZZGlzcCIsInNjcm9sbEFtb3VudCIsImdsZXZlbCIsIl9jaGFyc2V0cyIsIkRFRkFVTFRfUFJPVE9DT0xTIiwiTk9ORSIsInJlc3RyaWN0IiwiWDEwIiwiVlQyMDAiLCJEUkFHIiwiQU5ZIiwiZXZlbnRDb2RlIiwiaXNTR1IiLCJTIiwiREVGQVVMVF9FTkNPRElOR1MiLCJERUZBVUxUIiwiU0dSIiwiX3Byb3RvY29scyIsIl9lbmNvZGluZ3MiLCJfYWN0aXZlUHJvdG9jb2wiLCJfYWN0aXZlRW5jb2RpbmciLCJfb25Qcm90b2NvbENoYW5nZSIsIl9sYXN0RXZlbnQiLCJhZGRQcm90b2NvbCIsImFkZEVuY29kaW5nIiwibmFtZSIsInByb3RvY29sIiwiZW5jb2RpbmciLCJfY29tcGFyZUV2ZW50cyIsInJlcG9ydCIsInRyaWdnZXJCaW5hcnlFdmVudCIsImRvd24iLCJ1cCIsImRyYWciLCJtb3ZlIiwiZTEiLCJlMiIsIkRFRkFVTFRfTU9ERVMiLCJERUZBVUxUX0RFQ19QUklWQVRFX01PREVTIiwiX29uVXNlcklucHV0IiwiX3Njcm9sbFRvQm90dG9tIiwid2FzVXNlcklucHV0IiwiZGlzYWJsZVN0ZGluIiwiX2VuZCIsIl9lbnRyaWVzIiwic2VydmljZSIsIlNlcnZpY2VDb2xsZWN0aW9uIiwiX3NlcnZpY2VzIiwiZ2V0U2VydmljZSIsImN0b3IiLCJzZXJ2aWNlRGVwZW5kZW5jaWVzIiwiZ2V0U2VydmljZURlcGVuZGVuY2llcyIsInNvcnQiLCJzZXJ2aWNlQXJncyIsImRlcGVuZGVuY3kiLCJmaXJzdFNlcnZpY2VBcmdQb3MiLCJvcHRpb25zS2V5VG9Mb2dMZXZlbCIsImluZm8iLCJJTkZPIiwiRVJST1IiLCJvZmYiLCJPRkYiLCJfdXBkYXRlTG9nTGV2ZWwiLCJfZXZhbExhenlPcHRpb25hbFBhcmFtcyIsIm9wdGlvbmFsUGFyYW1zIiwiX2xvZyIsIm1lc3NhZ2UiLCJsb2ciLCJERUZBVUxUX0JFTExfU09VTkQiLCJERUZBVUxUX09QVElPTlMiLCJhbHRDbGlja01vdmVzQ3Vyc29yIiwiRk9OVF9XRUlHSFRfT1BUSU9OUyIsIl9vbk9wdGlvbkNoYW5nZSIsImRlZmF1bHRPcHRpb25zIiwibmV3VmFsdWUiLCJfc2FuaXRpemVBbmRWYWxpZGF0ZU9wdGlvbiIsIl9zZXR1cE9wdGlvbnMiLCJzdG9yZVNlcnZpY2VEZXBlbmRlbmN5Iiwic2VydmljZVJlZ2lzdHJ5IiwiZGVjb3JhdG9yIiwiYXJndW1lbnRzIiwiX3Byb3ZpZGVycyIsIl9vbkNoYW5nZSIsImRlZmF1bHRQcm92aWRlciIsIl9hY3RpdmVQcm92aWRlciIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iXSwic291cmNlUm9vdCI6IiJ9